hey what's going on everybody it's bro hope you're doing well and in this video i'm going to help you get started with python so
sit back relax and enjoy the show if you wouldn't mind please like comment
and subscribe one like equals one prayer for the youtube algorithm i'm gonna tell you why you need to learn
python it's the easiest programming language to learn as well as being the most popular in the world right now
and according to glassdoor the salary for new python developers in the united states is
64 000 if any of this sounds good to you well then let's get started if you need to
download python go to python.org downloads and click this yellow download python
button open when done check add python 3.9 or another version to path
install now and then give it a little bit it states here that setup was successful so let's close out of this
our next step is to download an ide that's an acronym for integrated development environment think
of it as software that helps us write other software one ide that i recommend
is pycharm you can find it at jetbrains.com pycharm go to download if you would like
to pay for a professional version you can click this download button but since i don't like to pay for things i'm going to use
the free community version at this point we just have to follow the standard installation procedure
click next you can pick a destination folder but i'll keep the default next if you would like a desktop
shortcut then check this i would also recommend updating the path variable next
install and then give it a minute or two then after finishing i have a desktop
shortcut so i can just click on this to run pycharm let's create a new project name this
project whatever you like i'm going to name this project hello world and i recommend not creating
a main dot pi welcome script right now i'll show you how to do that manually and let's create
if you need a python file to work with this is how to create one go to file new python file and i'm going to
name this main and then click python file
all right ladies and gentlemen we now have an empty python script that we can use to begin coding
now if you checked this box create a main.pi welcome script and then created a new project
then your main python file will probably look a little something like this but that's completely fine we can just
delete this i don't know about you guys but the font is very small for me so let's change that we can change that
by going to file settings editor font and you can
increase the font size let's say 25 you can also change the font too
what's a good one uh how about that then click apply and
okay much better we can actually see something to run a python script just click the
screen play button in the corner alternatively you can go to the run tab and then go to run
okay so this box that appeared at the bottom this is referred to as a terminal window this will display
any output that your program has and this line at the end process finished with exit code zero
that just means that there were no errors in this program so currently this program doesn't do anything but let's change that let's
print something let's print a message so to print a message to the terminal window
type print and then add a set of parentheses and then you can type a message but it has to be within quotes
either double quotes or single quotes it doesn't matter so let's think of a message i don't know
i love pizza then let me run this and in my terminal window it says i love
pizza to print another line just add another print statement print and then your message within
quotes it's really good
and well what do you know it printed i love pizza it's really good so ladies and gentlemen
you just wrote your first python program by the way you can change the font as well as the font color of your terminal
window by going to file settings then go to editor color scheme console font and console
colors let's change the font let's say i would like whatever this font is then click apply
let's change the font color too by going to console colors for any output you can click number two
and select a color let's say i would like bright green that should be decent
and for anything else let's say this will be a dark color so i can barely see it
so then let's click apply and okay oh yeah that's much better well
everybody that was your very first python program i'll post any useful links and timestamps for this
video in the comments section down below but yeah welcome to coding with python
hey you yeah i'm talking to you if you learned something new then help me help you in three easy
steps by smashing that like button drop a comment down below and subscribe if you'd like to become a
fellow bro [Music]
hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain how
variables work in python so sit back relax and enjoy the show
if you find this video helpful please remember to like comment and subscribe your support will
help keep this channel running all right let's do this a variable is a
container for a value it behaves as the value that it contains it's much like in algebra lessons back
in the day where we had to solve for whatever value x was and then we can reuse x and it
behaved exactly as that value well with programming we can do that plus we can assign variables of
different data types so they are not limited to just numbers we can assign whole words
numbers and even these things called booleans which are either true or false but i'll get more in depth into data
types a little bit later on in this video so let's create a variable and this is how to do so we need a unique name for
this variable let's say name name equals some value now the first data type that we'll cover
is strings a string is a series of characters so to create a string we can either use single quotes or
double quotes in python and we can assign this a value of whatever your own name is
so i will assign this variable name a value of bro now this variable will behave exactly as
if it was this value this name and then we can reuse this variable for something so let's print whatever our name is
print name and this will print whatever your name is to the console window now when you print your variable make
sure you don't put it within quotes because what we're doing then is literally printing
the word name as you can see here so if you need to use your variable for
something make sure it's not within quotes now we can combine our string variable
with another string so within our print statement let's print a string literal such as hello space
plus name so we are combining strings and then we're printing the results to the console window so this will print
hello bro now you can actually check the data type of a variable so i'm going to turn this line into a
comment so what you'll do is take the name of the variable surround this with a set of parentheses
and then precede the set of parentheses with the type function and this will print the data
type of this variable to the console window and you can see that it says class str
short for string a string is a series of characters a name is a good example of a string
a series of characters so that is how to check the data type of a variable just use the type function
now you can actually combine variables together as long as they're of the same data type so let's change our name to
maybe first name and we'll create a second variable called lastname now a common naming convention with
variables if it has two words separate each word with an underscore it's not necessary but it's common
practice for python and honestly i sometimes forget about that but don't tell anybody so let's create another variable called
last name last name equals whatever your last name is and then let's create a third variable
called full name full underscore name and let's combine first name plus last
name and let us display full name along with hello plus full name
now these two names were combined together to create a whole new variable actually what i think i'll
do is add a space within my variable so i'm doing a bunch of string concatenation i'm combining
the variable first name plus a space character plus last name so the result is hello
whatever your first name and last name is so that is a variable of the string data
type it is a series of characters now with strings we cannot normally use these for any sort of math
that's where the next data type comes in for the time being i just turned all of these lines into comments and we are
going to move on to the int data type short for integer this time let's create a variable called
age and we will assign this a value of whatever your age is let's just say that i'm 21 now when you
assign a value of the int data type make sure that it is not within quotes because then
technically it would be a string then and you can see that the color scheme for this number actually changed
so if this was a string we would treat it different than an int data type because with
strings we cannot normally use them for any sort of math so we now have a variable called edge
and we can actually increase or decrease or do whatever we want with the edge let's increase our age by one let's say
it's our birthday to do so we would say age equals age plus one and then let's print
our edge to the console window print edge and you can see that it says i am 22.
now there's a shorthand way of writing this what you'll do is type age plus equals one so that's kind of
like a shortcut and this would work the same too now let's print the data type of our inch variable because we can within a
print statement i will print the edge and add my edge variable to this type
function and this will print the data type of my edge variable to the console window and i will turn this line into a comment
just so that it doesn't get in the way now if i were to print the data type of my age variable
as you can see it is of the int data type short for integer it only stores a whole integer number
now what if this was a string so what i'm going to do is surround my value within a set of
quotes and i will turn this line into a comment so that it does not get in the way you can see that the data type of my age
variable is now a string and with strings we cannot normally use them for any sort of math
so let's attempt to increase our age variable by one and we ran into an error a type air can
only concatenate string to string not end now the point being is that
it's important to use the appropriate data type because with strings we cannot normally use them
for any sort of math you'll want to use a data type of a numeric value an int or a float which we'll discuss a
little bit later now here's a situation to consider what if we would like to display our edge variable along with a string
literal much like what we did with this line involving a string literal such as hello plus the user's full name so let's
attempt to do so and this is not going to work and i'll explain why so within our print statement let's say
something such as your age is plus edge now we're going to run into a type
error that's because we attempted to use string concatenation with a string literal
and a variable of a different data type a variable of the int data type in order to display our
edge along with the string we would need to convert our edge variable to the string data type and one way in which we can do
that is by type casting and we'll cover this more in the next video so we're going to surround
our age variable that is of the in data type with a set of parentheses and precede this with str short for
string and this will convert our variable to a string that will allow us to display it with another string
now if we were to run this program this way this will now display your age is and in this case 22 so if
you need to display a variable of a different data type along with the string you would just
need to use a stringcast to convert that data type to a string but we'll cover this more in the next
video on typecasting so that is the int data type it stores a
whole integer number and the next data type is the float data type and i'm going to turn
these lines into comments and we can move on now the float data type is a numeric value that can store
a number that includes a decimal portion an int data type cannot store a decimal
portion that's why it's in short for integer it only stores a whole number this time let's say we have a
height and i will assign this a perfectly normal height of maybe 250.5
centimeters so this decimal portion is important that's indicating that this is a
floating point number a float for short so let's print our height to the console window print
height and this will print whatever my height is and now let's check the type of our height using
the type function so within a print statement i'm going to add my height
surround this with another set of parentheses and precede this with the type function and the data type
of my variable height is a float short for a floating point number a numeric value that contains a decimal
portion and now for practice let's print our height along with a string literal so let's create a string literal
such as your height is plus height but guess what we're going
to do some type casting so surround height with a set of parentheses and precede this with
str so that we convert height to a string so that we can use string concatenation within this print
statement and this will print the message your height is 250.5 actually let's add
centimeters to the end so plus cm
and there we go and that is what a floating point number is float for short it is a numeric value
that contains a decimal portion now the last data type that we're going to cover is the boolean
data type it is a variable that can only store true or false let's say we have a variable
called human if we were to assign this a boolean value this would be either true or
false and we can print whatever this value is let's print whatever human is and this will display false now
the reason that you may want to use booleans instead of strings even though you can still store
a string representation of the word false or true is that these are very useful when we
get to if statements we can check to see if some statement is true so that is a good use of
boolean values now let's check the data type of my human variable so let's print
type human and this will print to the console window bool short for boolean now make sure
you're not putting this within quotes because then it's technically a string and they behave differently
now the data type is a string and you may have noticed as well that the font color has changed between
strings and boolean values so that's another good indicator now what if you need to display your
value along with a string using string concatenation well guess what we're going to typecast again so let's print something
r u a human so we need to use string concatenation
so i will convert my boolean variable of human to a string
and i have been programmed to inform you that yes i am in fact a human that is true
well everyone that is the basics of variables it is a container for a value and they behave
as the value that they contain there are four basic data types strings which store a series of
characters inc which store a whole integer floats which are floating point numbers a numeric
value with a decimal and booleans which only store true or false
and they're very useful with if statements so that is it for variables if you would like a copy of all this
code i will copy and paste all of this to the comments section down below but yeah that is how variables work in
python hey people what's going on it's bro hope you're doing well and in this video i'm going to explain
multiple assignment in python so sit back relax and enjoy the show
well then since you clicked on this video i should probably explain what multiple assignment is now multiple assignment allows us to
assign multiple variables at the same time using one line of code
here's an example of us using standard assignment let's say we have a variable name and i will set this to a value of
my name but you can use your name for this example let's say edge equals 21 and how about a
variable called attractive i think i'm going to set this to true
okay so we have a bunch of variables and then we can print the value of these variables with some
print statements so let's print name age and attractive
so we have name age attractive and as you would expect this prints bro
21 and true now another way in which we could write the same code is to use
multiple assignment and this allows us to assign multiple variables at the same time using one line of code
so i'm going to turn all of these lines into comments and this time we will only use one line of code but to
do this we're going to list all of our variables separated with a comma so that would be
name comma edge comma attractive and we will set them equal to those
values but in the same order separated by commas so that would be bro comma 21 comma true
and this would do the same thing only using one line of code here's another example let's say we have
four variables spongebob patrick sandy and squidward and let's pretend that they're all around
maybe 30 years old at least it seems like they're around 30 years old but i could be wrong i'm not too familiar with spongebob lore
so let's set them all equal to 30. now we could write this using four lines of code or
we could use multiple assignment to write the same thing using one line of code so if all of
these variables are all equal to the same value there's a little bit of different syntax here
so let's begin with the first variable of spongebob equals patrick
equals sandy equals squidward then we're going to set them
all equal to 30 and this should work just fine using only
one line of code well everybody that's pretty much it for multiple assignment it allows us to assign multiple variables at the same time
using one line of code i will post all of this code in the comments section down below
and well yeah that's how multiple assignment works in python hey what's going on everybody it's bro
hope you're doing well and in this video i'm going to demonstrate some useful string methods in python so
sit back relax and enjoy the show all right let's do this in this video
i'm going to be explaining and demonstrating a few useful methods available to us for strings
now let's create a variable called name for this example and you can use your own name if you want so we now have a variable called name
and for my first example let's print the length of our name variable
so to do that we can surround our name variable with the length method and this
will print and return how long the length of our string is and for me the length of my name
variable is three for three characters if i were to increase the size of my name
well then that's going to change to a so that is the length method and i'm just going to
turn this line into a comment and let's move on so next we have the find method
i just copy and pasted print name so i can reuse it name dot and actually if you have
intellisense setup if you add dot after your variable you'll get a suggestion or a few
suggestions of different methods and other features that you have access to so let's find find which is
uh screw this i'll just type find find then we can find the first index of
where this character is let's say i would like to find where capital b is well that is at index zero because
computers always start with zero so this first character would be zero then r
would be one and then o would be two for this example all right so that
is how to find a character within a string moving on so let's
capitalize our name and i should probably make this lowercase
so name dot capitalize and this will make my name capitalized
but if there's any spaces and then additional words it's not going to capitalize that only the first letter and your string
next we have upper this will make your string all uppercase name upper and now
it is uppercase guess what's next lower name dot lower
and i should probably make this capital again and everything is lowercase
we're making some good progress today next we have is digit this will return true or false
depending on if our string is a digit which it's not so this will print false
if i changed my string to a bunch of numbers like 1 2 3 then this will return true let's
change that back and move on next we have
is alpha are these alphabetical characters
oh make sure you add the parentheses afterwards my bad false because we added a space within
here now it's true so you can use is alpha to
check to see if your string contains only letters alphabetical letters
next we have count we can count how many characters are
within our string i would like to count how many o's are in here and this should return two that's right okay we're almost at
the end we can replace characters within our string so we use the replace method
and we pass in two arguments the character we would like to replace and the character we would like
to replace our character with i would like to change all o's to a's and now my name is brock hod oh you guys are
gonna like this next one this isn't technically a method but it's a really neat feature
so one thing that we can do that's available to us with python is that we can display a string multiple times by multiplying that
string by a given number so let's say i would like to display my name three times i can just take my
string variable then add times three and this will print my name three times bro bro bro like i said not
technically a method but it's a useful feature that you might be interested in that's related all right everybody so that is a few
useful methods available to us for strings if you would like a copy of all this code i will post this in the comments section
down below but yeah those are a few useful methods available to us for strings
hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to teach you guys all about typecasting in python so
sit back relax and enjoy the show all right welcome back everybody i have
a super quick video for you guys today on the subject of typecasting now typecasting is the ability to convert
the data type of a value to another data type here's an example that i've written already i'm just going to paste it
i have three variables for this example x y and z x contains one this is a whole
integer into for short y contains two point zero this is a floating point number
float four short you can tell it's a float because it ends with a decimal portion and z contains a string of three a
string is a series of characters and you can tell it's a string because it's surrounded with a set of quotes
and remember with strings we cannot normally perform math on strings so i have three print statements for x y
and z and as you would expect they contain the values of one two point zero and three now let's
begin by converting both y and z to the integer data type via typecasting in order to perform
typecasting on a value or variable type that value or variable and surround this with a set
of parentheses whoops i missed and then pre-save this with the data type you'd like to convert
this value or variable to i would like to convert y to an integer and then you can use this for whatever
you need so i'm going to replace y within my print statement with y after we typecast it as
an integer and this will display 1 2 not 2.0 it's the whole integer
of 2 and then 3. so this is not a permanent change if you need to make this as a permanent
change to y you'd have to reassign it so let's say y equals y and then we're going to
typecast y so let's round this with a set of parentheses and precede this with the data type we'd like to convert
y2 so now y is a whole integer and then we will print y without
typecast this time and our result is one two three now z z is storing a
string and with strings we cannot normally perform any math on strings for example within my print statement i
will state z times three you would think that the result would be nine right
well you're wrong it's going to print three three times if you need to convert a string to a int
or a float you would just have to typecast it so this time let's type cast z as an integer z
int and we will type cast z as an integer so then if we have z times three
the result is now 9 instead of 333 so that's the basic formula for type
casting now let's convert these to floating point numbers but let's include x as well because
x is feeling left out so let's convert x to a floating point number so float
parenthesis and we will surround this with x and display x
and actually let's convert y and z to floats as well because why not
the results are now 1.0 2.0 and 9.0 remember that we multiplied z times
three and then if we need to convert these values to a string
we would use the string cast
so the results now are 1 2.0 and 333 now you might be thinking to
yourself when would you need to convert an integer or a float to a string here's a situation let's say within our
print statements we need to print these variables along with another string so within our print statement
let's say x is plus x we would like to display these
together and let me copy this and do the same thing for y we'll say y is plus y
you cannot normally display a string along with an integer or a float because we're using some
string concatenation so this will result in a compilation error can only concatenate
string not int to string so that's a situation in which you might need to use
typecasting to convert an integer or float to a string so let's display
x and y as strings via typecasting so we'll surround x and y with a set of
parentheses and precede this with the data type we'd like to convert these values to we would like to convert x and y to both
strings and now this will compile and run just fine well everybody that's the basics of typecasting
if you would like a copy of all my code i will post everything in the comments down below if you found this video helpful don't be
afraid to help me out by smashing that like button drop a comment down below and subscribe
if you'd like to become a fellow bro hey what's going on everybody it's bro
hope you're doing well and in this video i'm going to teach you guys how we can accept some user input in python so sit
back relax and enjoy the show ladies and gentlemen this is where the
fun begins in this video i'm going to explain how we can accept some user input in python and we do so by using the input function
and then we type in our input to the console window but it would probably be good practice to let the user know what we want them
to type in exactly so let's ask for somebody's name within quotes inside the input function i'm
going to type what is your name and now our program will wait for us to enter in
some user input so you can use your own name for this example i'm going to type bro now to submit some user input you just
type or press enter now you can see that my process finished with exit code zero that means
the program is done running so we should probably do something with this value we can actually assign it to a variable so we can use it elsewhere in
our program so to do so we precede input with a variable like name works name equals
input and when we accept some user input we will assign it to this variable that we called them
and now we can do something with it so let's print a message involving our name variable that we have
so how about hello plus name now when i run this program we can
accept some user input and then do something with that input such as display message that says
hello bro and then you can type in whatever you want for your name let's say i'm dude what is your name
dude hello dude now this next part is very important when we accept user input it is always
of the string data type a series of characters what if we need to accept a number
well you can but you can't normally perform any math on it because it's of the string data type
we would need to cast it as either of the integer data type or of the float data type so here's an
example of why we can't perform any math on a string let's say we have a variable
called edge age equals input and let's ask how old somebody is how old
are you now i will add one to somebody's age let's pretend it's their birthday
age equals age plus one this will add one to their age now let's try and run this what is your
name bro how old are you let's say that i'm 21. okay we ran into an error a type error
can only concatenate string to string with what i mentioned previously we cannot normally use
strings for any sort of mathematical equation or operation we'll want to cast it to the integer or
the float data type so let's cast our user input to the integer data type and we will
surround our user input with a cast surround your input with a set of parenthesis and precede this with
int and now we can use this user input in a mathematical operation so let's try it even though this won't
display age yet so what is your name bro 21 and our program finished with
an x a code of zero there were no problems now let's attempt to display this edge so i will print
u r plus age plus years
old we're doing some string concatenation here what is your name bro how old are you 21
all right we ran into a type error again can only concatenate string to string you cannot normally display a variable
of the integer data type along with strings because we're doing string concatenation we're adding
strings together we would need to convert this variable back to the string data type so we can cast it we'll
surround our edge variable with a cast now this is what's going to happen we will accept some user input it will be of the string
data type and then we will immediately cast it to be of the integer data type so that we can treat it
as a number instead of a character and then if we need to display this edge we will need to convert it back to
a string so that we can use some string concatenation and display all of these strings together
and now let's try this theory so what is your name bro how old are you let's say i'm 21 hello
bro you are 22 years old here's a situation what if we enter a number that contains a decimal portion
so let's try this again let's say i'm 21.5 years old well now we ran into a different issue a
value error invalid literal for int with base 10 that means if we cast a string as an
integer it can only be a whole number a portion that does not contain a decimal and that is where the float
data type would come in it is a data type that can contain a decimal portion
for this example let's create a third variable called height and we will ask for somebody's height
input we'll create a prompt that says how tall are you
and we will cast this to be of the float data type so that our string our user input
can contain a decimal portion and then we can treat it as a number instead of a
series of characters and i think i will delete this line we won't really need it anymore and then let's print their height along
with a message u r plus then height but we need to cast this back to
being a string so we'll surround our height with a cast
plus let's say cm tall all right let's test this
what is your name bro how old are you let's say i'm 21 how tall are you let's
pretend that i'm 250.5 centimeters tall
i'm adding the 0.5 just to test to see if this will accept a floating point number
hello bro you are 21 years old you are 250.5 centimeters tall
not really all right everybody so that is the basics of user input in python normally with user
input it will give you a value of the string data type if you need to use that value for any sort of
math you'll probably need to cast it to be of the integer or the float data type so if you would like a copy of this
code i will post this in the comment section down below but yeah that's how to accept user input
in python hey what's going on everybody it's bro hope you're doing well and in this video
i'm going to demonstrate a few useful functions related to numbers in python so sit back relax and enjoy the show
okay let's begin in this video i'm going to be demonstrating a bunch of useful functions related to numbers
and a bunch of these functions are located within the math module now let's create a variable for
this example let's say pi equals 3.14 just the first few digits
of pi is fine for this example and now here's a bunch of useful functions that you guys would probably
be interested in the first is round round is a built-in function and all we do is type round
then add a set of parenthesis and then we can pass in a value or a variable as an argument and
the round function will round that number for us so pi rounded to the nearest whole integer
is you guessed it three now we can round a number up by using the seal function of the math
class seal short for ceiling so let's print our result and in order to access this
function within the math module we would type the name of the module dot and here's a bunch of functions that we
have access to so we are looking for seal and it's actually at the top here for me and at seal we'll round a number up to
the nearest whole integer so pi rounded up is four then on the flip side we can round a
number down by using floor and that is also located within the math module so let's type math dot floor and
pi rounded down would be three up next i have the absolute value
function but it's abs for short abs will give you the absolute value of a number
so the absolute value of pi actually let's make this negative 3.14 the absolute value will tell you how far
a number is away from zero so if you pass in a negative number it will give you a positive number so
that is abs short for absolute value next we have the pow function pow will raise
a base number to a power let's raise pi to the power of two so we pass in
two arguments a base and an exponent pi to the power of two is nine point
eight and some change so that is the pow function next we have square root
so this is located within the math module we'll type math dot s q r
t short for square root and the square root of pi is let's find out oh i guess we can't
pass in pi uh let's round a different number like 420
oh i guess that's because i made pi negative okay so the square root of 420 is 20.4 and some change so that is the
square root function all right we have two left we have the max function the max function will find the largest
of a varying amount of values so let's create three variables for this example
let's say x equals one y equals two and z equals three we can use the max
function to find the largest of these values so within a print statement let's use the max function and pass in
all of the different values or variables that you would like to compare so i would like to find the largest
value between x y and z and the result in this example
is three now the min function will find the lowest so min and then pass in your values or
variables so i would like to find the minimum value between x y and z and in this case it is one
well everybody those are a few useful functions that you guys might be interested in
if you guys would like a copy of this code i will post this in the comments section down below but yeah those are a few useful
functions related to numbers in python hey what's going on everybody
it's bro hope you're doing well and in this video i'm going to explain string slicing in python so sit back
relax and enjoy the show all right then let's talk about slicing
slicing can be used to create a substring by extracting elements from another string the same principle can also be applied
to different collections as well but in this video we're going to be focusing on slicing strings
now to slice a string we can either use the indexing operator which is a set of square brackets or by
use of the slice function to create a slice object this is a little more complex
we'll discuss the slice function near the end of this video so with slicing there are three optional
arguments three fields that we can fill in depending on where and how we want to slice our string a
starting index a stopping index and a step let's begin with the starting index
now for this example let's say we have a string variable called name and this will store
a value of whatever your own full name is yes i legally change my name to bro code you can use your own
name for this if you want so what i would like to do is to create a substring based off a sliced portion of my full
name so what i would like to do is create a substring based off of just the first
part of my name just bro so let's begin by creating a substring
maybe i'll call this first name equals now to slice a string
type in a string or the name of a variable that contains your string and follow this with the indexing
operator and like i said we'll discuss the slice function a little bit later so we need
a starting index and a stopping index but we'll begin with the starting index
where do we want to begin our slice so computers they always start with zero
so the first character in your string will have an index of zero i would like my slice to begin
at index 0 so i'll list that for the starting position the starting index so let's test this just to be sure it
works i'll just print first name and let's see if this prints
capital b which it does so following that same pattern the next character
within my string would have an index of one that would be r then the next index two would be
o and three should be an empty space all right so that is the starting index
within string slicing if we would like to slice an entire portion of our string
not just one letter we need a stopping index as well and both of these fields are separated
with a colon so let's say i would like to slice the first three characters of my string
so this would have an index of zero one two and this isn't going to work as you
would imagine and i'll explain why so you would think that indexes 0 through 2 would give us three letters
right but it only gives us two so this first index is inclusive
the stopping index is exclusive so if i want the first three characters the first three letters
in the string i would need the starting index to be zero and the stopping index to be three and
now this should print my first name and not anything else there is a shorthand way of writing this
too so if you were to leave this first index blank for start well python is going to assume
that this is zero the beginning of your string so this would be no different than what we had previously
just having colon three now let's try and create a separate substring for a last name so last
name name now we need a starting index and a stopping index so
we need the starting index at least so this would be zero one two three four
four colon and where do we want this to stop zero one two three four five
six seven and remember that this is exclusive so we're going to place eight here and
now i would like to display last name and this should just display code
and a shortcut is that if you were to leave stop blank but you still have that colon
this is a shorthand way of writing i would like every character starting at index four
and everything after until the end so there would be no change to this as well you can write it either way okay
so we still have to discuss step step is an optional field that we can set a value to
so step is how much we're increasing our index by between starting and stopping so it is
entirely possible to create a substring that will count only every second character after the first
normally step is one by default but if we were to set that to two we're going to count only
every second character so let's try this maybe i'll create a new variable called funky name because i
really don't know what else to call this for this example let's say funky name equals name and i'm
going to count only every second character including the first so the indexes would be zero colon
eight for my example but if you're using your own name that's probably going to be something different so the default first step is one and if
i were to display funky name as it is currently this will just display my full name but if we set step to two this will only
display every second character including the first so funky name is now for me at least b o c d now if step
was three this will print only every third character including the first where it's b space d a shorthand way of
writing this is that you could leave start and stop empty but the important thing is to have
these two colons python is going to assume that if you leave your starting index empty you're referring to index 0 the
beginning if your second index your stopping index is empty python will assume this will be the very
end of your string so just having two colons and then step three would be no different than what we had previously
or this next part i'm going to explain how we can reverse a string in python so
let's create a new substring variable called reversed name equals name i would like
to use the entire string so i can just use two colons python will fill in the rest
so for the step this is going to be negative one it's kind of like we're counting backwards and we're going to create
a new sub string based off my name but in reverse so if i were to print my reversed name
this is now edok orb i think that's how you pronounce it so that's how to reverse a string in
python using slicing now let's move on to part two of this video i'm going to be explaining the
slice function and we can use the slice function to create a slice object which is actually reusable so
that's somewhat convenient let's take a different scenario this time let's say we have a website url
website equals http colon2forwardslashes google.com but use whatever website you
want what i would like to do for this program is remove and create a substring based
off the website name and not anything else i would like to exclude the http portion as well as the
dot-com portion of this website url so let's break it down step by step our first step is to create a slice
object so i will name the slice object as slice slice equals and i will invoke the slice
function so within the parentheses of the slice function we can add up to three values a start a stop and a step
exactly the same as what we did with indexing however with the slice function we separate each of these values with a
comma instead of a colon but it works the same way so we would like our substring to begin where the name of
the website begins so we would like our start to be zero one two three four five six seven
so i will pass in seven for where my substring will begin and now each value within the slice
function will be separated with a comma instead of a colon like what we did with the indexing operator
now for the stop index that's going to be a little bit tricky and let me explain why one issue that
we're going to run into is that not all website names are consistent with their length they can
really vary so it is not possible for us to use the same stopping index
for each of these website urls so one way in which we can account for that is to use what is called a negative
index each character within a string has a positive index as well as a
negative index and a negative index works almost exactly the same way
except the character most on the right begins with a negative index of minus one and the character on the
left of that would be negative two negative three and negative four it's as if you're counting backwards so
with indexing we can use some combination of positive and negative indexing so i
would like my substring to end where this dot is so this would have a index of minus one minus two
minus three minus four and remember that this is exclusive so i would like my slice to begin at
index seven and a negative index of four for the stopping position
so that will give me just the website name and remove the http portion as well as the dot com
portion of my website url and now we have a slice object and we can reuse this
so to apply your slice object type in the name your string index operator and place your slice
right within here and let's print this so print our website and apply the slice to it
and now this should give us just the website name and now let's test this with maybe another website
i'll rename this as website one and let's create website2
and let's try a different website name for goodmeasure so let's try wikipedia so we can reuse
our slice object and we will apply our slice to website two this time and this should remove the url portions
http as well as com all right everybody so that is slicing strings
in python you can either use the indexing operator or the slice function to create a slice
object if you would like a copy of all this code i will post all of this in the comments section down below
but yeah that is how string slicing works in python hey what's going on people it's you bro
hope you're doing well and in this video i'm going to explain if statements else if statements and else statements and python so
sit back relax and enjoy the show all right people let's talk about if
statements an if statement is a block of code that will execute only if its condition
is true it's a very basic form of decision making with programming for this example let's create a prompt
where we will ask a user for their age and depending on what their age is we will print a response
so let's say age equals input and then we will add a prompt how old are you now this will return a
string so we should probably cast this as an integer data type so we now have a variable called age
where we will accept some user input let's check somebody's age with a variety of if statements
so let's check to see if somebody's age is greater than or equal to 18 so to create an if statement type if and
then some sort of condition if age is greater than or equal to 18 to finish this if statement add a colon
at the end now pay attention to this if i move down to the next line you'll notice that my cursor is now
indented any indented code underneath an if statement is the block of code for
that if statement so if this condition is true we will execute some block of code if it's false we'll skip
over it so if somebody's age is greater than or equal to 18 let's print you are an
adult and let's try this program how old are you let's say i'm 21 so my condition when we
get to the if statement is going to check to see if this condition is true if it is true we're going to
execute this block of code if it's not we skip over it so how old are you let's say i'm 21 i'm
going to hit enter and my if statement is true so we execute this block of code which prints
you are an adult so what if this condition is false let's say i'm 12. well then we're just
going to skip over this block of code and continue on with the rest of the program if you would like your program to take
some other course of action if this condition is false we can add an else statement so after the if statement add
else make sure you get the indentation right you don't want this within the block of code for the if statement
so if this condition is false we can take some other course of action so if
somebody's age is less than 18 let's print
you are a child so let's try this again i'm going to
enter that i am 12 years old not really but let's just pretend i am so this will now print you are a child
if this condition is false perform this block of code for the else statement
so with if statements we can check more than one condition before reaching the else statement by using an
else if statement and we add that after an if statement so it's shortened to e l
i f for else if so let's check to see if somebody's age is less than zero for some reason
so let's print you haven't been born yet
so with if statements we start at the top we first check the if statement if this is false we
move down to the next statement to check then we check our else if statement if this is also false then we resort to
the else statement the else statement is sort of like a last resort if all conditions
evaluate to be false then we execute the else statement so let's try this how old are you let's
say i'm negative 1 years old you haven't been born yet so with if statements we always begin
with an if statement and we check that condition if that condition evaluates to be false
then we will skip this block of code and move down to the else if statement if there is one it's optional if this
condition is also false then we will use our else statement as a last resort
if there is one if there is no else statement then we just skip over all of this then and continue on with the rest
of the program so you can add more than one else if statement so let's check something else
let's check to see else if age is equal to 100 so if you need to check
to see if a value is equal to a particular value make sure you use double equal signs
this is the comparison operator for equality if you use just one equal sign that's the assignment
operator and python thinks you're attempting to set age equal to 100 so if you want to check to see if age is
equal to 100 then use double equals so let's check to see if somebody's age is
equal to 100 so let's print you are a century
old now pay attention to this if i were to run this program how old are you let's say i'm 100. so
this is printing you are an adult that's because we first check our if statement and well we're 100
years old and 100 is greater than or equal to 18. so we print this block of code we execute this block
of code and then we skip everything else even though age is equal
to 100 within our else if statement so the order of your if statements
does matter so let's change this around let's add this to the very beginning and this will be
our if statement and we will set age is greater than or equal to 18 to be an
else if statement so we're first going to check to see if age is equal to 100
if not we will check to see if age is greater than or equal to 18 and we just follow that order so let's
try this again how old are you i am 100 years old you are a century old so we first check our if
statement if this condition is true we will execute this block of code if it's false we just go down the order
till we reach our else statement well everybody that is the basics of if
statements we have if statements else if statements and else statements so if you would like a copy of this code
i will post this in the comments down below but yeah that is how if statements work in python
hey what's going on everybody it's bro hope you're doing well in this video i'm going to explain logical operators in python so sit back
relax and enjoy the show all right everybody let's talk about
logical operators these are used to check if two or more conditional statements
are true so we'll be discussing the and as well as the or logical operators there's also a third
one called not but that works a little bit different and i'll explain why so let's create a program to demonstrate
this let's create a program where we will ask somebody for the temperature outside and then depending on the temperature if it falls within a
certain range we will print a message so we'll need to use and as well as or logical operators
to do this so here i have a prompt temp for temperature equals input what is the temperature outside
so i'm going to cast this as an integer data type so what if we want to check to see if
our temperature is within a certain range we can use the and logical operator to
check two or more conditional statements this is how we might do that let's check if temp
is greater than or equal to zero zero degrees celsius and we can check another condition too
if temp is less than or equal to 30 degrees celsius
so we need to add a colon at the end to finish this if statement and let me just fix some of the spacing
okay so with the and logical operator in order for this entire condition to be true
both conditions must be true this needs to be true and this needs to be true so if our
temperature is equal to or above 0 as well as being less than or equal to 30 that
means our temperature falls within a certain range so let's print a message such as the temperature
is good today print go
outside all right let's try it so what is the temperature outside let's
say it's 20 degrees celsius well the temperature is good today go outside
this condition is true 20 is greater than or equal to zero and temperature is less than or equal to
30. let's try a different temperature like negative 20 degrees celsius so it's really freaking cold outside right now
as you can see nothing happened because our first condition was false our temperature is not greater
than or equal to zero but our temperature is less than or equal to 30 so
our second condition is true but our first condition was false and in order for this entire statement
to be true since we're using the and logical operator both conditions must be true in order
for this statement to be true now let's discuss the or logical operator we can check to see if our temperature
is below or above a certain range so let's write else if temp is less than zero or
temp is greater than 30. so that means it's going to be either very cold outside or very hot outside so
let's print a message the temperature
is bad today print stay
inside all right let's try this again
what is the temperature outside it is negative 20 degrees outside the temperature is bad today stay inside
so with the orological operator as long as one of these conditions is true then the entire statement is
true it doesn't matter if one of them is false as long as one of them is true then the entire statement is true last but not least we have the
not logical operator this works a little bit different from the and as well as the or logical operator
because we can check one or more conditional statements instead of two or more conditional
statements so what the not logical operator will do is that it'll take a conditional statement if it's true
it's going to flip it to false if it's normally false it's going to flip it to true so for this example we
have another way in which we could write this although it's a little more complex so if our statement
is true what we can do is that we can flip it to false using the not logical operator if it's normally
false we can change it to true so what we'll do is surround one or more conditional statements with a set of
parentheses and precede everything within the parentheses with the not logical operator so if the statement is
normally true it's going to become false using the not logical operator if it's normally false it's going to be
true then let's do the same with the else if statement so surround one or more conditional
statements with the not logical operator so now these roles are going to be kind of reversed so let's
try this again what is the temperature outside it is negative 20 degrees outside the temperature is good today go outside
so what we should probably do is kind of reverse these rolls so i'm just going to swap
everything within these if statements with each other and now this should work the same as it
did before but we just wrote it a little bit different what is the temperature outside it is 15
degrees outside 15 degrees celsius the temperature is good today go outside so with the not logical operator you can
surround one or more conditional statements with the not logical operator and what this will
do is flip it from being false to true or from true to false well everybody that's the basics of
logical operators in python if you would like a copy of all this code i will post this in the comments
down below but yeah that's the basics of logical operators in python hey what's going on everybody
it's bro hope you're doing well and in this video i'm going to explain while loops in python so sit back
relax and enjoy the show so while loops a while loop is a
statement that will execute its block of code as long as its condition remains true
later on in this video for this example we're going to create a program where we will prompt a user to
enter their name if they attempt to skip that prompt then we will continually ask the user to
enter their name and they can't continue on with the rest of the program until they do so the key thing to keep in mind with while loops
is that you'll want some way to eventually escape the while loop if you don't have any way to escape the while loop that's referred to as an
infinite loop so let's create an example of an infinite loop because it's fun so to create a while loop type while and
then some sort of condition so for our condition let's say while one is equal to one so this will always be true now what do
we want to do when we execute this block of code let's print something print help i'm
stuck in a loop all right so let's try this while one is equal to one print this
statement and we will just continue on and on within this while loop because we have
no way to escape this while loop so now let's use this concept and write a program where we will prompt a user to
type in their name if they don't type in anything then we will continue to prompt them to type in at least something
so let's say name is equal to and then to just keep this blank we'll just set this to a set of quotes
and then let's write a while loop here while name and let's check the length of name if
the length of our name is equal to zero then we will ask the user to
type in their name name equals input enter your name
so then once we escape the while loop let's print something print hello plus
name whoops hello plus name alright so when i run this we are giving
the user a way to escape the while loop they have to type in something for their name as long as the length of my name is
equal to zero keep on printing this prompt enter your name so i'm just going to hit enter a bunch
of times enter your name no enter your name no enter your name no so we are stuck within this loop until
we enter something for our name so this time let me type in a name then hit enter
so therefore our condition is now false the length of my name is now one two three so
three is not equal to zero therefore our while statement our while loop is false and we continue on with the rest of the
program there are a few variations in which you could write the same program so let's write this a different way what we
could do is say name is equal to none while not name and this will pretty much do
the same thing it's just another way of writing this well everybody that's the basics of while loops a while loop is a statement
that will execute its block of code as long as its condition remains true
for our example we asked the user to type in their name if they were to leave it empty or blank we would keep on asking the user to type
in their name so if you would like a copy of this code i will post this in the comments section down below
but yeah that's the basics of while loops in python hey what's going on everybody it's bro
hope you're doing well and in this video i'm going to explain for loops in python and at the end of this video we're going
to create a countdown timer so sit back relax and enjoy the show
all right guys and gals let's talk about for loops a for loop is a statement that will execute its block of code a
limited amount of times it's similar but different from a while loop because a while loop
could iterate an unlimited or infinite amount of times depending on the condition a for loop
will only iterate a limited amount of times and before we start executing its block of code we already know how
many times we're going to repeat this block of code so for this example let's create a for loop that will simply count it to 10
and then we'll create a few more sophisticated examples so to create a for loop that will count up to 10 this is what we'll type
four and then we need some sort of counter people usually either write index or they shorten it to just i i for
index four i in and we can set a range range ten so we will execute this for loop ten
times and to finish this for loop just add a colon at the end so the next line or lines will be
indented so that's the block of code for the for loop what do we want to do during each iteration let's just print what
i is and let's take a look to see what would happen so we executed this for loop ten times
except with computers computers always start with zero so when we said four i in range ten
we're counting numbers zero through nine so it's as if this number is exclusive so there's two ways we can
change this we could say range ten plus one or what i would do is say print i
plus one so this will give us numbers one through ten so that's a for loop it will
execute a limited amount of times this time let's count a range between two numbers
not necessarily 0 to 10 but something else so let's say 4i in range maybe the numbers 50 through
100 so within my range function i will pass in two numbers the first number will be the starting
point and the second number is the ending point this first number is inclusive and the second number is exclusive
so let's print this print whatever i is so this will count 50 through 99 actually if you wanted to
include this last number since it's exclusive what we could do is just add one to the end so this would give
us 50 through 100 except that this will iterate 51 times since we're
counting 50. so you just have to pay attention to your range and the numbers that it's counting now one thing that you can do
with the range function is that you can add a third argument and this will function as the step how much you want to count up or down by
so this time let's count up by two so i'll add comma two we're passing in a
third argument this time so this program will now count up by two starting at fifty and go all the way
to one hundred a benefit of for loops is that we can iterate through anything that is considered
iterable this could include a string the letters in a string or any sort of collection so this time
let's create a for loop that will iterate once through each letter in maybe a name
so for i in and let's type a name here type in whatever your first name and last name
is and then we will print whatever i is for i in whatever your name is print
each letter in the string so when i run this each letter within my name will be printed to a new
line all right people for my last trick we're going to create a program where we will simulate a countdown
starting at 10 and count down to zero and then maybe once we reach zero we can print something such as
happy new year so to create this program we'll need an import so at the top we're going to import the time module
because we'll be waiting one second after each iteration of this for loop so to create this program let's say four
you could say i but you can really write anything here and to demonstrate that let's say four seconds four seconds
in range so the starting point is going to be ten the ending point will be zero and we'll
add a step what do we want to count up or down by let's set this to negative one so this will be a countdown
starting at ten and ending at zero so after each iteration let's print whatever i is or in this
case seconds and then we can sleep have our thread sleep for a number of seconds too so after we
print seconds type time dot sleep and pass in
how long you want to sleep for i would like to sleep for one second and then at the end let's print happy
new year make sure this isn't within the for loop print happy new year and well
that's it let's test this so we'll begin at 10 and count down to zero and you can see that my thread that is running this
program is sleeping for one second after each iteration of this for loop then once we reach zero it will display
happy new year well everybody that's the basics of for loops a for loop is a statement
that will execute its block of code a limited amount of times it's different from a while loop because
a while loop could execute an infinite or unlimited amount of times with for loops they execute limited
amounts of times and before we enter the for loop we already know how many times we're going to iterate this for loop
if you'd like a copy of all this code i will post this in the comments down below but yeah that's how for loops work in
python hey what's going on everybody it's you bro hope you're doing well and in this
video i'm going to explain nested loops in python so sit back relax and enjoy the show
hey all you people let's talk about nested loops a nested loop is a general concept of having
one loop inside of another loop and that's really it it doesn't matter if it's a for loop or a while loop
so the inner loop will finish all of its iterations before we finish one iteration of the
outer loop and to best demonstrate this we're going to create a program where we will draw a rectangle made out of a certain symbol
that we choose we need to set a width and a height and to best do this we'll need to use a
nested loop we'll create a few prompts one for rows columns and a symbol that we want to make a rectangle of
so let's begin with rows rows equals input how many
rows and we'll need to cast this as an integer data type because we're working with numbers okay
let's do the same thing for columns so replace rows with columns for this
next line input how many columns
and we'll create a symbol variable symbol equals input and this we don't have to
cast enter a symbol to
use now it's time for the nested loops we're going to create an outer for loop as well as an inner for loop
the outer for loop will be in charge of the rows the inner for loop will be in charge of the columns
so let's begin by creating our outer loop so we'll write 4 i in range
rows we would like our outer for loop to iterate as many times as we have rows and we're going to
create an inner for loop that will iterate as many times as we have columns so within the block of code for the
outer for loop we're going to create another for loop this time it'll be four and a common
convention for inner loops is to write j as an index because j comes after i i guess so for j
in range columns
so our inner for loop will iterate for as many times as we have columns all we'll do within
the inner for loop is print our symbol that we have except we'll have one issue using a
print statement after we use the print statement we will enter a new line character and move down
to the next line we can actually prevent that by adding comma and equals quotes so after using a print
statement this will prevent our cursor from moving down to the next line so pay attention to the indentation too
so there's kind of two levels of indentation we're currently within the inner for loop so that's pretty much it for the
inner for loop now we're going to print a new line once we exit the inner for loop
and you can see that the indentation is on this line right here we're within the
outer for loop now and that's pretty much it so let's try this program how many rows let's say five rows how
many columns perhaps six what symbol do we want to use let's say the dollar sign
and let's try it there we go there's our rectangle so we have let's see six columns one
two three four five six and five rows one two three four five in summary
a nested loop is really just this concept of having one loop inside of another loop it doesn't matter if it's a while loop or a
for a loop it's really situational the inner loop will finish all of its iterations before finishing
one iteration of the outer loop so what we did to demonstrate that is that we had the outer loop in charge the rows and an
inner loop in charge of the columns for our rectangle program so if you would like a copy of this program i will post this in the comment
section down below but yeah that's the basics of nested loops in python
hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain
loop control statements in python so sit back relax and enjoy the show
all right ladies and gentlemen let's talk about loop control statements these are used to change a loop's
execution from its normal sequence and there are three we're going to discuss break continue
and pass let's begin with break break is used to terminate the loop entirely now here's a good example of where a
break would be useful let's say while true we're going to continually ask
for somebody's name if they don't type in anything then we'll continue the while loop over and over again
so let's say name equals input
enter your name now if name does not equal
a set of quotes that means they don't type in anything then we will break and break out of this
while loop and let's test it enter your name nah i don't think so i'm too lazy to enter my name
all right i can see that i'm not going to escape this while loop so i'm going to type in my name because i give up
and hit enter therefore i will break and exit out of this while loop so a break is used to terminate the loop
entirely when it's encountered next we have continue continue skips to the next iteration of the loop
now let's say we have a phone number phone underscore number and i will set the
sequel to let's say a random phone number including dashes 123-456-7890
what i would like to do is to display this number within the console window without these dashes
this is how to do that using a continue control statement for i in phone number
so for each character within our string of phone number what we'll do is check to see if we
encounter a dash character if i i is our index is
equal to a dash then we want to continue and skip over this iteration of
the loop so continue then i would like to print
whatever our indexes whatever character we're working on so if i were to run this as it is it's
going to print each digit on a new line so with print statements they will add a new line character to
the end of your string and you can actually change that by adding to the end comma
end equals and then a set of quotes so this will print my phone number without any dashes
one two three four five six seven eight nine zero so that's a use of the continue control statement it skips
to the next iteration of the loop last but not least we have pass pass does nothing
it acts as a placeholder let's say that i would like to print the numbers 1 through 20 using a for loop for i
in range 1 through 21 and remember that the second digit is
exclusive so this will iterate once through the digits of 1 through 20. let's pretend that i'm
highly superstitious and i don't want to print the number 13 because 13 is considered an unlucky number
if i is equal to 13 what we'll do is pass and pass acts as a
placeholder and it won't do anything else print
i that's one i there we go this will print the numbers 1 through 20
and skip 13 because we used the past control statement which does nothing it acts as a placeholder
so everybody those are loop control statements they change a loop's execution from its normal
sequence we have break continue and pass so if you would like a copy of all this code
i will post all of this in the comments section down below but yeah those are a few loop control statements in python what's
going on everybody it's bro hope you're doing well and in this video i'm going to explain lists in python so sit back relax
and enjoy the show all right ladies and gentlemen let's get
down to business i got to explain lists to you all now a list is used to store
multiple items within a single variable for example let's say we have a variable
called food and i will store a string value of pizza because i like pizza
what we could do is that we can store multiple items within this variable by turning this variable into a
list and in order to do so we're going to surround all of the values that we would like to add
to our list with a set of square brackets and boom there you have it we now have a
list called food it is no longer a variable so what we could do is add
multiple items to this list of food so let's add some other food items that we might like
let's see i also like maybe some hamburgers and a hot dog
and maybe some spaghetti i think i smelled spaghetti right okay so we now have a list called food
now what happens if we attempt to print this list of food so print food so this will
print all of the elements found in this list each item in a list is referred to as an
element if we need to access a certain element of this list we have to list the index so
next to our list we'll add a set of square brackets again and we need to list the numbered index
of the element that we're trying to access now computers they always start with zero so the first
element in our list would be element number zero the next one would be one two and three
so if we need to access element zero which is in the first position we would
say food square brackets and then within here list the index so the first position
is zero and this will now print the first element of our list which is pizza let's attempt to access
some of these other elements so the element at index one would be you guessed it hamburger two
would be hot dog and three would be spaghetti now what happens if we attempt to access
the element at index four well currently that's out of range because we did not assign
a value so we're experiencing an error an index out of range error but if i were to add
another element let's say pudding alright well then
the element at index 4 would be putting then one important concept with lists is that
you can always update and change the elements found within a list later on in the program after you
declare one so let's say we would like to immediately change one of these elements let's say
food at index zero i want to replace with maybe sushi because sushi
is great so if i were to print the element at index 0 this would no longer be pizza because
we updated element 0 to be sushi then and this prints sushi now if
you need to display all of the elements found within a list you can easily do so with a standard for
loop what we'll do is say for x in the name of our list which is food
print x and let me turn this line into a comment all right so this for loop will print
all of the elements found within our list of food and the results are sushi
hamburger hot dog spaghetti and pudding all right people for this next portion i'm going to demonstrate a few useful
functions of lists and to access some of these functions type the name of your list dot and there's a bunch to choose from
here let's begin with event we can add an element to this list let's say at the end i would like to add
ice cream so then if i were to display my list we now have ice cream at the end
because we appended this value to my list of food so let's go over a few others
so we can also remove a value food dot remove let's say i would like to
remove hotdog so i'm going to type that within my function and this will remove hotdog
and that is no longer here next we can pop food.pop
pop will remove the last element so this will remove
pudding we can insert a value at a given index food dot insert we need to list an index
let's say zero that would be the first position technically that's where pizza is currently
and i would like to add cake and at index 0 we now have cake
so next up we have sort food dot sort this will sort a list
alphabetically so in the first position we have hamburger hot dog pudding spaghetti
then sushi we can also clear a list food dot clear and this will remove
all of the elements of a list so this will not print anything because we cleared the list
well everyone in conclusion a list is really just a variable that can store
multiple values think of it that way so if you would like a copy of all the code that we have written
here today i will post all of this in the comments down below but yeah that's how lists work in python
how's it going everybody it's bro hope you're doing well and in this video i'm going to explain 2d lists in python so sit back
relax and enjoy the show i have a super quick video for you all
today on 2d lists also referred to as multi-dimensional lists
all it is is a list of separate lists so let's begin by creating a few separate lists let's say we have a list
called drinks and let's assign a few values let's say we have coffee as well
as soda and maybe some tea all right so we currently have one list
let's make maybe two more let's make a list called dinner and maybe in here we'll place
pizza then hamburger
and hot dog okay then let's create one more for this example let's say dessert
and maybe we'll add two items they all don't need the same amount of items or elements so we have cake
and ice cream all right so we have three lists one
called drinks dinner and dessert so what we can do is add all of these lists to one list
and let's create a list called food food equals and for each of these elements we're going to place
our lists so we have drinks dinner and dessert check this out what if i
were to print my 2d list of food so what ends up happening is that this
will print all of the elements found within each individual list and they're all grouped together
so this first portion is my drinks list which contains coffee soda tea this next
element is my dinner list which contains pizza hamburger hot dog and the last element
dessert contains cake and ice cream if i need to access just one of these lists i will add an
index after my food 2d list and set an index number so index zero is
referring to my first list of drinks and this will display all of the elements found within my first
list and if i need just one of these elements i will add a second set of square brackets and list
the index of the item that i'm trying to access so this very first item coffee would be
index zero and then index zero again so we need two sets of square brackets and if i
were to print this this will display coffee so if i go down the list the next element would be soda
and then t if i were to change the index within this first set of square brackets well
now we're working with a different list this time we're working with our dinner list so the element at index 1
index 2 that would be our dinner list and this will display the element of hot
dog if i change this to the next list which would be dessert well we're going to receive an index out
of range error because we only have two values within this list cake and ice cream there is no element
at index 2 because we only added two elements to this list of dessert all right
everybody so that is 2d lists also referred to as multi-dimensional lists
it's a list of separate lists if you need to access one of the elements within your 2d list
you need two sets of square brackets so if you would like a copy of this code i will post this in the comments down
below but yeah that's how 2d lists work in python hey what's going on people
it's you bro hope you're doing well and in this video i'm going to explain tuples in python so sit back relax and enjoy the show
so tuples they are collections which are ordered and unchangeable they're very similar to
lists but they're ordered and we can't change them they're useful for grouping together related data
let's say we would like to create some sort of student record so we can create a tuple to take care of
that for us so let's say we would like to create a tuple called student the process of creating a tuple is very
similar to lists but instead of using a set of square brackets to place all of the values
within we're going to use a set of parentheses and now we can add a bunch of values related to this collection of student
so let's add some student information let's say that this student's name is bro let's give him an age as well as a
gender all right so there you have it we now have a tuple called student and let's take a look at some of the
functions related to tuples and you can access them by typing student dot and then there are a few here not as
many as lists we have count and we have index so we can find the count of how many times a value appears
let's count how many times the value of bro appears so we'll need to put this within a print
statement so we can actually see it so bro appears
one time within this tuple there is also an index method as well so type the name of your tuple dot
and we will use the index method we can find the index of a certain value
let's say we would like to find the index of mail and then i will just print this to the console window
so the index of the value mail would be at two zero one
two that's it for the methods available to tuples a few tricks that you can do with tuples
is that you can display all of the contents within a tuple using a for loop
let's say 4x in student we will print x so
this will iterate once through all the values found within our tuple of student and we can also check to see
if a certain value exists within our tuple using an if statement let's say if
bro in student if this is true then what do we want to
do let's say print bro is here all right so since bro is within here
this will be true and this will print our statement of bro is here all right
everybody like i said this is a super quick video on tuples they're very similar to lists except
they are ordered and unchangeable if you'd like a copy of all this code i will post all of this in the comments
down below and don't forget to smash that like button drop a comment down below and subscribe if you'd like to become a
fellow bro hey what's going on everybody it's you bro hope you're doing well
and in this video i'm going to explain what a set is in python so sit back relax and enjoy the show
a set is a collection which is unordered as well as being unindexed they do not allow any
duplicate values for example let's create a set of silverware so in order to create a set we need a
name for this set let's call it utensils equals and in order to create a set we need to
surround all values with a set of curly braces now let's add a few utensils
to the set called utensils let's add a fork a spoon and maybe a knife and that
should be good and let's display all of the values for x in utensils
print x now with sets they're different from lists because
they're unordered as well as being unindexed if i were to print all of the elements
in utensils they might not necessarily be in the same order in which we placed them
for example when we printed all of the elements found within utensils first we had a knife a fork and then a
spoon if i were to run this again they might be in a different order kind of like that
so a set is actually faster than a list if you need to check to see if something
is within a set compared to a list and they do not allow any duplicate values
let me add a bunch of knives and let's see what happens so i'll have a total of three knives but
when we print all of the elements of the set only one knife appears so here's a few useful methods of sets
the first method is that we can add an item to our set so type in the name of the set in this
case it's utensils dot and here's a bunch of methods that you can use i am looking for add and we can add an
element to the set i would like to add a napkin and then if we were to print the set we
do have a napkin within the set we can also remove an element utensils dot remove
and i would like to remove the fork
and now our fork is gone we can also clear utensils dot clear
and all the elements within our set should be gone so let me turn these lines into a
comment all right for this next example we'll need a second set let's create a second set called dishes
and then we need a set of curly braces and let's add a bowl
a plate and a cup our next method is that we're going to
add one set to another by using the update method let's say we would like to add our
dishes set to our utensil set so let's type utensils dot and use the
update method and within this method we will pass in the set that we would like to add
so utensils update dishes this will add all of the elements found within dishes
to our utensil set and you can see that when we print our utensils we have a bowl a plate and a cup in here
as well and then if i were to switch these around let's say dishes update utensils and then i will
print everything found within dishes now there's a fork a spoon and a knife in here as well we can also
join two sets together and create a new set entirely so let's create a set called dinner
table like we're setting up a dinner table and we need a fork a spoon a knife a bowl a plate and a cup
so we have a dinner table set we're going to set the sequel to either
utensils dot union dishes or we could do dishes
union utensils either way would work and let's display all the elements found within dinner table
and we should now have elements from both sets utensils and dishes as well there are also some
methods in which we can compare the similarities as well as the differences between
the elements found within two sets let's say i would like to check to see what utensils has that dishes doesn't
and for this example i think i'll add a knife to my dishes set just so that they have
at least one thing in common so i would like to see what utensils has that dishes doesn't so we can do so
using the difference method and i will print the results with a print statement so i'm going to compare utensils against
dishes utensils dishes and this will print what utensils
has that dishes doesn't which is a fork as well as a spoon
and we can reverse the rolls too we could say dishes difference utensils what do dishes have that
utensils doesn't and dishes has a cup a bowl and a plate
they both have knives so that's why knife isn't appearing we can also check to see if there's
anything that they have in common using the intersection method so i'll turn this line into a comment
we'll print utensils dot intersection
dishes and this will return whatever element that they have in common which is a knife all right everybody in
conclusion a set is a collection which is unordered as well as being unindexed they do not allow any
duplicate values and you can do things like compare two sets see if there's anything that they
have in common any differences and we can add or remove elements to a set if you'd like a copy of all this
code i will post all of this in the comments down below don't be afraid to smash that like button drop a comment down below
and subscribe if you'd like to become a fellow bro hey what's going on everybody it's you bro hope you're doing well and
in this video i'm going to explain how dictionaries work in python so sit back relax and enjoy the show
all right let's get down to business a dictionary is a changeable unordered collection of
unique key value pairs they're fast because they use hashing
and they allow us to access a value quickly now to create a dictionary it's very
similar to creating a set based on the last video except we're going to store unique key value pairs let's create a
dictionary of countries and their capitals we can store those as key value pairs so let's call this
dictionary capitals capitals equals then we need a set of curly braces much like what we
use with sets now we need a key and a value let's say we have the usa as
a key and the capital of the usa would be washington dc so in order to associate a value with
the key we'll follow the key with a colon and then add some value and the data type really doesn't matter but
in this case we're just using strings so the capital of the usa would be washington dc
and to add another key value pair we'll separate each with a comma and let's add a few others for good
measure so let's say we have india next as a key and the value would be
new delhi and we'll add two more let's say we have china
and the capital of china is beijing and lastly let's add russia
and the capital of russia is moscow and there you have it ladies and
gentlemen we now have a dictionary called capitals that has unique key value pairs so
remember with dictionaries they are unordered in order to access one of these values instead of using a numbered index we're
going to use the associated key with that value here's an example let's say i would like to print the capital
of russia so i need to use this key of russia so in order to do this type in the name
of the dictionary followed by a set of straight brackets and then instead of an index number like 0 or 1 2 3
i'm going to use the key so i would like to print the value that's stored or associated
with the key of russia so when i run this this will print
that value which is moscow so this isn't always safe let's say we have a key that doesn't
exist like germany germany is not currently within my dictionary so if i were to run this
well then my program is going to encounter an error and this will interrupt the normal flow
of my program a much safer way to access a key to check to see if it's there or not is
to use the get method of dictionaries so i'm going to turn this line into a comment and let's try
this again but this time we'll use the get method so type in the name of the dictionary dot get
and list the key that you want to use so i would like to see if germany
is within my dictionary currently there isn't so this will return none and we will not encounter an error
so this is a much safer way of checking to see if there is a key within your dictionary
here's a few other useful methods there is a method to print only the keys so we type in the name of the dictionary
capitals and here's a listing of all of the methods that we have access to i'm looking for the keys method and this
will print only the keys and not the values we can also print just the values and not the keys so type
in the name of the dictionary again capitals dot values
and this will print only the values or you could print everything both the keys and the values and you do
so by using the items method capitals dot items
and this will print your entire dictionary one other way in which we can display all of the key value pairs in a
dictionary is to use a for loop so at the end let's create a for loop for
key comma value in capitals dot items
this is going to iterate once for each key value pair in my dictionary for each key value in
capitals dot items print key comma value
and this will print my entire dictionary a feature of dictionaries is that they are mutable that means we
can change them or alter them after the program is already running so one way in which we can do that
is to use the update method of dictionaries so let's add germany as a key and give
it a value of berlin so type in the name of the dictionary capitals
and we'll use the update method and within the parentheses of this method we'll add a set of curly braces and now
we can add a new key value pair so let's add germany
and a value of berlin so if i were to run this and display
all of the key value pairs found within my dictionary we now have germany as a key and berlin as its value
not only can you use the update method to add a new key value pair but you can update an
existing one let's say we would like to change the capital of usa so capitals
dot update parentheses curly braces list the key usa colon
and then we can give the usa a new value let's pretend that the united states government has decided to relocate
their capital to las vegas so this will now update our key of usa
with a new value and if i were to print all of the key value pairs found within
my dictionary of capitals the usa has a new value of las vegas so the last two methods i'm
going to cover are both pop and clear you can use the pop method to remove a key value pair so capitals
dot pop parentheses and list the key of the key value pair that you would
like to remove so let's say we would like to remove china so we'll list that key and then when we
use the pop method that will remove this key value pair from my dictionary
and then of course we have clear as well which will just remove everything capitals dot clear
and this will clear my dictionary all right everybody so in conclusion a dictionary is a
changeable unordered collection of unique key value pairs they're fast because they use hashing
and they allow us to access a value quickly well that's the basics of dictionaries
in python if you would like a copy of all this code i will post all of this in the comments down below
but yeah that's how dictionaries work in python hey what's going on everybody it's bro
hope you're doing well and in this video i'm going to teach you guys all about the index operator in python so sit back relax
and enjoy the show all right people let's begin i'm going to be explaining the index operator
which is represented by a set of square brackets now they give access
to a sequences elements they include but are not limited to strings lists and tuples for this
example we're going to be working with strings because strings are easy to work with let's say we have a name and name equals
whatever your first and last name is we can use the index operator to access
an element of the sequence our string so let's check to see if the first
letter in our name is lowercase and i should probably change that to lowercase for this
example so within an if statement if name and we can add a set
of square brackets after our sequence which is a string and we can check
a given element of our sequence let's check to see if the first letter is lowercase
now with computers they always start at zero if you need to access the first element in a sequence that would be index zero
and then the next sequence well the next element in the sequence would be one then two then you followed that pattern
so i would like to check to see if name at index zero that would be the first character
is lowercase so there is a method to check that dot is lower this will return
true or false if the first letter is lowercase then our if statement is going to be
resolved to true and what i could do is that i can
perhaps change it to uppercase then so let's reassign name to equal name dot
and there is a capitalize function here and then let's print our name print
name so when we run this the first letter in my name is now
capitalized so if you need to access an element within a sequence a string or
list or a tuple you would add a set of square brackets afterwards and then
you list an integer of the element that you're trying to access so here's a few other examples
i'm going to turn this as well as this into a comment and let's say we would like to create
some substrings and we can do so using our index operator so i would like to
create a substring from the first part of my name so what i'll do is create a new variable
first name equals name index operator
so you can specify a range for an index operator so you would set the starting position
on the left hand side followed by a colon and then your ending position so i would like the substring to begin
at index 0 and end at 3 so that would be 0 colon then three all right and then i would
like to make this all uppercase for some reason and then let's print my first name
so with the index operator we specified a range we would like to access elements 0
through 3. turn them up your case and assign them to a new variable of first name here's a shortcut
that you might find useful if the index for your range begins with zero you can actually delete that you
don't even necessarily need that zero now we just have a colon three and this would work the same as it did before
so that's a useful shortcut and we're going to bring it up later if we need to access the last element in a sequence
this time let's create a substring of last name so last
name equals name index operator this time i would like to access the
element at index let's see 0 1 2 3 4. all right so i'm going to say
for colon and we're not really sure where our name our last name is going to
end so what you could do is just say colon and then leave the next index blank so that will be
the index beginning at four and everything afterwards and let's say two lower to make this all
lowercase for some reason so let's print our last name print
last name so this should take everything starting at index 4
and after that and turn it into its own substring of last name now you can access the last element in a
sequence by using what's called negative indexing so let's add
a exclamation point to the end of our name so let's say we have a new variable called last
character and i would like to store the last character in my name to this
new variable this new substring so to access the last element in a sequence within the index
operator we can use negative indexing so the last element would be negative one all right and then let's
print whatever our last character is so this should print an exclamation point
yep which did so then if this was negative 2 that would be the second to last element
in a sequence so now that would be e because e is in the second to last
element in my sequence all right everybody so that's the basics of the index operator
you can add a set of square brackets after a string a list or a tuple and then list an
integer or a range of the elements that you're trying to access so if you would like a copy of
all this code i will post everything in the comments down below don't be afraid to help me out and smash that like button drop a comment down
below and subscribe if you'd like to become a fellow bro hey what's going on everybody it's you
bro hope you're doing well and in this video i'm going to explain how functions work in python so
sit back relax and enjoy the show if you find this video helpful please
remember to like comment and subscribe your support will help keep this channel running
okay let's do this thing a function is a block of code which is executed
only when it is called this process is also known as invoking a function
with programming we try not to repeat code if we don't have to that's why functions are useful because
our function can perform some specific task for us some block of code for us whenever it is called so we only need to
write that block of code once and if we need to repeat it we just call this function one more time
so let's define and create a function we'll create a function called hello and in order to define a function we'll
type def and then a unique function name so let's call this function hello
and with functions they always end with a set of parentheses and lastly to finish defining this
function we'll add a colon at the end so if you go down to the next line take notice that my cursor is now
indented any code underneath a function that is indented belongs to that specific function and
will only execute whenever that function is called so for now we need to type in something
if you don't know what you want your function to do you can always type pass for now but let's print something print the word
hello and in order to call this function all we need to do within our program is
type the name of the function which is hello and then add a set of parentheses because functions always end with a set
of parentheses so what this will do is execute my function once and perform this block of code
whenever it is called if i were to remove this well our program currently isn't going to do
anything because functions only execute their block of code only when it is called so this time
let's print the word hello three times so i will call this function three separate times hello hello hello
so when i run this our hello function will be called three separate times now with functions
they are not limited to just one line this is an entire block of code so maybe we can do something else too
let's print have a nice day now if i were to run this my hello
function is going to execute this entire block of code three separate times hello
have a nice day now an important feature of functions is that we can send our function some
information and our function can do something with that information that it receives let's say this time i would like to
print hello plus somebody's name currently name is an unresolved reference what we can do
when we call this function is send our function some information this can be a value a variable a
collection all sorts of different things so if you need to send your function some information within the parentheses when you call
that function just list the data that you want to send your function so let's say i would like to send my
function a string value of bro whatever your first name is when you send information
to a function these are called arguments they are the information that you're
sending to a function and when you define that function you need a matching
set of what is known as parameters so our hello function is going to
receive one argument a string value we need a matching number of parameters
currently this isn't going to work you can see here that hello takes zero positional arguments but one
was given our function needs a matching number of parameters so think of it this way when we receive
this value we're going to give a nickname to this value so when we receive the string value what
do we want to call it well let's call it name so in order to add parameters
to your function just list the parameters within the parentheses of that function and
well this should work now we have a matching set of arguments and parameters when we call the hello
function this time we are sending one argument over and when our hello function
receives this argument we're going to give it a temporary nickname of name or you can call this whatever you
want to and then we can use this value for whatever we want within our function
now if we were to run this this will print hello bro have a nice day now i can send maybe a
different value let's say hello and then i will send a string value of dude
hello dude have a nice day so this isn't limited to just values we can send variables to
let's say we have a variable called name equals
bro and this time i'm going to send this variable over hello and then send
name so these don't need to be the exact same let's say this is
my name and i'm going to send my name over and i will temporarily give
this value a nickname of just name and then i can use this variable for
something hello bro have a nice day now with arguments you can send more than one value over let's say this
time i would like to send two values over so let's send pro maybe for a first name and code for a
second name but you can use your first name and last name so this isn't going to work because
we do not have a matching set of arguments and parameters we're sending
two arguments over but our function is only designed to accept one argument because we have
one parameter so let's rename name as first name and we need
two parameters this time so what are we going to call this value when we receive it let's call
this last name so this time we are going to receive two
values they will be nicknamed first name and last name so this time let's print hello first name
maybe i'll add a space plus last name and this is now valid
hello bro code have a nice day with arguments you can mix and match the data types
that you're sending as arguments so currently we're sending two string values as arguments this time
let's send an integer value let's say we would like to send an edge over to our hello function
so i'll just send maybe the value of 21. so currently this isn't going to work because the hello function takes two
positional arguments but three were given when we call this hello function we're sending
this argument over but our function doesn't know what to do with this argument so we need a matching parameter for this
value that it receives so let's call this value maybe edge as a temporary nickname
and then we can do something with this value when we receive it so let's print an additional message
perhaps u r plus age plus years
old so if you need to display an integer or number along with the string
you do need to convert it to a string so let's just cast our edge as a string when we display this
so this should work now we now have a matching number of arguments and parameters so this will
display hello bro code you are 21 years old have a nice day so ladies and gentlemen in conclusion a
function is a block of code which is executed only when it is called if i were to remove this function call
well then our program is just going to completely ignore this function and this block of code would not be executed
when we call this function we can pass information known as arguments but we need a
matching number of parameters set up to receive these arguments there are a few advanced
features of parameters but i'll hopefully get to that in future videos we'll just stick with the basics
for now of functions so that's the basics of functions if you would like a copy of this code
i will post this in the comments down below but yeah that is how functions work in python hey what's going on
everybody it's you bro hope you're doing well and in this video i'm going to explain the return statement in python so
sit back relax and enjoy the show
all right people let's begin the return statement is used within functions to send python values or objects back to
the caller these values or objects are known as the function's return value so do you know how with
functions we can pass arguments to a function and then our function can do something with those arguments
well not only that but our function can pass some value or object back to the caller so what we'll
do for this example is create a function that will simply multiply two numbers together
and return the result back to the caller so let's define a function called multiply and we'll set
up two parameters for this function let's say number one and number two
and what we'll do is say result equals number one times number two
and then at the end we can return something what do we want to return let's return whatever the result is now
when we call this function we will pass in two values as arguments let's say we would like to multiply
six times eight so when we run this well we can't actually see anything
when we return the result after multiplying numbers one and two it's going to return the
result back to the caller in order to see the value that is returned back to the caller
one way in which we can do this is to print the value that is returned within a
print statement so what we'll do is print the value that is returned after calling the multiply
function so 6 times 8 is really great 6 times 8 is 48 now one other thing that we can do is
store the returned value within a variable so let's say x equals multiply
6 times 8 and then we will print whatever x is so the result is still the same of 48
now with the return value there is another way in which we could write this that uses less lines of code so we'll delete this
first line and instead of returning a variable called result what we'll do is just return
number one times number two and this would work the same as it does before but it's written in less lines of code
so that's another way in which you could write this all right everybody so that is the return statement functions can send
python values or objects back to the caller these values or objects are known as the
functions return value you can either print this value directly to the console window
or you can store it within a variable or some other location and well ladies and gentlemen that is
how the return statement works in python what's going on everybody it's bro hope
you're doing well and in this video i'm going to explain keyword arguments in python so sit back relax and enjoy the show
all right everybody let's discuss keyword arguments these are arguments that are preceded by
an identifier when we pass them to a function the order of the arguments doesn't
matter unlike positional arguments which do matter and we've been working with positional arguments already
and python knows the names of the arguments that our function receives when we use keyword arguments here's an
example of us using positional arguments and then i'll demonstrate the benefits of keyword arguments let's say we have a
function called hello that accepts three arguments a first name a middle name and a last name
and the output will be hello first name middle name last name so if i were to run this this will
display hello bro dude code so we're using positional arguments
the order of the arguments does matter what do you think's gonna happen if i were to replace some of these values
let's say i will swap the first argument with the third argument so let's try it again
hello code dude bro so obviously the order of the arguments matters and now if we were to use keyword
arguments then the order of the arguments doesn't matter but with each argument we need to precede each argument with
a unique identifier and that identifier is the name of the parameter we want to
associate each argument with so for my intended last name i will use an identifier of
last to match this parameter so dude will be middle middle equals dude
and bro will be first even though they're not in the correct order so let's try this again
and my output is hello bro dude code so that's all about keyword arguments
they are arguments preceded with an identifier when we pass them to a function the order of the arguments doesn't
matter unlike positional arguments which do matter and then python knows the names of the arguments
that our function receives when we use keyword arguments so that's it for keyword arguments if
you would like a copy of this code i will post this in the comment section down below but yeah that's how keyword
arguments work in python hey what's going on everybody it's you bro hope you're doing
well and in this video i'm going to explain nested function calls in python so sit back
relax and enjoy the show all right people nested function calls
these are function calls inside of other function calls and this is possible because
certain functions will return a value and we can immediately use that value as an argument for the next function
so here's an example let's say that we have the small program where we will ask a user to type in a
whole positive number and let's say i don't let's say i type in negative 3.14
and then i'm storing that value within a variable named num what i'm going to do is
convert that number to a floating point number because currently it's a string when you accept user input
i will find the absolute value of num and then round it to the nearest whole number
and then print the value so we can actually do this using less lines of code with nested function calls
so let's start with the first function which will be accepting some user input the input function so this will be in
the very center of our nested function calls and then the next function we would like to apply
to the variable that is returned the value that is returned we will pass in as an argument to our
next function of casting this data type to a float so we'll surround our function with another function and
use the float function and then we'll just keep on adding layers to this so we have the absolute value function
next so we'll add another layer and we have the round function
so we'll add a layer to that and lastly we're going to print and that'll
be the outermost layer so this program will do the exact same thing
let's say negative 3.14 except we've written this with one line of code so basically we start
with the innermost function and resolve that first whatever value is returned we use as an
argument to the next outermost function and in this case it would be float then we resolve that then move on to absolute
value then round and then print so it's just another way of writing code that takes up less
lines but this is more of an extreme example you probably won't see like four or five nested functions well
everybody those are nested function calls if you would like a copy of this code i will post all of this to the comment
section down below but yeah those are nested function calls in python
hey what's going on people it's your bro hope you're doing well and in this video i'm going to show you how variable scope
works in python so sit back relax and enjoy the show
all right let's do a thing people let's discuss the scope of a variable now the scope of a variable is the
region that a variable is recognized a variable is only available from inside the region
that it is created let's say that we have a function and i just gave this function a name of display name
i created a variable inside of this function named name and you can assign this a value of
whatever your name is preferably a last name for this example and what i'll do is just print
whatever my name is so this variable is known to have a local scope because it's declared
inside of a function and a variable is only recognized inside of the region
that it is created this variable of name since it's created inside of this function it is known as a local
variable that has a local scope it's only available inside of this function that it's
created now let's attempt to access this variable from outside of our function so i'm going to
print my name variable but we'll have an issue though so name name is not defined so
local variables are declared inside of a function and they have a local scope they are
only available inside of this function in which they're created on the other hand a global variable is a
variable that is declared outside of any function but within your module that you're working with
a global variable is known to have a global scope they are available inside and outside of
any functions now if i was to print my name variable this is going to print
bro or whatever your first name is and it is entirely possible to have both a global and local version of the same
named variable so we have both a global version of name as well as a local version of name
if i was to print my name variable from outside of this function it's going to print my global version
however if i print my version of name inside of that function in which it's created
we're going to first use the local version before the global version of name and let's try
that so i'm going to call my display name function
and this will print my last name code and then my first name of bro so it
is possible to have a global and local version of the same named variable
now if i was to remove this line where we declare a local version of name well then the next best
available name to us would be the global version of name so if you use a variable inside of a function
you'll first use a local version of that variable if it's available if not you'll use a
global version instead and python will follow this rule known as the legb
rule you use any local variables first then enclosed variables then global and then
any built-in variables in that order so that's the main difference between local scope and
global scope the scope of a variable is the region in which it's available and it's limited to the region in which
it's created a local scope is available only inside of the function in which that variable is created
a global scoped variable is a variable that is available inside and outside of any functions but
within your module that you're working with so that's variable scope in python if you would like a copy of this code i
will post this code to the comment section down below and well yeah that's how variable scope
works in python hey what's going on everybody it's bro hope you're doing well
and in this video i'm going to explain the arcs parameter in python so sit back relax and enjoy the show
all right guys and gals let's talk about args now args is a parameter that will pack
all arguments into a tuple it's useful so that a function can accept a varying amount of arguments
here's an example of why it would be useful let's say we have a function called add that will accept two numbers
as arguments and add them together and return the sum so this works as intended right as long
as we pass in only two numbers but what if we need to pass in three numbers as arguments
well we can no longer use this add function because we have two parameters set up but we're passing in three arguments you
can see here within my console window that we have a type error add takes two positional arguments but
three were given and one way in which we can solve this issue is to use this args parameter so what we're going to do
is replace all of our parameters with asterisk args and actually the args portion isn't as important as
the asterisk args is short for arguments and you can really name this whatever you want just be sure that you have this asterisk
because with this asterisk we're doing a form of packing what we're doing is passing all of these
arguments and packing them into a tuple so let's rewrite this program so let's say maybe sum
equals zero and then we will need to iterate through all of the items within
our tuple because tuples are iterable so let's say for i in args what we'll do is say sum
plus equals whatever i is and at the end when we escape the for loop we will return
our sum so let's try it again and see if it works well would you look at that it works
let's pass in a few other arguments for good measure let's pass in six arguments this time
all right look at that this does in fact work so you can actually name this whatever you want the important thing is to have this asterisk
so let's rename this as i don't know stuff and let's try this again yep
it still works with tuples they are ordered and unchangeable let's attempt to edit
one of these values so let's say stuff at index zero is equal to
zero and let's try and change it so you can see that tuple object does not support
item assignment if you need to change one of the values within your tuple after you pack all of
these arguments you might need to convert this to a different collection one way in which we can do that is to cast it
let's say stuff equals and we'll cast our tuple as a list because a list
can be changeable it's mutable so let's attempt this again we'll cast our tuple as a list and then edit one of
the values and then add all the values together so to change one of the values say the name your collection stuff in
this case let's say at index zero this now equals zero so now if we were to add all these items together
they should equal 20. there we go so yeah that's basically the args parameter
the name isn't as important as the asterisk because you can really name it whatever you want a common convention is to just name this
args it's a parameter that will pack all arguments into a tuple it's useful
so that a function can accept a varying amount of arguments well that is all about args
if you would like a copy of this code i will post this in the comments section down below but yeah that is how the args parameter
works in python hey what's going on everybody it's bro hope you're doing well and in this video
i'm going to be explaining quarks in python so sit back relax and enjoy the show
all right everybody let's talk about quarkx now this is a parameter that will pack all arguments into a dictionary it's
useful so that a function can accept a varying amount of keyword arguments it's
identical to args except with args args will accept a varying amount of positional
arguments and pack them into a tuple with quarks this will accept a varying amount of keyword arguments
and pack them into a dictionary so here's an example of why this would be useful let's say we have a function called
hello that accepts two keyword arguments a first name and a last name all this will do is
output hello your first name and last name but what if somebody has more than two names
let's say somebody has a middle name and for this example i'll just say my middle name is dude
so if i were to run this well this hello function is no longer going to work as you can see in the console window we
have a type error the hello function got an unexpected keyword argument middle
one way in which we can solve this we can use this quark's parameter so we can accept a varying
amount of keyword arguments so what we'll do is replace our parameters with two asterisks then
quarks now if i would like the same output as i had before i'm going to need to change a few things around
in order to access a value within a dictionary you type the name of the dictionary square brackets and then within quotes
list your key so i would like to access the value at this key of first
and let's repeat the process for last name so the key is going to be last we'll
access this value at this key and this should work the same as it did before
now let's take this a step further let's say we would like to display somebody's full name based on the amount
of keyword arguments that they pass into this function well there's a few different ways in which we could do this one easy way is
that we could write our program like this let's print the word hello
and we will need to iterate once through each key value pair within this dictionary
and we can use a for loop to do that so to iterate once through each key value pair in your
dictionary we'll type for key value in the name of our dictionary quarks in
this case dot items and then we will print each value
so there's one more thing that we need to do this kind of works as intended but it's going to print each value including our word
hello on a new line so with a standard print statement this will print a new line character
after each print statement as if we're hitting enter we can actually change that so after
your string add and equals and we can replace that new line character with something else
maybe a space and let's do the same thing for our for loop so value
comma end and then just add space now this will print all of your names on the same line hello
bro dude code and now we can pass in a varying amount of keyword arguments based on how long our name is
perhaps we have like a title title equals mr and we can print that as well
hello mr bro dude code here's a fun fact of the day you don't necessarily need to name this parameter as quarks
the important thing is to have these double asterisks that precede it quarks is just a
common naming convention it's short for keyword arguments you could name this as something else
perhaps something more descriptive like names since we're passing in a bunch of names so the name of our dictionary
is now names and this would work the same as it did before the important thing is to have these
double asterisks that precede the name of your dictionary but quarks is the common naming
convention well everybody that's all about quarkx it's a parameter that will pack a varying amount of keyword arguments
into a dictionary if you would like a copy of all this code i will post this in the comments section down below
but yeah that is how quarkx works in python hey what's going on everybody
it's your bro hope you're doing well and in this video i'm going to teach you guys all about the format method in python so sit back relax and enjoy
the show okay ladies and gentlemen let's begin
the format method is a method available to strings it's optional and it gives users
more control when displaying output to best demonstrate this i'm going to use a line
from a popular nursery rhyme titled hey diddle diddle because well you know i'm a mature adult like that
i'll be printing this line to my console window the cow jumped over the moon let's do so using a standard
print statement and then i'll show you the benefits of using the format method later for this example i have two variables a
variable called animal and i'm going to store a string of cow and item and i'll be
storing an item name which is moon when we compile and run this as you would expect the output is the cow jumped over the
moon there's a more elegant way of writing this line of code and that is by using the format method
available to strings i'm going to turn this line into a comment and we're instead going to produce the same output but use
the format method instead so we need a standard print statement like usual and then a string that we would like to
format so we're going to write the same thing but in place of the variables we're going to add a placeholder
the instead of the variable name or value name i'm going to add a set of curly braces so that functions
as a placeholder for a value or a variable the
this should be cow jumped over the and i'm going to insert another
placeholder now this is a string we can format the string by following this string with dot format parenthesis
and within the parentheses of the format method we can insert some values or variables let's begin
with some values i would like to insert cow as well as moon so this will produce
the same output but it's written a little more elegantly we can also replace these with variables
because they store these values so i'm going to replace cow with animal and moon with item
and this will create the same output as it did before these curly braces are what's known as
format fields they function as a placeholder for a value or a variable and they work in order the
first format field will insert the first value at this location if you have another set
or more sets of this format field you'll insert the next value that's listed within the
format method so if we were to switch these around we'll switch the position of animal with
item well then the first format field is going to insert our item and the second format field
will insert our animal this time the moon jumped over the cow an additional way of inserting values at
a given place holder would be to use what's referred to as a positional argument
within these format fields we will list the index of the value that we would like to insert at this location
if you need to insert the first value well that has an index of zero because computers always start
with zero and following that pattern the next index would be one if you had
let's say three values that you need to insert if you had another placeholder that would be two then so you would just
follow that pattern so there's going to be no visible change but what we could do is reverse the positional arguments of
these placeholders so what do you think would happen if i switched one with zero at these locations
well this format field is going to insert the value found at index one this first value is index zero and
the second one is index one so now the roles are reversed this time the moon
jumped over the cow our last way of inserting some values at a given format
field would be to use what's referred to as a keyword argument within
the format method we're going to list some keyword argument pairs we need a keyword name followed by a
value so let's say animal is going to be the keyword we're going to say equals some value animal equals cow and
item equals moon and you may have noticed that the color of your text might have changed
so we no longer need these variables actually um but i'm going to comment out these two print statements because we
will get an error then so these are in keyword argument pairs and within our format field instead of
keeping these empty or using an index we can use the keyword name at my first format field i'm going
to insert my keyword of animal and at my second format field i would like to insert
the item keyword so the result is going to be the cow jumped over the moon so let's
reverse these now we'll place our item keyword here and then at the second format field we will
insert our animal and this time the moon jumped over the cow here's an important
concept that i'd like to bring to your attention with these values found within the format method you can actually reuse
some of these more than once so let's say we would like to state the animal jumped over the animal we're
going to use this animal keyword twice and our output is going to be the cow jumped over the cow if we're
doing the same thing with positional arguments we can reuse the same index this time
let's say that the moon jumped over the moon so our item has an index of one so within our first format
field we'll state the index will be one and our second format field will also be one
so our output's going to be the moon jumped over the moon all right let's take things up a level
there's an even more elegant way in which we could write all of this what we'll do is store our string that
we would like to format within a variable let's turn this line into a comment and let's create a
variable called text text equals the string that we would like to format which is the format field
jumped over the format field and if we need to format this variable
we can just call the format method on it so within a print statement let's say
text dot and then use the format method and pass in the values that we would like to
insert at these placeholders so we're going to insert animal as well
as item so our result as you would imagine is the cow jumped over the moon this
next section i'm going to explain how we can add some padding to a string when we display it using the
format method let's say we have a name variable and assign this a value of whatever your
name is so i would like to display my name along with the custom message let's say hello my name
is and then i'll use a format field here so let's follow this string by using the format method
and i would like to insert my name at this location so currently this will display hello my
name is bro or whatever else your name is so we can add some padding either before our name after or we can
add some padding to the left and the right hand side of our value that we have so what we'll do to begin
is let's add some padding to the right hand side of our name that we have so within our
format field if we need to add some padding within the format field add a colon and then the amount of space you would like
to allocate to displaying your value so let's say 10 so i'm going to allocate 10 spaces worth
of room to display my name you can't really see it right now but let's take a look so i can't move my cursor past this line
at the end of my name but with my second line i have all of this room to work with so if i were to change my string that i
have let's say nice to meet you well then
all of this padding that i have is going to be more evident so we can add a number preceding with a
colon to add some padding to a value and then you can left align this right align it or center align it
so what i'll do is copy this line that i have if you need to left align it you use the
less than sign but there's going to be no visible change because that's already the default
if you need to write a line precede your number with a greater than sign
so your value is going to be right aligned if you need to center this value then
use the carrot so this will center align your value within the padding that you
have allotted one question that you might have for me and i'll try and answer that now because it's relevant what if we need to add a
positional argument or a keyword argument to our format field if there's already some text within here
so what you would do before the colon you would just precede the colon with either your positional argument or
your keyword argument followed by colon and then whatever you want to add afterwards to format
your value that you have alright ladies and gentlemen we are near the end and i promise that this is the last section
how can we format some numbers let's say we have a number variable and this will equal the
first few digits of pi 3.14159 let's pretend that we would like
to display only the first two digits after the decimal so we can do so using the
format method let's print the number pi is and then i'll use a format field
here and we will call the format method and insert our number that we have so if i need to
display only the first two digits after the decimal within the format field i will add
colon dot to f f is for floating point numbers that's
anything with a decimal portion so the result is that this will display
only the first two digits after my decimal because we placed two within
the format field so if this was three point three f this would display three
digits after the decimal portion oh and apparently this will round your number so that's something that you should keep
in mind so this time let's change our number to something larger like 1000 and i will copy this line and make
a few changes let's say the number is and i would like to add a comma at the
thousands place so after the colon within the format field i will add a comma so this will automatically add a comma
to all 1000s places another cool thing that you can do is that you can display your number as
binary so within the format field add colon b this will display a binary
representation of your number you can do the same thing with octal by
adding colon o so our number is now being displayed as an octal number
and you can do the same thing with hexadecimal lowercase x for lowercase or uppercase x for all
uppercase so my number 1000 is now in hexadecimal and lastly we can display this number
in scientific notation using either lowercase e for lowercase or capital e
for uppercase and mynumber 1000 is now in scientific notation
all right everybody so that's a few things that you can do with the format method it's an optional method that
gives users more control when displaying output if you would like a copy of all the code that we've written here today i will
post everything in the comments down below don't be afraid to smash that like button drop a comment down below and
subscribe if you'd like to become a fellow bro hey what's going on everybody it's bro hope you're doing well and in this video
i'm going to explain a few useful methods of the random module so sit back relax and enjoy the show
okay people in this video i'm going to explain how we can generate some random numbers as well as a few other useful methods of
the random module now we're not going to be creating true random numbers but something called
pseudorandom numbers which are fairly darn close so the first step is to import the random module at the
top import random we now have access to everything that the random module has to offer
let's begin by generating a random number between one and six like we're rolling a dice so what i'm
going to do is say x equals random dot rand
and we can generate a random integer between a certain range if i want one through six i will state
one comma six and then we can generate a random number between one and six like we're rolling a dice
so if i were to print the value of x then we will get a random number between
one and six for example i just got a one a two a three and a six all right
we can also generate a random floating point number two let's say y equals random dot
random so this will give us a random number between 0 and 1. this time i'm going to print
y so we have 0.49 and some change 0.145 and 0.858
we can also generate a random choice from a list or other collection let's say we're playing a game of rock
paper scissors so let's create a list i'll just call this my list equals
square brackets and we will have three choices rock paper and
scissors so let's say z
will be the random string that we generate z equals random dot
choice and we will pass in my list and let's print z so this will generate
a random choice from my list called my list so we got scissors paper and
rock we can also use the shuffle method of the random module to shuffle a list or other collection let's
say we're working with a deck of cards cards equals let's say one
through nine and we have a jack a queen
a king and an ace this won't be a full deck of cards it'll just be one suit
so we can actually shuffle this list by using the shuffle method random dot shuffle what do we want to
shuffle we want to shuffle our cards and i will display my cards with a print statement so the
shuffle method will shuffle a list or other collection for you well everybody that's a few useful
methods of the random module if you would like a copy of all this code i will post this in the comments down below
don't be afraid to smash that like button drop a comment down below and subscribe if you'd like to become a
fellow bro hey what's going on everybody it's bro hope you're doing well and in this
video i'm going to explain exception handling in python so sit back relax and enjoy the show
well everyone let's talk about exceptions an exception is an event detected during execution that interrupts the
normal flow of a program here's a program that i've written and we're intentionally going to cause an
exception so this program that i've written we will accept a numerator and a denominator from the user
we'll divide the numerator by the denominator we'll get a result and print the result so what if i were
to divide a number such as 5 divided by 0 which we cannot mathematically do
well this will cause an exception an event detected during execution that interrupts the
flow of a program so our program was interrupted and within our console window we have this
traceback message which states what went wrong and a name for this exception that occurred
this specific exception that occurred is a zero division error so this video is all about handling
these exceptions so they do not interrupt the normal flow of a program now a very basic form of exception
handling is to surround any code that is considered dangerous as in it might cause an exception
within a try block anytime you accept user input would be a good indicator too so this code is considered dangerous
because we don't know what the user is going to type in so we will try all of this code if an
exception occurs we can catch it and handle it so to do that we'll add an accept block accept and
then we will catch exception normally having this block by itself
isn't considered good practice but i'll explain why later so this accept exception block will catch
all sorts of different exceptions and it will prevent our program from being interrupted and we can do
something else entirely such as print a message something went wrong so let's try this
again we will divide five by zero which we cannot do we no longer have that traceback message
within our console window we caught the exception and we did something else we printed something went wrong like i said before
it's not considered good practice to have a single accept block that will handle all exceptions it's much better to first
handle specific exceptions when they occur and we can do so by writing additional accept blocks
so let's create an additional accept block that will catch any zero division error exceptions
that occurs when somebody attempts to divide by zero so if this exception occurs how do we want to
handle it let's just print the message let's print you can't divide
by zero idiot and let's try this again so five divided
by zero you can't divide by zero idiot here's another one i'm going to turn
this accept block into a comment so we can take a look at something what if i divide by something that's not
a number like we take 5 and divide it by the word pizza well pizza is not a number
and we ran into a value error exception so we should probably handle this too so
let's create another accept block that will handle that accept value error
and how do we want to handle this let's print something enter only numbers
please okay let's try this again and see if this exception is caught five divided by
the word pizza enter only numbers please not only that but you can also add the
accept exception block at the very end just in case there's something you won't anticipate but it's always considered good practice
to first catch any specific exceptions and let the user know exactly what went wrong an additional way in which we can
handle these exceptions is that we could display the exception that occurs although it is completely
optional so to do that what we'll do is that after each of these accept block definitions
let's add as e so we're calling the exception as e that's just standard practice although
it's not necessary so let's do that for each of these except blocks and then we can print whatever e is so
let's add that to each of these blocks so it should now look something like this
so when we encounter an exception we can display what exception occurred too as well
so let's divide five by pizza invalid literal for int with base 10 pizza
enter only numbers please so like i said this is an additional way in which you could handle an exception although it's
entirely optional another thing that you can do is that you can add an else statement to the end of your accept blocks so
what's happening here is that we're going to try all of this code if an exception happens
then catch it and handle it if not then do something else so why don't we print our result only if
there are no exceptions that occur so if there are no exceptions we will execute
this else statement if not then we won't so let's divide five by an actual number
this time like two so there are no exceptions that occurred so we executed this else statement whatever
code is within our else block and this printed the result of 2.5 but if an exception were to occur like
we divide 5 by 0 then we will catch our exception and handle it
and we do not execute whatever block of code is within our else statement there is one other
clause that you should be aware of that is the final clause this is always at the end how this works
is that whether or not we catch an exception we will always execute any code that is within the block of code for our
final clause so this is a good opportunity if you open files to close them within the finally block
but we haven't dealt with opening files yet so we won't do that all we'll do is just print something
print this will always execute so
whether or not we encounter an exception this finally block will always execute at the end so let's try this again so this time
let's cause an exception let's divide five by zero you can't divide by zero this will always execute and this
time let's take this seriously and divide five by another number such as three so
this will give us a result and like i said the finally clause the code within the finally clause will
always execute but we won't really be working with this until we get to the section on file
handling well everybody those are exceptions in python they are events detected
during execution that interrupt the flow of a program and we can handle these exceptions by
using try and accept blocks so if you would like a copy of all this code i will post all of this in the
comments down below but yeah that is how exceptions work in python
hey what's going on everybody it's bro hope you're doing well and in this video we're going to be covering some basic file detection using
python so sit back relax and enjoy the show
welcome ladies and gentlemen to the beginning of a mini series involving doing stuff with files using python and
in this video we're going to be doing some basic file detection and in order to do so i recommend
importing the os module it's already included with the standard python library all you need to do is import it all
we'll be doing is checking to see if a file exists someplace on our computer so we'll probably need a file to work with
what i'm going to do is go to my desktop for convenience and just create a new text document i
will call this test.txt now i probably need the file location so i'm going to copy that
and then we can use this so let's create a variable called path that will include the path to the file
that i would like to detect so that was test.txt now if you have
backslashes in your file path you'll probably need double backslashes because that's the
escape sequence for a backslash within a string so we now have this variable path that
we can work with now i would like to check to see if this location exists on my computer so if os
dot path dot exists and you can see that we can pass in our path as an argument so i will pass
in my path and if this returns true if that location exists i will print
that location exists so this will not tell me if this is a
file or not we'll be covering that later else let's print that location
doesn't exist all right so if this location exists
this will return true if not this will execute our else statement that location exists so what if i were
to delete this file and we run this program again that location doesn't exist
now this won't tell you if the location you're dealing with is a file or not there is a separate
function for that it is if os dot path dot is file
what we'll do is pass in our path and print that is a file
all right so let's create another file because i deleted the previous one
test.txt it's in the same location let's run this again that location exists that is a file now
what if this was a folder so i'm going to create a new folder i will call this folder
i will delete my test document and let's change the location to folder
that location exists but it is not a file you can check to see if a location is a directory
so let's write an else if statement os dot path dot is directory and we will
pass in our path and let's print that
is a directory all right so we have our folder we're
going to check to see if this location exists and if it's a file or
a directory that location exists that is a directory well everyone that is the basics of file
detection we'll be building upon this concept in future videos so if you would like a copy of this code
i will post this in the comment section down below but yeah that is the basics of simple file detection using python
hey what's going on everybody it's bro hope you're doing well and in this video we're going to be reading a file in
python so sit back relax and enjoy the show
welcome back guys and gals in this video i'm going to explain how we can read the contents of a file using python
so we'll probably need some sort of file to work with i created a plain text file called
test.txt it's a plain text file and all this says is omg you can read this have a nice day
like comment and subscribe so what i would like to do is to read the contents of that file line by line
and print it to the console window and here's how and honestly we only need two lines of code to do this
so what we'll do is type with open then within the open function list the
name of your file or the file path this file of mine is within my project folder
so i only need to list the file name if this was someplace else you'll probably need
the file path so let's say this was on my desktop well i'll probably need to list the file
path of where that file is located and i'll need to use double backslashes because that's the escape sequence for a
backslash but since this file is within my project folder i only need to list the file name
so with open then the name your file or the file path as file then what we're going to do
is print file dot read and that is it so let's test it
and it works omg you can read this have a nice day like comment and subscribe so this will
actually close files automatically after opening them so that's kind of convenient and let's
just test that theory so i'm going to print file dot closed if my file is in fact closed this
will print true if it's still open this will print false so normally when you read a file it's
normally open and you need to close it manually but if you write your program this way with open this will close the file
automatically for you so using with open will close any files automatically for you
after they've been opened however this does not catch and handle any exceptions that might
occur like if we cannot locate this file so let's say that i mistyped the extension for this file
let's say that i type in test.tx that's kind of funny because tx is the
abbreviation for texas it's a texas file so this will cause a file not found error and this will
interrupt the flow of our program and we would probably like to prevent that so what we could do is write a try and
an accept block so we will try all of this code if we cannot find this file we can handle this exception
file not found error so we'll place all of this code within the try block then if an exception happens we will catch
that exception except we would like to catch any file not found air
exceptions and let's handle this by printing that file was not found
so if i were to run this again we will catch and handle this exception and this will not
interrupt the normal flow of our program well everybody that's how to open and read
a file in python if you'd like a copy of all this code i will post this in the comment section down below
but yeah that's how to open and read a file using python hey what's going on everybody it's bro
hope you're doing well and in this video we're going to be writing files in python so sit back relax and enjoy the show
so to begin it's kind of similar to the last video on reading files with open within the open function list
the file name or the file path so what do you want to call this file i will call this file test dot txt
now normally with the open function there is a mode and you can actually change that there's
a second argument that you can pass in by default this is r for read but if you
want to write a file this would be w so now we're going to write a file called
test.txt so to finish with open as file what are we going to do file
dot write and within the write function we can write some text so let's create a text variable and we
will add a string so let's say text equals
yo and if you need to go down to a new line be sure to use the new line character so
after this new line character the text that comes after is going to be on the next line as if we're hitting
enter so yo this is some text have
a good one all right so after i run this program we
should have a file a text file within our project folder that appears
and it is right here and it says yo this is some text have a good one now this is in write
mode if this text was something else it will actually overwrite your current file so if i were
to change this to uh oh this text has
been over written well then this will overwrite the text that we
have uh oh this text has been overwritten so you can actually append a file by
changing the mode to a for append so let me change this back we will rewrite this this will save over
our current file now we can append some text so let's add maybe a new line
uh have a nice day see ya so i would like to append
some text to this file i'm going to change the mode to a for append and we can now append some
text onto the end of this file well everybody that's how to write to a file and or append a file if you would
like a copy of this code i will post this in the comment section down below but yeah that's how to
write to and or append a file in python hey what's going on everybody it's bro
hope you're doing well and in this video we're going to be copying files in python so sit back relax and enjoy the show
welcome back to another video regarding doing stuff with files using python and in this video we're going to be
copying some files and in order to do so i recommend importing the shuttle module there's
other ways of doing this too but i tend to like using the shuttle module now with this module there are three basic
functions to copy a file starting at the top they are copy file copy and copy to so copy file is what
we'll be working with this will copy the contents of a file copy will do everything that copy file does
plus copy the permissions mode and the destination can be a directory
and lastly copy 2 this will do everything that copy does plus it copies the
metadata of that file including the files creation and modification times so depending on the project or the
program you're working with you may need to use copy or copy too but in this video we're going to be using
copy file just to copy the contents of a file now after you import the shuttle module
this is all you need to do to copy a file shuttle dot then use the appropriate
function that you need to copy your file we're going to be using copy file copy
file and within this function there are two arguments a source and a destination so within my
project folder i have a plain text file called test test.txt
all this says is yo this is some text see ya what i would like to do is copy
this file because it's cool now since this file is within my project folder i only have to list the file name
otherwise if this is someplace else i would list the file path here so this file is test.txt
this is the source file and now i need a destination so the second argument will be separated
with the comma i'm going to list a destination so you can actually rename this to
i would like to name this as copy.txt so the destination is my project folder
so when i create a copy of this file test.txt this copy will appear in my project
folder and say the same thing so after running this we now have a file named copy.txt that says the same
thing as my test file and remember what i said you can copy this file to a different location on
your computer so you could list the file path so this file path would go to my desktop
and then when i run this this will copy my original file my source and then copy it to
wherever my destination is oh and i almost forgot so if you need to use copy or copy 2
the arguments are exactly the same so if you needed to use copy this would be a shuttle dot copy instead
of copy file then copy 2 is shuttle dot copy 2. the arguments are exactly the same but
each of these functions will copy different things depending on what you need for your own program or project
all right everybody so that's the basics of copying files and python i will post this in the comment
section down below but yeah that is how to copy files using python
hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain how we can move
files using python so sit back relax and enjoy the show
welcome back everybody to another video regarding that thing that we do called programming and in this video we're
going to be moving files using python and in order to do so i recommend importing the os module
this is included with the standard python library all you need to do is import it and now let's create two variables a
variable called source that will hold the location of where our source file is located
as well as a variable called destination to function as well the destination now for this video i'm
going to move a file within my project folder to my desktop so to do so i'm going to create a new
file i will name this test.txt but take the liberty to name this whatever you want
so i'm going to list the location of where my test file is located since this is
within my project folder i only need the file name if this was someplace else on your computer you would probably need
the file path and now where would i like to move this file to i would like to move this file
to my desktop so i just need the file path so i'm going to go to my desktop
right click go to properties i'm going to copy this location and paste it within my
destination and i will add slash desktop slash test.txt you can also rename this
too if you want i will just keep it the same now if you have single backslashes you'll likely need to change these
to double backslashes because that is the escape sequence to print a backslash within a string so
we have a source location as well as a destination location now we can begin i would recommend
writing our code within a try and accept block to handle any exceptions so i would like to
handle any file not found error exceptions just in case our program cannot locate our source
file so let's print a message if that is the case perhaps source plus was not
found now within our try block let's check to see if there is already a file at this destination
because i would not like to save over it if there's already a file there so let's do some basic file detection if
os dot path dot exists and i will pass in my destination as an
argument to the exists function so if there is already a file here i should probably let the user know
print there is already a file there else
we can replace our files honestly if you do not care about saving over any files you can omit this part so else os
dot replace and we will pass in our source and our destination
as arguments and let's print a message to the console window to let the user
know that source plus was moved all right let's try this oh i
accidentally deleted my file test.txt all right
now this should disappear in three two one and it's gone
test.txt was moved and it should now be on my desktop which it is now you can also use this to
move a directory as well i'm going to create a new directory i will name this folder
and i will change source to folder and the destination from test.txt to
folder and now this should move my folder there is already a file there
oh let's delete that okay folder was moved all right everybody so
that is how to move a file and or directory using python if you would like a copy of this code i
will post this in the comment section down below but yeah that is how to move a file and
or directory using python hey what's going on everybody it's bro hope you're doing well and in
this video i'm going to teach you guys how we can delete files using python so sit back relax and enjoy the show
all right everybody so in this video we're going to be deleting files using python and in order to do so i recommend
importing the os module this is already included with the standard python library all you need to
do is import it and now we need a file to work with so let's right click on our projects folder and go to new
file i will name this test.txt and we now have a file that we can work with but you know what i would like to
delete this file because it's lame so let's do that in order to delete this file let's type os
dot remove and we're going to list the file path here since this file is within my project
folder i only need to list the file path test.txt if this was
someplace else on my computer i would probably need the file path like that but since this file is within
my project folder i only need the file name another thing that you can do too at least what i like to do
is that i like to pass in a variable called path i will make this a variable and assign it a
string value of whatever the path to my file is so i will assign path the name to my
file test.txt now when i run this this will delete my file test.txt and you can see that it's no
longer there now what if we attempt to delete a file that doesn't exist well we'll encounter an exception so if
you want this is optional we can do some exception handling so let's write the remove function within a try block
and we will catch this exception file not found error and let's print something
print that file was not found now if you attempt to delete a file that
doesn't exist your program will not be interrupted and instead you'll print something that file was not found now this
function does not remove empty folders this is how to do so and actually let's test that so let's
create a new directory i'll call this empty underscore folder
now i will attempt to delete this empty folder empty folder
we encountered a permission error access is denied so let's create an accept block for that
accept permission error print i don't know you do
not have permission to delete that right to delete
an empty folder there is a different function os dot rmdir
short for remove directory we're going to list the file path and pass that in as an argument and
let's create an else block as well because we can else if there are no exceptions let's print
path plus was deleted all right so rmdir
remove directory will delete an empty directory empty folder was deleted now this
function will not delete a folder that contains files and let's try that so let's create a new directory i'll
just call this folder and within this folder i will create a new file
test.txt all right let's attempt to delete this folder i will probably need to change
the file name let's change that to folder and we encountered an
os error that directory is not empty so let's handle this exception we don't need to but i like to
accept os air print you cannot delete that
using that function okay to delete a folder that contains
files we'll need the shuttle module import shuttle and the function that we're
looking for is shuttle dot rm tree short for remove tree and we will pass
in our path now be careful with this function it is considered dangerous because it will delete a directory and
all files contained within so now we can delete a folder that contains files
folder was deleted in conclusion these are three basic functions to delete a file
or directory they are remove which deletes a file rmdir
which is an abbreviation for remove directory which will delete an empty directory and
lastly rmtree which is an abbreviation for remove tree and this is of the shuttle module and
this will delete a directory containing files so if you would like a copy of all this
code i will post this in the comments section down below but yeah that is how to delete files and
or directories using python yo what's going on everybody it's you bro hope you're doing
well and in today's video i'm going to be discussing modules in python so sit back relax and enjoy the show
all right well welcome back we're talking about modules today a module is a file containing python
code it may contain functions classes etc it's used with modular programming which
is this concept of separating a program into useful different parts we're currently working within our main module
and mine is named hello youtube this is how to create a separate module right click on your project folder go to
new python file i think i'll create a module filled with maybe message functions
so i'll call this messages and click python file all right we have two tabs one for our
main module mine is called hello youtube and a separate module for messages and i can write whatever i
want within here since we're using modular programming i'll place a bunch of useful functions within this module
and i'll import them to the main module that we're currently working with let's define a function called hello all
this will do is print hello have a nice
day and i'll create a second function for good measure let's call this pie
let's say bye have a wonderful time
now if we would like access to this module we need to import it i will head back to my main module and
at the top write this import then the name of the module and for this example we used the name of
messages for our separate module and to use a function from that module type the name of the module dot and then
the name of the function so messages.hello will call the hello function found within the messages module and i
can also call the buy function as well messages dot bye and that will print bye have a wonderful
time no it can be somewhat tedious to have to write the name the module followed by the function name what we could do to
shorten things up is to give our messages module an alias also known as a nickname
so at the top write import messages as and what sort of nickname should we
give messages let's say msg for short so we'll replace messages with
msg msg hello and msg buy and this would work the same and it involves less typing there's also an
additional way of importing a module and it goes a little something like this from the name of the module import and then
list all of the functions or classes you would like to import i would like to import hello comma buy
and we no longer need the module name before calling one of these functions i can simply just call hello and vi
directly another way in which this could be written is from messages import asterisk that means
to import all and i actually would not recommend using this if you're working on a large program or something that
contains many modules because you can run into a naming conflict because some of these modules may have
the same named function names or variables so if you're working on a small program i really don't think it's a big deal but
if you have multiple modules i would actually refrain from using import alt it's much safer to write the name of the
module followed by the name of the function that you want to use now another cool thing is that python has a bunch of pre-written modules that
you have access to if you would like a comprehensive list of them type help and pass in the word modules and within
my console window this will populate a listing of all the modules available to us here they are let's see if math is in
here yep there it is so yeah feel free to take a look through some of these modules
because there are some fairly useful tools within some of these modules i suppose you can also go to python's
official documentation and search for the python module index and here's a listing of all the different modules too
they have access to well everyone those are modules they are files containing python code and they
may contain functions classes etc if you would like a copy of all this code i will post all of this to the
comments section down below but yeah those are modules in python i guess there's a module called pickle
hey what's going on everybody it's bro hope you're doing well and in this video we're going to be creating a basic game of rock paper
scissors in python so sit back relax and enjoy the show
let's begin by importing the random module because we're going to need the computer to pick a random choice and we'll create
a list of possible choices so we have three strings within here rock paper and scissors
i think i spelled scissors wrong there we go okay and we will have our computer pick
a random dot choice from our list of choices and let's test it by printing
whatever the computer picks so the computer picked paper paper
scissors and scissors okay what about the player choice let's say player equals
input rock paper or
scissors and let's print what the player has
print player and let's print the computer too
maybe i'll add a string before these so let's say computer call in space
whatever the computer chooses and same thing with the player player all right
let's see if this works rock paper or scissors let's say rock the computer picks paper and i pick rock
so i would technically lose this round now what if the player doesn't pick rock paper or scissors what if they type in
gun so we would like some way to prevent that so let's put our input for our player
within a while loop while player
not in choices so we're going to need to initialize
player because right now it's an unresolved reference so let's say player equals none
for the time being okay now let's test our choices our player choices rock paper or
scissors i pick the gun and it's going to keep on asking me until i pick something from my list of choices so
if i type in that still won't accept it now let's type in rock again there we go now what if
somebody types in one of these choices either all caps or capitalized well that technically
wouldn't be in choices because these strings are case sensitive so why don't we take our user input and make it
lowercase and i'll just add on dot lower and use the lower method so therefore we can now type in any
input that is either all caps or uppercase and then that will still be accepted because we're going to take our player
input and then make it lower case so that it matches one of these choices okay let's work on the win conditions
next so first let's check to see if we encountered a tie if player is equal to computer that
means that we both chose the same thing so let's print whatever the computer picked
what we picked and we will print tie now let's write an else
if statement e l i f player equals
rock so if we pick rock and then we will create a nested if statement if computer
equals paper that means we lose so let's print
everything we have here except we're going to change tie to you
lose now if the computer picks let's say scissors then we win
so scissors and you win okay then let's just repeat this
process for scissors and paper
so this will be another else if statement if we pick
scissors and the computer picks rock then we lose if the computer picks
paper then you win and lastly we have paper as the player
choice
so else if player equals paper and the computer picks scissors then we
lose if the computer picks rock well then paper covers rock and we win now let's test it
rock paper or scissors again i'll try and pick the gun which i can't let's take this seriously
i will pick rock the computer picked rock so it's a tie i'm feeling like paper today oh it's
another tie i guess and how about scissors okay so i win this round i picked uh scissors
and the computer picked paper therefore i win let's try and lose this time
just to verify it so i won again let's try rock again okay so i lost that round so we know
that the win conditions are working now how about we add a feature where we will ask the player if they would like to
play again play another round i think the best way to do that would be to write all of this code within a while loop so
at the top let's write while true and we'll need to indent everything so that it's within
the while loop so let's just indent everything here
now at the bottom we will ask the user if they would like to play again and i will store this within a variable
named play again play again equals input and the prompt will be play again
yes slash no and depending on their input let's just make it all lower case
if play again does not equal yes
that means they would like to quit so let's use a break statement to break out of our while loop that we're in
and at the end let's print by and pay attention to the indentation
this input and this if statement should be within the while loop so they should have at least one indentation and our print statement
here we'll just say bye and you can see that there is no indentation so that is outside of the while loop
okay let's test this one last time rock paper scissors i'm going to pick
the cannon okay that's not valid input how about rock
okay the computer picks rock i pick rock so it's a tie do i want to play again i'm going to select actually yes all
caps that should still be acceptable elbow paper this time
it's a tie again man the computer is really good at this game i'd like to play again i'll pick scissors
okay so i lose i would like to play again and i want to win this time
okay computer pick scissors i pick rock you win do you want to play again nah and it will print
bye well everybody that's a simple game of rock paper scissors i'll post all of
this code to the comment section down below and well yeah that's a basic game of rock paper scissors in python
hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to show you guys how we can build a basic quiz game
in python so sit back relax and enjoy the show
to begin this project i think it would be wise for us to create a skeletal structure for how this program is going
to operate and then we'll fill in the gaps later as we go along so to begin let's define all of the functions that
we'll need we'll need four we'll create a function that is named new game whenever we call this function it will
create a new quiz game for us and for the time being let's write pass just as a placeholder
we'll have a total of four functions new game a function to check our answer
a function to display our score
and lastly a function to play again
all right now i'm just going to add some comments here just to separate each of these functions
that we have just so that it's a little bit easier to read although this part is not really necessary so i just want to separate
each of these functions for some readability okay those are all the functions that
we'll need what we'll need now is some sort of collection to hold all of the questions and answers that we
have and i think a dictionary would be perfect for this so what i did is that i created a dictionary named questions
a dictionary has key value pairs each key is a question that i would like
to ask and each question has an associated value we'll have the user guess between
answers of a b c or d so these would be all of the correct answers all of the
values within this dictionary so here are some of the questions that i want to ask feel free to come up with your own questions
if you would like you can copy the questions that i have they should be posted in the comment section down below so the questions that i'm
going to ask are who created python what year was python created python is attributed to which comedy
group and lastly is the earth round i couldn't think of a fourth question so i just threw in a random stupid question
and the correct answers to all of these questions in order would be a b c and a but feel free to come up
with your own well we have our questions but we'll need some sort of collection to hold all of the different possible answers
to each of these questions and i think a 2d list would work perfect for this
so i have a list of lists a list of tuples could work too i suppose so here are all of the answers for the
first question and the correct answer is a i believe his name is guido van rossum hey if you're listening
man i'm sorry if i'm mispronouncing your name i'm really trying here the second list corresponds to the
second question what year was python created it was created in 1991 at least according to wikipedia python
is attributed to which comedy group the answer is c monty python like monty
python and the holy grail good movie by the way and lastly is the earth round this is a highly debated topic but the
answer is hey the earth is in fact round so i have a list of lists
each list corresponds to a key value pair within my dictionary of questions
and this is a lot to type if you want you can just copy the code that i posted in the comments down below
just copy and paste and you'll have all of this or if you want you can pause the video and type it i don't care so now that you have your
questions and your options we're ready to begin so the first thing that we'll do within our program is to call the
new game function to begin a new game so after we have our questions and options created let's create a
new game by calling the new game function now when we run this program we'll
generate our dictionary of questions and our 2d list of different options for each question
and then we will call the new game function to begin a new game so let's head to the new game function
and fill in everything within our new game function so at the top let's declare a few things
let's say we have a list named guesses and guesses will be an empty list for now
i will declare a variable called correct guesses set it equal to zero because we
haven't guessed anything yet and we will set a current question number
and set the sequel to one to represent the first question okay now we need to display all of the
questions within our dictionary of questions and we can use a for loop for that so
for key in questions
i'm going to print my key
and let's just test this okay yeah here's all my questions i think what i'll do is actually print
something to separate each question let's say one of these lines i think it
would look better with them okay i'll print this line and then we'll move on to a question
all right now after re-running this we have each question and i added just a line break between each of these to make
it look kind of fancy now i need to display all of the different options for each question
and we can do that with a nested for loop so if i were to write i in
options print i let me show you what happens now with
the way this for loop is written now it's going to display all of the different options available to us for the entire quiz game
what i would like instead is to display only the first list for the first question and then the
second list for the second question and follow that pattern so we're going to change our for
loop around 4i in options and we'll set an index for options the index is going to be our question
number minus one now remember what i said in previous videos where different
collections including lists tuples etc the first element in a collection
has an index of zero because computers always start with zero then the next element would therefore
have an index of one then two three then you follow that pattern we're using this question number
variable as some sort of counter and since we initially set this to one i'm just going to subtract one so that
we effectively receive zero as the index and now we just need to increment our question
number after each iteration so let's do that i will add that to the end here after we
finish displaying all of the options let's increment question number by one
by typing question num plus equals one and if i were to run this currently
we'll display all of the different options for each question who created python here's all of the
associated options what year is python created python is attributed to which comedy group
and lastly is the earth round now it's time for some user input so i'm going to create a variable called
guess and make sure you don't put it within your inner for loop it should be within the outer for loop
guess equals input and i'll create a prompt
enter a b c or d
here's something to consider we would like the user to type in either capital a b c or d with strings they're case
sensitive what if the user typed in one of these letters but lowercase if they're correct we would still like to
give them their point why don't we take our guess and make it uppercase so guess equals guess and we can make
this uppercase using the upper method of strings at the end of this game i'm going to compare
our guesses to the correct answers so we have an empty list named guesses and i'm going to
append our current guest that we're working on to our list of guesses so guesses
dot append and we will append our guess this round now that we have our
guess and we've appended our guess to our list of guesses let's check to see if it's the correct
answer or not so we're just about to fill in this check answer function next
so we are going to call this function and pass in a few items as arguments so let's use the check answer function
and we'll pass in the key for the current question that we're on so the key is the correct answer so that
would be our questions dot get key
this would be the answer and we'll also pass in our guess and we are going to fill in
the check answer function but we need to set up the parameters we're receiving effectively our answer
as well as our guess so i'm going to name these as answer and guess and we are going to
check to see if our answer is equal to our guess if answer is equal
to guess let's print something print correct
and i think we should give the user a point we'll have our check answer function return
one for one point return one else if this is not the correct answer
let's print wrong and we will return
zero they do not get a point and since this is returning a value we
should assign that so let's assign the point we may or may not receive to our variable of correct guesses which
is initially set to zero so we'll type correct guesses plus
equals check answer and check answer will return one if we scored a point or zero if we
did not score a point and make sure you have plus equals because if you just set this to equals
then we cannot score more than one point it will either be zero or one so we are effectively
incrementing our correct guesses by one for each point that we score and now we're going to work on the
display score function and we'll call that at the end after we finish all of our questions
that we have so make sure that you do not write this within the for loop it should be outside of it
because once we finish iterating through all of our questions we're going to display a final score
so let's call the display score function and we'll need to pass in some
arguments our correct guesses as well as our list of guesses
okay let's head to the display score function so we have as parameters
correct guesses as well as
guesses i need to remove this pass i'm going to add one of these fancy lines in just to
separate the questions from the results and i will print
results and maybe another one of these lines
okay so i need to print all of the answers
answers and i do not want to end on a new line
so i'm going to set end equal to nothing and i need to display all of the values within
our dictionary all of the answers i will do that using a for loop for i
in questions print questions
dot get i and i do not want to end on a new line
so i'm going to set end equal to nothing effectively and then i'll print a new line okay
let's work on the guesses i think i'm just going to copy all this and make some changes i'll replace
answers with guesses for i in guesses
print i okay let's just be sure that
everything's working we're not calculating a score quite yet so i'm just going to answer a
then b c and d on second thought after printing each of
these answers and guesses i'm going to add a space after each of these so within each of these four loops at the
end i will add a space let me try that again a b
c d okay not too bad now let's calculate the final score and
we're still within our display score function let's set score equal to
correct guesses divided by
the length of our questions
and let me add a set of parentheses around here then i'm going to multiply our score by
100 and if you don't want a decimal portion
because we'll display a percentage we can cast this as an end okay that all looks good and we'll print
the final score print your score
is plus we need to cast our score to a string
because we're using string concatenation plus i'll add a percent sign
all right let's try it i'm intentionally going to get the last question wrong so we should have a 75 if we have four
questions so that would be a b c is the earth round what's earth i'm
gonna guess d answers a b c a your guess is a b c
d your score is 75 okay let's test it but getting all wrong answers d d d
d your score is zero percent congratulations and we'll test it one more time but get
all the right answers we just want to be sure that we have 100 that's a
b c a your score is 100 now the last thing that you can add is
that we can play again if we want and i have a separate function for that if you would like to add this option
here's how to do so let's remove that pass let's set a variable named response
equal to some input do you
want to play again
let's ask for yes or no actually let me remove that okay
and depending on the user's response it might be a lowercase so let's make it uppercase response equals response
and use the upper method if response is equal to
yes all caps if response is equal to yes then return true
else we will return false and that is it for this function
the last thing we need to do is to create a while loop that will continue to ask the player if they want
to play again this will be after we call the new game function while play again
and remember this will return either true or false depending on the user's response
while play again new game and call the new game function to create
a new game for us if we escape the while loop that means the user doesn't want to play again
so let's print the message such as by e
all right let's test it i'm going to get all of the correct answers this time a b
c a all right your score is 100 do you want to play again i'm going to
type yes all right then we can play again
d d d d your score is zero percent do you want to play again
no i think i mastered this game bye all right everybody so that's how
you can use python to create a simple quiz game i will post all of this code to the
comment section down below but well yeah that's a basic quiz game in python for you all
hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain
object-oriented programming in python so sit back relax and enjoy the show
welcome to today's topic on python object oriented programming also known as pop and in today's video
we're going to be creating objects an object is an instance of a class by using programming we can create
representations of real-life objects so look around you wherever you're sitting or standing right now you are surrounded
by objects next to me i have a phone a television some snacks and i'm talking
into a microphone point being we can use programming to mimic real world objects by assigning a
combination of attributes what an object is or has and methods
what an object can do now in order to create an object we'll need to create a class a class can function as a blueprint that
will describe what attributes and methods that our distinct type of object will have you can either create your class
within your main module or you could create a separate file dedicated solely for your class
now to create a class we would type class and then the name of the object that we would like to create so today i
would like to create some car objects because i like cars so we would type car and a common naming
convention with class names is that they should be capital so car is going to have a capital c
and for the time being we need to type in something i'll just type in pass as a placeholder so if you have a small program it may be
better to write your class within your main module but if your class is fairly large
you may want to consider placing your class within a separate module so if you were to take that route we
would go to file new python file and we would name this car click python file and we would declare
our class within the separate module so class car and for now i'll type in pass
then we just need to import this class so within our main module we would type from the name of the module import the
name of the class from car import car now objects can have some combination of attributes and
methods attributes describe what an object is or has so what are a few attributes that cars
might have they might have a make so let's create a few variables for the time being i'm just going to use
none as a placeholder cars can have a model a year
and a color now objects can also have methods what
kinds of methods could cars perform perhaps a drive method and a stop method so let's define those
def let's say drive and we'll have one argument self self refers to the object that is
using this method now what do we want to do when we call this method let's say this car
is driving let's create a stop method as well def stop
and we will print this car is stopped we now have all of the
different attributes and methods we would like our car objects to have but there is one more thing that we need
it is a special method called the init method that will construct objects for us in other programming
languages this is known as the constructor so we need a special method that will create objects for us
so we need to define this method def and the syntax on this is somewhat strange it is
two underscores init it's short for initialize 200 scores again and then we need at
least self as an argument and then we can actually assign our car objects unique variables so take all of
these attributes that we have and we're going to place them within this init method now we can receive
arguments when we create car objects but we need to pass them in as arguments to our init method so we
need to set up some parameters let's say in order to create a car object we need a make
a model a year and a color then when we receive these arguments we can actually assign them to
each car's specific attributes but we need to precede each of these with self self is referring to the object that
we're currently working on or creating so self.make self.model
self.ear and self.color and then when we assign these we're
going to say self.make equals whatever make that we receive when it's passed in as an argument
self.model equals model and continue that pattern for year and color all right that is all we need
for our class car we have a constructor we're assigning arguments that we receive to the
attributes of our car object and we also have two methods one for drive and one for stop
now we can start creating some car objects so going back to my main file here to create an object we need a unique
name for it let's call this first car just car one equals the name of the class car then a
set of parentheses now in order to construct a car object we need to pass in a matching
set of arguments you can see here that we need to pass in a make a model a year and a color so what kind of car should we make let's
say that the make is going to be chevy we need a model
perhaps corvette a year 2021 is good and a color let's say blue
alright now let's actually access some of these cars attributes and i should probably put this one in a
print statement so print car ones make and this should print chevy
then we can do the same thing for model year and color so let's change some of these around
model year and color
yep this object is a chevy corvette 2021 and the color is blue and we should have two methods as well
so car one i would like this car to use its drive method this car is driving and let's have this
car use it stop method car one dot stop
this car is stopped there's one thing that i should mention real quick because i forgot to mention it earlier
so within our init method you can see that we need five arguments in order to construct a car
object self make model year in color but when we pass in our arguments we're not passing in
anything for self we only have four arguments here that's because with python we do not need to pass itself
that's done automatically for us we're referring to the object that we're dealing with as you can see with our drive and stop
method we need to pass in self in order to execute our method but when we call this method we do not
need to do so so just remember with python with self we do not need to pass in anything for this argument that is
all now the nice thing about this is that we can reuse this class as a blueprint to create more car
objects we just call that init method that constructor so this time let's create a second car called
car 2 and this will be a different kind of car what kinds of arguments should we pass
it let's say this is a ford mustang the year will be 2022 and the
color will be red all right let's check card to use attributes
and let's have car 2 use its drive and stop method this is a ford mustang the year is 2022
the color is red this car is driving and this car is stopped one other thing that we can do too is that within our methods here let's
replace car with the name of the model that we're working with so this
plus self dot model plus is driving now this self keyword
think of it as you're replacing self with the name of the object that we're working on if car one
is using its drive method replace itself with car one if this is car two that called this
method then replace itself with car 2. think of it that way and let's do the same thing for stop
this plus self dot model plus is stopped all right
probably don't need these anymore so let's have car one use its drive and stop method this
corvette is driving this corvette is stopped let's try this with car two this mustang
is driving this mustang is stopped now you can have them do things independently too let's have car 1 use its drive method and car
2 uses stop method this corvette is driving and this mustang is stopped in conclusion
a class can function as a blueprint to create objects we can assign attributes what describe
an object is or has and methods what each object can do and then within our class we have
a special method called the init method we can pass in some arguments and assign
these arguments to each object's attributes and then we can reuse this class as if it was a
blueprint so we can create more objects out of it so that is the basics of object oriented
programming in python if you would like a copy of all this code i will post this in the comment section down below
but yeah that's the basics of object oriented programming in python hey what's going on everybody
it's bro hope you're doing well and in this video i'm going to explain the basics of class variables in python
so sit back relax and enjoy the show
here's a super quick video on the differences between class and instance variables for this example let's say we have two
car objects named car one and car two and i'm just passing in a bunch of values to each of
these car constructors now within my class car i have my init method also known as the constructor and what
i'm doing is assigning all of these values to the variables found within my car constructor
these variables declared inside the constructor are known as instance variables and each
object can have their own unique values assigned to each of these variables now where a class
variable is different is that a class variable is declared inside the class but outside of the
constructor and what we can do is set some default values for some variables let's say we would like to add an
additional variable let's say wheels wheels equals and we can set a default value
for all instances of this class for each car object that we create so we set wheels to equal four this is
an example of a class variable whenever we create a car object we can pass in a unique
make model year in color but by default they will all have four wheels now if i was to print the
amount of wheels that car 1 and car 2 have they will both have four wheels it's as if we're setting a
default value if i change this to two wheels well then these cars have two wheels maybe their motorcycles or something now
you can actually change these values each object will have their own copy of this variable but you can set it
to a default value so let's say car one is a motorcycle car one dot wheels
equals two so if i were to print car one's wheels along with card two car one will have two wheels but car two
is still using that default amount of wheels which is four now there's another way in which you can access a class variable
you don't necessarily need to create an object to do so you can just use the name of the class so what i'm going to do is turn all of
these lines into comments and i will print the amount of wheels
that our class has so type in the name of the class car with a capital c
it should be the same name as your class name followed by the name of the class variable car dot wheels but make sure you spell
it right all right so this will display four wheels now what if we decide to change the
class variable through our class well that will affect all instances of our class so let's say car
dot wheels equals two it's as if we change our mind and we have decided to
create motorcycles instead of cars well if we were to change the wheels
class variable through the use of our car class well then it's going to affect it for all instances of this class
you can see that both car 1 and car 2 now have two wheels when we just changed car 1's wheels it
did not affect car 2 at all so that's the main difference between a class variable and an instance variable
an instance variable is declared inside of constructor and they can be given unique values with
class variables they are declared within a class but outside of the constructor and you can set a default value for all
instances of this class for all unique objects that are created and then you can change those values
later too so if you would like a copy of all this code i will post all of this in the comment section down below
but yeah that is the basics of class variables in python hey what's going on everybody
it's you bro hope you're doing well and in this video i'm going to explain inheritance in python so sit back relax and enjoy the show
let's talk about irritants the term inherit means to receive derive or be left with and we can apply this
concept to programming classes can inherit something usually attributes and methods from another class these classes can form
parent-child relationships where a child will receive everything that the parent class has much like you
inherit jeans from your parents and classes can have children and give whatever they own to their children
and in today's video we'll be creating a parent class called animal and children of the animal class will inherit the common attributes and
methods that all animals might have to kick off this video i think what we'll do is keep all of our classes within the
same file just so that it's easier for us to read and understand let's begin by creating a class called animal so at the top
type class animal and what are some attributes and methods that all animals should have let's say we have a class variable
called alive and we'll set this to true if you're an animal you begin by being alive and what are some methods
how about an eat and sleep method so let's define those def eat what are we gonna do when we
call this method let's print something let's print this animal is eating let's also create a sleep
method def sleep what are we gonna do when we call this method let's print something as well
this animal is sleeping and we now have our animal class now let's create separate classes for
specific types of animals let's say a class for rabbit a fish and a hawk so
we can make objects of those classes so let's begin with a rabbit class class rabbit now to use
inheritance with the class that you intend to be the child class after the class name add a
set of parentheses and then pass in the name of the parent class in this case it's going to be animal so we will add that to the parentheses
so now rabbit is the child class and animal is the parent class so the child class is going to inherit
everything that the animal class has so for the time being i'm going to type pass so this rabbit class
will have access to a class variable called alive and an eat and sleep method so let's
define a fish and hawk class and i'm just going to copy what i have here and just change
rabbit to fish and then do so again and change rabbit to hawk this is our family tree animal
is the parent class and it has three children a rabbit class a fish class and a hot class and for the
time being we're just going to write pass as a placeholder so i bet we can create objects from
these classes so let's do so let's say we have an object called rabbit rabbit equals rabbit let's do the same
thing for fish and hawk
all right we now have three objects rabbit fish and hawk and let's take a look at
their class variables i bet they have an alive variable let's check that so i would like to print
rabbit dot oh would you look at that this rabbit class has a class variable called alive even
though there's nothing within this class well that's because we used inheritance so each of these three children classes inherit
everything from their parents all of these attributes and methods i bet they have eaten sleep functions as
well so let's check that with fish let's have fish use its eat method
and hawk will use its sleep method hawk dot sleep
so the rabbit is alive the fish is eating and the hawk is sleeping now even though we
have nothing written within each of these specific types of animal classes all of these animals have access to these
attributes and methods because of inheritance and another benefit of inheritance is
that we don't need to keep on copying and pasting this code for example let's say we were not using
inheritance so we would not need an animal class we could write our code this way where
we would just copy and paste everything underneath each of our classes so what if we need to make a change to one of
these methods as in your boss says you know what let's change sleep to slumber okay well we would have to go to
each of these classes and make the change manually it's not too bad if you have like three classes but what if you have hundreds
that's going to take a lot of effort so wouldn't it be nice if we just list everything that each of these
classes has in common and then have all of these classes inherit from one common class and then if you need to
make any changes you can do so just within this class and this change will apply to all of the different child classes so
that's another benefit of inheritance and not only does it make any changes easier but each class
can have their own unique attributes and methods as well along with the attributes and methods that they inherit from their parents
so for rabbit fish and hawk let's have each of these classes have their own unique method as well so for
rabbit let's define a run method if you're a rabbit then you can run so let's print this rabbit
is running and i'm just going to fix some of the spacing here all right if you're a fish then you can
swim def swim let's print
this fish is swimming and lastly we have hawk if you're a hawk
then you can fly def fly let's print this hawk
is flying like i said before not only do these specific types of animals have
access to all of the attributes and methods that they inherit from their parents but they can have their own attributes
and methods as well so let's test some of these methods so we have our rabbit fish and hawk
objects let's have rabbit use its run method fish we'll use its swim method and hawk
will use its fly method and here we go this rabbit is running
this fish is swimming and this hawk is flying so in conclusion classes can have children the children
classes will inherit everything that their parent class has all of the parents attributes and
methods but not only that the children classes can implement their own unique attributes and methods
as well so that is inheritance if you would like a copy of this code i will post all of this in the comment
section down below but yeah that's the basics of inheritance using python
yo what's going on everybody it's you bro hope you're doing well and in this video i'm going to explain
how multi-level inheritance works in python so sit back relax and enjoy the show
all right welcome back everybody let's talk about multi-level inheritance this is a concept where a derived class
also known as a child class inherits from another derived class here's an example let's say
we have a hierarchy of classes there will be three levels to this we'll create a family tree of living
organisms so at the very top we're going to have a class called organism any class that inherits from
the organism parent class will receive one attribute one variable named alive
and this will be set to true so if you are an organism you begin by being alive now let's say we have a child class that
will inherit from the organism parent class let's say animal class animal
inherits from organism so any animal that we create will have this alive attribute set the
true and all animals eat so let's define a function that does that
at least i believe all animals eat let's pretend that they do so this animal is eating
and now why stop there let's create a class for a specific type of animal i like dogs so let's create a dog class
class dog inherits from the animal class and all dogs should be able to bark so
let's create a function to do that and we'll print this dog
is barking okay so what we just did here is multi-level inheritance we had a derived
child class inherit from another child class so it's kind of like this dog class is
the child animal class is the parent and then the parent of the parent class would be like
a grandparent right and then if you added another layer on top of that to this hierarchy well then the parent of the grandparent
would be like a great grandparent that's how i think of it at least now let's create a dog object just to verify
that everything's working so let's call our dog dog and our dog object should have
access to an attribute named alive and our dog object receives that attribute from the organism class
and this will print true if i were to print whatever this attribute contains and our dog should be able to eat
because it receives this method from the animal parent class and lastly our dog should be able to
bark and that method is defined within its own class
so that's how multi-level inheritance works it's a concept where a child class will inherit from another child class
i like to think of it like a family tree where a child class will have a parent
and the parent of that parent would be like a grandparent basically so if you would like a copy of this code
i will post all of this to the comment section down below but yeah that is how multi-level inheritance works in python
hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to show you all how multiple inheritance works in python so
sit back relax and enjoy the show
all right people multiple inheritance multiple inheritance is the concept where a child class
is derived from more than one parent class here's an example let's say that all of
our children classes are going to be certain types of animals and we would like our animal classes
to inherit from either the prepared class the predator parrot class or both
depending on what type of animal it is because some animals in the animal kingdom can be both prey
and predators and one example that comes to mind would be fish fish will eat smaller fish but also can
get eaten by larger fish so here we have two classes prey and predator each has a dedicated method if a class
inherits from the prey parent class they will have access to a flea method which will print this animal please if a
class inherits from the predator parent class that class will have access to a hunt method that will print
this animal is hunting and it's possible that some animals can do both they can both flee and hunt but they'll
need to inherit both of these classes both prey and predator and that's where multiple inheritance comes in
now let's create some classes based on certain types of animals let's say we have class rabbit and
rabbit we'll inherit from the prey class because rabbits are typically prey and not predators but i don't know there could
be some killer rabbits out there haven't run into any yet let's have class hawk inherit from the
predator class and lastly fish and fish can be both prey and predators
so they will inherit from both classes and we just separate each class with a comma so prey
comma predator and it's as simple as that now let's create an object from each of
these classes we have rabbit equals rabbit hawk
equals hawk and fish equals fish now let's just verify
all of the different methods that each of these objects inherited so our rabbit should have access to a
flea method but no hunt method and let's just test that yep this animal flees and my hawk object
should have access to a hunt method but no flea method this animal is hunting and lastly
my fish object has access to both a flea and a hunt method and if you take a look
on the right hand side of this pop-up window it shows the class that it inherited this method from
so fleet comes from the parent class of prey and hunt comes from the apparent class of predator
so my fish can both flee and hunt because it's typically considered both
prey and predators this animal flees this animal is hunting
so that's basically what multiple inheritance is it's a concept where a child class is
derived from more than one parent class so that's basically multiple inheritance i'll post all of this code to the
comment section down below and well yeah that's how multiple inheritance works in python hey what's going on everybody
it's bro hope you're doing well and in this video i'm going to teach you guys about method overriding in python
so sit back relax and enjoy the show
here's a super quick video on method overriding i have two classes a class called animal and a class called rabbit
rabbit inherits from the animal class therefore rabbit is the child class an animal is the parent class within the
animal class there is one method a method called eat and when you call this method all this
will do is print this animal is eating the rabbit class inherits from the animal class therefore
rabbit has access to this eat method and if i were to create a rabbit object and this rabbit used its eat method well
then this is going to print this animal is eating now method of writing is the ability of an object
oriented programming language to allow a subclass also known as a child class
to provide a specific implementation of a method that is already provided by one of its
parents in this case we're going to override the eat method and what we can do is provide a more specific
implementation for the rabbit class and now to override a method what we'll do is that within
the child class we need to define a method with the same matching method signature that is the
combination of a method's name plus its parameters both of these together are known as a
method signature within the child class we will define and eat method with the same parameters
def eat and in this case the only parameter is self just to keep this simple
and what we'll do is that will provide a more specific implementation of the eat method
specifically for rabbits so let's print something more closely associated with rabbits such as
this rabbit is eating a carrot now if i were to run this program
again we will instead use this implementation of the method instead of the one that it
inherits from its parent class of animal basically speaking an object will use a method that is more closely
associated with itself first before relying on a method that it may inherit from a parent class
in this example we're using this version of the eat method specifically for rabbits instead of the
version that we inherit from the parent class of animal that is the basics of method overriding i will post this code in the
comment section down below and well yeah that's how to override a method using python
hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to teach you guys all about method chaining in python
so sit back relax and enjoy the show
all right everybody let's talk about method training method chaining is used to call multiple methods sequentially and each
call performs an action on the same object and return self here's an example of how method chaining would be useful
let's say we have a class named car car has four methods turn on drive break and
turn off they will all just print a simple message beginning with turn on turn on what print you start the engine
drive will print you drive the car brake will print you step on the brakes and turn off will print
you turn off the engine let's say we have a car object car equals car and i would like my car
object to use its turn on method immediately followed by the drive method with how we've been
coding things previously we may write something such as the name of the object in this case car
dot and then the method to use i would like my card to use the turn on method followed by
car dot drive so currently this will take two lines of code but this will print you start the engine
and you drive the car now with method training we can call multiple methods
sequentially now the format on this is going to be a little bit different and if we were to write the same code
using method chaining it might look a little something like this after the first method call we would add
dot and then an additional method that we would like to call so for example after the turn on method we'll
immediately call the drive method but there's one more thing that we need to add when we're using python to do method training
so normally this by itself will not work when we call a method in python if there is nothing that is returned python will
return none so as you can see here attribute error none type object has no attribute of drive so we
need to return itself under each method that we're using method training with so let's add return self to each of
these methods so let's do that for drive break and the turn off method and this
should work now you start the engine you drive the car so think of it like this after we finish
calling this method python is going to return self so it's going to return car so then
we'll immediately use car.drive now here's another example let's say i would like to
call the break method followed by the turn off method so that would be car dot break
parentheses followed by dot turn off so this will print you step on the
brakes you turn off the engine now here's an extreme example let's say we would like to call all four methods in order
so that would be car dot turn on followed by dot drive
dot break dot turn off so this will call
all four methods in order starting with the leftmost method you start the engine you drive the car
you step on the brakes you turn off the engine now if you have one long method chain like this
it might become difficult to read after a while so what i would recommend if you're doing a lot of method chaining
is that after each method call just hit enter to move each method call down to a new line
so it'll look something like that and this backslash might be inserted this is a line
continuation character so this is a little more readable but you know it still does the same thing
basically all right everybody so that is method training it's used to call multiple methods sequentially and each
call performs an action on the same object and returns self if you would like a copy of this code i will post all of this in the
comments section down below but yeah that is how to do a method chaining in python
hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain
the super function in python so sit back relax and enjoy the show
well then since you clicked on this video i should probably discuss the super function now the super
function is used to give access to the methods of a parent class it returns a temporary object
of a parent class when used here's an example of why the super function would be useful
let's take this program that i've written there's three classes a class called rectangle which is the
parent class to two children classes square and cube and all we're doing is creating a square
object and a cube object but we need to pass in a length and a width for squares
and a length width and height for cubes now with programming we don't like to
repeat code we like to reuse code and if you take a look within my knit methods for both square and cube we're repeating
self.length equals length and self.width equals width twice for our init methods
so one thing that we can do any similarities between the square and cube class we can place
within the rectangle class and then reuse this code so what i'm going to do
is copy this indent method within our square class and paste it within our rectangle parent
class and then in order to access this init method we can use the super function so we no
longer need these two lines of code what i'm going to do is ask the rectangle class to use its init
method so we're going to type super parentheses dot and then the name
or the function of the parent class that we would like to use and i would like to use the init method
but i need to send a length and a width because it requires that so let's send these so we're going to
pass in our length and our width and now we can do the same thing for our cube init method
so i will copy this line of code we no longer need these two lines of code because we will be reusing our init
method within the parent class of rectangle but we'll still need to keep this line in to assign the height
because that's a difference between our square and cube class and now we can just reuse this init
method within the rectangle parent class now i'm thinking that we should probably test to see if
length and width are assigned to these attributes and one way that i think would be fun would be to
create an area method for squares and a volume method for cubes so let's define
an area method within the square class def area and i would like to return self
dot length times self dot width and we can create a volume
method within cubes so let's do that def let's change this to volume
we'll multiply it length times width times height but we need to type self dot pipe
and we can call these methods to get the area of a square or the volume of a cube
let's print square dot area
and then cube dot volume so if our init method
is actually being used we should have a length and the width assigned to these attributes and it
looks like we do in conclusion the super function is used to give access to the methods of a
parent class it returns a temporary object of a parent class when used in order to
access the methods of the parent class also known as a super class and in this example within
the init methods of both square and cube we immediately called the init method of
the parent class to pass in some arguments that both of these classes have in common so if you would like a
copy of this code i will post all of this in the comment section down below but yeah that is how the super function
works in python hey what's going on everybody it's bro hope you're doing well
and in this video i'm going to explain how abstract classes work in python so sit back relax and enjoy the show
hey what's good everybody let's talk about abstract classes now abstract classes prevent a user from
creating an object of that class think of an abstract class more as a template
it's an idea it's not real it's like a ghost class basically plus an abstract class compels a user to
override any abstract methods within a child class so it's also a form of checks and
balances as well which we'll discuss later now here's a small program that i've written let's say we have
three classes class vehicle car and motorcycle car and motorcycle are the children
classes of the vehicle class now within this vehicle class we have a go method
but i'm currently only defining it not actually implementing it so i'm just writing pass now within car and motorcycle we're
overriding this method and creating our own implementation of the skull method that we inherit the go method for the car will print you
drive the car and the go method for the motorcycle class will print you ride the motorcycle now currently i'm creating an object of
each of these classes i have a generic vehicle object car object and motorcycle object now after running
this program currently the go method within our vehicle class is not being implemented so this won't print anything but the go
method within our car class will print you drive the car and the go method within our motorcycle class will print
you ride the motorcycle with that being said let's pretend that we're coding the next need for speed game and we would like a
user to create an object from a specific kind of vehicle whether it's a car from
the car class or a motorcycle from the motorcycle class we would like to prevent a user from creating an object of the vehicle class
because the vehicle class is too generic we do not have all of the implementations set up for a vehicle it would be like
somebody unlocked the ghost car or the invisible car which doesn't actually exist and is missing a lot of features we need a user
to create an object from a child class because these are fully fleshed out and one way in which
we can prevent a user from creating an object of this class as well to turn this class into an
abstract class which is what this video is all about go figure now the first step to creating an
abstract class is that we'll need some imports so at the top of your program write this from
abc abc is an acronym for abstract based class abc from abc
import abc all capital comma abstract method all right
now with our vehicle class the class that you intend to be the abstract class add us out of parentheses and our
vehicle class will inherit from the abc class and now with any methods within your
vehicle class you're going to add this decorator at the top at abstract
method all right we should now be prevented from creating a vehicle object our vehicle class is now
an abstract class and we cannot give it a physical form a physical manifestation and if we attempt to you can see here
that we have a type error can't instantiate abstract class from vehicle with abstract methods
go so an abstract class is a class which contains one or more abstract methods and an
abstract method is a method that has a declaration but does not have an implementation
now by definition an abstract class contains one or more abstract methods if i remove
this one abstract method within our vehicle class well we could still create a vehicle
object and i'm just going to turn this vehicle.go line into a comment because we don't have a go method anymore
as you can see we can still create a vehicle object which we would like to prevent a user from doing
so we need at least one abstract method within our vehicle class so i'm going to go ahead and add this go
method back in an additional feature of abstract classes is that they compel a user to override any abstract methods
within a child class a method that is abstract has a declaration but does not have an implementation so let's say that we
create our vehicle class our abstract vehicle class and now we're creating the children classes of car and
motorcycle and let's say i'm not paying attention and i forget to add a go method
so if i just write pass within my motorcycle class i'm currently missing a go method within my motorcycle class
well python is going to prevent me from running this because we have a type air can't instantiate abstract class vehicle
with abstract methods of go so by inheriting from an abstract class it's a good form of checks and balances
to be sure that your children classes are not missing any implementations of any methods that
they inherit here's an additional way of thinking of this our vehicle class is telling its children if you're going
to inherit from me then you need to override this abstract method of mine and if you don't well i'm not going to let you be
instantiated so in order for us to create a cart and motorcycle class we need to override the go method that
they inherit from its parent class of vehicle and provide its own implementation now let's say we create an additional method
let's say we have a stop method so let's define that def stop for the time being i'll write pass and
to make this an abstract method add this decorator at abstract
method now car and motorcycle both need to implement that method of stop it's
currently missing it as you can see here class car must implement all abstract methods and the same thing applies for a
motorcycle as well so we need to override this method and provide its own implementation
so let's remove that decorator and let's print something let's print this car is stopped
and i'll do the same thing for motorcycle so def stop let's say
this motorcycle is stopped and we'll call the stop
method for each of these types of vehicles car dot stop and motorcycle dot stop
all right and we can now create a car and motorcycle object because we are overriding both of these
abstract methods found within the parent class of vehicle all right everybody so that's the basics
of abstract classes it's a class which contains one or more abstract methods
and an abstract method is a method that has a declaration but does not have an implementation and
the benefits of using an abstract class is that they prevent a user from creating an object of that class
plus it compels a user to override any abstract methods found within a child class
so if you would like a copy of this code i will post all of this in the comments section down below but yeah that is how abstract classes
work in python hey what's going on everybody it's you bro hope you're doing well
and in this video i'm going to explain how we can pass objects as arguments so sit back relax and enjoy
the show ladies and gentlemen in today's video i'm going to be demonstrating how we can
pass objects as arguments for this example let's say we have a class car and there is one class variable
called color color equals none what we'll be doing is calling a function that accepts an
object as an argument as well as a color so let's create a function named change
color now make sure when you define this function it's not within the cart class then technically this would be a method
of the car class what we would like is a separate function outside of the car class now we need to set up some parameters we
would like to accept a car object as well as a color so for the first parameter let's say a
car and make sure this is in uppercase or capital because python doesn't like that argument names should
be lowercase so when we pass in a car we will give it a nickname of car and we would also like to pass in a
color so let's set up a parameter called color now when we pass in a car we will assign
that car's color with whatever color that we receive so car dot color equals color
and now let's create some car objects so let's say car one equals car car two equals car
and car three equals cart currently if i were to print their colors this is what we'll see
print car one dot color and repeat the steps for two and three
and we're not calling this function yet so all of these colors should be set to none they are basically cars with no color
they're i don't know iron or something whatever cars are made out of aluminum plastic stuff like that okay so now
let's call this function change color perhaps right here so in order to call this function we need to
pass in a car object as well as a color so let's pass in car one and a color perhaps red and
we'll repeat the steps for two and three so let's say car two will be white
and car 3 will be blue now after calling this function we have
a car object and a color and we're assigning the color of our car to whatever color that we receive
now these cars in order car 1 2 and 3 are red white and blue now one thing
that you should know is that the name of this parameter that accepts our object doesn't necessarily need the same name
as the class name that created the object that we're passing in we could name this something else entirely perhaps
vehicle you'll just want to be sure that this is at least descriptive of the kind of object that you would like to pass in and we're not limited to
just passing in car objects we can pass in all sorts of objects but we need to pass in an object as well
as a color so this time let's create a class called motorcycle class motorcycle and this class will
also have a color set to none so what we're doing is actually reusing this function for all sorts of different
kinds of vehicles now let's create a vehicle i'll just name this bike one for short bike one equals motorcycle now let's
call the change color function and we can pass in an object as well as color this time we
will pass in our bike object as well as a color i think black counts as a color and let's print
bike once color and this should work we have red white
blue and black in conclusion we can pass objects as arguments to a function
much like what we've been doing with variables however the type of objects that we pass in may be limited based on
the required attributes and methods that that given class or object might have and we'll get more into this on the
next video on duct typing so if you would like a copy of all this code i will post all of this
in the comment section down below but yeah that is how to pass objects as arguments
using python hey what's going on everybody it's bro hope you're doing well and in
this video i'm going to explain duck typing in python so sit back relax and enjoy the show
i hope you all like ducks because that's the topic of this video duct typing is the concept where the
class of an object is less important than the methods and or attributes that that class might have
the class type is not checked if the minimum methods and or attributes are present it's based off of a popular
phrase if it walks like a duck and it quacks like a duck then it must be a duck here's an example i have two classes
class duck and class chicken both duck and chicken have walk and talk methods
but they print something different with the duck class the walk method will print this duck is walking and the duck talk
method will print this duck is quacking the chicken class has the same named methods walk and talk
but they print something slightly different a slightly different variation the print method will print
this chicken is walking and the talk method will print this chicken is clucking now let's say
we have a third class a class called person
now there is one method within our person class let's say we're attempting to catch a
duck we'll pass in self and we need to pass in a
duck object as an argument so let's type duck now within this method
we'll have our duck use its walk method as well as its talk method duck.walk and
duck.talk and then maybe we'll print something
such as you caught the critter
now let's create an object from each of these classes let's create a duck object duck equals duck
a chicken object chicken equals chicken and lastly person person equals person
now if we would like our person to use the catch method we need to pass in a duck as an argument
so with our person let's type person dot catch and we need to send a duck object because that's a required
parameter here so we're passing in our duck object that we created and as soon as we catch the
duck it's going to use its walk and talk method and then we'll print you caught the critter so as you would
expect this will print this duck is walking the stuck is quacking you caught the critter
now with duct typing we can pass in a different type of object as long as it
has the same methods and or attributes as our duck we could pass in a chicken because a
chicken can also walk and talk so this time let's pass in our chicken as an argument and this will still work
even though our parameter is set up to take a duck object this chicken is walking this chicken is
clucking you caught the critter in layman's terms think of it like this python is examining this chicken object
it's using its walk method it's using its talk method which are required and python is saying well that's close
enough remember if it walks like a duck and it quacks like a duck then it must be a duck so duct typing is
the concept where the class of an object is less important than the methods and or attributes that it might have
the class type is not checked if the minimum methods and or attributes are present now let's say with our
chicken object our chicken can no longer walk well we cannot pass in our chicken
object anymore we have an attribute error chicken object has no attribute walk
so python took a look at this chicken and noticed that it does not have a walk method well it's not walking like a duck but
it's talking like a duck so it doesn't count as a duck because it doesn't have its walk method
in conclusion the class type of an object is not as important as the methods and or attributes that that
class might have when using duct typing the class type will not be checked if the minimum methods and or attributes are present
since chickens can both walk and talk like ducks then they can be a substitute for ducks when
we pass in our duck object to this method so if you would like a copy of this code i will post all of this in the comment
section down below but yeah that is the basics of duct typing in python
hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to discuss
the walrus operator in python so sit back relax and enjoy the show
all right people i hope you like walruses because that's the topic of this video we'll be discussing
the walrus operator also known as an assignment expression it's a colon followed by an equal sign
and it kind of looks like a walrus on its side now this is a new feature for python 3.8
what it does is that it assigns values to variables as part of a larger expression here's an
example of why the walrus operator would be useful let's say we have a variable named happy
happy equals true if you're not happy or you're feeling so so you can set this to false if you want
so let's print the value contained within happy so this will print true to the console
window now wouldn't it be cool if we could combine both of these statements together so we would want to
say something such as happy equals true and then print it to the console window using one line of
code well normally we can't do this using the standard assignment operator now one
thing that we can do is use the walrus operator this assigns a value to a variable
as part of a larger expression so this would technically be allowed if this assignment operator
was instead an assignment expression the walrus operator happy walrus true and when they're all within
a print statement we can assign a value to a variable and use it as a part of a larger expression
so as you can see this new variable of happy was assigned and used in one expression
now here's a more practical example of why the walrus operator would be useful let's say we have the smell program what
this will do is consistently ask you what food you like and put it into a list called foods
foods equals list while true food equals input what food do you like if food
equals quit break then append our list of foods with this new food item that we have
okay let's run this then so this while loop will continue as long as i don't type in
quit and it will consistently ask me what food do i like and place that food item into a list
named foods so let's begin what food do i like well i do like pizza i like sushi and i like ice cream
and that should be enough for me i'm going to type in quit to exit this program now let's write the same program but
instead use a walrus operator so that we can write this program using less lines of code now if i were to use
the walrus operator this is how i would write the same program we would still need our list foods
equals list now for my while loop it's going to look something like this
while food walrus operator input what
food do you like all right this is the assignment portion
now we can use this assignment portion within a larger expression so let's also check to see if our input
does not equal quit alright so then after each iteration of this
while loop we will take our list foods dot append food and
that is it so we have written the same program in about half the lines of code that we did previously so
let's test it what food do you like pizza sushi ice cream
and quit well everybody that is the basics of the walrus operator also known
as an assignment expression it's a new feature for python 3.8 and beyond so if this doesn't work for
you i would check to see what version of python you're using first it assigns values to variables as part
of a larger expression if you would like a copy of this code i will post all of this in the comment section down below
but yeah that is how the walrus operator works in python hello what's going on everybody it's bro
hope you're doing well and in this video i'm going to show you guys how we can assign a function to a variable in python
so sit back relax and enjoy the show hey all in today's video i will show you
all how we can assign a function to a variable this video will be a prerequisite for a few videos i have coming up regarding
functions now let's say we have a function named hello and all we'll do is print the word hello
and as you know to call this function you would type the name of the function followed by a set of parentheses and this will print the word
hello the set of parenthesis that comes after a function's name is the portion that will call the
function if you were to remove that set of parenthesis afterwards we would not in fact call that function
now with python python will pretty much treat everything as objects including functions so there's something
i want to show you guys if i was to print the name of my function hello what will be displayed is the memory
address of this function this is the memory address of where this function is located within my computer's
memory and it's in hexadecimal think of it like a street address such as one two three fake street this is the
address of where this function is within my computer's memory and each time that i run this program this number can change as you can see
here now one thing that we could do we could assign this address to a variable let's say hi equals hello and be sure
that you're not adding that set of parentheses afterwards because then you would be calling the hello function and returning the result to
high so high equals hello no parentheses and if i was to print hi well
the address of hello and hi will be at the same memory address both of these numbers are the same now
what do you imagine would happen if i was to call the high function after we assigned the memory address of hello
to hi well then what we'll end up doing is calling the hello function even though we're listing that we would
like to call the high function even though it doesn't exist so it's as if this hello function
has two names you can either use hello or you can use hi and let me demonstrate that
so you can call either hello hi or both for this example that's because we're assigning the
memory address of hello to this variable of high so we could treat high as a function it's kind of like
an alias where this function has two names now here's another demonstration let's say that we would like to assign
our built-in print function to a variable so let's say maybe say
say equals print and when i say print i'm referring to the print function and
be sure you're not adding that set of parentheses afterwards now if i need to print something to the console window i can either use
print like what we've previously been doing or i could use say because say has the same memory
address let's say perhaps whoa i can't
believe this works surprise face all right so
we can call the print function by saying the word say say all of this text and this will print
all of this text well say all of this text to the console window under normal circumstances i'm not sure
why or when you would need to assign the print function to a variable but you can and well that's kind of cool so
i thought i'd show you guys that so everybody that's how to assign a function to a variable
like i said we'll be building upon this topic so you want to be sure that you understand this all right then well if you would like a
copy of this code i will post all of this to the comments section down below but yeah that's how to assign a function
to a variable in python hey uh what's going on everybody it's bro hope you're doing well and in
today's video i'm going to explain higher order functions in python so sit back relax and enjoy the show
all right ladies and gentlemen let's talk about higher order functions these are functions that do one of two
things one they either accept a function as an argument or two they return a function as output
and in python this is totally allowed because functions are also treated as objects i'll give you guys an example of both of
these but let's begin with number one here's an example of number one let's say that i have two functions
named loud and quiet both of these functions will accept a string as an argument loud will return that string all
uppercase as if we're shouting something quiet we'll return that text i'll lowercase as if we're whispering
something now i'm going to create a third function called hello and this will be the higher order
function it accepts a function as an argument i'm not sure if we're going to be passing in loud or quiet
whatever it is i'm going to give it a name of funk short for function each of these
functions will return some text either all uppercase or lowercase i'm going to assign that to
text text equals the name of our function we're not sure what it's going to be and i will pass in some text in order to
call one of these functions i will pass in just the word hello that's capitalized and at the end i will print whatever
text that we have in order to call this function of hello i need to pass in a function as an argument
do i want to pass in loud or quiet do i want the loud variety of hello where all of the
text will be uppercase or the quiet variety of flow where all the text will be lowercase
i would like to pass in loud because i want to make my text all uppercase
so i'm typing the name of the higher order function and passing in a function as an argument and the result
is that the word hello will be printed to the console window all uppercase now here's a rundown of
what just happened we're calling the hello function and we're passing in loud as an argument we're naming loud as
funk while we're within this hello function text equals loud and we're sending a
string of text that says hello we're returning that text all uppercase
assigning it to a variable called text and printing that text to the console window now if i would
like to use the quiet variety of hello then i'm going to pass in quiet as an argument so quiet will make
all of this text lowercase alright people so that's example one of a higher order function a higher
order function is a function that accepts a function as an argument this hello function is an example of a
higher order function because we're accepting either loud or quiet as arguments
all right people let's move on to the second part of this definition for higher order functions a higher order function is a function
that returns a function i'm going to give a different example this time let's say we have a pair of
nested functions the outer function will be named divisor and we will accept a number as an
argument that we will call x a divisor is a number that is used to divide another number when using division and
inside this function we have an inner function named dividend dividend is the number
that's going to be divided and we will call the argument that is passed in y all we'll do is return y divided by x
we're dividing the dividend by the divisor y divided by x now within the
outer function but not within the inner function we're going to return our dividend function so a higher order
function is a function that returns a function divisor is a higher order function because we're returning
dividend now if i would like to access this nested dividend function i first need to call
the outside divisor function and pass in a number as an argument to serve as the divisor
the divisor function is going to return my dividend function which we can then assign to a variable
so the variable i'm going to name divide divide equals and i need to call divisor
and set a divisor let's say that i would like to divide all numbers by two so i will set x to be two
and now for the dividend i will print call the
divide variable and pass in a number as the dividend the number that's going to be divided
and let's say i would like to divide 10 by two and this will work as you can see we
have five in the console window so let me explain what just happened here so our program
begins here divisor and we're passing in two x will be two and it will stay that way
until we finish this program or until we reassign x now x equals two we're skipping this
function because we did not call it yet we're returning dividend and assigning it to a variable
and we can call a variable if it has the memory address of a function which is what we're doing in this line
now we're calling dividend and passing in 10 so y equals 10
and x still equals to we're returning 10 divided by 2 and printing it to the
console window well everyone in conclusion a higher order function is a function that either one accepts a
function as an argument or two they return a function the format is a little bit strange and we're not
quite used to it yet but in future videos we'll have more practice with high order functions if you would like a copy of all this
code i will post all of this to the comment section down below but yeah that is how higher order
functions work in python yo what's going on everybody it's bro hope you're doing well in today's video
i'm going to explain lambda functions in python so sit back relax and enjoy the show all right
ladies and gentlemen let's talk about lambda functions these are functions that are written in one line and use
this lambda keyword they accept any number of arguments but they only have one expression
think of it as a shortcut they're useful if you need a function for only one use or a short period of time
and then you're just planning on throwing away that function afterwards here's the syntax for a lambda function
you type lambda you add the parameters followed by a colon and then your expression let's say we have this function named
double double accepts one argument that we will name x we're returning x times two
effectively doubling it so if i need to call this function i would type double and then pass in a number as an argument
so the result if i pass in 5 would be 10. now let's write the same function but instead write it as a
lambda function so let me turn these lines into comments now the first step is to type lambda
then our parameters we only have one parameter and that is x colon and then our expression we would
like to return x times two now this lambda function is going to return a function object and we
can assign that much like what we do with variables let's say double equals lambda x colon
x times two and in order to call this lambda function we're going to type double then a set of
parentheses to call this function and then pass in our arguments so let's say that x equals 5 and then
we're going to double it and the result is 10. so that's the syntax for a lambda function you type
lambda your parameters colon and then your expression this time let's say that we have two parameters
we have two numbers that we want to multiply by each other so let's say that this function will be
called multiply multiply equals lambda x comma y because we have two parameters
colon followed by our expression we would like to multiply x times y and that is it
now in order to call multiply we need to pass in two arguments if i were to pass in just one well we'll
have a type error so let's pass in five and maybe six and the result is thirty now let's try three parameters
let's say we would like to add three numbers together let's say add lambda x
comma y comma z so we have all of our parameters we have our colon here and then we need
our expression x plus y plus z and
let's add five six and seven together the result is 18. now let's try
something a little more complex let's pass in some strings this time i'll create a function named full name
full name equals lambda first name comma
last name the expression is going to be first name plus perhaps a space
plus last name now i need to pass in a first name and a last name
full name and you can use your own name for this example if you want let's say bro comma code
yep this will print your first name and your last name to the console window now let's take it a step further let's
say we would like to check somebody's age once using a lambda function we would like to check to see if they're 18
or older because they're signing up for something perhaps let's say a credit card so let's create a function object age
check equals lambda we have one parameter somebody's edge colon and then our
expression let's type true if age is greater than
or equal to 18 else false to call this age track function
we need to pass in an age let's say the user is 12 and they're trying to sign up for a
credit card while this will return false let's say they're 18 now and this will
return true so that's a lambda function it's a function that is written in one line using this
lambda keyword they accept any number of arguments but they only have one expression think of it like a shortcut and they're
useful if you need to use a function only once and then you're just planning on throwing it away afterwards so if you would like a copy of all this
code i will post all of this to the comment section down below but yeah those are lambda functions in
python hey what's going on everybody it's bro hope you're doing well and in this video i'm going to show you
all how we can sort iterables in python so sit back relax and enjoy the show
well well well welcome back everybody in this video i'm going to show you all how we can sort data using python we'll
begin with the sort method which is used with lists and the sort function which is used with iterables and that would
include lists let's start with something very basic and then we'll crank up the difficulty one step at a time
i have a list named students and i have a bunch of student names within this list we have squidward sandy patrick
spongebob mr krabs let's say that all of these students are taking a college course
perhaps on marine biology what i would like to do is to sort this list in alphabetical order and to do that we have a method that is
built in with lists so type the name of your list students dot sort and it's easy as that and to
display this list i think i'll use a for loop for i in students
print i and there you go that's how to sort a
list starting with the top we have mr krabs then patrick sandy spongebob and squidward the sort method of lists can
accept keyword arguments there are two optional keyword arguments that we can pass in we can pass in key and or reverse we'll cover key a
little bit later if we set reverse to true then our list will be sorted by reverse alphabetical
order beginning with squidward spongebob sandy patrick then mr krabs
now the sort method does not work with other iterables it's a built-in method for lists
if our list of students was instead let's say a tuple well then the sort method is not going
to work you can see here that we have an attribute error tuple object has no attribute of sort
that's where the sort function would come in because that's useful for other iterables you can also use this for a list 2 i
suppose the sort function will return a sorted list so let's use the sort
function this time and we'll assign the result to a list called sorted students
equals sorted and then we need to pass in an iterable and we have the option of
passing in a key and or reverse the iterable that we'll pass in as an argument is our tuple
named students so this line will be sorted students equals sorted students sorted students
is a list the sorted function will return a list but it accepts an iterable as an argument
and to display this we should change 4i and students to 4i in sorted students and now
this function will accept our iterable our tuple and create a sorted list and all of
these are in alphabetical order and to reverse this we can pass in the keyword argument of
reverse equals true and now our list is sorted in reverse alphabetical order all right
we're gonna take it up a level welcome to level two sometimes data isn't always as simple here we have a
list of tuples each tuple has a corresponding student record we have a name a letter grade for their
college course and the student's age now how can we sort this list of tuples by either the student's
name their grade or their age well that's where the key keyword argument's going to come in with
sorting if you take a look at this list of tuples it somewhat resembles a spreadsheet there's rows and then
there's columns the first column corresponds to student names the second column are grades and the third column are all
the ages of the students so by default sorting by the first column is actually really easy that's
the default so if we need to sort alphabetically that would be the same process as before we would type the name of the
list students dot sort but if we were to print
this iterable for i in students instead of just the individual student
names we're going to get each tuple that we have so now all of these tuples are arranged in
alphabetical order starting with the first column that we have which are all the student names
now how can we sort these iterables by their second column for this case it would be student grades
or even the third column which would be the student ages well that's where the key keyword
argument's going to come in this is a keyword argument and we set key equal to a function that's going to
return the index of that specific column that we have so let's say key equals grid grade is
going to be a function object grade equals and we can easily use a
lambda expression for this lambda let's say grades colon
grades and we will set an index of one now the first index is zero that's the
first column because computers always start with zero column two would have an index of one
and then column three would have an index of two so grade equals lambda grids
colon grids index one you can also rename these if you want so students dot sort we're setting the
key equal to grade and grade is a function object via a lambda function and now all of
these students will be sorted by their grades starting with sandy then spongebob mr krabs patrick then
squidward if this needs to be in reverse order we can pass in that other keyword argument
of reverse equals true and for practice if you wanted to sort all of this data by each
student's age then we would change grade to let's say age age equals lambda
we'll change grades to maybe ages colon ages and the index would then be two
because the first column here is zero then one then two and change key to our function
object of edge now each student is sorted numerically beginning with the
smallest edge well the youngest person starting with spongebob sandy patrick squidward then mr krabs
and like i said before if you want your data arranged in reverse order you can set that keyword argument of reverse to true
within the sort method and all of our student data is sorted beginning with the eldest student which
is mr krabs then squidward patrick sandy and then spongebob and for the last part of this video
let's say that we're working with some other iterable let's say we have a tuple of tuples instead
well we can no longer use this sort method because that only belongs to lists you can also use the sort function with
lists and it will generate a new sorted list without changing the placement of the original so let's say we have a tuple of tuples
and this will create a new sorted list let's call this list sorted
students equals then we'll use the sorted function we need to pass in an
iterable and we can pass in both a key and or the reverse keyword
argument so the iterable would be students and let's set the key equal to edge
and i will not reverse it we can keep it as it is but let's change for i in students to sorted students
and that's how to use the sorted function to sort an iterable including a list well all
right everyone that's how to sort iterables in python if you would like a copy of all this code i will post all of this to the
comments section down below but yeah that's a basic way to sort iterables in python hey what's going on everybody
it's your bro hope you're doing well in today's video i'm going to show you all how the map function works in python so
sit back relax and enjoy the show what up everybody let's discuss the map
function the map function will apply a function to each item in an interval that would include lists tuples things
like that and the map function accepts two arguments are iterable as well as the function we would like to
apply to each item within our iterable for example let's say that we have an online store to represent this i have
a list of tuples named store each tuple within this list corresponds to an item for sale within
our store there's shirts pants jackets and socks and each item has a price in us dollars let's say now what
i would like to do is to convert all of the prices within my store to euros and currently the conversion
rate as of the filming of this video is one us dollar to 0.82 euros
so let's begin we can easily convert dollars to euros with a lambda function so let's say two euros
equals lambda the parameter will be data colon and the next part's a little bit
tricky within a set of parenthesis to represent a tuple we'll take data at index 0 that
corresponds to the first column comma data at index 1.
this represents the index of our prices we're going to take data at index 1 times 0.82
and that's it the first column will be left untouched but the data in column 1 will be
multiplied by 0.82 now our map function is going to create a map object but we can easily cast that
to a different type of iterable so let's say that store underscore
euros equals map parenthesis and then we can pass in our
function as well as our iterable our function is our two euros function
comma and our iterable is our store and that is it now if you want to
convert this map object to an iterable you can easily surround this with a cast i would like to convert this map object
to a list and we will now have a new store named store euros which will have all of the
different prices of our store in euros and to display this i'll use a for loop for i
in store euros print i and
let's try it yep that seems about right all of the prices in our store are now
in euros let's pretend that these prices are already in euros and we would like to convert these
to american dollars so we will use the same conversion rate but divide by 0.82 so let's create a separate
lambda function two dollars equals i think i'll just copy this but we are
going to divide the first index of data by 0.82
and let's say store dollars to represent our store in dollars because we're pretending now
that it's currently in euros and we will display 4i in store dollars
so if all of these prices are in euros we are now converting them to american dollars
but you may want to do some rounding as opposed to the nearest descent well everyone that is the map function
it applies a function to each item in an iterable those include lists tuples
the like you pass in your iterable and your function as an argument to the map
function so if you would like a copy of all this code i will post all of this to the comment section down below
but yeah that is how the map function works in python
what's going on everybody it's you bro hope you're doing well and in today's video i'm going to show you all how the
filter function works in python so sit back relax and enjoy the show
all right all right let's discuss the filter function the filter function creates a collection
of elements from an iterable for which a function returns true now what the heck does that mean let me
explain let's say that we have a list of tuples named friends each tuple has the name of a
friend as well as their age i just made up some ages for all of these friends what i would like to do is
to create a separate list for all the friends that are 18 or older so let's say that we're all going out
drinking and i would like to create a list of my drinking buddies because they're of drinking age i'm in
the united states and the drinking age is currently 21 but i think worldwide is 18 so let's go
with 18 for this example since i have a worldwide audience all right now with this filter function
we have to pass in our iterable as well as a function to get anybody's edge that is over 18.
so let's begin by writing a lambda function for this expression here our filter function so let's say age equals lambda
data will be the parameter colon data at index one so the first index
the first column in this chart here would be zero for other names the next index of one would be all the ages
data at index one is greater than or equal to eighteen and that is it
that is our lambda function and now we're going to filter our iterable by this function of age so
let's write filter pass in our function which is edge comma and our iterable
friends now this filter function will return a filter object you can easily cast this i would
like to cast my friends list back into a list
and i will assign this to a new list let's say drinking buddies
equals list filter age and friends and i should be able to
print all of the friends that are 18 or older for i in drinking bodies
print i and we have rachel monica chandler and
ross well everyone that is the filter function it creates a collection of elements
from an iterable for which a function returns true i like to think of it as the search
results we're searching for any results that meet this criteria where age is greater than or equal to 18
and then you can create a separate collection or other list if you want from the results but yeah that is how the filter function
works in python yo what's going on everybody it's bro hope you're doing well
and in today's video i'm going to show you how the reduce function works in python so sit back relax and enjoy the show
well i suppose we're on the reduce function today the reduce function applies a function of our choosing
to an iterable and reduces that iterable to a single cumulative value the way
this works is that the reduce function performs our function on the first two elements of our
iterable and repeats the process until only one value remains i kind of
like to think of it like we're recycling elements within an iterable until a single value remains our finished product so
how is this useful let's say that we're playing a game scramble and we have a bunch of different letters within
an iterable a list is a type of iterable so i have a list named letters and we have all of
the letters we need to spell the word what i would like to do is to reduce all of these individual elements into a
single cumulative value until only one value remains so we can do that using
the reduce function you can also do this with the for loop too there's multiple ways of doing this so using the reduce function we're going
to import func tools and now let's say we have
our cumulative value stored within a variable named word word equals func tools dot reduce
now the reduce function has two arguments the function we would like to apply to the first two elements and then our
iterable the interval is easy that is just letters so let's put that in letters and for the function we can
easily write a lambda function for this lambda and now this function needs two
parameters let's say x and y now what kind of function do we want to perform on the
first two elements of our iterable let's combine them together so let's say x
plus y and now let's print our single cumulative value
of word so this should print the word hello i'm fairly confident that
the word hello is worth like 20 points in scrabble now let me explain what happened step by step our reduce function applies our
function to the first two elements within our iterable it performs this expression that we set
x plus y but really we can write anything here so we perform this expression on the
first two elements then we repeat the process again using
the result from the first time we use this expression and the next element so we're combining x plus y again
and then we're just going to repeat this process until only one value remains it's kind of like
we're recycling all of these letters and creating a finished product out of all of these that's how i think of it at least here's
a different example let's say that i would like to find the factorial of 5 so i have the numbers
5 through 1 within a list named factorial so if i was to find the factorial of 5
via the reduce function i would probably write something like this so let me change word to let's say result result
equals functools reduce now our lambda function will be x times y because with factorials we
multiply the next two numbers together then we take that result and then multiply the next one in this
list so the iterable will be factorial and let's print what our result is
so the factorial of 5 should be 120. now let's walk through this we're taking
the first two elements of this iterable five and four multiplying together in this
case in the last example we concatenated the strings together of x and y in this example we're multiplying them
together so we take the first two elements 5 times 4 we take the result and apply it to the
next iteration of x times y again so 20 times 3 is 60. we repeat this process again
60 times 2 is 120 and 120 times 1 is 120 so that's kind of how the reduce
function works it applies a function of our choosing to the first two elements of an iterable and repeats
that process until only a single cumulative value remains so that is the reduce function if you
would like a copy of all this code i will post all of this to the comment section down below but yeah that is how the reduce function
works in python hey what's going on everybody it's your bro hope you're doing well and in this
video i'm going to show you all how list comprehensions work in python so sit back relax and enjoy the show
all right everybody so list comprehensions a list comprehension is a way to create a new list with
less syntax you can also use a list comprehension to mimic certain lambda functions such as in the
previous videos where we use the map and the filter functions and not only that but a list comprehension
is easier to read than a lambda function but there is a formula that we're going to follow
when we create our list within our list we're going to write an expression for item in iterable now let me give you
an example of where a list comprehension would be useful let's take this program that will create
a list of all the numbers 1 through 10 squared so if i were to print this we'll get the numbers 1
through 10 whatever their square is right so we have 1 through 10 and the square of 10 is 100 so we wrote
this program in three lines of code we're creating an empty list we're creating a for loop and then we're writing an expression for
what we want each loop iteration to do now let's write the same program but used a list comprehension
and we can write the same program with less syntax so i would write something like this and
we're going to follow this formula so our list is going to be named
squares equals then within a set of straight brackets we're going to write our expression
which is this portion i times i for item so that would be 4i
in our iterable that would be range 1 through 11 because remember 11's
exclusive and then let's print our squares print
squares and there you go we made the exact same program using a
list comprehension so basically speaking you just follow this formula you set your list equal to
your expression and our expression for this example is i times i for item for i in
your interval in range one through eleven so this took three lines of code well if
you exclude us printing our list and this program took one line of code
now we can also use a list comprehension to mimic certain lambda functions i wrote a program
where we will be filtering a list of student grades let's pretend that all of these students
took some sort of exam so we have one student that received a 100 90 80 70 60 50 40 30
and then one student got a zero because they didn't show up so what i would like to do is to filter all of these student grades into a list
that only contains students that passed and the criteria for a passing grade will be
a 60 or above so i would like to filter all passing students and if i was to
write this program using the filter function i would probably write something like this so i need a function and then my list
that i'm working with lambda x colon x is greater than or equal to 60
will filter all of the results and then convert it to a list named past students so the result will look something like
this i have five student grades in here with 100 90 80 70 and 60.
now let's write the same program using a list comprehension now there's just one portion to this formula for list comprehension that
we're going to add at the end we're going to add if conditional we can check some sort of condition after each
iteration so let's write the same program using a list comprehension following this new updated formula that we have so
we need our list which will be named past students equals first comes our
expression and it's just i for this example for item i in our iterable
of students and then if we can check our conditional if i is greater than or equal to 60
and this will have the same effect as our previous program but instead it uses a list comprehension
now if your program has multiple output if you need an else statement within your conditional
you're actually going to move this portion of the if conditional within our formula to right after the
expression so let's write an if else statement here so let's say that instead of just
excluding any student that didn't pass we'll replace their grade with the word failed and we can do that
using an if else statement so let's do this again i'm going to copy what we have here
paste it and we'll move our conditional from the end to just after the expression portion i
if i is greater than or equal to 60 and you can see here that we need to add an else statement else will return
the word failed so we're replacing each instance of
a failing grade with the word failed instead so if your condition returns whatever i is you can just add
that to the end if you need an if else statement you're going to add it right after the expression
so everybody in conclusion a list comprehension is a way to create a new list with less syntax you can even mimic
certain lambda functions which we did with the filter function and it has the added benefit of being easier to read than a
lambda function so you just follow one of these formulas depending on what you're trying to do so you need at least list equals your
expression for item and your interval if you have a condition that you want to check you just add that to the end of your
list comprehension if you have an if else statement then you'll add that to right after the expression so you just follow one of
these formulas depending on how you want to write your program so that is a list comprehension if you
would like a copy of this code i will post all of this to the comments section down below and well yeah that's how list comprehensions work
in python yo what's going on everybody it's bro hope you're doing well
and in this video i'm going to explain dictionary comprehensions in python so sit back relax and enjoy the show
okay people dictionary comprehensions they're very similar to list comprehensions except
they're with dictionaries that's it video over okay but seriously a dictionary comprehension is a way to
create dictionaries using an expression and they can replace for loops and certain lambda functions
and all we have to do is follow this formula dictionary equals key colon our expression for key value
in iterable so let's go over a few examples our first example we're going to take this dictionary named cities in f f is
short for fahrenheit i have different city names as keys and relative temperatures as
values in fahrenheit so new york is 32 degrees fahrenheit boston is 75.
los angeles is 100 and chicago is 50. and what we'll be doing is creating a separate dictionary where all of these
temperatures will be in celsius using a dictionary comprehension so let's follow this formula let's create a
new name for this dictionary let's say cities in c short for celsius
equals and we will follow this pattern first our key golden then our expression we'll go back
to this in just a moment for key comma value in our iterable
of cities in f and since we're working with a dictionary we're going to use
the items method now we just need to fill in this expression there is a formula to convert fahrenheit
to celsius and it should be on the screen right about now so let's follow this formula so we'll
take our value minus 32 and just for good measure i'm going to put these within parentheses
and we will multiply all of this by 5 divided by 9 and that is it so we have
our key our expression to convert fahrenheit to celsius
for key value in our iterable of cities in f our previous dictionary and
let's test this by printing our new dictionary cities in c
actually i think i'm going to round these numbers just so it's more readable so let's round all this there we go so
new york and celsius is zero boston is 24. los angeles is 38 and chicago is 10.
so we created a new dictionary using a dictionary comprehension now with these dictionary comprehensions
you can add an if conditional to the end of this so let's say that we have a separate dictionary of weather
like a description of the weather in each city new york is snowing boston is sunny los angeles is sunny and
chicago is cloudy let's say that we would like to create a separate dictionary with a dictionary
comprehension that only has cities where the weather is sunny so i would write something like this
let's say sunny weather will be the name of our dictionary equals and we'll follow this formula and then we just tack on
our conditional to the end so it's kind of the same as before really so key colon and we don't really have an
expression here so let's just say value then for
key comma value in our iterable of
weather dot items then our conditional if value
sunny because we are only looking for sunny weather and let's print this print
our dictionary of sunny weather and let me just make this more readable
for you guys and our new dictionary comprehension will create a dictionary of key values
where the value is sunny using an if conditional at the end of our dictionary comprehension
here's a third example for you well if you have an if else condition you can add that to where the expression is
within your dictionary comprehension so i'm going to reuse the previous dictionary for the first example where
we have cities and their temperatures as values so we're going to replace each temperature with a description of the
weather is it warm or is it cold so let's do that using a dictionary comprehension that contains
an if else statement so let's say we have a new dictionary named desk short for description
cities it's a brief description of each city's temperature so we follow this formula key
then our if else conditional for key value and iterable actually i probably can
copy all this just to save some time okay so our iterable
will be cities dot items and our conditional is going to be
we will return warm if our value is greater than or equal to
let's say 40. else cold and we will print
our new dictionary of desk cities description of cities so new york is
cold because it's 32 that's below 40. boston is warm los angeles is warm and
chicago is warm now if your condition gets somewhat complex you can even call a separate
function to keep your code more organized so key then we can call a function and pass in a value
for key value in iterable so i'm going to again reuse our city names and our
temperatures and this time we are going to call a function instead i think i'll reuse this code from the
previous example where we have a separate dictionary named desk cities and i'm going to replace
this if else statement with a function so let's say we have a function that is named
check temp and we will pass in our value and we just need to define this function
so let's define that here so let's define check
temp and our parameter is our value that we're currently working on within our dictionary
value then we'll write if value is greater than or equal to
let's say anything above how about 70 will return the word hot
then else if let's say 69 greater than or equal to
value and then value is greater than or equal to
how about 40 then we will return the word warm
and lastly else return cold and let me just fix some of the
spacing now depending on the temperature that is
stored within each value of our dictionary we will call a function that will return
one of a few different outputs so it's kind of like we're using the map function the map lambda function
so let's print our description of cities and we should get a short
description of the temperature in each city after we call the check temperature function and then pass in each value
from our dictionary so new york is cold because it's 32 degrees fahrenheit boston is hot because it's above 70. los
angeles is hot because it's 100 and then chicago is warm because that is 50 which is between
69 and 40 within our function so that is a dictionary comprehension
it's a shortcut where you can create dictionaries using an expression and they can replace for loops and
certain lambda functions so if you would like a copy of all this code i will post all of this to the comment section down below
and well yeah that's how dictionary comprehensions work in python hey what's going on everybody
it's bro hope you're doing well and in today's video i'm going to show you how the zip function works in python so
sit back relax and enjoy the show
all right ladies and gentlemen welcome back we're talking about the zip function today the zip function will aggregate elements
from two or more iterables iterables are those things like lists tuples
sets etc and the zip function will create a zip object with paired elements from
each iterable stored in a tuple for each element within our zip object here's an example let's say that we have
two different types of iterables i have a list of usernames and a few usernames within here are
dude bro and mr and i have a tuple of passwords and i have some very
secure passwords such as password abc123 and guest what i would like to do is to
zip elements from each iterable together so that they're in pairs and each pair is going to be stored as a tuple within
a zip object and here's how we can do that let's say that we will create a zip object called users
and we will use the zip function the zip function will take a varying amount of iterables we're going
to pass in our usernames and passwords and zip them together so let's pass in usernames
as well as passwords and now our zip object of users is actually iterable zip objects are
iterable so we can use them within a for loop so let's type for i in users
and print i and what we get is that we have a zip
object of tuples and each tuple is storing each pair of elements from our
two iterables now users is a zip object and if you don't believe me let me prove it i'm going to print
the type of users and this will print that users is indeed a zip object
but you can easily convert this to a different type of iterable by using a cast
let's say that we would like to convert our zip object into a list so we'll surround the zip function with
a cast to a list and now the data type of users is now a list what we have is a list of tuples and
each tuple is storing a pair of elements from our two iterables of usernames and passwords
now currently since we're passing in only two different iterables we can easily make this a dictionary so that these are key value
pairs so let's cast our zip object as a dictionary and to display all of the elements
within our dictionary all the key value pairs we're going to change our for loop to this for key value
in users dot and we will use the items method print key
comma value actually i think i'm going to separate each of these with a colon just to make it more readable
and now when we zip these two intervals together we end up with a dictionary of usernames
and passwords and the name of this dictionary is users now you're not limited to just two
iterables you can add a third iterable or more so this time let's create a
maybe a list a list of last login dates and i'll just call this login date equals and why not make a
list and let's make up some dates let's say 1 1 dash 20 21
12-20-21 and 1-3-20
21 okay so let's create a zip object of users and we're going to
zip user names passwords
and login date and let's iterate over this for i
in users print i now we have a tuple for each element
and instead of a pair we now have a trio i guess of all of the different elements
from each iterable so in conclusion the zip function will aggregate elements
from two or more iterables and create a zip object with paired or grouped together elements
stored in a tuple for each element within our zip object so that is the zip function if you would
like a copy of this code i will post this to the comment section down below and well yeah that's how the zip
function works in python hey what's going on everybody it's you bro hope you're doing well
and i'm going to explain the purpose of if name equals main in python so sit back relax
and enjoy the show during your programming journey you may
have encountered this strange statement of if name equals main now what the heck
does that mean so with python files also referred to as modules by including this statement it
gives our modules some flexibility one a module that has the statement can be run as a standalone program
or two this module can be imported and used by other modules if there's
some sort of useful functions or other resources within this module to be imported
by including the statement of if name equals main we're checking to see if a user
is running this module as either a standalone program or they're importing it from another
module behind the scenes the python interpreter will set special variables
one of which is double underscore name it's a variable and python will assign the name variable
a value of main if it's the initial module being run and we can actually test that by
printing double underscore name so since this is the initial module being run
module one for my example name is going to be assigned a value a string of main now check this out i
have two modules what if i were to import module 2 and check the name
variable of module 2. let's try it import module
two in order to access a variable from
another module i need to type the name of the module module two dot and i would like to check
the special name variable of module 2 and print it so when you import a module this name
variable is going to be assigned the name of the module in this case module 2. this time what if we change the roles
around i'm going to copy all of this text and paste it within module two we're
going to import from module one we will print that special name variable of
this module module 2 and then print the name variable of module 1 which is being imported now
when i run this program i'm going to instead run from module 2.
now this time that special name variable of module 2 is main and the special name
variable of module 1 is module 1 the name of the module
so by including a statement such as if name equals main we're checking to
see if this module is being run directly or indirectly so let's test it
within this statement of if name equals main let's print running this
module directly else that must mean that we're running
this module indirectly so let's print
running other module indirectly
okay so i'm going to go to module 1 and run from here running this module
directly now let's do the same thing with module two but we need to
import module one and let's run for module two
running other module indirectly for the time being i'm just going to write pass within
our if name equals main as a placeholder and get rid of our if statement so let's say within module 1 there's a
useful function or resource we would like to access from module 2. so let's say we have a
function named hello and all this will do is print the word hello
let's just pretend that it's a useful function not really but let's pretend so in order to use this
function from module two i need to import module one then type module one dot and
then the name of the function so i'm going to run from module 2 and this will print
hello but what if i run this program from module 1. so right now module 1 cannot be run
directly as a standalone program so i cannot print the word hello so what
i could do is within if name equals main i can call that hello function directly
so let's run from module one hello one other thing that you might see
too within the if statement if name equals main there might be a call for
a main function and you can write the main body of your program within a main function so everybody in
conclusion the reason that people may include this statement if name equals main is that it allows our
modules to have some flexibility they can be run as a standalone program or they can be imported and used by
other modules and this is because the python interpreter sets that special variable of name with a
value of main if it's the initial module being run if you would like a copy of my code and
my notes i will post all of this to the comment section down below but yeah that's the purpose of if name
equals main in python hey what's going on everybody it's bro hope you're doing well and in
this video i'm going to show you all a few useful functions related to times and dates using the time module in
python so sit back relax and enjoy the show
alright everybody so the time module let's begin by importing time and the first thing that i'm going to
explain to you while is how we can find our computer's epic also pronounced as epoch so this is a
date and time in which your computer thinks time began think of it that way at least
so we use our epic as a reference point so to find your computer's epic it's
going to vary based on your computer and your operating system so to find your computer's epic type
time dot c time and as an argument we will pass in zero
now what this method will do is that this method will convert a time expressed in seconds and convert it to a
readable string so if i was to pass in 0 and print it well then this will display the date and time
which is my epic our reference point so for me my epic is wednesday december 31st 6 p.m
1969 so i've just added a note that the c time method will convert a
time expressed in seconds since epic and convert it to a readable
string a readable date and time so for practice let's pass in perhaps
1 million seconds and see what date and time that we receive so our c time method will return a date
and time one million seconds past this epic here so that would be for me monday january
12th about 7 a.m 1970. our next method is the time method of the time module let's
print time dot time method and what this method will do is return the current seconds that have
passed since our epic using our computer's clock so the number that i end up with is just
over 1.6 billion and this is in seconds so for me 1.6 billion seconds
has passed since that date which is my epic i believe it was december 31st 1969
and every time that i rerun this program you can see that the amount of seconds that has passed is actually increasing
so that is the time method it will return the current seconds since you're epic using your computer's
clock and you know what just for fun let's change the date and time under clock and see what happens
so let's change the year to how about the year 2000 change
and close so let's see what number we get with the time method now
so we get just under 1 billion 948 million seconds have passed
and now if you need to retrieve the current date and time well there's one of a few ways in which you could retrieve that but one way is
that we can combine both of these methods of the see time method and the time method of the time
module so let's print time dot c time and we're going to pass in an
amount of seconds into the c time method as an argument so within the c time method we're going to call
the time method so the time method will return an amount of seconds since our epic and the c time method
will convert that amount of seconds to a readable date and time so the current date and time is saturday
january 23rd about 3 p.m 20 21 now there is more than one way to get
the current date and time another way is to use the local time method and the local time method will
create a time object based on the current time so what i'm going to do is
create a variable called time object and i just need to explain a few things
about time objects so to best explain this i'm going to print our time object now a time object is also
referred to as a struct time object it is made up of different keyword arguments
there's a year a month day hour minutes seconds day of the week
day of the year and this keyword argument here has something to do with daylight savings time
so there's quite a few uses with time objects and one way is that we can format them
however we want because right now this time object is not in a readable format
so to convert this time object into a readable string we'll need the help of a separate function
and that is the strf time function str is short for string f4 format and
time well for time i guess so this function needs two arguments a format and a time
object so our strf time function will accept a format and a time object as an
argument so our format is really just a string of different directives and to best
explain these i'm going to head to python's official documentation on the subject so here i am on python's website
regarding the time module and underneath this section on the strf time function
there are different directives that we can embed within our format string that we pass in as an argument
depending on the directive that we add we can display a certain format of our date and time
so for example if i was to pass in let's say percent lowercase a then we will display
the time object's weekday name and you're not limited to just one directive you can add any combination of
directives so if i was to add percent m well we would display the month of our date time object as a
number 1 through 12. so there's a bunch of directives here and i'm going to be using some of these
so within a string for the format argument i'm going to pass in percent capital b for the name of the
month percent d for the day percent y for the year
percent h for the hour and to format this i'm going to add a colon to separate hours and minutes percent
m for minutes colon percent s for seconds and then we are going to
assign all of this to a variable let's say local time and local time will be a string
so let's print our local time and the current time is january
23rd 2021 about 3 p.m oh and i almost forgot you can also get
the utc time that is the coordinated universal time if you know how that works
so if you need that you would just use the gm time method for the utc time coordinated
universal time okay next up we have the strp time function and this function will
parse a string representation of a time and or date and return a time object so we need to
pass in a string representing the date and or time as well as a format string so let's create a time string and
this variable is going to be a string representation of a date let's say 20th of april 2020
and what we can do is take this string representation of a time and or date and parse it to a time object so we're
going to pass in our time string variable as well as a format string
so let's say i would like to parse the day so that would be percent d for
day then percent b for name of the month
and then comma percent y for year this function will create a time object
so let's assign that to a variable time object equals time dot strp time
we're passing in our string representation of a time or date as well as a format string
and we can print our time object using a print statement however this is going to be in a form
that is somewhat difficult to read but you can see at least we have a time object with all of these keywords filled in
with anything that we passed in via these format directives that we have now the next function
is the asc time function and this function accepts a time object
or a tuple representation of a relative time so this time let's create a
time tuple and we're going to follow this order we can pass in up to nine values the first value is a
year so let's pass in perhaps 2020 a month let's say four a day how about 20 four hours
let's say four minutes 20 and seconds maybe zero let me just fix some of the
spacing here okay you can also pass in a numbered day of the week um i'm just going to say zero i don't
think it's really that important a day of the year zero and negative one or zero for daylight
savings time so we created a time tuple and we can pass in a time object or a tuple representation of a
time following this formula so let's pass in our time tuple and this will create a time string a
string representation of the time that we create and let's print our time string
and we should have april 20th about four in the morning the year 2020.
so that is asc time it will convert a tuple representation of a time and date
or a time object and convert it to a readable string now another option is to use m
k time and mk time will take a tuple representation of a time or a time
object and convert it to seconds since epic so april 20th of the year 2020
is about 1.5 billion seconds since our epic date and for me that was
december 31st the year 1969 so that is a few useful functions of the
time module if you would like a copy of this code i will post all this to the comment section down below
and well yeah that's the time module in python yo what's going on everybody it's bro
hope you're doing well and in this video i'm going to explain multi-threading in python so sit back relax and enjoy the show
think of a thread as a flow of execution like a river and each thread can carry out its own
separate order of instructions if we use this process of multi-threading we can have our program
run different parts of its program at different times they all run concurrently but not truly
in parallel that is a concept for later referred to as multi-processing so with reds they each take a turn
running to achieve concurrency this is due to a notorious feature known as the gil
the global interpreter lock only one thread can be running at one time but they can all take turns when one
thread is idle so this allows one thread to hold control of the python interpreter
at any one time so they run concurrently but not truly in parallel which is what we do with
multi-processing now programs and tasks can be divided into two different categories they can be cpu
bound that is a program or a task that spends most of its time waiting for
internal events such as a task that is cpu intensive it is better to use multi-processing for
tasks that are cpu bound now tasks that are io bound means that
the program will spend most of its time waiting for external events such as waiting for user input or if
you're doing activities like web scraping you do a lot of sitting around so with i o bound tasks it's better to use
multi-threading because we can have multiple threads running concurrently but not truly in parallel like what we
do with multi-processing after importing the threading module we can count the number of threads that are
currently running in the background whenever we run a program we have one thread that is running that is in charge of
executing our program and we can print the active count of threads running in our program
using the active count function of the threading module so this will print one we have one
thread that is running and we can print a list of all the threads that are running
by using the enumerate function so the one thread that is in charge of
running our program is referred to as the main thread by using this concept of multi-threading we
can have more than one thread running concurrently not truly in parallel all the threads will take turns while
one of them is idle so we can have more than one thread running more than just the main
thread which is in charge of running the main body of our program so while our main thread is in charge of
running the main body of our program we can have another thread that's in charge of a separate part of it
maybe like a countdown timer or something so one good example take that quiz game
that we made some number of videos ago while we were waiting for user input which is a
i o bound task we could have had a countdown timer going like you only have so many seconds to
answer this question we could have had one thread in charge of waiting for user input and another thread
in charge of the countdown timer so that's an example of multi-threading we had two threads running concurrently
and what we'll be doing in this video is creating a program that involves multi-threading we can have
different threads in charge of different parts of our program and they can all run concurrently they'll all take turns
while one of them is idle so let's say that we're running late for school or work in the morning and we have three
different tasks that we need to complete before we can leave for school or work so think of three
different things you do in the morning such as maybe eat breakfast some people drink coffee or
maybe a beverage of your choice so drink coffee and some people like me they like
to do their homework last minute so i'll say study before i leave for work or school in the
morning so what we'll do in each of these functions each of these functions should take some amount of time to
complete so we can have our main thread sleep for a given number of seconds using the sleep function
time dot sleep and let's say that in order for me to eat breakfast this task will take me three seconds
let's just pretend that instead of minutes this will be in seconds so drink coffee will take me
four seconds and study will take me five seconds then when we finish
sleeping let's print a confirmation message let's say
you eat breakfast as in you finish eating breakfast with
drink coffee you drink coffee
and with study you finish studying
now each of these tasks are i o bound they're going to be spending a lot of time just waiting around
for external events they're waiting for the sleep function to expire before they can finish their task
so we're going to have all of these three functions run on our main thread and we'll see how long it takes for us
to complete our morning ritual these three tasks so let's call these three functions within
our main thread so let's call the eat breakfast function first followed by
drink coffee and then study in that order so this program is going
to take approximately let's see 12 seconds to complete so there's going to be a pause for a second
you eat breakfast then followed by you drank coffee and then study
you finished studying so this program took about 12 seconds overall so if this were
realistic what we would have done is we would sit down and eat breakfast for three minutes well three seconds in this
case and then once we finish eating breakfast only then are we allowed to drink our coffee
and once we finish our coffee only then can we study so we completed these tasks sequentially
and not concurrently for us to move down to the next function we need to complete the
previous functions because we're doing this in order but realistically us human beings we
would probably eat breakfast drink coffee and study altogether because we can multitask and we can complete
these three functions in less time and that's kind of the same process as multi-threading we can have
these three separate functions running concurrently as if we're multitasking we're eating
breakfast drinking coffee and studying all at once now currently we have one thread that is in charge of these
three separate functions what we could do is that we can create three additional threads
each thread will be in charge of each task and then we'll have our main thread running in the background that will
complete the rest of the program so this is how to create an additional thread let's say that
x equals threading dot thread we need to pass in a target
target equals and then the name of the function so let's say
thread x will be in charge of eating breakfast and then you can pass in arguments too
if your function has parameters by typing args and then you pass in a tuple so let's say you have one argument to pass in
you'll type your argument followed by a comma but we don't have any arguments in this example but
you'll need to be sure to enter them in if you do have any okay then to begin this thread you type
the name of the thread in this case x dot start so we now have an additional thread and
this thread is in charge of eating breakfast now let's create another thread to drink
coffee and we'll call this y
and the target will be drink coffee and lastly we have a thread in charge of
studying and this will be z
and the target is our study function okay now let's see how long it takes for
us to complete our program oh and be sure to comment out these function calls within the main thread
because we don't want the main thread in charge of those anymore okay now we can run the program so we
have four threads running this time you eat breakfast you drink coffee you finish studying
so this program took approximately five seconds to finish and the reason that this program took
five seconds instead of 12 is because before our main thread was in charge of running these tasks sequentially in order but
now since we have a thread dedicated to each task we can run them all concurrently instead of sequentially so
that this program now took about five seconds to complete and you may have noticed too that the activecount function as well as
the enumerate function were called before threads 1 2 and 3 finished their respective tasks
that's because the main thread is not going to wait around for these three threads to complete it has
its own set of instructions to do so it is no longer in charge of these
three functions the program is going to handle those three functions to our three threads
and our main thread is going to continue its own set of instructions its job is to print the active count as
well as call the enumerate function which it did and it finished its tasks before threads one two and three now one
trick that you can do too is that you can use the time modules performance counter function and this function will
return how long it takes our calling thread as in our main thread to finish its set of instructions so our
main thread is not in charge of executing these three functions our main thread is
in charge of creating three additional threads and then calling the activecount function
and the enumerate function as well as the performance counter function so our main thread will take
approximately 0.075 seconds to complete and our three threads are still running
in the background our main threads job its order of instructions is to create
three additional threads and then immediately print whatever is returned via the
activecount function enumerate and then your performance counter so our main thread says that it finished
its tasks in about .07 seconds but threads one through three were still trying to catch
up that's why the main thread finished before are three additional threads and once
all active threads have completed their tasks then your program will finish and exit
there's also this concept called thread synchronization we can have a calling thread in this case our main
thread wait around for another thread to finish before it can move on with its own instruction set so let's
say we would like our main thread to wait around for thread 1 also known as
x so we're going to use the join function of thread x and now our main thread
has to wait around for thread x also known as thread 1 to finish before it can move on
with its instruction set so let's do the same with y and z so now our main thread before it can
move on with the rest of the program has to wait for all of these threads to synchronize and join and then and
only then can it move on with the rest of its own instruction set so this time our program is going to
look a little something like this you eat breakfast you drink coffee you finish studying
so by the time we reach our active count these threads are already joined and synchronized
they're no longer active when we enumerate over our active threads we only have our main thread and our main thread
completed in about 5.1 seconds this time because it did a lot of waiting around
it was waiting for threads x y and z to join and finish in conclusion a thread
is a flow of execution like a separate order of instructions that a program can
follow and when we run a program we always have at least one thread running initially and that is
referred to as the main thread however if you have multiple threads using the concept of multi-threading
we can have multiple threads running concurrently but not truly in parallel which is what we'll cover
during the video on multi-processing this is due to a feature known as the gil
the global interpreter lock which allows only one thread to hold control of the python
interpreter at any one time and tasks can be either cpu bound or io bound a cpu bound task
is a program or task that spends most of its time waiting for internal events
such as a task that is cpu intensive and o bound tasks spend most of their
time waiting for external events such as waiting around for user input
or web scraping with i o bound tasks it's better to use multi-threading
with cpu bound tasks it's better to use multi-processing well everybody that is a quick overview
of multi-threading i will post all of this code to the comment section down below and well yeah that's how to achieve
multi-threading using python hey what's going on everybody
it's you bro hope you're doing well and in this video i'm going to explain demon threads in python so
sit back relax and enjoy the show okay so demon threads also pronounced as
daemon threads a demon thread is a thread that runs in the background and they are normally not important for your
program in order to run your program will not wait for demon threads to complete before exiting whereas non-demon threads they
cannot normally be killed they will stay alive until their task is complete so a few common uses of demon threads would
be background tasks garbage collection waiting for input or other long-running processes so
here's an example of why demon threads would be useful let's say that we'll have two threads
our main thread will be in charge of waiting around for some user input we'll ask do you wish to exit and in the
background we'll have a timer going that will display how long somebody is logged in so let's
create a function named timer and what we'll do is just display how
long somebody's logged in so let's say we have a count variable while true we'll use
the sleep function of the time module to sleep for approximately one second
then we'll increment our count variable by one and we'll print a message so let's say logged in
for count
seconds and let's create a thread that will be in charge of this timer and run
it in the background so let's say x equals threading dot thread the target will be our
function of timer and we need to start this thread x dot start so our thread
x will be in charge of our timer and run it concurrently while we're waiting for some user input
our main thread will be in charge of waiting for this user input do you wish to exit now here's the issue
of us using a non-demon thread for a background task such as a countdown timer
so our main thread is in charge of waiting around for some user input and thread x our additional thread is in
charge of running this countdown timer so if i wish to exit this program i'm just going to type
okay and hit enter well my background timer is still going but my main thread
is complete so i would like to exit this program but my program will not exit as long as
there are non-demon threads that are still alive we cannot normally close this program unless we do like a brute force
you know close and exit of the program so we can turn this thread of x into a demon thread
so that when we wish to exit the program when there are no more non-demon threads alive and to change a
thread to a demon thread it's actually fairly easy when you create your thread you can set this flag of demon equal to true and
that's it so when all non-demon threads have finished their tasks your program will complete and exit but
if there are demon tasks running in the background they will be killed automatically so let's try this program again
so do you wish to exit my program is going to continue running my demon thread is in charge of the timer and it's going to continue running
until all non-daemon threads have completed their tasks so once i type ok my program will
finish running and my countdown timer will stop because all demons are killed when your program
is finished running there's also two additional methods that you might be interested in you can use the set daemon method
of a thread and you can set it to false or true if you would like to change a thread to a non-demon or a demon
however if your thread is currently running well you cannot actually change it from a non-demon thread to a demon thread
while it's currently running so you would have to do that before you actually use the start function
and you can also check to see if a thread is a demon or not by using the is demon method this will
return true or false so everybody in conclusion a demon thread is a thread that runs in
the background and they're not important for your program in order to continue running your program will not wait for demon
threads to complete before exiting the program whereas non-demon threads cannot
normally be killed they will stay alive until their task is complete and demon threads are commonly
used for background tasks garbage collection waiting around for input or other long running processes so if
you would like a copy of this code i will post all of this to the comment section down below but yeah those are demon threads in
python yo what's going on everybody it's bro hope you're doing well
and in this video i'm going to explain multi-processing in python so sit back relax and enjoy the show
what's up let's talk about multi-processing multi-processing is the act of running tasks in parallel
on a different cpu cores it's different from multi-threading although it sounds similar because with
multi-threading we're limited to running one thread at a time because of the gil that lock which is
used for threading we can run threads concurrently but not in parallel however with
multi-processing we can create processes and we can run each process
in parallel on a different cpu course so with multi-processing it's better for tasks that are cpu bound
where you need heavy cpu usage whereas multi-threading that is better for i o
bound tasks where you do a lot of waiting around so before we begin i recommend these two imports
multi-processing and time let's begin quick note if you're running the windows operating system you'll probably need to
add this line if name is equal to main so when we run a program we have a
main process that is running and if we create a child process from that process it's going to copy the
module that we're currently working with and that child process will create its own children processes and it's going to
be a problem so we're going to add this line if name is equal to main so when we create a child process it
will copy our module but it's not going to execute it so let's create a main function and a
majority of our code is going to be within our main function if you're running a different operating system you probably don't have to do
this but if you're running windows you probably will now with multi-processing multi-processing is
better for tasks or functions that are cpu bound where they require heavy cpu usage
let's say that we have a function named counter and we'll pass in a number to count up
to but the number we're going to pass in is a ridiculously large number like a billion so let's create a function that
will count from zero so count equals zero and while count is less than
our number that we pass in we will increment our counter by one so that is the function that
we'll call with our processes that we create now within our main function we'll create a process and to do that
you'll need the multi-processing module so import process and cpu account and
we'll save this for a little bit later to create a process let's say we have process a a equals process this step is very
similar to creating a thread we have a target our target will be our function of counter
and if we have arguments we will pass those in so remember with our arguments we have
to pass in a tuple since we only have one argument to pass in to differentiate this from an expression
we have to add a comma at the end so our number let's say is 1 billion
so that's a million 10 million 100 million 1 billion let me just verify that okay
so that's 1 billion we're going to count from zero to a billion and in order to start this process a
my process use the start function and then i will use some process
synchronization by using the join function my main process is going
to wait around for my child process of a to finish before continuing
and let's print our performance counter so we'll print finished in
let's say time dot performance counter
seconds okay so let's see how long it'll take to count from zero to a billion
using one process i fast forwarded this video but it took my program 56.7 seconds to count from zero to a
billion but we can speed this up by using multi-processing let's create a second process named b
and i'm going to divide the amount of work in half so each process will count to 500 million
half of a billion so let's change a to b and i'm gonna group these start
functions together just so it's easier to read and then b
dot join just to synchronize everything okay and then let's change 1 billion to
500 million for each it's the same amount of work but divided among workers
so that is 500 million let's see how well it runs this time so it took my program about 40.3 seconds
to finish counting from zero to a billion but i divided that task among different processes each of my two
processes counted from zero to 500 million this time so this time let's create
four processes so we have a b c and d
and we'll need to start them and i'm going to join them now this
might not actually speed it up for you and i'll explain why later it depends on the amount of cpu cores
that you have okay so oh let's change this to so 250
million for each okay see you in a couple seconds
okay welcome back so on my computer when i ran four processes and each was counting up
to 250 million i could finish my program in 27.3
seconds now for me if i created more processes than this it would
probably take longer and here's why so you can print the cpu count of your computer
using this function of cpu count so if i were to print whatever this function returns i
can get the count of the number of additional processes that i can run for the time being i'm just going to
comment out this start function because i just want to print whatever this value is so my cpu count on my computer
is four so i can run four additional processes but let's attempt to run eight processes
so i'm going to copy all these and let's say that we have e f g
and h and we will start all of those two so give me a second just to start them
so a b c d e f g
h and then i'm going to join all of them
e f g and h okay so
let's run this now oh and change the arguments to i keep forgetting to do that so let's say 125 for each
so 125 million times eight is one billion okay see you in a bit
all right welcome back this time when i had eight processes working it actually took me longer than when i had four processes
working when i had four processes working it took me about 27 seconds this time it took 30 seconds when i had
eight processes working that's because i had more processes than my cpu count
and that's partially because whenever you create a process there's significant overhead with
beginning and destroying a process and if i can only run four processes on my computer at one time
well then i'm creating additional processes to no extra benefit it's actually hindering the performance of the
computer because i'm creating all of these additional processes when it really doesn't help me
in conclusion multi-processing is the concept of running tasks in parallel on
different cpu cores it's similar but different from multi-threading because with multi-threading
we can run tasks concurrently but they're all taking turns because of the gil
with multi-processing we can run all of these different tasks together in parallel multi-processing is
better for cpu bound tasks where a task has heavy cpu usage and multi-threading
is better for i o bound tasks tasks that involve a lot of waiting around so that's multi-processing if you would
like a copy of all this code i will post all of this to the comment section down below but yeah that is how multi-processing
works in python hey what's going on everybody two bro here hope you're doing well and in this
video we're going to be creating our very first graphical user interface in python so sit back relax and enjoy the show
welcome one and all today we'll be creating our very first graphical user interface in python also
known as a gui for short we're going to be using the tk inter gui which is a module that
is included with python our first step in order to use tk enter is to import this module so that we can
begin using it our first line of code will be from tk enter
import asterisk this will import everything related to the tk inter module
and with this import we can now use all of the gui features that this module has to offer now there is one important distinction
that we need to make we need to discuss the differences between windows and widgets here's a few quick
definitions that i definitely did not copy from the internet widgets are gui elements such as buttons
text boxes labels images you name it and windows they serve as a container
to hold or contain these widgets for this topic we'll be creating and customizing our own window
and in future topics we'll be exploring different widgets that are available to us so let's begin by creating a simple
window and we should give our window a unique name such as window that's pretty creative
and in order to instantiate this window we're going to follow this window name with equals tk make
sure you get the capitalization right this is a uppercase t and a set of parentheses to serve as the constructor
what this will do and i'm just going to add a comment is instantiate an instance of a window for us
and when we compile and run this nothing appears to happen that's because we only instantiated our
window and we're not actually displaying it in order to display our window we're going to follow this with
the name of the window dot main loop and this will display our window and
this is our first graphical user interface and we'll be adding widgets to this window so i'm going to add a
comment that this will place window on computer screen and it will also listen
for events but we'll get to that in future videos now what we'll be doing is customizing
the appearance of this window let's begin by changing the size and we can do that with the geometry function
so we're going to first begin by typing the name of our window which is window
follow this by using the geometry function and we pass in a width and a height
but make sure this is within quotes and set this to whatever width and height that you want so if i want 420 by 420 that would be
420 x 420 and the size of our window is now the size that we set with the
geometry function now take a look at the top left of this window we have
this feather icon as well as a title of tk that's kind of lame so let's change that
let's first change the window title and there is a function to do that so we type in the name of our window
window dot title function and we can pass in a new title that we want to set
and i will set the title to be maybe bro code first gui
program that'll work and we now changed the title of this window and it says
bro code first gui program the next thing that we can do although
not necessary is that we can change the icon of our window bar at the top
i would like to replace this feather icon with an image of my choosing here's my desktop don't mind all of the
clutter and i would like to use this image of the logo for my channel and set this as the icon
for my window so what i'm going to do is copy and then go to my project folder and
then paste it click ok and i now have this image
within my project folder but it's in a format that we cannot use currently we need to convert this to
what's called a photo image that is a format that tk enter can use
so we'll need to convert our image to a photo image so do that anywhere within the window
between window equals tk and window.main loop right here is good i suppose we're going to create a photo image
from this image and this is a png file but yours might be something different so let's give our photo image a unique
name like maybe icon and in order to create a photo image we'll follow this with equals
photo image and within the constructor of our photo image there is an option for file we can
either list the file name or the file path if it's somewhere else on your computer since this image is within my same
project folder i only have to list the file name and this is called logo.png
and this is probably going to be named something else for you though so we now have this photo image called
icon that we can use and i need to set the icon of my window to this icon and luckily
there is a function to take care of that for us type in the name of the window which is window
dot and we're going to use the icon photo function there are two arguments the
first we're going to set to true and the second is the photo image that we want to use
and this photo image is called icon so we're going to pass this photo image as an argument to this
function of icon photo and now when we compile and run this the image that we wanted to use is now
set for the top left icon of this window bar however it loses a lot of the quality
since the dimensions are so small but you can still tell that it's my logo though so that's how to replace
the icon of your window bar in the top left corner now let's change the background color
of this window and one way in which we can do that is to use the config function you can use the config function
anytime that you want to make any changes to this window so let's change the background color here and there is an option called
background and we can set this equal to either a color name or a hexadecimal value
let's begin with just some color names let's say that i want the background color to be black
i'll just type in the word black here and this will change the background color of my window to black
alternatively you can set a hex value as the color so if you were to look up or google hex
color picker you can select whatever color you want let's say that i want a sky blue color like this well this is
the hex value i'm going to copy this value and then paste it within the option for
my background make sure you have this hashtag as well because that represents that this is a
hex value so now the background color is that sky blue color that i picked
well everybody that's the basics of creating a window in python and in future videos we're going to be
exploring different widgets that we can add to this window that have some functionality so if you would like a copy of all this
code i'll post all of this in the comments down below but yeah that's how to create your very first gui in python
hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can create
labels in python so sit back relax and enjoy the show
what is a label well i'm glad you asked that question it's an area widget that holds text and
or an image within a window so to begin we'll need to create a window to act as
a container to hold this label we can create a window with window equals tk followed by
window.mainloop and this will give us a window in which we can add a label to
now let's give our label a unique name such as label and in order to instantiate a label
we'll follow this label name with equals label with a capital l and a set of parentheses
the parentheses are acting as the constructor for this widget our label and we can pass in arguments
into these parentheses the first argument that we're going to pass in is a master the container for this
label we're going to pass in the name of our window because our window is acting as the container
with widgets in python we can de-eliminate the arguments that we're passing in with a comma and there are options
available to us options are keyword arguments that we can pass in to the constructor for this
widget one option available to us is text and we can set the text of this label equal
to a string that we set so let's say that we want this label to say hello world well we're going to pass in
this option text and it's a keyword argument so if we were to do this we're going to
set the text of the label but this label currently doesn't appear within our window
what gives bro i thought you knew how to code hold up wait a minute there's one more thing that we need to do
so we're going to actually add this label to the window now we set the master
of the label to be our window but now we actually have to add it as step two one way which we can do that is to use a
pack function of our label so follow label equals label and pass in all of your
arguments and then follow this with the name of the label dot pack
so with the pack option by default this will place our widget in the top center of our window another way in
which we can add a label to a container or window is to use the place function
and we can set some coordinates of where we want this label or other widget to appear within the window if we want this to
appear in the top left corner we can set x to equal zero and y t equals zero and these are options
available to us too that we can pass in so this place function will place
our label at some position or some set of coordinates within the
window and with x equals 0 and y equals 0 that will place our widget in the top left corner
of the window and if i were to change these to let's say x equals 100 and y equals 100 well this is going to
be placed down by 100 pixels and to the right by 100 pixels
so you can use pack or place there's a few others like grid but they're a little more complex so we'll get to that in a future
video for the time being i'm going to use the pack function of the label and turn this place function into a
comment dot pack all right now
how can we customize this label we can pass in different options when we instantiate this label let's
change the font and that's another option we can change the font with font equals
and then we can pass in a font let's begin with a font family i will say maybe ariel
a size perhaps 40 and then a style if you so choose
like bold there's also italic and underline uh but this will work just fine then so
this will change the font of the text of our label and it says hello world still
now let's change the foreground color so that is another option the foreground
is the font color and the option is fg for foreground it's short for foreground
foreground equals we can state a color name such as green and our text
should now be green you can select something more specific by passing in a hex value so a custom color
that i like is hashtag zero zero ff00 this is bright green you can always look
up what different hex values are and we can also change the background color too
that is bg short for background color and we can pass in a color name or a hex value i'm just going to set
this to black just to demonstrate that we can pass in both either hex values or color names and
what we have is green text on a black background and this is the limits of our label
within the window because when we expand this window the label is still going to stay the same
size if we were to change the text within the label our label is only going to take up the
room that it needs and you can see that our label is now smaller now we have all of these
arguments within our constructor and it's getting a little bit difficult to actually read so i'm going to separate each of these
arguments line by line just so that this is more organized but it'll work just the same as it did before now how do we add a
border around our label one we can set the border style with the relief option and one border
that i like is raised but right now the border width is one so it's a little difficult for us
to actually see the border let's increase the border width with the option bd
and i'll set this equal to maybe 10. so this border is now more visible
another relief which is the border style is sunken and this will give our label a
sunken appearance but i think i'll change this back to raised we can also add some padding around the
text between the text and the border we can pad x and pad y pad x will add some padding some space
between the x-axis of our text between the border so let's set this to maybe 20
and we now have 20 pixels worth of space between the text and the border let's also pad y
this will add some space above and below our text between the text and the border
now how do we add an image to a label we first need to create what's called a photo image and we will create this
within the lines of window equals tk and window.main loop and let's give this photo image a unique
name like photo and in order to create a photo image we're going to follow this with
photo equals photo image and within the constructor of our photo
image there's an option called file and we can list a file path or a file name
right now on my desktop there is a image that i want to use and i need to convert this to a photo image
here's my desktop and this is an image that i want to use to add to my label i need to get the file path and i can
get that by going to properties then underneath location i can copy this
location address and paste it within the quotes for file
and then i need to add the image name and this is person.png and with these backslashes these need to
be double backslashes because that is the escape character for a backslash
but what would be a better option is to add this image to my project folder that
contains the python file that i'm working with so in place of listing the entire file
path i'm going to copy the image that i want to use go to my project folder and then paste it and i no longer need
this entire file path i can just list the image name that i have and now what we need to do is add this
photo to the label and there's an option to do so that is the image option and we'll place
this within the constructor for the label we're going to set image equal to the photo image that we have
and our photo image is called photo this will add our photo image to our label or other widget depending
on what we're working with so we have our image but it replaced all of the text
that we had for this label how do we add both text and an image to a window well we
can follow this with the compound option we can set a direction of where we want this image to be placed relative
to the text that we have so i'm going to set compound equal to bottom so that the image appears on the bottom
or underneath our text so we can both have text and an image or if i want this to be in a different
location i could set this to maybe top left or right if i were to set this to top we have
our image on top of our text and one thing to know about labels and many
other widgets in python is that the size of the widget will actually increase to accommodate
the size of all the components that's contained within if i were to give the text a longer string of characters such
as bro do you even code then the width of our label is actually going
to expand to accommodate the size of the longer string of text that we have
so that's the basics of labels everyone if you would like a copy of all this code i will post all of this in the
comments down below but yeah that's the basics of labels in python
hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can create buttons in python
so sit back relax and enjoy the show buttons you click them and then they do
stuff that's pretty much it so this is how to create a button in python we'll need a window
window equals tk followed by window.main loop let's call our button just button and in
order to create this we'll follow this with equals button and within the constructor
for this button we're going to list what we want to add this button to what is the master
the master is the window and in order to display this button we're going to follow this with button
dot pack and we should have a small rectangular button within our window
but it doesn't display any text nor does it do anything so let's add some text and there is an
option to do that within the constructor we're going to list the option for text and set this to whatever text you want
to display let's say click me and then when we run this our button now says the text that
we set and it says click me however it currently doesn't do anything though we need to set a command that is another
option command equals and we list a function name this is what's known as a callback
so let's create a function called click and then outside of the window let's define what our click
function does def click and let's print a message you
clicked the button now with the command we're going to list
the function name without the parentheses so make sure you're writing it as this and not that this is what's known
as a callback so when we click on this button it's going to perform our callback
and perform whatever is within our function click just like that let's customize the
appearance of this button i'm going to change the font that is another option font equals
and let's pick a professional font such as comic sans it's very professional and i'll set
a size of 30. and now you can actually read what's on this button it's large enough
let's set the foreground color that is the font color fg you can place a color name or a hex
value here i'll pick green that is 0 0 ff00
and our text should now be green which it is let's also change the background color
that is bg i will pick the color name of black and now we have
green text on a black background notice that when i click on this button or hold my mouse button down the color
scheme has changed that's because there is a different active foreground and active background
and we can change those too so that this won't flash every time you click on the button so let's change the active foreground
and active background those are other options active foreground
and i'll set this to the same color as my foreground which is green so the text color is
going to stay the same and i'll also change the active background
and i will also set this to black to match my background and then this should no
longer flash when we click on our button if you need to disable somebody from
clicking on this button there is an option to do so and that option is the state
option and normally this is active but you can set this to disabled and we can no longer click on
this button and you can see that the color scheme has changed too it's all grayed out and
whatnot so i'm going to replace this back with active because we still have a few more things to do
now how do we add an image to a button there is an image option and we set this equal to a
photo image but first we need to create a photo image i have this photo of a like button a thumbs up that i want to
use i need to create a photo image from this image file so within the window let's call this
photo image just photo photo equals
photo image then i'm going to list the file path or the file name
since this image is within my same project folder i only have to list the file name and
this is called like.png but if you use your own image it's probably going to be named something else
then i need to set the image equal to my photo image which i named photo but the photo replaces the text on
this button but it still works the same so we would like to display some text as well as our image
we need to use the compound option and we list a direction we can list
top bottom left right we want this image to be on the perhaps bottom so let's list the
bottom and now when we run this we have our text as well as our image and if we changed compound to a
different direction like top then the image is going to be displayed on the top relative to the text
what if we wanted to count the amount of times that we clicked this button we could create a variable called count
and we'll set this equal to zero but in order for us to access this count variable
within the function of click we're going to list count as global so that this is a global
variable every time we click this button let's increment our variable count by one by saying count plus equals one
and then we will print whatever the value of count is so within a print statement we'll just
say count now when we click on this button we have access to our count variable that's outside of this function
and every time we click on this button it's going to increase our count variable by
one well everybody that's the basics of creating buttons in python if you want a copy of
all this code i'll post all of this in the comments down below but yeah that's the basics of buttons in
python hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys
how we can create a simple entry box in python so sit back relax and enjoy the show
if you find this video helpful please remember to like comment and subscribe your support will
help keep this channel running alright my fellow bros in this video we're going to be discussing the entry
widget this is a text box that accepts a single line of user input as always we'll need a window window
equals tk followed by window.main loop and let's give our entry box a unique name let's
call this entry for short and then to create this entry widget we're going to follow this with equals
entry and within the constructor we have to state what we're adding this to we're going to add this to our window
and we should finish this by packing it or placing it entry dot pack and we should have an
entry box within our window however the text is somewhat small so let's change that
we can set this as an option within the constructor of our entry box so let's set the font font equals and
pick whatever font you want i'm going to pick maybe ariel and then a size
it'd be 50. and this should be a little bit larger and we can type in some
text like this cool right now we should add a submit button
because right now this currently doesn't do anything if we type some text in so let's create a button i'm going to
create this button maybe after the entry box and let's say that this is a submit button so let's call this
submit button equals button what are we adding this to writing the square window
and we'll set some text text equals submit we'll also need a command for this button
command equals and we'll create a function called submit and we want to pack the submit button to
add it to the window submit button.pack all right now let's put our entry box on
the left hand side and our submit button on the right hand side when you pack these widgets you can set
these on a certain side side equals left and our submit button
we want this on the right not necessary but i think it looks better and we also need to define our submit
function outside of the window let's define what this does def submit
what's this going to do we need to get the current value that's within our
entry box one way in which we can do that is use the entry boxes get
function this will return a string and we can do something with that string such as store this within a variable so
let's create a variable called maybe username let's pretend we're having a user submit their username to login to something i
suppose so we'll get the current value of the entry box store that within a variable and we'll
call this username and then we will maybe print this for fun print
hello plus user name and let's try this
so here's our entry box here and our submit button i'm just going to make up something
click submit and it displays our message hello ergo gerger gerger
i didn't say that this video was going to be professional let's add a few other buttons let's say we want a delete button as
well as a backspace button so let's copy what we have for our submit button and create a delete button
and then a backspace button the delete button is a little bit easier to code so let's rename our submit button as
delete button make sure to change the name to when you pack this and the text
we will say delete and we'll create a function called delete and let's define what delete does
so after our submit function let's define our delete function and we need to
delete all of the text within our entry box one way in which we can do that is to
type in the name of our entry box dot delete function
and this takes two positional arguments which portion of our entry box do we
want to delete so we want the very first character that is index 0 followed by the last character and we
can say end so this will delete all of the characters within our entry box and let's try it so
i'm just going to type in my name bro i'm going to delete this and all of the text is now gone
just like that let's create a backspace button we'll copy what we have for our delete button and change
the word delete to backspace make sure you change that when you pack
this as well and for the text we'll set this to backspace and we'll create a function
called backspace and let's define what backspace does so
after our delete function let's define back space and this is going to do something
very similar to our delete function except we're going to change the first
positional argument we need to place the second to last character within this positional argument one way
in which we can do that is to first get the entire length of all of the characters within our entry box
so let's begin by typing entry dot get and we need to determine the length
of this and we can surround this by placing this within the length function so this will
return the current length of all of the characters within our entry box and then we're going to add -1 so that
this first positional argument is the second to last character and the second positional argument is
the end the last character and then when we run this let's type in
our name i'm just going to type in draw code this time i'm going to click backspace and then it's only going to
delete the last character and then if you were to click delete it deletes everything
broy and then if you click submit it's going to submit your name all right let's customize the appearance
of this entry box so within the constructor for this entry box let's change maybe the color maybe the
background color and foreground color let's begin with the foreground color you can pass in a color name or a hex
value i want this to be green so the hex value for that is zero zero f zero ff00 and the foreground
color of the text when we type it in is now green and we can also change the background
color that is bg we could pass in a color name or a hex value i'm just going to say black to
keep it simple and we now have a black background and the text color is now
green here's a few useful features that you might be interested in let's insert some default text for our
entry box so we can use the insert function entry dot insert
we place a positional argument as well as some text so for the positional argument let's say
zero so that's the very beginning index zero and let's set the text to maybe
spongebob and then the default text within our entry box is now spongebob another option available to us
is that we can set the state of this entry box we can set this to active or disabled
let's say that after somebody submits our name we want to disable this entry box so we can either pass in
this option within our constructor or we can use the config function to make any changes
to the state of our entry box so let's say after we submit our username we want
to disable this entry box so let's type in the name of our entry box dot config
and for the option for state let's set this to disabled and then once we type in a name
and then click submit our entry box is now disabled there's also an option called show where
you can show a certain character in place of the normal text on the screen so this would be useful for a password
let's say that we're typing in a password but we don't want to display the password on the screen
we can use the show option to show a certain character in place of our text so you might see bullets or
an asterisk so let's pretend that we're now typing in a password so we're going to set
the option for show and place a character that we want to replace each
character with let's say we want to only display asterisks when we type in some characters and i'm going to type in
the word password but it's only displaying asterisks now but if i were to click submit
it displays our text and i would say plain text instead of our hidden text
because we're only showing whatever character that we set so that's an option available to you as well
well everybody that's how to create an entry box in python you can submit information such as a username for example or even a
password if you set the show option available to you if you want a copy of all this code i'll post all of
this in the comments down below but yeah that's some of the uses of the entry widget in python
hey how's it going everybody two bro here hope you're doing well and in this video i'm going to teach you guys how we can create and customize our own
check buttons in python so sit back relax and enjoy the show
all right my fellow bros in this video we're going to be creating and customizing our own check buttons in
python i sometimes refer to these as check boxes so in case i do that's what i'm referring to as always we'll need a
window window equals tk followed by window.main loop and let's call this button just check
button and in order to create this check button we type in the name of the check button
equals check button and within the constructor
what are we adding this check button to we're adding this to our window and also within the constructor we can
set the different options for how we want to customize this check button let's begin with the text
text equals i agree to something and last but not least we
need to add this check button to the window one way in which we can do that is to use the pack function of this widget
so follow this with check button dot pack when we run this we have our check button within our
window and we can toggle this on or off right now i'm agreeing to something i'm not sure what i'm agreeing to but
hopefully it's not anything bad now currently this doesn't do anything so we'll need to associate a variable
with this check button so we'll add that as an option variable equals and let's create a variable
called x and we'll need to define this within the window so after we create our instance of our
window let's say x equals now with check buttons they store a 1 or a 0 by default within
our variable our variable that we call x so with x we're going to set this equal to a int
var if this were to return a string we would say string bar but normally by default this
returns a one or a zero and we can actually change that using the on value
and off value options so the on value is what's going to be stored within our
variable if it's toggled on so by default this is one and the off value is the opposite this
is what is stored within our variable if this is toggled off alright now let's have some fun with
this so let's associate a command with this check button command equals and let's create a
function called maybe display and then let's define this before the window def display and we're
going to check the value of x to see if it's one or zero so within our display function
we're going to check to see if x and to get the value of x we're going to use the
get function so if x dot get is equal to one that means that somebody clicked on the
check box or toggled it on so if they check the check box
or check the check button then they agree so print you agree
if it's zero and we can do this with an else statement else print
you don't agree frowny face and let's test this theory so we have
our check button when we click on this it's actually going to call our display function i agree to
something and it says within our console window you agree and if i were to toggle this
off it says you don't agree let's change the font of our check button so we'll add that as an option
font equals and we can pass in a font that we want i'll say maybe ariel and then a size
of 20 and now this should be readable i agree to something let's also color
this because well i like coloring let's begin with the foreground color so that is fg for short fg equals
and then we can pass in a color name or a hex value i like hex values so i'm going to stick
with those i want a green foreground color so that is zero zero f
zero zero but feel free to adjust these values however you want so our text should now be green that is
a very bright green and it hurts my eyes so i'm also going to change the background color which is bg and i'm going to set
this to black so we'll have green text on a black background
okay now when you click on this it flashes that's kind of annoying that's the active foreground and active
background if we click on this or hold this down the color scheme switches to
our active foreground slash background and we can change those too so i'm going to set those options active
foreground i'm going to set this the same as my foreground color
and the active background will be the same as our normal background so that's active
background equals black and this should no longer flash
when we click on it not too bad not too bad let's add some
padding pad x i'll set this to 25
and pad y i'll set this to 10. we have a little more padding around
our check button one feature that's available to us is that we can add an image next to our
check button i downloaded an image of the python logo that i want to add
so we'll use the image option to add a photo image to this check button but first we need
to create a photo image from our image file so within the window
let's call this python photo but you'll probably use something different for your project
python photo equals photo image and within the constructor for our
photo image we can set the file path or the file name
since this image is within my project folder i only have to list the file name
and this photo of mine is python.png and now we set the image equal to
our photo image that we have image equals python photo but when we run this
it's going to overlap the text we still have our image though and this still works as intended so in
order to display the image as well as the text we're going to need to use the compound
option and let's add that at the end compound is where we're adding this photo
relative to the text i want this photo on the left hand side of the text so i'm going to set this to left and now
when we run this surprise surprise our image is on the left hand side one thing that you should know is that
with the on value and the off value data type if you were to change this to a non-integer value let's say we're
going to replace the on value with a boolean value of true and the off value
is false with this variable make sure to change the data type as well to reflect
what you're storing within it so with our int var variable we want to change this to a
boolean var value so replace int with boolean and this will work much the
same now with this display function we'll need to account for that so within the if statement here we'll
say if x dot get we don't need to say is equal to one this will return true or false and this
will work just the same as it did before and if you replace this with a string let's say the on value is
yes all caps and the off value is no this is now a string bar
and we'll change our display function to say if x dot get is equal to yes
and this should work you agree you don't agree you agree you don't agree and i'll change that
back to one so one and zero is the default for this but you can edit these based on what you need
all right so that's the basics of check buttons in python if you want a copy of all this code
i'll post all of this in the comments down below but yeah that's the basics of check buttons in python hey what's going
on everybody it's your bro here hope you're doing well and in this video i'm going to be teaching you guys how we can create radio buttons in python so sit
back relax and enjoy the show okay everybody let's create some radio
buttons now these are similar to check boxes but you can only select one from any single grouping
so let's pretend that i'm buying you lunch and you can only select one item from a menu you can select
either a slice of pizza a hamburger or a hot dog so let's begin by creating a list i will
call this list food food equals
pizza hamburger hot dog and let's create a window
window equals tk followed by window dot main loop
so to create a radio button we'll need a name so i'll call this radio button radio button equals radio button
and we're going to be adding this to our window and we're going to put this within a for loop so we're going to iterate
through all of the items within our list so let's create a for loop so we'll say
for index in range
length of food so this is going to iterate once through
all of the elements within our list so when we run this it's going to create
three radio buttons for us because we're instantiating one radio button for each item in the
list now what i'm going to do is set the text equal to
our list of food at a certain index so when we first run this for loop it's
going to be zero for the index then one and then two and then so on and
so forth for each item within our list and then we just need to pack this so
radio button dot pack and then let's take a look at this
alright so here are all of the radio buttons that we have currently they're all selected though so
we'll need to link these within a single grouping the next thing we'll add is a variable
and we'll set this equal to x and we'll need to declare this after we create an instance of our window
so x equals int var so this will hold an integer object
so these are all within the same grouping however if we try to run this again and
select one of these options they all become selected so we're going to need to give
each of these individual radio buttons their own value because right now they're all
sharing the same value so we can add value equals whatever the index is currently so the
first item within our list of food is going to have an index value of zero then one
then two so let's try that again and you can see by default it's zero so pizza is already selected then
we can select either hamburger or hot dog but we can only select one so that's
kind of what we want then so do you guys usually know how i call the config function after each change
that i make for an object well that's because i like to add comments just for teaching purposes
for what each change does however it might be easier for you instead of calling the config function a bunch of
times just to list all of the changes within the parentheses when you create an instance of the
object that you're working with however just for teaching purposes i'm going to put this all within
separate lines that allows me to add some comments so i think i'm going to start doing that from now on uh so what this does
is that this adds text to radio buttons and this
groups radio buttons together if they share the same variable
so if you wanted a completely different grouping of radio buttons you can give them a different variable
like y and what this line does is that this assigns
each radio button a different value
all right so let's make some cosmetic changes to our radio buttons so right now they are centered let's
anchor these to the west so we'll place this within the pack function so
anchor equals w alternatively you can just say capital w
without the quotes this would also work too so now they're all lined up let's add
some padding so i'm going to add pad x
and i'll set this to 25 and this adds
padding on x axis
let's also change the font so we'll save font
equals maybe i'll pick impact for a font style and set the font size to 50
and now we can actually read these because the font is large enough now let's add some images so let's
create some photo images you'll want to be sure to create these after you create your instance of your
window so let's create a pizza image first pizza image equals photo image
file equals the file path or the file name and my file is pizza.png and it kind of
looks like this it's just the pizza emoji so
pizza.png and then i'll do the same thing for hamburger and hotdog
so this will be hamburger image file equals hamburger.png
and then hotdog image
and this is what the other emojis look like
and then let's create a list of the photo images that we have i'll call this food images
equals than the names of these images pizza image hamburger image
and hot dog image so then we can set the image for each
radio button image equals the name of the list food images
followed by the index that we're currently on within our for loop
so this adds image to radio button and
let's test this cool here's our images now if you want some images as well as
text you'll have to use compound so let's add that next so i'm just going
to add a comma followed by compound
equals let's say left so this will add the image to the left of the text
adds image and text i'll just say left side
so this will display both an image and text
so with these radio buttons you can eliminate these circle indicators and there's actually a
way to do that so what we'll add if you want to get rid of those is indicator
on equals zero so this will i should say eliminate
circle indicators so it's going to change these to these
push buttons however they are going to be of uneven size you can set the width
if you want to so we'll do that so we'll say width equals
what about 75 i'm not sure if that's a good size or not
okay that's way too small let's try 375
so yeah you can have some push buttons if you want to if you don't like the circle indicators
so this sets width of radio buttons
now let's actually set a function to uh be called when we click one of these
buttons so let's call this function maybe order like we're ordering one of these items
so def we'll call this order like we're ordering something
and what we'll do is just a few if statements because i'm feeling lazy so we'll just say if x that's
the value that's going to be stored because each of these radio buttons is
grouped together by the variable x if x dot get
is equal to zero that's our first index for pizza what we'll display is
print you oops you ordered
pizza then we'll just add else if x dot get
is equal to one we will print
you ordered a hamburger
and then else if two
you ordered a hot dog
else print huh
so there's probably a more efficient way to write this however i was just feeling lazy and this is
probably the best way to keep this simple and easy to understand so let's try this now oh however we need
to set the command for our radio buttons so
command equals then the function name which is order and make
sure you do not add the parentheses so don't do this do that
and this will set command of
radio button to function
all right let's test this so if we click on pizza it says you ordered pizza
you ordered a hamburger and you ordered a hot dog okay everybody so that's the basics of
radio buttons if you would like a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of radio
buttons in python hey what's going on everybody it's you bro here hope you're doing well and in
this video i'm going to teach you guys how we can create a sliding scale in python so sit back
relax and enjoy the show let's create a scale so we'll need a
window window equals tk followed by window.mainloop we'll create
a scale called scale scale equals scale we need to add the scale to our window
so we'll put that here we can list a from position and a 2 position
both of these values will be our range of values that we can use for our scale so from
sure to add an underscore after from it won't work without this underscore from equals let's say 0 and 2 equals 100
so we're going to create a scale for temperature and this will be in celsius so 0 will be
freezing and 100 will be the boiling point uh you know for water so then to display the scale we'll need
to add scale.pack and let's run this so the front position is zero so that's
at the top here and then if you go down it increases so you can actually flip this so we'll save from
102 will be zero so now you can scroll up and the number
will increase let's also get the current value so
we'll need a button so button equals button
we'll add this to the window we'll add some text text equals submit and then a command
command equals submit but we'll have to make this function
so let's do that outside the window def submit and we will simply print the
current temperature so let's display message the temperature
is plus scale dot get
plus degrees celsius we can just say degree c
so let's try this uh but we also have to pack the button so button.pack
so if we were to try and submit this right now scale.get is going to return
an integer so we need to convert this to a string so str scale.get
and you have to do that with python if you're displaying a integer value along with another string
uh you need to convert it to a string so now this should work so it is 82
degrees celsius so let's do some cosmetic changes for our temperature gauge
because right now it's kind of ugly so the first thing we'll change is
let's say the length so length equals 600 so that should be fairly large
you can also set the orientation so that is orient spelt like that
so this can either be vertical which it currently is or horizontal
but i'll keep this as vertical so i'll let a comment that this is
orientation of scale let's also change the
font so font equals pick whatever font you want
and a size so maybe 20.
now you can add some tick intervals maybe i'll set this to 10. so these will
be numeric indicators on the scale
and show value this hides the current value so if you set this to zero this will
hide current value
so it no longer displays what the current value is next to the slider to actually retrieve it you'd have to
get the value so right now it's 40 but it helps that you have the tick intervals on the left-hand side
i should probably add that this adds uh numeric
indicators for value good enough let's continue on
now let's use the set function we can set the current value of the knob on our scale and by default it is zero
so we can use the scale dot set function and we can place a number in here
a value so let's say we want this to be 100 so this is now at the 100 position
instead of zero if we wanted this in the middle we could set this to 50 and now it's in the middle however if
you change the range of your skill of from minus 2
and set this to 50 now 50 is all the way down here so it no longer appears in the middle
so this isn't really necessary but if you want this to be a little more sophisticated there's actually a formula that you
could use we can use scale straight braces and then place the word from
within here this will give us our max basically uh so this is from without an underscore
so this not this this scale from minus scale
two and then we're going to divide this by two
and then i'm just going to put this within a extra set of parentheses
plus scale two just in case our two value is greater than zero
we just want to account for that and then i'm just going to put these within another set of
parentheses so this should always appear in the middle then even if we were to change this
range yeah it seems like it works uh like i said it's not really necessary but
if you want this to be a little more sophisticated that would work now let's make some cosmetic changes to
this scale and make it look pretty so first let's change the trough color
this is this gray portion right here so let's set the trough color
equals whatever color you want you could say like blue or you can place a hex value here and i
actually picked one out already so i'm going to use 6 9 e a f f and that is this icy blue color
kind of like this is sliding on ice and i'm also going to change the font
color and i'm going to pick this fiery red
color to symbolize heat
and then you can change the background color too so that is bg and i'll just set this to
like black it's looking kind of cool now right and
for no good reason i'm going to add some pictures so feel free to pause the video if you'd
like to download some images i'm going to use an image of a flame for the hot side of our scale and a
snowflake for the cold side so let's begin by adding the hot image uh to the scale
before we actually add the scale to the window so we'll do this after we instantiate the window
because that's the only place that we can do that so we're going to create a image i'll just call this hot image
for the fire icon so hot image equals photo image file
equals this is hot.png so hot.png we're going to add the image to
a label i'll call this hot label hot label
label image equals hot image and then we need to pack this
so hot label dot pack and this should appear at the top let's
test it yep there it is let's do the same thing for the cold side
so i'll add this here before the button and i'm going to replace hot with cold
same thing with the file name cold.png
this will be cold label cold image and cold label dot pack
and that should be it let's take a look not too shabby it's looking pretty sweet
it has our submit button at the bottom too uh so right now the temperature is 100 degrees
celsius the temperature is 0 degrees celsius the temperature is 60 degrees celsius
well that's how to create a scale in python if you would like a copy of all this code i'll post all of this in the
comments down below but yeah that's how to create a scale in python
hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can create a list box in python
so sit back relax and enjoy the show all right you wonderful people let's
create a list box a list box is a listing of selectable text items within its own container
so as always we'll need a window window equals tk followed by window dot main loop let's
create a list box simply called list box big surprise there right so list box equals list box what are we
adding this list box to we're going to place that here within the parentheses of the constructor we're adding this to our window and then
we're going to follow this with listbox.pack you can also do listbox.place as well and place some
coordinates but we've always done pack let's just stick with that for now all right so this is what our list box looks like
it's a small rectangular box and we're going to add some text items that are selectable
and eventually we'll be able to submit a choice so i have an idea let's create an online menu like we're
ordering food from a restaurant let's say it's bros italian restaurant so let's add some food items to our menu
and somebody can submit an order so we'll need to use the insert function of the list box to add
some items so list box dot insert we place an index and a text item so let's say
for index one we'll have pizza and this is what we end up with we have
the item pizza it's selectable and well that's really it we'll need to create a submit button
and populate the rest of this list box so let's add a few other items for our menu so let's say we'll have five items
and we need an index for each so one two three four and five so we have
pizza for the first item for the second item let's have pasta and third let's say garlic bread because
garlic bread is awesome and restaurants usually have appetizers so why not soup and salad
and that should be enough for this example and this is what we have we have our
menu and we can select an item from this menu so let's customize the appearance of this menu
well because we can so let's do that let's change the background color so we do that with the option
bg for background and you can set this equal to a color of your choice or a hex value so i have a hex color
value already picked out it is f7fde and this has the appearance
of i would say paper like it's kind of faded i think that would fit some sort of menu for a restaurant but pick
whatever background color you want so let's change the font next so we can
do that with the option font and i will pick the font
it's somewhat fancy i think it would fit like a restaurant menu and then a size of 35.
yeah we're getting somewhere we can also change the width and the height
so width equals let's say 12. that's not too bad for a width let's
also change the height so we can do that with a function of our list box so let's get the current
size of the list box and let's actually do that after we insert all of the items within our list
box so to change the size of our list box what we do is type in list box
dot config you usually use config if you need to change any uh options and we want to change the
length of or the height of this list box so we're going to say height equals
list box dot size function so then this will adjust
the size of our list box dynamically even if we were to remove an item
then the size of our list box is going to shrink just like that but let's keep salad in
there for now because we need salad all right so how do we actually submit
one of these options we'll need to create a submit button so let's do that after we create our
list box so near the bottom we'll call this submit button
submit button equals button we're adding this to our window let's set the text to submit
and we'll need a command so we'll create a function called submit and then we need to pack
this submit button submit button.pack now at the top of
this program let's create a submit function so at the top def submit
so to retrieve or get the current selected item of a list box there is a certain
function that you can use so we'll begin by saying list box dot get
what are we getting we want to get anything that is currently selected and there is a function for that so what we're going to do
within the parentheses of the get function is type in listbox dot current selection
it's shortened to cur selection all right and then we can either store this within a variable or we can just print
this but i think we'll just print this to keep it simple now when we select an item and
click on the submit button it's going to submit our order actually better yet let's actually uh
print you have ordered whatever item that
we select so garlic bread you have ordered garlic bread cool what we're going to work on now is
a way to submit or insert an item to our list box after this program is compiled and already
running so we'll create an entry box within our window where we can submit a custom item to
this menu so let's create an entry box and let's do that before the submit button that
would be a good spot for this so let's call this entry box where somebody can type in something to add to the menu so
entry box equals entry and we're adding this to our window and then entry box
dot pack then we're going to create a button called add and i'm just going to copy
everything from the submit button and we'll change submit to add
we're going to add an item to the menu so we'll change the text to add and command add
add button dot pack then we're going to create a function called add and we'll do that
at the top def add parentheses colon so to add an item to the list box
first we need to get what is currently in the entry box so we can do that by typing in
list box dot insert then within the parentheses we need to
get an index number as well as a text item so for the number what we
can type here is the listbox dot size so this will give us the current
position of the index that we're currently on for the list box and then we need to get the
text in the entry box so we type in the name of the entry box entry box dot get
and this will insert a new item within our menu our list box so let's try it
again so we can type in an item let's say soda we want to add soda to the menu
and then we click add all right there's our soda but we have to scroll down to see it
so let's change the size of our list box so there's actually a line of code that
we did that already listbox.config height equals listbox size so let's add that within the add
function at the very end so then the height of our list box will adjust
so currently there's no soda within our menu let's type in soda or some other item click add and then
that item will appear and the size of the list box will change to accommodate any new items
let's say now that we serve sushi we're now an italian and japanese restaurant now we have
sushi on the menu you know what why stop there let's create a delete button to delete an item
from this menu so we'll create a delete button i'll just copy everything for add and
change this to delete so delete button text equals delete
command equals delete as well and delete button dot pack and then at the
very top we'll create a delete function so we'll do that here
d e f delete and to delete an item from a list box
there's actually a function to do that so list box dot delete
and then within the parenthesis of the delete function we can pass in list box dot current selection or
just cur selection for short and then we want to readjust the height of this list box
after we delete an item so we'll just add listbox.config height
equals listbox.size because the size of all the items within the list box is
going to shrink after we delete an item so let's try this so here's our menu
let's say we no longer want salad because salad is healthy well we can delete it same thing with soup and you know what
let's also delete the pasta and the pizza so we're only left with sweet sweet garlic bread
well ladies and gentlemen we're going to get into some more advanced stuff with list boxes what if you want to select more than one
item from this list box we're going to need to change a few things so when we create our list box
there is a select mode select mode and we are going to set this equal to
multiple so now we can actually select multiple items from this list box like i want to select
one of everything but what happens when we submit this well we're going to run into some problems so we're going to need to
change this program around so let's begin with the submit option so what we're going to do within the submit
option is first get rid of this line let's say we no longer need this anymore uh and then
before we print out the items that we ordered let's create a list called food
and we'll just leave this empty for now we'll fill this later so we'll create a for loop for index
in list box dot current selection
what we're going to do after each iteration food dot insert
our index number as well as listbox dot get
the item name at this index what this for loop is doing is that it's going to iterate once for each item that we
select so since we have three items that are currently selected this is going to iterate three times
get the index number as well as the item at that index number and now we just need to display the
contents of what we have within our list of food so we can do that with another for loop so let's add that after
you have ordered then for index in our list
food all we'll do is print index so this will print out everything
that we ordered so let's say that we want one of everything and submit this you have ordered pizza pasta garlic
bread soup and salad now what happens if we try to delete multiple items
so let's say we want to delete soup and salad and we click delete well we're going to run into an error
because our function is not set up to accommodate for multiple items so we'll need to change a
few things around so let's get rid of this line for now list box dot delete list box dot current
selection and we're going to place a for loop here so for index in list box
dot current selection then after each iteration what we're going to do is use list box
dot delete and we're deleting the item at whatever index we're currently on so you
would think this would work at first glance let's say we want to delete pizza and pasta
we're going to click delete so pizza was deleted but not pasta that's because the indexes are
changing after we delete an item so when we use this for loop we should actually reverse this so with
listbox.currentselection we are going to enclose this with reversed
so then we're going to start at the last index and work our way to zero in that order so now if we want to
delete pizza and pasta i don't know why we would because they're amazing and we click delete it
deletes pizza and pasta but we still have garlic bread soup and salad then we can add an
item let's say we want to add sushi against the menu we can do that and then we can order one of everything
because we're really hungry you have ordered garlic bread soup salad and sushi
so that's the basics of creating a list box in python if you want a copy of all this code
i'll post all of this in the comments down below but yeah that's the basics of list boxes in python
hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can create
message boxes in python so sit back relax and enjoy the show
okay people let's create some message boxes but first we'll need an import so from tk enter import
message box and what this will do is import the message box
library so it's not necessary to add this comment uh so we'll need a window
window equals tk followed by window dot main loop let's create a button
so button equals button we're going to add this to the window we're going to set the command to
execute a click function that will have a message box appear when we click on the button
and let's set the text so text equals click me and then we will need to pack
this button so button.pack now we'll need to create a click function so let's do that at the top def
click and what do we want to do so there's a few different uh message
dialog boxes that you can use so let's begin with a basic show info message box
so message box dot and there's a few options let's begin with show info show
info this just displays a simple message so if we were to run this we have a
button we click on the button and it's going to create a message box for us and it just shows some info but we don't
really have any info to show yet so we can set a title and we can set a message
so let's set the title title equals this is an info
message box although part of the title got cut off
let's also set the message message equals you are a person
click me you are a person thanks i didn't know that so there's a few other
message boxes that we can use too so for now i'm just going to turn this into a comment and i'll just copy this
just to save some time and the next one that we have is
show warning so this will have a different icon so
the title let's say warning and the message
you have a virus
so now we get this annoying warning message but you can just click ok to get rid of it
so one thing that you might see with tech support scams they'll have a message box like this
that shows a warning but they'll put this within a while loop that's set to true so this will just continue on and on
kind of like this so if we were to try and close out of this it's just going to reappear while
true is true basically so that's just something funny that i wanted to show you
so let's move on i'm going to turn this into a comment then the next one we have is show error
so show error title set it to whatever you want
error message something went wrong
there's a few more sophisticated ones too we can ask for some user input
so this next one is message box dot ask and there's a few to choose from
let's go with ask okay cancel first we'll set the title title equals
ask okay cancel and a message message
do you want to do the thing
so we can actually put this within an if statement so this returns either true or false
depending on what you click so let's put this within an if statement if this is true
print you did a thing
if it returns false we can use an else statement else what else do we want to do we'll
say else print you
cancelled a thing and let's test this
but i am forgetting a colon there do you want to do the thing okay you did
a thing let's try it again do you want to do the thing cancel you cancelled a thing cool
there's a few others so i'll turn all of these into comments
and the next one we can go over is ask retry cancel and this is fairly similar to what we
had before i'm going to copy this let's change this to ask
retry cancel ask retry cancel do you want to
retry the thing you retried a thing
or you cancelled a thing so it's very similar to what we had before do you want to retry the thing retry you
retried a thing and cancel you cancelled a thing
okay the next one we have is ask yes no so we can get some user input
if it's a yes or a no so this returns a boolean value a true
or false value so message box dot ask
yes no and we'll set the title title equals
ask yes or no and a message
do you like cake
so let's put this within an if statement because this returns a true or false answer print
i like cake too else they answered no then if this is
false print why do you not like cake
and i'm missing a colon there we go so if they click yes this returns true
and we execute this line of code i like cake too if they answer no it's going to
execute this else statement do you like cake no why do you not like cake now what we have next is ask
question and this doesn't return a boolean value of true or false it actually returns a string of yes or
no so this is message box dot ask question
and we'll set the title to ask question and a message
message equals do you like pi
so let's just print the result what this returns so print everything within here
so like i said this doesn't return it true or false but yes or no
so what we could do is assign the response to a variable such as answer
so answer equals whatever the answer is whatever they click whatever button they click on so
if our answer is equal to yes
will print a message print i like pie 2.
then else the answer is no will print why do you
not like pie
so do you like pie yes i like pie too do you like pie no why do you not like pie
so this next one is probably the most difficult it's ask yes no cancel
so it's message box dot ask yes no cancel
it's this last one so let's set the title title equals whatever you want yes
no cancel and a message message
equals do you like to code
so let's just print the results what this returns so print everything just so we can take
a look so the possible answers are true false
or none so we can just run some if statements for this
so if answer is equal to true
what we can do is print you like to code
oh but we need to assign this to an answer so answer equals all of this
else if answer is equal to false
let's print then why are you watching a video
on coding and then else the response is none so we
can just use an else statement so else you have dodged the question
okay let's try this do you like to code yes you like to code
uh but this should really be a smiley face right do you like to code no then why are you
watching a video on coding do you like to code cancel you have dodged the question
no one other option available to you is that you can change the icon that you're using so let's say that we want to change this
icon so right now it is currently this question mark so we can set this to
one of a few preset icons so icon equals and let's set this to warning
so instead of that question mark we get this yellow exclamation point and you can also use info
it's just an eye and error
so do it fits best for you all right well that's the basics on message boxes in
python if you'd like a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of
message boxes in python hey what's going on everybody it's your bro here hope you're doing well and in this video i'm
going to teach you guys about the color chooser module in python so sit back relax and enjoy the show
okay everybody so before we begin it we'll need a second import so let's add this at the top so from tk enter import
color chooser and the reason that we need a second import and it's not included with this first import
is because this is a sub module it's not necessary to add this comment i
just like to add comments for teaching purposes so make sure you have these two imports before we begin
now we'll need a window and a button that we can add to the window and when we click on the button we're
going to select a color and change the background color of the window so let's create a window
window equals tk followed by window.main loop and then let's set the geometry so
we're going to change the background color of the window after we select a color so let's select a fairly large size for
a window maybe 420 by 420 so this is the width and the height
and then let's create a button so button equals button let's set some text text equals
click me and we're going to set a command for this button that is
called so we're going to create a function maybe called click and then we just need to pack this
button so we can add this to the window so button.pack now we're going to need to create a
function and we'll call it click so when we click on the button this function is going to be called
so def click and what do we want to do after clicking this button
what we're going to do is take color chooser and we're going to use the ask
color function so currently this is what this does we can select a color after clicking
this button and pick whatever color you want then you hit ok however we need to store
this color within let's say a variable so we'll create a variable called color color equals color chooser dot ask color and then we
can do something with this color but for now let's just print this color just to take a look to see what it
contains so print color
so let's say that i want this green color click ok this is what this prints this
is our color so this is the rgb values that we have in this
first element so this is the amount of red then green and then blue and the second
element is the hexadecimal representation of these values so what we want is this hexadecimal
value so what we can do is create a second variable to store this so let's just call this color hex
color hex equals color and we're going to get the first element
well technically it's the second element but it's the element at position one so this one
this is zero index zero so we're going to basically extract this hexadecimal value
and let's just print this just to be sure that it's working fine so print color
hex and let's try this again but select a different color uh maybe i want this purple color then
click ok so this is cb42ff
and here we have cb42ff now let's change the background color so
since we have this hex value that's actually fairly simple so we're going to take window dot config
bg for background color equals color hex
and this will change background color
and let's set this to a sky blue color maybe like this click ok and it changes
the color however it's not really necessary to continue printing these values you can take these out if you want
and this would work like just the same then now this part isn't necessary but if you
want you can condense these three lines of code that we have for our click function into less lines of code so what you
could do instead of assigning the value of color at index 1
to a separate variable we can take color at index 1 get rid of this line and assign bg
equals color at index one so now this is done with just two lines of code and why stop there we
can write this with just one line of code so now we're going to take color chooser dot ask
color get rid of this line bg equals color chooser dot ask color at index
one and now this is done with just one line of code however it's
a i would say a little more difficult to teach so that's why i kind of like to separate
this line by line so if you want you can condense all of this into just one line of code
so here's some ideas of where the color chooser sub module could be helpful so of course you can change the
background color too but let's say that you're creating a game and you can customize your character or avatar
well it would be kind of nice if you could have some way for the user to actually change maybe the character's
hair color eye color something like this would actually work fairly well so yeah that's the basics of color
chooser if you'd like a copy of all this code i'll post this in the comments down below but that's the basics of
color chooser in python hey what's going on everybody it's bro here hope you're doing well and in this video i'm going
to teach you guys how we can create a text area in python so sit back relax and enjoy the show
all right my fellow bros let's discuss the text widget this functions like a text area
you can enter multiple lines of text i'm not sure why it's called a text widget instead of a
text area widget text area would make more sense but idk though so let's begin by
creating a window window equals tk followed by window.main loop
so to create a text widget also known as a text area let's call this text text equals text
and we're going to add this text to our window and then we need to pack this text text dot pack
so we should have a text area and you can enter in
stuff like this all right but what good is a text area
if you can't actually submit some text so let's create a button to do that for us
so button equals button we're going to add this button to the window
and button dot pack so we need a command for this button
and a function as well so let's create a function called submit it's going to be a submit button
and let's change the text to because we can text equals submit
cool now let's create a function called submit and we'll do this at the top d e f
submit and what is this going to do well it's going to
get the text from the text area and let's assign this to a variable and we
can call this maybe input or whatever you want so to get the text
from the text area let's say text that's the name of this text area dot get but we need
a starting index as well as an ending index so we're going to place 1.0 here
for the beginning index this is the first line we want to get everything so for the
second index we can just put end then we can do anything we want with this input so let's just print this to
the console window so print input and this should work
hey you drink plenty of water love you
and click submit and then you can do whatever you want with this input well that's how a text area
functions but now let's customize the appearance of this text area and i have a few ideas that you might be interested
in so let's change the background color of this text area so bg equals and i will pick
light yellow and you will see why in just a second so now this text area kind of resembles
maybe a piece of paper a notebook a post-it note however this font is really small so let's
change the font styling and the font size so
font equals and i will pick the font ink free this somewhat resembles
handwriting so i kind of like this and it kind of fits our notebook theme and then a size maybe 25. one thing you
should know the text area size corresponds directly with the font size so 25 is a fairly
large font so if we were to compile this and run this the size of our text area is now massive
because it corresponds directly with the font size so we might want to limit the width and
the height so the height is the amount of characters that this is tall
so let's say 8 and the width is the amount of characters that this is long and let's say 20.
and now this should be much smaller and it kind of resembles a post-it note which is kind of cool let's also change
the amount of padding that we have we can do that with pad x and pad y so
pad x let's say 20 and pad y also 20. so the text shouldn't
actually touch any of the borders this is some sample
text cool let's finish this by changing the font color so that is
fg for foreground foreground equals and i'll pick purple because purple is a
pretty color and let's run this one last time
roses are red violets are blue
booty booty booty booty
rockin everywhere
well that's the basics of the text widget in python if you would like a copy of all this code
i'll post all of this in the comments down below but yeah that's the basics of the text widget in python
hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can use a file dialog
in python to open and read the contents of a file so sit back relax and enjoy the show
okay people so this is how you can use file dialog to open and read the contents of a file
but first we'll need a second import along with this import at the top so what we're going to be importing is
from tk enter import file
dialog and then we'll need a window like what we usually do so window equals
tk followed by window dot main loop now we'll need a button that
we're going to add to the window and when we click on this button it's going to launch our file dialog so
we can select a file so we'll call this button button equals button
let's set some text maybe to just open like we're opening a file and we'll
associate a function to our command for this button so let's create a function called
open file that's fine and then we need to pack this button so we can add it to the
screen so button.pack now we need to create a function called open file and we'll do this before we
create our window let's type def open file
and when we call this function we're going to take file dialog and use the
ask open file name function so this is going to return a string
and that string is the file path of where your file is located so what we could do is store this within
a variable so let's store this within a variable called file path and to test this let's just print this
just to take a look at the contents of this variable so let's just print the file path now i
have a file on my desktop that i want to use called test file so let's click the open button and this
might not necessarily bring you to your desktop it might bring you someplace else within your file directory so this just happens to
be bring me to my desktop so i'm going to click the test file that i have and click
open so this prints the file path so it's going to return a string and
it's the file path basically so now we want to open and read the contents of this file
so we don't really need this print line anymore so what we'll do is create a file
variable and we're going to use open we're going to list the file path and
then we're going to use r for read so the default is normally rt for read text otherwise you can read
binary uh but we can just set this to r r is the same as rt basically uh so then
we're going to open this file and then we're going to read it so let's just print this to the console window
so print the name of the file which is file where this is located file dot
read function and then it's a good idea to close your files after you're done with them so file dot
close and let's test this so i'm going to click open find the file that i want
click it and then open and that text file says my name is bro i
like pizza now let's say you want to make this a little more advanced so what i'm going to do is that i'm going to set the initial
directory of where we begin looking for a file when we launch our file dialog so with that test file i'm going to move
this to my project folder so i'm just going to paste it so now this is within my project folder
now i'm going to set the initial directory within the function of ask open file name
so we're going to set the initial d i r for initial directory and then we
can list a file path so one thing you could do i want to get this
path here this file path so if you're using pycharm what you could do is right click this copy path and then get the absolute path
and then i'm just going to paste this and then uh with these backslashes you'll have to do double backslashes
because this is the escape character for a backslash alright so this should open my project
folder which it does and here's that test file
another thing we could do is that we can change the title of our file dialog right now the default is just open so we
can change that to something else so i'm going to add a comma maybe put this on a different line
uh so this is still within the function of ask open file name so i'm going to set the title to
something else i'll say open file
okay so if we were to run this again instead of just saying open it says open
file okay and we can also limit the file types that we accept and look for
so we can use file types
so let's say that we want to initially look for a txt file so what we'll do is type in
like a name for the file that we're looking for so this is what's going to appear to the user uh text files followed by an extension
so we want asterisk dot txt
and then we can also have an option for all files so i'm going to add a comma for a second
option and then let's say all
files and then an extension so comma
asterisk dot asterisk this will look for all files uh but i think i am missing a
parenthesis there that should be good so then when we open our file dialog
it's going to initially be looking for plain text files and with this drop down menu it says
text files and all files so that's what we have listed within our file types of what we want to
search for so you can see that if i switch to all files our python file actually appears because
we don't have any limits on the files that we're trying to open or search for so if i change this back to text files
only folders and plain text files are visible so then we can open our test file again
but yeah that's the basics of file dialog in the next video we're going to be saving
a file so if you'd like a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of opening a
file using python hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going
to teach you guys how we can use python's file dialog to save a file someplace on your computer
so sit back relax and enjoy the show okay everybody so this is how we can
save a file we're going to be reusing a file dialog again kind of like what we did with the
video on opening and reading a file so from tk enter import file dialog we're going
to be creating a window and adding a button as well as a text area to this window so let's create our window window equals
tk followed by window.main loop let's create a button so button equals
button let's set the text of the button so text equals save it's going to be a save button and
then a command so we'll need to link a function to this command so let's create a
save file function and then we need to pack this button so button dot pack
now let's create a text area this is just called text so text equals text we're going to
add this to the window and we need to pack this text so text dot pack and now let's create
a save file function so at the top of our program d e f save file
and then we're going to take file dialog and use the ask save as file function and we're
going to store the contents within file file equals file dialog dot ask save as file
let's run this just to test it out so we have our window a save button and this
is our text area we can type in multiple
lines of text yay and let's try and save this just to
see what we have so far so this will bring me to my desktop it might bring you someplace else for
your computer so i'm just going to save this as test file now with this drop down menu
save as type there's nothing set up so we'll need to do that manually uh if we were to save this and here's
that test file on my desktop so let's take a look at the properties we did not list a
file extension so the type of file just says file so we'll get to that later on in
this video and if we were to open this with a program like notepad well it's currently empty that's because
we need to write some text to this file so let's do that next
let's store all of the text from our text area to a variable let's call this variable file text
file text equals and then we need to get all of the text from our text area so
text dot get and we're going to list the starting index as well as the ending
index for this function so we're going to begin at 1.0 that is the beginning of this text
area and the ending we can just put end and then we need to convert all of this into a string so let's
surround this with str and then we can store all of the text
from our text area within this variable file text and now we just need to write
our text to this file so file dot write and we're going to pass in file
text and then it's a good idea to close your files when you're done using them so file
dot close and let's try this again
hello my name is bro let's save this
i'll call this hello and click save and we still can't save s-type so we'll
work on that next let's go to my desktop here's the test file that we created i'm going to open
this with notepad and it has all of the text that we added to that text area now
let's list some available file extensions that we can have the user save this file as so let's begin by
setting the default extension so default extension and let's set this to
a text file that is dot txt and then we can list
all of the available file types so file types
and we're going to place these within a set of straight brackets and i'll just separate these line by
line so let's begin with a plain text file so this will take two strings
the first is the message that will appear within that save as type drop down menu so
let's place text file and the second string
the file extension and that is dot txt
then let's add another let's say html so i'm going to copy this and paste it
and let's say html next dot html and then lastly you can do
just all files so all files and that is dot
asterisk and let's try this again so hello my
name is bro i like pizza and
ice cream and this time i think i'll save this as an html file
and this is we'll call this pizza and ice cream i guess
and click save now let's go back to my desktop here's that file pizza and ice cream and
it is an file let's just verify that yep.html for
the type of file so we can open this with notepad
and it has all of the text i could even open this with sublime text as well kind of like that
all right let's change the initial directory for saving a file let's change it to
my project folder for uh this python file that we have so that is and i'm just going to
organize this a little bit initial d i r
equals and then we can list a file path so i'm just going to copy this
so copy path paste it
then i want to make sure that these are double backslashes
and i need to add a comma at the end okay let's try this again
so testing one two three and this should go to my
project folder which it does testing123
and let's save this as a plain text file click save
and here's that plain text file testing123 another option available to you is that
you don't necessarily need to use a text area to get some text to write to a file
you could use the console window to accept some text so to demonstrate this i'm going to turn
this line into a comment and we're instead going to use the console window this time
so we'll say file text equals input and then let's just have a prompt
here enter some text i guess and then let's run this again so
we still need to click this save button and select a file location i'll just save over our file
testing123 i'll click save yeah i'll replace it alright so we need
to enter some text i guess so i will write a message
such as the cake is a lie and hit enter
so then our file testing123 now says the cake is a lie so you don't
necessarily need to use the get function for a text area you can
use the console window as well here's one last thing to consider before you go so what if we begin the process
of finding a file location to save a file to and then we exit out of this window well
we're going to encounter an exception so one way that we can prevent this is to add
this line if file is none return
so then if we were to try this again begin saving a file and then exit out of
this there is no exception that we encounter so that's just one little extra i
thought i would throw in but yeah that's the basics of saving files in python if you would like a copy
of all this code i'll post all of this in the comments down below but yeah that's how to save a
file using python hey what's going on everybody it's your bro here hope you're doing well and in
this video i'm going to teach you guys how we can create a menu bar in python so sit back relax and enjoy
the show all right people let's create a menu bar
not too different from the menu bar that you see at the top of many programs there's usually a tab for file edit view help stuff like that
except we're going to create one that doesn't have as many options or features it's going to be the generic
brand menu bar like the walmart variety so let's begin by creating a window so window equals tk followed by
window.mainloop then we're going to create a menu bar and add menus to the menu bar and each
menu is going to function like a dropdown menu where you hover over one of these tabs
and there's a drop down so we need a menu bar let's just call this menu bar menu bar
equals menu and we're adding this to our window so then we're going to take window dot
config and we can set the menu of this window to equal the menu bar that we just
created with each of these tabs for your menu bar you need to create a separate menu and add each menu to your menu bar and
the menu bar is added to the window there's different levels to the stuff so let's create
a file menu because well this one has a file menu why not our program so file
menu equals menu kind of like what we did with our menu
bar except instead of adding this to our window we're going to add this to our menu bar so menu
bar like that there's one other step two we need to use this function menu
bar dot add underscore cascade this will have a drop
down menu sort of effect so let's create a label just called file to mimic the file tab
that you see at the top of many programs so label file and we're going to set the
menu to equal the file menu that we created so file menu and let's take a look just
to see what we have so here's our menu bar and here's our menu there's a drop down
effect for this but we need to add actual options to this file menu so let's do that
so let's begin by creating let's see we got maybe open save and exit
that should be good so file menu dot add
underscore command so this is a clickable option and let's create a label called open
and we can open a file and maybe two more so we got open
save and exit open save exit
and let's take a look at this so here's the drop down menu we can open
save exit now you might notice that there is this annoying line this is called a tear off you can
actually get rid of this if you want so when we create this file menu we're
going to set tear off to equal zero and that should get rid of that
and it's gone so sometimes you might see a line to separate sections well
you can do that with a separator so let's separate the exit command that we have
from open and save and to add that separator we just type in the name of our menu file menu dot add
separator so this will separate your different commands from each other
within a menu you can see that there is a line between save and exit because we placed a
separator here now if you want each of these file commands to actually do something you need to associate
a command with each of these commands it's a command within a command so command equals for our open file
command we'll create a function called open file
and we'll need to declare that function and then let's create a command called save file and then another called
exit actually one shortcut if you want to exit something you can just say quit all right let's create an
open file and a save file function so def open file
let's just print something just to keep this simple i already have another video on opening
files so print file has been opened and let's do the same thing
for save file
file has been saved and then our last command exit we'll
just quit so let's try this so let's go to file here's the drop down menu we can
open a file file has been opened we can save a file and then exit and exit will close out of
our window let's create a second menu called edit to mimic the one that we have at the top
of our ide so let's create a edit menu so it's the same process that we did with our file
menu so let's call this edit menu equals menu
we're adding this to our menu bar and i do not want a tear off so tear off equals zero then for the
next line we need to add cascade so i'm going to copy this
menu bar dot add cascade the label name will be edit and the file i mean the
menu will be edit menu and we're setting this menu that we're adding to edit menu
and let's try this so we have file and edit but we need to add commands to this edit
menu so it's the same process that we did with our file menu i'm just going to copy this
change file to edit and let's make a command called cut copy and paste
so the label will be cut we'll create a command called cut we'll copy this
and we'll create a another command called copy and then paste
all right then we just need to create some functions for this so cut copy paste let's do that at the top
so cut
you cut some text
so cut copy and then paste
you copied some text and paste you
pasted some text all right let's try this so here's our
edit menu here's the drop down we can cut we can copy and we can paste not actually but it's
going to call a function that can do something like that if you want to set that up maybe that's a video for a
different day let's customize these menus well because we can so let's begin by changing the font so
we can just type in within each of these menus font equals pick a font that you want and then a
size so i'm going to add this font for both of these menus that we have and
then when we hover over and click on these menus you can see that the font has changed
did you guys know that you can actually add images next to each of these commands well you can and this is how we can do
that first you'll need some images here's a few that i'm using so add these to your project folder i plan on using a
floppy disk for save and open folder for open and for some reason a stop sign for exit because i
couldn't really think of anything at the moment i guess an arrow would have worked too i guess so let's create some photo images
out of these images so i already did this i'm just going to copy and paste the text that i had
so create a unique name for each image i have open image save image and exit image
they're all photo images and here is the file path or the file name for each of these
pictures that i'm using so to add an image to each of these commands when you add
the command we can just say image and then the photo image that you want to use
so with my open command i'm going to use this open image photo image that i have and
this is the open folder so i'm going to do the same thing for save and exit so we have save image
and exit image
but when we run and compile this let's take a look yeah so all the text is gone that's
going to be a problem so we'll need to compound views so with compound we can add
an image on a certain side of the text and keep the text so compound
let's say we want the image on the left so compound left and i'm just going to add
this to each of these commands and now we should have an image as well
as some text well that's the basics of creating a menu bar in python if you want a copy of
all this code i'll post all of this in the comments down below but yeah that's how you can create a simple
menu bar in python what's going on everybody it's bro here hope you're
doing well and in this video i'm going to teach you guys how frames work in python so sit back relax
and enjoy the show what's going on people we're going to be discussing frames today
a frame is really just a rectangular container to group and hold widgets together
so we're going to practice using frames today but first we'll need a window we're going to create a frame and add a
frame to the window so window equals tk followed by window.main loop
well we're going to need some widgets to add to our frame so let's create a bunch of buttons
because why not so i'm going to show you guys a shortcut too so let's say
button equals button and then for now we're going to add this
to our window but we're going to replace this eventually with frame when we create this and i'm just
going to set the text to equal let's say w we're going to have four different
buttons wasd like the buttons on the keyboard if you're playing a game and you want to move forward
left back or right so we're adding this to the window for now let's set the text to w
and what else can we do uh let's change the font so font equals i'll pick the font consoles
because that tends to be even uh with buttons the size of the button adjusts to uh the
size of the uh letter that you're using or the size of the text uh so let's set this to 25
and then a width so maybe width equals three all right and then
button.pack and i just want to take a look at this
so here's our button w so i'd like to show you guys a shortcut if you don't plan on using this
button by name you don't really need to give it a name you can just say button and then have all your uh options here
and then instead of having button.pack just add dot pack to the end so this will do the
same thing however you can't adjust this button by its name though because it doesn't have
a name anymore so let's create a few other buttons one for a s and d so we have w
a s d
and by default they're all top and center so with pack we can actually put these
on a certain side so let's say we want uh w on the top
and then the other three will be all left so side equals left and then after i
show this to you you'll see the benefits of using a frame all right so right now they're all at
least it appears that they're all within a container so what if i were to expand this well w
is just drifting off it's sailing away by w so what if we could put these within a
frame or container to actually contain all of these widgets well we can
so let's create a frame frame equals frame
and instead of adding these buttons to the window we're going to add these buttons to our frame
and now we need to add the frame to the window
and this is what this looks like however we need to actually add this by using pack or place
so frame dot pack so now what this looks like is that all of these buttons all of
these widgets are now contained within a frame a container let's change the background
color of this frame just so that we can see the width and the height of this frame so
when you create your frame there is an option for background color it's just bg
and let's set this to a color we haven't done pink yet pink is a very masculine color so now
the background of our frame is pink and that might be a better visual cue to the balance of
the frame let's also give this frame a border so let's set a width of 5 using bd
and then the type of border that we want and we can specify that with relief so relief
equals let's say raised so this will have a 3d pop effect kind of like that let's try sunken
there's a few other ones as well but i don't feel like it's necessary to go over all the border types let's stick
with sunken for now that'll work alright so with this frame we are currently packing this
we can set this on a certain side within our window so currently it's at the top let's set
this to maybe the bottom so side equals bottom
now this frame is sticking to the bottom of the window and it still contains all of the buttons
all of the widgets that we added another function available to you is the place function we can place this
frame at certain coordinates within our window so let's set
x to equal zero and y to equal zero so then when we place this frame within
our window and set some coordinates this entire frame is going to stick at
these coordinates even if we were to resize this window and we can change these too
let's say x is now 100 and y is also 100
so the frame along with all of the components all of the widgets that it contains
are sticking within the container and they move along with this so that's the basics of frames it's
really just a rectangular container to group and hold widgets together so if you want a copy of all this code
i'll post all of this in the comments down below and well yeah that's how frames work in
python hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys a
few different ways in which we can create new windows using python so sit back relax and enjoy the show
let's get started everybody so we're going to create a window and we'll add a button to this window when we click on this button it'll
create a new separate window for us so window equals tk followed by window.main loop
we'll need to add a button so let's do that button we're adding this to the window let's add some text to the button let's
say create new window and we'll set a command
command equals and we'll need to define a function let's create a function called create
underscore window and let's pack this as well so we will define
this function create window and let's do so at the top def create window and what do we want
this to do well we're going to create a new window and let's call this next window new underscore window equals and there's
two popular ways of creating a window one is we can use tk and the other is
that we can use something called top level and let me explain the difference between the two here's a definition for a top level
window this is a new window on top of other windows and it's usually linked to a bottom
window our main window is serving as the bottom window and our new window is serving as the top
window the top level window so let's try this and just experiment here is our main window
the bottom window and if we were to click on this button it's going to create a new window for us a new top level window
if we were to close out of the bottom level window any top level windows associated with
this would also close kind of like what you just saw now however it's not the same case
the other way around if we have a bottom window and a top level window and we close out of the top level window
our bottom level window is just fine it didn't close out of that so think of these like
jenga pieces if you were to pull one of the pieces one of the windows out from underneath
the bottom any pieces or windows on the top of it will close out as well or collapse kind of like in the game
jenga so that's one way to think of top level windows they're stacked on top of any
bottom level windows if you remove a bottom piece it removes any from the top on the flip side we have tk this is a
new independent window and we've actually been doing this since day one of our gui programming tk is a
new independent window and our main window and the new window that we create are not linked whatsoever they're
completely independent so if we were to create a new window this is our new window and close out of
our old window well this new window still persists so this could be useful for let's say a login form or a login screen
after you log in you'll be brought to your main program which could be within the new window one other thing that you can do too you
can also destroy the old window after creating a new window so we need to type in the name of the
window that we want to destroy actually let's call the main window just old underscore window just to clarify
things so let's rename that here here and here as well so we want to destroy our old window as
if we're closing out of it so we type in the name of the window old underscore window
and we use the destroy function and that sounds pretty sweet so we're going to destroy our old window
after creating our new window so let me add a comment that this will close out of old window
and let's test it so we have our old window our main window we'll create a new
window it creates our new window and then closes out of the old window so that's one of a few ways in which you
can create a new window for your program so if you want to copy of all this code i'll post all of this in the comments
down below but yeah that's how to create a new window using python hey what's going on everybody too bro
here hope you're doing well and in this video i'm going to teach you guys how we can create separate tabs for our gui applications in python so
sit back relax and enjoy the show okay let's begin so in order to create
tabs for our python gui application we're going to need access to a widget
called notebook and that's found in a different module so this time we're going to need two imports so at the top from tk enter
import just everything but the notebook widget is found within a separate module
so we'll need a second import from tk enter import ttk so this ttk import
gives us access to several different widgets that are normally not available to us so once you have these two imports
you're ready to begin so we'll need a window window equals tk followed by window.main
loop and we need to create a notebook widget so right after you create your window we're
going to create a notebook we'll call this notebook equals ttk
dot notebook and we want to add this notebook to our window so let me
add a comment here what this widget does so this is a widget that manages
a collection of windows and displays and that's really all there
is to it so in order to create different tabs we're going to create some frames so for the first tab i'll call this tab
1 equals frame and we want to add this to the notebook
and with our notebook we're adding this notebook to the window all right so this will be a new frame
for tab one and let's create a second tab and we'll call this tab two and you can
create more tabs if you want but that might be overkill so this is a new frame for tab two
after you finish these two lines of code we're going to follow this up with notebook.ad so notebook.ad
what widget are we adding we're adding our tab 1 frame and we can set some text for
this tab so text equals and i'll type in tab one and we'll repeat the process for
tab two so notebook dot add tab two and we'll change the text to tab two and
then we need to pack this notebook notebook dot pack
and let's take a look to see what we have all right we have tab one and tab two but we'll probably
want to actually add something to each of these tabs so that the content is visible so let's create some
labels so after we pack our notebook let's create some labels i don't really feel like giving these
names because we don't really plan on using them for anything else so we'll just say label tab
one that's going to be the parent widget and let's set some text text equals
hello this is tab number one then i think i'll give this a
width and a height too just so it's more visible so for the width i'll make this 50
and the height 25 so this will be roughly a square shape
and then we need to pack this so i'm just going to add pack and let's create a second label for tab
two so label tab two maybe i'll say goodbye this is tab number two
okay we should have some actual content for these labels now for these tabs
so here's the label this is tab one and this is tab two and you can switch between these and they display
each of these separate labels however with the way that this window is arranged if we were to expand the size of this
window well our frames and our tabs kind of stay in the top and in the center so i'm going to add a
few lines within the pack function of our notebook the first thing i'm going to do is use the expand option and set this to
true so what this does and i'm just going to add a comment that expand
this will expand to fill any space
not otherwise used so what happens now
is that this will actually expand and it's staying in the center of the window but there's one more thing we're
going to add fill equals both normally this is x or y or you can do
both so i'll add a comment as to what this option does so fill will fill
space on x and y axis so if you combine
both of these together what you get is that these tabs will stay in the top left corner and if you were
to expand the size of this window the tabs aren't going to move they're going to stick to the top left
but the size of the window will expand all right so that's the basics of creating tabs in python if you want a
copy of all this code i'll post all of this in the comments down below but yeah that's the basics of creating tabs in python
hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys all about the grid geometry manager in
python so sit back relax and enjoy the show all right everybody let's talk about the
grid geometry manager well because we have to this is a useful way to organize widgets within a
container imagine our windows being arranged into a series of rows and columns similar to an excel
spreadsheet i tend to use that example a lot the top left most cell is row zero column zero computers always
begin with zero so that's why our grid doesn't begin with row one column one and we can list which
row and column we would like our widgets to be placed within and by default we only have
one row and one column to work with at the start but we can explicitly state which row and column this widget should
be placed within relative to the container that it's in and python will create new relative rows
and columns for us if we state where these widgets should be placed so let's create a small
submission form and then organize all of our widgets using our new grid system that we have so let's begin by creating a window
window equals tk followed by window.mainloop now that we have our window we'll need to create
some widgets to add to this window so let's say that we want an entry box and a label for a first name last name
and email address as well as a submit button so let's create a label and an entry box
for a first name just to demonstrate this so let's call this label first name
label equals label we're adding this to the window and let's set the text to first
name for now i'm just going to use that pack to demonstrate the differences between
pack and grid and let's create an entry box let's call this first name
entry equals entry we are adding this to the window and for
now we're just going to pack this and let's take a look
so here's our label on the top it says first name and then it has our entry box right underneath so what
if we want to have this label on the left hand side and our entry box on the right hand side of the
label we're better off using the grid geometry manager so we're going to replace pack with grid
and we have to set which row and column that we want each of these widgets to be placed within normally if you use the pack geometry
manager as you create new widgets they're just going to be placed directly underneath in one long column so
let's say that for our name label we want to place this where the row is zero and the column is zero
that's the top left corner so within the grid geometry manager when we call it
we're going to set row to equal zero as well as column to equal zero and then for the first
name entry we want this to be on the right hand side of our label so we'll place this within the same row
row equals zero but in a different column column equals one so column one is directly to
the right of column zero and then when we compile and run this we now have our entry box
to the right of our label that we have so let's repeat the process for a last name an email address and
then a submit button so i'm just going to copy what we have here and change first name to
last name so last name label and we'll change the text to last name
last name entry and we'll keep that the same now we want this last name label to be
underneath the first name label because right now they're going to overlap because we have them in the same
row and columns so you can see that we can no longer see the first name label or the first name
entry so let's place this directly underneath we're going to put these underneath by one row
so we'll keep the columns the same but we're going to put this underneath by one row so row
one and row one for the last name entry and what you get is that
these two labels and entry boxes are arranged neatly into rows and columns and let's do the same
thing for an email so i'm going to copy what we have and we're going to change
last name to email so email label and email entry and then
change for the text last name to just email and we're going to place these where row
equals 2 and we'll keep the column the same and for email entry
row 2 column one so doesn't that look a lot better now
let's create a submit button so let's call this submit button
equals button and then we're adding this to the window and we should set some text text equals
submit i guess dot grid and we want to place this underneath
currently kind of just shoves it underneath for now let's say that we want this between these two columns
so we'll want to set the row and the column to begin with row is going to equal three
and column we'll set this equal to zero for now there isn't going to be any apparent change it's still going to be in the
same place but one thing that we can do is use an option called column span we can have a widget take up more
than one column and it's going to place this widget in between both of these columns
in between the combined width of both of them so we'll add column span
equals two so this widget is going to take up the next two available columns including
the one that it's currently in and you can see that our submit button is now between these two columns that we
have one thing that you should know is that the column width is dependent on the width
of the largest widget that is contained within that particular column let's say that we increase the width of
our first name label well our column is going to expand to actually fit
that widget that we have so for our first name label let's set the width to maybe 20
and this is going to increase the width of column 0 and to even better demonstrate this
let's color each label a certain color just for a visual for our first name label let's say this
is red and then for our last name label let's set this to green
and then for email maybe blue
now all of these are color coordinated and you can see that the background color of our first name
label is taking up the entire column space now what if we changed the size of our
email label to something even larger like 30 so width equals 30.
and now the column 0 has expanded to accommodate the size of our largest
widget which is our email which has a width of 30 and before we finish this video let's add a
title to the submission form right on top of the first name label and the entry label so let's call this title
label equals label writing this to the window let's set some text let's say enter
your info and let's pick font font equals
what am i feeling like today maybe just arial and then a size maybe 25 we're going to
use the grid geometry manager and we want this at the top so we want
row zero at least i want this to take up two columns so we'll say column
equals zero and then set a column span column span equals two
now a few things are going to overlap here so we're going to move everything down
by one row besides our title label so we want
this first name label to be directly underneath our title label so let's move everything down by one row
and our title is going to be directly on top of our first name label as well as the first name
entry box that we have all right so that's the very basics of the grid geometry manager
if you want a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of the grid
geometry manager in python hey what's going on everybody it's your bro here hope you're doing
well and in this video i'm going to teach you guys how we can create a progress bar in python so sit back relax and enjoy the show
okay let's create a progress bar but we'll need a few imports to begin the progress bar widget is found within
that ttk module so we'll need a separate import from that from tk enter dot ttk
import everything and we'll import everything from time as well let's
create a window window equals tk followed by window.mainloop we're going to add a progress bar and a
button to this window when we click on the button it's going to fill our progress bar let's begin by creating a button to
begin with let's call this button equals button we're adding this to the
window let's set some text text equals maybe download
and then a command maybe i'll call this start finish by adding this button to the
window and we'll just use pack to do that let's define what our start function does
def start we'll fill this in later i'm just going to print nothing just as a placeholder and
we should just have a button now let's add a progress bar before this button
and we'll call this progress bar just bar for short bar equals progress bar
we're adding this to the window we can set an orientation
this can be horizontal or vertical later on in this video i'll show you the differences between the two
but for now let's set this to horizontal and then i'm going to pack this bar bar
dot pack and add some padding pad y equals 10 and let's see what we have
okay this is our progress bar at the top and this is the button when we click on this button it's going
to fill our progress bar but i think i'm going to increase the length of this progress bar
let's set this to maybe 300 i believe 100 is the default okay that's not too bad of a size now
let's define what our start function does we can actually increase the value of
our progress bar by typing in the name of this progress bar here value plus equals some amount let's say
10. so what's going to happen right now is that every time we click on this
button it's going to fill our progress bar by 10 out of the total which is 100
let's pretend that we're waiting for a certain amount of tasks to complete so let's define a few
variables let's say we have a variable called tasks and let's set this to 10 just to keep it simple
and x will represent the current task that we're on and we'll say 0 to begin with let's
create a while loop while x is less than the amount of
tasks that we have we will increment the value of our bar by 10.
10 10 for each test that we have which is 10 for a total of 100
and we'll want to increment the task that we're on as well which is represented by x so let's
increment x by 1 after each iteration of this while loop now when we run this
and click download this spills instantly let's add a delay just to simulate
each task waiting to be completed so let's add that here let's add a delay by
using time dot sleep and let's set this to one second we're going to wait one second and then
complete a task what ends up happening now is that
nothing appears to be updating well what gives bro you lie to me well that's because the window is waiting to have this
progress bar complete before it's actually going to display it being filled
so we would want to refresh this window after each iteration of the while loop
so at the end of this while loop let's add one thing window dot update underscore idle
tasks after each iteration of this while loop it's going to update the window that we have so then when we
download something it's going to update our progress bar after each iteration of this while loop
until it's completed right about now let's take this a step further by adding a label that displays
the current percent of the progress bar that is complete let's add this label after the progress
bar but before the button sandwiched right between these two widgets so let's add that here
we'll call this label percent label equals label we'll add this to the
window and we'll need a text variable text variable equals let's call this percent
so the reason that we use a text variable is so that we can update this label with some text
after each iteration of our while loop and we'll need to pack this okay within the window
near the top let's define percent percent equals string var this allows us to
update percent with some new text and set the percent label with the new text that we have
within the while loop but before we update idle tasks let's set what percent is
percent dot set and let's say x divided by tasks and then we'll
multiply this by 100 i'm just going to put this within its own set of parentheses times 100
and then we'll convert all of this to a string so we can display this along with some
text there are a lot of parentheses here so it might be difficult to keep track of all this
all right and then we're just going to tack on percent and that's it let's try it
so we got 10 20 30 40 50. i'll shut up now one change that
i'm gonna make is that i'm going to cast all of this as an integer before we convert it to a string
because i do not like that decimal at the end of our percentage so yeah it says 10 percent 20 so on and
so forth let's add a label that displays the current task that we're on so let's copy what we have for our
percent label and let's rename this as maybe task label
task label text variable will equal maybe text
and let's define what text is so text is also a string var and within our
while loop let's update the value of our text text dot set
will display x plus maybe a forward slash
plus our tasks and since we're displaying integers
along with some strings we need to convert these to strings and we can use the str function to do that
for us so surround x and tasks with str to
convert these to strings and then we'll add just plus tasks
completed so the value of x will update after each iteration of this while loop
let's try it and after clicking download this will display the percentage as well as the
amount of tasks that have been completed all the way until it reaches the end
let's change this into a more practical example we'll pretend that we're downloading a video game so let's replace or rename
tasks as maybe gb4 gigabytes and this game will be 100 gigabytes
we'll rename x as well so let's refactor rename and change x to maybe download to
represent the amount of gigabytes that are downloaded and let's create a variable called speed
and let's set this to one alright so while our download
is less than the amount of gigabytes for this game we'll sleep for maybe a portion of a
second .05 should be good we'll increase the value of our bar by
this amount speed divided by gigabytes and then multiply this by 100
for the download we're going to increment this by whatever our speed is and right now it's one so
that's the same we can keep percent the same for our text let's change tasks to gigabytes
and that's all the changes that we have to make and now when we download something we're
kind of pretending that we're downloading a large file or a game you can see that once it reaches 100 it says 100
100 out of 100 gigabytes completed now we can change this to a different value let's say
maybe 50 and the speed will be maybe two
so this will adjust to accommodate whatever the new file size is as well as the speed
and before i forget you can change the orientation to a vertical bar if you so choose so we have
this vertical download bar now which could be good for something all right so that's the basics
of progress bars in python if you want to copy of all this code i'll post all of this in the comments
down below but yeah that's the basics of progress bars in python what's going on everybody it's
your bro here hope you're doing well and in this video i'm going to teach you guys how we can use the canvas widget to draw some simple shapes so
sit back relax and enjoy the show welcome back everyone well in this video
we're going to be creating a canvas a canvas is a widget that is used to draw simple graphs plots and images
within a window we're going to be creating some simple shapes in this video not anything too sophisticated i might get more into the
canvas widget in a separate video and at the end of this lesson we're going to practice by creating a pokeball
so to begin we'll need a window window equals tk followed by window.main loop to create a
canvas we can just simply call this canvas canvas equals canvas and we're adding this canvas
to our window and then we need to follow this with canvas.pack or place but i'm just going to use pack
because it's simple this is what our canvas looks like it's a rectangular area which we can draw
graphics on we can also set the width and the height of this canvas so when we create this canvas
we're going to set the options for a height and a width so let's begin with the height height equals let's say 500
and the width will be the same 500 and now we have a square canvas that we can draw
graphics on let's begin by creating some simple shapes maybe a line i think a line is a shape maybe a
one-dimensional one i don't know i don't geometry so let's create a simple line
so we type the name of the canvas dot create and there's a bunch of different shapes that we can create
let's create a line now i'm just going to turn this into a comment for a moment we need to set some
coordinates for this line this top left corner of our canvas is 0 0 and the bottom right corner of
this canvas is 500 by 500 depends on what you set the dimensions of the canvas to
so when we create a line we need a starting point and an ending point so if we want this to start in the top
left corner we're going to pass in 0 0 that is the starting position and we
can place the coordinates for the ending position if we want this line to end in the bottom right corner that would be
where x is 500 and y is 500 and this is what this looks like we just have a simple line going across
the screen but that's not all we can also change the color of this line and the thickness let's begin by
changing the color so we can do that with fill fill equals let's pick color blue
and now we have a blue line going across the screen but we can also change the width of this
as well so we can do that using the width option and let's set this to five
now we get an extra thick line across the screen now let's make a red line
so i'm just going to copy this canvas.createline and let's change some coordinates for this uh let's say
we want this to start in the bottom left corner and go up to the top right
so the starting x position would be zero y would actually be 500 x
for the ending position would be 500 and y would be zero let's set this to red and we'll keep the
width the same okay so here's our red line and notice
that this red line is overlapping the blue line so when you create shapes on a canvas if there's any that overlap
the one that you most recently created will appear on the top one option available to you is that you can
actually give these graphics a unique name with our blue line we could call this blue line blue line equals all of this
and then we can call our red line something different like red line this would be useful if you
want to call or use a graphic by its name if you want to like move a graphic on the screen or have
something appear you can use this by its name but we don't really need it for this lesson so i'll just revert this back to what we
had previously i'm just letting you know that you can do that alright what do we have up next let's create a rectangle so canvas dot
create rectangle we can set some starting coordinates and ending coordinates
the starting coordinates are for the top left of the rectangle and the ending coordinates are for the bottom right so for the starting
coordinates let's say we're going to place this where x is 50 y is 50. for the ending coordinates we want this
where x is 250 and y is 250 i'm just making up numbers
put it whatever you want really and this is what this looks like
but i think i'm going to comment out these lines for now
and here is our rectangle well i guess it's also a square we can actually give this a fill color
as well so we do that with the fill option fill equals purple
i guess and now we have a purple rectangle next on our list
is create polygon we can create many sorts of shapes using create polygon but it really depends on how many
coordinates that we enter let's create a simple triangle so we need at least three coordinates for this
to work so canvas dot create polygon and i have some coordinates picked out
already so let's place the first set of coordinates where x is 250 y is zero for the second set
where x is 500 and y is 500 in the last set the third set we'll
place this where x is zero and y is 500 and what this looks like
is that we have this black triangle that's taking up most of the canvas we can also change the fill color as
well so we do that with the option fill and we can set this to whatever color you want
let's say yellow and we now have a yellow triangle on our screen and it
kind of resembles the triforce from the legend of zelda series one of my personal favorites let's also add a border this is actually
done with outline outline equals and then pick a color for the outline let's say black and we have a black
outline around this graphic and you can also change the thickness of this too with width and let's set the width to
five and now we have an extra thick line around our triangle
with these shapes you can pass in a list of points too so i'm going to get rid of all these and
we're going to pass in a list so let's create a list called points points equals all the points that we
just entered in previously and then instead of passing in all these coordinates individually i'm just going
to pass in our list of points and this will work exactly the same okay
let's create an arc now so canvas dot create arc and arc is really just a
curved line between at two points however when we list some coordinates we're not listing the coordinates of the
starting position and ending position for this arc it's more or less for the amount of space that we want to allocate
to actually draw this arc so let's say that we want this arc to take up the entire canvas we can pass in
the dimensions for this canvas so the top left corner is zero zero and the height and the width are five
hundred so this is our arc it resembles a pie
slice it's not starting in the top left corner and ending down here that's the amount of space that we're
giving this crate arc function to actually draw an arc it's really an entire circle but
only a portion of it is visible let's also set a fill color for this so fill equals
what color did we not pick yet let's say green
and now we have a green pie slice there's different styles you can do too
so we can change that with style equals the default is pi slice that's what we had previously let's
change this to chord this will draw a line between these two points and this kind of resembles like a bow
like a ball with arrows and there's also just arc where it's simply just a curved line
let's change this back to pie slice well because i like pie we can change the starting position of
where this arc begins with the option start so start equals 0 by default so there's
going to be no apparent change let's adjust this by 90 degrees so this
is in degrees so this shifted what is this direction counterclockwise
by 90 degrees so 180 would theoretically flip this
and now this is on the other side of what we had previously and then 270.
all right we can also set an extent so the default is normally 90 degrees
but let's change this to 180 and now we have a what is that
hemisphere half a circle all right people let's practice by creating a pokeball there's still one
more function that we have to cover it's called create oval but we'll do that as we're making this so let's begin by creating the top red
hemisphere of this pokeball so that's canvas dot create arc and we're going to set
the extent of this to 0 0 500 500
so that this is going to take up the entire canvas and then let's also set a fill color to
red so fill equals red we need to change the extent of how far
this extends so we'll do that with the extent function so extent equals 180 so that this is a half circle
and let's also change the thickness of this outline as well using the width option so width equals
10 would be good and we have a red hemisphere for the top of our
pokeball let's work on the bottom half so that is a white hemisphere
so canvas dot create arc these are all the same we'll change the fill to white the extent will be the
same but we need a different starting position so start equals 180. so this is going to begin
at the 180 degree mark so when you combine these both together we get two different colored hemispheres that
form a perfect circle now let's create an oval within the center of this pokeball
so we're going to do that with canvas dot create oval we're going to set the amount of
space that we want to give the circle to be drawn so we'll place this where x is 190 where y is 190
where x 2 or the second x position is 310 and y2 is 310
let's set the fill color next so we do that with fill fill equals white
and lastly let's just give this a thicker border so that is width
equals 10 to match the width for the two arcs that we have and there you have
it we have a simple pokeball all right well that's the basics of the canvas widget if you'd
like a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of the canvas
widget in python what's going on everybody it's your bro here hope you're doing well and in this
video i'm going to teach you guys how we can create key events in python so sit back relax and enjoy the show
welcome back everyone in this video we're going to be discussing at key events we can bind a key event and a function
to a widget or a window so that when we press a certain key or do something we can trigger a
function to be called that will perform some sort of task for us so we can actually do this by using the
bind function so widgets and windows have access to a bind function
so when our window or our widget is selected and then you press a certain key or do
something then it's going to call a certain function to perform a task for us so there's two arguments within the bind
function this takes an event as well as a function name let's say
that when we press the enter key we want to call this function to do something so
for this event what we type for that is a set of quotes angle brackets and the name of the
button so for example if you want to press w to move forward like you're playing a game this would be w
a s d there's also up down and then let's say we want to press
enter to do something that is actually a return and then we will call this function so let's create a function
called do something and let's define this at the top def
do something now pay attention to this part we need to set up one parameter for this do something
function this needs an event so be sure to include that and it's easy to forget
so what do we want to do after we press enter let's just print a message you
did a thing and this should work now so let's try it
so while this window has focus ability we can actually uh have this respond to
events so right now i'm pressing all sorts of keys you can probably hear me right now going crazy on my keyboard but now i'm
going to hit enter and it says you did a thing and you can bind all sorts of keys to
this window let's say that i want to press q to quit so we'll just replace this with
lowercase q so i'm typing all sorts of keys but now i'm going to press q
and it says you did a thing kind of like we're quitting the game you can actually have this respond to
all keys well almost all of them so to do that you just type in key with the capital k
so i can pretty much press on any key then it's going to trigger or call our function
kind of like that so one thing that we could do we can display the key event that was
pressed so i'm just going to add that here maybe i'll change this message u
pressed plus and to display what key was pressed that is event
dot key sim i believe that's for key symbol so this will actually display
what button you pressed so w-a-s-d
here's a unique idea for practice let's say that we want to add a label to our window and we're going to
change the text on the label to reflect whatever key that we press so let's create a label
label equals label we're adding this to our window and let's change the font as well to
something massive like helvetica and a size of 100 that should be good
then we need to pack this label so label dot pack then within
this function let's turn this into a comment and we're going to use label dot config
and we're going to update our text and the text is going to be whatever key
that we press so we can do that with event dot key sim so now
this label is going to display whatever key that we press so for example w a s
d backspace escape up up down down left right left right b
a start all right so that's the basics of key events if you could do me a favor and in the comments down below
just press f to pay respects so if you want a copy of this code i'll post this in the comments down below but yeah
that's the basics of key events in python hey what's going on everybody it's your bro here hope you're doing well and in
this video i'm going to teach you guys all about mouse events in python so sit back relax and enjoy the show
hey everyone we're going to be discussing mouse events in python so before we begin we'll need a window so
window equals tk followed by window.main loop and in the last video we learned that we
can bind a widget or a window so that when a certain event occurs we can call a
function so we're going to do the same thing for this video but we have various mouse events that we can cover
so we're going to use the window.bind function and this takes two arguments an event as
well as a function name so let's define a function let's call it the do something function so do something
and we'll need to define this so at the top def do something and remember that we need
to set up one parameter for this function the parameter is an event and then we'll just print
something print you did a thing
okay so there are various mouse events for a left button click within quotes and then
within angle brackets a left button click is button dash one
so then if we were to click within this window it's going to call our function you did
a thing but if i were to right click it doesn't do anything so there are other mouse events too so
button two is that scroll wheel not if you scroll up or down but if you press in on it so right now i'm clicking left
i'm clicking right now i'm going to press in on the mouse wheel and it says you did a thing
button three is a right mouse click
so i'm clicking left nothing but i'm gonna click right and that seems to work all right so
button one i'm just going to add a note left mouse click button two
is the scroll wheel that's if you press in on it and then
button three is a right mouse click so did you guys know we can actually get
the x and y coordinates of where this event occurred so to do that we type in the name of the
event dot x however since we're displaying this along with some text
we'll need to convert this to a string so string event dot x then i'll add the
y coordinates as well event.y i think i'll just add a comma
between these to separate them and we'll change our text
so we'll say mouse coordinates all right let's try this again so this
is going to give us the coordinates of where we click and right now i'm just left clicking
so the top left corner is zero zero well at least close to it not there
exactly alright so here's a few other events that we can cover
i'm going to copy this we have button release if we were to release a button it's
going to trigger our event so right now i'm holding in on the left mouse button but i'm going to let go
then it triggers our event if i were to right click and hold it it doesn't do anything but
as soon as i let go then our event is triggered we also have enter
not to be confused with the enter button just going to get rid of that so that
is enter if we were to enter our binded window or widget
so if i were to enter it's going to give the coordinates of where i entered this
there is also leave so i'm going to say that enter
the window and leave is leave the window
so if i enter nothing happens but as soon as i leave it gives the coordinates
and the last one is motion as long as the cursor is in motion
so this one might be good for a game so that is motion
where the mouse
moved it's consistently giving me the coordinates if i'm moving the mouse but if i were
stationary or stop moving it stops all right so that's the basics of mouse
events in python if you want to copy of all this code i'll post all of this in the comments down below but yeah that's the basics of
mouse events in python hey what's going on everybody it's bro here hope you're doing well and in this video i'm going
to teach you guys how we can drag and drop widgets in python so sit back relax and enjoy the show
all right people let's just dive into this so we'll need a window and then we're going to be adding widgets to the
window so window equals tk followed by window.main loop now you can drag and drop all sorts of
widgets but let's just stick with the label because creating a label is simple so let's define a label label equals
label we're going to be adding this label to the window and let's set a background color so we
can actually see this label pick i don't know your favorite color i'm going to pick red and then i'm going to set a width and a
height because normally if you have a label without any text it's really small so let's set a width of maybe 10
and then a height of 5. that should be good and we want to place
this label someplace within the window so label dot place and we can pass in some x
coordinates as well as y coordinates so x equals zero and y equals zero
so that this is going to appear in the top left corner of our window so this is what we have
this is our label and we want to be able to drag and drop this label someplace within the window
what we're going to need to do is actually bind this label twice but let's begin with just
the first binding so in order to bind a widget you type in the name of the widget followed by calling the bind function
so this bind function can take two arguments it can take an event as well as a
function name so for the function name let's call this drag underscore start but you don't
really need to name it the same that i do and for the event that occurs this is going to be a left button click
with the mouse so that event is within quotes and within angle brackets
button dash one so if we were to click someplace within the label using the
left mouse button it's going to call our drag start function but we need to define this
so at the top of our program let's define this function def drag start and this takes one
parameter the parameter we have is our event so what we're going to do is actually get the coordinates of where
we click within this label and we're going to assign these to a new variable or attribute of our
label so label dot let's create an attribute called start x equals our event
dot x so this is where we click within the label and not necessarily the
window and let's repeat the process for y so label dot start y equals event dot
y so we're going to have some coordinates of where we click within this label and we can actually
use that for our next function so we're going to bind this label a second time so i'm going to copy this line and paste
it the second binding let's say is drag underscore motion for the function
name and this event is going to occur if we were to hold down the left mouse button
and then drag so that is b one dash motion
and then we need to define this function so at the top d e f drag underscore motion and this
takes our event as a parameter so this part is going to be a little funky we're going to
get or create new x and y coordinates so let's begin with x x
equals the name of our label or widget label dot w info
underscore x this is a function so add some parentheses this will get the top left x coordinate
of our label relative to the window that we're in minus label x well labeled.startx
plus event dot x all right so we're going to do the same
thing for y well we're going to replace x with y for the second line
all right so this is the top left corner the x coordinate of our
widget relative to the window this is the place where we click within
the label itself and this is where we begin dragging our widget to it's a little
difficult to explain but if you can find combine combine all of these together you'll get the new coordinates
of where you want to drag this component this widget to so we need to replace this widget so
label dot place x equals x and y equals y so then when you combine
all of these together we have our widget and we can drag it and drop it someplace else within the
window now wait a second what if we have more than one widget
well with the way that our functions are written now they wouldn't be compatible with more than one widget
just this label itself so what if we were to create a second label so i'm going to call the
second label just label two so i'm just going to rename them and let's change the background color to
maybe blue and i'm just going to place this somewhere else within our window so maybe where x
is 100 and y is 100 and we'll need to bind label two as well so
make sure to bind label two so we have label one binded it's just called label
and the same thing with label two all right let's see what happens i'm going to attempt to drag
label 2. the label 1 is moving that's because with our functions we stated we're
getting the coordinates and we're storing them within the attributes of label 1 and not necessarily label two so in
order to make these functions compatible with all widgets we can actually add one line of code
widget equals event dot widget so this is going to get the widget of
the event that we're dealing with and we're going to temporarily rename this as widget
so now we're going to replace all instances of where we use label and replace it with widget
be sure to do the same thing too with drag motion and then we will need to add this line
at the top of drag motion so now these functions are now compatible with
any widget that we create and we should be able to drag and drop
both widgets all right well that's the basics of dragging and dropping widgets in
python if you want a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of dragging
and dropping widgets in python hey what's going on everybody it's your
bro here hope you're doing well and in this video i'm going to teach you guys how we can move an image on both a window and a canvas in python
so sit back relax and enjoy the show all right my fellow bros i'm going to
divide this video into two different sections in the first section we're going to move a widget
within a window and in the next section we're going to move an image on a canvas so let's begin by moving a
widget within a window so we'll need a window window equals tk followed by window.mainloop and we'll
also need to set some geometry for this window window dot geometry let's make this
500x500 500 x 500 and let's take a look
okay that should be a decent size let's add a label to this window
so i actually have a race car image that i want to use if you would like an image feel free to pause the video and
download one what i would like to do is create a photo image from this png file that i have
i'm just going to call this my image equals photo
image file equals since this is within my project folder i can just list the
file name otherwise you might have to list the file path and for me this is called
racecar.png i want to add this image to my label not necessary but
it'll be helpful for this example i'm going to call my label just a label label equals label i'm adding this to
the window and i'm going to set the image to equal my image that i created it's a photo
image if you do not have an image that you want to use you can simply just change the background color you
could say bg i don't know red oh then we need to place this so be sure
to do that label dot place and i'm going to place this in the top left corner that is where x
equals zero and y equals zero and then we should have a race car or whatever image you used and a red
background you can get rid of the background color if you prefer that's just if you don't have an image
to use you can set the background color just for a visual to show you where the label currently is
let's set some key bindings for this window and let's add them maybe here before we create the label and our image
so let's find the w key for up s for down a for left and d for right so we do that
with window dot bind and we pass in an event as well as a function name so we want to
tie the w key to a function and we'll call this move underscore up and then we will need
to define this so outside of the window let's define
move underscore up and this takes an event so we'll place that as a
parameter and to move our label up we're going to take label dot place
and we're going to place this at some new coordinates x equals the label's current position
relative to the window that it's in so that is label dot w info
underscore x all right so then for y it's similar
y equals label dot w info underscore y
but we're going to subtract maybe one all right so this is all we need
although this is only going to move up so i'm going to press w and our label our race car or whatever
image you used is going to move slowly up i'm going to increase this to 10 so the change is more drastic
so now our race car is drifting off into space let's find a few other keys s a
and d sad all right so s will be down move underscore down
a for left move left and d for right move
right we'll just copy what we have here and make a few changes let's begin with move down
the only thing we're going to change within here is in place of subtracting 10 from the y coordinate we're going to add
10 and with our race car oh i guess we have to define these so let's do that real
quick uh so we have left move left we're going to subtract
10 from the x coordinate and keep y the same
and then the same thing for move right move underscore right and this time we are
going to add 10 to x and y will stay the same
okay now with our image we can move up down right and then left
and y stop there we combine these to our arrow keys
so up is just up with a capital u down is down these are all capital by
the way left is left and then right is right
and now i can use my arrow keys to move this image
now for this part of the video i'm going to teach you guys how we can move an image on a canvas this time and not just
within a window but we'll need a window to begin with window equals tk followed by window.mainloop
and we're going to create a canvas canvas equals canvas we're adding this canvas to the window
and let's set a width and height for the width let's make this 500 and the height 500 as well
so this is an even square and we'll need to pack or place this canvas canvas.pack
should take care of that and let's run this and this is our canvas at this step we need to add an image to
our canvas and i have an image of a racecar that i want to add so i need to create a photo image from
this file so we can do that let's give this photo image a unique name i'm just going to
call this photo image to keep it simple photo image equals photo image and i can
list the file path or the file name since this image is within my project folder i
only have to list the file name and my file is called racecar.png
this next step we need to give our image a unique name the image that's being added to the canvas i'll call this
my image equals and we need to turn this photo image
into an image added to the canvas so we type in the name of the canvas canvas
dot create underscore image we first need to list the coordinates of
where we want to place this photo image so let's place this in the top left corner that is where
x is 0 and y 0 and we need to set the image of the image that we're creating
so we can do that with saying image equals the name of our photo image
and let's see what we have so far so this image is somewhat cut off in the
top left corner we can easily fix that by anchoring our image when we create it so let's at
the end add anchor equals northwest so that should fix that problem and we
now have our image that we want to use and to move our image we can set some key bindings
so we type in the name of the window dot bind and we pass in two arguments an event as
well as a function name let's tie pressing the w key to moving up
so the first argument is going to be w and the second is going to be a function name so let's say move
underscore up and let's find some other keys w for up s for down
a for left and d for right
we'll need to define these now so at the top outside of the window let's begin by defining move up
def move up this has an event as a parameter
and let's create the other definitions here
so i'm just going to rename these so we have move up move down move left
and move right okay now this next step
we can use the canvases move function to move an image a certain amount of pixels on the x-axis
and y-axis so let's begin with move up we type in the name of the canvas
dot and use the move function and this has three arguments the image that we want
to use and this image is called my image the one with the race car
the next argument is the amount of pixels we're moving this on the x-axis with up we can keep this the same
but on the y-axis let's say we want to move this up 10 pixels so that would be -10
and let's repeat the process for move down move left and move right for move down we're going to change
y to 10 for move left we'll keep y the same at zero but we're
going to subtract 10 and then move right
we are going to add 10 to our x's and that should be it so we can move up
down right left and if you want to bind these to some
arrow keys all we have to do is just change the event so we can bind these to our wsad keys
as well as up down left
and right and this time i'm going to use my arrow keys up down right and left
all right so that's a few of the basics of moving either widgets or images on a canvas or window if you
would like a copy of all this code for both examples i'll post both of them in the comments down below
but yeah that's the basics of moving widgets and images in python hey what's going on everybody
it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can create some simple 2d animations in python so sit
back relax and enjoy the show alright my fellow bros in this video
we're going to be animating an image on a canvas we're only going to be moving this image
up down left and right feel free to download an image that you want to use i'm just going to use this
ufo emoji that i found so we'll need two imports at the top from tk enter import
everything that's what we usually have we'll also need to import time as well
we'll need a window window equals tk followed by window.main loop we'll need a canvas i'm going to call
the canvas canvas canvas equals canvas we're adding the canvas to the window i'm going to create
something that's called a constant we're going to create a constant for the width and the height
of our canvas so a constant is a variable or value that you don't plan on
changing later at all and a common naming convention for a constant is that the name of the
constant is all uppercase so i want the width and the height of this canvas to be constants so for
the width this is going to be all uppercase it's not necessary to make it all uppercase but that's a common naming convention
for the width i'm going to set this to 500 and the height set to 500 as well
and for the width of this canvas i'm going to set the width to equal my constant which is 500
and the height to my constant height so the reason that i'm making constants
is that we'll be reusing these a lot later in this program so we might as well just declare them now and get it
over with so for the canvas we're adding this to the window we're setting the width to
our constant of width and the height to our constant of height and we need to follow this by packing
this or place canvas dot pack pack to make it simple so we should have a canvas on our window
now if you have an image that you want to use we're going to animate it i need to create a photo image from this
file it's a png file it's called ufo but yours is probably going to be named something different so
don't copy me exactly i need to create a photo image from this i'm going to call this photo underscore
image but name it whatever you want this equals photo image and i need to list the file
path or the file name since this file is within my project folder i only have to list the file name
and for me this is called ufo.png our next step is that we're going to
take our photo image and add this photo image to the canvas and we'll also give this image a unique
name i'm going to call this my image equals we're going to use the
canvases create image function so canvas dot create image there's a few arguments
that we need to pass in where we want this image to appear we need a set of coordinates if we want this to appear in the top
left corner that is where x is zero and y is zero for the image
we're going to set this equal to our photo image whatever you named this
and lastly we should anchor this i'm going to anchor this in the northwest corner to keep it simple
and we should have our image on our canvas in the top left corner and here is my ufo that's being piloted
by a green alien that's waving to me aliens are usually not that friendly unless they're abducting you our next
step is to create a while loop so we'll say wow true this will continue forever until we close out
of the program if you're looking at the code for a game this might say instead while running running will be a boolean
variable that contains either true or false so if this is true while the game is running
they're going to continue moving all of the characters on the screen and then if somebody pauses the game or
closes out of the game then they'll flip this running variable to false but to keep things simple we'll
just say wow true but that's something that you might see what we'll want to do is get the
coordinates of our image within the canvas and this will return a list of coordinates
so let's create a list called coordinates so coordinates equals canvas
and we can use the chords function to get the coordinates i guess that's short for coordinates and
we're getting the coordinates of my image so we'll pass this into this function
and then let's print this just to see what this returns we'll print coordinates
okay now to update the window after each cycle of this while loop we can use the update
function of our window so window.update will also have this thread sleep for let's say 0.01 seconds
so time dot sleep 0.01 one so here's a quick rundown of what we
have going on so far within this while loop we're going to first get the coordinates of where our image
is located we'll print the coordinates to the console window this part isn't required but it's going
to help us for learning purposes we'll update this window for any changes and then our thread
which is in charge of running the program is going to sleep for i believe that's a hundredth of a
second so when we run this our image is staying in place
and we know that our while loop is running because it's continuously printing the coordinates the first number is the x position
the second number is the y position and now we're going to give our image a speed
or velocity i like to call it velocity and in fact i'm going to give this image two velocities
one for how fast this image is moving on the x-axis and another for how fast it's moving on
the y axis so i'm going to create two variables one called x velocity
and i'm going to set this equal to one and y velocity
and i'll set this to one as well okay so what we need to do now is update
the position of our image so let's do that before we update our window so i'm going to type in the
name of the canvas and use the move function this move function takes three arguments
what you want to move i want to move my image my ufo and how far i want to move this image on
each axis each coordinate so what i want to do is update the
x velocity the x position of my image so i'm going to pass in my x velocity
variable and then y we'll just keep the same for now so we'll just say zero so after each iteration of this
while loop my ufo is going to move one pixel to the right and it's just going to go off into the
void forever and now if we replaced x velocity with zero
and for y we set this to our y velocity this image is now going to travel down
and it will continue into the void forever and then if we combine both of these together
we're going to move diagonally down and to the right so what if we want this image to bounce
off the walls we're going to add some if statements we're going to begin by just having this image bounce off the
left and right walls for now let's set y velocity to zero so that this image is only moving
left and right so before we move this image we'll add an if statement we're
going to check to see if the x position of our image is either greater than the width of the
canvas or if it's less than zero so we take our coordinates and we're going to get
the first element from this list so that is zero that is x the x value
if coordinates at element zero is greater than or equal to the width of this window and this is a
constant so we can just place that here if coordinates
well x within our coordinates is greater than or equal to width or coordinates at index
0 is less than 0 then we want to reverse the direction or flip the velocity
so we want to change our x velocity and make this a negative number one easy way to do that is that we can
take x velocity equals x velocity times negative one
or another way of writing this is just to say x velocity minus negative velocity now what ends up
happening is that when this image reaches the right border it's going to bounce back
however it only bounces back after it reaches the top left corner of the image we need
to factor in the width of the image as well so we're going to create two new variables and let's do this
right before the while loop we'll want to determine what the height and the width are for our photo image
that we have so this is what we're going to write let's call these two values image underscore width and
image underscore height so we need to determine what the width
and the height is for our photo image and there is a function to do that type in the name of the photo image dot
and there is a width function and the same thing for height
photo image dot height and then we can reuse these so i'm just
going to add one line to the sift statement if the x position of our image is greater
uh greater than or equal to the width of our window minus the width of our image and i'm
just going to put these within parentheses just to keep these more organized and what ends up happening now is that
when the right portion of our image hits the right wall it's going to bounce off
and let's do the same thing for our y velocity we're going to replace coordinates at
index 0 with 1 and change that here as well replace with with height
and this is image underscore height and we're going to change the y velocity
this time
and when we move this image let's also add the y velocity
and now our image is just going to bounce off the walls forever but it's kind of predictable since we
set x and y to equal one now let's change the speeds to kind of spice things up
let's say for the x velocity this is three and y velocity this is now two this is going to go in a completely
different direction so you can mess with the speeds however you want so
guys how about we add a background image to this well because we can i'm going to reuse this image of space
from my java video on this same topic i need to create a photo image from this
and i'm going to copy what we did for our normal image that we were moving and animating
so this is called space.png well that's the name of my file and i'm going to give this image a
different name maybe i'll call this background underscore photo
and then i'm going to add this photo to the canvas and i'm going to call this a different
name i'll just call this background all right
so our window should have a background now and then our image moves on top of the
background so make sure you add and create the background before you add any other images
otherwise the background might overlap your image alright so that's the basics of some
simple animations in python if you want to copy all this code i'll post all of this in the comments down below
but yeah that's the basics of some animations in python hey what's going on everybody it's your
bro here hope you're doing well and in this video i'm going to teach you guys how we can animate multiple objects in
python so sit back relax and enjoy the show
welcome back my fellow bros in this video we're going to be animating multiple objects within a window
more specifically we'll animate some circles and each of these circles will have their own characteristics
speeds and directions so we'll need two imports to begin from ck enter import everything we'll
also be importing everything from the time module as well we'll need a window window equals tk
followed by window.main loop i'm going to create two constants one for the width and one for the height
let's set the width equal to 500 and the height equal to 500 as well we'll create a canvas and
we'll be animating the circles that we're going to create on the canvas so let's create a canvas
canvas equals canvas we're going to be adding the canvas to the window and we'll set the width of
our canvas equal to our constant width which is 500 and our height equal to our
constant of height which is also 500 and we will add this canvas by using the pack function
canvas.pack here's our canvas and we're going to be creating multiple circles
let's pretend that they're all different sports balls like a tennis ball baseball volleyball bowling ball
they'll all be bouncing off of the borders and once each of them encounters a border they will change direction
since we're going to be creating multiple objects i think it's best if we do this with another class
so let's create another class i'm going to go to file new python file and let's call this
class ball and click python file and we need to define
this class class ball and we also need a constructor for this
ball class we can create one with def two underscores i-n-i-t two underscores again
and we can set up the parameters of what we want to receive if we were to create a ball object so let's pretend that
we're going to be creating a volleyball to begin with so let's call this ball volley
underscore ball equals ball and we'll pass in some arguments so
let's set up the parameters first what do we want to receive one we want to receive our canvas so that we can actually draw
this oval we can draw this ball we should also have an x and y position
a diameter x velocity y velocity
and a color all right so when we create a ball like a volleyball
we're going to pass in whatever the parameters require so we need a canvas
x y a diameter an x velocity y velocity and a color so within the
constructor for the ball we're passing in our canvas it's kind of like what we do with widgets
we're specifying what we're going to be adding this widget to we're going to be adding this ball to
our canvas we also need x y and a diameter let's make this simple by setting x and y to both zero
for the diameter let's set this to maybe 100 and we also need an x velocity and y
velocity let's set this both to one and a color so let's pass in a string
like white let's head back to our ball class and finish assigning all of these arguments that we're going
to receive the first step is that we'll say self dot canvas equals
the canvas that we receive when it's passed to us as an argument
our next step is to draw this oval draw this ball and we'll say self dot image
equals canvas dot create underscore oval and with creating ovals
we can pass in x y and with circles the diameter is equal
for both the width and the height so we'll pass in our diameter twice
and lastly a fill color and we'll say this is equal to the color
that we receive which is white we're going to set the x velocity and
the y velocity this is related to the direction that it's initially going to head in
so self dot x velocity equals the x velocity that we receive
and we'll do the same thing for y velocity self.y velocity equals y velocity
now since this is in another class we need to import this class
from ball import everything and you can see that this red
underline went away so let's see what happens now we have our volleyball but it's not
currently moving so that's the next step so let's create a function within the ball class called move that
we can call upon so we'll do this after the constructor cef
move and this will take self as an argument
the first thing that we should do is get the coordinates so we'll say coordinates and this is a
list coordinates equals self dot canvas dot
c o o rds and we'll pass in self dot image
and we will print these coordinates just to see what's here
all right now we'll create a while loop within our main class so let's add that near the end and we'll
just say while true so while this is running
let's move our volleyball so volleyball dot move so this will call the move
function of our volleyball and then we will update the window
window dot update so that this refreshes and we will sleep for maybe a hundredth
of a second time dot sleep 0.01 but you can put
whatever you want here so this is going to at first just print the coordinates of this ball
so it's not currently moving and this time with our list we have four coordinates zero zero that's the
top left corner and 100 100 that's the bottom right corner so this time we have four
coordinates that we have to deal with the top left corner as well as the bottom right corner our next step is that we should move
this image self dot canvas dot move
what object are we going to move we're going to move self dot image and in what directions
self.x velocity as well as self dot y velocity now
our ball is going to move across the window and it right now it's displaying all of the coordinates we don't have any bounds set up so it's
just going to continue into the void forever so we should set up some if statements to check to see if one of the
borders touches one of the walls of the window if so it's going to change direction so let's check to see
if the left or right side of our ball touches one of the left or right borders so let's write an if statement if
and then let's take a look at these coordinates if coordinates at index 2
that is this one 0 1 2. so this is the bottom right corner
with these two sets of coordinates if coordinates at index 2 is greater than or equal to
i'm going to put these within parentheses self dot canvas and we need to get the width
of the canvas one way which we can do that is to use the w info underscore with function
so this is going to get the width of the canvas and then let's add one more thing
or coordinates at index zero is less than zero
so if this ball touches the left or right border we want to change direction so we can
flip the x velocity self.x velocity equals negative self x
velocity and let's do the same thing for the top and bottom borders so let's copy what we have
and we'll replace coordinates at index two with three and we'll also replace
w info underscore width with height and coordinates at index one
change self dot x velocity with y velocity same thing here as well alright and
that should be everything let's try it so let's see if this ball actually
bounces off the borders which it does pretty cool so that's everything we need to do within our ball
class now if we need to create multiple balls we can just construct them so let's say this time we would like a
tennis ball i'm going to name this volleyball as tennis ball and
let's make the diameter smaller like five but we'll make this a lot faster like
for the velocity let's say four and three and the color let's make this yellow and we also need
to call the move function of this tennis ball so within the while loop tennis ball dot move and then we should
also have a tennis ball moving across the screen in a different direction now technically we don't need to print the coordinates
but i tend to do that just for teaching purposes to better demonstrate all of this
now our ball class is acting as a blueprint for how balls should be created and the
behavior that they exhibit and if we need to create a ball we can just come up with a name for the ball
and call the ball constructor to take care of that for us kind of like what we've been doing with widgets so all we need to do to create
another ball is come up with a unique name for the ball and instantiate it using our ball class that we created so this
time let's create a basketball i'll rename this as basketball
and we'll pass in different arguments based on how we want to customize this unique ball so for the diameter
let's say this is now 125 and the x and y velocity let's set this to something very fast like
eight and seven and with the color let's change this to orange and make sure you also call the move
function so basketball dot move and we should
have a basketball moving across the screen all right everybody so that's the basics
of animating multiple objects in python if you want a copy of all this code i'll post all of this in the comments down below
but yeah that's how to animate multiple objects in python
hey what's going on everybody it's ibro here hope you're doing well and in this video i'm going to teach you guys how we can create a clock program in python so
sit back relax and enjoy the show all right my fellow bros in this video
we're going to be creating a clock gui program so we'll need a few imports from tk enter import everything
and from time import everything as well we'll need a window window equals tk
followed by window.main loop and in this program we're going to be creating three separate labels
one for the time another for the day of the week and another for the date so let's begin with just displaying the
time and work on the day of the week and the date later so let's create a label for the time
called time label equals label we're adding this to the window
and let's set the font because we can i'm going to choose maybe ariel and then a size of 50 so
that this is somewhat large i'm going to change the foreground color that is the font color
and i will pick a hex value of green so that is 0 0 f 0 0 but feel free to pick whatever
color you want and i'm also going to set the background color and you can pick a hex value or a
color name i'm just going to say black and then i'm going to pack this label
time label dot pack now we're going to call a function and
we'll call this update and we'll define what this does after every second has passed
we will use a recursive function to keep on updating the time every one second or so so let's
define what this function does def update
there is a function within the time module called strf time which we can use to return the current
time and format it however we want so we're going to actually place this within a string variable and we'll call
this time string and this function is strf time i'm actually going to go to
python's website just to give you an example of how this works here we are on python's website and this
is the strf time function and this converts a tuple representing a time as returned by
gm time or local time to a string as specified by the format arguments
so when we call this function we can pass in directives as arguments based on what we
want to display if we want to display the current time there is a few directives that we can
pass in so let's say that we want a 12 hour clock as represented by a decimal number
between 1 and 12 well we would pass in percent i as an argument if we want the minutes
that would be right here percent m and if we want the seconds that is percent s so we're going to pass in
these directives as if they are arguments so within this function we'll pass in those format
specifiers or directives so i want percent i followed by
percent m and percent s alright uh but these also have to be
within quotes so don't forget that because i just did okay this will display the current time
oh then we also have to update our time label so time label dot config
text equals our time string because remember that this returns a string of text
text equals time string so this will display the current time and right now it is six in the morning
or so however we just get one long jumbled number so it would be a good idea if we
separated some of these numbers so within our strf time function i'm just going to add some colons to
separate these values and this will display the current time
it is currently 6 46 in the morning let's add am or pm to the end of this
so the directive for that is percent lowercase p
6 46 am now how do we update this label every one second to reflect the current
time well that's a good question and i'm glad you asked it so we're going to use the time labels after function
we pass in a delay and then a function that we want to call after that delay so let's say we want to
call this function update every 1000 milliseconds or one second so we'll pass in the delay
as an argument 1000 milliseconds and the function that we want to call and we're going to perform what is known
as a recursive function we're going to call a function within itself so after 1000 seconds
we're going to call update again and it's going to repeat the process it's going to return the time
and format that time and update our label with the new time so what ends
up happening now is that our clock is going to update every 1000 milliseconds
now let's add a few other labels let's say the day of the week i'm going to copy what we have here and
let's rename this as day label
but i probably don't want this to be the same size for the font let's say ink free because i like that font and a
size of maybe 25 and i'll get rid of the coloring
it's the same process as before really so let's replace
time string with day string
the directive for strf time to display the day of the week
is percent a and we're going to replace time label
with day label text equals day string
and this will display the day of the week and it is currently wednesday and if we want to display
the current date we can create a label and we'll call this date label
and i'll make the font slightly bigger maybe 30. we'll copy what we have for our day
string and rename this as date string
so we have a few options for the date i want to display the name of the month the day and then
the year so that would be percent capital b
percent lowercase d i'm going to add a comma to separate the day and the year
and percent capital y and then i want to set the text of my
date label to my date string so that this will now display the current date there's just
one quick change that i think we should make right now we have three different labels a time label a day label
and a date label and right now we're using the after function of the time label
so since we have all of these different labels i think we should replace time label with our window because our window has
an after function as well so that after 1000 milliseconds has passed we can update the time the day of the
week and the date all right so that's the basics of creating a simple clock
program in python if you want a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of
creating a clock in python hey what's going on everybody it's you bro hope you're doing well
and in this video i'm going to show you all how we can send an email using python so sit back relax and enjoy the show
oh a quick note for you all you're going to need a gmail account to sign into as well as your username and password so
once you have those set you're ready to begin all right let's begin by importing the simple mail
transfer protocol library we'll need a couple variables to hold strings let's say we have a sender a receiver
a password a subject for your email as well as
a body for the email okay sender is going to be you sending the email so enter your email in
here i'm just going to make up one you at gmail.com actually sender would be better i would
say let me change that sender at gmail.com let's say we have a receiver this is who
you're going to send the email to receiver gmail.com
don't actually enter in these emails use your owner the person that you intend to send the email to for your test
because these will probably not work i'm assuming then enter the password for your gmail
account so let's say password123 and a subject
uh let's say python email test and a body what do you want to say
within your email i wrote an email
okay so that should be good so remember that you're going to want to change these to your actual
gmail account and you'll want to send it to a valid email address too and make sure that you use your password
for your gmail account okay now we're going to create a header for our email and the syntax on this is
a little strange we're going to say message f and then triple quotes so what this
triple quotes is is that a triple quote string can span multiple lines of text so the first
thing we'll enter is from within our header from and then since we're using an f-string we can
insert a variable at a given location when we insert a pair of these curly braces so from
will be sender the next line to colon
receiver then the next line subject colon
subject this will be the title of the email then i'm going to add a new line and then insert the body
and if you want you can give yourself a name when you send this email let's say maybe snoop dogg and if
there's somebody you want to send the email to and give them a name you can say like nicholas
cage but these aren't necessary okay so we have our header completed let
me just add a note that this is our header okay we're going to create a server
object server equals smtplib.smtp
there are two arguments the first is smtp
the other argument is the port number and that is going to be 587 that is the default mail submission
port 587 now we're going to take our server object and start tls transport layer security
okay now we need to log in so server dot login we will pass in
our sender email that's us as well as our password
password and let's print
logged in we'll eventually place all this within a
try and accept block later all right and then to send an email type
server dot send mail and we pass in our self sender
receiver and our message sender comma receiver
comma message and let's print a confirmation print email has
been sent now if you were to run this program you may encounter this error smtp
authentication error that either means your username password combination was not correct or
you need to turn on the less secure app access on your gmail account which you can find here however i would
recommend turning that back off when you're done with this program just because your account will be less secure and i'm
not liable if you get hacked hey you know what let's place this code within a try block we will try
all of this code and then if we encounter this exception we can catch and handle
it properly so we will try these four lines of code and we will handle
our exception of smt lib dot smtp authentication error
that means we could not sign in so let's print unable to sign in
so i'm going to run this one more time and instead of getting that ugly error we should get a simple message that says
unable to sign in once you have the proper username password combination for your gmail account
and if you need to set less secure app access to on but make sure that you turn it back off
when you're done with this you should be able to send an email let's try it logged in email has been
sent here is a snapshot of the email that i received i blurred out my actual email because i
don't want it public because some of you guys are weird so we have our sender our receiver and i gave myself a
nickname of snoop dogg that's why it says snoop to nicholas the receiver but you don't
actually need a name for these as long as you have the sender and receiver fields filled in you should be good
we have our subject python email test as well as our body i wrote an email
well everybody that's how to write and send a simple email using python if you would like a copy of this code i will
post this to the comment section down below but yeah that's how to send a simple email using python
hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to show you all how we can run a python file using
command prompt so sit back relax and enjoy the show
hey y'all in today's video i'm going to show you all how we can run a python file with command prompt
so first we'll need a script to work with let's just make a very simple program let's say print hello world and then
maybe we will ask for some user input name equals input
what's your name and then at the end we will print the word hello
plus the user's name okay so let's save this to a place that will
remember perhaps my desktop now to save this file to a separate location go to
file save as you can pick a name for this python file then to directory click these three dots
and pick a location you want to save this to to make this easy i'm going to save this python file to my desktop
and then click ok so the name of this python file of mine is hello underscore world dot py then
click ok now our second step is to open command prompt to open command prompt just
search for cmd if you're using mac i believe it's terminal step number three is that we need to
navigate to the directory that contains our python file i saved this python file to my desktop
so if you right click on your file and go to location you can just copy this address
now within command prompt type cd to change directory space and then paste that directory
that contains your python file hit enter and for the last step we need to invoke
the python interpreter by typing python space and then
the name of the script and the name of my script is hello underscore world dot p y hit enter to
run the script hello world what is your name bro hello bro
so that is how to run a python file with command prompt i will post all of these notes to the comments section down below
and well yeah that's how to run a python file with command prompt it's you bro hope you're all doing well
and in this video i'm going to show you all how we can use pip for python to download packages and modules so sit
back relax and enjoy the show alright people pip for python pip is a
package manager for packages and modules from the python package index if you're
using python version 3.4 or above pip should already be installed
if you're using a python version below 3.4 one option is that you can always update
your version of python just click download open when done
go to customize installation make sure that pip is checked go to next and add
python to environment variables then install now to use pip open up command prompt
and type pip for a help menu all sorts of different general options and commands will appear
if you need to check your version of pip type this command and here's a cheat sheet that i wrote
so to check the current version of pip type pip dash dash version enter
and currently the version that i'm using is 21 if you need to upgrade pip use this
command pip install dash dash up
grade pip mine should be the latest version yeah requirement already satisfied and
if you need a list of installed packages type pip list
so here's all of the packages that i currently have installed some of these you might recognize like
numpy pie game pie installer those are just a few to check to see if any of your
packages are outdated type pip list
dash dash outdated and this might take a second here are
four packages that are outdated on my computer babel pi game pi tz and setup tools
if you need to upgrade one of your packages type pip install the name of the package let's
say that i would like to update pygame then dash dash upgrade
i just realized that in my notes i'm missing updated package so i just added that here now you can see that pie game has
successfully updated and let's just check to see if it has by using pip list outdated pip
list dash dash outdated and pi game is no longer in here so it
is up to date and if you would like to install a package type hip install and the name of the package you
would like to download let's say i would like to download pandas pip install the name of the package in this
case pandas two valley boring minutes later and it's
done so i should now have pandas installed and let me check pip list
and here it is i have successfully downloaded the package of pandas so those are a few commands for pip and
if you're interested in downloading more packages head to python's package index on second thought i should probably show
you all where that is python's package index is located at pipi.org
and you can do a search for all sorts of different projects and packages so everybody that is pip4 python i will
post my notes in the comments section down below and well yeah that's how to use pip for
python hey what's going on everybody it's bro hope you're doing well and in this video i'm going to show you
all how we can convert a python file to an executable so sit back relax and enjoy the show
here's a quick disclaimer before we begin windows defender and other anti-virus programs may prevent your
executable from running but if you head to the settings section of your anti-virus you can disable that so that
your python file can run also please be sure that pip and pi installer are both installed and up to
date i have a separate video on that if you're interested now the program that i'm going to be converting to an
executable has a gui portion to it i created a clock program in a previous video
so i'm going to turn this clock program into an executable now i recommend creating a new folder on
your desktop just because this process is normally somewhat messy so we'll create a folder to contain it all
now copy any relevant python files and or images and paste them to within this folder if you have an image that
you would like to set as an icon for your executable i recommend moving that to the same folder as well our next step is to open
command prompt and we need to change the directory of command prompt so that it's pointing to
that folder that contains our python file so on your python file right click on it go to properties and copy
this location and in command prompt to change directory type
cd space and then paste that location now here's the cheat code to convert a python file to an executable
make sure that pi installer and pip are installed and both up to date so type pi installer
dash capital f to make all of this one file if you need the terminal window in your
program then omit this next part since i'm running a gui application i do not need that terminal window
so to remove that window type dash w if you have an icon that you want to set
type dash i and the name of your icon however it should be an ico file
so if you have some other image that you would like to convert to an ico file here's how if you need to convert an
image to an ico file you can just google convert to ico but one website that i commonly use
is icoconvert.com just pick a file to upload so choose file i'm going to convert this
png file of an alarm clock upload it there is a bunch of different settings you can use
convert ico and then download my icon and once your ico file is downloaded i
will drag and drop it to my folder and i will rename this let's rename this as
icon dot ico and here's that cheat code one more time pi installer dash f
dash w if you do not need the terminal window dash i if you would like to add an icon
the name of your icon it should be an ico file followed by the name of the python file
and mine is named clock.p.y then hit enter
alright looks like building our executable has completed successfully so open that folder back up
your executable is located within this dist folder i would recommend just dragging and dropping it to your desktop
and we can get rid of this old folder but close out a command prompt and by
clicking on this executable this executable will now run my python program well everyone that is how to convert a
python file to an exe file i will post my notes to the comment section down below
and well yeah that's how to convert a python file to an executable what's going on everybody it's you bro
hope you're doing well and in this video i'm going to show you all how we can create a basic calculator using python so
sit back relax and enjoy the show let's create a calculator after
importing tkinter we'll need to define three separate functions our first function will be named
button press and there is one parameter which we will call num we're not going
to fill this in quite yet we'll get back to it later we'll use pass as a placeholder we'll also need an
equals function to calculate our expression and a function to clear our calculator
okay that's it for our three functions let's create a window window equals tk and at the end of our
program we'll write window.mainloop let's set a title window
dot title calculator programs good but make sure you spell
title right and let's set a geometry of
500 500 should be decent now we're going to create a string named
equation text equals a set of quotes
this will effectively be empty for the time being and we'll need to create a string var
and i will call this equation label equals string
var let's create a label label equals label we're adding our
label to our window i will set our text variable equal to our equation label
you can pick a font if you wish
i'll set the background color equal to white
a width of 24 and a height of two
and we need to finish this by using label dot pack and we should have a blank label within
our calculator this will display our numbers that we're entering in or our expression
okay this is the tedious part we have to create all of the buttons and i think we should place these all within a frame
frame equals frame we're adding our frame to our window frame dot pack
now let's create button one we'll do some copying and pasting later so it's not as tedious so button one
equals button we're adding our button to our frame i'll set the text equal to 1
the height equal to 4 and the width equal to 9 and a font size
of 35 okay we'll need a command command
equals i'll write a lambda function here lambda we will call button press
i think i'm going to put this on the next line just so it's easier to read button press and we will pass in the
number one and we need to add our button to our frame
button one dot grid and i'm going to set a row equal to zero
and a column equal to zero and let's just test it
okay let's add the other buttons i'm going to copy and paste everything that we have for button one
and change button one to button two set the text equal to two pass into
to button press and for the row and column i'm going to set the column equal to one
but keep row the same okay button three
it's gonna be the same process really so text equals three button press three row zero column two
and button four text equals four button press
four column actually let's set this to row one
column zero and i need to change that too
okay let's just double check this
okay button five so button five text equals five
button press five and let's set column equal to one
okay number six i told you all this is going to be tedious
okay so row one column two
button seven
okay so row two column two
actually let's change that to column zero much better okay
button eight eight eight eight eight
row two column one number nine
row two column two
and lastly zero
so button zero text equals zero button press pass in
zero and this will be row three column
zero okay not too bad now let's fill in some of
the symbols so we need plus
i'm just going to rename this as plus
the text will equal the plus sign put that within quotes
and button press will be plus oh and we should probably put this in a
row and column so let's say row 0 column three
so it should be on the right hand side here okay we need minus
let's change plus to minus
and place this at row one column three
we need multiply
that is an asterisk
row two column three and divide
that is a forward slash
row three column three
i promise we're near the end of creating these buttons we'll need an equal sign
let's say equal equal text
is the equal sign and our command is going to be
equals the function and this will be row 3 column 2.
we need a decimal
let's change the text to a decimal
row three column one
okay and lastly we just need a clear button let's put this at the bottom
so clear clear let's set the text equal to the word
clear and the command will be our clear
function and i think i'm going to pack this at the end
but let's change frame to window okay let's check out all these buttons
okay not too bad i think i'm going to change the width on our clear button so it's a little bit wider let's change the width to 12.
that's a little bit better okay let's fill in some of these functions let's start with button press we're
going to state global equation text then our equation text
is equal to equation text plus we're converting whatever number or
symbol that we receive to a string and our equation
label which is a string var will be set to our equation text
and let's test this so we can type in any combination of
numbers or symbols okay let's work on our equals
function next so let's say global equation
text total equals
eval now eval will parse the expression that we pass in
equation text
and our equation label will be set to whatever our total is
and if we want to reuse our total let's set our equation text
equal to total 2 plus 2 equals four minus three equals one
times five equals five divided by two equals two point five now what if we
divide by zero well we'll run into that ugly zero division error
so let's write our code within a try and accept block so i'm going to indent some of this
and let's write try all of this code and we will catch a zero division error
exception so accept zero division error
and i will set our equation label set
let's say arithmetic error equation text
equals a set of quotes okay so we should be able to catch this exception now
five divided by zero equals arithmetic error now what if we have a syntax here
like we type in just a bunch of symbols and hit equals we'll probably want to catch the syntax
error as well so let's write an additional accept block before zero division error or after i guess it
doesn't matter accept syntax
error let's change arithmetic to syntax and we can keep equation text the
same so now our program won't crash if we type in a bunch of symbols
syntax error now let's work on the clear button
so that is within the clear function
so we will set global equation text
equation label dot set to a set of quotes to
effectively clear it and our equation
text equal to a set of quotes as well and that should be it for this program
let's run this one last time let's say 3.14 times
2.1 equals 6.594 divided by 2.1
equals 3.14 minus one i'm just making up numbers here plus ten equals twelve point one four
and let's clear this and start again one plus two plus three plus four equals ten
i think that's good enough all right everybody so that's how to create a basic calculator in python i will post all of
my code in the comments section down below if you would like a copy for yourself but yeah that's how to create a basic
calculator using python hey what's going on everybody it's your bro hope you're doing well and in this
video i'm going to explain how we can build a basic text editor program in python so sit back relax and enjoy the show
okay people let's create a text editor here's all the different imports that you'll need and we'll begin by defining
all of the different functions that we'll need so let's say we have a change color function to change the color
of our font and for all of these functions i'm going to write pass as a placeholder
so we have change font and this function will accept a varying
amount of arguments so we'll use that args keyword
we will need to open a file new file
open file
save file
cut copy
paste yeah there's a lot of functions here
about this is for an about section
and lastly quit so how many do we have one two three
four five six seven eight nine ten ten functions let's create the
main window that we're gonna work with window equals tk and at the very end window.main
loop okay so let's create a title for this window window
title notepad program i guess or maybe text editor
program would be more appropriate text editor program
okay and we will need a file to work with and i'll declare that now file equals none
we'll need a window width and height window with equals 500 is good and a
height okay so let's attempt to center this
window because right now it just appears to the side so our next step is to get the screen
width equals window dot w
info screen width and i'll copy this for screen height
okay so we need to figure out how much we're going to move our window on the x and y axis so let's say x
equals screen width divided by 2
minus window width divided by
two and we're going to cast all of this to an end so add an inch cast around this
let's copy this do the same thing for y except this will be screen height
and window height
okay let's set the geometry for the window window geometry i'm going to use a
string format method so let's say
these will be placeholders for our values
so we have window width for the first value
window height x and y so this should be near the
middle cool
we're going to create a string var variable to hold the font name font name
equals string var and pass in your window and you can set
this to what do you want your default font to be so let's say font name dot set and then pick a font
i'll use ariel i think let's create a font size string bar as
well
we're going to add this to the window and we can set a default size
perhaps 25. okay let's create a text area
text area equals text we're adding this to the window i'm
going to set a font equal to font name dot get the name of the font that
we want to use will be the font that we set within our font name string var so now we'll use a size
of font size dot get font size dot get
okay now we need a scroll bar scroll bar equals
scroll bar writing this to our text area so pass
that in and i'm going to configure my window
using grid row configure this will allow our text area to expand
but we're going to set a weight equal to 1 so that it doesn't back expand and then we need column configure
okay and text area dot grid
i'm going to use the sticky keyword and this will stick north plus east
plus south plus west so my text area should take most of the
window this is some sample text
hooray so it goes down to the next line once it runs out of room on one line unless you resize the window which is
exactly what we wanted let's create a scroll bar while we
already created it we just have to add a few details to it
so that will be near the bottom and why don't we say scroll
bar dot pack side equals right
fill equals y and then we just have to configure our
text area with the scroll bar so text area dot config
y scroll command equals scroll bar
dot set so that should work but let's test it to be sure okay i'm just
going to type a bunch of f's okay look at that our scroll bar works
cool okay let's head to this portion and we'll create a bunch of buttons well
a button an option menu and a spin box for the font color the size and the font style
so i'm going to place all of these different widgets within a frame frame equals frame add it to the window
and then i'm going to use frame dot grid okay let's create a color button to
change the fonts color color button equals button
i'll add my button to my frame i'll set the text of the button equal to
color and i will associate a command of change color which we have already
defined at the top where is it at the top here change color
and then actually that's it for this portion so then we need to add this button color
button dot grid i'll set the row equal to zero and the column equal to
zero so let's be sure that this appears make sure you spell grid right
okay and we have a color button but this button doesn't do anything so let's head to the change color
function within the change color function we're going to say color
equals color chooser dot ask color
and you can set a title to pick a color or
else you don't technically need a title and then text area
dot config oh i should probably print this color so let me do that um i'm just gonna
explain something here so this color is going to be i believe a tuple so let's print it so let's say that i
would like white okay so we have a tuple we just
need one of these values not both of them so i'm going to say
text area dot config foreground equals our color but we do
not want to assign a tuple to our color we just need one of these values so let's say i would like this
hex value so i'm going to say at index 1
and let's try it color perhaps i would like my text pink for
some reason so we're going with pink this is some text i suppose
and we can change this back too by using this color button now i would like blue and we have blue text okay so that
is the change color function i'm going to minimize this because we do not need it anymore
okay we're going to change the font next so head to the portion of our code right
after the color button and we'll create an option menu to list all of the different fonts
available to us so let's say font box equals option
menu we're adding this to our frame we need to set a variable a string var
so that will be our font name that we declared up here now here's a trick to add all of the
fonts as options to our option menu we can use the unpacking operator which
is an asterisk followed by font dot families
and then call this function so this will return all of the different fonts available to
us and we just need to set a command and when we use our option menu we'll
call change font and we need to add our font box to our grid
row equals zero and column equals one so this should be on the
right hand side of our color button yeah it's going to look something like that and you can see the default is
arial that we set and we can change it to something else like
comic sans or whatever uh however it's not going to change it quite yet so that'll be the change font
function before we fill in the change font function there's another widget that's
going to share the same command of change font so we should create that next so our next widget is a spin box which i
will name sizebox this will be in charge of increasing or decreasing the font
so size box equals spin box we're adding the spin box to our frame
and we'll set a range so from underscore you have to add that underscore it's kind of weird
this is the range of our spin box for the font size from 1 to let's say 100
the text variable will be font size
and our command equals change font so when
we use our spin box and call this command of change font it's going to
pass in our font size as an argument whereas with option menu it doesn't pass any arguments that's why
with our change font function we're accepting a varying amount of arguments because one's going to pass in an
argument and the other isn't and we just need to add our spin box
so that would be size box dot grid row equals zero
and column equals two so we should have a spin box right on
the bottom and it's set to 25 that was our default for our font size string var which we set as
the text variable okay so we can fill in this function of change font now
which will apply both to our option menu and our spin box so that is all the way at the top within
the change font function we're going to take our text area dot config set
the font equal to font name dot get
and the size will be size box dot get and that's it for this function
i'll minimize it for now and let's test it this is some sample text
hey how you doing good looking okay so let's change
the font uh let's pick comic sans or whatever you want
and we can increase or decrease the size and we can change the color how about
red this time all right nice now let's add a menu bar
at the top so we can save this file or open a file or create a new file and
some other stuff on second thought i'm going to move these two last lines of code
to this section here where we create our scroll bar just so that it's more organized
okay so at the bottom let's create various drop-down menus so we'll need a
menu bar to begin with so let's say menu bar
equals menu we're adding this to our window make sure that's capital by the way
and window dot config menu equals menu bar
so we'll create a file menu edit menu and a help menu so let's begin with the file
menu to add to the menu bar file menu equals menu we're adding this to our
menu bar and set a tear off equal to zero
we'll need a cascade for it to actually be a drop down menu so that will be menu bar
dot add cascade
label equals file comma menu equals
file menu let's see if anything appears yet yep so
we have a file menu but there's nothing to drop down yet
so we need some options well commands technically file menu
dot add command
label equals new
and the command will equal our new file function
actually i'll put these together okay so let's copy this and paste it we have open
the command will be open file
we have save the command will be save
file and i'll add a separator
file menu dot add separator and lastly
we will have exit command quit
okay let me show you what this looks like so here's our drop down menu
that separator is this bold line going across so if i was to remove this then we
wouldn't have that bolt line you can keep it in or get rid of it do whatever you want
and this is the tear off so i'm going to remove the tear off
and you get this like tear off line at the top i guess it's the default i usually don't like it so i set tear
off equal to zero so that is our file menu let's work on a edit menu
edit menu equals menu menu
bar make sure that's capital two
tare off equals zero we'll need a cascade menu bar
dot add cascade
label equals
edit menu equals edit
menu edit menu dot add
command label equals cut to cut some text
command equals copy actually that's cut my bad
okay next is copy so let's copy this and paste it
cut copy we have paste
command paste all right let's take a look
oh make sure you spell label right okay there we go okay so we can cut
copy and paste and lastly we should have a help menu
help menu equals menu menu
bar tear off equals zero
i think i'll copy this for my cascade so menu bar dot add cascade
help menu equals help menu
what we'll be doing for a command is that we'll be creating an about section that will bring up a
pop-up window if you need to display any like help information or anything
uh so let's say about and the command will be about okay let's take a look
so we have help and we'll have an about section that will tell you more about this program
but we need to work on some of these functions let's head to the quit function
this one's fairly easy this is found within the file menu window dot destroy that will close out
of the window so go to file then exit to exit the
program we don't need it anymore so let's minimize this okay let's go to the about function
let's bring up a message box show info this first argument is the title so
let's say about this program and the text will be whatever you want
to tell the user about this program this is a program written
by you okay so we should have a pop-up window
when you go to help then about about this program this is a program written by you the next function is the
paste function so we can paste some text text area dot event
generate and the event is going to be within quotes and double angle brackets
paste let's copy this and change paste to copy
and then cut
okay so we should be able to cut copy and paste
hey how's it hanging okay
let's highlight this edit copy let's move down to the next line
and paste and we should be able to cut as well edit cut nice
head to the new file function and we'll set the title of our window to
maybe untitled until we save something so untitled
and i need to delete any text within our text area text area dot delete and we need to set
a range so this has to be a floating point number the first character until the end
let's try it so i'll write some sample
text and we are going to go to file new that changed the title and it deleted
our text so that is the new file function let's work on open file we are now
within the open file function and we'll say file equals ask open
file name so we have a default extension if you would like one
default i think i spelled that wrong extension
equals let's say a txt file
comma what are the accepted file types
i'll set this equal to all files
comma and then we need asterisk dot asterisk for all file types
as well as text documents so these are what is accepted when we
look for a file so we have either all files or all text documents text
documents comma
asterisk dot txt
okay so then let's try some code
we'll set our window title equal to os dot path
dot base name of our file so that we will change the title of the
window to match whatever the file is that we opened
then let's take our text area delete what's currently here
from one until the end take our file use the open function
open our file and read it so pass in our
text area dot insert
beginning at index of 1.0
file dot read that you can catch any exceptions to
i'll just write accept exception but it's better to name specific exceptions i'll just print
couldn't read file and we should close our file at the
end within a finally block finally file dot close
we'll need a sample file to read so i'm going to create a new file on my desktop
i'll call this test.txt and let's write something whoa
you can actually read this
awesome okay let's save close out of it add run our program
file open test.txt open whoa you can actually read this
awesome nice so we know that the open function is working if we need to create a new file just go
to file new and that will delete our old text so lastly we have save file
underneath the save file function file equals file dialog
dot ask save as file name so this will be the default
name for the file but you can change that initial file equals
let's say untitled dot
you txt set a default extension default extension equals let's say txt
file types equals
all files comma then asterisk dot asterisk
for all file types
and any text documents text documents
asterisk dot txt
okay if file is none that's if they close out of our
file dialog we'll just return
else so we'll set the window title first
window title os dot path dot base name
file file equals open open
our file and write
file dot right take our text area and get
the text from index one through the end
catch any exceptions it's better to name them instead of just doing a general accept exception
but i'm just going to print couldn't save file
and finally close our file file dot close all right so
let's test it so i'm going to change the font i wonder if impact is in here
yes it is i'll change the font size maybe 30 and i'll pick a color
how about this swamp green color okay so write something perhaps some lyrics to a
song you like
i should probably test copying and pasting edit copy
edit paste nice
all right let's actually try and save this now i'll go to file save the default file name is
untitled because we set it to that i'll say all star
lyrics and save now i should be able to open
this so i'm going to go to my desktop here's that text file i'm going to open it and here are the
lyrics that i wrote within my text editor and let's try and read this so let's go
to file open find your text document open and would you look at that my
lyrics are still here however this program doesn't save the font so i thought of a fun last minute
project that we can do we can actually use our text editor to write a python file much like what we do with pycharm
so let's write a program using our text editor program it'll be just a simple program let's
print hello world and ask for some user input
let's say name equals input
what's your name
and we will print hello plus our name
variable and you can change the font and everything too if you want
okay so let's save this file save i'll save this to my desktop but make
sure you save it as a py file a python file i'll name this as
hello dot py and save
now to run a file using command prompt we need to find the directory that contains our python
file mine is hello.py and it's located on my desktop so i need the location right click go to
properties you can copy the location then within command prompt or terminal
you can change directory by typing cd space and then paste your new directory the
new location enter then to run a python program type python space and then the name of
the program the python file mine is hello dot py hit enter hello world what is your
name bro hello bro i just thought that would be a fun last minute project
that we can do you don't even technically need an ide to write a python program screw you pycharm well everyone that is
a basic text editor program i will post the code for this program in the comment section down below and
well yeah that's a basic text editor program using python all right
ladies and gentlemen let's create a game of tic-tac-toe to begin we'll need to import tkinter as well as random and
let's begin by defining all of the different functions that we'll need let's define a function named
next turn for the time being we'll just write pass we'll fill this in later on
we'll need a function named check winner
a function named empty spaces to check if there are any empty spaces left and
lastly a function named new game that will launch a new game for us okay we have our four functions now
let's create a window let's create a window window equals tk and at the end of our program we need
to use window dot main loop and when we run this we should have just a small
basic window let's set the title window dot title let's set this to
tick tack toe we'll need a list of players players
equals x comma o
and with the way that we're writing this program we can swap these symbols with a different character
for example we could say dollar sign is playing against the at symbol too
but i'll demonstrate that later let's keep it as x and o for now
now we need to select a random player to begin player equals random
dot choice and pass in our list of players now we'll need nine buttons i'm going to
create a 2d list of buttons named buttons and this will be the first row this will
be the second row for the time being i'm just going to initialize these with 0 for everything and put these all
within a list so we have a 2d list named buttons
and to better visualize this i'm going to place each row on a new line so that's what our board is going to
look like we have a 2d list named buttons we'll need a label to
display whose turn it is label equals label i'll set the text equal to
player plus the word turn and i'll set the font to
font equals pick whatever font that you want
and i am going to pack this label label dot pack and set the side
equal to top and let's run this just to test it
okay looks like it's x's turn let's try it again oh stern okay that's fine for now
let's create a reset button reset underscore button
equals button i'll set the text equal to
restart it's going to be a restart button or reset button pick a font
maybe i'll set the size to 20 and we'll need a command command
equals new game when we click on this button it's going
to call this new game function for us and we need to
pack this button reset button dot pack
and i will set the side equal to top okay let's see if that appears alright so we
have our turn order a label that will display whose turn it is as well as our reset
button now we'll need to create all of the buttons to add to our 2d list named buttons but i'm going to
place these all within a frame frame equals frame we're adding our frame to our window and
i'm going to pack this frame frame dot pack
now we'll take our 2d list of buttons and add a button to each spot and i think the best way to do this
would be to use nested for loops we'll have an outer for loop in charge of the rows
four row in range three remember we only have three rows and
three columns the inner for loop will be in charge of the columns four column and range three
and inside the inner for loop we're going to create a new button
we'll say buttons at index row and column we have two indexes
because we have a 2d list so buttons at row whatever column whatever
depending on what iteration we are within our for loops we'll create a new button
and we'll set the text oh first add this to the frame almost forgot about that we're adding
our buttons to our frame and adding the frame to the window now we'll set the text equal to a blank
set of quotes because we don't want any text we'll set the font i'll just copy what
we have here for label
for a width let's say five and a height let's say two i'm going to hit enter
just to move down to the next line because we still have a few more things to fill in okay we'll need a command command
equals and i'm going to set this equal to a lambda function so we need some arguments actually i
think i'll pass in some keyword arguments row equals row and column equals column then our expression is
next turn and we will pass in row and column now we also need to add
our buttons to our frame buttons at index of row and column
we'll use the grid function for this grid row equals and
column equals column and it's always a good idea to test your
program after making any major changes so we should have our label our reset
button and our grid of buttons now that the main body of our program is complete
let's head to the next turn function and remember that we're passing in row
and column as arguments so we need to set up those parameters within the next turn
function row and column and the first line within here we would like access to our player
so let's say global player so that we have access to it and we're first going to check to see if
the button that we click on is empty so buttons at index of row and index of column
to access the text of a button just add a third index operator and type in text
if the text of our button that we click is equal to a set of quotes that means
it's empty and when we call check winner
winner winner chicken dinner and it's false there is no winner then we will fill in
that button with our player our player's character whatever it is x or o or whatever we decide
so within here let's check to see if player is equal to players
at index zero that is our first player and remember that we created a list of players and we're planning on
swapping these later we could say like if player is equal to x but that would make our program less
flexible if we want to pick like a different character instead of an x so if player is equal to player at index
zero whatever symbol is there then we are going to take buttons
at index of row index of column take our text and set it equal to
our player and we should check to see if there's a
winner after filling in this button if check
winner and we still need to fill in this function returns false
then we will switch players player equals players at index of one and
label dot config text equals
players at index 1 plus the word turn
so what we did here is that we're checking to see if after placing our text of our player
on that button that we click if there is no winner then we're going to swap players player
equals our next player and we're configuring our label so that it displays the next player's turn
players at index 1 turn now what if there is a winner let's say
else if check winner is true
then we will take our label dot config and set the text
equal to players at index 0
plus the word wins now let's add another else if statement
else if there's a tie let's say check winner is equal to
the word tie because we are already using false and true then let's change our
label and i'm just going to copy this text equals the word
tie okay so let's create an else block
so that goes right here so if it's not player one's turn player
at index zero then it's our other player's turn player at index
of one so oh then so we just need to mostly just copy this text and change a
few things around so i'm going to copy all this
and within here let's set player equals players at index
zero then players at index zero's turn players
at index one wins and that is it now our next turn
function is now complete let's head down to the check winner function and we need to check all of the different win
conditions and return it true if somebody won false if there is yet no winner and the word
tie if it's a tie so let's check all of the horizontal win conditions
so we can do this using a for loop for row in range three
we need to check the text of each button in each row if buttons at index of row
and column index of 0 we'll use the index operator to check the text
is equal to the next button in our row so i will copy this and change zero to
one check to see if that is equal to buttons at index of row index of two
and i'm going to check to see if this is all not equal let me move this a little bit
to a space so if that is the case that means
somebody won so if all of these buttons are the same and they are not equal to
an empty space that means they're all the same so let's return true that means that somebody won
no we need to check the vertical win conditions if anybody has the same character all
the way down a single column this next for loop is going to be four column in range three
for the first button this will be button at index of zero and column then
one and column let me just paste that and two and column
now we need to check the diagonal win conditions so if buttons at
index 0 0 that's the top left corner if the text of that button is equal to
buttons at indexes of one one is equal to the indexes of
button two two and if all of this does not equal an empty space
then return true so there is a winner and we have one last win condition to
check that is the other diagonal win condition so we just need to change some of these indexes around
so we have zero two one one and two zero
i'm going to change this statement to an else if statement no we need to check to see if there's
any spaces remaining else if we will call the empty spaces
function which we have yet to fill in if this returns false then we will
return the word tie
and lastly else else there is no winner and no tie so we will return false
and that is it for the check winner function let's test this
so this doesn't account for a tie quite yet but we can fill in some of these spaces looks like x wins
and we can no longer fill in buttons and we cannot start a new game quite yet either
within the empty spaces function let's create a local variable named spaces and set this equal
to nine whenever we call this function four row in range
three and we'll create a nested for loop for column in range
three we will check the text of each button if buttons at indexes of
row and column and we will check the text to see
if it's not equal to an empty space if that is the case spaces
minus equals one then we'll write an if statement if
spaces as in spaces remaining is equal to zero
that means we will return false and there are no spaces left else
we will return true okay let's test it
so this time i'm trying to get a tie
yep looks like it's a tie this next part's optional but i would like to change
the color of each button for the winning combination so within our check winner function
underneath the first win condition i'm going to take buttons at index
of row and index of zero
use the config method and set the background color equal to
let's say green and i'm going to repeat this process for
the other buttons within this win condition so that is row
zero row one and row two i'll copy all of this paste it
and switch some of these around so these should all be matching
so zero and column one and column and two in column
okay so we have zero zero one one and two two
and one more zero two one one and
two zero now when we have a winning combination
the color of the buttons involved in that combination are going to change to green now if there is a tie let's change all
of the buttons to let's say yellow so i'm going to write nested for loops for this
four row in range three for column
in range three take our buttons at row
and column and change the background color to yellow or some
other color of your choosing so if there's a tie they should all be
yellow i'm trying not to win here it's actually more complex than what i thought
yep it looks like it's all a tie and the last thing that we need to do is to fill in the new game function so that we can
begin a new game so let's say global player we would like access to our player
from inside this function and set player equal to a new random choice random
dot choice and pass in our list of players and we will change our label
label dot config and set the text equal to player
plus the word turn and we also need to reset all of our buttons
for row in range three for
column in range three buttons
at index of row and index of column
dot config text equals a set of quotes so it's
empty and we'll change the background color factors previously
so the default color for buttons is actually hexadecimal f 0 f 0 f 0
so this function will begin a new game for us and let's test it to be sure i'm going
to start a new game reset reset i'll actually try and win this time and
reset okay so it looks like the new game function is working now another thing that you can do too is
that you can change the players around let's say we would like to play as
dollar sign and at sign so this program is flexible enough so that you can change the icons of the
players all right everybody so that's a basic game of tic-tac-toe for
python if you would like a copy of this code i will post all of this to the comments section down below
but yeah that's how to code a basic game of tic-tac-toe for python hey what's going on everybody
it's your bro hope you're doing well and in this video we're going to create a game of snake using python so
sit back relax and enjoy the show first thing we should do is import from
tkinter as well as the random module and let's define all of the different classes and functions that we'll need
so let's create a class for our snake object as well as our food object so for the
time being i'm just going to write pass for my classes we'll fill these in later so we have class snake and
class food and let's define all of the different functions that we'll need so let's say
we have a function named next turn
change direction
check collisions and lastly game over
okay for change direction i'm going to have one parameter a new direction
now when i create a game i like to place a bunch of constants at the top of my game constants are variables that
you do not want to change later they're kind of like the settings however in python there are no constants compared to other
programming languages so we're just going to create a bunch of variables that will behave like them
so constants are values we do not want to change and they're kind of like the game settings and i placed them at the top for
convenience and the naming convention for a constant is that all the letters are uppercase so these
will be settings like the game width the speed etc so let's say the width of our game will
be 700 but feel free to take the liberty to pick whatever size you want so we have game width game height
i'll set this to 700 as well so it's a square let's say we have a speed the speed of
the snake how often will our canvas update so let's say 50 but the lower the number
the faster the game and a space size how large are the items in our game like
the food and body parts of the snake so i'm going to pick 50 but you can
change this and body parts how many body parts does
our snake have when we begin a game let's say three how about a snake
color you can pick a color name you can use rgb values or you can use a
hexadecimal value so i'm going to pick green 0 0 ff00 but
you can pick any color you want how about food color
equals red and that is ff000
and what about a background color for the canvas background color i'll pick black so that is
six zeros feel free to mess with some of these colors too so we have a green snake
our food is going to be red and our background is going to be black so that is all of the constants for our
game but you can feel free to adjust them if you like let's head down to the bottom and make our window so we have
window equals tk and at the very end we should have window dot main loop
let's set a title for this window window dot title
snack game okay fine i'll spell it right snake game and if you do not want your
window to be resizable you can use resizable
and then you have to pass in false twice it's kind of strange but it's how it is
okay we should have a small window and we cannot resize this even if we tried
okay let's create a score label but we probably need a score first so
let's say score equals zero and an initial direction direction
equals let's say down now let's create a score label so let's
say label equals label we're adding our label to our window let's set the text
equal to score colon then i'm going to use the format
method and we will pass in our score whatever
it is and i'll set a font pick whatever font you prefer
and 40 is a decent size and then i'm going to pack this label
let's test it okay we're getting somewhere we'll need to create a canvas canvas
equals canvas we're adding it to our window i'm going to set the background
color equal to our background constant
i'm going to set our height equal to the game height and the width equal
to the game width that we set and we need to pack this canvas dot pack
and we should have a game board i'm going to try and center this window
when it appears so we can do that using a few lines of code the first thing we'll do is
update our window so that it renders and then we need to find some dimensions
so let's say the window width equals window dot w
info width and window height
equals window dot w info height
we'll need our screen width
equals window
dot screen width and screen height
equals window dot w info screen height
where is it there it is
okay then we need to see how much we're going to adjust the position of our window
so let's say x equals
screen width divided by 2 minus window
width divided by two and do the same thing for y
except this will be screen height and window height
and that will be why okay then we need to set the geometry
window dot geometry
we're going to use an f string so let's set the window
width times window height
and then add plus x plus y
so when we pass in x and y these cannot be floats they have to be
whole integers so let's add a cast around x and y
okay now this should be fairly close to the center yeah that's not too bad now when we
begin a new game we should create a snake object as well as a food object snake equals snake and called the snake
constructor and food equals food okay let's fill in our food class first
because i think that'll be easier than our snake class so let's head to the food class
now let's create an init method so def init this will construct a food object
for us and we need to place our food object randomly so for the x coordinate let's say x
equals random dot rand int and we need a range the range is going to be zero comma now
with our game board i view it like a chess board there's a given amount of spaces so
700 divided by our space size is 14 possible spots on the x-axis
and then 14 possible spots on the y-axis so i need to pick one of these spots
randomly so let's say game
width divided by our space size so we'll get a random number between 0 and 14
however this should be exclusive so let's say -1 and for good measure i'm just going to
add a set of parentheses around this okay and then we'll convert this to pixels
so let's multiply all of this by our space size the size of each item in the game
and we'll do the same thing for y but change game width to height
okay we should be good
all right now let's set the coordinates let's say self dot coordinates
equals a list of x and y and that's it but make sure you spell
coordinates right now we need to draw our food object on our canvas
canvas dot create oval you can pick a square two if you
like we need a starting corner that will be where x and y is and an ending coordinator
so that will be x and y plus our space size the size of an object in
that game so x plus space
size y plus space size
and you can set a fill color too fill will be our food color that we
declared and i recommend adding a tag as well
that'll make it easy to delete this object so tag will equal the string food
now let's just test this so we should have a random circle or a square if you picked a square
appear someplace at some spot on my game board cool seems like it's
working let's work on the snake class next our snake class we'll need a constructor
and we will set a body size equal to our body parts
we'll need a list of coordinates
fill this in later and a list of square graphics
so that will be a list okay so we need to create a list of
coordinates we can use a for loop for that so let's say for i in range zero
through body parts
we will take self dot coordinates and append a new list
and the coordinates for each body part at the start of the game will be 0 0 so that our snake will appear in the
top left corner now we'll need to create some squares
okay so for x y in self dot coordinates
and remember that we have a list of lists so that's why we're using x y in self coordinates
we'll create a square equals canvas dot create
rectangle so we need a starting corner that will
be x and y then x plus our
space size the size of each object in the game
let me use the constant though space size y plus
space size
and let's set a fill color equal to our snake color
all right and let's set a tag for convenience tag equals
a string of snake okay so we have a list of squares and we can append each
square into our list self dot squares
dot append and pass in whatever square that you create
so we have a snake that has a body size a list of coordinates and a list of
square graphics now after testing this we should have the head of our snake in the top left
corner and now we just need the snake to move in a given direction every turn so the initial direction is down but
we'll be able to change that later so let's head to the next turn function and there's actually two things we'll
need as parameters that i forgot to fill in snake as well as food and we will call
this function when we begin our game so let's unpack the head of the snake so
that's x comma y equals snake dot coordinates
at index of zero so that's the head of the snake the coordinates will be stored in x and
y so let's check to see if our direction
our initial direction equals up and we'll need some else if
statements we'll fill this in just a moment
else if our direction equals down
then left
and then right
okay if our direction is up then let's take our y coordinate for the
head of our snake minus equals our space size so that we move one space up
and then down is plus equals space size left
is x minus equals space size and lastly
right is x plus equals space size
okay then we need to call the next turn function again for the next turn so we can use window
dot after we need the time so let's say our game speed
we're going to call the next turn function and we need to pass in our arguments of snake and food
snake food oh and make sure you're not actually
calling the next turn function inside of the after method you just have to write the function name of next turn without
the parentheses okay so let's update the coordinates for the height for the snake and write that before we move on to the
next turn so snake dot coordinates
and we will insert a new set of coordinates after updating one of them
so zero will be the index the head of the snake and we will insert x and y coordinates
at this new location now we're going to create a new graphic for the head of the
snake square equals canvas dot create rectangle pass in x
and y for the starting corner of our rectangle and the ending corner will be x plus
our space size y plus our space size
then i will add a fill color of snake color and then we need to update
our snakes list of squares so that will be snake dot squares
and insert at index 0 a new square that we create
okay let's test this one last thing that we'll need to get this program to run is that after you create your snake and
food object we should call it the next turn function and pass in our snake and food object so we should be able to
test this so our snake is going to move but we need to delete the last body part in our snake within the
next turn function but before we update to the next turn let's delete the last body part of our
snake so delete snake dot coordinates
at negative index of one that is the last set of coordinates
we will update our canvas canvas dot delete
snake dot squares an index of negative one
and lastly delete snake
the list of squares at index of negative one
so it should appear that our snake is moving cool we need some controls for our snake so
at the bottom of our program let's bind some keys let's do that here
so window dot bind let's find the left arrow key
and we will use a lambda the argument is event and we will call
the change direction function and pass in the word left
okay then we have to do the same thing for the other directions
so we have right pass in right
up pass in up down pass in down
let's head to the change direction function we need to access our direction global
direction this is the old direction
if our new direction that is passed in is equal to left
and if our old direction this direction does not equal right because we do not
want to go backwards and do a 180 degree turn
then we will set our direction equal to our new
direction and we just need to repeat this for the other directions for new direction
and i'm going to change this to else if else if new direction is right
and our direction is not already left
then we have up if our direction is not down
and down if our direction is not up okay so we should be
able to change the direction of our snake sweet okay we need to eat that pesky
apple next so let's work on that there's nothing else that we need to change within the change direction
function so i'm going to minimize this function and head to the
next turn function we'll place an if statement here if
x remember that we unpacked the coordinates for the head of the snake if x
the x coordinate for the head of the snake is equal to
our food objects coordinates
at index of zero that's the x-coordinate for our food object and
y is equal to food coordinates at index of one
that means they're overlapping let's take our score
and increment it by one and change our label label.config
the text will equal score
and then i'm going to use the format method and pass in my new score
let's delete our food object and we gave our food object a tag so we
can just use the name of the tag to delete it and create a new food object
then i'm going to write this part of our program within an else statement
we will only delete the last body part of our snake if we did not eat a food object
okay let's test it again so i have three body parts now i have
four five six seven eight nine
ten you can see that the score is going up too okay let's work on collisions next
because i should not be able to go off screen like this there's one thing that we're going to change so let's add an
if statement that will check collisions this will return true or false if we
detect a collision and pass in our snake object
if there is a collision we'll call the game over function
else we will update to the next turn
okay let's fill in the check collisions function and we no longer need our function of
next turn actually we don't need these classes either so i'll minimize them
okay check collisions so it looks like we will need a parameter of snake so be sure to set that
let's unpack the head of the snake x y equals snake dot coordinates
at index of zero
and let's check to see if we cross the left or right border of the game if x
is less than zero or x is greater than or equal to
our game width then return true i think for testing
purposes i'm going to print something to the console window
game over let's test it okay i'm going to go over to the right
border game over and our game stopped let's go over the left game over
cool so we know that it's working okay let's do the same thing for y
we can use else if here if y is less than zero or
y is greater than or equal to our game height let's print game over
and return true and we should probably test it okay i'm going up game over and let's go
down game over so what if our snake touches its tail or
another body part so let's say four i actually i
isn't too descriptive let's say for every body part
in snake dot coordinates
we're going to set this to everything after the head of the snake
we're going to check to see if any of the coordinates are matching
if x is equal to body part at index
0 and y is equal to body
part at index 1 then return true
and i'll print game over to test it print game over
otherwise we can return false there are no collisions
i think i'm going to change the size of the snake to 10. okay let's run into each other
cool game over and the last thing that we need to do is to fill in the game over function
because it looks like everything else is fine so head to the game over function take
your canvas and delete all
and we'll create some game over text canvas create text
i would like this in the center of my canvas i'll take canvas w info
width divided by two comma canvas w info height
divided by two i'm going to put some of this on the next line for readability i'll set a font
pick whatever font that you want
we'll need some text text equals game over
pick a color red's decent i'll add a tag too for convenience game
over and that should be it for the game over function i'm going to change the body parts of
the snake back to what it was originally and we should probably test that game over screen
all right it appeared okay so let's change some of these settings around you can create a larger game board let's
say 1000 by 700
that still works you can slow down the speed or speed it up so 100 will be about half as fast
it's going pretty slow now but what if we set it to 20.
you can change the space size so everything is a lot smaller now
including the food object you can change the body parts what about
20 to begin with that's fairly excessive
i'll change that back to three you can change the snake color let's say we would like a blue snake
so that is for a hex color four zeros and then two f's
you can change the food color so let's say we would like a yellow food object so that would be four f's and
then two zeros kind of resembles the python logo that
color scheme you can change the background color too
so let's say all white that would be six apps
i do not like that go back delete delete delete alright well that should be everything let's run this
game one last time
[Music]
[Music]
well everybody that is a very basic game of snake for beginners i will post all of this code to the comment section down
below but yeah that's a basic game of snake using python hey you
yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing
that like button drop a comment down below and subscribe if you'd like to become a fellow bro
[Music]
you
in this full course you will learn the

basics of python programming

i'm beau carnes with freecodecamp.org

i've previously created one of the most

popular javascript courses on youtube

and i've created many python tutorials

now i've created this complete python

course for beginners you don't need any

previous programming experience to

follow along and all you need to code in

python is a web browser in this course i

will teach you all the core aspects of

the python programming language and i

will simplify the more complex topics

python is considered one of the most

popular programming languages in the

world and it's only growing in

popularity python excels in a wide

variety of scenarios such as shell

scripting task automation and web

development and it's also the language

of choice for data analysis and machine

learning but it can also adapt to create

games and work with embedded devices

we're going to jump right into it so you

can start coding your first python

program as soon as possible to get

started quickly we'll use a replit which

is an online ide that allows users to

code and run programs in a variety of

different languages all in a web browser

and later i'll show you how to get

python set up on your local operating

system after the first project i'll go

into more detail about each of the main

features of python the section is

comprehensive and detailed and in the

final section you will use what you've

been learning to code a blackjack game

with me guiding you every step of the

way throughout the course there will be

a little repetition of some of the key

python programming concepts to make sure

you have a deep understanding of the

language so let's get started we're

going to start by creating a simple rock

paper scissors game and we'll start by

going to replit.com replied provided a

grant that made this course possible and

replie is going to make it super easy to

get up and running really quickly so you

can either sign up or log in

and create an account i'm just going to

use my google account

okay now that you're logged into replit

you can either just click the create

button or this plus button over here to

create a new replit and i'll make sure

to create a python replit but you can

see you can also select all sorts of

different programming languages oh these

are just the ones that start with the

word python but so there's there's tons

of different programming languages you

can select but in this case we are just

going to use python and then i'll click

create reple

okay so let me just kind of show off

replica a little bit

this is where we're going to create our

python code i'm going to zoom in just a

little bit so we're going to write the

code right here and then we can see some

output over on the right side and then

you can create different files over on

the left side here

and then there's some other things like

you can connect to version control

and

if you have environment variables we're

not even going to be discussing those in

this course there's a debugger you can

connect to a database and just some

other things but we're mainly going to

just be using this main.pi program to

write our program and we're going to see

the results in the console so i'm just

going to close this files window so

it's a little bigger here

i'm going to start off by showing you

how to create a variable with python so

this is a rock paper scissors game and

there's going to be a players a player

is going to have a choice and a computer

is going to have a choice so i'm going

to create a variable called player

choice

and i'm going to set that equal to

rock

so let's look at a few components about

this this is the variable name player

choice

and you can see

if you

we use an underscore that's just kind of

the convention for python to use an

underscore if you're going to have a

space in the variable name and we're

going to assign it that's what this

equal sign this is the assign operator

and we're going to assign it to a string

a string is just a word or a collection

of characters like rock and we're going

to put quotation marks around it now we

could have also used a single quotes

instead of double quotes as long as you

use the same quote on each side that's

what's important so we've now created a

variable

called

playerchoice and assigned it to rock and

now we can reference this variable later

and whenever we reference the variable

called playerchoice it's going to

the code is going to automatically

replace that player choice with rock

so this is going to be a very

interactive project i hope you're

following along i hope you have already

got replit loaded up like this now

throughout this project i'm going to

tell you what the next thing to do is

and i want you to try doing it yourself

before you watch what i'm going to do so

periodically you'll want to pause the

video

based on and what i say you and try to

implement what i say

before you come back to the video and

watch me implement it and see if you've

implemented the the same way

so i'm just going to zoom in one more

time and

this is the first thing i want you to do

see if you can make another variable on

the next line so you're going to press

return or enter to go to the next line

and this variable should be called

computer choice and you should set it to

equal

paper

okay so you can pause the video and see

if you can make a variable called

computer choice and set it to equal

paper

so here it's pretty simple here it's

going to start simple but it's going to

get harder as we go so computer choice

equals

paper okay so like i said it's starting

simple but it's going to get more

complex as we go along

if you've done that you've now written

your first line of python code in this

course

okay now i'm going to talk about

functions

a function is a set of code which only

runs when it is called

so i'm going to show you how to put this

code into a function

now one thing about python is that

indentation is very important

so after we create a we define the name

of a function any line of code that's

indented the same amount is considered

within that function

so i'm going to create a new line of

code at the top and i'm going to call it

get

choices

okay so we define the function with def

and get choices and i'm going to select

all these these two lines of code at the

same time and just press the tab key and

that's going to indent all these the

same amount

and you can see sometimes they'll be

squiggly lines and if you hover over

some of the squiggly lines it will tell

you something in this case it just says

the local variable called player choice

is assigned to but never used that's not

necessarily bad it's just it's just

telling us that usually if you create a

variable you're going to want to use it

later well we are going to use it later

we just haven't gotten to it yet so

sometimes the squiggly lines will

indicate there's some sort of error in

the code

usually i think it's the color red will

indicate an error but if it's a

different color it just may mean that

there's something maybe not quite right

but

it's not really that big of a deal so if

you have a variable that's assigned to

but never used that's not going to stop

your program

but it's just saying that it's not this

variable isn't really being used for

anything yet but we will change that

this function i'm going to show you how

to call a function later but we're

creating a function called getchoices

that assigns these two variables and

it's also i'm going to put another line

at the very end here and it's a return

statement

and i'm going to return player

choice

this will indicate what's returned when

this function is called so later we'll

call this function get choices and it

will return

something it will return the player

choice which is right here we'll turn in

this case rock that we can use somewhere

else in our code

and i did just happen to put an extra

line here

that's just that's optional i put a

blank line here just to kind of

make things easy to kind of organize the

code a little bit so

different sometimes i'll just put an

extra line between different sections of

code and it just makes it easier to

identify the different sections when

you're looking at the code

for the computer those extra lines don't

mean anything the indentation though

definitely does mean something

so as long as every line of code is

indented the same amount as the previous

line of code then it's all within the

same function

okay so this is what i want you to do

see if you can change the return

statement so instead of returning player

choice it's returning the computer

choice

so that's pretty simple

it's now returning the computer choice

here

now i'm going to create another function

down here this is just going to be an

example function just so i can

demonstrate something to you and then

we'll delete it it's not going to be

part of our rock paper scissors game but

i'm going to create a new function

called greeting

and then i am going to add what it's

going to do oh yeah put the semicolon

you also know a colon so a function

always has to have a colon at the end of

how we define it so i'm going to return

a string and it's just going to say hi

and one thing you'll notice is that

there's no you don't have to put any

anything at the end of each line some

programming languages such as javascript

you're going to put a semicolon at the

line at the end of the line

but in python it doesn't matter you

don't put anything at the end of each

line so now i'm going to call the

function to call the function i just

type the name and i put the parentheses

at the end so it's going to say so

greeting is now going to call it's going

to call this function and that's going

to return the string hi

now it's not going to do anything with

the string because our program doesn't

do anything with the string that's been

returned it's not going to go into the

console or anything but let's add

additional code so we will

make this string hi go on to the console

first let me create a variable that

takes what this greeting function

returns so i'm going to type in response

equals greeting so now we set the the

what greeting is being returned to this

variable called response and now i can

use the print function

and i can print the response and this

will print it to the console so now i

can we have this green button here this

runs the program i'll click this green

button here and now we can see it's high

so

this response is getting this high from

here and then we're printing it right

there okay i'm actually going to delete

all of this

and what i want you to try to do now is

to call the get choices function and

store the response in a variable called

choices and then print the value of

choices to the console

so you can pause and try that really

quick and then i'm going to show you how

okay so remember the variable is called

choices

and we're going to set that equal to

the get choices variable now ins or the

get choices function now instead of

typing out get choices you can see that

this code editor is actually giving us

suggestions on what we want to put in

here so i just typed in get and you can

see it's now saying get choices right

here so i can instead of typing out the

whole thing i can either click there or

i can just press the tab key and it's

going to fill in the rest of that

function name so that's just something

little that makes it easier to write a

program and you don't have to type out

every single thing so if you've already

created a function or a variable then

the the code editor then reply will will

suggest what you may want to fill in

when you're typing and most other code

editors do something similar it's called

code completion so

i'm going to but i still have to add

parentheses at the end and now i'm going

to print

the choices

[Music]

okay so i'm gonna just click this play

button to make sure it does what we're

trying to do yep it clicked paper

great

now let's talk about dictionaries

dictionaries in python are used to store

data values in key value pairs so let me

just show you an example

okay so a dictionary is going to have

these curly braces at the beginning and

end and then here's a key value pair

there's one it's separated by a comma

and then here's another key value pair

so we're setting name

we're setting that to equal bow and

we're saying the color

to equal blue so here's the key here's

the value here's the key

here's the value

and the key or the value in a dictionary

can be a variable

like the color we could set that we

already created this variable here i'm

just going to copy the word choices and

we can put choices and you can see now

it's not surrounded by the quotation

marks so if you surrounded by quotation

marks it's a string but if we don't

surround it by quotation marks it's

getting the the variable here choices so

this would be set to

paper because that's what choice is

going to is going to equal so we're

about to delete this line because that

was just an example

but now before the return statement in

this function we're going to add a new

line we're going to create a variable

named choices and make it equal to a

dictionary the first key should be

player with a value of the player choice

actually this variable here

the second key should be computer with a

value of computer choice

and then we're going to update the

return statement

to return the the choices dictionary

now i'm not going to keep telling you to

pause and try it yourself so just the

rest of this time whenever i say what

we're going to do you'll know that after

i get done explaining it you can pause

it and try it yourself but that's what

we're going to do now

so i'm going to create choices

and it's going to be a dictionary and

then it's going to have

a player

that's the key and the value is going to

be player

choice and i was just able to press tab

to fill that in and then we're going to

have computer

and it's going to be

computer choice

and you can see sometimes if it goes to

the next line there just won't be a line

number right here

but i can

move this over for now

and then i am going to oh i forgot to

put the equal sign that's what that red

squiggly line means so because the red

means there is a problem in the program

so it's not going to run correctly now

the orange just means that we haven't

used choices yet which we will right now

because we're going to return

choices

choices

okay so now we don't have any squiggly

lines because we're using every variable

that we created and we're returning

choices here

so you may have noticed that player

choice

it does not actually get set to the

player's actual choice

so let's fix that

the input function gets input from a

user and will use it to get the player's

choice

so instead of having players choice

equal rock we're going to make players

choice input

enter a choice

rock

paper

scissors

okay so this is how you get input from a

user we use the input function and this

is going to be something that's going to

be printed

we'll print to the console here

and whatever the result of this input

will be that the the player that the

user entered will get stored to this

variable which we then can use later in

our program

so let's just try that out i'll click

run

and

enter

let me just stop and run it again

okay enter a choice rock paper scissors

i'll just put rock

and now you can see the player's choice

we're still printing that and it's going

to print as rock

great now let's just clean up this code

a little bit we still have this here we

don't need that dictionary that's not

going to be part of our final code

and now we'll make it so the computer

can actually make a choice

so we're going to learn about importing

libraries creating lists and calling

methods

python libraries are a set of useful

functions so you don't have to write

code from scratch when you import a

library to your program you get access

to more features without writing

additional code

with basic python it's challenging to

get your program to do something

randomly but it's easy to choose

something randomly using the random

library

so let me show you how we can import the

random library

import statements are used to import

libraries and they're usually put at the

top of a program so i'm going to press

enter a few times here to add some lines

at the top and i'm going to do import

random

so now we are going we we've

imported the random library

so we're going to use that random

library soon but now let's learn about

lists

a list in python is used to store

multiple items in a single variable

lists are surrounded by brackets and

each item is separated by a comma so

here's an example i could create a

variable called food and set it to this

list it's going to have three items

pizza

carrots

and eggs

[Music]

so this is a list of strings

and then you can also get a random item

from the list

using we're going to use now we've

imported random we can get a random item

by using that that random library so i'm

going to put dinner

[Music]

equals

random dot choice

and then i'm going to pass in the the

list here

so using the random library we can call

choice and then we can pass in

a list and it's going to choose a random

item from that list and

and set it to equal this dinner variable

so right now the computer choice always

equals paper but we want it to be a

random choice between rock scissors and

paper

so before the computer choice variable

is created we'll create a new variable

called options and assign it to a list

of the possible options rock paper

scissors then we'll set the computer

choice variable to be a random choice of

one of the items in the options list

okay i hope you already tried this now

but let me show you how that's going to

work

we'll create options

and we'll set it equal to this list

of

rock

[Music]

paper scissors

and you can see the code editor will

often pop up these boxes with more

information about what we're doing to

give us some some help with what we're

trying to do here so we're going to set

this computer choice to be

random

dot choice

food not food i was looking at the food

down there that's gonna be options

there we go

and let's just um try running this

program and seeing what happens so i'm

going to put rock

and then we see the computer chose

scissor it should be scissors that's why

we're testing it out i guess i

spelled that wrong okay so scissors with

an s so now let me try running it again

and you can see it shows scissors but if

we run it enough time it should now it's

choosing paper because it's choosing it

at random

okay

that's working

okay so now let's just delete all this

code after the get choices function we

don't need to test that get choices

function anymore and now

let's create a new function called check

when

so you shouldn't know enough how to you

should know enough about how to create a

function

so def

check

[Music]

when

so this is just an empty function with

nothing inside it yet

but before we add oh with the

colon so before we add any code inside

the function we're going to create some

arguments

function can re functions can receive

data when they're called the data are

called arguments so when creating a

function you can specify arguments

inside the parentheses so we've been

using this empty parentheses but i can

uh put in tooth i can put in things

within these parentheses

when this function is called we're going

to give it two pieces of data we're

going to pass two pieces of data into

the function the first piece of data is

going to be player the second piece of

data is going to be computer

so the you can basically call these

anything you want uh these are just

we're creating new variables but when we

call these functions we'll pass in two

pieces of information that will then be

assigned to the variable names player

and computer that we can use inside the

function

so for now let's

finish off with to a for a complete

function the function has to have some

code within the function

so let's just add a return statement

that's just going to return a list

containing the elements player and

computer

so this check when function shouldn't

actually return this

this is just to kind of get get it

quickly created it should actually

return different things depending on the

player and computer arguments

an if statement will allow a program to

do different things depending on certain

conditions

so an if statement will first check a

condition and if the condition is true

then all the lines of code under the if

statement that are indented the same

amount will execute so as a quick

example i can say

a equals three

b equals five

and then we can create an if statement

here

if

a is greater than

b

then we will do something like print

yes

or we can do if a is

less than b or we can do if we want to

check if a and b are equal we can do

eq we we'll put two equal signs now this

is very important you never want to use

one equal sign because a single equal

sign is the assignment operator that's

how you assign what variables are equal

to so if you use a single equal sign or

like then if i put if a single equal

sign b without a double equal sign that

is going to

set a to equal b which is not what we

want the double equal sign

is going to check if a and b are the

same value basically it checks if two

values values are equal now you can also

do

a not equal so if you use the

exclamation point that's not equal or

you can use

less than or equal to or you can do more

than or equal to

so i'm just going to delete all this for

now

so now we're going to update this risk

turn statement uh before the return

statement we want to we're going to

check if player if player equals

computer

and if so if true will return the string

it's a tie

so let's do that if player

equals computer and this is something

that maybe you figured out yourself

before you before you're watching this

will return a string and the string is

going to be

it's a tie

okay so now it's only going to return so

a function does not have to return

something

and for this function it's only going to

return something

if this is true if player equals

computer

if not it won't return anything and just

to make make you notice this see

this

line is indented within the if statement

which is indented within this function

and just really quick thing to note

for a return statement parentheses are

optional so i could also

add parentheses like that but you don't

need them but for now i'm just gonna get

rid of them

[Music]

so currently when there's a tie the

program now returns it's a tie

but how does the player know that's true

now let's have the program print which

options that the player and the computer

chose

you can concatenate strings with the

plus operator

that just means you can combine strings

with other strings or strings with

variables

so let me show you how you can print

which options were chosen so i'm going

to print

you chose

and then i'll put player so you chose

and then we have to add a space here

because it's going to print a space and

then it will choose it will print this

so if the player chose rock we'll say

you chose rock

and then we can concave so we

concatenated these together but we can

add another plus sign

and put another string here and it's

going to say

computer chose oh it's like being

covered up here by everything computer

computer chose

now i'm just about to type it in but see

if you can figure out what to add at the

end here to put in what the computer

chose

so computer chose

computer or the the value of this

variable here

so

a lot of times when with programming

there's a bunch of ways to do the same

thing so this is one way to combine

strings and variables together there's

another way that's a little simpler

called an f string

so an f string will allow you to make

strings with and with variables and

other python code

so to do that you just put a variable or

you just put f at the beginning of a

string so let me just give you an

example so we do age equals 25 we're

going to create a variable and then i'm

going to make an f string we'll make it

a print statement and i'm going to put a

string in here but instead of starting

with a quotation mark it's going to

start with an f

and then i'm going to put gem is and

then whenever you want to put a variable

or any kind of python code we're going

to put some curly braces and i'm just

going to put the variable within the

curly braces

so years old and i'll put the end of the

string

or let me put a

period here

okay so gem is

age which is going to be 25 years old so

the f string is just a slightly simpler

way to combine the strings and the

variables so what i want you to do see

if you can figure out how to update this

line right here so it uses an f string

and it uses these curly braces instead

of all these pluses up there

so yeah we're going to put f and i can

delete

a lot of these

things here

[Music]

and then i'm going to put some curly

braces you chose player

there we go okay you cho there was a

comma here you chose player computer

chose

computer

okay so now we've been able to put in

the variable within this string with the

f string

so we're going to test this out uh so

in a code

the code in this function never gets run

so when we press the run button it's not

going to run any of the code within the

function unless the function is called

within the program

so

we're not going to test out this

function all right now what i want you

to do is see if you can add a line to

call the check when function and then

just call it with uh rock and paper

so we're going to just do

check when

rock

or actually we have to pass in strings

here rock

paper

so

this is going to it's going to call this

function with rock in terms instead of

player and paper instead of computer

so let me try stride running this

program

you chose rock computer chose paper and

just don't worry about these little

icons sometimes they just block what's

in there but it's still behind that

little search icon so it's to see it's

doing you chose rock computer chose

paper

now let's get back to checking the

winner

so far this function is only going to

check if there's a tie

now we'll start adding code to check

different wing conditions

so let's learn about else and elif

statements

okay so down here i'm just going to give

you i'm just going to paste an example

so so here's the if statement if age is

greater than or equal to 18 it's going

to print this else so anytime this is

not true then it's going to print you

are a child

okay now here i've combined it with

something else the ellis statement ls

just stands for else if it combines else

and if so you have to put a condition so

if age is greater than or equal to 18

print you're an adult else if now we're

going to check if age is more than

greater than 12 you were a teenager

else if age is greater than 1 print you

are a child

or else if none of these other things

are true we'll just print you or a baby

so and it's it's only going to do one of

these

it's going to get to the for once it

gets to the first one that's true then

it's not going to check the rest it's

just going to kind of go to the next

line of code after all these statements

so it's just going to choose one and

once it gets the first one that's true

then it's be done with this whole

section of code

you can also check for two conditions at

once let me give you an example i'm just

going to delete all this code and i'm

going to create an alif statement here

elif

else if and we're going to check if

player is equal to rock

and i'm just going to type in the word

and

and computer

is equal to

scissors

so now i'm checking if

both these conditions have to be true so

this condition and

this condition have to be true before

the following

statement will happen which we're going

to just put return

rock smashes

[Music]

scissors you

you when

[Music]

okay now

the next thing we're going to do let's

see if we can figure out how to do this

we're going to add another lf statement

and this time we'll check if players

equal the rock and computer is equal to

paper and if so we'll return paper

covers rock

you lose

so we're going to make this kind of

easier by just copying this code and

then i'm just going to paste in this and

then i'll just change this so players

equal the rock and computer is equal to

paper instead of scissors

paper

and it's going to say

paper

covers rock

you lose

and we won't even have an exclamation

point anymore because it's not exciting

to lose

okay and you can kind of see there's a

few we could add a few more elif

statements to cover all the different

situations

but instead we're going to talk about

refactoring

refactoring is the process of

restructuring code while keeping the

original functionality when created pro

when creating a program it's common to

refactor code to make it simpler or more

understandable

so we are actually going to refactor

this code that i've highlighted now

and we are going to instead use a nested

if statement

a nested if statement will make the code

more understandable at a quick glance

like

so you can put an if statement inside

another if else or else statement

so you'll notice here the first elf

statement is if player equals rock and

the second l of statement is if player

equals rock so see if you can figure out

how to refactor this

to

not have to use the and anymore we're

just going to use one if statement and

one else statement and then an if

statement under that

elif statement

if that doesn't make sense you can just

see what i do right now

so i'm going to just

move this down a little bit

i'm going to actually copy and paste

some of these items but we're going to

start with l if player equals rock we're

not going to have this

i'm going to put this on a new line and

say if computer equals scissors so first

we're going to check if player equals

rock

and then if so we're then going to check

it's going to be a nested if statement

if computer equals scissors and if

computer equals scissors then we're

going to use this this return statement

here

so i have to make sure it's indented

correctly it's going to re so this we

have

we have

player if player equals rock then if

computer equals scissors we'll return oh

this needs to be indented one more time

to be on inside that if statement

and now we don't even need this elf

statement this can just be an else

statement else

because if

the computer equals scissors there's

only one other option because we already

know if player equals rock and computer

equals rock will have already returned

it's a tie

and by the way once you return something

the rest of the code in a function does

not run so if we're returning it to tie

nothing else after that is going to run

so we know that computer can't equal the

rock at this point so it's either going

to be scissors or paper so i don't we

don't even have to check if computer

equals paper because at this point

computer has to equals paper and then

we'll just return this this line

let's see

there we go return paper covers rock

you lose

so now we just basically have to add two

more sections similar to this so this

one is if player equals rock

then we have to have another section if

player equals paper and then if player

equals scissors

and then we just have to have the the

stuff inside is going to be pretty

similar just corresponding to the

different relationships between rock

paper scissors

so i'm just going to copy that

and then i will paste it here and then

one thing is important to make sure this

elif statement

lines up with this else statement

and this is now going to be

paper

and then we are going to check if

computer equals rock

and a computer equals rock

then we will say that

paper covers rock

you win

or we'll say

scissors

cuts

paper

you lose and then the final one which at

this point i'm sure you can figure out

on your own we're going to add one more

section

and this if

player equals scissors

and then first we're going to check if

computer equals paper

if so

we will do

scissors

cuts

paper we're just making sure we're just

making it so every time the first one is

you win the second one is you lose but

you could do it the other way around

and then we will do

rock

smashes

scissors

you lose

okay we're almost finished with this

whole program

so both

the get choices function and the check

win function they're both complete

now let code to call the functions and

play the game

so first let's remove this

this check when

now we'll create a variable called

choices and make it equal to the result

of calling the get choices function

and we just have to make sure it's not

indented it's on the the first

the first column i guess right here not

ended at all so we'll do

choices

equals get

choices

[Music]

and one thing about this is it's going

to return a dictionary so if we look at

the get choices

so it's returning choices and it's going

to be a dictionary like this now let me

just copy this i'm going to show you

something down here i'm going to just

paste it down here and we'll just make

an example of what it could look like it

could look like rock and paper i always

use rock and paper as examples because

scissors is a

little harder for me to spell

so so that's a little easier so so let's

one thing we haven't talked about is how

to

uh

how to access a and specific element

within a dictionary so this is a

dictionary so let's say if i call this

um

well i'll just call it choices even

because we're going to delete that and

so we're only going to have this choices

but if choices equals this and let's say

i just want to get the the choice of the

player

let me show you how i would do that

i'll just do

p choice for player choice and i'm going

to put equal choices and to get just the

the value of the player i'm going to put

brackets so the brackets look like that

and then i have to

put the the key that i want the value of

so the key would be player

so if i

put the name of the dictionary which is

this

and then i put some brackets we're going

to use brackets to identify what is the

key that we want the value of so here's

the key of the with the value of rock

and here's a key with a value of paper

so this is how we can get the player

choice and i'm sure you can under see

how you get the computer choices if

instead if

we take this computer word and put it

right here

uh computer

okay i'm just going to get rid of all

this here

and we're going to we have the get

choices here

and now listen carefully to what we're

going to do next

we are going to create a variable called

result and make it equal to the result

of calling the check win function and

when we call the check win function

we're going to pass in the value of the

player key

and the computer key

of the choices dictionary

so let's do that so then you'll see what

i mean a result

is going to be

we're going to call

[Music]

check

when

and then we are going to pass in

we're going to pass in we have choices

player

and choices

computer

so because remember we had that we i

showed the example that dictionary so

we're getting the player key the value

of the player key and the value of the

computer key

so now we know who wins

we've now this result variable is going

to be one of these strings have been

returned either it's a tie rock space of

scissors paper covered rocks and so on

so now we just have to print the result

we're going to

print

the result

okay we can try out this game

i'm going to click the run button

okay this is why it's sometimes better

to test a little earlier i just forgot

the

semicolon on some of these so um

semicolon

and see there's a red arrow i should

have seen that semicolon

and semicolon

okay now let's try it i'm going to play

the program into a choice

i'm going to do

rock and i just noticed something else i

want to change so enter a choice here i

started there's a parenthesis here

there's no parentheses at the end so

again i'm just going to change that

really quick so enter a choice and we're

going to put it in parentheses here

and

test again so rock okay you chose rock

computer chose rock

it's a tie okay i'm gonna play it again

paper

you chose paper computer chose scissors

scissors cuts paper you lose

okay we just created a python game

so hopefully this gives you a better

understanding of what it's like to

program in python and you you now know

about some of the basic concepts of

python now there's a lot more to learn

in python and we're going to be covering

a lot more in this course i just wanted

to start with a game and a full program

so just right off the bat you could go

to program

so in the next section i'm going to

start going over in detail all the most

common features of python

and we're going to cover some of the

features that we've already used in this

game plus a lot of additional features

additional common features that were not

used in this game

and then in the final section of the

course

we're going to code a more complex game

a blackjack game

so let's get started with the next

section

one of the quickest and easiest ways to

get started with python is by using

replit.com but you may also want to get

python running on your local computer so

if you want to do that you can start by

going on over to python.org

and these go to the downloads menu

and then you're going to just click

what you want to download for it for so

it's going to default to be for you the

operating system you're on but you can

also go to other platforms and make sure

you can and then just find the platform

that you want to download on and there's

going to be instructions on here that's

going to tell you how to go about

getting installed on your specific

computer

so there's a few different ways to run a

python programs and one of the ways is

with an interactive prompt so after you

get installed if you open up your

terminal and type in python or sometimes

it's going to be python 3 depending on

how you got it installed you're going to

see this interactive prompt and then you

can just this is called a python rebel

it's it's different from a rebel

creating with created with replit but

you can start coding in python right on

here so i could say

name equals bow

and then you have to make sure you

put the the quotation marks at the end

and now i've gotten a variable stored as

bow and then i can just type in the

variable name name and it's going to

show you show me the value of the

variable and you can type in most

different python commands right into

this inactive prompt here

and then i can just quit it when i'm

ready to quit

it's also common to run python using

visual studio code so if you just search

for visual studio code you can get to

the the download page and then you can

just download it for your system and

there's also you can download for

different systems and then once you open

up visual studio code to get python

working you're going to want to install

the python extension so i'm going to

click over here to extensions and you

can search for python or it may just be

listed here under popular extensions and

i'm just going to click install

and this is going to make it easier to

work with python on visual studio code

so now i can just kind of close some of

this stuff here

and i'm going to

create a new file

and i can just call the and i can just

type in name

equals

bow

print

name

and then if i save this

as

test.pi it's going to now it's going to

add the colors that correspond to

python

and then i'm just going to click this

play button here

and it's going to play it's going to

open up a terminal window here

and it's going to run the program and

it's going to print bow that's what my

program did if i zoom out a little bit

you'll be able to see the difference so

well we just print the name and it and

it runs the program just like that and

then you can see on the terminal how the

the command that was used to run that so

we could use the same command on any

terminal and instead of typing this

whole thing for the location of python 3

i can just do python

3 and then you this is where that file

is located so just copy that

and i can paste it in here and it's

going to run that program

in this section we'll learn about the

core features of python i'll go into

more detail about some of the things we

learned in the first project and they'll

be covering a lot more concepts this

section was heavily inspired by the

python handbook by flavio copes and you

can check that out on freecodecamp news

and like the first part of the course

i'll be running python in replit so once

you get logged into replit just like i

already showed you before you can hit

the plus button here or the create

button to create a new replit and then

you can search for the programming

language or you can just click it down

here python we'll just create a python

repel

and then we can instantly start creating

writing python code in replit

so like i showed before we got our

different files here we're just going to

start by using one file here and this

we're going to encode and this is where

it's going to

appear if we we run the code so i'm

going to

close off the list of files here

and let's just start at the beginning

again so you've gotten used to coding in

python through creating a rock paper

scissors game

but now we're going to

kind of do a deep dive into all the

basic commands of python so there's

going to be some review but we're going

to be going into more detail about each

of the elements and the first thing

we're going to talk about is variables

so we can create a new python variable

by assigning a value to a label using

the equal sign or the assignment

operator so let me give you an example

just like i was showing you before just

name equals bo

so let me just zoom in a little bit more

here and so now our variable name is

name and we've assigned it the value of

bo

and then we can also uh create we can

create a variable with a number so i

could do age

equals

39. so a variable name can be composed

of characters numbers and an underscore

character but and it cannot start with

the number

so it could be anything like name one

it could be all capital letters

it could

be it could have an underscore it can

start with an underscore like i said

like that

and

you can see that these are all it's

putting these

red squiggly lines because it's showing

that that's not

actual python code if you're going to

create a variable you should be

assigning it to a value or you should be

using a variable that already exists but

i'm just showing you some different

examples of different variables now so

here's an example of an invalid variable

name if you just start with a number

like that that can't be a variable

because you can't start with a number

and i couldn't put something like test

exclamation point you can't use

exclamation points you can't use percent

signs

and other than that anything is valid

unless it's a python keyword so there

are some keywords a keyword is something

that's used to to write python like for

if

while

import these are all words that have

very specific meanings within python so

you cannot use them for a variable name

now there's no need to memorize them as

the python editor here will alert you if

you use one of those as a variable

so that was just like

if i say if equals

hi

and then you can see it's going to show

you right here with these squiggly lines

that we've done something wrong

invalid syntax because and then also you

can see that

it turns blue this word turns blue

because it's a keyword you can't use it

as a variable name

so like i said it's going to alert you

if you if you use a keyword as a

variable and you'll start to gradually

recognize them as part of the python

programming language syntax

now let's talk about talk about

expressions and statements in python so

an expression is any sort of code that

returns a value like for instance if you

do one plus one or if you just do a

string like

bow this is going to like this is going

to return to this is going to return the

string bow so a statement on the other

hand is an operation on a value

so for example these are this is a

statement here because we have an

operation we're assigning this to the

variable and then another statement

would be like this print

name

so that's going to

be a statement because it's doing

something to the value now a program is

formed by a series of statements and

each statement is put on its own line

like we have these two lines here but

you can use a semicolon to have more

than one statement on a single line so i

i could put a semicolon here

and then if i run the program it's still

going to print the name and let's just

do that we already learned how to run a

program in replica click this button

right here but we can see it's going to

print bow and if i put these on two

different lines it's going to do the

same thing if i run the program it's

going to still do the same thing here

now let's talk about comments this is

something we haven't talked about in

this course yet so in the python program

everything after a hash mark is ignored

so if i put a hash mark i can say this

is a commented line and when we run the

program this line is going to be

completely ignored and then we can also

put in inline comment if i just put the

hash mark here this is an inline comment

and the cool thing about most code

editors including replit is it's going

to put comments going to make them gray

so you know that this isn't really part

of the program this is just some sort of

special note that the programmer wants

to put as part of the program

so i want to emphasize again how

important indentation is so it's very

meaningful in python so you can't

randomly indent things like you can't

just press tab here to indent here and

how this is kind of lined up here this

line up here you can see this red

squiggly line says unexpected expected

indent

so some other languages do not have

meaningful white space an indentation

doesn't matter but in python indentation

matters

so in this case if you try to run this

program we can run this and you'll see

an error right here showing up in red

here it says indentation error

unexpected

indent

because indentation has a special

meaning so i can just unindent that here

everything indented belongs to a block

like a control statement or a

conditional block or a function or a

class body and we'll be talking more

about those different blocks

now let's talk about data types python

has several built-in types

so for instance this is a string so

anything surrounded by quotation marks

is a string that's one data type and you

can check the type of a variable by

using the type function so i could say

type

and then i'll put name and to make sure

to be able to see in the console i'm

going to print what the type is here

and if i press if i run the program

we'll see that the type is the class of

str which stands for string

and then we can test to see if something

is a string by comparing it to str so i

could do equals equals str

and then if i run that it's going to say

true because the type of name does equal

a string

and then we can also use is

instance so

i'm going to

uh so if we instead of doing type we do

is

instance and then we

have to pass it two things so

the first thing we're going to pass it

so we have the is instance we're passing

it the name that's this variable and str

we're trying to see if name is an

instance of a string and if i run that

it should say true again

so we've been testing against the str

class the string class but it works the

same for other data types so so there

are some data types around numbers

so an integer number integer numbers are

represented using the int class or the

int class and floating point numbers or

fractions are a type of are the type

float so i can say age

equals

2

and then we can just check

is instance

and i can pass in the age and then i can

pass in an int

so if i run that

we're going to see that i've done

something wrong

oh i spelled that wrong there we go okay

now i'm going to try this and we'll see

true true and i can also type in float

true false it's not a false or it's not

a float because it doesn't have a

decimal point if i

did 2.9

then it should show that it is a float

because it has a decimal so python

automatically detects the type

from the value type so it automatically

knows this is a string it automatically

knows this is a float but you can also

create a variable of a specific type by

using the class constructor passing a

value literal or a variable name like

for instance we have this and we check

to see if this is a float and it's

saying false but i can make it a float

by typing in

float

and just p putting the value

into the flow here so we're going to

make it a float so now it's true true

and you can do the same thing with

strings or integers or other data types

and you can also convert from one data

type to another by using the class

constructor so so that's basically what

we did we just converted this from an

integer to a float but i can also do

something else i can convert something

from

a string

to an integer so for instance i'm going

to we'll just get rid of this one

completely here and we'll just use this

one so

a string is anything in quotation marks

so if i do

20 age 20 and i test if this is a an int

it's going to say

false it's not an n so i'm printing

whether it's an instance of an int but i

can convert this string

into an integer by just doing integer

and this let me run the program and it

says true

another thing about this is you don't

just have to pass in the actual data or

the actual string i can pass in a

variable so i can say number

equals and now i'm going to make it a an

x it says number but it's actually a

string but i can pass in the number here

and then it's going to set that to age

and it's going to be true so we create

the string we convert the string to an

integer and we tested that that age is

an integer

so when we do something like this this

is called casting

we are it's basically trying to extract

an integer from this string

of course the conversion might not

always work depending on the value

that's passed so for instance if we

write test here in the string

instead of the 20

we may get an air so let me just run

this and see now we have an error it

says invalid literal for

for int int with base 10 test so we

can't convert the word we can't convert

the string test to an integer so python

does its best to do the conversion but

it doesn't always work there are a few

other types so let me see are some other

common types of types so there's the

type of complex for complex numbers bool

for booleans list for list tuple for

tuples range for ranges

dict is our dictionaries and set

is a type for sets

and we'll explore all these soon we'll

go into more detail about about all

these different types of types well now

let's talk about operators we've already

seen one operator that's this one that's

the assignment operator but there's also

arithmetic operators comparison

operators logical operators bitwise

operators and plus some interesting ones

like is and in so we're going to be

going over a lot of those right now

so we talked about the assignment

operator which is used to assign a value

to a variable or to assign a variable

value to another variable now let's talk

about arithmetic operators

it's just what you use to do

math mathematics

so here are the different

arithmetic operators so we have plus one

plus one equals two then minus

multiplication division

we have

remainder so four divided by three

equals one but there's a remainder of

one we have exponents four to the power

of 2 is 16 and floor division

so floor division does a

division problem and then just

basically rounds down

so floor division does the division and

rounds down to the nearest whole number

so actually this would be better seen if

we do four five divide by two five floor

division divided by two is going to be

two normally be 2.5 but floor division

is rounding down to the nearest integer

the nearest whole number

and then also note that that

the minus can also be a

make something a negative number

so i could do 4 plus

negative or i mean 1 plus negative 1 and

then that's just going to equal 0. and

then the plus operator can also be used

to concatenate string values that's

something we talked about earlier but i

could say

scamp

and then put a plus

is a good dog

and then like if i print this out

i put the the parentheses around it i

can

and then we'll see the whole string here

sk scamp is a good dog

that was the name of my first dog when i

was a kid so we can also combine these

arithmetic operators with the assignment

operator let me show you what i mean so

let me just get rid of this here and i'm

going to do age

equals 8

and age

plus equals

[Music]

8

and i'll do print

age

so we've so all these different

operators can be assigned with it can be

combined with the assignment operator

and now it's going to add

8

to the age so if i

run this it's 16. so this actually just

means

age

equals age

plus

eight

so this age plus equals eight is the

same as saying age equals age plus eight

so it's just going to add this number

to the current age and set it equal to

the age and you can do that with any of

these like i could do

times

and that would be age equals age times 8

and

64. and so on with any of these

arithmetic operators

okay now let's talk about comparison

operators

now we talked a little bit about them

before

but let's see some examples again so

this is to compare if two things are

equal

and then we have not equal we're

comparing them to see if they're not

equal or count this is if a is

greater than b

or more than b and then this this is

less than or equal to b

now let me just tell you a trick of how

i keep the keep track of which one is

greater than and which one is less than

if you see this less than one if you

kind of tilt your head a little bit it

kind of looks like an l see like l and

this one doesn't look like as much of an

l so this

less than operator kind of in some ways

looks like a capital l that's kind of

just squished over and that's how i keep

track of which one is less than which

one is greater than

and so these are all going to give

either a false value or a true values

speaking of true and false

true and false are examples of boolean

the boolean data type the boolean data

type just means true false or true

so a boolean is either going to be true

or false there's only two options

and there are a few boolean operators

so let me show you what the boolean the

boolean operators are either not

and

or or

so when working with two or false

attributes

those work like logical and or and not

so when you're using uh not

it means it's not true you're checking

you're checking to see something is not

true and means they both have to be true

and or means either this one has to be

true or this one has to be true in order

for the full thing to be evaluated as

true

and let me show you something about or

now or using an expression returns the

value of the first operator operand that

is not a false value or a falsie value

otherwise it returns the last operand so

it's going to return

the first operand that is not a false

value but since this is a false value

it's returning the second operand since

this is a false value it returns the

second one

since this is not a false value it will

return the first one

and this is considered a false value if

it's just an

empty bracket that's false so it's going

to return the second value which just

happens to be false

and since this is a false value it's

going to return the second option which

also happens to equal to false

so

one way to think about it for the word

or is so the pi this is how the python

docs describe it if x is false

then why

else x

so this would be like x this would be y

if else is false then why else x

and then for and down here let's look at

some examples for and and only evaluates

the second argument if the first one is

true so if the first argument is falsy

such as false zero and empty string

empty brackets it returns that argument

otherwise it evaluates the second

argument

so the way the way the python docs

describe it is if x is false then x

else y

okay let's quickly discuss bitwise

operators they're very rarely used only

in very specific situations but it's

worth knowing what these bitwise

operators are just in case you're in the

very rare situation that you need to use

them

and then two other types of operators

are is and in

now is is called the identity operator

it's used to compare two objects and

returns true if both are the same

objects if both are the same object and

i'll be talking more about that later in

the section on objects and then in is

called the membership operator this is

used to tell if a value is contained in

a list or another sequence and we'll be

talking more about the in operator when

we're discussing lists and other

sequences later in this course

and the final thing i want to talk to

you about is the ternary operator now

the turn area operator in python allows

you to quickly define a conditional

so here will be like kind of the slow

way to do it without a ternary operator

so let's say you have a function that in

this function is comparing age with 18

and it's going to return true or false

depending on the risk result

so instead of writing like this

we can implement it with a ternary

operator so let's do death

[Music]

is

adult i'll call it is adult 2 because

it's the second way of doing it and this

time we're going to use the ternary

operator it's just going to be return

true

if age

is greater than 18

else

false

so you can see first we define the

result if the condition is true

then we evaluate the condition

and then we define the result if the

condition is false

it's basically an if else statement all

on a single line

okay let's talk more about strings in

python so a string in python is a series

of characters enclosed in quotes in

double quotes or it could be

single quotes

as long as the type of quote is the same

on both sides and we already talked

about how you can assign a string to a

variable

[Music]

and we already talked about how you can

concatenate two strings using the plus

operator like phrase

equals bo and then you can concatenate

with the plus operator

is my

name

[Music]

and then

also instead of putting a string here

you can put the variable so i could put

name is my name and we already have the

variable here to equal bo so when you

concatenate you can concatenate the

strings or the variables

you can also append to a string using

the plus equal operator so let's say i

want to add to this name and i'm so i'm

going to say name

plus equals

is my name so we're adding is my name to

the end of this so i can say

print

name

and then we can see what it looks like

when you use the plus equal operator

so bo is my name

and then we already talked about how you

can convert a number to a string using

the

str class constructor like if we had age

equals we could make this a string

but we passed this integer it converts

to a string and now it's going to be a

string

now here's something new a string can be

a multi what can be multi-line when

defined with a special syntax so if you

enclose it if you enclose the string in

a set of three

quotes

so let me show you an example get rid of

all this

and i'm going to

print an entire

string here

so we're going to make this a multi-line

string i'm going to put three quotation

marks

and then it's going to start with three

quotation marks and end with three

quotation marks and then i can make it

multi-line so i can say bo is and then i

can

put some extra lines

39

years old now if i print that

and you can see it's going to print

the different lines here so we just made

a multi-line string

and you can also instead of using the

double quotes you can put a single quote

as long as they're the same at the

at the beginning and ending

now a string also has a set of built-in

methods let me show you an example so if

i have this string

bow but i'm going to put at the end of

the string i'm going to put dot

upper and i put parentheses at the end

so if i run this now it's going to print

it in all capital letters

and the same thing you can use with

lower so if it if i had a string that

had a few capital letters

okay now it's all

lower now i can also type in a title

and this is going to

make each lut so i can say

bow

person

uh and i do this so it's going to cat

it's going to a title that's going to

make the first letter of each string

a capital letter

i can also check things like i can say

is lower and it's going to check if it's

all lowercase letters false but if i

make it so it is all lowercase letters

it's going to say true so here's just a

list of a few common ones

[Music]

you can do is alpha to check if it

contains only characters

is

l num to

check if a string contains characters or

digits and is not empty is decimal

lower to make it lower case is lower

upper is upper title starts with to

check if it starts with a specific

substring to check if it ends with you

can replace part of a string split a

string you can strip the white space

from a string you can append new letters

to a string you can find the position of

a substring spring string and there's a

few more but these are some of the most

common things you can do with a string

and then one thing to know about these

is that they they all return a new

modified string they don't actually

alter the original string so let me show

you what i mean by that so let's say we

have we'll do name equals bow again let

me zoom in a little bit

and we're going to

print

name dot lower

now i'm going to print

name

so if i just run this

and we first figure out what went wrong

here it looks like there's a few extra

parentheses

[Music]

okay let's run this and you can see it's

going to make it all lowercase but then

when i print the name again

it's not still lowercase because this

just returns a brand new modified string

it doesn't actually change anything

in the original string

and then you can use some global

functions with strings as well so one

function we haven't discussed yet is the

l e n function which stands for length

it can give the length of a string so

i'm going to type an l-e-n

and then so there's just some global

functions that work with a lot of

different types of data and the length

of this is four you can see

and then you can use the in operator now

i briefly mentioned the n operator

earlier so

let me show you one use case so we can

use the in operator to check if a string

contains a substring like for instance i

can say

a u

in

name so let's check if name

contains the letters a u

well true it does but if if if it if it

if it didn't if i just add an extra

string it's going to say

false

okay another thing with strings um

escaping is a way to add special

characters into a string

for example let's say we wanted to add a

double quote within the string how can i

add a double quote into a string that's

wrapped in double quotes if i put a

double quote like that that's not going

to work because this is going to be the

string and then it's not going to the

code editor is not going to know what to

do with this last little bit here

so

the way to go is to escape the double

quote inside the string with the

backslash character so right before this

quote i'm going to put the backslash

character

and then you can see it now all is all

the same color as a string and if i

print it it's going to it's not going to

print the backslash character so putting

a backslash is how you escape a

character and that just means

this

the the backslash character means that

the next character is not going to mean

what it normally means

it's going to actually just be the

string of that character

and you can do the same thing with so

with in this particular example you may

not need to do it because you can always

just put a single quote at the beginning

and ending

and as long as you have a different type

of quote at the beginning and ending

then

you can put a double quote in the middle

but let's say you want a string that

contains both a single quote and double

quote within the string

then you will have to backslash like if

i just put a single quote there it's

going to mess it up but if i put it

backslash

now it's going to have the single the

double quote and the single quote right

within the string

and

you can also use the escape character

for

special formatting characters like uh

for instance what if i want there to be

a new line between the first two and the

last two letters of the string if i do

slash n

that is going to not actually just put a

slash in let's see what happens when i

put that this is means new line you can

see it says be new line a you

and then another way a reason why you

may want to use an escape here like

let's see what happens if i do this

this

that's not looking how i want to look

because it's normally normally when

the code is running if it sees this

backslash it thinks it's an escape

character so if you want to actually add

a backslash to a string you have to

escape the backslash so now it's be

backslash au

okay we're done talking about escape

characters now i'm going to tell you how

you can get a specific character in a

string so given a string you can get its

character using square brackets to get a

specific item given its index starting

from zero

so

one thing to know about programming is

that

whenever you're counting from in most

programming languages you start counting

starting at zero so this is going to get

the letter at index one so this is index

zero the b the e is at index one index

two index three so if i run that we can

see we are getting the e that's at index

one if i want to get the b i just put a

zero in the brackets and we get the b

and then we can use a negative number to

start counting at the end so if i put

negative one it's going to start here

zero

one and that's going to be a oh you okay

i guess when it's going backwards it's

not going to start zero because there is

no negative zero that makes sense so

negative one is going to be the last

character in the string so negative one

negative two negative three and so on

we can also use a range using what we

call slicing so if i put 1 colon 2

this is going to be every character

starting at index 1

and ending before index 2. so it starts

at index 1 so it starts with that

character and it ends before an x2 which

is a so that's actually only going to

return an e

but if i put 3 here

now we can return a u

and if i put bo is cool we can put one

further down i'm going to put 7

and we can see

it's going to return part of this string

and then you can also start if you just

put a blank before the colon then it's

going to turn everything up to it's

going to start at the beginning and

return everything up to character seven

and you can also do in the opposite

direction so if i put a blank after the

colon it's going to go to the end of the

string so it's going to say is cool

so let's talk about

booleans well we already talked more

about we already talked about booleans

but we're going to talk a little bit

more about boolean which is considered

the bool type and this can have two

values true or false so i can say done

equals

true

or you can do done

equals false now

notice that it always has a capital t or

a capital f so

if you don't put a capital t or capital

f it won't be considered the the true

boolean value in python

and booleans can be especially useful

with the conditional co

with conditional control structures like

if statements

well we already discussed if statements

in the first part of the course and

we'll be discussing them more in detail

later but let me just show you an

example so if done and i'm going to

erase this done because we want to be

true so if done

and then we'll say print

yes

[Music]

else

print

no

okay so i can run that and it's going to

print yes because done

equals true but if done equals false

[Music]

then it's just going to say

no

so when evaluating a value for true or

false if the value is not a bool or

boolean like if it's not true or false

we have some rules depending on the type

we're checking so numbers are always

true

except for the number zero

if i put 0 here it's going to evaluate

to false but if i put any other number

here it's going to be true even like

negative 1 or anything like that it's

going to be true oh i guess

that i didn't put negative 1 i put

equals 1. so if it's negative 1 that's

going to be true

so strings are always false

oh

strings are false only when empty

so if i say

bow here this is going to be true

because it's not an empty string but if

i make an empty string then it's going

to be

false

lists tuples and sets and dictionaries

which we'll talk about more later are

false only when empty so it's going to

be if a list double star dictionary is

is filled with something that is true

and then also you can

check if a value is a boolean so if i

say done equals true

i can do

print

type we're going to check the type we're

going to check if the type of done

equals

bool so let's check it does that equal

boolean

true it does now let's see let's

change this to a different type and it's

going to say false so it can still

evaluate whether this is true or false

but the type is not a boolean the type

is a string

and let me show you another example code

so the global

the any function it's a global function

it's very useful when working with

booleans

it returns true if any of the values of

the iterable such as a list if any of

them are true it's going to return true

for all of them so

for instance book one read that's true

but book two read that's false but this

is going to return true because it's

checking if any of them are true and

then it's going to set this to true

now the all function is is similar but

returns true if

all of the values are true so

we see we have this value as true

we have this value as false

whereas any would have returned true

this is going to return false because it

only returns true if all of the values

are true

okay now let's talk about more

number data ties we already talked about

int an integer whole number we've

already talked about float which is any

number with a decimal point there's

another type called complex

complex numbers are an extension of the

familiar real number system in which all

numbers are expressed as a sum of a real

part

and an imaginary part

imaginary numbers are real multiples of

the imaginary unit which is the square

root of negative one often written

i in mathematics or j in engineering

python is built in support for complex

numbers which are written with

the the j notation so the imaginary part

is written with a s with a j suffix

so you can combine it you can use a

literal value like complex

equals

two plus

three j so the the j means it's the

imaginary part of the number or you can

use the complex constructor so i can put

num

equals

complex

and then i can pass in

two comma three so

the three part is the imaginary part the

two is the the real part the integer

part

and then once you have a complex number

you can get it's real or imaginary part

like this so i can say print

[Music]

num

dot real

or num

dot match

so this is going to be the 2 this is

going to be the 3. so if i just

uh

let me

i think the problem was

num

num one no so i'll do num one and num

two and we're gonna do this as num two

okay let's check this so

this is the real part this is the

imaginary part you can see they're being

returned as floats

and you can use the type function to

check the type

so now let's talk about some built-in

functions that help with numbers so one

of them is abs abs will return the

absolute value of a number so if i say

5.5

that's just going to be

5.5 but if i put negative 5.5 well

it will be 5.5 so

[Music]

so if i print this see 5.5 basically it

just makes it so it's not negative

then you can also use

round so if we do round

let's make this just 5.5 round is going

to round to the nearest integer so if i

do this it's just gonna be six so point

five is going to round up but if we did

uh

four nine

it's going to go down to five

you can also specify a second parameter

to set the decimal points precision so

i can

go to if i do

one here and i round it it's going to

instead of rounding to the nearest

integer it's now going to round to the

nearest tenths place value or one

decimal point

there are several other math utility

functions and constants that are

provided by the math standard library

like there's a math package a c math

package decimal pages fractions package

that makes it easier to work with

different types of numbers we'll explore

some of those more later on

now let's talk about in nums and noms

are readable names that are bound to a

constant value so to use a noms we're

going to have to import and numbs from

the inum standard library module

like this from enum import enum and now

we'll be talking more about

importing

stuff from modules later but once you

import it then we can initialize a new

and nom in this way so do class

state enum

and so we can have inactive

[Music]

equals 0

and active

[Music]

equals one

so basically the the word state this can

be anywhere any

word we like so we're setting

uh

basically a variable called

state.inactive

which is going to equal 0 or

state.active to equal 1.

so

you can reference this how you would

reference it you can do print

state

dot

active

and then if i just run the program we'll

see

now you can see it's just going to

return state to active instead of one

so to actually get the value you use

state to active dot value

and then we run that and then we'll see

one here

if you we want to just return

state.active that the sa that value can

be reached by the number assigned in the

num so state we can do

one

and if i print that it's now going to

say state.active

same for using the square brackets

notation so i could do states

i'll do see square brackets and put

active

if i print that it's going to print

state that active so this is basically

the only way to create constants in

python

python is no way to enforce the variable

should be a constant so some people use

enums to create a constant

and then nobody can reassign the value

so

when we do

state

or state active dot

value

so this is it's not going to be able to

be reassigned so basically there's two

ways to do we can do this bracket

notation or we can go back to the other

way

active

now we can also list all the possible

values for enum so

our num is called state and we can now

just print all the values oh i actually

did that wrong it's supposed to be a

list

so this is going to list the values of

the state

and we can see we have inactive 0 and

active is 1. and we can also count them

using the length function so we're going

to print the result of a length state

and that's just going to give us 2.

okay let's talk about more about user

input now we already discussed a little

bit in our first program

but you can do get user input by using

the input function so let's just get rid

of all this

and we'll do

age

equals input

and we can say

print

your age is

and then we just can concatenate that

with the

variable age and then also if you want

to

so let's just do a quick test and right

now it's looking for the age right now i

can put five your age is five so there's

two ways to make it say what is your age

we can do a print statement right before

here

and do what is

your age

and then

now we can put four your age is four

now you can also ins instead of

putting the print statement right before

here i'm going to copy this delete that

and we can put it right in this input

function

and then i'll say it'll still say what

is your age and i can

put an age here

so one thing to really realize about

this is that it gets the input at

runtime meaning the program will stop

execution and will wait until the user

types something and presses the enter

key

you can also do more complex input

processing and accept input at program

invocation time and we'll see how to do

that later on

if you want to get the input when the

program is run that's going to work

better for command line applications

other kinds of applications will need a

different way of accepting input

let's look more at control statements

this is another thing we've already

discussed earlier but we're going to

review it and and look at it in a little

more detail so a control statement is

like an if statement so if condition

that's this variable here equals true

then it's going to run everything in the

block a block is

the part that is indented one level

usually it's going to be either four or

two spaces in this case it's four spaces

sometimes it's two spaces it doesn't

matter it could even be one space as

long as it's the same as long as every

line of code is indented the same amount

so if i just run that

the condition was true the block can be

formed by a single line or multiple

lines and it ends whenever you move back

to the previous indentation level

so

for instance if once we are not indented

i can say print

outside

if

so then

that's always going to pres it's always

going to print this because it's not in

that if statement

and then we have the if else statements

where the else is if

if this does not true then it's going to

do whatever is in here so if i just

change this to false

then it's going to

print whatever the condition was false

and then we can have this series this is

something that we showed in the per the

program earlier but if and then elif

combines else and if so

if this is not true then i'll move on to

this line and else

if this is true then i'll do this else

if this is true and it'll just keep

going on and then it will always do the

this is if none of the other ones were

true it's going to do this

so since

it was testing this it's not even going

to evaluate anything later but if we

move this to false

and we change this to bow

then it's actually going to skip all the

way down

all the way to this else here

and if we do flavio

you can print that and then it's going

to say hello flavio from right here

okay that's all we're going to talk

about for this for now since we've

already covered it earlier in the course

now i'm going to go into more detail

about lists lists are an essential

python data structure and so an example

of a list would be let's create a list

called dogs so we're going to create

the dog names we have roger we have sid

and this allows you to group together

multiple values and reference them all

with a common name so we have a list of

dogs and this is just two strings so the

list always going to have the opening

closing brackets and each item in the

list is going to be separated with a

comma and a list can hold different

types of values so these are all strings

but we can

have a string

an integer a string a

boolean

and you can mix different types of data

types

in a single list

and then you can check if an item is

contained in a list with the in operator

so we talked about the in operator

earlier but let me show you how that

works so we're going to print here's

where we can use the in operator we're

going to check if roger

is

in

dogs

so let's see

so run that true but now let's check if

bo is in dogs well

false because it's checking

so this is how you can check if an item

is in a list

you can also define a list as an empty

string so i could actually just

remove all this and now we just have an

empty list and this is obviously still

going to be false because there's

nothing in that list

but let's go back to when we had some

items in the list

and you can reference items in a list by

their indexes starting with zero so i'm

going to do dogs and then i can use

these brackets so and now i'm going to

put the so this is where we're going to

reference the thing

an item from the list and i'm going to

type in 0 which will be this item right

here roger or i could put 2 and it's

going to do 0 1 2 and now we're going to

have sid

and the same

and you can use this same notation to

update an item

in a list so i'm going to add another

line of code here and put dogs 2 is

going to equal

bo

and now i'm just going to print the

entire list here and now

instead of

being roger 1 said true to roger 1 bow

true

because we've updated the item at index

2 to be bo instead of sid

now you can also use the index method

so

um instead of

like if i want to find the first item in

the list i could do it like this

so you can also use a negative number

here

just how we saw on the string so

negative 2 is going to start with one

two

actually let's do negative one so it

should return true here

okay true so it starts with this one if

you put a negative number

you can also extract part of a list now

this is very similar to what we showed

using

with the string let me just add another

item here

[Music]

now i am going to

use the colon to do part of a list so

i'm going to 2

4

and so this is a slice

so it's going to start at the second or

zero

one

two

which is now bow because we change it to

bow and it's going to go through four

it's going to go through four but not

over pat not including four so it's

going to be 2

3

and then not 4 so it's just sid and true

or bow and true because we updated 2 to

bow

and you can also just leave this blank

so it's going to go through the end of

the list or if you

leave the first number blank

it's going to go it's going to start at

the beginning of the list and we can go

through for instance index three

and so that's a way to slice the list

you can also

use the the length function so let's

find out how many items are in the list

i'll use the length the length of dogs

is six or six items in the list we can

also add items to the list by using the

append method so i'm going to do dogs

dot append

and then i can

add an item so i can say something like

judah and now if we see the length

there's now going to be 7 and if we just

print

the full list

then we can see that we can see all the

items including the one that was just

added we can also use the extend method

the extend is another way to add an item

to a list so if i do instead of dogs

append i can do dogs that extend

and then i'm going to pass in

instead of just passing in the string

i'm gonna pass in

the item as a list so i'm gonna and it's

gonna add it just the same but now i can

actually

combine two lists together so i'm gonna

put a five so if i do this we can see

now we are taking this list and

extending it by adding this list on the

end this is a two item list and we have

that six m list and now we have the

eight item list

you can also use the

plus equals operator so

to use the plus equals operator i'm

going to do dogs it's the same it's

going to do the same thing as extend

so plus equals

and then we have this list take this

parentheses off here and it should look

exactly the same see it's showing up the

same thing up here

so the plus equals is going to be the

same thing as extend where it takes the

list that's already exists and adds this

other list to the end

and when you're using the extend or the

plus equals

you don't want to forget the square

brackets

here so if you if you forget the square

brackets and let's say i'm just going to

add this iron to the list

it's now actually going to put each

letter individually here

so if i you can kind of see it better if

i move over here

so it so that so you want to make sure

you put the the brackets

and another thing you can do is remove

you can remove an item using the remove

method so i'm gonna do

dogs dot remove

sid

okay now i'm gonna play it here and

it's saying

what did i do wrong here

oh obviously um i'm moving sid but we've

already changed the element of sid to

bow so let's remove

quincy and let's try that

okay so now there's no quincy

so another common thing to do another

common list method is pop so if i do

dogs.pop

it's going to remove and return a single

item so first i'm going to

[Music]

do dot

print dogs that pop and then i'm going

to print dog so if i

so first it's going to return 5 that was

the last item that we added onto the

list and now when i print the list that

item's not in the list so pop is going

to remove the last item from the list

and it's going to return the last item

it's going to return and remove the last

item from the list and then it's not on

the list anymore

now let's make this

let's let's simplify this just go back

to the initial list and i'm going to

change this to items

now i'm going to show you how to add an

item in the middle of the list at a

specific index you can use the insert

method so i'm going to do items dot

insert

i'm going to put the index which is

going we're going to insert at the index

number two and the item is going to be

test

and then i'm just going to print that

print

items

and then i'll run that and then we can

see it index number two we now see the

item test

now to add multiple items at a specific

index you need to use slices so

let me show you how you do that so we're

going to do a slice

and i'm going to set that equal to

test

1

test

2.

we print that

so now you can see we have test 1 and

test 2 right here

right behind this search thing here

and we've inserted multiple items into

the list starting at index 1.

now you can also sort a list

so if i do

here we go um

items dot sort

it will sort the list

but you have to make sure okay we have

an error it's not supported between

we have a combination of ins and strings

so let's

make it so it's all strings in the list

and

then it should

be able to sort it

okay

now the

strings are in alphabetical order and if

we're using integers or floats and they

would just be in numerical order

now one thing that's interesting about

that if i put change this to

bow

you'll see now we have this at the

beginning and this at the end

so

a the sort method orders uppercase

letters first and then lowercase letters

so to fix that actually to make it

make more sense we're going to change

that to

bob and to fix that

within the sort i'm going to i'm going

to put key equals str dot lower

and now

it's going to sort these correctly how

you would imagine not caring about

uppercase or lowercase letters

sorting modifies the original list

content so to avoid that you can copy

the list content using

so let me show you if we do

items

items

copy

equals

items

and then we make a slice

with with nothing at the beginning and

nothing at the end so it's going to

start at the beginning of the list to

the end of the list and now we can have

a copy and i can print

items copy

so if i print that so now we see we have

the sorted list that's that we ran the

sort on but we also still have

the original list

so it with all the words in the original

order

and there is also a way to sort a list

without returning a

new list

there is also a way to sort a list

without modifying the original list so

instead of copying a list

um what i'm going to do

is

i items

instead of doing items dot sort

we are going to do

we're going to use a global function

called sorted

so in the sorted function

we are going to pass in two parameters

so first is the list items

and then the second is how we're sorting

it so this just makes

sure that the key the case of the

letters don't matter and then i'm just

going to print that

now if i run this you can see we it

we print printed the sorted list

and now we're printing the list and it's

not it's no longer sorted because this

creates a new list without modifying the

original list

okay now let's learn about another data

structure called

couples

so

this time i'm going to put

tuples

so we're using a comment here so tuples

are another fundamental python data

structure they allow you to create

immutable groups of objects this means

that once a tuple is created it cannot

be modified so we already saw that we

could modify lists but tuple you can't

even add or remove items

they're created in a way similar to

lists but using parentheses instead of

square brackets so

for instance i'm going to do names

equals instead of using square brackets

we're going to do parentheses roger

and

sid

okay so a tuple's order like a list so

you can get its values by referencing an

index

an index so i could say for instance

names and if i do the bracket i could

put a zero here to return

roger

and then you can also use the index

method for instance names

dot

index

and then i can

pass in something like

roger and then this is going to

return 0

because it's going to get the the index

number of that so as with strings and

lists using a negative index we'll start

searching from the end so i could do

that i can do negative one to start

not negative zero negative one to start

searching from the end here

and you can count the items in a tuple

with the length function so i could do

if i do length and then do names it's if

i printed that it would just print 2

because there are two items in that

tuple

then you can also check if an item is

contained in a tuple with the in

operators very similar to a list so i

can do this time i will print it i'll do

print

roger

in

names so if i print that and run it

we'll see true because roger is in the

names

and then you can extract part of a tuple

using slices

just like we could do with with strings

and lists so i could do names and then i

could do

0 starting at the whoops

0

2

so that's just going to start at the

zero index and be done at the index 2

and then

and then you can use the so you can get

a sorted version of the tuple using the

sorted global function so

remember when we were looking at lists

when we used the sorted function it

created a new a new list or so when

we're creating using the sorted function

for tuples it creates a new tuple so i

can say sorted

[Music]

names

and this would put them in alphabetical

order they already in are in

alphabetical order but say there is one

more

word in this list

and then

i can print this

[Music]

to print the sorted version but it's not

actually going to modify the list

because you cannot modify

a tuple

and then you can create a new tuple from

existing tuples using the plus operator

so i could say something like

new tuple

[Music]

equals names and then i can use the plus

operator

and then i would say i would just say

tina

and

quincy i could add a few i could add so

these will combine two tuples into a new

tuple but you can never like i said you

can't actually modify the original tuple

now let's learn about dictionaries

dictionaries are another very important

python data structure

while lists allow you to create

collections of values dictionaries allow

you to create key value pairs we already

discussed dictionaries a little bit but

now we're going to discuss even more

about dictionaries so let me give you an

example of a dictionary with just one

key value pair so dog equals and then

we're going to use the curly braces to

create the dictionary and i'll put name

and then i will put

roger and just like any type of strings

we could make these single quotes or

they could be double quotes and the

spaces here are not very important but

it's common to put spaces in between

these things for better readability

and the key can be any immutable

value so this is the key this is the

value and the key can be any immutable

value

such as a string a number or a tuple

the value can be anything you want so a

dictionary can contain multiple key

value pairs so like for instance we got

the name we can have

age

and that's going to be

8. and you can access individual key

values using the notation like this so i

can say

dog

so i'm using the bracket notation i can

do name so if i print this it's just

going to

print roger

and then again i can use the single

quotes 2 if i want

and it still prints roger

and then you can use the same notation

to change the value stored at a specific

index

so let's say i want to change the name

so if i do dog

and i'm going to say that the name

is now going to equal

sid

now i'm just going to print the whole

the whole thing

and we can see the name is now sid

instead of roger

so another way to get a specific element

is to use the get method so if i do a

dog dot

get

and then i

do name so i'm going to try to get the

name here

it's going to return roger so

one good thing about this is that you

can add a default value like let's say

i'm going i'm searching for color

and it's saying none it's giving it none

because there is no color

but what if i want a default value so

i'm going to put comma and then i'll put

brown

so now if it cannot find the color in

the dictionary it's going to return

brown but if it can find the color like

let's say

color

and this is a

green dog

okay we'll return

green

so with the bracket notation that was

showing you earlier you cannot have a

default value so that's one good thing

about the get method

now you can also use the pop method to

retrieve the value of a key and delete

the item from the dictionary we also

showed the pop method for lists so for

instance i can say

get dot

pop

and then i will pass in

name

and then right after that i'm just going

to print

dog that the the whole dictionary so

first we're going to get roger and then

when i print the dictionary here it's

not going to show roger anymore because

we we deleted it pop will return the

item and delete the item

now you can also use a function a method

called pop item the pop item method well

let me show you that one pop item

it's going to retrieve and remove the

last key value pair inserted into the

dictionary

so

in this case it should be color so if i

run this

it's going to return color green and now

when i print out the dictionary it's not

going to show color green because that

was already removed it removed the last

item

you can also check if a key is contained

in a dictionary by using the in operator

so we're going to say we're going to try

to find out if

color

is in

dog if there's a key called color in dog

we run that and it says

true another thing we can do is get a

list with the keys in the dictionary

using the keys method so if i do dog dot

keys

and then we'll run that it's going to

show the keys so the keys are name age

and

color

we can see that it's inside the thing

called dick keys but we can also pass

this into list so we return an actual

just the list part so now we can see

it's just an actual list name age and

color

then we can do the same thing with

values so

instead of dog.keys let's do

values

print that

and you can see we have roger 8 green we

can pass it into a list

to

return the app just the list here

roger 8 green

and then finally if we just do items

[Music]

it's going to return all the items in

the list or all the items in the

dictionary

and convert it into a list

so you can see

this is the first item in the list this

is the second item and then we have the

third item here so

we can see each item of the list each

item of the dictionary is now in a list

and then like a lot of the other things

we can use the length function and i'll

just put dog

and we can see that there are three

items in dog now you can also add a new

key value pair to the dictionary so

let's say i want to do

dog

food

or i it doesn't even have to be a single

word i could put favorite

food

and i'm going to say

meet

and now we're going to print

that

let's see what do we oh

this was supposed to i did that a little

wrong

there we go this is actually how you do

it you put use the bracket notation

equals and let's put what it equals

there okay now you can see that we now

have a new item on the list favorite

food

meet

then you can also delete an item from a

list or a delete a key value pair so i'm

going to d e l means delete dog

or

dog there we go and this time i'm going

to delete

color and i'm just going to use single

quotes instead of double quotes to show

you that doesn't really matter the type

of quote and now you can see we don't

know what color

this dog is it's no longer a green dog

and then you can also copy a dictionary

so if you want to make two copies of a

dictionary you can do

do like this dog copy that's the name of

the new dictionary i'll do dog dot copy

and that would be the new

copied version of the dictionary

okay now we are going to talk about a

new thing called sets

sets are another important python data

structure

sets kind of work like tuples but

they're not ordered and they are

immutable so you can change them

you can also say that they kind of work

like dictionaries but they don't have

keys

they're all they have an immutable

version of a set called a frozen set so

let me show you how you would create a

set so let's do names

and you we're going to use

curly brackets just like that

and

just like that so we have two names so

you can see the differences the a

dictionary

you use the curly brackets but there's

going to be key value pairs but this

doesn't have key value pairs in a list

it's just going to be a

item after item like this but there's

going to be brackets instead of curly

braces

so

one thing about the sets is that they

are not ordered

so sets work well when you think about

them as mathematical sets

so for instance let's have we're going

to create a set 1

with roger and sid and we're going to

have a set

2

which is just going to have

roger

and so you can intersect two sets so

uh the inner intersect

the intersection of these two sets will

be set one

and

set

two so if i just print that out print

intersect

and then we can just run that and we're

gonna see what so it's just roger so the

intersection of these two sets are just

roger the all the items that they have

in common you can also create a union of

two sets so

instead of just calling this union i'll

put

mod for modification and so i can show a

few different things with the same

variable name and the union symbol is

just the

straight line like this it's not an i

it's just the

straight line

it's on the same key as a

as the was it the forward slash

backslash one of the slashes

now we're going to get every single item

in both sets which happens to in this

case just happen to be the same as set

one but if we change this one to the

word luna it's just a different name and

now we're going to get each item

in both sets or said luna roger for the

intersection and then we can also get

the difference the difference between

two sets so let me change this to back

to roger and for the difference between

two sets i'll use a the minus

and

the difference is just going to be sid

that's the only thing that's different

between the two sets

you can also check if a set is a

superset of another and if a set is a

subset of another so how you would do

that is

so we're just saying like is this

greater than that which means it has

everything of the in the other set true

now if we put the other direction

is does this set have everything in this

one no it doesn't

you can also count items in a set with

the length function that's pretty

self-explanatory i won't even show it to

you we've seen the link function so many

times

you can also get you can also get a list

from the items in a set by passing the

set to the list constructor so

i'm just going to remove this

and we will do

list

set

one

okay so now we have a list of the set

and then you can check if an item is

contained in a set with the in operator

just like the

list and the other way we the other

places we use the in operator and then

one more final thing about a set a set

cannot have two of the same item so

that's another thing that's useful about

sets so if i type in rogers now we have

roger sid roger if i play this we'll see

it's only going to

print sid roger it's not going to add

the roger twice to the set

so that's another

useful thing about sets is that make

sure there's only one of each item in

the the set so if you have a list that

has multiple items you can convert it to

a set

um and then i'll just make sure there's

only one of each thing in that set

now let's talk more about functions

we already talked about functions in the

last section but we're going to do a

review and then go into even more detail

about functions so a function lets us

create a set of instructions that we can

run when needed and i'm just going to

paste in a function and again the

indentation it can be either four spaces

two spaces

as long as it's indented the exact same

amount

so functions are essential in python and

in many other programming languages they

help us create meaningful programs

because they allow us to decompose a

program into manageable parts and they

promote readability and code reuse

so this one is a function called hello

that just prints hello this is the

function definition

so there's a name called hello this is

the name here and then the body of the

function

which is the the set of instructions

and the body of the function is

everything that's after the colon

and everything that's indented one level

on the right

so to run this function we must call it

so i can just type in hello

hello

and then this is the syntax to to call

the function and i can call it multiple

times so i can just copy this and paste

it and now if i just run this program

it's going to print hello

three times

the name of the function is very

important so the name of the function is

hello it should be the function name

should be descriptive so anyone calling

it can imagine what the function does

a function can accept one or more

parameters this is something else that

we saw

before

but

i can type in a parameter right here and

this becomes a variable that we can use

in the function so i can change this

instead of printing hello

it's going to print hello

and then we'll just put name

and now i can call the function with the

name

and i can actually um call it with

different names so we'll do bow

and we'll do

quincy

and then if i just play that we see

hello bo

hello quincy

so

as you can see we call the function by

passing the argument

and again you can use single quote or

double quotes here it's better to be

consistent just always use single quotes

or always use double quotes

but for teaching i like to switch it up

to just to emphasize that you can use

either so let me tell you about the

difference between parameters and

arguments

these two words parameters and arguments

are sometimes used interchangeably

and it's common to get confused about

the distinction

we call

parameters

the values accepted by the function

inside the function definition

and arguments are the values we pass to

the function when we call it also an

argument can have a default value

that's applied if the argument is not

specified so let me show you how i would

do that so we have it name so right now

it always needs to be get a name well

first let me show you what would happen

if i called the function without passing

the name

i'm just going to run that and we can

see we're going to get an error hello

missing one required positional argument

name but we can make it so you can call

this function without passing in a name

where it's optional you can't if you

want so i'm going to put an equal sign

and then i'm gonna type in my friend

and just to make consistent make this

consistent i'm gonna make this all

double quotes

okay so this is now an optional argument

so it's it's you can pass in the name

but if you don't pass a name it's going

to default to my friend so i'll just run

this again with that default

value and now it's hello bow hill quincy

hello my friend because we called this

and we didn't specify any argument or

parameter and then we can also accept

multiple parameters so i'm just going to

get rid of this default value and i'll

put 8 so now we're accepting a name and

an age so we can now use both parameters

in our function so i can do plus

hello

name

[Music]

you are

and we're going to add

the age

and now it's going to be passed in as a

number but we're going to convert it to

a string

so you are

[Music]

years old

and then we have to make sure we have to

make sure to add a space in here so

there'll be a space space after this

word then the number then a space and

then years old

so i'm gonna now have to pass in the

number

and now i can run this function

now showing the red

squiggly lines

i sometimes the the red squiggly lines

will appear when it's

actually correct

so let me what am i am i doing something

wrong here

oh i need to put the parentheses

if the red squiggly lines appears when

it's actually correct they'll it they'll

go away

usually within a few seconds or if you

hit enter

so that actually was a problem i forgot

the parentheses at the end um so

you can see this is what the whole

function looks like

if it's all on one line but i'm just

going to

move that over so hello bo you are 39

years old so we've used the name and the

age

so parameters are passed by reference

all types in python are objects but some

of them are immutable including integers

booleans floats strings and tuples this

means that if you pass them as

parameters and you modify their value

inside the function the new value is not

reflected outside of the function

let me just give you an example of that

so if i just i'm just going to paste in

some new code here and we can see we

have this function called change and

we're going to pass in this value if we

pass in this this valve variable 1 to

the change function and we set value to

2

well then we're going to print the value

and see what happens

and you can see it's now just 1 here so

so it didn't change the value

the value so what we change inside the

function doesn't affect anything from

outside the function

and then you can see we have these

orange squiggly lines here local

variable value is assigned but never

used it's just showing that actually

this isn't really doing anything once

it's inside the function and we change

it doesn't change anything outside the

function

so if you pass an object that's not

immutable you do change one of its

properties and the change will be

reflected outside so this was

mutable this is immutable an object that

would be

mutable would be like a dictionary so if

i change this to a dictionary and i put

name

and i set it to bow

but then inside the change i do value

dot name or not i'll put the the

brackets value name

so the key of this dictionary and i set

that to sid

and i run this we'll see now the name

has changed to sin so we changed we use

the change function to change name to

sid and now it actually is changed

because a dictionary is mutable

so a function can also return a value

using the return statement

so i'm going to update this whole thing

and talk about return statements a

function can return a value using the

return statement so it's going to return

this name that we then can continue to

use in our in our program it doesn't

have to return name it can return

anything that happens inside the

function

and

the when the function meets the return

statement the function ends so you can

have a return statement have code after

it but it will just end like for

instance if you have the return

statement in a conditional like in an if

statement we can also omit

the return the return value

so it's just going to end the function

and not return anything so i had

mentioned having the return statement in

a conditional so that's a common way to

end a function if the starting condition

is not met

like for instance if we update the

function to

this so if not name return this so if i

mean if not name return

or

else

you don't even need an else because this

will just in the function and you don't

even need an else this will happen if

there is a name now we just said that

you have to pass in something if you

don't have a default value so the way to

get to that would just be to call the

function

with false

so if we call with false then it's just

going to return it doesn't do anything

but if we call it with

bo

then let's see

hello bo so you can also return multiple

values by using comma separated values

so

for instance i can i'm just going to

take this part off here and then add a

return statement

return and then i can return the name i

can return

bo in case that's not the name i can

return

8 and then i can call this and i'm just

going to call this with sid

and we can see what happens

now

oh

it doesn't it's not it doesn't actually

print what's been returned but if i

print this

here we go then we can really see what

happens so

in this function it's going to print

this but now we're also going to print

what's returned so let's see what that

looks like so

this is what when we print what was

returned it looks like this so it's sid

bo

8

so one thing related to functions and

also related to other parts of python is

variable scope

so let's look at this

we've declared a variable up here and

when you declare a variable that

variable is visible in parts of your

program depending on where you declare

it

so if you declare a variable outside of

a function the variable is visible to

any code running after the declare after

the declaration including functions so

we call this a global variable so we've

declared this before the function so we

can now access it inside a function and

also outside the function so if i

so we can see 8 and 8 and it shows right

here what's going to

show in the

console here

but if we declare a variable inside a

function let me give you an example if

we declare

this variable

inside the function i'm just going to

move it down to here

now it's a

local variable and it's only visible

inside the function so let me just

delete with this because it's not

actually going to be

doing that so if i run this we're going

to see there's there's an error

name

age is not defined we're trying to print

the age here but since the age was

declared inside the function it's not

available outside the function it's only

available

inside the function

so you just have to be aware sometimes

there's local variables that only apply

inside the function and there's global

variables if you that can apply inside a

function and outside a function

okay now let's look at something else

with functions and this is nested

functions

functions in python can be nested

inside other functions

a function defined inside a function is

visible only inside that function this

is useful to create utilities that are

useful to a function but not useful

outside of it so you might ask why

should i be hiding this function if it

does no harm

well one because it's always best to

hide functionality that's local to a

function if it's not useful elsewhere

also because we can make use of closures

which we'll talk more about later so so

look at this example so we have this

function talk and inside the function we

defined another function called say

and then

what we

what we do is that we can call that say

function

inside the function and so the way this

works is we pass in the phrase so here's

the phrase and the phrase i'm going to

buy the milk

and here we do we we split it so split

is a way to

create a list

of out of this string so we have this

string but it's going to split it on

every space so it's going to create a

list of each word individually and then

we're going to run this loop

more on loops later

and we're going to for every word in the

the words list we're going to say

the word we're going to say the word

it's just going to print the word so if

i just run that i am going to buy the

milk and every time it prints it it

prints it on a new line so this would

just be an example because we're never

going to want to use this save function

outside the talk function so it's better

just to put it inside the talk function

and then i'll just paste in

another example here if you want to

access a variable defined in the outer

function from the inner function

you first need to declare it as

non-local

so

we're using non-local here at non-local

count and this allows us to access this

variable that was declared inside the

out so this is the outer function count

and we have this variable called count

and to be able to access that variable

in the inner function we have to

call non-local or we already talked

about variable scope and if we didn't

call

call this non-local then we could not

access the count variable from inside

the function so like for instance i'm

going to run this it's going to print

the count which is just count plus 1 is

just adding 1 to this number that's all

the function does but if i take off this

word non-local here and i run this we're

going to get an error because it doesn't

know what count is it doesn't know that

we're referring to this count in the

inner function so we'll just put that

back on there and then it should work

again

this is especially useful with closures

which we're just about to talk about

so closure is a special way of doing a

function in python if you return a

nested function from a function that

nested function has access to the

variables defined in that function even

if that function is not active anymore

so let me show you an example i'm going

to paste some code that'll be very

similar to this code but just a a little

different and then i'll explain it so

now instead of count it's a counter so

we're returning count from this nested

function and from the outer function

we're returning the nested function

we're returning the increment function

and then here instead of just calling

the function directory the outer

function we're assigning it to this

variable and now we're going to print

we're just going to call we're going to

call this variable which is the returned

inner function so we're basically

calling the inner function and it's

still going it's because we're calling

the inner function it's not going to

reset the count to zero every time and

it can keep track of that value and we

have this

using a comment what it's going to

return but we can also

run the program and we can see one two

three just like that so we return the

increment inner function and that still

has access to the state of the count

variable even though the counter

function has ended

so let's move on to

objects

[Music]

everything in python is an object

even values of basic prim of types like

integers strings floats are objects

lists are objects as well as tuples

dictionaries and pretty much everything

so objects have attributes and methods

that can be accessed using the dot

syntax for example let's define a new

variable of type int so i'm going to do

age equals eight

age now has access to the properties and

methods defined for all int objects

this includes for example access to the

real and imaginary part of that number

so i can do

a print

age dot real

and then if i just run that

the real part is eight i can also print

the imaginary

part of the number

and manage

and there is no imaginary part of the

number so it just

does zero i can also get the the bit

length age dot

bit

length

and if i run that

we can see the bit length is four so the

bit length method returns the number of

bits necessary to represent this number

in binary notation

so there's just a lot of

things that you can use for all int

objects and these are just a few of them

so a variable holding a list value has

access to a different set of methods so

i'm going to

update this again we're going to do

items

equals and we're going to create a list

one

two

so

i can do

items dot

append

i can append a three i can append

another item i can do

items dot pop

which is going to

remove and return the last item which is

the three

and the methods so so these are the

methods of pin and pop and the methods

available to an object depend on the

type of value

the id global function provided by

python lets you inspect the location in

memory for a particular object so for

instance i could do a print and i'm

going to do id what's the id of the

items

object

and we can see this is the location in

memory

so some val some objects are mutable

while others are immutable this is

something that we already talked about a

little bit that depends on the object

itself if the object provides methods to

change its content then it's mutable

otherwise it's immutable

most most types defined by python are

immutable for example an int is

immutable there are no methods to change

its value so if you increment the value

like with um

age equals age

plus

one

it's actually going to create an

entirely

new value

so it it's not going to even be the same

object at all because age you it has to

create a whole new one to reassign it

but something like a in in a dictionary

it would actually be the same object but

you could just change different parts of

it now let's talk more about

loops

so this song we already discussed a

little bit in the previous section but

loops are

one essential part of programming

and in python we have two kinds of loops

while loops and for loops

so before i um show i'm going to paste

in this code but i just want to show

something really quick see how there's a

line like dotted line here and a dotted

line here this is showing the default

indentation which we can change so i'm

actually going to go and change

that really quick let me wait i think

i'm gonna have to yeah i'm gonna zoom

out so i can get to this and i'm gonna

change the indent to four and now it's

not going to have a little line right in

there so now i'm going to go back here

and let's zoom in again

okay so let's talk about

while loops

while loops are defined using the

while

keyword

and they repeat their block until the

the condition is evaluated as false so

while condition equals true so

this particular example is an infinite

loop it never ends because this

condition is always going to so if we

run this program which i'm not going to

do right now because it just goes on

forever while this condition is true

keep running the code inside the loop

all the lines of code that are indented

the same amount

so let's halt the loop right after the

first iteration i can do condition

equals

false

[Music]

so now if i run it it just runs the loop

one time

so in this case the first iteration is

run as the condition is evaluated true

and then at the second iteration the

condition test evaluates to false so the

control goes to the next instruction

after the loop which in this case there

is no next instruction after the loop

it's common to have a counter to stop

the iteration after some number of

cycles

so here's a while loop with a counter so

you you start the counter at zero and

then while count is less than 10.

we're we're gonna print this count

equals count plus one so it's going to

increment the counter every time

until we get to the end so it's gonna

see it's gonna print this until

eventually the count is

greater than 10

so or 10 or 10 or greater while count is

less than 10. so once it gets to 10 the

loop will stop um again another way to

doing to do this we could have just done

plus equals plus equals one so if i run

that it's going to do the exact same

thing

and other type is the for loop so using

for loops we can tell python to execute

a block for a predetermined amount of

times up front and without the need of a

separate variable and conditional to

check its value

it's commonly used to iterate the items

in a list so we have this list there's

obviously four items here and then four

item in items so items is this list and

then for each item in the list we're

going to print

the item pretty straightforward and it

prints each item in the list

or you can iterate a specific amount of

times using the range function so let's

say we don't have we're not going to

define this here we're just going to do

4 item in and then here i'm going to

type in range

and then i'm just going to type in a

number how about

15

so i'm using the range function that

basically just returns a list and then

if i do that we can see it's going from

0 to 14. so the range function is going

to return a

a list that goes from 0 to 14 so there's

15 items and it's going to print the

items

now if we just go back a few steps to

when we had the list here

we can i can show you how to get the

index so right now it's just printing

the items one two three four but what if

we want the index of the list

we can do that by using the by wrapping

the sequence in the enumerate function

so for items in and then

i'm going to do

enumerate

i'm going to pass in

so this is going to return

each item and

the index of the item and since there's

going to be an item in an index

but it's actually the index and then the

item i'm going to type an index comma

item so this enumerate is going to get

the index and the item so now i can

print the index and the item here and if

i run that

so index zero item one index one item

two index two item three and so on and

it doesn't even have to be numbers we

can

do names

[Music]

and if i just run that whoops not that

one

and then we can see the the index and

the item then let me put in some more

code here so i can talk about break and

continue

both while and for loops can be

interrupted inside the block using

either break or continue

continue stops the current iteration and

tells python to execute the next one

and break stops the loop altogether and

goes on with the next instruction after

the loop ends so i'm going to just play

this so here we're saying if item equals

two continues that means it's going to

skip that iteration so if i play this

one three four so it's not going to it's

not going to get to the print item

because it's actually skipped that

iteration it just

doesn't run any code after the continue

if this is true

and so it doesn't print 2. so if we

change this to break it will be very

it'll be a little different here this

time it's going to just print one

because now it's breaking out of the

loop

entirely and it's not going to run any

more iteration of the loop

okay let's talk about another thing

classes classes in python

so in addition to using the python

provided types we can declare our own

classes

and from the classes we can instantiate

objects

an object is an instance of a class

a class is the type of an object so

here's an example i'm going to create a

class called

dog

so

uh to create a class you just put the

word class and then put the the class

name

and

now

i can i can

add a method for the class so to define

a method i'll just do define bark

[Music]

and i'm going to put the word self here

and inside this i'll print

[Music]

woof

[Music]

okay so self as an argument of the

method

will point to the current object

instance and must be specified when

defining a method so when you're

creating a method inside a class you're

always going to start with self so we

create an instance of a class

which is an object

like this

so i'm just going to put

roger

equals

dog

okay so i've created a dog just like

this

and then i can

print

type

roger so let's see what the type of this

roger is we can see it's the class to

dog class

roger is a dog

a special type of method

called in there's a special type of

method called init which is a

constructor

so let me show you how to create a

constructor

deaf

so we can use this

a constructor like this

to initialize one more properties when

we create a new object from that class

so you can see we always have to add

self but now these are the two

variables we can pass in when we create

a dog and that will associate be

associated with that

that

object

so down here i can call um i can call

dog but i can pass in roger for the name

and

the age

and now when we create this

dog it's going to assign the name to

self.name and it's going to assign the

age to self.age and let me show you how

you can access that information

so i'm going to print instead of

printing the type i'm going to do roger

dot name

and now it's going to when i do

roger.name that's self.name so self is

roger and we do self.name it's going to

be the name that was passed in

and then we can also

do the age

and then we can finally

call the bark method so we have bark

here now we can see what that does so

i'm just going to run that

and we have roger

we have eight

and then

this is because i should have put

parentheses here so let me put

parentheses after bark

and so we have wolf here so roger 8

wolf and the reason why it says none

here is because i didn't have to put the

print see i i put pranks that was in

this groove if you're playing print on

everything but calling bark

already prints wolf

so when i do

it when it's when it's printing it's

printing because since

roger.bark doesn't return anything

there's no return statement that's why

it printed none so there'd be two ways

to fix that either instead of printing

wolf i could return wolf

or i could just not do the print here so

let me just take that off

okay roger 8

wolf

so one important feature of class is

inheritance let me show you an example

of inheritance i'm going to create a new

class before the dog class and this is

going to be

a class

called

animal

and the animal class i'm going to put a

function called walk

and i'm going to always pass in self

and this is going to print

[Music]

walking

[Music]

and then we can make the dog class

inherent inherit from the animal class

so we have class dog but if i put

parentheses here

then i can type in animal

and now the dog class is going to

inherit from the animal class and now i

can go down here and after roger.bark i

can do roger.walk

and if i run that

okay so roger 8wolf but now it's going

to be able to do walking and you can see

the dog class doesn't actually have a

walk method but it's getting it from

the animal class it's inheriting this

method

and in that way you're able to i could

create a class cat a class frog

a class bird and each of them could

inherit the walk

method and then it would have

walking

and we'll be doing a little more with

classes in the the final project

in this course

because we'll be going a little more

over object oriented programming

but right now let's talk about something

new i'm going to just delete all this

and we're going to be talking about

modules

so every python file is a module you can

import a module from other files and

that's the base of any program of

moderate complexity as it promotes a

sensible organization and code reuse so

it's basically how you can create a

software that has multiple python

programs in the same piece of software

so in the typical python program one

file acts as the entry point and the

other files are modules and exposed

functions that we can call from

other files so

let me just show you an example i am

going to

open up this

files tab and i'm going to create a new

file and this is going to be called dog

dot pi

and now i have dog dot pi open i no

longer have the main dot pi open and i'm

going to define

bark

and what bark is going to do is just

print

woof

[Music]

okay now i'm going to it's just going to

automatically save for me i'm going to

go back to the the python file and now

i'm going to

import

dog

and let's see oh it's just saying it's

unused i thought maybe this thing wrong

but that just means i import dog and i

haven't used it which i'm about to do

right now so dog

dot

bark

so now if i run this program

it's going to say wolf but that's not

from this file it's actually importing

this function from from the dog file so

that's a way you can

break up your code into multiple files

we can also use the from import syntax

and call the function directly

let me show you what i mean so instead

of import dog i'm going to say

from dog

import

bark

and then instead of calling it dog.bark

i can just call

bark

because we're only importing bark well

we've imported bark directly instead of

the whole dog so i can run that and it

says

wolf

so

the first strategy allows us to load

everything defined in a file when i just

said

import dog that

allows everything defined in a file so i

could have a bunch of function like bark

or walk

name or there could be a bunch of

functions if i just say import dog it

imports all of them but the second

strategy from dog import bark allows us

to just pick the things we need so we're

only going to import the specific

functions that we need

those modules are specific to your

program and importing depends on the

location of the file in the file system

so

suppose you put dog.pi in a

subfolder for instance let's say i

create a folder

and i call it liv for library and let's

say i put dog.pi in this subfolder like

this

now in this folder to make this work i'm

going to have to create an empty file

named init.pie so i'm going to add file

and i'll do init dot or under underscore

underscore init underscore underscore

dot pi

and this tells python that

the folder contains modules

now i'm going to go back to my main file

and i can

i can import dog from

lib so i'm going to say from

lib

that's that subfolder import

dog

and then i can do

dog

dot bark so let's run that to make sure

there's no errors it worked

correctly so i was able to import this

file from the subfolder

or you can reference the dog module

specific function by importing from

lib.dog so i can do from

lib.dog

import

bark and now instead of calling dog.bark

i can just call

bark

and it says

wolf

so i'm going to close this here

and

now let's talk about the python standard

library so basically there's all these

pre-built modules you can

you can load a lot of code from the

standard library python exposes a lot of

built-in functionality through its

standard library

the stand library is a huge collection

of all sorts of utilities ranging from

math utilities to debugging to creating

graphical user interfaces

so there's a bunch of them but here's

some of the more common ones we have

math for math utilities re regular

expressions json to work with json date

time sqlite 3 os for operating system

utilities random for random number

generations

so

statistics requests for http request

http to create servers url lib to manage

urls so you can import these modules

that allow you to get extra

functionality so

we already looked at a little bit at the

math one we already looked a little bit

at random in the the first

uh project that we did but let's just

kind of look at a little more how you

would do this so now we are going to use

the the math one we're going to import

math

and

so this is how you would introduce you

would use a module of the standard

library so we already saw how to import

modules that we created it's very stan

it's very similar with the standard

library so now that i've imported math i

can now use

functions and methods from from the math

module so i can do math dot

square root and i can pass in 4 and then

i can just

print that so we can see what the result

is

okay 2.0

or we can

just like we shall

we saw before instead of importing math

i can say

from math

import

square root and then instead of just

doing math dot square root i can just

call

this

square root method here and it's going

to do the same thing so that's basically

how it works for for all the modules in

the standard library okay now we're

going to start going over a few kind of

miscellaneous

slightly more advanced topics in python

so we're going to talk about how to

accept arguments from the command line

in python

well first of all let's see how to run a

program from the command line

in replit so let's say we have a program

it just says print

hello okay so we've been running it by

just clicking this play button but

there's another way to run a program in

replit and i go over to the shell so

this is the command line in replica we

can clear this

and now i'm just going to type in

python main dot pi

okay so what we call python to run the

python program and then we just put the

name of our file with main.pi

so

whether you're in replit or if you're

running things locally

you should be able to

run a program in the same way

depending on how you install the program

locally instead of typing python you may

type in python 3.

sometimes the way people install python

it will be python 3 because we're using

version 3 of python

so now let's see how you can

call a python a program on the command

line and pass in some arguments right

when we run the program from the command

line

so

a basic way to handle arguments is to

use the sys module from the standard

library so let me give you an example so

first of all we're going to import sys

now just so you know usually you're

always going to have import statements

on the first line i'm just putting this

comment on the first line to remind us

what we're working on right now so now

i'm going to we're going to import the

sys library

now i'm going to

print

and i'm going to first i'm going to

oh

we're going to print the argument

cis.arg

the

so this is how we can print all the

arguments that were passed in

when we called the program so so i'm

going to see we have python main.pi and

now i'm going to put

bow

39

okay so you can see it's printing the

list of arguments so this is basically

just a list the first item is the name

of file

then we have

the the first word and then the second

one and you can see they're both strings

even though this is a number it's coming

in

as a string so then we could do

something like this we could say name

equals cis.arg v

and then i would

get the element at index 1 which is the

name here and i could print

[Music]

hello

and then we're going to do a name oh

hello hello and then name so let's call

this again

and instead of i'm not going to do 39

it's just going to be python main.pi bow

hello bo so we've now been able to use

the argument that was passed in

now this is a simple way to do it but

you

really would have to do a lot of work

using this method because you really

should validate the arguments make sure

the type is correct and you need to

print feedback to the user if they're

not using the program correctly

so i got zoomed out a little bit and i'm

going to show you this other method

so python provides another package in

the standard library to help you called

arg parse so first you would insert

import arg parse

[Music]

and then let me show you

how you would use it

so you call arc parse dot argument

parser

and then pass in the description of the

program so the description of the

program is this program prints the name

of my dogs

then

you proceed to add arguments you want to

accept

so for this example program we are going

to accept the c option or it can be

slash

c or dash that's color

and we are going to

be calling it color and then later we

can we do

parser.parse args

and then we can access args

dot color to get the color that was

passed in and then you can specify

whether it's required and what help is

going to go along with that so let me

show you how you would do that

we're going to do python

main dot pi i'm going to put dash c and

then i'm just going to put red

okay so

you can see if i

go this out a little more you can see

this is the

command i called this is the command i

run i pass in red and then it just

printed red that's what we have right

here

and so let me show you what would happen

if we if we

don't specify the argument so if i just

run it without the red so it's now

giving me

some information usage well main.pi we

need to put dash c and then we have to

put a color and then it says the

following

arguments are required this dashi or

dash sc so it's it's showing us that we

need to

if we we've called the program wrong and

we're going to need to call it with the

dash c

you can also

set this option

we can set an option to have a specific

set of values using choices so after

required true after this comma i'm going

to type in choices and i'm going to set

this to equal

see i have this empty

dictionary

but i'm just going to well not a

dictionary but

because it's not going to key value

pairs i can do red

and yellow

so now it's it can only accept

two options so i can

call it here

with

red

but if i call with blue

it will say

invalid choice blue i need to choose

from red or yellow so

using this arc parse makes it easier to

deal with arguments and also makes it

easier to

communicate information back to the user

about what we're trying to get

so there are more options with this but

those are those are the basics

now let's talk about something

completely different

lambda

lambda

functions

so let me just give you a quick example

[Music]

lambda num

num

[Music]

times

2. so

lambda functions

also called anonymous functions are tiny

functions they have no name and only

have one expression as their body

so they're defined using the lambda

keyword and so

this is going to be the argument

and this is going to be the expression

the body must be a single expression and

it has to be an expression not a

statement so this difference is

important an expression returns a value

a statement does not so it has to return

a value so the value that's being

returned is the number times two the

number that was passed in going to

multiply it by 2 in this example

so this is basically the simplest

example of a lambda function it just

doubles the value of a number and lambda

functions can accept more

arguments so

so for instance i could do

[Music]

lambda

a comma b

and then we can multiply a times b

lambda functions cannot be invoked

directly but you can't assign them to

variables so for instance i can assign

this to the variable called

multiply so multiply is going to this

function is going to be assigned to this

variable here so then the way that i

would use that i could print now i'll

print the result of calling multiply

and then i pass in

two

and four

so if i just run that okay 2 times 4 is

8. we can see right in the console here

and then i'm going to just

zoom in just a little bit

so the utility of lambda functions comes

when combined with other python

functionality for example in combination

with map filter and reduce so speaking

of map filter and reduce that's what

we're going to talk about now map

filter

reduce

so python provides three useful global

functions we that we can use to work

with collections so this is map filter

reduce so first let's talk about

map and since their functions are going

to have the

parentheses at the end so map is used to

run a function

upon each item in an iterable item like

a list and create a new list with the

same number of items but the values of

each item can be changed so here's an

example we have this list

and then here's the function

and then we are going to map through

each item in the list

and so here's the function we're going

to run we're going to run this function

on each item in the list

and now we're going to get a new list so

i can do print

result now if we print that i'll just

run that function and we can see

okay we get a map object

so then we can always just pass it into

the

list function

and then we can

run the program again two four six so

one two three became two four

so yeah whenever you want to do run a

function on each item in a list you can

use map

and when the function is a one-liner

it's common to use a lambda function so

we just talked about lambda functions so

now let me show you how you would do

this as a lambda function so

double

is going this is going to be a variable

and we're going to assign it to a lambda

function

and i'm going to

so now this lambda function takes the

number

a

and then does a times two so and this we

just keep the same because now we're

using a lambda function here and we're

taking each number and passing it

through this function where we have the

the this is each number in the list and

we multiply it so if i run this program

it should look exactly the same

and we can even simplify it even more so

this is where lambda functions really

shine instead of assign it assigning it

to double first i can copy the whole

function i can delete this completely

and now i can just put it right in here

so now we're mapping over this function

and we don't even have to create the

function in a different line and assign

it to a variable first we can put the

lambda function right in the same line

right within the map and now i run this

and it's going to give us the same

result so remember we started with

when i first showed you this example we

had a much longer piece of code now

we've simplified it with the

lambda function

so the original list the original list

is left untouched in a new list with the

updated values is returned by map

the result is a map object which is an

iterable so

that's why we needed to cast it to list

to print its content

okay now let's talk about filter

let me put in let me just update the

code here it's kind of similar but now

we're using filter filter takes an

iterable and returns a filter object

which is another iterable but without

some of the original items so you can do

so by returning true or false from the

filtering

the filtering function so here's the

filtering function we are going to check

if the item passed in is even so

so here's the list here so

you can see we're calling filter we pass

in the function the filtering function

and then the list

and we're going to return true or false

from this function so if it can be if

it's divisible by if when you divide it

by two we have zero remainder

then it's even

so

that would return true so this line

would return true

and then if not it would return false if

it's odd so now any even number is going

to be added to the result and any odd

number is not going to be added to the

result so basically we're filtering the

list based on this function and then

here we just print

we convert that result to a list and if

we run that it's two and obviously if we

can just put in

uh more numbers here

and run that again

we have two four six

and then we can just like before we can

use a lambda function so

i'm just going to

copy this here we can just delete this

whole thing and we are going to put a

lambda function here so lamb

duh

[Music]

so now you can see we're just putting

the lambda function in the in line here

and we are checking to see if it's this

is going to turn true or false whether

it's even or not

and so i run the program and it's going

to give me the exact same result here

okay the final thing we're going to talk

about is reduce

reduce is used to calculate a value out

of a sequence like a list so for example

suppose we have this list of expenses

stored as tuples

and so so we had dinner 80 car repair

180 or 120 and we want to calculate the

sum

of this property

in each tuple

in this case the cost of the expense

so here's kind of the long way of doing

it without using reduce

we basically take every expense in

expenses and then we add to the sum here

and we add expense one that's going to

be the

the item at index one and then we get

the sum and we can print the sum so

that's kind of like the long way of

doing it without reduce but there's a

quicker way so

to use reduce reduce is a little

different from map and filter where it's

not available it's not it's not

available automatically we have to

import it from the standard library func

tools so i'll do from

funk

tools or function tools

import

[Music]

reduce

and now i'm going to

create a new i'm going to create a new

variable called sum

and we're going to set it to

reduce we're going to use reduce and now

i'm just going to

pass in i'm going to go directly to the

lambda function so

lambda

let me just kind of explain this for a

little bit so reduce the first is going

to take a function the reduction

function

and then

the iterable here

and the function has to take two

arguments

so this the first argument is the

accumulated value and then the the right

argument is

the updated the update value from the

iterable so we're going to

continue adding

these two item we're going to

basically add every item together and

reduce

the

i the numbers at the first index all

into down to one value by adding them

all together so i'll just

pray here play here and then we get the

same number 200 and you can see it's a

lot it's a lot quicker just to use the

reduce function compared to the other

code we had previously

okay next up we are going to talk about

recursion

in

python not recursion error just

recursion

and a function in python can call itself

that's what recursion is and it can be

pretty useful in many scenarios a common

way to explain recursion is by using the

factorial calculation

so let me show you how you would

calculate factorial this isn't python

code this is just an example here so a

fact when you do 3 factorial that means

you do 3

you multiply every number between three

between this number and one together so

three times two times one equals six

four factorial is four times three times

two times one five factorial is you know

five through one and so on and then

every number you multiply every whole

number down to one so using recursion we

can write a function that calculates the

factorial of any number so let me show

you so here's the function you can see

inside the function it's calling the

same function so a recursive function

it's always going to have a base case

that's this

and the recursive case so the base case

is when we're going to leave the

the recursive function so if n is equal

to one we're going to return one and

that's basically going to get out of the

recursive function uh but if n is not

going to equal one then we have the

recursive the recursive case where we're

going to call the function so you always

need to have at least you always have

need to have a base case so eventually

the recursion can stop

if the recursion doesn't ever stop

then you're going to get a recursion

error

basically python by default will halt

recursions at 1000 calls and that's when

you get the recursion error so this is

going to get the factorial three but

let's just do this a few more times so

you can see the difference so three

four

five and now we'll test this out

6 24

120.

okay now let's talk about decorators

so decorators in python are a way to

change enhance or alter in any way how a

function works decorators are defined

with the at symbol followed by the

decorator name just before the function

definition

so for instance let's say we have a

function

hello

and it's just going to be the simplest

function we're just going to print

hello

uh so

to make that to add a decorator i'm

going to put like this an at sign and

then the decorator name in this

case we're going to type in log time so

the function has the log time decorator

assigned so

whenever we call the hello function the

decorator is going to be called a

decorator is a function that takes a

function as a parameter wraps the

function in an inner function that

performs the job it has to do and

returns that inner function

so for instance i'm going to create

another function here that's going to be

the log time function

and now we we can do something before

and after the function like for instance

we can say

print

before

and then after

we are going to print

after

now if i run this

oh and we have to call the function

that's always important

now if i run this

before hello after

so you're going to often use decorator

functions when you want to change the

behavior of a function without modifying

the function itself so a few good

examples are when you want to add

logging test performance perform caching

verify permissions and so on

you can also use one when you need to

run the same code on multiple functions

okay now let's talk about doc strings so

doc strings

[Music]

documentation is hugely important not

just to communicate to other people what

the goal of a function or class or

method or module is but it's also it

also communicates to yourself when you

come back to your code like many months

from now you might not remember all the

knowledge you were holding in your head

when you wrote the code so at that point

reading your code and understanding what

it's supposed to do

so that at that point reading your code

and understanding what it's supposed to

do will be a lot more difficult so a lot

that's one of the reasons why people add

comments so another way is to use a doc

string so let me show you what a doc

string looks like

the utility of a doc strings is that

they follow conventions

so they can be processed automatically

so this is how you would define a doc

string for a function

basically you're putting the three

quotation marks here three quotation

marks there and then this is a

description of what the function is

this is how you would define a doc

string for a

a class and a method so

got the class this is what the class

does is this is what the method does

and then it's also common to

add docs place a doc string at the top

of the file so if you put a doc string

at the top of the file it's going to

look like this

and it's going to explain what the file

is all about

and docs stock strings can also span

multiple lines just like this is a

multiple line docs string as long as it

has the three quarts three quarters at

the top three quarts at the bottom

and then python will process the doc

strings and you can use the help global

function to get the documentation for a

class a method a function or a module

for example i'm going to go to the

bottom of this and i'm going to say

print

help

and then i'm just going to type in

dog now i'll run this

and let me just run it again

so now you're going to get information

about the dog we know that the dog has a

name and age it's a class representing a

dog and the has these specific

methods

and then it says more we can get more

information data descriptors defined

here we have

and this is just going to give us all

this information

about

the dog and we and so that's why it's

good to use doc strings because there

are specific standards and it makes it

easier to get information using

different helper methods

and standards allow

and standards allow us to have tools to

extract doc strings and automatically

generate documentation for your code so

besides just this help functions there's

a lot of other methods to pull out these

docs strings and get information about

your code and next we will learn about

annotations

python is dynamically typed so we do not

have to specify the type of a variable

or function parameter or a function

return value

annotations allow us to optionally do

that so if we want to actually show what

type we're expecting for different

values so here's a function without

annotations and then here's how we would

make it have annotations so uh we want

to make this function only accept an int

so i'm going to put colon int

and then after here

i'm going to put

actually before the colon here i'm going

to put a little arrow here

and then i'm going to put in int so now

we're specifying that this function

receives an int and then it's also going

to

return an end

and you can do the same thing with

variables so if we have a variable if i

had a variable called count and was

equal to zero i can add an annotation to

make it be an int like that so now

we're specifying that this variable is

going to be an integer

python will actually ignore these

annotations a separate tool called mypi

can be run standalone or integrated by

ides to automatically check for type

errors statically while you're coding

it'll also help you catch tight

mismatched bugs before even running the

code

a great help especially when your

software becomes large and you need to

refactor your code

okay now we'll talk about exceptions

[Music]

it's important to have a way to handle

errors and python gives us exception

handling to do so so for exception

handling you would wrap lines of code in

a try block

and then inside this block you'll put

the lines of code and then if an error

occurs

python will alert you and you can

determine which kind of error occurred

using an accept block so

we're we're trying some lines of code

here and then we're checking for a

specific error and then if that error

happens we would handle that error but

if a different error happens then we

will handle the different error you can

also catch

all exceptions

using an accept without an error type so

at the very end you could just do accept

and then if you don't have an error type

then it's going to handle the rest of

the exceptions and just to make this

clear this is just an example where it

says air one you have to put a specific

error in that spot

you can also put an else block at the

end to handle that that will run if the

no exceptions are found so if there are

no errors in this code that's right up

here we can have an else and then run

specific code at the bottom that that

runs if there's no errors

and then we can have a finally block so

anything

in a finally block is going to just

always run at the end whether or not

there are exceptions or no exceptions

the code in the final block is always

going to run the specific error that's

going to occur depends on the operation

you're performing for example if you're

reading a file you might get an eof

error would just look like this eof

error which means end of file

if you divide a number by zero you'll

get a zero division error if you have a

type conversion issue you might get a

type error so

let's try this code

so i'm going to just delete all this and

we'll do result

equals 2 divided by

0 which

you cannot do

so just print the result

and if i run that

we'll see this error over here

zero division error division by zero so

it's going to get an error when we run

the code and then whenever there's an

error anything after the error occurs

will not happen so we're not going to

print the result because there is

because the this

this line resulted in error so we're not

going to run the following line of code

so now let's try adding that operation

in a

try block

so i'm just going to paste it all in

here and so we're putting the operation

in a try block and then we're expecting

a zero division error

where we'll print cannot divide by zero

finally we will set the result to one

and then print the results so let me

just run that code see cannot divide by

zero and then we print one we because we

set it in the final block here

so this try block lets us recover

gracefully and move on with the program

you can raise exceptions in your own

code too using the raise statement so i

could type in raise

and then we can raise an exception

intentionally

and error

so if i just run this

it will say

an error because that's what we typed in

so you can make it say anything you want

for your error

and this raises a general exception and

you can and you can intercept it

just like this so i could say

try

and then we raise that exception

and then we can do accept

exception

as error

and then we can print

the error

okay if i run that

so now instead of we don't see all that

red anymore because it's not stopping

our program because of the error but

it's now printing the error message

right here

just like that

you can also define your own exception

class extending from exception so i

could do class

dog not

found

[Music]

exception

and then i will

extend from exception

[Music]

and then i can just put

pass for this one here let me adjust

that

so

pass here just means nothing and we must

use it when we define a class without

methods or a function without code so if

you're not going to put anything so this

is just an example so i can just put

pass to mean that we're not going to

have any code in this

so now we can try it out so i'll just

paste that uh so we're going to raise

dog not found exception and then if

we're we're going to

candle this exception and just print dog

not found so let's try that yep dog nut

bound because it raised this exception

here we can also actually do something

in the exception

so if i can say print

inside

and then i'm going to run that

and i'll do inside and dog not bound the

with statement is very helpful to

simplify working with exception handling

for example when working with files each

time we open a file we must remember to

close it with makes the process more

transparent so let me show you some

example code without the with statement

so

we're not going to go into a lot of

details about working with files here

but i just want to kind of just give

this one quick example so if we're going

to be working with files in python so we

can open the file and then we can read

the file we can print the content from

the file

and we

we're going to try that because there

could be an exception and then finally

we're always going to make sure to close

the file

but

an alternate way to do it would be like

this

um so with

we're going to open the file as file and

then content file.read and then print

the content and with using with it's

going to make sure to automatically

close the file at the end in other words

we have built-in implicit exception

handling as close will be called

automatically for us

and with can do a lot more stuff as well

this example is just meant to introduce

its capabilities

now let's talk about third-party

packages

and we're going to talk about pip so

let's learn how to install third-party

packages in python using pip the python

standard library contains a huge number

of utilities that simplify our python

development needs but nothing can

satisfy everything

that's why individuals and companies

create packages and make them available

as open source software for the entire

community so the modules are all

collected in a single place called the

python package index which is available

available at pipe.org that's

pi

pi.org

and they can be installed on the system

using

pip there's over 270 000 packages freely

available

most computers are already going to have

pip installed and it already has pip

installed so let me show you how you

would install a package we'd have to go

over to the shell here if you're not on

replit you can just do in your terminal

and i'm going to clear this here

and i'm just going to do pip

install and then you can put the name of

a package for instance one popular

package is called the request package

it's an http library so i can do

requests

and let me just

so you can see i have to make sure i

spelled that right

[Music]

and it's going to install that package

right now so once the we install this

package it's going to be available for

all our python scripts because packages

are installed globally and the exact

location depends on the operating system

you can also upgrade a package to its

latest version by doing pip install

dash u and then i will just put the

package name so in this case we'll just

do request again

and then it's going to just update it to

its

latest version

in this case

it updated from

2.28.0 to 2.28.1

you can also specify a specific

version when you're installing

and then you can also uninstall a

package so i'll do pip

uninstall

requests

and then i can say that yes i do want to

uninstall that

and then once when you have a package

installed

i'm just going to install request again

and then you always have to make sure

you spell it right

so once you have it installed you can do

pip show

requests

and then it's going to show some

information about the package

so see we can see the name the version

uh the summary and then a bunch of the

author and a bunch of other information

about the package

okay i'll just clear this

now we're actually gonna backtrack a

little bit we already talked about lists

but i'm gonna talk about a more advanced

way of using lists called

list

compression

list compressions so list compressions

are a way to create lists in a very

concise way so suppose you have this

list like this it's a list of numbers

and we'll just do

one

two three

four five

so we can create a new list using a list

compression

composed by the numbers list elements to

the power of 2.

let me show you what i mean so let's get

make a new list numbers

power

[Music]

2

equals

and let me just show you how you do this

list compression

so this is the list compression syntax

and if i print this

[Music]

we can see that now we have every

element in the list to the power of two

list compressions are a syntax that's

sometimes preferred over loops as it's

more readable when the operation can be

written on a single line

so for instance this is how you would do

it uh with a loop so what we do in a

single line up here we take a few lines

to do

in the method with a loop so list

compression just makes it

simpler

and then you can do the same thing with

map as well

but again it's just a little more

complex sometimes it's just simpler to

use a list compression using the syntax

here

now let's talk about a few more advanced

topics in regards to functions

polymorphism

polymorphism generalizes a functionality

so it can work on different types

it's an important concept in object

oriented programming so see in here

we've defined the same method on

different classes so the dog has eat and

the cat also has an eat method

then we can generate objects and we can

call the eat method regardless of the

class the object belongs to and will get

different results so we create the two

objects the dog and the cat here

and we're calling the eat method on both

objects and if we run this you can see

what we're getting eating cat dog food

eating cat food and so you could do a

lot of things with this like maybe you

have a list of different animals and

then you can

loop through that list and call the eat

function or the eat method on each

animal in that list and they don't have

to be the exact same class to be able to

still run the eat method

so we build a generalized interface and

now we do not need to know that an

animal is a cat or dog we just need to

know that we can call eat on it

now let's talk about

operator

overloading

[Music]

operator overloading is an advanced

technique we can use to make classes

comparable and to make them work with

python operators so let's take this

class dog so here's a dog class and you

can create a dog with a name and age

then we'll create two dog objects we'll

do roger equals dog

and we can pass the name

and eight

[Music]

and then i'll make another one

we can use operator overloading to add a

custom way to compare these two objects

based on the age property

so like how could you compare

this dog and this dog well we can make

it possible with operator overloading so

let me just show you this example here

so

this

function here gt

is going to compare things as to figure

out what what is greater than you can

now we'll be able to compare

two dog objects to see which one is

greater than the other and this is how

we're going to figure out which is

greater than return true if self.age is

greater than

other dot age which is the other one

you're comparing it to else false

now we can

do print

roger

is greater than sid so we're trying to

figure out this is true or false if i

run this it's going to say true roger is

greater than sid because 8 is bigger

than 7. but if we like put 9 here run

that

now it's going to be false

so in the same way we define this

underscore underscore gt underscore

which means greater than we can also

define methods for like less than

lower or equal to greater equal to or

not equal

and then you can also create methods to

go with different arithmetic operators

so

we can do add subtract multiply

division floor division mod power so you

can see all these different ones you can

make it respond to the different

operators so the example was just a

greater than operator but we can

make functions to show how it's going to

respond to all these different

operators there's even a few more

methods to work with other operators but

you get the idea we've learned a lot

about python and now we're going to

bring a lot of what we've learned

together to code a blackjack card game

and in the process we'll learn about

object oriented programming in python so

we'll start by creating a new python

project on replit

and i'm just going to close this tab

here

and i'll zoom in just a bit

and just like our first project

i'm going to

say what i'm about to do and i want you

to see if you can do it on your own

before i show you how to do it

and with all you've learned so far a lot

of this you're probably going to be able

to figure out on your own as i give you

the instructions without even seeing how

i how i do it but then you can come back

to the video and see how i do it

or i guess you can just watch and not

even try to do it yourself but you're

going to learn a lot more if you try to

code this by yourself along with me as i

do it but right before i do the

different steps

so the first thing we're going to do is

create a

variable called a suit

and set it equal to hearts and then a

variable called rank and set it to equal

k for king

and then a variable called value and set

to equal

10.

[Music]

okay simple two variables equal to

strings and one variable equal to an int

so now we are going to add a print

statement and print the the phrase your

card is with a colon at the end

and then we'll add another print

statement and print the rank

so now we're just printing the variable

here

and we're going to be doing a lot of

refactoring as we create this program

let's refactor this so it's just one

print statement that's going to print

your card is colon space and then the

rank

so we are going to be doing

string concatenation

[Music]

just like that

so

you can concatenate as many strings and

variables as you want so let's update

the code so that the print function

print prints your card as

k

of

hearts

so we just need to add

of and we have to make sure we put

spaces on each side of the word of

and then

suit

and let me just

adjust this here okay as you know you

can use a list in python to store

multiple values or items at a time so

above the suit variable

create a suits

variable and assign it to a list of

suits in this case spades clubs hearts

diamonds

we learned about how you can use the

bracket operator to access a specific

element in a list the number inside the

bracket specifies the index of the list

to access remember the indexes start at

zero

so you update the suit variable so that

the value of hearts come from comes from

the suits list

now we'll practice a for loop so add a

for loop to the end of the code that

prints each suit

and then we'll just test this out

i really hope you actually are following

along and trying it out right before i

show it to you that's how you're going

to learn the best here so spades clubs

hearts diamonds

now this next thing is is just to see if

we can do it so it's not going to be

part of our final code but right before

the loop we just added see if you can

add another item to the suits list

that's the string snakes

there's a few different ways to do it

but we will use append snakes so this is

just going to append the word snakes at

the end

of the list so if i run this we can now

see snakes at the bottom

okay now we're going to start the

process of representing a full deck of

cards with python code

so we're going to actually get rid of a

lot of this we're going to get rid of

all this we're just going to have the

suits and then we're going to have this

for loop at the bottom we're going to do

a lot of refactoring as we go mainly for

educational purposes but also so we can

get the a really good blackjack game so

we have a list of suits after that we're

going to create a list of ranks that's a

2 3 4 5 6 7 8 9 10 j q

k

[Music]

now before the suits list

create a new variable called cards and

assign an empty list to the variable

you can an empty list is just two

brackets with nothing inside

now in the cards list there should be an

item for each card in the deck each item

in the suits list should be combined

with each item in the ranks list for a

total of 52 items or cards

let's work our way up to that so first

we'll update the print statement in the

for loop so that it prints a list with

two elements the first element should be

suit and the second should be the first

element of the ranks lists so this

should print

an ace in every suit

so i'm going to update this so it's

going to be a list with

suit

and ranks

the first item is going to be at index

zero now let's print that out

so we got them these four right here

now instead of just printing an ace in

every suit let's print every rank in

every suit

this can be done easily with a for loop

nested within another for loop so inside

the for loop add another for loop that

loops through the ranks

then update the print statement so that

it's not just printing the first element

in the ranks list but it's printing the

rank from the for other for loop

so let me show you what i mean

we're going to do four

for rank and ranks

and then

we have to make sure to indent this

print statement so it's inside this

other for loop

and this is now just going to be

rank so it's going to print the suit and

rank and i'll just run that

and now we with this nested for loop we

have every card at every rank in every

suit all 52 cards are printed as two

item lists

an element in a list can be another list

so instead of printing 52

two item lists

let's append those 52 cards to the cards

list

so we already have the cards list here

it's empty but i'm going to do

cards

dot

append

and so we're appending

this item

all these items to the cards list

so let's check what the cards list looks

like by printing out printing it out at

the bottom remember make sure this is

not indented at all and we'll do print

cards

and i'll run that

and then here it is here so this is the

list it's not

one there's just a comma between each

item in the list here

you may notice that all the cards are in

order in the cards lists

for a game like this though the cards

must be shuffled so to help with this

import the random module at the top of

your code so that's just we just do

import

random

[Music]

now we'll be able to use the the random

module so this is going to import the

random module which contains a variety

of things related to random number

generation

and as you probably remember when you

import a python module it allows you to

use additional commands in your code

specifically we're going to be using the

random.shuffle function

so right before at the end where it says

print cards we're going to call

random.shuffle and pass in the cards

list to that function

and then if i play this here or run the

program we can see that these are not in

order anymore see ace of spades

three of spades king of diamonds jack of

hearts so these are no longer in order

because they've been shuffled now let's

remove a single element from the cards

list this is similar to dealing a card

from a deck and this can be done with

the pop method

so after the cards are shuffled

let's create another card variable and

just

pop off a card from the cards list and

put it into that variable called card

and just print that card

so i'll do card

equals cards dot pop

and then instead of printing all the

cards i'm just going to print a single

card i'll run the program

see every time i run the program you can

see we're getting a different card we're

dealing a different card because it's

been shuffled

so we've already learned all about

functions and now we're going to create

a function

so create a

function called shuffle that just has

the single line that shuffles the cards

so it's just def shuffle

and then i just have to make sure this

is indented so now when we call the

shuffle function it will shuffle the

cards

so right before the print statement

call the shuffle function and instead of

just printing the single card print the

cards

so do shuffle

and then i will print all the cards and

let's just try out the program

and we can see there was a problem it's

because we didn't put the the colon here

so that's an important part of creating

a function is putting the colon there

now we'll create another function called

deal and we'll put this line inside the

the deal function

so we're going to define deal

and i'll put the colon this time and

make sure to

indent that

and we can see this has a orange

squiggly line underneath it because

variables can only be accessed in the

context that they were created so the

card variable will not be available

outside of the deal function

you can get a value out of a function by

returning a result using the return

statement so at the end we're going to

return the card

okay now we've taken care of that

squiggly line there so after the shuffle

function is called we'll call the deal

function and assign the return value to

a variable named card then we'll update

the print function to print card instead

of cards

so card

equals

deal

and then we'll just print

the card

and again we

see a different card every time we run

the program

what if you want the deal function to

deal more than one card well let's

refactor the deal function to and accept

to accept an argument so any number of

arguments can appear inside the

parentheses when a function is created

separated by commas inside the function

the arguments are assigned to variables

called parameters so start by making it

so we'll start by making it so the deal

function takes an argument named number

then we'll make sure when we call the

function we use the new parameter

by

making it so we're gonna deal two

so i'm just gonna put number here it's

gonna it's gonna deal a number of cards

we're gonna deal two and i just didn't

say this before but now instead this is

not one card anymore so we're going to

update this to be cards dealt but

there's a special shortcut you can

either it's going to be

command or control d

and now i'm actually selecting the card

two different times see i i now have

multiple cursors here so basically i

selected the word i double clicked to

select the word then did command or

control d now it's selecting two words

and now i can type in

cards

delt

so now i can type in two places at one

time so that's a cool thing that you can

do in replit and you can do it in many

other code editors and i'll run the

program but it should still only deal

one card because even though we're

passing this parameter into here we're

not doing anything with it yet here so

we want to update the deal function so

it's going to return a list of cards

instead of a single card

in the first line of the function create

an empty list named cards delt then

update the last line of the function to

return cards dealt instead of return

card so let's do that really quick we're

going to do

cards

dealt

is going to equal an empty list and i'll

just copy that and paste it

right here

now do you remember how to use a the

range function with a for loop we talked

about it earlier in the course we just

briefly touched on it but let's create a

for loop that's going to

add a card from the deck

for each

card dealt

so we can do that by creating a for loop

for x and range

number now this is a common thing you're

going to be doing in python creating a

for loop that's going to be in range

number because now it's going to loop

this many times it's going to loop this

many times which is the number we passed

in here and we're going to do a few

things in this for loop

first we are going to

actually do this what we already have

card equal cards dot pop and then we'll

do cards

delt

dot append

card

so now just this card that we popped off

the deck we are appending it to the

card's delt and then we're returning the

cards dealt here

so down here in the code

let's separate out a single card from

the two cards dealt

so let's create a variable called card

and set it equal to the first item in

the cards delt list

and then we'll just print that card

instead of cards dealt

so we are going to do card

equals cards

delt and then we just use the brackets

and put 0 to get the first item in that

list

and then we'll just print

a card

now i'm just going to test out the

program we're still just seeing a single

card here but it's doing a lot more

behind the scenes now

so now let's separate out the rank part

of a single card so after we create the

card there let's create a variable named

rank and assign it the rank from the

card

so we'll do rank

equals card

and then i have to get index one because

the rank is this that's the nine here

the second item in this card is the rank

so each rank has a different value in

blackjack the value of an ace or an a in

this in this program is 11

or sometimes it can actually be one it's

going to be 11 or 1 but we'll get to the

one part later so jack j q and k which

is jack queen and king have the value of

10 and then the numbers have the value

of the number so we need to check what

the rank is and set the value depending

on the rank

so this is the perfect time for a

conditional statement specifically an if

statement

before the final print statement or

program we're going to add an if

statement to check if the rank equals a

and if so we'll assign 11 to a variable

named value

so we'll do if

rank and i hope you remember if you're

flying along i hope you remember to use

two equal signs instead of one equal

sign here so if rank equals a

then value is going to equal with a

single equal sign is going to equal

11.

now if rank does not equal a we'll want

to check if it equals j q or k

that can be done with an elif statement

for now we'll just create an if

statement to check if the rank equals j

and then if so we will set the value to

10.

so we talked about the three logical

operators and or

and not you can use these three

operators in conditional statements to

check multiple conditions at once so we

want to check if

rank is j or rank is q

or rank is k so update the code with the

the and with the ors

now there can be any number of ls

statements after an if statement but at

the end there can only be a single else

statement

and like we discussed the else is just

going to be if none of the other ones

are true so let's add an else statement

and inside we'll just assign rank to

value because we've already gotten all

the letters out of the way the rest are

numbers and we can assign it directly to

the value

now we'll

instead of printing the card at the end

let's print the rank and the value

so i can just type in rank comma value

and

when that multiple values in a print

statement are listed with a comma

separating them both values are printed

with a space in between so let's test

this out a few times q10 five five 6 6

so we can see every time we press it

it's going to be a random rank and value

now we already talked about dictionaries

in python it's like a list but more

general you can think of a dictionary as

a mapping between a set of indices which

are called keys and values so key value

pairs each key maps to a value so above

the print statement let's create a

variable called rank

underscore dict for dictionary and

create a dictionary with two items

a key value pair for the rank and a key

value pair for the value

so we have the string rank here and then

the actual rank variable string value

and the actual value variable

before we are

printing the rank variable and the value

variable but let's update this code so

we're actually getting the rank and

value from the rank dictionary right

here

so i'm going to copy that and then i

just pasted that but now i'm going to

use bracket notation

and so i'll put two brackets but then i

also have to surround this in quotation

marks

and then i'm gonna

put the rank dictionary the brackets

and then the quotation marks because

we're accessing that key there

and then i can just run the program and

it's still doing the same thing as

before just a lot more complicated as

far as the code goes but it's going to

be good to have more complicated code as

our program is going to become more

complicated as we go

so when writing a program there are many

ways to do almost everything

now we're going to refactor the code to

get the value of each rank without using

an if statement

instead we'll store both the rank name

and value in the ranks list using

dictionaries so let's delete all the

code lines of code after where it says

shuffle

so

here i know we typed in a lot of stuff

there but it was just kind of to

practice and now we're going to practice

a different method of doing this

so now let's create a new card variable

a new variable called card at the end

and let's assign to the card variable

a a single card that will deal from the

deck but we'll make sure that card is

not

in a list so this is a little tricky i'm

gonna do deal and i'll deal one card

but now i have to get

the first item so this is going to deal

one card but the one card is going to

deal is going to be in a list so i want

to get the first item in the list which

is going to be the only item in the list

so i had to put the zero in brackets

here to get that card out of a list

before it goes into the card variable

now we're going to update the ranks list

so here's the the ranks list each

element the list should now be a

dictionary when lists or list elements

are long it's common to put each element

on its own line so we're going to put

each element on its own line and each

element is going to have the rank and

the value so for instance it will be

rank a value 11

rank 2 value 2.

so it's going to look like

this

and i'm now i'm actually going to zoom

out just a little bit and we have all

these they're all these ranks and each

one in this list

is a dictionary each element in the list

is a dictionary

okay now that this is updated let's go

down and just print a card so we can see

now that we've updated that ranks list

so print

card

okay so this is what it's going to look

like coming from

our list

so we got the suit

and then we have the rank that's also

going to have the value here the rank

and the value

we can see every time we click it we get

a random item

now let's update the code so instead of

printing the whole card we just

print the value so in this example the

value is two so we just want to print

this to just that that value so how can

we update this see if you can figure out

how to update this line so only prints

just the value number there

so first of all we have to see that

we're in a list and we need so this is

the first element of the list this is

the second element so wait to start by

getting the second element of the list

which is

index one

and then

we have an object here or a dictionary i

mean and we need to get

so here we have this key value pair so

we need the value at that key so to get

the value of that key we are going to

put more brackets and i'm going to put

value the key of value so now with that

should work let's try it

okay nine

seven see every time it's gonna just

give us the value of the card

now we'll start defining classes that

will be used in order to separate out

different aspects of the game

so classes you may remember provide a

way of bundling data and functionality

together creating a new class creates a

new type of object allowing new

instances of that type to be made an

object can contain a number of functions

which we call methods as well as data

that is used by those functions called

attributes so

we're going to use classes to model

three parts of the game a card a deck

and a hand so far we've mainly worked on

the elements of the debt class

so right after this import statement at

the top

we're going to

make a class a class called

dec and we're going to put everything

that we've written so far in that class

so we're just gonna do class

deck

colon

okay now we just highlight

everything here and then i'm gonna press

tab

to put everything in the class of deck

because everything's

indented a little bit

and then these last few lines of code we

don't need so i'll just delete those

those are just for testing out

a class is like a template you can use

that class to create an instance of the

class called an object

then you can use the instance each

instance keeps track of its own state so

you can update an instance created from

a class and it won't impact other

objects created from the same class soon

you'll see an example of all this to

make it easier to understand

but first let's prepare a class to

create an instance from it

when you create an instance of a class

python automatically calls a function

also called a method in the clast named

init remember we already discussed this

earlier in the course so the contents of

this init method should be code that is

run one time to initialize the instance

so at the beginning of our class let's

create this init function so we'll do

def

underscore underscore init

underscore underscore and if you

remember from before we always have to

pass in

self

to all of these

functions in a class because then it

gets itself is referring to the instance

of the class that we've developed now

we're going to indent all the code

that's not part of the shuffle or deal

function so the code will be part of

this new function so i'm just going to

highlight

all this here

including

the suits here and then just press

tab

so like i said we just added self in

here you should always

all the methods in a class or all the

functions should have self

anything inside the parentheses remember

is called an argument their variables

pass them from the color to the

functions

as i've said all functions in a class

should receive self as an argument and

self represents the instance of the

class by using the self keyword the

function can access the attributes and

methods of the class

so let's make sure to add self as the

first item in the parentheses of the

other functions

so we are going to add self here

and then see how we already have number

here but we're going to hit self at the

beginning

and we so we can still

call this function with just

a single number but it's going to also

get a reference to the instance here now

i want you to notice that

the cards here is underlying in

red so before it wasn't when we were

before we made this into a class we

could just access

this cards variable but now we cannot so

let's fix that

inside a class in order to access a

variable in multiple functions also

called methods the variable has to start

with self dot

so we're going to change all instances

of cards in every function to self.card

starting

with this so self dot cards

now this is going to make it so we can

access it in other places and then we'll

change this to self dot cards

and then this is self

dot cards

and then self

dot cards

so now this will be a variable that's

specifically associated with the

instance of the deck that's created and

then we can access it in all of these

other methods

okay we can now create an instance also

called an object of the deck class so at

the very end of the code

let's create a variable called deck 1

and make it an instance of the deck

class

so to make sure i'm not indented at all

and i'll do deck

1

equals

deck there we go

now since we created cards with

self.cards

we can access that we can access cards

from the instance of the class so let's

just print out the cards from our deck

one so do print

deck

one dot cards

and we can try that out now you can see

the the list of all of these cards

it has the suit

and the rank and the value for each card

so underneath where we created deck one

let's create deck two we'll create

another instance of another deck

so

[Music]

so now we can call methods on these

instances and you see some of the

methods we have we have shuffle and deal

so on deck 2 right after we create the

deck 2 let's shuffle the deck so deck

2 dot shuffle

and then i have to make sure to put the

parentheses

at the end here

right if we print deck one let's print

deck two or the cards of deck two so i'm

gonna copy that and then we'll print

deck two cards so now we should see that

the deck one cards are not shuffled and

the deck two cards are shuffled so let

me move this over here i'm gonna run the

program

and let's see if we can see that where

deck one so here's where here's deck one

and we can see how it's all diamonds

diamonds diamonds diamonds diamonds all

the diamonds are in a row because

unshuffled but then if we go into deck 2

we can see we have diamonds clubs spades

diamonds hearts so these are shuffled in

deck 2 they are shuffled

okay the deck works

now let's add safeguards to prevent

errors every time the deal function is

called a card is removed from the cards

list

you can only remove a card if there are

cards to remove

so before the program tries to pop a

card off self.cards is to check if the

length of self.cards is greater than

zero

remember you can get the number of items

in a list with length so see if you can

figure that out on your own and then i'm

about to show you how it's done

so when it's going to deal here

right as we're dealing we're going to

add an if statement here so if

the length

of self dot cards

is greater than zero

and we do we don't need this parentheses

here so if the length of self.cards is

greater than zero

then we will

do this we'll pop up a card and add it

to the cards dealt if not we just won't

do anything and then we'll return cards

dealt which could be an empty array if

there were no cards on the deck

now let's add something to the shuffle

function a deck with only one card does

not need to be shuffled so let's add the

appropriate if statement to the shuffle

function

so we'll do

if the length of self

dot cards

is

greater than one

then we will shuffle and then make sure

i'll make sure to put the

colon there

okay

since a card is a separate concept than

a deck

next we'll make a card class

so let's create a card class with an

init function and in that init function

we'll set self.suit to equal hearts

so hopefully you already tried this i'm

going to do class

card

and then i will do def

net

[Music]

and then after the suit will lose self

dot rank and set it to a

so currently anytime a card is created

it will be an ace of hearts let's

refactor the code so the suit and rank

are specified when a card object is

constructed so the init method can take

additional parameters besides self that

are passed into it as objects is

constructed so we'll update it to take

suit and rank

[Music]

now we'll create a special method

that's underscore underscore str

underscore underscore

when a class has this specific method

it's called when print is invoked on an

object from the class

so we want to make it so when we print

an object from the card class it will

print something like 10 of hearts or

three of clubs or something like that

so we don't do print here we do return

it's going to return this to the print

statement it's going to turn self dot

rank

and then we have to get

the rank

[Music]

and we do plus

and then of or to put a string there

plus

self dot suit

so now it's going to return the rank

which is like 2 or a of and then the

suit which is one of these

so let's just try it out real quick and

we go to the bottom we don't need any of

these to test because we're testing

something completely different now let's

do card one

equals

[Music]

card i'm going to create a card and i

have to pass in remember i have to first

pass in the suit so how about hearts and

then i have to pass in the rank but we

want to make it look like these ranks so

i'm just going to

copy one of these here

and then

after we create the card i can just

print

card one

let me clear this and then i'll just run

that j of hearts

oh see i got the j of hearts and feel

free to add a few more cards like this

and test out a few more if you want

okay now we're going to refactor this

slightly you remember way toward the

beginning of this course we talked about

f strings so f strings allow us to put

variables right within a string do you

remember how to do that let's see if you

can update this to use enough string

so first we're going to create a new

string but we're going to start with the

letter f

and then

inside this string we put curly braces

around

the

python code and we don't need these

other strings here so

now we put another curly brace

and then an

ending string here

okay it's still showing these um red

squiggly lines because if i have a

double quote around the strings and

anytime other quotes are in the middle i

have to put a different type of quote so

we're going to use

single quotes okay so now we can make

this a whole a string but we use the

brackets to put the variables right

within the string so now we've updated

that to use an f string

so currently in the deck class the last

line of this init method

appends a list as an item to the cards

list

instead of appending

suit

comma rank

we'll create and append an instance of

the card class

then afterwards when a deck is created

it's filled with cards

so it's just like this we're just going

to delete that i'll put card

and then i'll pass in a suit and they

rank so now we're passing in

card instances

so we're done with the deck and card

classes and we created them in such a

way that they could basically be used

for any card game

now let's make a hand class

this will represent a hand in the game

of blackjack so create a hand class and

add an inet method and initialize a

variable called self.cards that is set

to an empty list so let's go down here

and we can also get rid of all this test

code here

so the new class is called hand

and we'll also make the hand keep track

of the value of the hands a self.value

will start it at zero

in this blackjack game there will be a

human controlled player and a program

controlled dealer so let's add a dealer

parameter in the init constructor method

of the hand class

and then when the hand classes create a

dealer should be set to true or false to

keep track of what type of hand it is

so i'll pass in the parameter dealer and

then we just have to create a variable

and call dealer and set it to dealer so

self dot dealer

equals dealer

[Music]

if you remember from before function

parameters can have default values so we

want to make it so the default value of

dealer is false

so then if

we create a hand and we don't set the

dealer value it will automatically be

false

and i'm just going to take out these

spaces here to make it smaller here

so now a hand can be created

let's give it some functionality we'll

add an add card method and the method

should take a card list as a parameter

and then we need to add that card list

to the cards

so we can use the extend function the

extend method to append each item in

card list onto the cards list so it's

just going to look like this self dot

cards dot append no extend i mean dot

extend

and then we pass in

card list

now let's just add some code to test out

what we have so far so let's create a

deck and then we will shuffle the deck

deck.shuffle

[Music]

now we'll create a hand

now we can add cards to the hand so hand

dot

add

card

and we will deck dot deal we'll deal two

cards into the hand

and then we'll just print

hand cards

okay so this is what how it printed out

i was expecting this to look a little

different

because of this function it print it

should print like that

but i think the reason is

because

this is a list so it's printing a list

not an individual card so let's change

this to print an individual card i'll

print the first card so put zero in

there i'll try it again nine of diamonds

and then we can also print the next card

three of hearts

and then we can also print both cards if

we just copy that and do

hand that cards

zero

handout cards

one

okay ace of hearts and nine of spades so

those are the two cards that were dealt

to the hand

now we'll go back to the hand class and

we'll add the ability to calculate the

value of a hand so let's add a method

called calculate value

and inside the method we'll set

self.value to zero

now we'll take this one step at a time

first let's let's make a for loop that's

going to go through every single card

and inside the for loop we'll just set

the value

of the card to a variable called card

underscore value so i'll do four card

and self.cards

okay so we're not doing anything with

that yet but we're going to in a second

here

now we want to make sure that this is an

integer

so let's convert that to an integer if

you remember you just use int

[Music]

and then put it in print int and then

inside the parentheses we put this value

not just getting the card value for each

card is not enough something must be

done with the variable so let's add that

value

to

self.value

so we'll do self

dot value

and then if you remember from before we

can use the plus equals to

add that to the current value those will

do a card

value

so as you may know in blackjack and ace

can have the value of either 11 or 1

depending on what is better for the

player so there's a few ways to

implement that in code so we're going to

do one way that's relatively simple

first we'll check if the hand has an ace

so let's first create a variable that

will store whether the

hand has an a so just be called hand has

underscore ace we'll set to false and

we'll put it right under here

so we'll do

has ace and we'll set to false and since

we're only going to be using has ace

within

this

method we don't need to use self that

has ace because we're only using it here

and now when we're going through the the

list of cards let's check if the the

rank of a card is an ace and then set

has aced equals true

so i'll do it

if

card dot rank

the rank is going to be equal double

equal sign if it equals ace

after this entire for loop

we're going to check if the card has an

ace

and if the value is over 21

if so then we'll just subtract 10 from

the value

because that'll be the same as setting

the ace to equal one instead of 11.

so we'll just do if has

ace

and

self.value

is greater than 21

to self.value

minus equals

10.

okay and look at this this is something

i don't think i've discussed yet

you could say if has

equals true and self.value is greater

than 21.

but you can also it's like a shorthand

you don't have to say if has ace equals

true

if has a because has ace is just going

to equal true or false you can just say

if has ace so that's just the same as

saying if true or if false

and so we're seeing if both of these

evaluate the true then we will subtract

10 from the value okay now we'll just

add another method to get the value of a

hand called getvalue and the function

will just return self.value

so we're going to make sure that we're

not we're indented correctly and do def

get

value

return

self

dot value

and then i have to make sure i put the

parentheses here

and then i have to remember to put self

since this is a self.value we could call

down here like we could call

hand

value to get the value but it's

generally better to make a function to

return the value so i can do get

value that way there may be some extra

code you want to run in there like

depending on different conditions

you may want to modify the value before

you return it

so it's best practice to create a method

that will get a value like this for you

so currently this value that's returned

could be incorrect

because

if someone's going to get the value the

value has to be calculated correctly

first and like checking for aces and and

other things so let's call

let's calculate the value before we

return the value so i'm going to do self

dot calculate value so

this is something that i think is new

where to call calculate value from

within this we're going to have to call

self.calculatevalue

and self will refer to the instance that

we're working with so we're calling the

calculate value on the instance that's

that is the the hand instance and we're

getting the value and then we're

returning the value

okay let's create another method called

is blackjack and it'll return true if

there's a blackjack and false otherwise

so it's a blackjack if the value is 21.

so i'm gonna do

def

get or is

oh and put self here

okay so this is going to evaluate you to

either true or false and return true or

false depending on whether there's a

blackjack

now we'll create the final method in the

hand class that will display information

about the hand so let's create a method

called display they'll

to start with will just print your hand

[Music]

okay now let's do a quick refactor

instead of saying your hand it should

either say dealer's hand or your hand

depending on whether

self.dealer

is

true or not

so we're going to you to to do this all

in one line we're going to use a few

things that we learned about earlier

including

ternary operators

f strings and going between double

quotes and single quotes and then one

other new thing we are going to make

this into an f string

and then we are going to be using

actually

single quotes and double quotes within

this f string so if you want to use

single quotes and double quotes within a

string

then you can surround it with a triple

single quote so i'm going to delete this

quote and just do three single quotes

and then delete this quote and do three

single quotes and so

we got the

double quote

single quote and now this is a triple

quote so now we can use the double quote

and single quotes within this string

so i'm going to um i'm just going to

delete your right here and we are going

to

put a ternary operator to see if it's

going to say dealers or yours in the

dealer's hand or your hand so

to do some code i'm going to put these

curly braces here

and then to do this ternary operator

we're going to put dealer

and now here so here's the double quote

and here's the single quote so dealers

it will

return dealers

if

self.dealer

so basically if self.dealer equals true

so return dealers if self.dealer

else will return

your

okay that's the line so it's going to be

the dealer's hand or your hand and next

we will add a for loop that will print

out each of the cards

so

for card and self.cards

print

card

and then finally if the player is not

the dealer it should print value

and then a colon and then print the

value of the cards so to do this we can

actually use the the not operator so

if not

self.dealer

[Music]

then we will print

and we'll print value

value

and then i can just put a comma to print

two different items so the string and

it'll print self dot get

value

and it's gonna when you put a comma and

two different things it's gonna put a

space in between

and then finally we'll just add an empty

a print statement that will print a

blank line

okay let's test this out by

instead of printing this we are going to

print

hand

dot display

to see if this all works how we thought

it was going to work

so your hand k of spades two of spades

value is 12. so it's actually

calculating that correctly because

that's 10 plus 2 is 12 and then it's

going to print none which indicates that

we did something wrong which is that we

did not need to print this because hand

display display already prints so now

just call hand.display

okay so now it doesn't put none or

doesn't yeah it doesn't put none at the

end so that looks right

okay when you're playing blackjack you

don't get to see

everyone else's cards

so

we're going to update this so when the

dealer's cards are printed during the

game

only the second one should display

the first card should display as hidden

so in this for loop

when we're displaying the cards

we're going to need to get access to the

card index since that will determine

which to display

since we're only going to display the

second card

so let's start by updating this for loop

so we can get access to both the card

and the card index

we briefly touched on this earlier in

the course we're going to be using the

enumerate function

so

when it's for card in

and now i'm going to type in enumerate

and i'm going to pass in self.cards

and this is going to return the index

and the card for each card so i'm going

to type it index

comma

and so

in we're getting the index and the card

for all the items in self.cards

and so now we just have to update what's

in the for loop

to print

hidden

if it's the first card and it's a dealer

so we'll do

if index

equals zero and self.dealer

then

we will print

hidden

and then we can use an else

any other time

and let's make sure this lines up

correctly any other time we will print

the card

so

what we did wrong here is this should be

double equal sign i did almost did the

the main mistake you always have to

watch out never use a single equal sign

when you're checking equality

because that's the single equal sign is

the assignment operator so if index

equals zero and self and we it is the

dealer then we'll print hidden

so in our version of the game at the end

of the game

that all the dealer's cards will be

shown so you can see what the dealer had

so to do that we're going to create a

new parameter in this

display method and it's going to be

called show all dealer cards with

underscores for spaces and we're going

to set the default value to false

show

all

dealer

cards

and when the default value is going to

be false

now we'll add it to this if statement

so

we'll add another

and

not

show

all

dealer cards

so

it's going to be hidden if we're not

showing all the dealer cards

but if we are showing all the dealer

cards then this whole if statement will

be false so we'll just print the card

and there's going to be one other

scenario where we're not going to print

hidden if there's a blackjack then the

game is over the person with the

blackjack is just going to win and then

we'll just print all the cards so we're

going to add that to this long if

statement here so we'll say

and not is

black jack

and it should be

self dot is blackjack to be able to call

this method here

and since this is such a long line is

always going to go to this next line we

can do this special thing

we can add a slash here

and then just go to the next line

so

this slash or it's a backslash i mean

this backslash will indicate that the

line continues on the following line

okay we're done creating the hand class

so we'll delete

everything that we were using for

testing before

okay it's time to code the final and

longest class that runs the game so what

i want you to do is create a class

called game and inside the class create

a method called play and inside the

method create a variable called

gamenumber with the underscore for the

space

and set that to zero so class game

and then we'll create another variable

games to play and set that to zero

now we're going to set games to play

to be whatever the user inputs

after they're asked how many games do

you want to play

so you may remember how to do

input from before

so we just do input

now we want to make sure the games to

play is an end so we just need to

convert this to an end

[Music]

okay now let's test things so far so at

the end i will put g equals game i'm

going to create a new game

and then g dot play

okay let's test this

how many games you want to play

five

okay well it's not going to play the

games yet we still have to create that

so there is a potential for an error

here if i do this again and i just put

how many games i put you or some letter

we're going to get an error

so basically anytime someone puts

something that's not a number is going

to be an error

so let's create a try accept block to

handle the exception

and

if they put something that's not a

number we'll

print you must enter a number so let me

arrange this and we've already learned a

little bit about try except blocks i'm

going to put try

and it's going to try this

and then if that doesn't work if there's

an exception

[Music]

it will print

[Music]

you must enter a number

so currently the user gets only one

chance to input a correct value let's

make the program keep asking the user

for a value until the user enters a

number this can be done with a while

loop the while loop just keeps looping

while something is true so keep looping

until the user enters a number by

putting the entire tri-catch block into

a while loop that keeps looping while

the game's a play is less than or equal

to zero

[Music]

oh and i have to make sure i spell

while correctly

okay now let's create the main game loop

this is a new loop that will loop one

time per game played it should loop

while game number is less than games to

play and the first line of loop should

increment the game number by one

inside the loop we'll create a deck

object in a deck variable and shuffle

the deck

now we'll create a variable called

playerhand and set it to a hand object

and then we'll create a variable called

dealerhand and set it to a hand object

but this time we'll make sure to specify

that dealer equals true

okay this next part will be a little

more complicated we'll create a for loop

that loops two times and each iteration

should add a card to the player's hand

that is dealt from the deck and add a

card to the dealer's hand that is also

dealt from the deck

[Music]

okay we just dealt two cards each player

now information is going to be printed

to the console for each game so let's

start by printing an empty line

now we'll print an asterisk 30 times to

make a divider

there's a trick to printing something a

lot of times so i can put an asterisk

in in quotation marks and then just do

times 30.

so it's going to print it 30 times now

we'll print the current game number out

of the total number of games

so it'll be something like game 4 of 10

and we'll use an f string

and then we'll just print 30 more

asterisks

now we'll display the player's hand

and then the dealer's hand

at this point in the game someone could

already have won if they got a blackjack

the code should check if there's a

winner let's put the code to check if

there's a winner in a separate method of

the game class so create a method called

check winner for now the method should

just return false

and just make sure everything's indented

correctly this should be less indented

than the previous line here

the check winner function should take

the playerhand and dealer hand as

arguments

now before this return statement

we're going to check if

playerhand.getvalue is greater than 21.

if so we'll print you busted dealer wins

and then return true and remember once

the program gets to a return statement

none of the following statements in the

block are run

[Music]

now we'll use a few lf statements to

check for various other conditions so

we'll add an lf statement to see if the

dealer got over 21

and then we'll print dealer busted you

win and then return true

[Music]

oh and i just copied all this but this

should be an l if not if

and then we'll add an lf statement to

check if both players have a blackjack

and then we'll print both players have a

blackjack tie

and then return true

[Music]

and then we'll add an elf statement to

check if player hand has a blackjack and

then we'll print you have blackjack you

win

and then return true

and then we'll check if the dealer hand

has a blackjack and then say dealer has

blackjack dealer wins

and return true

[Music]

okay we're done with all the hand when

conditions but the game can also end if

both players choose not to get more

cards so we're going to add a new

argument to the check winner method with

a default value it's going to be game

over equals false

so we'll add game

over

equals false

if it's true that means both players

have chosen not to get more cards now

we'll use the new argument

the string of if and lf statements

should only be run

if it's not a game over and we'll make

sure the line returned false is not in

the if statement

so

here we'll say

if

not game

over

and then i'll just select all these and

put them

in here

so if game over is true we'll check if

the player hand's value is more than the

deal hands value and if so we'll print

you in

so we can do this with an else here

else

if player

[Music]

and then we'll do an lf for if it's a

tie

so this is an lf

and we'll say if these are

equal to each other

and we'll print

tie

and then make sure we have the correct

emoji for a tie

[Music]

and then else the dealer is one

so we'll just do

else

[Music]

and then at the exact same level of

indentation as the else we just added

we'll add return true this will make the

method return true if game over equals

true

now let's go back to the play method

inside the while loop

and then we'll do an if statement and

we'll do if and then we'll call the

check winner function with the player

hand and the dealer hand so let's go

back up here

if self dot check

winner

and then we'll enter the player hand and

the dealer hand

[Music]

so if this is true that means we should

go on to the next game

to do that we do continue

so continue is going to just go to the

next iteration of the loop and the loop

we're on is this loop so when we go to

the next iteration we start a new game

at this point in the game the player

will be able to choose hit or stand

so inside the while loop but not inside

the if statement we just added we'll

create a variable called choice and set

it to be an empty string

the player should be able to keep

choosing until the value of their hand

is over 21. so right under the choice

variable we'll add a while loop that

loops while player hand's value is less

than 21 and inside the loop we'll add a

line to get the choice

that's either going to be hit or stand

[Music]

and then we'll just add this to convert

whatever the answer is whatever the user

put in we are going to convert it to

lowercase

the while loop we just added should also

stop if the user's choice is stand or or

s so we'll update the line that starts

the while loop to also stop if the

choice isn't s or stand so just do and

choice

not in

and this is there's a few ways to do it

but this is kind of a new way that i'm

just showing you here

[Music]

so we are checking if choice is not in

this list and inside the list we have

two elements s or stand so if choice is

not in that if the choice is not s or

stand then we'll continue the loop

and then after the input we'll print an

empty line

also we want the program to keep asking

the user for a choice until the user

enters a valid choice

the valid choices are hs hit and stand

so right after the last print statement

at the same indentation we'll add a

while loop that will keep looping until

the user enters a valid choice

and inside that while loop we'll ask for

input again

but we'll specify it can be h or s as

well

[Music]

so this is going to look very similar to

this line but it's going to kind of

clarify things just a little bit

and then we'll print another empty line

the last while loop we checked if choice

was not in a list

outside of the recently added a while

loop but inside the loop we just added

before that one we'll add an if

statement to check if choice is in the

list hit or h and if so we'll add a card

to the player's hand that is dealt from

the deck

and then right below that will display

the player's hand

outside all the while loops about the

player making a choice we'll check for a

winner we'll use the same if statement

and continue statement that we use last

time we checked for winner so i'll just

copy this

and then

we have to make sure it's lined up

correctly

okay so this is outside of this while

loop so after this all is all done we

check for a winner let's just add an

empty line there to

make it more clear that the while loop

is over

now we'll store the value of the

player's hand in a variable named player

hand value with underscores for spaces

[Music]

and we'll do the same thing with the

dealer's hand

[Music]

remember i could use the command d or

control d to select two words at once

and change them both at the same time

okay the dealer should keep drawing

cards until dealer hand value is more

than 17 so we'll make this happen with a

while loop

and inside the loop we'll make sure the

dealer is dealt a card from the deck and

that dealer hand value is updated

so you can try that yourself but i'm

going to show you right now while

dealer

hand value

is less than 17.

then we will do dealer

hand dot

add card

okay and after this while loop will

display the dealer's hand and when we

call the display method we'll make sure

to set show all dealer cards to true

[Music]

and since it's the end of the game

that's why we're just showing all the

cards

now we'll check for a winner just like

before

then we'll print final results

then we'll print your hand colon and

then the player hand value

[Music]

and then the dealer's hand

now we'll call the check winner function

one final time

but this time it should not be an if

statement and we'll pass in the hands

like before but this time we'll add a

third argument of true to indicate that

the game is over

and at this point in the code the game

is over

so outside the outer while loop and in

the play method we'll add the final line

of saying

thanks for playing

so it's going to be outside that while

loop and we'll put print

and just to demonstrate it i use an

escape character to add a new line so

this slash in is going to add a new line

and then do thanks for playing and when

i line this up for with the while loop i

realize that this entire function should

not be lined up with the while loop

sometimes it gets tricky with um

figuring out the exact right indentation

so if i

kind of go up straight up here

i should say see that this should be

lined up with this play function

so i'm going to come back down to this

function

i'm going to

copy this all

and i'm just going to do shift tab

to indent it all one less

this happens sometimes when running

python code sometimes the indentation

can get all mixed up but that should be

correct now and i think the red squiggly

lines here on the return true are not a

mistake in the code but a mistake in the

error checking because it comes after

that emoji and it doesn't know how to

handle the emoji but it's perfectly fine

for code to have emojis okay let's run

the program and try it out so i'll press

play how many games i want to play i'll

do three

so game of one of three so i can see i

have 17 i don't know what the dealer has

but i'm going to s for stand

okay it's always good to test so it says

deal is missing one required positional

argument so let's go up to

it says line 139 so this can kind of

help us know where to go so let's go up

to 139

and yeah i want to deal a single card so

i'm going to deal one card here

and

were there any other times i did use

deal

i want to

deal one card here

and

yeah i got the deal one up here so i

just think i just forgot the deal one in

those places

so uh thanks to these error messages

whenever you have a problem make sure to

read the error messages and it can often

give you a very good idea of what you

need to do wrong because even says deal

is missing one required positional

argument the number so that can really

help figure out what's wrong with your

code so let's try that again we'll do

three games

and then this time i will hit

and i'm going to stand

okay so now we have another error

so it says 173

and oh this i can already see this is

spelled wrong so let's go to

173

and

make sure i spell that correctly

and make sure i spell that correctly

okay let's try again

how many games you want to play three

i'm going to hit

and hit

okay so the first game

you busted dealer wins and now we're on

game number two i'll hit

and this time i will stand

okay dealer busted you win now we're on

game three of three

and i will hit

and i will stand

and final results your hand 20 dealer's

hand 19

you win

thanks for playing

we just completed this whole game

okay we've reached the end of the course

so you've learned the basics of python

and if you've been coding along you've

written two python programs good luck on

your programming journey thanks for

watching and remember use your code for

good bye bye bye

bye bye

okay
hello and welcome to this python course in this full course you'll learn
everything you need to get started with python python is the most popular programming
language out there and is used for so many different industries like web development data science
machine learning or generally for writing automation programs to automate repetitive tasks
so learning python is definitely a good idea let me give you a short overview of all
the topics i'll cover in this course after giving a short introduction to python
we will start with the basic building blocks of programming the most important data types like
strings numbers lists sets dictionaries boolean data types etc and how to work
with them learn about variables and functions and why we need them
write a program that accepts user input and learn how to validate the user input
using conditionals error handling with try accept
and also learn loops with while and for loops and again why we actually need them you
will learn all these concepts with hands-on examples as a next step
you will learn how to modularize your program by writing your own modules and then see how to use
some built-in python modules with all this knowledge we can then build our next demo project to write a
small program that accepts a goal and a deadline as user input and then outputs the
number of days remaining till the goal deadline within this exercise you will learn how
to use the date time module to work with dates after that you will learn about packages
and comparison of package versus module and we will use an
external python package in our next demo project in which we will automate some tasks for
working with a spreadsheet file finally we dive into object-oriented
programming you will learn what classes and objects are in programming and python specifically and why this
concept is so useful in the final demo project you will learn another common use case with
python which is communicating with other applications over the internet by making a request
to fetch some data from gitlab api in this specific case we will list the
gitlab projects of a specific user so that's what we're gonna learn
if you like this course don't forget to give this video a thumbs up i'm really excited to teach you all of
these so let's get started
first of all python is a programming language just like java or javascript python
compared to other languages has two very big advantages first of all
it's easy to learn it has a simple syntax and it's very easy to set up and get
started with for example compared to java where you need some initial configuration before you
can even start your application but it's equally or even more powerful than java
now what makes a language powerful or how can i say that python is more powerful
well that comes from the ecosystem which means libraries and modules that python
developers themselves develop but also external developers create and maintain
so the more people adopt the language the more powerful it gets because new libraries and so new functionalities
get added to it and the second advantage is that it's flexible now what does a
flexible mean in this case what makes a language flexible it is easy to mold to your wishes
so you are not limited or restricted by the language specifics like syntax or data types or some other
constraints or even library functionalities you can extend python widely and as one of the results
of this flexibility python also became a multi-purpose language
meaning it is used for many different categories so let's see what these categories are
first you can use it to write web applications the popular libraries for that are django
or more lightweight flask python became extremely popular because of the rise of
data science machine learning and artificial intelligence industries and more and more libraries
were created and are still being added for python for all these categories
they are very popular and highly used libraries for data analysis and data visualization
libraries for artificial intelligence projects for things like face recognition voice recognition and a
bunch of very powerful and widely used machine learning libraries
python is also often used for data collection like scraping the web creating web
crawlers that are basically programs that collect data from internet which you can save and then process
later again many different powerful libraries to do all of that and finally automation with python
python has many great libraries to automate devops tasks for example starting from
ci cd pipelines to cloud platforms and monitoring your infrastructure etc you can also write python scripts to
do automated backups cleanups on the servers etc in addition to devops tasks you can also
automate just general tasks with python like when working with excel sheets which is a common use case
in many big companies or automating some tasks on your own laptop
and there are also libraries for mobile development gaming desktop applications but
these are less likely use cases for python because there are better alternatives for that so you see that the use cases
for python are pretty vast and it actually spans several industries and it's mostly
concentrated around data analytics machine learning and automation areas and note that this isn't the case
for many other programming languages usually one programming language is good for just
few things and you should use something else for other use cases so now you see how
useful python knowledge could be and how it can help you in your job but also make you more
valuable at your work and for your entire team i hope you are already excited to learn
python so let's get started
as a first step we're going to configure our local python development environment so the
first thing we need is install python locally on our laptop so first we
install or download python package for your specific operating system and
then basically just click through the installer wizard to install python
locally on your laptop and note that if you're doing this on
windows very important step in the installation process would be to
check the ed python to path option basically that you see here
because by default it is unchecked and you have to check mark it so that after the
installation you'll be able to execute python commands in your terminal
now an interesting note here if you're using mac os like i do is that by default
on mac os there is python already installed so if i do python version
and execute i see that python version 2.7 10 is installed and that is actually
python that mac os the operating system itself is using however for our tutorial and generally
when working with python we want to be using the newest version which is python 3. so we're going to leave that
default python installation alone we're not going to use that or touched it and instead we're going to be
using the python version 3 that we just installed locally
so now if i clean this up and we want to execute python version 3 commands we're going to
do python 3 instead and version and that will give us the
version so that's how we can differentiate between the already installed python and
the newest version that we just installed so just be aware of that difference
now that we have python available locally it's time to download a code editor for python
because we're going to be writing files with python code so we need a proper editor for writing
python code and actually the best python code editor available
out there currently is pycharm which is from jetbrains so that's what we're going to be using
throughout our tutorial so let's go to pycharm it is an intelligent code editor which makes it
much easier to write code so it makes you actually very productive when writing code
and we will see why throughout the course as you can see there are two versions we have the community version and
professional one community version is free and already has a lot of powerful features
but the professional edition gives you additional very useful features especially if you're creating
web applications or scientific projects in python so with professional version additionally you will get
scientific tools that you can use in scientific projects with python but also you get support for
python web frameworks and database integration which can be of course very helpful if you're developing web
applications if you want to get the professional edition jetbrains actually provided me with a code
for my channel to try it out for three months for free just use my code when you install it but
for this demo community version is absolutely fine so i will go with this one and
install it and just click download and once the pycharm installer is
fully downloaded we can just click on it
move it to the application and now i can actually use it locally so i'm just gonna open the
application and we're gonna take a quick tour around pychar
it's actually pretty simple to set it up and there you go we have our pycharm and we can now
create a new project and let's call it my python project
and that's it basically we don't need to change anything else and here you see the location basically
of where this application folder will be created you see pycharm projects folder got created in my users directory
so this is basically very convenient because all my pycharm projects or my python projects
that i create using pycharm will be created in one location and here you also see that python
version 3 that we installed is automatically being used for this project which is
exactly what we want and you see it says base interpreter and python interpreter is basically
a program that knows how to execute python code it will know how to
interpret or translate our python code into instructions
that computer can understand so with this configuration we don't have to change anything
we're gonna create our project so first of all i'm going to make all this a little bit bigger so
that you can see the menu here on the side and the code a little bit better so in preferences
editor font we're going to set the size to 20. if i apply this
right here you see that this code editor font basically got bigger and i also
want to increase the size of this menu font here so in appearance i'm going to
set it to maybe 18 and there you go so basically everything is bigger now so
you can follow along and see exactly what i'm typing and also another note here if you want
to configure your theme basically so if you don't want it to be dark
or maybe you want some other color scheme then you can select it here in appearance you have four themes
available let's actually try this one out and apply and there you go you have a
different theme i actually prefer this one so let's leave it at that so as you see we
have a very simple project with one main main.pi file the extension is for
python files which basically contains very simple code and we're gonna basically just remove
all of these and start from a clean python file state and in the next section we're
gonna dive right in and write our first simple python application
we're gonna start with the simplest example in python to basically learn python syntax and
get started as simply as possible so first of all we're gonna write a very simple
application that just prints some output and in python when we
want to print basically display results of what we wrote we use this syntax where we say print
and here we can pass in basically whatever we want to display and now if i want to see whether this
super simple application works i can run it or execute it with this triangle here and i have the
output so the basically the output is displayed or printed right here and i
see the output is 1. i can display some other values like 200 and run it and there you go
let's say we want to display some text
basically whatever some sentence and again triangle and we have that output here
right so again very simple example of writing python code that basically
displays some information when we execute it
one thing that i want to note here is you see that we write some code
basically in this window right here so in our main.pi
file and when we run it or execute it our code we see some
display in this window so you may be wondering what is this window and why do
we see some output right here the answer to that is that whenever you're working with
tools like pycharm which basically have all the functionality that you need
to write your code and then execute your code you basically have everything in one place
so whatever we write we can execute or run right away now without such tool how
would we write code and how would we execute that code and this will help you understand
what's going on here and to show that i'm going to go back to my terminal and i'm going to create a new file and
i'm going to call it test dot py
we're going to write the same code basically in this file
you can do it in a file editor i'm just doing it directly in the command line and save it so now we have the same
identical file as here but not inside our code editor right
not inside this pycharm tool and we have python 3 available locally so
now how do i actually execute a python file outside this pie chart
i can do that using python 3 test dot p y and if i do that
i get the same output in the command line so basically what you see right here
this whole thing is integrated so basically all in one place where you can write your
code the editor right here where you can navigate your files in your project so basically
this is just a folder on your laptop and you can navigate the files here
and you have the execution environment at the same time so you have to go to
terminal and execute python 3 whatever you have everything in one place and
tools that provide you with this type of environment for different programming languages
for python it happens to be pycharm these are called ides which stand for integrated
development environment integrated because you have everything in one place so you don't
need to use terminal but in addition to this integration you get more cool features
which helps you in writing python code for example syntax highlighting highlighting errors
or code suggestions autocomplete suggestions and we will see those cool features
actually also throughout this course so basically just makes your life as a developer easier
however it's good to understand that connection between executing your files on the
terminal when you don't have such a tool versus executing and working on your
application inside that tool
awesome so let's get back to our code editor a file where we write our code and till
now we have done something really simple like print a text basically and print
a number right and this leads to the first concept in programming
languages which are data types so in python just like in any other programming
language you have data types for text and numbers the text data types
are called strings so everything within the double quotes is basically a string
but note that in python you can also use single quotes for strings so double quotes or single
quotes they both work the same and there's actually no difference between them
and for numbers we actually have different data types so for whole numbers like 2 20
but also 0 and negative numbers as well we have a data type called integer and that's
also how it's called in most programming languages however you also have numbers for
currency for example how much a product costs right so if you have an online shop you would have
prices like this for example so these are basically numbers with precision this could also
be for example when you're shipping something you could have a weight of a package that is also
not a whole number but has a precision so this type of numbers in python and many other programming
languages are represented as float data type
so again you have integers and float data types and if we execute
that you basically see all of that printed as we wrote them
now obviously printing values like numbers and text like this doesn't make
much sense unless we're getting some useful information from our simple program right here right
so let's do something more useful with python now let's clean all this up and let's say we
want to do some calculations very simple logic that basically calculates
how many minutes there are in 20 days
so we have 20 days which have 24 hours per day which have 60 minutes per hour
so this line will give us basically calculation of minutes for 20 days and there you go
that's our number now this makes a little bit more sense because now we have a program that
actually does something for us so basically as you see you can do any math operations on numbers
in python and again in many other programming languages you can do plus minus division whatever
just like you know it from basic math however i want to note right here something that many people think about
programming and maybe are misinformed about which is if you're doing web development
or maybe devops automation with python and not something like data science or
data analytics this is probably an example of the highest
math knowledge that you need for programming in python because even though we're going to use
some calculation examples because they're just good as examples to
show you the basic concepts of python you do not really need any advanced or even
intermediate knowledge of mathematics when programming because it's really not about meth
however what you need is logical thinking and we're going to be doing some of that and
see that as examples so just bear that in mind in case you are misinformed about that
so back to our example we have this number that is displayed here as a result however maybe if we use this
program we don't remember or we don't know what this number stands for if somebody else is using so we want to
add some descriptive information about this number that says this is how many
minutes there are in 20 days so basically we need a line that says 20 days are this many minutes
and this should basically be exactly this calculation right here so how do we put this
calculation basically right here in the middle so that we end up with this whole phrase
displayed right here so how do we combine text and numbers basically or calculation
of numbers and in programming languages again this is not specific to python we would do that using
something called string concatenation and string concatenation is basically a fancy word
for gluing together or combining multiple strings now how does the syntax for that look
like we combine the strings using plus sign so apart from adding numbers obviously
using plus plus is also used in programming for combining multiple strings so in our example we
have three string values and we want to put them all together in one string or one sentence we have
the first string 20 days r and then we have the second string minutes and in the middle the third
string which will be the value of the calculation however if we just put a number here
python interpreter tells us it's not a string it's a number so we need to turn it into
a string other programming languages do that automatically in python we need to do
that explicitly so we need to tell python take this number but not as a number but
as a string and we do that using a syntax
that looks exactly like that so basically we have a non-string value but we're
telling python we want it as a string because it needs to be printed out as a
text basically so if i execute this line let's see what happened and there you go
we have our output just like we wrote it here but you see that there
are no spaces around so basically 50 is just really glued together without
any space around and how do we put spaces around these 50
basically add a space here add a space here now why does that work because this
whole thing for python is a string again because we are putting it within these quotes so
basically any character that you see on your keyboard right now if you put it
between those quotes is interpreted by python as a string
including this space character right so if we execute it again we have spaces around 50 and our
sentence our phrase looks fine and if you're thinking right now this is actually kind of annoying because
first of all it looks ugly and also there's a high chance you're gonna forget it that is absolutely right so in python
again specifically there is a way to do it in a more elegant way using a different
syntax and the more elegant syntax for that let's actually close this is
print and let's write that again and
instead of having these plus we have curly braces and we write
our number inside or whatever non-textual value and at the beginning right here
basically before we start writing a string which starts with quotes we just write the letter f
and you see the syntax highlighting as well basically sees that this is not part of the text
this is non-text value and if i execute it i should see the same output
from the second line and this is really a way cooler way to write this instead of using plus
but this is something very common and also something that you would encounter in most programming
languages so just important to know that this is a syntax for string concatenation as well so we can
basically just remove it and use this syntax for our
examples and also note that this syntax is actually a new addition to python
so it only works if you have a latest python version in our project if you remember we
actually configured and chose version 3.9
and that's why it works for us if you use python 2 for example python version 2
this syntax is not going to work for you we can actually demonstrate it so i'm going to copy that line
and i'm going to change our test.pi
and now if i execute it using my python 3
you see it works fine if i do it with python which is version two point something
let's see what happens there you go syntax error invalid syntax because
python version
2.7.10 so older version basically doesn't recognize this syntax so just be
aware of that so this syntax actually only works for python versions starting from 3.6 so everything
below that every python version basically will not recognize this syntax as we see right here so again back to
our code and now we just have a number here but what we actually want is the
calculation for getting the correct result right so we want again 20 days
in hours and then in minutes and if i execute it you see that the calculation was done
and here we have the full complete sentence with the result in it and if you're curious this f actually
stands for format so this is basically formatting our text or our string in a correct way
awesome so we have this line of code here that basically calculates for us how many minutes there
are in 20 days let's say we want to do the same for 35 days
right what we can do is basically copy that line and replace the values
for 20 with 35 and if i execute it i get the same calculation but for 35
days and we can do that basically multiple times for different values so let's say we
want it for 50 days and we want the same calculation for i don't know let's say 110 days
doesn't really matter and we have obviously different number of minutes for each of these
values and now let's say we wrote this program it's ready and we're using it and at some point we
decide you know what i want this program to actually calculate how many seconds there are for these
provided days instead of minutes so what we would need to do in that case
is basically change the calculation in all those four lines so instead of minutes it should actually
calculate number of seconds in a day right so we have the hours minutes and seconds and we would have to
change the text as well here and we would need to do that for each one of those lines right
so we would have it here
like this and again if we need to modify this for hours or milliseconds or
whatever we basically have to do these changes multiple times right even though if you actually look
at that this is the same exact calculation for each line that doesn't change right if you want
seconds then this is the calculation that you need to do so how can we actually avoid repeating
the same calculation and the same text in our code and the
answer to that is variables so in programming languages we have variables that basically hold values
that will repeat throughout your code that you can set once and
use it in multiple different places so instead of basically repeating this calculation
four times we basically do this calculation once like this
and we basically save this value in a variable so that we can use it
whenever we need right and the way that variables are defined in python
is variable name let's call it two seconds
equals and whatever that value is that repeats itself and that we want to save
into a variable now i want to make two notes here regarding the variables
in python first of all in python defining or creating a variable and
giving it a value like this syntax for that is actually very simple
compared to other languages because you just have the variable name and the value in many programming
languages you actually have to define here some kind of data type for that variable for example if it's a number
like float or integer or string etc in python you don't have to define
that you just have name of the variable simple as that the second one is the naming
convention or standard for the variables so we have two words for example if we name our variable calculation to seconds
right we have actually three words here so variables that are descriptive so
basically they tell you what this value actually is about so they have multiple
words in them you can separate them using these underlines again in different languages
the naming for variables can be different in python this is actually one of the standard ways of defining
variable with underscores which i find pretty nice and easy to read so we're gonna use this syntax basically
throughout the course it will be totally and absolutely okay if we wrote it like this or if we used capital letters instead
but again this is probably the most readable form and this is what we're going to use now
here note that we can decide whatever name we want to give our variable but in python there are
some specific words that have special meaning to python these are called reserved words
so you can't use these words as variable names and we will use some of these reserved
words throughout the course so you will see some examples great so we have our variable defined
here and this is the value that this variable gives us so how do we replace now
these repeating values with this variable so we're going to delete that and again
inside we're simply going to copy the name of the variable so let's
execute and as you see we have our value printed just fine and we're going
to do the same for all those
values and again execute everything works just like before now
you may be thinking if we change this to minutes we would have to change the variable in
all these places so that's our case we can basically just rename our variable something more
generic so let's say calculation to units and this could be
now any unit that we want second meaning it doesn't matter and this is exactly the advantage of
variable because you can name it whatever you want
which basically just describes what this variable is about and now you won't have to change that
again and we can also replace this one here accordingly since it's a text we can
call it a name of unit we can also call it unit doesn't really matter
we're the ones deciding what that variable name is and once we have that variable we can
now replace it here how do we do this because this is actually part of a text a string the same way we
did right here we're gonna delete that and create an expression create a syntax
that basically tells python hey this is not a string this is a non-string
value and you already know this could be either number or variable itself and so we're going to
use the curly braces and the name of the variable and just
like that we have substituted these values here and if i execute it works perfectly fine
and we can do that in all four lines and our code is still
working and this syntax right here with this format at the beginning basically prevents us
or avoids basically saves us from having a bunch
of plus signs here and then space characters etc
this all looks way elegant now and now if at some point we actually decide you know what i want
this program to calculate how many hours there are in the given days instead of
seconds and we want to change the program to do that we could basically just change the calculation here and
instead of seconds we have hours and if i execute there you go we see the changes right
away so this is why when you're programming doesn't matter in which language
including python using variables will be probably some of the most frequent thing
that you do because you always have values that are repeating themselves and you want to write clean code so you
create variables and one of the best practices when creating and using variables is as we're
using actually here is to name your variables so that you later and also other
programmers who are working with you understand what this variable actually does or what type of value
it actually has because if you just look at 24 you would probably not know
what this 24 is about right but with variable you actually know that this actually
represents a number that is used for calculating units right it could
also be more descriptive like units for days but generally another advantage of variable is to
basically describe that value as well that you're using in your code
now another thing you probably also noticed is that even though we're using variables here
so that we don't have to change those values in four different places a lot of
these four lines are actually pretty similar the only difference in those four lines are actually these
numbers right here everything else is exactly the same so what if instead we wanted to
make this code cleaner and basically avoid this type of duplication in our code
right so for example if we did this for 10 different values we would have the same line this long
line basically 10 times right so how do we avoid this type of duplication
so right here we actually avoided duplication for specific values right piece of
string here a whole calculation here but how do we actually avoid duplicating a whole line right the
whole piece of code basically which has multiple different stuff in it not just a value and we do that using
functions so functions are basically blocks of code like this right or basically logic in
code that does something it's not just simply a value but actually does something more
complex that is again used in order to avoid repeating the same logic or most of the
same logic in your code so how do we create functions just like we created variables
here we create functions and the way we do that is using following syntax
right here let's create our first function we start with def so we define
a function just like we define a variable but for function we need this keyword
basically called def and now we can give our function a name just like we gave name to our variable
we can give our function a name and here we can use the same standards like for variable
we can name the function something descriptive something that actually says what this function does and let's call
our function days to units and then we have the brackets
and a column so this line basically defines a function it tells python hey
whatever comes after this is actually going to be a block of code that is going to be
referred to or is going to be named these two units and how do you write a function
i'm just going to copy this one actually here and let's give us some space and again this is very specific to
python we need to indent here with spaces
and i'm going to paste in what i copied inside these two lines basically tell
python this piece of code or this line of code because we just have one line here
belongs to a function called these two units and again we just have one line but this
could be function with hundreds of lines right so i can write whatever i want the next
line all good and then i can do some
calculations and i can basically write whatever logic i want here and all these will belong to
this function so now this logic is inside a function that is
called these two units and we can actually get rid of this
and test our function and here if you noticed we have this yellow line under the
function name that's actually a warning for our code style it says we need two blank lines before
so pycharm has a built-in official style guide for python
that tells you how to style your code or how to write your code correctly now why is code style important well
just like you write code you need to read code from other developers or your own code to understand what the
code is actually doing so it's important that code is easily readable
and this is just another example of how an editor like pycharm helps you to write code so to fix the
warning we're just going to add a new blank line before the function definition
so now what happens if i execute this block of code i have the variables
defined here that i'm using in the function and then we have these two
print statements so what happens if i execute now and as you see in the
output here there is no output right nothing actually got printed so what actually
happened because we have those two print statements that we defined in the function
but we don't see anything in the output and the way it works is whenever you create a function or define a function
like this you actually have to use that function right again this is a similar concept to
variables we have created variables here and we're using that variable in our code the same way we
create a function and we need to use that function how do we use a function or in programming languages it's called
calling a function or executing a function and we do that using the name of the
function like this and as you see in the suggestion as well
using brackets like this so this syntax here basically is
what we call calling the function that we defined right here or using that function
so now if we execute it there you go you see that those two lines got executed and we
have the results here so we're creating variables and we're using that here
we're creating a function and we're using that function here and note the difference between using a
variable and using a function python knows this is a function because we are providing these
brackets at the end right that tells us we're making a function call basically
but as you see now we have these 20 days so this only works for 20 days right what about
other values that we had what about 35 days and 100 days we haven't de-duplicated that right
we have just one case here so how do we use functions so that everything else
except for these two values right here actually stay the same and we do that in
programming by giving our functions some kind of input value which are also called
parameters so instead of having this 20 basically here hard coded as we said here
and here we provide that value of 20 or 35 or whatever that value is
basically whenever we use the function so we are telling python use these days to units
function with a value of 20 or use that function with a value of 35 and way we
define this input parameter in functions is very simply by defining this
parameter between those brackets right so this is where the input we as
programmers define the input parameters so right here how do we define that using our already
familiar variables so basically right here i'm going to define a variable and i'm going to call
it whatever i want i'm going to call it days or number of days
but i'm not assigning a value to that variable right like i did here because i want it to be
assigned whenever i use the function so this basically tells python that a function these two
units can be used using one input parameter which is called num of dates right
number of days so now the last part which is remaining is replacing these values using this
variable right and just like we do it in these two places where we're
also using variables defined here exactly the same way we're gonna remove this and
define a block for non-textual value and we're gonna put our
variable num updates here and
also here so you see now that our function actually doesn't have any fixed numbers
in it instead we're using variables we're using two variables that are defined
outside that function and we're using one variable that is defined within that
function right this variable actually belongs to that function and now as you see whenever we want to
use that function we're telling python hey call this function called days to units
with a parameter an input basically of 35. so now if we execute it
by the way we can also do it here you see 35 days are and the calculation was done here
and hours and now if we go back to our previous example where we wanted to
calculate these for four different values right for different number of days we can actually do the same
so we had 20 then we had 50 and we had 110
right so this basically gives us exactly the same logic that we had previously
but with different syntax right so you see the difference that instead of having this basically
four times we have much cleaner syntax where we actually see what this logic is doing
which is days to units and then we have the number of days that we pass
or give our function as parameter and if i execute this you see that
it was printed four times for all different values we can actually remove this line
and now if we make some change in our function for example we change the
name of this variable we want it to be hours instead of units
we just do it once in one place and that's basically it so whatever
changes we make inside that function and that is actually the big advantage of using functions in
code whatever change we make inside here it doesn't affect how we use the
function because for using the function we only need the name of that function
and the input parameter now probably you're wondering what happens if i do not give my
function a value let's delete those lines and let's say we do not provide any value here
and we try to execute or call our function without the parameter
and let's execute and you see that python interpreter is complaining because we have told python
here is a function called these two units and whenever i want to use that or my
colleague another programmer wants to use that function they have to provide an input value here
right so now whenever python sees the usage of that function and there is
no input parameter that we are giving that function it cannot execute that function right because
basically this value is missing here right and that's why we get an error which also says missing one
required argument so as you see whenever we define a function with a parameter
with input parameter we have to also provide that input parameter another thing that you may be also
wondering is what if i want to provide multiple input parameters to functions
how do i do that it's actually very simple you can do that by simply defining here another input
parameter separated by comma and let's say we want to pass
here something that we want to print out additionally like a custom message doesn't really matter and the same way
exactly the same way as the first one we can actually use it in here we can even create a new
line and basically just print out that message right and note that if you are using a
variable without stream so basically it's just the variable itself we're not using any text
in that case you don't need this format right so you can basically just print it out
directly and now again we have told python i have this function and two input
parameters are required so i also need to pass to input
values whenever i use that function so now let me just pass in some custom
message let's say i'm happy about the calculation or i know i'm going to be happy so let's say awesome and
let's do another calculation and this time i say looks good
and if i execute it you see that i get awesome the first time and then for 35 i
get looks good so you can basically define and provide as many
input parameters as you want common practice and also what you will see in just
normal code basically is just a handful of input parameters maybe one or two
so it's not actually overloaded with 10 parameters
cool now that we know functions and variables why they're used or why are they useful
and how we use them there is one point that i want to mention which is variable scopes in functions
what does it mean as i mentioned previously in this function we're using multiple variables right we're using two
variables that are part of the input right that we provide when using a function and
we're using two variables that are defined outside the function right somewhere else in the code
so variable scope basically means where is the variable that function uses
defined and variable has a global scope for a function if it is defined outside the function
like these two variables right here could be completely in a different file not even in the same
file where the function is so these are global variables so all the
functions that you have in your python code can use those global variables and then you have
local variables local variables are variables that are created within that function right
so these two variables are basically only available inside that function
because it was created within that function so internal scope and global scope
so that means that when we create another function
let's call it scope check because that's what we're going to do we want to test the scope
in this function i can access the global variables like
name of units but i cannot access the internal
variables like number of days and let's actually test that
so i have num of units which is a global variable defined here outside the function and the second one
i have a variable that is defined inside another function right so as i said internal and as you see
right here we already get a red line underneath that says unresolved reference num of days
so for this function basically that variable is not visible it's not accessible it
doesn't exist basically at all and we can even test it out actually
so again if we want to see the results we have to actually use that function like this run the function and
if i execute it you see that we get an error that says name num of days is not defined right it
doesn't know that there is a function like that anywhere in code however it does
recognize the global variable and that means that variables defined outside function
itself global variables are accessible to all the functions and if you have variables defined inside
the function then they're only accessible for that specific function and not for other ones and that means
actually that if num of days variable does not exist for scope check variable we can actually create a variable
inside scope check with the same name and we would have basically no problem at all so this is not going
to be a duplicate because this function doesn't know about this variable the number of days here
and scope check doesn't know anything about variable num of days right here and if we
want to use that function now we have to put provide the value let's do 20 and if i execute
there you go you have name of units and the 20 that we provided so global
variable local variable defined here another interesting thing is that as i said inside the function
body so to say so this is basically whatever is part of the function right in this
indentation is called function body so we can create whatever logic we want inside
that function body so whatever i can do in python generally i can do inside the function
body so one of those things is actually creating variables right just like we created variables
here we can create variables here like this let's call it
myvariable and variable inside function
and we can print that out as well so now we have three types of variables
that we are using in this function we have a global variable
we have internal variable that is passed in as a parameter and we have internal
variable again that is basically defined so the variable isn't provided when we use the function but
it's basically just defined inside the variable and again if i execute this
see hours num updates and variable inside function text printed out like this
and obviously this is just for demonstration but we're going to see more realistic examples of that in our
projects so i'm going to clean this up and we can move on to the next concept
so now let's go back to the example where we calculate number of hours and we do that for four
different values now if you want this application to be really useful for us or somebody else it doesn't help
that we have to fixate here just four different values right the application should be able to take
any value that we basically fit it right so we should be able to
provide any number of days and the program should calculate the number of hours in those days so
what we need here is user input so when we give this application
program to somebody else or use it ourselves it should allow some user input so
how do we write a program that asks for and accepts a user input and then does something
some kind of calculation some kind of other logic based on that
user input accepting a user input from a python application is actually
pretty easy let's get rid of all of these lines first
and we can do that by writing input and this will basically give a user a
prompt to enter some input value now you probably already see from the syntax
that this looks very much like using our days to units function
right in this case with the parameter so input is actually a function that python provides
us with so we didn't have to write this input function right we wrote the days to units function
but input function is available in python so that we can use it whenever we want
and this parenthesis here tells python we want to call an input function and we're calling it
or using a function without a parameter so now we know that we can write
functions ourselves for logic that we need but python has tons of functions
that python developers already wrote and is part of python and we can use it in our
code so that not everybody has to write their own input function logic
and the code or the functions that python provides are again part of this python that we
use in a project and obviously if you're using the latest version of python you will get the latest code
and latest functions that python basically provides
so back to our function execution and let's see what happens when we
execute this program i'm going to run it and in the outputs you actually do not see anything
other than my cursor is blinking here so it's actually waiting for user input
so i can actually type in something here so i can do 20 and enter
and process finished with exit code so i was able to input something doesn't really matter
it could also be a string actually doesn't really matter and program basically
finishes so that's the simplest usage of input however as you noticed here
running this program and basically having this blank output here is a little bit confusing so
if another user is using our program they will probably be wondering what's happening here
so what we can do is in input function we can provide a parameter that actually
tells a user something right like enter a value for number of days or
something similar so that it's not just a blank prompt right so we can do that by
passing in a parameter a string which is going to be our message so we can do a user
enter a number of days and i will convert it to
hours and here you see right now that the program wasn't finished because we
didn't enter anything so this program finished line wasn't output yet and that means the
program is still running it is still waiting for our input and in pycharm in this ide
if you want to terminate the program manually yourself you can click this stop button
and as you see process finished so now we can run the program again and as
you see here we already have a message that we're displaying to the user
so that they can enter the hours right and here we can provide our input
30 and there you go however this doesn't look nice here we actually
want the user to get a prompt on the next line how do we do that
as part of a string we can actually add a new line or newline character basically and
that in programming is actually represented by backslash n and you see
a special highlighting for that one now let's execute and you see that my cursor is on the
next line now and again let's provide a value enter and program ended so we have
now a more user-friendly way of asking program user for their input instead of just showing an empty prompt
and we're getting user input now we're not doing anything with that user input right
that input basically just finishes the program and that's it we're not doing any calculation for that
input so how do we use the value that user enters here
when input function gets executed we do that and this is a very important
concept by assigning whatever result this function usage gives us which is
in this case user input assigning that result to a variable so right now it's
basically executed and it's just wasted right it just disappears so instead we want to save that value
that entered input value in a variable so that we can access it later and we do that by
let's call it user input variable equals so just like we created variables
here with variable name and a value right or even an expression right if we did a
calculation here that will be basically a whole expression whole calculation the same way we can use values
that function execution gives us to assign it to a variable so now
what i'm going to do is i'm just going to print the user input so that we can see what value that
user input variable has so let's execute again it asks for our input let's put 20
and print user input gives us 20. so user input variable value basically
becomes whatever we provide as an input
now that's a new concept and it could be a little bit confusing so let's see another example with our
own function what would happen if we
assigned value of this to a variable
we get a warning as you see here in the editor which is one of the great things about
ides that it basically gives you warnings when something is not correct and the warning says function doesn't
return anything so basically if we want to have some value
as a result of function execution we have to return some value in the function and how we do
that instead of printing the value right away we can actually return that value
using return keyword again you see special highlighting here just like here
because return is a special word that python understands that you want to basically give back
a value this value right here as a result of using the function right so you could
have some logic here doing the calculation whatever and then as the last line you can return
that calculated value and now the warning is gone because we're
actually returning something from the function and when we return
value from a function again we can assign it to a variable so that we can use that
value whatever function returned by referencing the variable and one of the usages will be basically just
to print it just like we did before like this let's
delete it temporarily and test our program
and there you go you see that this function got executed with input 20
this text this display text basically was put together in the function and was
returned or was given back as a result and we saved that
this whole string basically this whole sentence in a variable called myvar and when we print that myvar we see that
value printed out here and again if we enter some other value we would get different
text and again that is actually a very important concept of giving back some results from a
function execution and you saw in our examples that you can have a function that doesn't return a value just print something on
maybe does something else or function that returns some value you can have
both types so back to our example of
user input so now hopefully it makes sense that input function returns
whatever value the user entered as a result and we can save it in a variable and then access it
later again let's get rid of this line and now let's actually do the calculation
on the user input number of days how do we calculate number of days very simple by calling our function that
actually does that so we're going to call our function to calculate the number of hours for
an input and the parameter that we passed in is going to be whatever the user
provided so instead of basically hard coding a value here ourselves we give it a value that user
provided instead so the num of days will be the user input and now again because
this function returns the whole string it doesn't print it
remember it just returns it so when i execute this and i provide in
some value that's to 200 you see that i don't have any output here because we
didn't print anything we basically just returned the value here we didn't do anything with it so the last piece
missing here is to display the text the string that function returns so we save that
return value first let's do calculated value so we save this thing
in calculated value variable and finally we can print it and now let's
execute it and let's see what happens i'm going to type in 10 10 days and let's see what we get now
and you see we have this weird value here as a result of the calculation so what
exactly happened so this part of calculation basically which represents this number didn't do a
proper calculation and the reason for that is because the input value that we get
with inputs function is always treated as a string and not a number so
basically at this place here number of days inputs
10 here is actually treated as a text and not a number and where this
weird result comes from is basically number 10 printed out 24
times so instead of doing the actual calculation 10 times 24
10 is printed 24 times and that's what happens when this is interpreted as a string so how do we make python
see that number see that input value as a number as an integer and not a
text or not as a string and it's actually pretty easy to do on the next line the user inputs again
we saw right here it is a string so we have to make it into a number and we're going to
do that using int and user input
and that process of turning a value from one data type into another is called casting if you remember we
already saw an example of it when we turned a number into a string in the string
concatenation example again from the syntax you should already know that this is a function
call so we're calling a function called int again that python itself provides us with
because we didn't write that function and we're passing in one parameter which is a string and we
should get an integer from that string as a result and we can save that number into a
variable and let's call it user input number and
now we have 10 as a number instead of as a string and instead of passing in that string
user input we can now give our function number that it expects let's save it and
execute let's put in 10 and there you go now the calculation
is correct what i want to show you now is how this user input actually works
without a code editor like pycharm so i'm gonna copy all this code and let's go back to
our terminal and in our test dot pi
i'm going to paste in our code and save and let's now actually
see how the user input works when we execute it in a simple terminal window and as you
see here we have the message first and the prompt is right here so we can
enter a value let's do 25 enter and we have a result 25 days are
600 hours great so our program is working it is
converting the number of days to number of hours and accepts a user input now what
happens if a user enters an invalid value here so for example instead of a positive
value for number of days maybe they enter a negative value like -10 for example and obviously
that input value doesn't make any sense but we are still calculating and giving a value right and
this is another important concept in programming generally
that when we allow users to give our program some input value we also want to
restrict them and basically validate that what they provided as input is a valid value for
our program specifically one that it makes sense like in our case
-10 program still does a calculation but it doesn't really make sense and second it doesn't crash our program
right so now let's see what happens if we enter some text here you see
that the calculation didn't happen because we basically crashed the program
application using that invalid user input does make sense
or an input that crashes our application because the calculation isn't even possible
and we want to avoid users basically either providing a nonsense value or a
value that will crash our application so we need to validate user input
and this is again important concept in program because whenever you allow user input you always
have to validate it so in this part we're going to learn concept called conditionals and we're
going to learn this concept with an example of validating a user input so
where are we going to do the user input validation we can do it in our function right before we
actually do the calculation we can first validate is it a positive number and not a
negative one so user gives us their input we
convert it to a number and then we pass that number to our function so negative 10
positive 10 that is a number basically will be passed on to our function and right here
we can check whether this variable value here is a negative number
or not how do we do that we do that using if else conditional statements so
very simple and intuitive to understand we say if number of days
is greater than 0 means it is a positive number
then we want to do the calculation and return all of this but you see that we have a
red line here so basically whenever we use if condition we have to have a proper
indentation so all of this line basically goes indented for this line kind of the same
way as we indented the whole function body inside the function
whatever logic and whatever code is right here indented below the if condition
will be executed if number of days is really greater than zero so let's try
that again i'm going to execute it let's put a positive 10
you see 10 days are 240 hours got calculated now let's put
-10 as an input and you see none basically no output for us because
this line didn't actually get executed for -10 input value now what if we want
to tell a user hey this was an invalid value and that's why we didn't do the calculation
instead of just showing none we can do that by returning this feedback message or
error message whenever this is not true so whenever number of days is not
greater than zero we want to return something else right another message
and we can do that using else
and the same way as for if we have the indentation and whatever we write here will be
executed if number of days is not greater than zero so here we are gonna return
you entered a negative value so no
conversion for you and here it's time for another special
term in programming that greater than sign is called a comparison operator and we
have three of them we have greater than less than and equals and these are called comparison operators because
they are used in an operation to compare two values and before in this course we learned
arithmetic operations like plus minus divide multiply so again
fancy words for simple concepts but these are the official terms for these so now if someone mentions them you will
know what they're talking about so now let's execute the application
and let's provide -10 and you see that this line was printed
as a feedback to the user so let's go through the flow again user
gives us their input in this case -10 we convert it to integer so now it's -10 integer and we pass it
on to our days to units function and these two units function
basically has this if else statement that's how it's called in programming
and our if else statement validates or checks whether this input is greater than zero
if it is then the function will return this as a result so basically the
calculation with a proper message else so basically if this is not
the case then it will return basically just a feedback message for the user and note
that else doesn't have such a check here we don't check num of days is less than zero and the
reason for that is because it doesn't check for less than zero because it basically just decides if
this is not true else or in that case just do this so we don't need additional check here
now this segment right here where we're doing the check is called a conditional
so basically we're providing our program a condition if this condition is correct
then do something otherwise do something else and that conditional can be true
or false if we enter 10 then this conditional will be true because it's greater than 0 if we enter
-10 then this conditional will be negative it's not greater than 0
and those true and false values in programming actually are represented by its own data
type which is called boolean and in order to show it to you that this conditional either gives true
or false what i'm going to do is i'm going to print
this conditional right before i do the check so for a positive number input this
should print true and if it's negative so it's not greater than 0 this should print false
so let's test it out first i'm going to provide positive 10
and right here you see true because this condition is indeed true
and note that this is not a string that's why we don't need the quotes here so we can basically just put in the
whole expression in a print function and now let's do the same with
negative 10 and you see false and as i said true and false
values belong to its own data type in programming which is called a boolean and again we
can demonstrate that instead of printing it out
we can save it into a variable let's call it conditional check
and in python there is a function called type which checks or prints out
basically a type data type of a variable or a single value so if we
pass it so this will give us data type of conditional check and obviously if you want to see that
result we need to print it so print the whole thing so it doesn't
matter what we pass in this point and right here you see class boolean so this
conditional check here which has a value of true or false is of type boolean
now there are two things that i want to note here the first one is that you see that
i am calling a function here which is type and then whatever that function type
returns which is basically this output here we are printing it
so we have two function calls that are basically nested and that is absolutely fine you
can nest function calls another example of doing this nested function called would be for
example right here instead of assigning these to a variable and then passing it here
we can actually save us that step and in the days to units function call
pass it as a value so this is a perfectly valid syntax and you can do that you can
nest in the function calls and you would not need this additional step and you can do that as many times as you
want it just looks cleaner when you have that syntax a little bit separated and
not have two three four function calls nested so that's one thing
and another thing is we just saw a class boolean type here and let's actually see the same output
for string and number so just for the demonstration let's actually
see the type of string and integer
let's get rid of this for a second because we just want to test so we're going to print the type of
a string which says this should be a string type and execute
and you see class string and now let's provide an integer
you see class int and let's provide a float and there you go we have float
so this is a very handy way of checking the type and we're going to need that actually in a later example
so back to our application and one note about booleans
and conditionals is that you're going to be using a lot of those in programming because they're really
the major or the core part of writing any kind of logic in programming so
you're going to need if else conditions and statements and booleans in your application so it is a very core
concept and we're going to be using a lot of them in our coming examples so let's get rid of
this code right here and one note before we move on here is that the negative numbers are
not being calculated because of this condition now what about zero let's actually try
that out so i'm gonna enter zero which is actually
also valued that doesn't make sense because zero days input obviously will give zero
of any units so enter and right here you see a feedback to user
that says you entered a negative value so no conversion for you and the reason for that is because this
condition here number of days checks greater than zero which means that negative numbers and
zero will not match this condition so they will basically give you this feedback but our
message says you entered a negative value right when we entered zero what if we
wanted to have a specific message for a user if they enter zero and a specific one if they enter
negative value right we want to differentiate between those two how can we do that in the if else statement in programming
we can have multiple conditionals so basically we can have multiple ifs so
how do we do that first we check number of days is greater than zero okay great now we want to check whether
number of days is equal to zero and we can do that using another if here and in python
the syntax for that is el if which basically is a combination of else
and if so if this is not true then we want to check another condition
number of days equals 0. now you know the equation sign generally
is this one right here however when we're checking whether
something equals to something else in programming that equation check is represented with two
equal signs and the reason is because one equal sign is already used to represent assigning a value to a
variable so not to confuse those two actions in programming we have two equation
signs when we want to check whether something equals a certain value and just like here we
execute some logic whenever this condition is true so in our case we want to
tell the user you entered a zero please enter
a valid positive number so now again to go through this logic
flow if the input value is a positive number then function will
return the calculation and the message if it's not a positive number then we will check
additionally whether it's zero if it's not zero then this is a last condition basically
then we know that it has to be a negative number right so let's test this out
let's enter a positive number there you go let's enter zero you entered
zero please enter a valley positive number and let's enter negative one and everything
works perfectly note that you can have multiple alif's between if and else statements and again
note that el if has a condition just like if statement else does not have any condition so this
is like the fallback so if everything previously stated all the previous conditions did not
match so they were all false basically then this is the logic that will get executed
in that case great so we have validated input value
for users and we may feel pretty good about our program because it doesn't calculate
anything for values that don't make any sense however we still have a problem what
happens if a user enters a text instead of a number so basically anything that is not
a number value doesn't really matter basically some text if i enter
you see that our program actually crashed and this is actually a user input that we want to
protect our programs from because we don't want to allow users to
blow up our application right so let's see what happened it actually says that we provided an
invalid literal literal basically means the text itself or a number so basically a value that we
entered for int function that's the problem so this function call basically just
blew up because in function expects a value which is a string representation of a
number so basically ind expects something like this or something like this it doesn't expect
my text or some text so our application crashed on some text input now let's see
what happens if i provide a number but a float number instead of integer
let's enter 19.99 and enter and you see the same error
this function basically returns an error because it cannot convert float into integer as well
so we have a problem here that whenever user enters anything which is not an integer our
program will blow up so how do we avoid that so basically before the int
function gets executed with an invalid value we need to validate this
whole thing and stop our program before that happens so we need the validation before int gets
executed and we can do that right here right so before that line gets executed we're
gonna do a validation and one way we can do that is using our familiar if else statement
so we can say if user input is digit
so again from the syntax you know this is calling a function but note that instead of calling the
function like this so basically just stand alone we have the syntax where we have the
variable dot and then the function name so instead of passing this as a parameter right here in the
function brackets we are passing it as a parameter again but using this syntax right so each
digit function will execute for user input as a parameter
and again in if we have conditions so this will be either true or false it's a boolean and
if user input is digit it's a number basically so basically this will filter
out input values that are text so basically they're not numbers and if the input is digit
then we want to execute this line and also the rest of our application
like this and if it's not true so if the user input is not a digit we
don't want to execute anything in our application we want to stop the execution and want to tell the
user this was an invalid input value i'm not doing anything with my program so that it doesn't crash
so else if not digit we are telling the user your input
is not a number don't ruin my program
so now let's actually test it so i'm going to execute and write some
text and there you go so user input is digit
was evaluated to false so none of these got executed instead the
else block was executed and it printed a message for our user so we basically avoided our
application to crash with this check and if we try a proper number
it works and if we enter 0 for example the application
will get executed and we will get our message from here
so our application is more or less protected and we're not allowing for a invalid
input number you say not a valid number now we know that in programming
there are different types of numbers we have float numbers as well so
let's actually see what ease digit function really checks so let's actually try
to provide a float number instead of integer which is not a proper valid
input for our program so i'm going to type in 19.99 and you see that each digit
is false for a float number so we got the same your input is not a valid number output
for float number as well which is perfect it's exactly what we need and now let's actually try
to enter a negative number and let's see if each digit function returns true or false i'm going to enter
and you see that else block got executed because is digit was false for a negative number
so basically this function filters out a lot of the bad input
for us to protect our application from bad user input and that also means
that we don't need a check for negative values anymore and by the way in python you can actually
have if statement without an else at the end this will work perfectly fine
and this could be our application
however note that in programming we don't put this type of logic directly like this
basically outside a function as a common and best practice we encapsulate most of the logic basically
in functions so as a cleanup for our code
we can take all this and put it into a function so right here i'm going to
create a function and let's call it validate and execute
or something like this and all the logic that i copied
will be just simply pasted in that function like this so now we have the logic nicely
encapsulated in its own function but as you know when we create a
function we have to call that function otherwise nothing happens so we're gonna call it right here
we don't have parameters and we don't have to provide a user input because user input is a global
variable so our function has access to it let's actually test it out
and it works and let's provide some bad input
and it works too so that's actually a proper way of writing code
having every piece of logic in its own function with a proper description for the
function now as a next step i want to show you
also a concept or something that you will encounter very often in code which is nested
if else statements and i'm going to show that example by cleaning up our program a little bit
so as you see here we're doing validation in two different places so we're validating user input here but
also inside these two units function itself so what we can do is we can put all the
validation in one place in this validate and execute function and basically have all the validate logic in here
and let the days to units function just do the calculation and not the validation and
this way our functions and code will be a little bit cleaner and more logically built
so after we validate that user input is digit we convert it into an integer
so right here we have an integer value of the user input so we can actually check whether that
integer value is greater than zero or equal to zero and we can do that
right here without passing it on to the days to units function and just like this if
conditional we're gonna do user input number greater than zero if that's the case
we want the calculation to happen so both of these lines will get executed
only if user input number is greater than zero and else in our case if it's
exactly zero we want to print a message to user you entered zero and remember
we've got the negative numbers already covered using this condition here so that's the one
remaining i'm just going to copy that and paste it right here variable is called user input number so
we'll fix that and we're going to print out that message
so that means we don't need any validation right here we can
simply do the calculation so to go through this logical flow of if
else or nested e-files statements we have the first if right
here also note that indentations for these if else so basically they are on
the same line here same position and the nested if else or in our case alif
they're also in the same position so again first that's the big validation the first one
is is the user input digit in the first place if not we basically shut down the program we
print out a message to the user and that's it if it is a digit then we need additional
validation is that digit a positive number or is it a zero so we do that additional
validation using a nested ifall statement and basically this line gets executed
only if it is a valid number and if it's a positive number and because of that
we don't need any additional validation once the these two units function gets cold
and you probably already think and notice that nested if else statements are not the most
beautiful thing in the world they are pretty ugly actually and especially we have multiple of them or
multiple else ifs in between the function may actually end up looking
pretty bad so it's not recommended to have multiple levels of these nested if else statements in your code
to basically just keep it clean but as i said you will encounter it a lot in programs
in application code because sometimes you just have to write it like this
thing i want to show you here is something called a try accept in python so right here as
you see we're validating user input right and then we're executing this part of code
only if that condition is true what if we had logic here where
there were multiple places where something could go wrong let's say a
function execution could basically just blow up because of a wrong input or even
as an example maybe this is digit doesn't actually cover all the use cases
so maybe there is a value that user can input that will still blow up our program so instead of
checking each such possible scenario using if statements and then doing the actual calculation once
all those things have been validated what we can do instead is basically tell python
something like try executing this part of code here
and if something goes wrong so if any line any function call or any logic
execution fails we want to catch that error and we want to control what happens
with that error ourselves programmatically and then catch logic will be
accept and we're going to specify what type of value we want to catch
basically using this block and the name of that error type is
actually what we saw in the output when we provided some text and a float which
is value error so that's the error that we want to
catch basically so again we tell python you know what try to
execute this block of code here and if one of those lines in that code
results into a value error then instead of just crashing the program basically catch
that error and print out a friendly message to a user
so let's actually try this out and note that try doesn't have any
validation like if statement so when i entered some text here
int function will actually be called with some text and it will result in a value error and
this block will then handle that error so i'm going to enter and and you see
that your input is not a valid number message got printed and the same will work
for a float number that also doesn't convert to integer and
for a proper integer value it will work fine and
again difference between if else statement and using try except is that you can cover multiple such
errors with this whole try except block right so you don't have to do the validation
specifically and that is especially useful for cases where you can't
really validate something using if condition right if there is a chance
that you might miss something in that condition check so basically you just say you know what
just try to execute with whatever value and if error happens then i still got it
covered and an obvious difference between this if else is that here nothing actually crashes
the program the program will still work is just a nonsense value with zero days right
and as you see here we have specified an error type but with try
except what can also do is you can basically say you know what i want to cover any type of air i don't
care if it's value air or some other type of air let me handle any type of air in this case you
can basically just leave it without a specific type you get a warning though that it's too
general however this would work and you will be covering all the air cases with it
but we can go back to our value error and know that in many programming languages this is actually called a try
catch so accept is actually pretty specific for python i personally think try catch
makes more sense because you are catching any error that may happen right here and then basically
handling it in the catch block so if you happen to hear or see try catch in other programming languages
note that this is the same thing as try except in python one thing that we're missing because we
converted that if statement into try except is now we need to validate the negative numbers again
because negative numbers will not cause an error in our application so they're not
covered by this except block here so let's add back
our previous else block and again if neither of these
are true it means automatically would mean that it is a negative number
so let's print that message for a user enter
negative number
no conversion for you
so now we got all the cases covered again so let's try that out -10
and there you go now there is one minor problem with our
application and that is we can only use it once so basically whenever we type in a value
it either calculates it or gives us a message that we provided an invalid
value then the program basically exits so if we want to do a calculation for another value then we have to
restart the application provided value and then do the same so that's not very convenient if we want
to use that program to basically calculate a number of hours for many different values so basically
we want to keep fitting it some different values for calculation
because we don't want to restart the application over and over again so how can we actually make the program
continue after it's calculated the first value so we want the program to basically just
keep running and accepting our values so how do we do that
and we can implement the logic using something called while loop concept of loops in
programming is basically you do the same thing so the same logic gets executed
multiple times in a loop and how many times that logic gets executed is basically
defined in the condition of that loop and the condition could be it should run 10 times or condition
could also be it should run until some specific event happens in the application and
conditions you already know from if else statement conditions are basically logic that
gives you either true or false so condition is checking some logic and then
giving you a result which is either true or false so now the question is how many times do
we want this application to run in our case let's say we want to run indefinitely
right until we actually stop it from here until we kill the program so it means the condition for that
should always be true and for our application
we're going to use a while loop which is one type of a loop and very simple syntax
while and while just like if actually takes a condition this is going to be the
condition for the loop so basically we want to tell the while loop how many times
it should run the logic coming after it and again you know our familiar
indentation these two lines should execute in a loop over and over again with some condition
right here so how many times do we want the program to execute in our specific case well we want the
program to run indefinitely until we actually stop it from here
right from our editor so that means that condition of the loop
that decides whether the next lines should get executed or not in our case
should always be true because if it's false then the loop will stop right no execution
anymore so how can we make sure it's always true we just write true right here and you remember i told
you that true and false in programming languages have their own data types well they are also reserved
words even though this is just text representation basically you see the highlighting here
just like for these other words because python knows this is a boolean value of
true and note that again specifically for python we actually write true with capital t
unlike in other programming languages so this will basically be just a string
so python doesn't know what to do with it but it recognizes true width capital t so we're telling
our loop our while loop the condition is always true
so basically run these two lines indefinitely because the condition will never change it's always going to
be true and the syntax is probably already familiar to you
we have the keyword just like if or try we can actually compare the
syntax to the if statement so we have the while keyword here then we have the condition so this is
the same type of condition as this one right here it's just that with us
is basically fixed true value here it could be true or it could be
false based on the condition and then we have the colon and then we have the indentation
for the next lines so all of these belong to the while loop so that's basically it
we can now execute the application and see that our program runs indefinitely
so this is the first one let's say we enter 10 awesome we have a result
and then we have again the next execution where it's asking for our
input again and we can do -10 now it's telling us we
provide a negative value but we can enter the value again let's enter some
invalid value that should be handled by this value error block
execute it's not a valid number and application basically continues so again as you see
if you have an application that should continue running and basically get user input
over and over again you don't want that application to be crashed at some point by some
bad input you want to catch and handle every type of input so that your
application continues to run and if we want to stop it
we can basically just shut it off here and process finished
now we can do one optimization in our program and this would be to allow users
themselves to stop the application using some specific input value so for example
when they type in exit for example the application should stop only for that specific
word so it shouldn't run anymore so how can we do that so basically instead of having a
condition that is always true we want a condition that says if the user did not input
word exit then continue running the program if user entered exit then basically just
stop it right so we need to change our condition right here so here we want user input is not
exit right so user input is not exit now we didn't learn
how to check for not equals something right we have check for
equality so we check whether input number equals zero or if it's greater than
or smaller than however we didn't learn how to check for not equals not equals in programming and
this is not specific for python is expressed like this
so instead of two equation signs we have an exclamation mark and
equals and if we want to compare it to a string obviously
we type that string in our case it's exit so basically this condition
tells our while loop while user input is not exit
continue running the program so while this is true basically just keep moving on but if
user enters exit this will not be true anymore it will be false so loop will basically break and
application will end now you see that we have a warning on this user input
that we're using here and if i hover over it you see a message that says name user input can be undefined
so it's not always undefined but it can be and here i want to mention again that pycharm because it's an intelligent
editor can give you actually this warning when otherwise in a simple or normal code editor
you probably wouldn't get such a warning so again it helps you in avoiding some of the mistakes that
you might accidentally make when writing code so basically it
detects the errors or possible errors for you and tells you to fix it so again
this kind of intelligent warnings and error messages can be a lot of help when programming an
application and now let's fix that warning so what's that all about
the problem is on the very very first run of this while loop user input
variable itself will not exist why because we're creating that user
input variable on this line first so our application will basically complain
because when our while loop runs for the first time it will not be able to find
user input variable let's actually try that and as you see user input is not defined
so we need to create that user input variable before the first execution of the loop
so right here we're going to create user input so
we're going to create this user input variable before the while loops first run
and it doesn't really matter what the value of that user input variable will be because what matters is the variable exists so
the value is basically just empty and as long as it's not exit the
loop will start running and our application will get executed so again to go through the flow of this
we're creating a user input variable then we're making sure it's not exit if it's not this line will get
executed so we get the input from the user that's going to be our first input and then we call validate and execute
function that basically does all the checks and execution so that's going to be the first run of
that loop on the second run of the loop the condition will get re-evaluated so now the user input is
what the user provided so again python will check is the user input
exit no cool let's execute the program again user will have to enter another
value and then that value will get re-evaluated so note that after each time
that this block of code has run and executed every single value that user will give
as an input will be evaluated over and over again in that condition and while user input
is something else then exit it will run the program if it is exit then the loop will break
so let's actually test that so this is our first message and our
first input let's do 10 it got calculated
let's do minus again calculate it and we can do that
over and over and over again and now let's actually enter exit and let's see what happens
and as you see a process finished with exit code so our application actually
stopped because this condition was not true anymore it was false because we entered exit
so that's how we can allow users to finish the application and two takeaways
here one is a conditional in a loop and the second one is a negative equals
check for values
great so now we have our application that basically allows inputs multiple times
and can be terminated with exit input now what if i wanted to calculate
number of hours for several days but i didn't want to basically just pass it on one after
another because that's just too much effort for me so let's say i wanted to give it
10 different values but i don't want to type it in 10 times right i want that application
to basically do the whole calculation for all those 10 values but i just want to enter that list once
instead of entering each value separately so in this part we're going to learn
another data type in python called list so till now we have learned several data
types like strings for example
as well as integers and float numbers and
boolean true or false and list is just another data type
and the syntax for list is using square brackets and
inside the square brackets we have a list of elements and those elements can again be
either strings numbers or boolean values in our case we want to provide our
application with a list of number of days right so we're going to have
a list of integers like this
and you can have as many values inside the list as you want and these are going to be comma separated and the syntax will look
like this but again as i said you can have a list of strings list of booleans etc so as i mentioned
we want to let user basically provide inputs as a list
instead of those individual values one at a time so i'm going to copy this let's clean
this up and let's actually see what happens if i just input that list as a value
right here and enter you see program doesn't recognize that as a valid number obviously because we
have the check and causes a value error that's why we get
your input is not a valid number don't ruin my program message right here so we want to change
that and make our program actually accept that as a valid input so how do we actually implement it
and let's go through this logic theoretically first before we start implementing it what we
need here is that we want to read this list and we want to do validation and execution for each
value one at a time so that means that validate and execute function needs to
be called for each value in that list right so basically this function for all this
logic needs to be executed for each element now how do we get the individual
elements of the list so you remember the definition of a loop loop is basically executing
same function with the same logic multiple times and the number of times basically
depends on the condition right here we have a condition for while loop and the condition
for executing the same logic for each of those elements is going to be the number of
elements in that list right so we want to execute the logic as many times as we have elements in the
list and for that we have another type of loop called for loop and basically we want to
execute validate and execute function using a for loop the syntax for
for loop is a little bit different first of all we have four keyword just like for while then we have
the element is a variable so we can call that number of days
so this variable basically represents each of those elements in the list
and then we have in which is again a keyword of python so for in basically puts together the
for loop logic in python so python knows what we are trying to execute
and finally we need the list that we are executing this loop on
and our list is our user input and that's our for loop however
again you remember the indentation the logic that for loop executes needs to be
indented so it should belong to for loop so now we can read that for loop
statement as follows for each element which we call we decide
to call number of days in a list called user input
we want to execute this logic exactly what i said before so for each
element in this user input list we want to execute
validate and execute function we don't have a condition written here like we did in while loop
or if statement so the condition is basically implicit right the condition says however many
elements there are in this list that many times that function or that block of code here will
get executed so if i provide five elements you will be executed five times
if i provide 10 elements it will be executed 10 times and that's exactly what we want however
there are still a couple of things we need to do for this application to work properly first of all validate and
execute function still uses user input right here so instead we want it to
use the individual values of the user input because now it's going to be a list and not a number so this
element we can actually call it num of days element this value should be used here
instead right so we're going to use that element instead of the whole user input list
and paste it here so that fixes the first problem and the second one is as you know user
input is always a string so even if we provide a list of these it is still going to be
considered as a string so we need something similar to this right here so the list of numbers
that are provided as input needs to be converted in at least in python and we can
actually do that in a convenient way using user input
dot split and split is a function that will take user input as a parameter
and will give us a list data type so split function basically will return
a list of all those input values and again note the syntax of executing
the split function we're not just calling a split function like this
with user input as parameter instead we are basically calling it on user input and i'm going
to explain more about this type of functions in python later but for now let's actually execute
this application and see what happens so first of all how am i going to provide a list
to this application so that userinput.split can actually convert it into a proper
list in python and the way i should provide the values are
list of values with spaces between them so basically like that so why spaces how
come it's not a comma or something else the reason is because split function by default
splits that provided list on spaces and then creates a list value
out of them so that's the default behavior of split however we can override that behavior
and we can decide you know what we want the input to be a list of numbers that are comma separated instead
of space separated so what we can do is right here we can do split on a comma
so that's what our split function here will do and now if i re-execute it
and i can do commas now
40 55. so that's going to be user input and
split with comma should convert it into a list value in python so let's execute
it and as you see it worked fine we have a calculation for each of those values
now let's actually play around with this and let's say we provide a list with some values
and somewhere in between we decide to add a text and then maybe a float so let's see what
happens now and you see that for those two valid numbers the calculation was done
properly and for the other two basically the validation kicked in and it says
that these are invalid numbers however again our application ran
without any problems and we can even provide another input so now let's actually
do 20 maybe a boolean even and a negative number execute
and you see that for 20 the number of hours got calculated true is obviously not a valid number
and minus 100 is a negative number so everything works perfect validations
in place and we can provide a list here now and as a final optimization
we can actually change this message here that says hey user enter
number of days as a comma separated
list and i will convert it to hours so now we can provide
either just one value and it works fine or we can provide multiple values
as a list and again if we want to see how that
list actually looks like and check the type that it has in python let's actually
print it so first i'm gonna print type
of user input called split
and then i'm just gonna print that list itself so let's execute
and let's provide
some values and here you see this is the class list so basically the
data type list and that's how our list
looks like so we have these square brackets here and each element inside as a string because we have the quotes
here and later our application then transforms it or tries to
transform it into an integer and you also see there are some additional spaces here because
that's how we entered the values so basically the split splits the values on comma
so this space also becomes part of that element so to fix that leading space in each
value we can basically just add a space here so it will split on
comma and space and let's test it out
and there you go we have our values without the space before them
so you saw an example of when we actually need to use list data types in this example
we wanted to allow users to basically just input multiple values at once as a
list but obviously this is just one of the use cases for a list and one of the specific
examples because throughout the application you can create lists and you can use the elements of
that list in another function so you can use it for multiple use cases
and just to show you some basic syntax of how to create lists within your code
inside your application so how to initiate it and then how to use that
list i will show you the examples here so basically to create a list in your code you would use that
syntax that i showed you earlier with square brackets and inside that you would have list of elements and this could be
strings so it could be for example names of month let's say like this
and then we would have to assign it to a variable right again just like we did for strings or
integers or other data types so we can call it my list
and this will give us a list with three string values inside
and once you have created a list you can then use it to read the values from the list
right so basically to get the individual values elements out of that list so for
example if we wanted to print out the first element of my list
then we would access that using my list and then following syntax
with again square brackets and then index number of the element which is
starting from zero so this is the first element with index zero this is
the element with index one index two and so on right so it could be
confusing because it starts with zero not with one but that's how the
specific element of a list can be accessed right so if i wanted the march value here the
third element then i would just type in index two and this is a syntax of
getting elements from a list if i just want specific values and not each element one by one
as we had in this example right so one way to use a list is to basically loop through it and get
one element at a time and that's why we don't need to use index here because it gives us
elements one after another or maybe we don't want all the elements or
to do something for each element we just want specific values from the list for different use
cases in this case we can access them individually like this and
in addition to accessing the values from a list or basically reading the values from release
we can also add values to a list and we can do that by typing my list
and then on the my list we're going to do dot and use the append function
right so append will basically take the next element or another value basically and add it to
the list of elements already in the list right so let's say we want to add the next
month and now if i print my list we should actually see
this here with april as a fourth element right so let's execute and there you go
so first we have march here printed out which is the third element right index two
and then we have my list append that adds fourth month name into the list
so after append this is how my list will look like and now again we can
access the specific element for example if we wanted to access the newly edit element on index three
so that's going to be the fourth element and there you go we have the new element printed out and also an
interesting note is what happens if we use an index here which is
too high so basically pointing an element that doesn't exist right so instead of three let's say we have
four here so this will point to the fifth element and since we only have
four elements let's actually see what's gonna happen so i'm gonna execute this and there you go you see an error index
error that says a list index out of range so every time you access or you try to
access an element at an index that doesn't exist you will get this list index out of
range error and this is actually something that may happen pretty often
when working with lists if you're accessing the values like this
so this is how you work with lists how you create them and access values in them as well as add some
values however note that most of the time if you are using lists
you're going to be using them in a for loop because most of the time you would want to do something specific for each element in
the list so this basically should give you an idea of syntax of lists and how to use them generally and
also how to use them in combination with for loops here i want to take a few
seconds to thank jetbrains the creators of the awesome pycharm and intellij editors
for sponsoring this complete course besides all the great existing products
they have they recently introduced space which is an all-in-one team collaboration platform
covering software development project and team management and the great thing about space is that
every single tool you would need in a company to collaborate and work together in a team
is in one space so you have tools for chats blogs planning and creating tasks
meetings but also software development tools like version control ci cd package
repositories and much more so all these in one platform and in
terms of productivity the great thing is you get all the notifications in one place
like code review updates newly created issues new blog posts etc you get all of these
in chats where you can react directly in place or add them to your to-do list
automatically so i think the main value of space isn't that it has all these tools
but rather the fact that it integrates them in such an intelligent way that it improves the team communication
and productivity overall now let's go back to coding
now at this point here i want to mention a pretty minor and simple detail but something
that is also very important and useful in programming and that is comments so how do we write comments
in python and why do we need or in which cases are comments actually useful one usage
of comments is basically to give yourself some notes on your own code so
basically if your code gets a little bit complicated and it's not really clear what the logic
or the function body is doing it could be because of bad programming but also because
the function logic is just a little too complicated so you want to add some textual notes to
that code so that you understand what's going on there even when you look at that code
days or maybe weeks after you wrote it so for example right here we may want to
add some notes about what this part here is doing and comments in
python are written with this character so for example i want to add a note here we want
to do conversion only for positive integers
and that's basically my note that summarizes all that logic right here and it is not
only useful for myself in case i forget what this complex logic
actually does but also for your team members so if you're working in a team
and your code gets really complex and it's difficult to keep an overview of
different functions and variables and what all these things do you can basically add these comments as
notes to your team members so they can also understand what you thought or what kind of logic actually you were
thinking about when writing this code so comments is a way of communicating
your thoughts and your logic on your code so that's one use case for using comments and the second use case if you have a
piece of code that you do not want to delete because it has some logic or it has some
example that you want to keep as a reference but you don't want that code to be
executed so basically you can comment out code so that it still stays there but
doesn't get executed and the way to do that is just basically
having this character before the line and also note the color of the comment in the
editor is gray so it's immediately visible that these are the comments and now these two lines will not get
executed by the program they will be ignored but they are for your own reference in case you want to keep it there for
example this could happen if you are unsure about the change and you want to delete that whole code
from your application because you might actually need that eventually so you're not sure about it
so temporary comment the code before you permanently delete that so these are some of the use cases of
comments now if you have multiple lines of code that you want to comment out or maybe hold text that you wrote as a
note so for example you want to comment out all these four lines here obviously you don't want to do this in
front of every line so for multi-line comments you can actually use the following syntax which is three
quotes at the beginning and at the end and again you see the
highlighting is different here which basically is highlighting of a string however it is
ignored by the program and it will not be executed as a best practice you shouldn't have
too many comments in your code because it will just add additional clutter and your code will look basically
unclean so you should use them only when needed
in this part i'm going to show you another data type in python called set so what is a set let's start
our application again and let's say i provide here input values as a list let's say 20
40 and 20 again so basically i have duplicate values in
my list and when i execute it i see that the program got executed for each
element and i have duplicate results because i passed in the same value
twice now again users they can input any value they want
either intentionally or accidentally this could be bad values or things that don't make any sense so
let's say we want our program to behave in a way that if user provides the same values twice
or three times we only want to calculate the number of hours for that value just
once so basically for this input we want just those two lines and basically ignore the
execution again for the same value and you probably already guessed that's where set
data type will help us so set is basically a list of elements but with unique values
inside so list data type allows duplicate values the same value multiple times set does
not allow duplicate values so how do we use set instead of a list
and it's actually very easy to convert an existing list into a set and we can do that
using a function called set and basically the parameter of our set
function will be the list so if this list here contains any duplicated values that will be
basically just filtered out when we convert it into a set so that's how it works
and again for demonstration let's actually print out how set value looks like
so i'm going to print the list first so that we can compare then we're gonna
print out the set
and let's also print out the types and i don't want to repeat this
expression over and over again so what we can do even though this is just for demonstration
we can actually extract it into a variable let's say
list of days
like this and we can use it everywhere we need and
this is a little bit cleaner because we don't have to repeat the same expression
over and over again and again let's print out the type of list of days and then print out
the type of a set of lists of days and again you see that
nested function calls three times and this should give us some interesting
value that we can compare lists and sets and just a small note here that whenever we have this nested
function calls think of the execution from inside out so the first function that will get
executed in this chain is actually the set right so it starts from the last function
in that chain so set function will get executed and convert that list into a set
then type function will get executed on that resulting set value and then print will get executed and
print basically the result of the type so the order goes from innermost function to the outer
functions so let's save it and execute and now i'm going to again provide a list let's say 10
and then 45 and 30 and 10 again and enter and first of all we see that
10 only got executed once and not twice and we can also see the first one
is basically value of a list and you see at least here the second one is a set
and you already notice the difference that list basically uses square brackets
and set is represented using curly braces right and again it has value of 10 just once
and again we have the data type of a list and a set so just to demonstrate that
they are actually own separate data types
and like we saw previously with lists we can also create sets as well as add an excess
values from it so let's see an example here for example if you want to create a set
the syntax for that will look like this as we already saw again set can have
strings or numbers or booleans as its elements let's use the same
example we use with lists so i'm gonna just basically type in names
of the month here so let's say we have again january
february march and we're going to
assign that again to a variable so this will give us a set that we can create ourselves
not just from the user input and now we can access the values the individual elements from
the set and we can also add elements to the set however we cannot access the individual
elements of the set like we did on lists right you remember on lists we use the syntax
with square brackets and the index of the element in set we cannot actually do that
instead we can only access the elements of a set in a loop so for example in a for loop
we would write element in my set and then
we can basically print that element so let's
execute and right here you see all the elements printed out
and again as i mentioned with lists also previously most of the time when you're working
with lists or sets you're gonna want to look through the elements because you probably would want
to do some operation on individual elements or some of the elements right instead of just grabbing
individual one or two values from that now how do we add elements to a set
let's see it as well we can add elements to my set using my set so the
set itself the variable name and then if you do dot you see a bunch of built-in
functions again set has its own built-in functions which are completely different from what
list has and it has a function called ed and here we can basically add
a new element again let's do april and now we can print my set
and execute and there you go so we have here individual elements that are
printed out and we have the new list after we edit
april now one thing you probably already noticed when working with the set like printing
its elements or adding a new element it doesn't work
in the same sequence as with a list right so for list we basically had this
january february march in this exact order and when we edit a new element
basically it got added at the end right as a fourth element in set it's not ordered it's basically
in a random order right so if i execute this again rerun you see the order changed here and here
as well right and if i do it again there you go so this order and this order basically
changes right so as you see working with sets is actually pretty different from
working with lists so this means that set
not having or not allowing duplicate values is basically just one of the differences
between sets and lists and of course you're probably wondering i
can add elements i can access elements what about removing elements right from
lists or sets and you can do that actually the same way for both sets and
lists so for example if we want to remove an element from a set we can execute a built-in function
called remove and remove basically takes a parameter which is the value itself
so let's say if we want to remove january from here then we're going to pass the value to
remove function and now if i print my set again
after the remove gets executed and let's run it and here you see the last print
basically doesn't have january inside and as i said it works the same
for lists so let me demonstrate this as well so on my list which has its
own set of built-in functions one of them is remove which in this case is called the same
for both set and list and this remove built-in function also accepts
the value of the element you want to remove and let's print it again my list
and execute there you go this is a set with the syntax with curly braces and
this is a list which now doesn't have january inside because we removed it
and as you know lists can have duplicate values so if we have january
again here so two times and we do remove january it will actually
remove the first occurrence of that value so if i execute this
you see the first one got removed and the last one or the second january value
is still there so that's how you work with sets basically and also how to
remove elements from sets and lists
so at this point i want to take time and review the functions that we have used
from python itself so the functions that we ourselves didn't actually write and the functions that python
basically makes available for us to use are called built-in functions
so till now we have used function print which basically just takes
some input this could be a string this could be a variable this could be a number doesn't really
matter and basically just prints it in the output console right
in the terminal we also saw input function that basically takes user input
again we can provide a parameter which will be a message or leave it empty we also in the
last example so an example of set function which basically takes a list
and converts it into a set and another example is int again takes
a string as a parameter and converts it into integer and all of these are built-in functions
because python provides them to us so that we can use it in our code and in
python there are a lot of very useful built-in functions for different purposes
and as i mentioned most of these functions basically accept a parameter and then do something with
that parameter that input that we provide that function and give us an output again print basically
provides something here and gives us the output in the output window here
in input we can provide some message
that will again print an input here and the rest of them are giving value inside the code
without displaying anything so in set we can provide a list
and the same way a parameter here which is logical because the purpose of a
function usually is to take some input like this as a parameter do something with
that input and give us an output from that parameter and we have created our own
functions that also take some input and give back some output like this and
in addition to built-in functions that are called like this and our own functions we have also used
third type of functions which is called directly on a value right and this is an
example of that so basically directly on a value this could be a variable but
also the string representation of that itself so if i had a string like that so
basically directly on that value call a function like this and these are
also built-in functions because python makes them available to us other
than the syntax there is one major difference between these type of functions that are called
directly like that and the functions that are called on the value itself and the main difference is that each
data type has its own set of functions that can be executed like this so
again let's take example of a string and if i do dot here you see
the ide pycharm basically gives me a list of all the functions
again built-in functions in python but functions that i can execute on a string value and
again you see split is digit this is the one that we used in one of our previous examples that
basically checks if that string is a representation of a digit or just a regular string
and as you see lots of different functions so all of these are provided
by python to do different stuff like turn the string literal to uppercase or
replace a letter for example in that string and so on but the main point here is
that those functions are only for string but as i said
each data type has its own list of functions that can be called on that data type so
for a demonstration let's take a list and if i do dot here
again you see a list of functions that i can execute specifically on list values and there are lots of
things that you can do with lists like add elements to it remove elements from it
sort the list copy and so on so that's basically a major difference
between these type of functions and functions that can be executed on
specific data type values but the concept is the same here you also have a function that gets a
parameter an input and gives you an output and the parameter for this type of functions
is actually the value that we are calling that function on so this string here 2 3
is going to be parameter of the split and in addition to that we can also provide
additional parameters for example for split you saw here that we were able to add
a comma space to basically tell the split function on which character to
split that text so that was function comparisons in a nutshell
in this part we're going to learn a new data type in python called a dictionary and we're going to
do that by modifying our application and modifying how users can actually
input the values now our program currently takes the number of days and turns it
into a number of hours what if we wanted to make our program a little bit more advanced
a little fancier and basically allow users to also decide what units it should be converted to so
user gives us the number of days and tells us whether to convert it into hours
or minutes so instead of the whole list now we're going to get just number of
days and the conversion units and this change may be a little bit complex
in terms of syntax so i will try to explain everything step by step so the first thing we need to do is
adjust how we get input from the user so now we want the user to
be able to give us the number of days and units in one input so
first of all i'm going to adjust the text here enter a number of days
and conversion unit now there are a lot of different ways we
can allow a user to do that but what we want to do is something like
this as an input so basically number of days colon and minutes or
number of days and hours again this is our own decision we decide how the user input should look
like but this should be a nice way of providing both of those values
basically colon separated so instead of a list we're going to have a single input with
two values that are separated by a colon so on the next line i'm going to change this split here
into a column and this will give us user input this whole value split into
two values as a list this is going to be day and days and
unit so least with these two values and let's actually get rid of
this for loop because we're not iterating through a list of numbers anymore
and to begin with let's just print out the output or the result
of days and unit variable so i'm gonna refresh and let's do
two hours and enter and this is what we get so basically
splitting this string on column will give us a list with elements 20 and hours and note that 20 is still
a string right because that's how we get the input and now from those two values we're going to
create a value of a data type called dictionary so in python we have another
data type called the dictionary which basically looks like this so you have curly braces just
like we had for a set and inside we have key value pairs so we don't have just single
elements like this but rather we have key value pairs so key in our case is
days and the value of that key in our case would be 20. and then comma
separated another value would be unit and
a string hours so basically this is the syntax of a dictionary and obviously
the difference between a list and a dictionary is that we have descriptions for each of our values
represented as key value pairs so we want to create this construct right here from
those two values and since this is a data type we can create a value and assign it to a variable of that data
type so let's call it days and unit
dictionary equals and obviously we don't want those
values to be hard coded here we want to get it from the list now how do we access an element
of a list how do we grab the first value which is 20 out of that list
and to do that there is a syntax to access the elements in the list the list name and then you
have square brackets and index of the element which if you remember you already
learned in the section of lists so again days of unit
list is this one right here and with index 0 we are accessing the first
element index 1 is the second element and so on and index is basically just location this is
location 0 location 1 and so on so this will give us the first value
and obviously the second value is going to be with the same syntax with index
one and let's actually print that one out as well
so that we see the results restart the application
let's do 20 hours so again this is our list 20
hours as two separate values and this is a dictionary that we created using those two values
so we have key value pairs basically and the same way for minutes we would end up with a
dictionary that looks like this so now we have these two pieces of information in one variable
and now we can give that variable to our function so that it does the validation
first of all of the number and calculation based on the units so
on the next line we're going to call our validate and execute function
and as you see we have this red line here because something is wrong first of all we don't have this
variable called num of days element anymore because we deleted the for loop instead
we have days and unit dictionary and here we are
validating the integer value of the input number and the same way we need to validate
this input number here as well so now the question is how do we access a specific value in
this case the value of days here in a dictionary because we have to validate this value
as well because i might as well have entered text instead of this number
so the way to access values inside a dictionary is again
using the square brackets just like we did for list but instead of an index index 0 or index
1 we don't need to use an index because we actually have a key so instead of index
we're going to use the key like days or unit and this will give us
value of 40 which will then be converted into an integer and then
validated right here so again i'm gonna copy this
for comparison so to access an element of a list let's say
my list here and let's do 20 30 doesn't matter in order to access
the elements of that list
we can do that using an index so this will basically
print number 30. again if we had other elements here we can do index
2 so that will print out 100 and let's actually check that and remember to comment out
a multi-line code we can use three quotes at the beginning and at the
end let's refresh and there you go 100 was printed let's do the same with the
dictionary so we have a dictionary
days like this and
to access an element inside that dictionary we use the square
brackets and instead of the index like here on the list we use the key itself
and again i'm going to print this
and there you go you see value 20 and i can also access
unit value and if i execute it i see hours and so on and i can
add any number of key value pairs in my dictionary as i want
so for example i can add a message here all good and
i can access that message like this so this is how you create a
dictionary and that's how you access the values in a list or in a
dictionary so let's clean this up comment in our code again like this
and get back to our code so basically again this is how we access
the number of days in our dictionary and in our days to units function we need
both of those values and we can pass in those values separately so we
already have a user input number from the dictionary and the second value would be
the unit from the dictionary however we have to add that second
parameter to our function so let's do that unit
let's call it conversion unit so now we are passing both of these
values to our function so we have the user input number here which is already converted into an
integer and the second one which is the conversion unit and now we can finish
the logic in this function here right now we are using this hard-coded
calculation to units which is 24 and number of units which is hard-coded hours
so first of all i'm going to remove those two we don't need them anymore because we get those values from the
user and now we have to substitute those two so here we're going to check
if the conversion unit is hours
equals hours then we're going to return calculation
with hours it's going to be 24 and conversion unit here we can also hard
code hours here because we know it's hours else if
so if the conversion unit is minutes
then we can return calculation for minutes and a text like
this and it could also be that the conversion unit that was provided
is none of those or maybe some invalid text and in this case we're gonna add final
validation so if it's neither hours nor minutes
then we're just gonna say you know what unsupported
unit so basically we don't do conversions
other than those two so we just tell the user that's an unsupported unit
and now if we execute our program and enter
value there you go we have our output and same way if we do
90 days to hours we have our calculation in hours so
that's how dictionaries work we can do one final thing here and
as usual print out the type
of our dictionary
and there you go you see class of type dictionary here which is another data type and at this
point we can actually summarize all the data types that we have learned so far so let's give us some space here so
first one was string so basically a message or some output
like this that's our string then we have integers
example of that we saw already days then we have float numbers which for
example can be used for price or weight of a product etc we also have
learned boolean data types when we check some kind of condition whether if it's
true or not so for example is it a valid number
or is the user input exit
we also learned a data type of lists so for example usage list
of days
like this including duplicate values and list data type can be used for
strings as well not only for numbers so for example we can have list of month
like january doesn't really matter we also learned a
data type called set and set basically
is very similar to list but it doesn't allow duplicate values and its syntax is
with curly braces so the same way we can have numbers or strings or booleans or any
other data types inside a set and the last one that we learned was a dictionary
and let's take our own example day in unit
and dictionary is basically a collection of key value pairs and the syntax
is written like this so why do we need all these
different data types well depending on the use case or what exactly you are trying to achieve in the
program you're gonna need a different data type to achieve exactly that
so each data type has its own specific purpose and throughout these days to units
calculator i try to demonstrate the purpose of each data
type and when we need to use them so these are all the data types that we learned
these are also most of the data types available in python and the main ones
that you're going to be working with so this should give you a good foundational knowledge about data types
in python and also note that most of these data types you will also encounter in any
other programming languages because as i said these are the core data types and most of the programming
languages actually support these data types as well
till now we have been writing all our code in one single file so basically we have
a project with just one python file and we're writing all the logic inside that file however you can imagine
that if you're writing a little bit more complex applications that have much more complex logic so
they end up having lots of functions obviously you're gonna end up with a python file that has
hundreds of lines of code maybe thousands of lines of code and it's not very practical to manage
all this logic and all this code in just one file so instead you need to structure your
code and divide your logic between multiple different python files and you
do that with modules to give an example imagine a web application that has
basically many features like facebook for example obviously you can put all the facebook logic in
one single python file right you will have a structure of facebook project with subfolders in
your project which all contain multiple python files so you would have maybe packages for each feature
and each such feature has a lot of functionalities so they will be all grouped then again
in multiple python files right so you would end up with a project with a hierarchy of folders
and lots of lots of python files inside now the question is if i
have multiple python files in my project how do i connect them together so for
example if i have another file here and let's call it helper
dot py and if i have some logic here basically
functions defined here how do i use them or how do i reference them in another file and the way it works in
python is using the concept called modules so a module is basically
a python file that contains functions or variables that
you can use in another python file so basically any python file that you
have in your project both of these in this case are modules and you can reference
one module from another so basically the idea is that you can structure your
application your program using modules so you can make your project modular so in this part we're going to
create our own module in helper file and we're going to reference that in main dot
python and let's say in main.python i only want
the code that basically starts the program right all the functions all the logic i kind of want it hidden
away and grouped together in a separate file so what we're going to do is copy this
entire thing so both of these functions basically and
paste it in here so now you already see a couple of red lines here because now the reference
is obviously broken right so main.python obviously doesn't know anything about validate and execute function right it
says unresolved reference and the same way face to unit dictionary is unresolved for helper
because it doesn't know anything about main.python and the variables defined
right here so the first thing we need to do is we need to tell main note python file where to find this
validate and execute function right we have defined it in helper python so
that's what we need to define how we do that is using something called an
import statement so we basically import this whole helper.pi module
inside main.python and we do that very simply using import
helper right helper is the name of the file and therefore name of the module and
right now it's grey because we're not using it and the way to use it is helper dot
and the function name and you see the red line disappeared so again what we did is we told
main.python there is a helper module in this project and please import this whole module
and all the functions that this module has and make it available in main.pi and then once we have that
helper module we can reference any functions if we had any variables
using module name dot function so this has to be the name and
if i hover over it you see that pycharm actually displays the whole path
to that helper.pi file and now note that here we still have
redline because this is a variable which is defined in main
dot pi but a helper module doesn't know anything about it and that's an
important distinction here because we imported helper module inside main so helper modules functions are
available here but not the other way so in order to make this dictionary
available invalidate and execute function we would need to pass it in as a variable like this
and this will work now now note that in main.python
we actually only need this validate and execute function we don't need the days to units function
because this function is only used by validate and execute function
so that means that we don't need to import the whole entire module inside
main.pi we actually only need the validated execute function
and this is a small example but if you had a module with 20 30 functions and you just needed one
of them you wouldn't need to import the whole module just for that one function
so what you could do is you can pick and choose which specific functions you want to
make available inside another file or another module and you can do that
very easily using the following syntax we say from helper that's the module again import
and the name of the function like this and now because we are
accessing and importing that specific function we don't need to use module name anymore we have that
function available directly so we can delete the module reference here and we have that function
available like this so again instead of having entire helper module with all of its functions
and other stuff we only have one specific function available here so that means we wouldn't
be able to use these two units for example now we saw an example of a module that has just functions
right however module can have many other stuff for example variables and you can make those
variables also available for another program and that's an example here
i'm going to create a variable called user input
message and this is our user input message and we can actually
put it into a variable instead of having it defined like that so i'm going to copy it
and paste it here so now we have the user input in a variable in another
file again how do we access it in main dot pi in this statement at the top we can
actually import several things from a module right now we are importing a function we
can also import our variable and we can do that also very easily
like this and we can use that user input message here so basically if
you have again 20 functions and variables from a module and you just need maybe
five of them you can import them individually like this just basically just list the
names of functions and variables what you can also do is import all this is what this
asterisk sign represents so we're basically importing everything from the helper module again
this is kind of a waste if you just need a couple of functions and variables from that module
and not the entire thing however with this syntax you can import everything
and now you may be wondering what is a difference between importing everything from the module and
importing the whole module because in both cases you have everything in the module available
the difference is in the syntax because note that if we use this from import statement
you don't need to use name of the module every time you're accessing something defined in that
module right so we don't need to do helper dot function name or helper dot
variable name whereas if we imported the module like this you see
we have red lines because we would need to do helper dot or module name dot
whenever we use something from the module now this could be a matter of taste so basically which one
you want to use i personally think that this is the most efficient and also
cleaner way of using specific functions variables etc
defined in a module and as a side note the things that are defined in a module
that you can use basically in another file are called definitions so all these those three
elements here are definitions of a module and you can use any of those definitions in a file where
you import that module what you can also do when importing a module is you can rename that module basically
to whatever you want so if the name of the module is too long or you just want to use a
different name you can do as and then basically write a name whatever you want
like h for example and then obviously you need to use that new name everywhere you access
functions or variables of that module so basically how you import a module and
whether you rename it is a matter of taste basically how you want to do that in your code
however i think that importing specific elements from a module like this is
most efficient and also cleanest way to do that so we saw how to create our own module
and use it in another file so basically if you had hundred python files here
with each one of them having their own functions and variables you can cross reference them from each other using
the import statement very easily
now in addition to creating your own modules we can actually use modules that python
itself already includes so just like we used some functions that python gives us out of
the box like inputs or ins so basically all of those the same way python also gives us
modules for different scenarios so that we don't have to write this logic
ourselves and there are a lot of useful modules that python actually includes
for example math module for mathematical operations its own module for working with dates or
date times module for working with specific files and so on so basically
for many different use cases python already gives you ready modules and these modules will
then contain multiple functions and variables for that specific use case again if we take an example of a date
so if you have an application that works with dates and times you have this module from a
python that gives you a bunch of useful functions for working with dates and again this
means you don't have to write this logic yourself but rather use the existing one
so to give you some examples of modules that python provides us with for example if
you want to work with operating system there is an os module so
we can print out we can get the name of the os for example
and i'm going to comment all this out and run and you see the name of the os
another useful module python offers is logging so if you want to use logging in
your application the logging module gives you different functions to log
an error message or warning etc as well as basically just configure how
the login will look like again to see an example
again it may look a little bit complex here but essentially just using the name of the module and
then functions that it gives you obviously you need to know the functions and you need to know how to use them and
you can get that information from documentation or if you're using pycharm
it actually gives you all the information about these functions and the module if you just hover on it so you don't
even need to google or check out the documentation and basically we're creating a logger and we're logging an
error message so if i execute this now and here you see the output of the logger error happened
in the app and logging in application is actually a very important feature so that's why
logging module is available by default in python any use case
in our application would be right here if an error happened for example instead of
using a print basically just log and error so these were just
some basic examples but as i said python comes with lots of very useful modules that
you can use in your applications for different use cases and that of course makes your work
easier because you can just use the logic instead of having to write it yourself in the modules that are part of
python so that you can import them like this directly are called built-in modules we
learned about built-in functions so these are the functions that python makes available to us
directly and there are built-in modules that we get from python and by the way if you're wondering where
this module actually comes from so where is the physical location on our machine or where this module
files actually leave if you're using pycharm you can actually hover over it and hold down a control key or
if you're a mac command key and click inside you see the file opens up which is the
module the logging module since i said module is basically just a python file that has
multiple functions variables etc available and you see right here on this top line the whole path
for that python file so that's the location of that module file locally on my
computer and inside this python file basically you again have python code
and if we look for get logger function here like this
right here you will find the definition of that function right so somebody
implemented this function and called it get logger
and this is basically the logic all the things that get executed behind the scenes and
you as a user of python basically can use the name of the function and write your own programs with it
and let's also look for error and there you go we have error function
as well right here and obviously this is a more complex code here
than what we write but just to give you an idea that this is actually a file on your machine
that comes with the python version that you install locally and all the functions
are defined already there by python developers and you can just use them like this
without worrying about how the logic is actually implemented and another interesting thing is if i
click here in this python 3.9 like this logging is basically one
module that we used and here you will see the list of the complete list of all the
built-in modules that you get from python so some of them are folders
like logging for example email and bunch of other stuff and the operating system module for
example that we used is a python file then you can find right here so these are the built-in
modules so now that we know what built-in
modules are and how to use them let's actually see a realistic example
and also write a little more interesting application using built-in module
so what i'm going to do is in my python project i'm going to create a new file and i'm going to call this time to
deadline dot pi y and we're going to write an application
that basically accepts a user input of a goal and a date like a deadline
date and then we're going to print out back to the user how much time it is remaining till that
deadline and that deadline will be a date right some date in the future so that means
that we're going to be working with dates
and in order to work with dates we are going to need python's built-in module that allows us
to call functions and do some processing and stuff on date values and that module
is called date time so import date time
so let's have that import statement right there and we're going to use it in our program so the first thing we
want to do is let the user give us an input about their goal
and a date or deadline for that goal so let's do that first
we already know how to ask for user input with a message so we're gonna say enter
your goal with a deadline separated by colon and we also know this
already basically what we want to do is user to be able to
enter their goal like learn python column and a date and let's say
again this is totally up to us to decide we're the ones basically setting the
rules here so let's say we want the date to be entered in following format
day month and a full year like this
so that's the format that we're looking for and this is how user should input the value otherwise with a
different format it's not going to work so we're going to save that input value
into a variable let's call it user input
so we have the user input let's do the split again on a colon remember we have this whole
thing as a string as one string so we want to split it into two parts
so we have the goal here and the deadline and this will give us a list with those two values
and let's call it input list and now from that list we can actually
extract or get those individual values using a list syntax so accessing the elements
from a list which is what we learned already using an index
right so we have input list index 0 which is going to give us learn python
and let's save it as a goal variable and let's create another variable which
is going to be date let's call it deadline
and this will be the second value in our list now
let's actually print this out print this whole list out and
now note that we are actually in a different file we're not in the main.pi anymore and we don't want to execute
main python file instead we want to execute this one right here we basically just want to ignore everything else in this
project so how do i go from main to this file execution
very easy in this editor just to right click and you see here run time till deadline
and i'm going to execute this everything else is ignored in the project we are basically just working on this one right
here so enter your goal with the deadline separated by colon let's do that i'm going to do pi learn
python colon and then
let's enter some date and enter and this is the output so we
basically split that into two values and put it in a list right here
and very important to note here that both of these elements in this list
are strings because again user input is always interpreted as strings so this was a
string and it was split into two strings which are learn python and this date
here however we don't want date or deadline as a string we want deadline as a date
and exactly for that functionality we need this date time module because we don't
want to implement it ourselves we want python to give us a ready function from a module that will basically just
let us convert this string into a date value and converting string
to date is just one example usage of date time module but you can use this
module to work with dates generally like creating new dates
formatting the dates updating the value etc and we're gonna see some of those
examples in this section now if you're learning this type of thing alone you don't have me basically teaching you and giving you
an example the way you would do that is you would basically research and maybe google how this is done
in python and you would basically see some examples of using this date time and what the
name of this function is and how to use that as well as each module has its own
documentation page where you can look up the syntax and usage examples
because obviously you're not going to know how to do that by yourself so the way we convert a
string into a date using this date time module is on this datetime module
if i type in dot i will see a list of all the definitions
that daytime module gives me right so i have date daytime time etc
the one that we need is date time because the function that we need for conversion is inside
that definition and don't be confused here because we have date time twice here the first one is a module and the second
one is a definition in that module and we can actually check that as well so if i jump into this date time module
and inside that if i look for date time again so right here you see
this date time definition and on that daytime definition we have now functions that we can use
and as you see this is not a function or variable it says class here which is another
concept in programming we're gonna see later so just for now think about this as a container of
functions and variables inside that module and that's why we have to access it like
this and then on that daytime definition this class we now have functions that we can use to
do the conversion so the function we need is called str so string p time and this function will
take a string representation of a date and we'll convert it into a date format
so our string representation is deadline and
we need to pass in the second parameter because remember i said we basically decided that the
date should be entered like this with points and a full year here and as you know there are lots of
different formats and types for dates right depending on a country or a language or
even within that language we basically have multiple different formats right we have formats
like this or we could also have
a shorter version of the ear etc so we need to define here the format
that we want python or this method here to use when converting this string into
a date again because there are so many different formats available so what we have here is a day then we
have a dot then we have a month again a dot and then we have an ear so this is kind
of a main structure of a format however formats for dates have their own
specific syntax and this is actually for all programming languages so what we need to do
is put this percentage sign in front of every letter so again we have day month year
and there is one more thing about this format this format right here matches
this date however we want the full date not just the last two and the format for that
would be a capital y again this is something that you would look up in the documentation of the module instead of knowing it by
heart but just know that this type of formats are used when working with dates and
this is not specific to python you will actually see something very similar in all the other different
programming languages and that will do exactly what we want it will take
this date here and give us a proper date format from it
let's actually test this so i'm going to print this first
and i'm also going to print a type a data type of that value so let's
execute
i'm actually going to copy that so i don't have to retype it over and over again and enter
and here you see we printed first of all the date not a string and now this looks
like a proper date and not a string anymore note the change in the format plus we have these
zeros here which represent hours minutes and seconds we didn't set any of those so these are
all zero and we have the date time type again note date time
for a module name and date time of the class name so this is the type of our converted
date and the reason why we needed to convert that string into a date is because we want to
calculate how many days or how many hours are remaining until the deadline from now starting
from today and to do that calculation we need to have date type because we
can't do that on a string great so now we have our deadline represented as
a date so let's actually assign this to a variable it's a deadline date
like this and remove this and now we need to do a calculation
how many days from now till the deadline
we already have the deadline we need now again now is or today is also a date
and since we have this module date time we can also assume that this module will give
us some function to tell us the date of today
and if i do date time again daytime class
and today you see that we have this function available and this will basically give us the date
of today so depending obviously when you execute this program it will give you always the current date
so let's print it today for me it's 7th of february so if i
execute it now i'm going to enter this and today is
7th of february for me so if i execute this let's actually comment this out
here i have the date for today which is 7th of february plus the exact time it is now but we
don't care about the hours and minutes and seconds we just care about the day
so that means we already have deadline and we have today let's also
add it to a variable
like this and now we can actually do the calculation calculation is
super easy we just say deadline date minus today date and this will actually
give us the difference between
or time difference between today and the deadline date in the future
again let's actually try this out
and you see that so this is 12th of august for me today is 7th of february
so the program calculated that there are 185 days
until the time plus how many hours minutes seconds and milliseconds so that was a
pretty easy calculation now what we want to do is
tell the user some kind of message and we want the message to be dear user the time remaining until the
deadline for your goal whatever the goal was is this so let's actually put that text and
message together and bring it back to the user
so first i'm going to save it into a variable
let's call it time till
and the message dear user
time remaining for your goal and here we want to print
what the goal actually is and you remember how we format a string when we want to use a variable
we put an f here and in curly braces now we can use variables or numbers or some other
expressions which are not string so first of all we're printing back the goal so time remaining for your goal
whatever goal they entered is time till
and let's execute our program
and let's give it some other value like this and enter and here we have
our message dear user time remaining for your goal learn python is 132 days
and this many hours minutes etc now let's say we don't care about this
whole thing here we just want to know how many days are remaining so how do we get rid
of this part here again very easy and the time till if i do dot here
i get a list of suggestions for functions or variables that i have
available and one of them is days as you see here so if i click here
and save and i'm going to reuse these inputs because i don't want to type and
as you see we got rid of this whole thing here and we just have days and let's actually write days
and there you go we have a cleaner output now for our user and finally what if the
deadline was just a couple of days in the future and the user wanted to know how many
hours are remaining till that deadline we can do that by getting rid of these days and again
type in dot and we have something called total seconds here which gives us the
time different in total seconds and now we can reverse engineer and calculate the
number of hours from this total seconds which is pretty easy
like this calculate minutes and then calculate hours
and i'm gonna execute this again and here you see the number of hours
with a decimal precision so we have 4450 hours point
some fraction number here again we want to get rid of this extra stuff and as you see from the
syntax it is actually a float number with a dot here so what we could do is basically convert
this whole thing this float number into an integer so convert this whole thing into an integer
using int function and we need this whole calculation here inside the int function
and let's execute it again learn python and let's choose a date which is
near and there you go we have a whole number 57 again
cleaner output and as a code optimization we could take this whole thing out
into a variable and call it hours till to make our code a little bit
cleaner so now we have the whole program that takes user input and basically prints back to them how
many hours are remaining till the deadline for their goal and for this program we used a date time
module a built-in date time module from python and we also learned a new data type
which is date time and as we learned from the module section we can actually optimize the import of
the module because obviously we're just using the date time definition and nothing else from that module
so what we could do is from date time module import date time definition
which is a class in this case so now you don't need to use the module
name so let's get rid of those and this could make the code cleaner as well as make the
import more efficient because we're not importing the whole module even though we just need one definition from there
when you install python it comes with a set of modules that are built in into python
however there are many more modules for other different use cases like web
development or data science and machine learning etc that are not part of that installation
and these are basically external modules not built-in modules that you have to
install as you need and this makes sense because the built-in modules are the ones that
most of python programs will probably need and depending on what specifically you
are doing with your program whether you are developing a web application or creating some machine
learning program you can then add and install them as you need and there are hundreds of such external
modules for python out there and obviously it wouldn't be practical to have them all on your laptop when
you're just gonna use maybe a handful of them right now if i need to install an additional
module for example django for web development where do i find these modules and how do
i install them python modules actually live in a module repository where you can find them and that module
repository is called pipey so if i look for pipey
right here you see the python package index if i click inside you can search for any
module that you want to add or install additionally for your application and
here you see this word package everywhere instead of a module so what is a package or what is the
difference between package and a module
to give you a simple comparison module is basically a python file like this one right here
that has a name of that file right so we have an ssl module or the one that we used
earlier we have this os module right so module is one python file that
contains all these functions and variables that you can use package is a collection of modules
so if we scroll up and logging is actually one our example
so these are actually packages and again let's go to logging so package
basically contains multiple python files and use it in the same way you basically
import the functions and definitions from the module and as you see clearly the difference is
that package is more structured so for example the code is not available in just one
single python file but it's divided like this in our case we have two python files and
package always has this init python file and this file basically differentiates a
normal folder like we have right here with bunch of python files from an actual package with python files
so that's the difference between modules and packages and many external modules basically that
we want to use in our projects are actually packages so basically package is a good way to define some hierarchy and
structure for your modules and kind of group them together so that's why you see
package here as a name instead of module so now that we know the difference let's
actually search for a package for our project so for example if i type here
django you see django packages that we can use from here we also have numpy
and so on however in programming when working with and using these external
packages a typical example would be where you need to implement some logic for
example you want to write a program that basically talks to aws maybe
and you don't know exactly the name of that package but you know what you're looking for so
in this case instead of the exact name you would actually type in here in the search projects box
a description of what you're looking for so let's say we're looking for an aws api package right
something that will allow us to connect to the aws api and as you see here we get a list of
different packages for that to choose from so basically pipey is a repository
or storage for all of those modules and packages and people can also publish their own
libraries like individual developers for example they can publish their own packages and
modules there and make it available for other programmers to use and that's one reason why large
community is so great for a programming language because then you can make use of all these modules and packages
that others in the community have developed so for any kind of functionality you need in your
application you could imagine that there is a module or package that helps you do exactly
that now let's say i need a django package
for my web application so first i find the package and now i can actually check some of the
documentation for that specific package so if i click inside i see some
description for the project as well as documentation and some other links
now the question is how do i actually install this package locally so that i can use it in my
project in python we install packages using a package manager tool called peep
and right here on top below the package name you actually see a command
peep install django so this is actually a command that will install that package locally
on my laptop so we install packages in python using this pip command so
what is this command or where does it come from pip is a package manager for python
and if you know any other programming language basically the concept is the same every
programming language has its own package manager tool for javascript it's npm for java
it's maven or gradle and for python it is pip and one of the main tasks or usages
of a package manager tool is to install external packages or libraries
or also called dependencies for your project so if python needs this django package
basically it's the job of the package manager to install that package and make available for python
now where did this command come from do we have pip command available well in python version 3 actually
pip is packaged inside the python so when we install the python we actually
installed pip as well so basically we're going to copy this command
peep install django and we're going to execute it actually from the terminal
of pycharm so in pycharm editor we have this integrated terminal so this is actually
pretty much the same terminal as you have outside like this so we are going to execute this pip
install command directly in this pycharm terminal so i'm going to copy it
here and do peep install django and you see it is downloading and
successfully installed django 3.1.6 and we can actually see that package
from our editor directly if i expand these external libraries
and site packages and scroll a bit down here i have django
316 version installed so i see that the package is now available in my project and to also test
it in the code i can do import and
django and you see that pycharm actually recognize that i have django packaged
locally so it gives me that package as a suggestion so that will basically import the whole
django package so we can now use it in our application here you see pycharm
actually noticed you are using or want to use django web framework as i mentioned in
the beginning the pycharm professional edition has special support for different python
web frameworks supporting you with syntax highlighting suggestions
database integration and so on so again if you want to try it out for free for three months just use my code in the
video description in the same way as we install the package we can also uninstall packages using pip
and let's also actually demonstrate that pip uninstall
django and let's confirm that
successfully uninstalled django now if in the site packages i click inside
you see that django packages are gone so this site packages folder got updated
django was removed and you also see that in the code editor now i have this red line under django because pycharm
cannot find a module called django and also if i do this
obviously it won't give me any auto suggestion for that so that's how you can use peep to
install packages and also to uninstall packages for your application
now here i want to show you another cool alternative to installing and uninstalling packages directly in the
pycharm ide and this is actually a feature in the latest pycharm release
and for this i need to switch to an early access pycharm version so you see
here it says pycharm eap early access to show you the feature however when you
watch the tutorial it probably will already be included in the latest official pycharm version so you should
have that already so instead of us basically finding this package in pipey
and then executing peep install commands right here what you can do is
down here you have another tab called python packages so if we click inside this is a place where you have
everything that you need to know about the package the package search and all these features basically in one place so for
example in order to install django we can just search for django right here and you see that
when i type in the first couple of letters i already get suggestions so this is a list of all the packages
that start with this name that are actually available in pipi so let's type in django and we see that
right here and on the right you see the documentation
of the package that you would actually see in pipey ui so you have that in place as
well and in addition to that what they added is the documentation link so this is actually the package
how-to guide and the full documentation with examples etc
so very convenient way to basically get all the information about the package search the package and then to install
the package we can choose the version here so either you can leave the latest
or basically select the specific version and then once you have selected that you
can just click install and here you see installing package
and there you go so now in installed view here so we just had pip and setup
tools these two things installed and right here we have now django in the installed packages list
and again while you're now using the installed package or library in your code and
basically you want to look up some examples or you want to check some documentation right you go back to the package click
inside and you have link to documentation and the package information as well and also
just by looking at this list you know which versions of which packages you have installed so i think it's really
cool way to manage all your packages to install packages and for example if you want to uninstall
packages from your project then again just clicking to that specific package right here
you can just delete it and it will be removed from your application
like this and no django anymore here so a very cool addition to pycharm
because this will be very convenient to work with the packages so now i will switch back to my other
editor again and continue from there
so basically i have just cleaned up my python project we have this main.pi
which is empty and we're gonna write an application that will read a spreadsheet file from our local file
system it will read some information from that spreadsheet file and do something with that data and this could
be a very useful use case if you're working with lots of files and you want to do some
data processing in those files and you don't want to do that manually by automating or writing a program in
python that basically can do anything in a file or across multiple files so let's see
exactly what we are going to be doing with this program so first of all we're going to have an input file a
spreadsheet file that we're going to be working with and that spreadsheet will look like this
it's called inventory that's how it's going to look like so basically this file simulates
something that many companies would have and employees of that company would be working with
so we have this list of product numbers inventory for each product price for the
product and a supplier so this could be an example file from a company that is basically dealing with
selling or buying products so what we're going to do is we're going to read the information from
this file and we're going to do something with that information first we're going to write logic that
calculates how many products we have per supplier so we have three supplier companies here
and per supplier we're gonna calculate number of products from that specific company and
as a result we're gonna list the company so all three companies with their respective
number of products then we're going to write another logic that lists inventory products that have
inventory which is less than 10 so basically those ones
the third exercise is going to be to list each company with their respective total
inventory value and finally in the last exercise we will calculate the inventory value for
each product so product count times price and we're going to write that
value to an additional column in the spreadsheet and after that we're going to save that
updated spreadsheet file programmatically using python so we're gonna see how to
update a file and then save it programmatically in python if any of these sounds a
little bit too complicated for you then just bear with me i'm gonna explain everything step by
step and it's gonna become much clearer when we actually start writing the
logic so the first thing what i'm gonna do is
i'm gonna take this file that i have in the downloads folder and i'm actually gonna
move that into my project so i'm gonna copy that and i'm gonna drop it in here so that we have the file right in our
project and so we can basically just read it easily and okay and here is
our inventory file so that's taken care of so obviously what we want to do now is read that file so basically let our
python program read the contents of that file right here because we want to write some logic
based on the values that are in this inventory file right we want to calculate stuff we want to
list some stuff and so on so basically we want to work with these values and in order to do that we need to
read all of these values into our program so that we have them available so how do we do that now there is
actually a built-in module in python that allows you to work with files
generally right it's not specific for a spreadsheet or for any other file type it's for
different types of files generally however there is an external package
that allows you to work with spreadsheets specifically and the obvious advantage
is that that external module that allows you to work with spreadsheets or was created to work with spreadsheets
specifically has much more functions and is much easier to use
if you are working with spreadsheets compared to this built-in file module so that's one of the cases where you may
have multiple ways of actually implementing some functionality for
application and then you have to make this decision of maybe finding a better package or better module
which is available externally that will make it easier for you to implement that functionality so
that's what we're gonna do for our project we're going to choose the package that is actually made for working with
spreadsheets we're going to use that one and it's called open pi xl and if i
search for it this is the package that we're looking for and if i click inside basically we have
some information about this package so here we see a description
let's actually make this bigger description library to read write excel
files with all these formats so this is the library that we're going to be using in the same way as we did
before we're going to copy that command and execute it from pycharms integrated terminal so from here i'm
gonna execute this pip command and install our module and as you see
successfully installed open pi xl and this is the version of the module that we installed and
in external libraries site packages you should be able to see our open pi excel package
and now because the package is available locally i can do import and open
pi excel again i get a suggestion from pycharm because the module is there and now we are able to use that package
for our application and one small note here if you're wondering why there are some packages with
basically a dot inside and some without these are the packages that we install python packages and we
know that because there's this init python file inside and the ones without the dot they're just folders
with bunch of files inside but they're not python packages so to say and inside some of those packages we see
other packages as well with their own init file so basically hierarchy of multiple
packages and at this point i'm going to say that the word library basically describes package
that includes multiple other packages so basically which has a hierarchy of packages
so we have module which is basically just one python file that we can use in our project then we
have package which is a hierarchy of multiple modules with an
init python file inside and then we have library which is basically multiple packages together in a
hierarchy just like we see right here so note the difference so you don't get confused when you see
library package and module especially if used interchangeably
great so now we have our module in place so let's use it now to read our
spreadsheet file and again you basically have to know the function names to do that if you don't you can do dot
and get suggestions and load workbook is actually the function that we need
in order to read our spreadsheet file so i'm going to choose this function and obviously we need to tell
this function which file it should read so as a parameter we're going to say please
load inventory file and we even get a suggestion because we have this inventory file here
and there you go now this function will load the workbook and all its contents
and later we obviously want to do something with that content so in order to be able to do that we
need to save it first as a variable and let's actually call it inventory
file like this and this will give us the file contents now let's actually open that file again
and let's see exactly what we need so we can have multiple such sheets basically per file so we
need to tell the program which one it should use exactly so for example if this was
called a product list you would use that name but we're gonna
go with sheet one so we're gonna use that name basically
and we're gonna grab that using following syntax and you remember this
syntax probably from using a dictionary so this will give us this one specific sheet and all the information inside
and we can also save that into a variable so let's actually call that product list so now we have read the
whole file then we have read this specific sheet of that file and now we have all this information in
that variable so now we can read any of those values and do calculations etc using that variable
so let's get to our first task and the first task is basically to calculate
how many products we have per supplier and then list the names of the suppliers
with that respective number of products so let's go back and do that
so the results what we want to get is basically products or number of products
per supplier right that's basically what we want to get as a result
so we're going to create that variable and we're going to set it to an empty dictionary so
by the end our program should give us something like this a dictionary where the name of the
company is the key and the value is basically product count
for that company and since we have three suppliers or three companies we're
gonna end up with a dictionary with three key value pairs per company so we're starting with an empty
dictionary for products per supplier and now let's see how we can programmatically calculate this
first of all what we need is we need to go through each of these lines basically
so we have these rows so we need to go through each and every row in order in sequence and we need to
get or check a supplier name for that row and you remember whenever we execute a
logic on multiple values over and over again so basically same logic or same function
gets executed for multiple different values for a number of times
that's basically a use case for a loop right so we're looping through those rows and we're doing the
same thing per row which is getting the name of the supplier now as you also remember loops have
conditions right we need to tell the loop how many times it should execute that specific logic and if we check our
file here how many times we want to execute the logic the answer is
as many times as the number of products so if we scroll down we have 74
products so we need to do that 74 times for each product so basically as many
times as the number of product and obviously we want this program to work for any spreadsheet file right with any
number of products so we need to calculate or we need to read that value also from the file
so basically we need to read how many products are on this list so let's see how we can do that first of
all we're using for loop to execute the logic for specific number of times and if you remember from
for loop syntax four then we have the specific item so what is an item in our case our item
is a row right product row is going to be an item of iteration so looping basically
so we can call our item products row and then comes in
and now we need that condition how many times and again this should be generic
so we need to calculate or we need to read the number of lines here number of rows
here from the file and the way we can read that is remember we have all the information we need in
that one specific variable which is product list and that variable has
the value for number of rows which is called max row now how do i know that
max row attribute is available for product list i basically just looked it up on
the documentation of the module and as i previously also mentioned whenever you're using a
module this module will have a documentation so if you need some functionality if you
need some values you can basically just search inside the documentation
which functions and variables are available to get the functionality or values that you
need and we can actually test it we can print it out like this
and as you see here 75 so basically max row will always give us the number of
lines or number of rows in that specific sheet so we know how many times to
iterate now whenever we're providing a specific number in a for loop like 75 for example
in this case we need to put that number in a range like this
so we can't just say 70 or in this case max row now why do we need a range here
and why is number just not enough because the for loop is for iterating
over a list and the range will create a list of numbers to iterate through
in our case range of 75 will create a list of numbers or
sequence of numbers from 0 to 74. and with that we're going to have
a valid for loop where for each item in this list of numbers
some logic will be executed so that's why we need a range here and now there's one more thing that we
need to fix we go back to our spreadsheet you see that the first row so this is
going to be the first row basically does not actually include the product information
it just includes the titles for each column right so we actually do not want to read
this line we want to skip it and we want to start from the second row
so instead of starting for loop from the first row we want to start it from the second row
and in order to tell python to start at row 2 in the range function we're going to
pass first parameter 2. so basically this will give us a new range of numbers
starting from 2 instead of starting from 0. and since we're using those numbers in the range as an index for the
rows the first number is going to be 2 so we're going to start iterating from the second row
so this will be the start point and this will be the end point so basically from here to the end
now there are two things specific to a range that you should be aware of
first of all when we do not provide the start index basically
the start number in the range by default it's actually zero so it's not one but it's zero
and obviously we don't have a line zero here so if we executed it with the default
one we would get an error so that's one thing to consider that range actually by default starts at 0
and not 1. but for us it doesn't matter because we're skipping the first one anyways and we're starting from line 2
because our spreadsheet doesn't have line 0 obviously another specific of the range
is that the second value here basically the last number of execution in the loop in our
case this is going to be 75 because we have 75 lines and we printed
that out here that number is actually exclusive it's not inclusive that means that
the range will execute from line 2 to 75 exclusive so basically
till here this line will not be included in the loop again that's a specification of the
range which we need to fix and basically want to tell you know what we
want that iteration including the last number as well including that max row
and a simple fix for that is going to be to do plus one here so basically whatever
the max row is we want to include that one as well so we want to add one to it so now we
have a range starting from two and ending in 76 exclusive so obviously the 76th
line will not be red and this will now give us a range that we
need and now that we have condition for the
loop and we have set how many times it should execute let's actually execute the logic
itself so what is the first information we need from that product row for each row we basically
need the supplier name so that we can increment or start counting how many
products this supplier has so we need this one two three fourth column and the
value in that fourth column for each and every row right let's go back to editor how do we get a
value in the cell you have to imagine when we iterate we have one row per iteration
so right here we actually have this product row which is just one row and we have four columns here
and we want value in this specific cell and we can get it using first of all product
list because again we have all the information here so in this list we need a cell right we need a value of
a cell so that's the name of the function and the cell basically takes two
parameters again product list contains the whole sheet here so the
whole list with all the rows and columns and we can get a specific
cell value so whatever we are doesn't really matter from that variable by providing two
values the row number and the column number that's it so row nine column one basically will be
this specific value row five column four will be this specific value so
for each iteration we're gonna do exactly that so for our case the supplier is
always column four and the row is dynamic because we are iterating
and therefore we're going to use whatever row we're at at the current
iteration so that's the first parameter and column 4 as i said and this will give us
the supplier name for each and every row so we can grab that value like this
and this is going to be supplier name so we can save it in a variable
as a next step we're going to start building how many products each supplier has
we're going to start building a dictionary with the name of the supplier and then how many products they have
so we're going to be building this dictionary here so this is a reminder now for what i
said previously that you don't need knowledge of math in programming rather you need logical thinking right
so you're going to get tasks like this where you have to basically logically decide how you are
going to do a certain task and think all this through right so programming is more about logic rather
than pure calculation or math which is actually more interesting and cooler and that's exactly
what we're going to need in this example we're going to need some logical thinking to basically build this
application so bear with me on this one the first thing we need to check here
so think about this iteration on the first time and second time the first time the list
or the dictionary is actually empty so we want to add the first
supplier to the list right away right so we're gonna grab that and the syntax
for adding a new entry in a dictionary is like this where we have a key
and a value here so basically what we want to end up with is supplier name like a
company and number of products for that supplier
that's the dictionary that we want to end up with then it's going to be
bbb company and so on
so the very first supplier goes directly into the list and we're going to need the name of that
supplier we don't know what it's going to be so name as a key
and value is going to be 1 at the beginning right this is the very first iteration
so after the first it iteration we're gonna have the first company name supplier name and
count one for that on the second loop second iteration basically if
the next line is a different supplier like here for example then a new entry
will be added because we have a new key now with count one right so now we're gonna have
company a with one product company b with one product now what happens when on the next
iteration we get company a again right what we want to happen is
company a the product count to increase to two right because now we
found another product that is supplied by the same company however with this land we are actually
overriding and setting it back to one so how do we make sure that
number of products gets incremented instead of always setting it to one what we're going to do is before we
execute this line we're going to check is it a new supplier or an existing one because that makes a
difference so how do we know if it's a new one or an existing one we can look that name up in the
dictionary if we have already edited that name in the dictionary then it's going to be there
and we can do that very easily again with the syntax if supplier name in
the dictionary it's actually very readable syntax that says is the
supplier already added to the list or is it a new one so if this is true again
remember if conditional so if this is true statement if the supplier name
is already there then it is an existing one so we need to increment the product number instead of setting it
to one so instead of assigning a new value we want to grab that value the existing one and
basically add one to it right just increment by one so getting a value from a dictionary you
probably remember the syntax already using the key and we can save it into
a variable let's call it current number of products
like this remember we're using a key in order to get the value and the key is
the supplier name value is the product count so this will give us the current number of products on the
first iteration this will be one or after the first iteration we're going to have one product for that specific
supplier and if we already have that supplier
in the dictionary we want to increment the number of products for that specific
supplier by one because we just found another product from that supplier so we want this value to now be
plus one right so current number of products plus one so that's the new value that we
want for the existing for this current supplier and how do we assign it back
to the dictionary again we grab that and assign it so as you see
taking the value from the dictionary has the same syntax as setting that value in the dictionary
in fact we could actually use a shortcut here so instead of current numproducts we
could just take that value and add plus to it and then set it back as a new value and
this will basically just give us a one-liner for the logic depends on the taste whether this looks
nice or not or whether it's better to have a new variable and increment the value like this let's
actually leave it like this so this logic will take care of adding a product count
every time we find another product for the same supplier however now we have to decide what
happens when it's a new supplier so if this condition is false if the supplier name is not on
the list and this is going to be the case on the very first iteration as well because the dictionary is
basically empty so there are no supplier names and for that case
else we're going to do what we had before which is just setting that number to one
right this is going to be the first value so this will do two things basically it will create
a new entry in this dictionary for this new supplier and it will set the product count number
to one for that new supplier and that's it that's actually our logic and let's actually try this out and
print it out so right here i'm gonna print adding a new supplier
and this is going to happen three times because we have three suppliers so we can safely print it because just
gonna happen three times there is one more thing we need to fix here and that is
getting the value from the cell so if we actually execute this now let's comment this out
and actually print out what the supplier name here is
let's actually get rid of this line we don't need this and run the program you see here we have
cell information so it's not actually the the value the name of the supplier but
it's just the object cell and the reason for that is because we're accessing a cell but
we're not actually extracting or getting the value out of it and we can do that using this value
attribute on that complete object again something that you can look up in
the documentation of this open pi xl module
so now let's run it again and now we have the actual values of that cell
and this will take care of that small problem and now we are ready to
execute our program and after the for loop actually
let's print out the dictionary because we want to see the results of the dictionary that we are
building here and i'm going to execute it now and there you go first of all we have
three times adding a new supplier because we have three suppliers and this is the
resulting dictionary and it looks actually very good first we have company a because this was
the first on the list and we have number of products that were counted
for that company then we have the second one with number of products and the third
one so it looks like our program did exactly what we wanted
so that takes care of the first exercise now i want to note here
one small thing which is an alternative syntax for getting values from a dictionary which
is actually a more recommended way of doing it which is instead of
having these brackets here to have a get method right
to use a get function with the key name so now you see the
difference between those two so this is setting the value of that key
again remember key is this one here and this is the value so we are accessing the value of the
dictionary using that key and get function is actually
another way of grabbing this value out of a dictionary using the key name
again if i execute this i should see the same result
after the first exercise basically we see from which company from which supplier we have the most
product or the highest number of products now in the second exercise we're going to calculate
the total inventory value per supplier meaning in our list for each product we
have number of units for the product and the price so basically for each supplier we want to calculate how
much is the total value of inventory of their products of all their products and again as a
result we want to create a dictionary that basically tells us that value per company let's go ahead
and do that so this was calculation
calculation for number of products per
supplier and here we're going to give us some
space and do calculation
total value per supplier or total value of inventory
per supplier that's what we want to calculate so just like we did before we're going
to create a new dictionary now and we're going to call it appropriately
total value per supplier
and start with an empty dictionary again for starting in an easy way let's
consider the first very first iteration for the first supplier how are we going to calculate for the
first supplier for the first product so i'm going to
take this new dictionary and with our familiar syntax i'm gonna do
supplier name so that's gonna be our key and the value of the very first iteration for the
first product is going to be inventory
times price so for the first product we're going to calculate how much
or how many of the product items we have and number of price right that will give us
value of the total inventory for that one specific product and that means
we need those two values right now we're just getting the value of the supplier
so we need inventory
i'm actually going to copy this so we need cell for product row and
column inventory is on column two and value so whatever the product row is
going to be so for each product basically for each row we need always the second column so all
these values here and then we need price which going to be product list cell
and we are looking for the third column for every row
number three and value so now we have inventory and price per
product and the way to calculate value is basically inventory that's the
number of product items times price very easy that will give us the first value
for the first supplier now again the same way if we are getting a new supplier so
basically in the next iteration if it's a new supplier then this line will get executed and everything is fine
however if it's an existing supplier that we already have in the dictionary then we have to add to that previous
value right instead of setting a new one so we're going to do very similar logic
as we did here so we have the supplier name we're checking is it a new supplier or an old one an
existing one this time in our new dictionary
and if it is we're gonna grab that old or existing value
again using this get syntax here existing value now is hundred we want to
add to that hundred right so we're gonna grab that value this is going to be current
total value and then we're going to add to that
current total value the inventory value for the current
product and assign it back to our dictionary
now our variable names a little bit long so the code kind of looks a bit
cluttered but it's easy to read and descriptive so you can also go for shorter variable
names to have a cleaner code again matter of taste i usually name the variables
something descriptive something that basically really differentiates or says what the value is
about and that basically takes care of
existing suppliers or the suppliers that we already have in the dictionary else we do
this and this is complaining about too many blank lines so let's fix that
and that's basically our logic again to go through it once for new suppliers again this is going to
happen three times because we have three suppliers we are basically setting the total
inventory price or inventory value for that specific product because remember we are iterating
through products and then every time a new product
iteration happens for the same supplier we basically just add an inventory price or total value
for that specific product for what we already have in the dictionary
for that specific supplier so now let's again print out
our dictionary let's actually print both values
so the first dictionary is this one right here supplier and number of products second
one is going to be supplier and total value of all the products they have in the
inventory with us execute and there you go we have both dictionaries printed here and here
you see for each company we have the value in price basically right here the value
for the total inventory of all the products they have on this list and we see that value
per supplier and the values are decimal numbers with cent precision so
95 cents 47 cents because the prices are obviously like this as well and if
you're wondering this comma here is actually a german format for number precision so this is going to
be actually equivalent to english dot and we don't have to worry about this actually because
python reads it and interprets it correctly so no problem
with different language formats so that takes care of our second calculation
now the third logic we're going to write is basically printing out all the products that have inventory
less than 10 like this ones here for example so the logic for that is actually going to
be pretty easy what we need as a result is again a dictionary
let's call it products which have inventory under 10
like this and the value in the dictionary should be the product number
which we have in the first column and the inventory count so let's get rid of
these print statements and let's do calculation or we can do logic products
with inventory less than 10. so basically as i said for each
product which has inventory under 10 we want to print out or we want to save in a dictionary the
product number and the inventory count so we have the inventory count already the
value from the cell but we don't have the product number we're not accessing it so let's actually
do that product number
and we already know how this works this is going to be the first column
right this one here and this gives us product number and now in our dictionary
products under 10 we want to add value like this product
number and it's going to be set to value of the
inventory like this however we don't want it for every product we wanted only for products with
inventory less than 10 and that's going to be an easy if conditional here
if inventory again remember this logic all this logic happens for
each product row right so all these get executed for each of these rows so basically we
have inventory number on each iteration for each specific product and that's why we can just say if
inventory is less than 10 so if the value on that specific row is
less than 10 we want to add that product the current product that we are
iterating on on the list and set the value of inventory as well
again we have some complaining here because of the lines and this will be the logic basically
and a use case for this type of calculation would be if we find products that have inventory
which are less than 10 means we need to reorder them right because they're going to get out of stock soon
and now at the end let's print the list of all the products
that have inventory less than 10. so i'm going to execute it
and here we have the product number and inventory count so we have three
products basically which have inventory less than 10 and let's actually
check that product number 25 right here which has inventory of seven and product
number 30 inventory of six and the third one as well now you're
probably wondering why we have this dot zero here because by default those values are interpreted as
float numbers and not integers if we wanted to we can actually fix that
using the integer function in both cases like this
let's execute it again and we have the integers and not floats
and finally as a last exercise what we're going to do is we're going to actually
add some value inside that spreadsheet till now we have been reading the values
and doing some calculations and just printing the result on the terminal as the last exercise
we're actually going to create a new column here for every row and we're going to calculate basically the total price of
inventory right the number of units times the price and we're going to basically set the value for each product
inventory multiplied by price so how do we add a column or how do we make
changes to a file it's actually pretty easy the same way as we were grabbing the
value from this file and basically reading the values we can add values to it and add columns and
rows etc so to add a fifth column we're gonna do product list cell
product row this is going to be the number of the row and a column number so the same way we
accessed the cells for all other values we can basically access the cell on column five
which has an empty value right so we're not actually creating a new column
we're just grabbing a value of a column five which happens
to be empty and we are overriding that value and we could do the same actually for any other
columns here right we can overwrite all these values if we wanted to so that's basically what we're doing
so we're grabbing that cell and we can now save it into a variable let's actually call it inventory
price so now that cell is saved into that variable so we can
reference it and note here that i didn't add dot value at the end
because if we want to update the cell we need the whole cell object right so
that we can actually set a value on that so how do we set a value for that specific cell so again note
that this is iteration so for each product row the value will be set so how do we set
the cell value i'm just going to grab this variable here inventory price which is
representing the cell in column five for each iteration and right here at the end because this
is our last exercise let's write this is a logic
or basically add value for total inventory price
and the way we set the value in a cell is dot value equals
and the calculation for that is actually very easy we already did it here inventory times the price for that
specific product and that's it so we're using that dot value here in order to set the value instead of
grabbing the value and that will actually update and add this calculation a result of the
calculation on each line on this column but note that this will only
change the value in a temporary file but it's not going to save anything right so what we want to do at
the end if we want this change to persist to actually be
saved we want to explicitly save the file so for example if i manually did
something here added some value i would need to save it here as well right so that's exactly what we need to
do here but programmatically using python so how do we save a file using python
again this package or this module that we use here also gives us a function that we can use
to save the file and since we're doing an operation on a file and not a sheet here
we're going to grab that variable in file and here at the end we're going to call
a save function on it and this will save the file changes however we're not overriding the same
file the existing inventory file we're creating a new one and because of that we need to provide
a name of the new file that is going to be created with the save function and we're going
to call that file let's say inventory
with total value and extension
the same extension as we have here so this line will now save the changes and
create a new file from the original one which has these values generated basically
so now that we are done with the fourth exercise let's actually print out everything
that we've done so far i'm gonna take all those values
so this is going to be execution of all our logic printing these three dictionaries here
and then updating the spreadsheet file and saving it into a new file
so with this let's actually execute our program and see what happened
first of all we have all those three dictionaries listed here or printed here with the values
and if we pull this aside here you see a new file got generated
with the name inventory with total value and if we open this file we should see that for each row a new
column was generated and filled with values which is calculated for each product's
inventory and price so that's basically our project that's
how you work with files in python specifically with spreadsheet files and as i said at the beginning
this could be actually very useful automation logic when you're working at a company where there are lots of
excel files or spreadsheet files that employees have to work with and manually update stuff inside
in this part we're going to learn the concept of objects and classes in python and generally object
oriented let's consider an example of an application with
lots of users for example linkedin right we have users and each user will have some
information for example email address
name of the user
password maybe a current job title
work experience a set of skills and so on right so each user will have all this
information but obviously the actual values the actual information will be different
for each user in addition to that users are able to do something with their own
information right so for example a user can change their password
change their current job title add a new skill
and again basically do stuff with their own personal information and our program
will be able to handle this user information plus user changing their information right so
this will be user data and in order to do something so to perform some action we would have
functions for that right so all of these will actually be functions however as i mentioned
every user will have their own data and whenever a new user basically registers for an application
all these data should be gathered for that new user and saved in the application so
basically that means that in our program we need some way to define
kind of a blueprint for a user for all the data user information and user behavior right
things that the user can do in the application because if we have thousand users in our
application obviously we can't write the same logic and same variables
thousand times right we want to have a blueprint once and then we can use the blueprint for
all those thousand users and that blueprint for a user is called
a class and the specific implementation of that blueprint
is called an object so think of this like a blueprint of a building right you
can have a blueprint once which is like a general description of building with doors and windows and
everything that every single building has and then the specific implementation
of that blueprint will be the actual built ready buildings right so that's the same concept we're going
to create a class blueprint for a user and the user class blueprint will define
what information a user has and what actions user can perform in the
application and object then will contain the actual information like this information right here
for each specific user so let's clean all these up and let's now actually create class
user so let's create a new file in our
project and let's actually call it user dot pi so this is going to be our
user class and inside that i'm going to paste in
this piece of code that basically will represent data for the user and some behavior
these pieces of data are also called attributes for that class so now let's turn
all of these into a class so first of all we create a class using class special
work and you also see the syntax highlighting and we're going to call that user
and you know the syntax already for functions um etc with indentation so this is going to be
where our class definition goes now note here the capital letter for u for user
and lowercase user in the python file name so a standard
convention is that we call classes with a capital letter and the file names are written in
lowercase letters and now all of these should actually go inside that indentation right like this now we said
that class is a blueprint for specific objects and blueprint cannot actually have
specific values right so all these needs to be removed so in the blueprint we don't
have any specific values we just have the attributes so basically we say this user will have
an email name password and current job title the actual values of those attributes
will be then set when we create an object from the blueprint however we need a function that will
actually take those specific values and assign them to an object which is created from the
blueprint and we're gonna create that function right here in the class
and that function actually is called init with underscore or two underscores at the
beginning and at the end a couple of notes here first of all you see the syntax highlighting just changed
to this different color second note is that these functions that start with underscore in
python are special functions so python basically gives them some special meaning so it knows
exactly what this init function is and we also have to call it init we can't just call it whatever we want and final
note is that this init function in python is something called a constructor again we
have a blueprint and we're constructing objects from the blueprint and this init function
the constructive function will help us construct objects from that user class and now
for a function syntax you know that we use these brackets right and when i
start writing the bracket you see that self got automatically created as the
parameter here and the reason is as i mentioned python knows what the init function is and that
it's a constructor so it knows that it needs this self as a parameter again self is also a
special word in python it has a special meaning and it actually refers to this class here
right this entire class if i hover over it you see self points to the user class
and it will basically just help us access and reference all the attributes and
functions within that class so it's for special usage within that
user class and we're going to see examples of how to use that in a second now you can think of those attributes as
variables within the class because they belong to the class right they describe basically
what attributes or what characteristics this class has and in order to define that
these variables belong to the class we need to use self here so
and you see again syntax highlighting changed and the red line disappeared so
basically we are defining that email name password and current job title belong to this class using this self
keyword and now the last thing remaining in this constructor again remember constructor
is to construct new objects so whenever a new object is created the specific values will be assigned
to all these four variables right and those values those specific values will be
passed into the constructor as parameters so email name
password and current job title those four values
must be provided to the constructor whenever we're creating a new object note that these
names here could be different from this these are not the same these are just parameters and using these parameter
values we are going to basically set the variables or
attributes of the class like this and the warning is gone as well again as
i mentioned this could be something else we could call it user email so it doesn't actually have to be
the same it's just for convenience so this function will construct an object
with parameters that we provide when we actually create it and we're going to see how to create an
object later this is just the definition as remember when you define a function nothing actually happens
until you call or you use that function so right here we're just defining that
function so that we can use it later so constructor logic is
done now we have these two functions that any user in our application
can do right any user can change their password or change their job title
and logically when change password happens by user basically user provides a new
password in order to override the old one so the flow will be following
the object will be created for the specific user so the initial data for that object will
be provided so we'll have the user email name password and current job title and later at some point user may decide
to change their password and their current job title and that means the initial data will be changed and that
means that we're actually changing the attributes
self.password with a new password right so logic will be like this
now we have red lines here why because we need this self as a parameter first of all we
also have that as um note right here
so just like here we need to actually pass that self as a parameter that's just how it is because we need to access attributes
of that class in that function and new password will be
new password variable will be the new password basically that user wants to set so this
will change the initial password with the new one and the same way in change.title we have self as a first
parameter we always need it in all the functions because otherwise we cannot access the
attributes in the class and new job
title
so now let's review this class that we created first of all we have this class keyword
here with a capital letter for user you already know the syntax with colon and then
indentation so this all of these inside this indentation is class body
so part of the class logic first we have this init constructor that sets the initial
values of that class attributes whenever we create a specific object for that class right
so this happens only when we construct a new object and then on that constructed object we
can change password we can change job title and note that right now we have
nothing basically hard coded we have no specific values here right everything is just
parameterized and also this is just a definition for
class and its functions nothing will actually happen when we execute this because we're not creating any user
objects so if i right click here and execute this run user you see that
nothing happened because the class definition was created but we're not doing anything with that
class definition we're not creating new users so now let's actually go ahead and
do that in the same file in user.py
i would actually use that class blueprint to construct a new user object and creating an object from
a class is actually very simple we just write name of the class and
parentheses this is actually the same syntax as calling the function with parameters
and the parameters that we need to give that class are these four values here
and note that calling this user class function basically in the
background we'll call init function right so the constructor will be called whenever we write this
syntax with class name and parentheses and this init constructor as you see
expects four parameters so we have to provide all those parameters right here in the parenthesis so let's
actually provide them let's do user email
like this my username and password
and a current job title again very similar to calling a function and this will actually construct a new
object from the user class which has these four attributes with
values that we just provided here and has these two functions that we can use
to either change a password or change job title one note here is that functions that
belong to a class are actually called methods so there's a special name for functions
which are part of a class so we can refer to them as methods so user object basically gives
us two methods that we can use now again if we execute this program now
we will not see anything even though user will be created because we're not printing anything to the
console we're not doing anything so let's do that run user nothing happens
because we need to print a message or some kind of information so what i'm going to do now is inside
that class i'm going to create a function or a method as we learned now
that basically prints back some user information right prints me the name email and current job
title because we don't want to display password so let's give us some space here
and let's create a function called get user info so that we can see something
and again as soon as i typed in these first parentheses self got
generated because we need self in every function within the class and in the function body we're gonna
print user information so let's say user
and name of the user which we can access using self remember all the attributes that the
object has can be accessed with this special word here so self
dot name so user whatever the user's name is
currently works as a and now we need the job description
or job title and you can contact
them at and now we can use the email
so this message will be printed for the user again because this will be used for
any user of our application the message these parts will be the same but each
user will have their own different name different job title and different email address
so all of these are and written as variables because we
don't know these values up front so now we can actually use this function
or method to print out information of a specific user so how do we use or how do we call
that function of the user we first save it into a variable app user one
or nana doesn't really matter let's call it app user one so it's generic so how do we use that function
to print out the information about the user if i do app user one and dot
you see that i have the attributes here the four attributes that our user object has or user class
and we have these three methods of the class get user infor change job title and change password so
using get info we can call this function
and if i execute this right here you see user nanogenasia currently works as a devops
engineer you can contact them at this email and now let's say we want to change
job title of that user we do that in the same way app user one dot
change job title and we're gonna provide the job title
parameter note that even though you see two parameters here on that function this first parameter is passed in
automatically so we don't have to basically pass that self right it's already done automatically we just have
to worry about these parameters so new job title is let's say
devops trainer and now we can call that
user info method again and execute and you see first
message printed here before we change the job title now it's devops trainer
so that's how we can create a new object from a class and we can
use methods of that object by first saving that object into a variable and then calling that function
on that variable and obviously now this is just one user but if we had another one
user two that's actually clean this up we can create
a new user with different values like this
they have their own email own name
own password and on job title and again
we can create that user and basically just use the methods defined in the
class and in two different cases or for two different users
obviously the user info will be different so let's execute this and right here you
see the user information for both users and obviously
if you have an application like linkedin you don't have two users or a thousand users you probably have millions of users and
having a user definition once and reusing it every time a new user gets
created or basically existing users do something in application
is only possible when using classes and objects instead of just having all
these logic non-structured throughout the code and again in this type of applications
you would not have four attributes and three methods you will have probably hundreds of attributes and
hundreds of such methods now as you see here we have created this user.pi
file for user class but we're also creating these objects in the same file which actually
doesn't make sense because the file should be only for defining the class right so all of this logic actually needs to
move out from here and this should be just only for class
definition so in the application again using an example of linkedin
we would have class user and then we would have a class post right whenever someone
posts something each post will have their own attributes like the actual
message or text in that post the author who wrote the post how many likes it has
etc as well as specific functions right for example changing the post commenting on the post
etc so you will have separate file for each such class right in the application and
then you would have one file somewhere else this could be a main dot pi where you would actually use all those
different classes and create objects from those classes and that means that logic that we wrote here
constructing a user object and then calling some functions on that will actually happen in another file in
our case let's use main.pi and now let's see how we're going to do that i'm going to paste in the code that i
copied from there and as soon as i paste in you see those red lines
so basically main.pi says that it cannot find a reference to user so this file doesn't
know anything about the user class so how do we fix that or how do we make this user class available
in another file and if you remember when we needed to use modules or
basically functions variables whatever from other files in python we use import to basically import those
functions and make them available here or import the whole module to make its functions and variables
available here and the same way we can import classes from another file import
user and note here that i'm using the name of the file user lowercase and not the class name
with capital user right so we are importing that file so now we can use
anything that is defined in that file and one of them is class called user and the way we can
access that class now is using the name of module and not the class
user itself and this is basically exactly the same concept as we saw before
because we are importing a module called user remember every python file that has
functions or variables or classes inside is a module so we are importing a module
and once we have that module imported now we can use and access functions variables or
classes of that module and we can do that by copying the name of the module
dot and there you go in the same way here so exactly the same concept whether
this is a function or a class doesn't matter we use it the same way remember when we
use the date time module with the syntax datetime.daytime and that was an example of using a class
from a module now user.user may look a little bit weird so we can use
our familiar import statement where instead of importing the whole module we can pick
and choose and import specific definitions or specific elements of that module
in our case we just have one element which is the class so we're going to say from user module
import user class and now we don't need the module name anymore because we imported
the class itself and now if we execute main dot p y
let's do it again here we have the same result for two of our users
and again as i said in applications you will have multiple classes that are connected to each other so for
example if we have a post here post blueprint basically whenever a new
post gets created with some specific values like the actual message and creation date time etc
it will also have an author and that author will actually be one of those user objects
right so you will have some functions here that actually reference the post and we can also see
that in action let's actually create a post class
let's give it just two attributes to keep it simple so we need a constructor here
in it and we're gonna pass in message
and author right this is gonna be the user who wrote it and you know the drill already
and let's create another function which displays a post with its
respective author so let's do get post info
again we have self here and let's print
post
written by and the author name so this is going to
be our simple post class and user is able to create new posts so we have
the blueprint for a post and the same way we can create that post
inside the main dot pi so first let's import
the post class
and then here we're going to create a new post in pycharm you get this nice display of
parameters that function or class basically expects so we have message and author
let's do some
message or post and as a second parameter we have the author and we can use
the name of a user so let's do app user to dot name and this will
create an object also called instance in programming special instance of that post class
and then we can print the information of that post first assign it
to a variable let's say it's a new post and on a new post we're gonna call get
post info let's actually run this application now and see the result and here we have our post message that
gets printed by this get post info method in the post class
and at the beginning i mentioned object oriented programming which basically means that when you're
writing your code with objects and classes like this to create blueprints and then
use those blueprints for specific instances that's called object-oriented
programming and also an interesting note here is that in python almost
everything is actually an object for example the data types like string
integer list set etc when we printed them out we saw class of string or class of
list so these data types are also classes in python and this int or sdr for string functions
we called where actually the constructor we called to create a string or integer object and the constructor of
int for example took a string representation of a number and in its init function and constructed
an integer out of it now for us in terms of using these data types and variables etc
it doesn't actually matter but it's just an interesting thing to know about how this whole thing works in
python
in this part we're going to learn how to use python to talk to external applications
in our case we're going to use gitlab and then application and just note here that communication between
two applications in our case our python application and a gitlab application usually happens
using a common protocol like http so basically our python application will
send an http request to gitlab application and from the gitlab application it will get
an http response for that request so just know that http is just a
protocol that these two applications can communicate with over the internet i have a couple of
projects on gitlab so we're gonna write a very simple python application that basically goes to gitlab and asks
for the list of projects for my user and then just prints it here in our run
window and the concept of one application talking to another is basically done
using something called api requests so the remote application in this case gitlab has an
api so these are functions basically that gitlab makes available for other applications
to call and we're going to call those functions from our python application in order to get the list of projects for
my user and that communication or python basically asking for this information
is going to be an api request or api call and what we get in response from
this gitlab api is going to be api response so let's go ahead and do that
in python in order to make those external requests to remote applications we're going to
need a module called requests this is a generic module that you can use for
any external application and as i mentioned at the beginning the communication happens
using http protocol between two applications and as you see here also in the module
description it says an http library which allows you to send http requests and then receive http
responses from another application and that's exactly what we're going to be doing and this request module is not part of
python so we're going to install it using pip again remember that we're using pip
that actually comes packaged with the pycharm so in the terminal window of my ide of
pycharm i'm going to execute peep install requests
successfully installed request this is the version of that module
and if i expand this external library's site packages i'm going to see the requests package
in the list great so once we have the module available locally we can
import that module in our file and this requests module now has or
package actually has functions variables and objects that we can use to talk to these remote
applications like gitlab as i said gitlab is just one example you can talk to any
remote application that has an api and we can not only do requests for getting the existing
information but we can also make requests to change something in that remote
application so for example i can write a python application that will actually create
a new project on my gitlab account but to keep the demo simple we're just
going to be fetching information from gitlab so how do we make requests to an api of an
application with this requests module we get a function called
get and get takes one main parameter which is url so basically we need to
tell python where to find that remote application or again in our case where to find
gitlab to talk to it so we need the url of gitlab and where do you find this url
information of a remote application you can basically google that every application has their own documentation
where you can see the urls so for example for gitlab i actually googled it
so if i do gitlab api documentation like this
let's make it bigger so you have basically description for the api and what type of information
you can get from gitlab and also what kind of things you can create in gitlab and you see an example api here that
basically just lists all the projects however we want to list projects of one specific user in this
case i want to list my own projects and in this documentation i found this
list user project section where i have an example of how to use projects for a specific
user so we have slash users and the user id so that's going to be my gitlab user id
and projects so basically the url will now look like this first we're gonna have this base url so
that's basically https gitlab.com api v4 and all the things that we want to do is
going to be at this base api and after that we can basically depending on
what exactly we want to do we can choose one specific action and again going back this is
the action we want to execute on this base url so from gitlab we want
projects that belong to user and right here i'm going to add my own gitlab user id
so if you have a github account you should add your own user id here and that's going to be an api url for
user projects and this will actually give us some kind of response so requests.get
will make that request to gitlab and it will return some kind of response and we can save that
response into a variable so let's call this variable response because that's what it is
and on the next line let's actually print and see what's in that response
let's run our application and right here you see we have an object
response with a code here 200 is a code for a successful request but we're not seeing the actual
contents right we want to see the projects with their details and in order to get that we're
gonna do dot and text and let's actually execute this now
and now you see these square brackets which means it is a list because we have
a list of projects and this whole bunch of information about projects there
and you also see curly braces so this is a list of dictionaries and each dictionary holds
information of one specific project now if i actually print the type of that
response text
like this see that it is a string so even though we see the format
is actually a list of dictionaries we're getting a string because we're accessing
text attribute now there is actually another attribute which will give us
the same thing but as an actual list of dictionaries instead of string and this
will be actually a better way to get that information because then we can work on it so we can look through it and get the individual
elements and access the values so what i'm gonna do now instead of dot text i'm gonna
use json json is a standard format that all programming languages
understand and usually when two applications communicate with each other which are written in different languages
and with different technologies with json they have a common format
for communication and this requests module basically gives us this json function to read the json format
that gitlab sent us so json function will read the json response from gitlab and turn it into one of the
python data types so i'm going to execute this now and now
you see that response.json actually gave us list data type instead of string
so again for demonstration
since this is a list i'm going to access the first element of that list
and print that out and right here you see that is actually the first element
just the first one from the list and that element is a dictionary as you see so all these
just to give you an idea of what we're getting back from that gitlab api and what we can do with that
response or how we can actually work with that response so i'm gonna clean all this up and we
saw that response.json gives us exactly what we want and that is a list of my projects so
let's call this variable my projects and now what i want
to do with this is i want to print out in our window for each project
project name and project url so basically the repository url for that
project so i don't want to have any other values like id
or description or whatever other stuff i have in this dictionary i
just want name and project url for every single project and i want that information
printed out in this window so how do we do that we have a list so we're gonna loop
through that list to access each element inside that list so you remember we have for loop to loop
through or iterate through a list and give us access to each element
one at a time so here i'm going to write for loop and if you remember the syntax
of for loop we have four and then a variable which will represent the single element in that
list and in this case it's going to be a project a single project and then we have in
list so for project in my projects do something so for every project
element in this my projects list we want to print out the name and the url
so right here i will do print and let's do our formatted string here
and let's start writing our message let's do project name
and the project name will be this one right here now how do we actually access
the name of the project in each project element as you see here these project
elements are actually dictionaries and how do we access a value in a dictionary
using the name of the dictionary in this case our variable project so this whole thing
is going to be saved into a variable called project and then on that
variable on the dictionary we're going to pass in the name of the key which is name
now i've been using double quotes throughout our project and for a syntax for dictionaries as
well like this right however here we have a small
problem which is we have double quotes inside the double quotes but as you remember
for string representation we can actually use single quotes as well as double quotes
and this is one of the really important use cases for why we can actually use
both single and double quotes for a string and that is if we have a string inside
another string like right here we can actually use that interchangeably so that we don't have
this problem here so now as you see back to normal everything works because
now python knows okay this is another string which we're using inside this string
so we can use these interchangeably as we want so this could be single quotes and this could be double quotes
wouldn't really matter but that's a really good use case why we need both types of quotes so we have the
project name now we need a project url
and let's see where the project url is in our dictionary this is one element one dictionary right
so i'm gonna scroll it to the left and we have web url this is what we
could use or we could also use http url to repo let's go with the web url so again this
is a key inside the dictionary so we can access the value so this is actually the value
we need and we can access that using the dictionary name projects
and the key name which is web url and this is actually project not projects and this code will now
print name and url for each project so let's actually execute our program
and as you see we have project name and project url
for each project we can make the output a little bit cleaner let's do a new line here
and a new line here so we can separate the projects from each other and
run again and there you go this looks a little bit cleaner for each project we have a name and a
url so if i click inside i'll go directly to this
project so that's basically a very simple example of how to use
requests module to talk to external applications or external urls and then do something
with the response that we get from that external application by first converting that into an actual data type
that we're getting using json function so in our case it was a list and that's why json function actually
converted it into a list if the response was a dictionary instead of at least
then json would convert it into a dictionary and then we can do something with that
response value congratulations you made it till the end
i hope you learned a lot and got some valuable knowledge from this course if you like the course
please leave a thumbs up on this video on my channel i actually cover lots of different devops topics like
docker ci cd terraform and more so be sure to check out my tutorials if you're learning python
to become a devops engineer i actually have a complete devops bootcamp
with all the technologies you need to learn as a devops engineer which also includes a module for
automation with python with several cool demo projects to automate some
common devops tasks like application and server monitoring
cloud automation tasks with aws jenkins etc so if you're interested
check out more info in the description also happy to connect with you on social media
so i would love to see you there with that said thank you for watching and see you in
the next video
welcome to the best Python tutorial in the world they'll take you from a complete beginner to not so bad this
tutorial will cover so many things you're going to be building amazing projects all with python as a beginner
so you're going to be building an app with like a counter app we're gonna go ahead and build guess the number game a
YouTube app that's gonna queer YouTube get the data back show it on the screen rock paper scissors who doesn't like
rock paper scissors and we're also going to be building a random dog generator app which is going to be awesome you'll
be able to click on the dogs generate the dogs it'll remember you logging in it'll remember you logging out there'll be a leaderboard of who generated the
most dogs I mean oh my gosh all this with python while all of that is fun first we need to get our fundamentals so
the first thing this course is going to start with is clear cut beautiful
amazing fundamentals okay mastering basic concepts starting from variables
to going to conditionals going to Loops for Loops diction lists you name it list comprehensions
all of that stuff we're going to cover if you've never coded before a day in your life you're absolutely in the right
place if you're even intermediate I promise there's going to be things in here that I'm going to show you they're going to blow your mind ways to refactor
your code or List comprehensions Lambda functions all the stuff is available for
you if you're Advanced there might be still some tidbits that are there that you'll be able to pick up with that said
hey if you don't know me I'm rafikaze the CEO and founder of clever programmer I've helped teach millions of people how
to code and now my goal is to help you learn how to code and become a software
developer alright now if you want to follow along with me into this course you're gonna need to scroll down below
and click the link in the description join.replet.com CP Dash python open that up and Fork
this repository if you don't Fork you won't be able to write any of your code or do anything with this okay and the
reason why I'm having you use this Rebel is so you don't have to install python you can just get it up and running
without having to do anything everything will be here like the images and the assets you'll need your project links
for your exercises all the notes will be here for you so everything that you need to be able to get access to you'll have
it in here without doing anything and then once you're done it'll bring you to a page like this in this main.py file is
where you're going to write all of your code and I mean all of it everything goes in here okay this quasi.py file
that's here this is all the code I will be writing in the video and you'll be following along with me and so you can
go at any time to this quasi.py here and you'll get access to and be able to see
all the code that I've written so that way if you're worried about missing notes or anything don't be because everything is already there and so
you're not going to miss anything this readme you should be seeing this over here in the if you select markdown at
the top here okay and this is pretty important and this will have all of your Prime projects here available for you
these projects you won't be jumping into them now but you'll be jumping into them once you master certain Concepts that
shows you that you're going to be building this app right here and it tells you hey these are the concepts pure python Concepts that are going to
be covered so make sure before you get to this project you master all of these Concepts that I have listed out here
okay and then it tells you hey don't worry about the web development Concepts you won't need to know these uh before you can start building this all of these
applications you build will be already online and deployed which means that you could just send it off to anybody
anywhere and they can play with these projects that you build any project that you go to will have this project link
where you can write your code it'll have this demo link where you can go ahead and demo your apps and then it'll have a
solution link as well so you could click and view the solution and all the notes we're going to take throughout this will
be made available to you here as well in this markdown if you ever want to go to it again just hit markdown and then just
scroll down and so like if I'm talking about dictionaries those will be listed out here conditionals Etc with that said
we're going to start from complete complete complete beginner stuff okay so don't stress Don't Worry Don't let this
file overwhelm you this is more to just give you a road map and what's happening we're gonna start from baby steps I'm
Gonna Hold Your Hand every single step of the way and it's gonna be a lot of fun with that said I hope you're excited
before we get into the video do me a huge favor smash that like button turn
it blue turn it white I don't care what color you're turning make sure it's
filled and it has color and you've smashed it that's the most important part and as a way to thank you here's a
picture of a baby a koala bear and a banana spinning all of it at the same time oh too much all good I don't care
I'm here to help you learn how to code and if we have to do some things like criminal activities like have fun once
in a while for God's sakes we will freaking do that with that said let's go ahead get started and start coding this
bad boy up right now now before we start foreign it up here's what I want you to do we
have turned this course into a bite-sized Drip by drip netflix-like binge-worthy course content and in a
course portal it is completely free the only idea behind it is that you the
student will have a great experience going through it if you want to be a part of that the link is in the
description below click that link it'll take you to a page where you can pop in your email and it will give you access
to this exact python course it's going to be the same material as is on YouTube and everything's gonna be all nicely in
one place so I recommend you go ahead click that button below and sign up for it again it's completely free enjoy just
giving extra resources so you can be a better developer before we started diving deep into coding and starting to
write every single line of code you've chosen python let's just talk about why
and what your career as a software developer or just a person learning python could look like why doesn't
matter so I think let's get the context around python first and then we'll get
to the coding part if you want to get to the coding part right away and you don't care you just want me to stop yapping and shut up you can just skip this part
time stamps are below you could skim and do whatever you want it's a free country with that said I'm gonna kind of go into
why should you choose python I think python is one of the best ways to start learning how to code I started about 10
years ago coding and my first language of choice was Python and the opportunities you get by becoming a
python developer are absolutely insane because first of all it's one of the most popular programming languages and
there are insane number of job openings with python you could look on indeed.com or really any other online platform so
the popularity of the language is also huge if you look on stack Overflow it's one of the top most wanted and learned
programming languages in the world and when it comes to people's salaries people are making sixty thousand seventy
thousand hundred thousand dollars a year plus now what type of jobs do people do lot of people with python do data
analysts type of job data science type of job I mean of course there are a lot of web developers with python too
because you can learn different Frameworks okay like flask or Django Etc and you could do web development as well
so there's a lot that you could do with python and your career could look great whether you want to learn it as an
entrepreneur or a student in high school or you're just trying to get through college man or just watching these
videos so you could pass your exams I mean either any of those options is totally fine now the way I structure
this course you have a little bit of insight going into it is I've designed it as a practical step-by-step guide
where I hand hold you and we learn together but then we do exercises together and then we do big projects
together and the whole idea is how can you learn in a practical way so tomorrow you could take this knowledge and go get
a job okay now you won't get a job right after taking this course but if you synthesize this material and then add a
lot of supplementary material and spend some time this will set you on a path to being able to get a job as a software
developer freelance with it have a full-time job or maybe you want to have
your own business or start a SAS whatever your case may be but my goal in this course just to give you a taste of
python and build amazing projects you can understand and just fall in love with that said let's just get into it
boom all right welcome to the ultimate Python
tutorial now how I'm going to teach you is almost like we're walking step by step and learning side by side together
kind of like how I did with my JavaScript tutorial if you watched that earlier so let's just get started okay like we're buddies and we're doing this
and learning this together so the first thing that I want to tell you about is something called comments and comments
are basically anything that's ignored by the computer so anything that we write with a hashtag computer will just ignore
that line the next thing we're going to talk about are variables how do variables work in Python well if I
actually do print hello world okay first let's just start off with this and I hit run on the right hand side over here
you're gonna see a hello world so this allows us to print out whatever we're
doing into here for example if you did not say print and you just said hello
world like this it wouldn't actually show anything to the console so we want to put it in print and then put quotes
like this around it now what the heck are variables and how do they work well
let's say I want to print my name Rafe Kazi now every time I want to print my
name maybe I want to print it again well I'll have to write print I'll have to write rough it cozy and then do this
again and then do this again using this ton of work but what if I just created a variable that said name and set that to
rafikaze and make sure you put these single quotes or double quotes either should be fine and what if I did this
and then I said print name and now if I command enter or click run there it's
going to print out my name okay on the right hand side and now if I change the name I only have to change it in one
place not on every single line let's change the name to clever programmer and
now I'll run this and there you go you could see that that name is being printed out because of line 9 right this
is referring to that variable over there if I have another variable like age is
25 I can now also say print age and when we run this you'll see that it actually
says the age right over there now here are a couple of things you can and can't do with variables that you should just
know about so for example I can't name a variable starting with the number three
name equals quasi and now if I try to print three name and run this I'm going
to get an error okay and it says hey what tech is going on invalid syntax that means you wrote something that's
not right so when we're naming variables make sure that they start with a letter most of the times and then you should be
good to go now other things I could do is I could say full underscore name and
now we can do print full name and let's run this and now it reads out our full name underscores are allowed in Python
whenever you're writing multiple words you separate it out with underscores this is snake casing okay so you keep
everything usually lower and then you separate things by underscores and kind
of one of the last things I'm going to touch on for now with variables is you could have two variables being saved in
one go so I could say with comma height is equal to 400 by 500. what this does
is it actually sets the value of 400 inside of width and then it saves a
value of 500 inside of height and now to prove that out we can go ahead and say print with and if I go ahead here and
say print height and when I run this you're going to see that we get a 400 over here 500 over there that's how
naming multiple variables in one go Works outside of this we're good with variables so we're going to keep going
okay now let's talk about what could we do with this stuff what is something that we could actually do with python
well there's something called input that I actually really like and what input does is when you have input it's going
to ask you to put in something right here as the user so we can make our names a little bit more Dynamic now and
make the name dependent on the user or whatever the user wants the name to be let's say we create a variable called
your name and then inside of this variable your name we'll say input lease enter your name so your name is going to
store the value that the user types in okay it's going to ask for the input and it's going to give this as a prompt so watch what happens when I run it on the
right hand side here you'll see please enter your name so I'll actually say let's say I will say Andrew let's hit
enter now it was stored Andrew ended up being stored inside of your name but we
need to show that so how do we show that what have you learned so far where you can actually go ahead and show that to
me so print and what would you print okay take three seconds right now three two one you would print your underscore
name right if you want to show it out on the screen so let's run this now and I
will say cozy and boom look at that it says qazi and if we want to make a little greeting thing that can greet
greet us we can we can say a high plus your name so like just like this hi plus
your name so let's give that a try and we'll say qazi okay now it says hi Kazi look at that that is beautiful if you
don't want some of these lines to run that are the previously there like that and that just comment it out or what you
could do is highlight it and hold command and press slash I'm pressing this button right here this slash or
hold Ctrl and press slash if you're on Windows let's go see if we can do other things like can I give two inputs and
then we can sum them up so let's try it so let's say num one is equal to input enter a number okay and then we'll copy
that and say num2 Okay so this will give us two numbers and then it'll print out those two numbers so let's try this so
we'll say num one comma num two let's run this and we'll say 10 and we'll say
20. okay so 10 and 20 got printed out that means we were able to take that value from the user and then show it out
onto the screen now what I want to do is something a little bit more interesting
so I want to add these two numbers together that the user is giving me well
if I want to add them together wouldn't that be really simple can't I just do num1 plus num2 right because that's what
the user is giving me and so I should just add them together and if let's say the user gave me 10 plus 20 this will
become 10 and this will become 20 and well 10 plus 20 well that is a 30 and so
that should print out 30 onto the screen right well let's take a look at what happened so I'll run this and then I'll
give 10 and 20 and what should it return if I add 10 to 20 what do you get 30 right let's hit run and look at that I
instead get 10 20. what is happening here so when you add two things together
two strings together it adds them up and mumbles and jumbles them so this is a
good point to talk about strings versus numbers so there are different data
types inside of python on and there's there's a bunch of data types so you have strings as a data type numbers is a
data type numbers is not a really data type but integer is you know float these are what we just refer to as numbers and
then there's other data types like lists and python there are dictionaries but some of this stuff is a little bit more
advanced like lists dictionaries we'll talk about these later for now what I want to just talk about is I want to
talk about the num difference between strings and numbers I'm just going to write some examples of strings hello is
a string cookie anything within these single quotes or really double quotes is
a string you're telling the computer literally this it literally this and literally that so when I add them
together if I ever added this together the computer would give me back hello cookie as one string so what's happening
right now is we're storing a number our numbers as a string data type so it's saying taking a string of one string of
two string of 10 rather and string of 20 and is returning a string of 10 20
because it's just combining them because that's what it knows what to do with strings so when you input a number it
doesn't think of it as a number it actually stores this as a as a string so what we want python to do is we want to
tell python hey convert that into an integer okay a number in other words
that I could actually use and when you add numbers together to actually add up rather than just get concatenated and
squished together so what I want to do here is this num one that I get I want
to call the function int on it so I'll store it as an integer or let me just show you something simpler even in the
console so let's say I have five and you can see it has quotes around it this is a string but if I call this function
called int and I pass 5 to it okay as a string it will Typecast it and turn it
into five so that's actually what happens so what we want to do here is
store for the input that we get from the user as an integer so I can take this
entire thing and wrap it inside of int or I can call Int right here either way
should work now let's run this and we'll do 10 20 and you can see that it actually added it up to a 30 because it
said hey turn it into an integer the number one which is 10 turn the second
number into an integer which is 20 integer 10 plus integer 20 that gets you
a 30 and then that gets output to the screen does that make sense okay great now let's end this section off by making
a little baby app you know every every single thing we do I like to actually make it step by step like a project or
some kind of app that we make even if it's like a baby or a really really small app so let's do it so what we want
to do is we want to make a tip calculator app in this case Okay so this is going to be something that's very
simple what we're going to do is let's comment out this stuff right here here so I'll commented out you know I can
comment down basically uh everything up until now that's fine so in my tip calculator app what I want to do is uh
let's say that I went to a restaurant to eat some food and let's say the food was a hundred dollars well if that food was
a hundred dollars and I want to give a 20 tip you know the question would be how much am I paying in total if you're
quick at math you'll realize this is 120 dollars right because this is actually the food amount like 100 and this is the
tip amount twenty percent tip okay and then 20 of 100 is twenty dollars you
might know that in your head but how do we actually do that in calculation so
let's go ahead and make this right so let's set a food amount to be a hundred
dollars let's represent a tip percentage to be you know let's say 20 percent and
and then we could divide this by 100 or or just make it 0.2 because this
represents 20 as well so we could you know since it's a percentage let's go ahead and just do 0.2 or 20 divided by
100 okay and these are some math operators which we'll talk about more later but if I just go ahead and show
you in the console here if I take 100 and I divide it by 20 I get 5. if I take
20 divided by 100 okay I got 0.2 this is like division what we learn in like
second or third grade all right and now math operators well there's uh some interesting ones two inside of python so
for example I could actually go ahead and say hundred two division signs and 20 well
you'll be like well this doesn't really look that much difference but watch this if I do 20 and I do two division signs
and I do 100 I get zero that's interesting so what this basically does is it says hey don't give me anything
that has any kind of remainder like just give me things like divided you know if
something divides completely then show it to me otherwise I don't care I don't need a floating or a decimal point as a
division let's say I take 135 divided by 2 it gives me back a 67. okay whereas if
I did it the regular way I would get a 67.5 so this will actually divide and
then round it down okay so when I round that down I get 67 so you'll get whole
numbers this is sometimes like actually helpful because if you want to just quickly round down the thing and you
don't want to do like all kinds of stuff and Typecast a thing and make it all this this simple way okay so in terms of
math operators we'll talk more about these later as well but some simple math operators that we have are like the plus
sign you have the minus sign you have the division sign multiplication so you can multiply things right you have
exponents so if you do 2 to the power of 2 you'll get 4 and if you do 2 to the
power of 4 you'll get 16 right so a regular exponents you have uh divide and
get a whole number this one and then you know kind of the last one that I'll just leave you with for now is is a modulo so
this just gives you what the remainder is so 20 modulo four there's no remainder so you get zero but 20 modulo
3 you get a remainder right because 20 if you divide it by three you will go up
to 18 but then you can't go beyond 18 and then you'll have remainder of two so
I'll leave the modulo here as well okay so these are some of the math operators that's like good for you to kind of know
and we're just going to be using the division and maybe the multiplication one when we're doing our tip percentage
okay and with tip percentage Yeah we do care about the float number so that's why we're just going to use a single
division sign we don't need it to be a whole number we need it to be a actual number that it's like you know it could
be afloat because we are expecting a 0.2 so anything that's a decimal like this
right if I go 0.2 it's a float number if I go one or two or three these are all
integers okay and this is a float float is just another way of saying decimal
numbers in uh encoding most of the time so whenever you float think some number
that's a zero point something so this is representing 0.2 right so I have my
amount this is 20 as a tip okay and then what's the tip amount so tip amount in
this case would be a hundred multiplied by that so if I
have a hundred multiplied by 0.2 that's a twenty dollar tip so that's the actual
tip of mail so it's food amount times tip percentage and that's my tip
amount we got the tip amount right which is food amount multiplied by the
percentage so let's just go ahead and print out the tip Mount and let's just see if it's um if it's what we expect it
to be so I'm going to hit command enter and run this it's saying percentage aha so it's tip underscore percentage right
not just percentage and that's what the error is telling me so errors are your friends don't freak out just read them
and usually when you're reading errors you don't have to read like the top part that much you can read this part but
I'll also kind of make you familiar with errors okay we're not going to go crazy into like reading errors but in a simple
way like if we're looking at this error here it says Hey percentage is not defined
so that was simple because we never had a variable called percentage we had tip underscore percentage so that makes
sense so name error right and then the next thing it says is Trace back it says the error is in main.py which makes
sense because this file is called main.py and it tells you that the error is happening on Line 39 this is Line 39
and it tells you that it's happening specifically somewhere here okay so it really really makes your life simple
once you can kind of read it and not freak out so much about it and let's keep going so let me run this here and
let's see and it calculates a tip amount correctly so look tip amount is twenty dollars well now my question to you is
how are you going to get the total okay we have the you know total if I had to
put total so first of all you should try and see if you can get the total here
so you can just pause the video and give that a try I'll give you five seconds five four three two one so what is total
total is really just two things right it's food amount
plus tip amount that's what a total is right it's how much did you pay for the
food and how much was the tip so in order to turn this and translate it into code all we say is we say
total is equal to food amount plus tip amount and now let's print out total and
let's take a look and over here we have 120 okay 120 dollars okay now
we're seeing 120 and that's cool right but what we would
really like is if the 120 looked like uh you know 120 dollars instead of 120 just
some number so I want to put a dollar sign here so there's a few ways we could do this okay so one way I could do is I
could put a dollar sign here and then I could say plus and this is called string concatenation and it's giving us an
error so let's see what the error is so error says error can only concatenate string to string so it's basically
saying this total here is of type float because it's a decimal right it's
120.0 so that means this is a decimal which means
that this is a float in coding terms okay so it's
basically saying hey you're trying to combine a string this string over here with a float Tomatoes Tomatoes tomatoes
and oranges you know what can't compare oranges and apples together what's going on here what we could do is we could
turn this into a string the total into a string so I could just call Str and wrap it in this function Str you'll learn
more about functions later but for now all you need to know is if I take a
number like a 100 and I call STR on it you'll see they'll put these quotes
around it which means that it successfully has turned it from an integer type to a string type likewise
if I take a hundred like this and I call string on that it will also turn it into
a string type as a float okay so this will work so let's try this and there we
go that looks a lot better right a hundred and twenty dollars boom we're
getting our answer and it looks clean okay so that's that's kind of how we
want to do this when I said we're gonna make a baby app well let's make it interactive and then we will actually be
done with this little project and then we'll keep moving on so right now it's
hard we've hard-coded data food amount is 100. the tip percentage is also hard
coded but what if you were at a restaurant and you actually took this file and you tried to run it and you
tried to get it to help you well it won't really help you with any tip calculation or or really how much the
total total bill is because it's just running it for a hundred dollars and twenty percent tip what if in reality
you were sitting at a restaurant right now and maybe your food cost twenty four dollars and maybe your tip was 10 what
you will have to come to your app and then change the hard-coded numbers that's not how users are going to use this right it's going to be very
frustrating experience if you do that so we're going to change this to an input so we're going to say enter food amount
okay and we're going to say dollars and then here I'm not going to change this 100 but I'm gonna change this part okay
so we're going to make this a dynamic part we're going to say enter your tip percentage so the user is going to put
in their tip percentage and let's say the user says 20 we'll just put a 20 here and then 20 divided by 100 will
give you a 20 tip or 0.2 all right and uh the next thing that we want to do is
remember this is going to be given to us as what data type I'll give you five seconds five four three two one food
amount is going to be stored as a string but what do we want it to be stored as because if we start as a string it's not
going to do the right things that we wanted to do right you're you're going to try to add a string to a string and you're going to do 10 plus 20 and you're
gonna get 10 20 instead of 30. so how do we force this to become in integer okay
or a number so for example the user is gonna put in some number like hey the
food costs fifty dollars so it'll be a string and then what we want to do is turn it from a string data type because
it's a string data type two an actual 50 either an integer or a float let's go
ahead I think would float and the reason is because the user could say it's fifty dollars and fifty cents right so that's
why I think a float would actually be a better representative of this and so we will say float and wrap this whole thing
in float and then we'll wrap this here and Float but not the whole thing just this part right here so now boom and
let's run this so let's say the food amount is a hundred dollars and let's say our tip percentage is 20 and we get
a hundred and twenty dollars boom oh look at that that is working the only thing I don't like about this right now
is a percentage and the 20 look too close to each other so I'm gonna put a colon here I'm gonna put a space here
and I'm gonna put a percent sign percent sign here to represent that we're asking for a percentage let's run this again
food amount I will say it's fifty dollars tip percentage let's say it's 20 and let's give this a try and boom look
at that it tells us that is sixty dollars total that we owe uh now if we
wanted to make it prettier I'll show you a little sneak peek into something called string formatting and there's
something really cool in Python so what if I wanted to let the user know which one is the tip and which one is the
total and which one is the tip percentage and all of that all here in a
nice interface that shows everything up front Okay so for example let's do that right so it should say total is 60 60 or
whatever right it should say tip amount is let's say twenty dollars or whatever
so if you want to do that type of string formatting let's do it like this so I'm going to say print and I'm going to say
f and then we're just going to go ahead and write out what we're looking for so
I'm going to say tip amount and I'll put a colon and then I'll put these curly braces means I can now write python code
inside of this so the python code all right is tip amount now when I run this and let's say tip amount tip percentage
is 10 so 10 percent of ten dollars tip amount is one and now let's go ahead and
put a dollar sign here so it actually looks like one dollar a hundred to percentage is ten you can see tip amount
is ten dollars beautiful now let's go ahead and copy paste this again and
instead of tip amount now what I want to say is I want to say food amount okay
and we could put that above this and let's go ahead and say food amount and let's run this and let's see what we get
so we'll say food amount is a hundred dollars tip percentage is 10 so you can see food amount is ten dollars tip
amount is ten dollars or a hundred dollars and ten dollars okay and then the left for the last one let's do the
same thing except I'm gonna say total amount and what are you gonna say in here we're
gonna replace this with the five four three two one we're gonna replace this
with the total okay now let's run this a hundred dollars and ten percent boom
look at that and we don't need this final line anymore and if you want to make it like a little bit cooler whatever you could add emojis if you if
you can download an emoji app I have rocket on Mac and that's really easy I just press colon and then I press right
and then it allows me to do this it'll look you can make this look really nice so let's put total amount food amount
can be it chicken food so let's run this now 110 and we can see the total amount
is a hundred and ten dollars and it looks you know a little pretty now if we want to make this look even nicer we can
actually go ahead and just add these at the top and then we could take this and add this at the bottom now if I run this
we get a hundred ten percent tip and you can see food amount is hundred dollars to of amount is ten dollars and total
amount is a hundred and ten dollars maybe I wanna add a new line in between total amount and tip amount so what you
could do is you could print and go backslash n this encoding means a new
line so it's going to just put a new line over here uh tip amount let's just put a scale for tip I guess so at least
everything has an emoji and a little cleaner food amount is a hundred dollars to percentage is ten percent there we go
food amount tip amount and then the overall total amount that looks very clean if we want to add some new lines
here as well if you want to add multiple new lines we could do this so let's run this again there we go we're getting our
food percentage and total amount so this string formatting stuff is very very useful it's really helpful and it can
make your thing look pretty but more importantly it is very easy to write because you're just writing out
everything you want to write and then right when you want to write python code you just put it in curly braces and
you're good to go okay it's as simple as that so there you go we have made our
first little app with Pythons if you got to hear congratulations you're doing great with that said we're gonna keep
going and we're gonna keep learning I love your beautiful face I'll see you in a second all right now the next thing is going to be a pretty important thing
let's talk about Boolean okay this is another data type it's called Boolean this is very very important it basically
anytime you hear if then else all that logic which is really programming at its
heart because most things that you write with programming pretty much almost always have some kind of if then
statements going on okay very important this is the heart of Boolean so like for example let's just talk about the real
life where are where do we use this well let me ask you this if you have zero dollars in your bank account can you take out a thousand dollars you can't
why not the reason why you can't take out your money is literally there's a piece of code that says if withdrawal
amount is greater than and the balance don't allow withdrawal there's a there's
like a code line written there okay that literally says that okay so it reads like English too and in Python it'll
probably look like something like this okay it'd be like if the withdrawal amount is greater than the balance don't
allow withdrawal or we might just say return or just like don't do anything but if it's not then allow withdrawal
okay so let's say we go here else I can say allow withdrawal so I hope that this
conversationally just makes sense to you like if I'm just chatting with you like a buddy right or we're at a bar and I'm
just explaining to see like this I hope it makes sense before we get formal and I start trying to explain to you in like
at a very specific level that's what that means hey the withdrawal amount is greater than the balance don't allow it otherwise allow it okay so that's a
simple example of where it happens well there's probably a lot of other places it happens as well like if the user hits
accelerator accelerate the car if the use user hits break break the car
imagine if you did if the if you hit accelerator and it break your car or if
you hit the brake in an accelerated your car that would be catastrophic there'd be so many accidents and there would be
like so many debts right and why would that happen that would happen because somebody wrote somebody just programmed
it incorrectly so that's why this if else stuff is very awesome and it's also very important because it's at the heart
of what we do as programmers so let's make like a little baby app so we'll
make like a baby weather app and um let's comment out this entire thing with
with the tip calculator we don't really need to worry about that right now so for example if I run my code I should
see nothing right now it should be empty and basically what this should be say is
hey what's the weather like so I'll give you a premise for this app it should tell you what to have if it's raining
outside it should tell you you know grab an umbrella otherwise grab your
sunglasses so that's pretty much what the app should do it should be a very simple one and that's what I should say
Okay so let's say we have weather here and the weather will say is rain okay so if it's rain then it should say grounded
umbrella so here's how we're gonna write our if statement so we're going to say if weather is rain if this is true print
umbrella else otherwise print sunglasses okay I'll use emojis if you don't have
emojis feel free to just write this stuff out and let's go ahead and print this and let me ask you a question
before we even run this and before you ask me why are we putting two equal signs and what is this colon about and
what's happening here if you just followed along with me and you just did what I did and you hit enter here and you just wrote this and your indentation
and the whole thing looks exactly like mine and you hit print or run what do you think is going to print with your
gut feeling before we even run this for the first time do you think it's going to say rain or do you think it's gonna say sunglasses it's checking for of the
weather is rain and we have set the weather to rain so what would be your guess I'll give you five seconds five
four three two one okay it would be the
umbrella you see that right there now why are we getting now why are we
getting an umbrella so let's break it down at a further level and let's talk about Boolean which we didn't talk about
yet so booleans are very simple they're either true or false that's the data
type that's all it contains it's either true or false so a Boolean can either be true or false that's it those are the
only two values it could have so for example if I said hey it's five greater
than 10 and we'll also talk about comparison operators I'll just make a little note of it comparison operators
and notice that I got back false okay because 5 is not greater than ten what
if I said 5 is equal to 5. it says true now the reason why we put two equals
lines two equal signs is a comparison operator because if you did one equal
sign that is an assignment operator so if I did five equals five it's going to give an error it says you can't assign
the value 5 to a literal to a five you can assign five to you can say a equals
five you could do that but you can't do five equals five that doesn't make sense but you could check if 5 is the same as
five you can compare these two values and I will tell you if they are the same
or they are not in this case they are so I'm going to say true is 10 the same as 5. what do you think is going to say
it's going to say false okay it's 5 less than 25 yes it is it's 5 less than or
equal to 25 yes it is so let's write some of these comparison operators so we
have less than or equal less than we have greater than we have less than or equal to we have greater than or equal
to so these are all the different assign operators that we have inside of python so now going back to this over here
what's Happening Here is if I say if true so if you have an if statement where you have a true and we've just
hard coded it to be true you will always get back the if statement value not the else value okay so if I make this a true
right there watch what's going to happen when I run this I'm going to get back an umbrella but if I make this it falls
what do you think I'm gonna get do you think I'm still going to get back an umbrella or do you think I'm gonna get back sunglasses very good if you said
sunglasses let's run this and I get back sunglasses because if this is false the code says do not run this line of code
run the else line of code when I say if weather is rain what I'm really saying
is if this variable here has the value rain in it check if that is the case if
that's the case take this whole thing and then it'll turn it to True okay so
literally it plugs in rain here and then it goes is rain equal equal to rain and
then it goes yes it is true and since that evaluates are true it ends up running this line of code now watch what
happens if I said Sunny what do you think is going to happen do you think it's going to print out this umbrella
right over here or do you think is going to print out the sunglasses I'll give you five seconds five four three two one
let's run it and boom look at that I got my sunglasses so that's how that works
now in order to make this kind of an interactive app let's instead of hard-coded weather data let's take input
from the user so at this point you should know how to do this and you should be able to do this part okay so
I'll give you five seconds pause the video and do it on your own five four three two one all right let's do it
together if you got it great if you did it that's okay we'll do it together no problem so I'm gonna go ahead and I'm
gonna say input because that's how I take user data I don't need to Typecast it to anything because it's already a
string so input is fine so I'm going to say input and I'm going to say how is the weather question mark
all right and we're going to just do put a space there let's go there how is the weather and I will say it is sunny and I
will get back this Emoji right here and let's run it again and now it'll say
rain and it'll give me back the rain Emoji right there okay so that tells me
that my app is working it can already take in user data and figure out what to
do with it it can ask the user the weather and once the user tells it how the weather is it can print out rain or
umbrella so what I'd recommend is you play around with this okay and try this
so let's chain this up a little bit more so let's take this if else condition a
little bit farther okay so now let's do something interesting right so we're gonna go ahead and say else if so we're
going to add elseif whether is cloudy then you know uh where a hat or
something I don't know why you would wear a hat but maybe a hoodie so do we have a hoodie or a jacket we don't have
a jacket let's just put clouds okay just print out a cloud that's it that's
perfect else give me these sunglasses so now watch what happens when I run this
if I say rain it'll give me the umbrella if I run this again if I choose cloudy
it's actually going to give me the cloud if it's neither of those so if it's neither of those I'll just say ha or
I'll say thunderstorm it'll give me sunglasses so I'll give you a little challenge right now add another else if
condition and you could chain as many else of conditions as you want and one thing I need to tell you about python is
this if statement how you write it you put this colon you hit enter this indentation in Python is important if
you don't have this indentation this code will break it will not work so python uses white space and it's really
important as a part of it to make sure that you indent things correctly if your code ever breaks is most likely all
you'll have to do is go back and hit enter like this and you should be good so go ahead write another else if
condition which should account for thunderstorm so if it's thunderstorming
it should print out a thunder icon or something so see if you could try that
so I'll give you five seconds to pause it and give it a try five four three two
one all right let's go ahead and do this together so the last thing that I'm
going to say here is else if weather and we're going to say it's thunderstorm okay and then then we'll say print and
let's see if there's thunderstorm there is not let's say lightning okay there we
go we'll say lightning with rain and thunderstorm okay so there we go and now let's run it we'll say whether it's
thunderstorm and boom we're getting this icon right here so we could chain these
and we could make this multiple so let's do for example another exercise what if
I wanna check out my you know grades so I'm gonna go ahead comment this out and
I'm going to check out my grade so you know or score so let's say I got a score of in this case I'll give you some notes
so let's say anything you know anything that's 90 anything that's not greater
than a 90 this will be considered an A anything greater than an 80 will be
considered a b anything greater than a 70 will be considered a c anything
greater than a 60 will be considered a d and then anything less than 60 will be
considered an F so anything less than 60 will be an F so see if you could try
this right now and create a if else if chained that could represent this okay
so if I give you a score that's above a 90 it should say an a it print an a if I
give you a score of between 80 and 90 should be a b uh C Etc so see if you could give that a try
I'll give you five seconds to pause the video and then you should give this a full try on your own five four three two
one all right I hope you pause it and you try to give it a try but regardless of
what however it went let's go ahead and do this together so I'm going to create a score so we'll just start with some
kind of score we're going to say if score is greater than 90 print a right
and then we're going to say else if score is greater than 80 print B okay
and actually let me give you a better parameter because if it's 80 that's also
a b okay so I want if the score is 80 it's also a b this would only account
for 81 something higher than an 80. so what we're going to do is score is greater than or equal to 80 greater than
or equal to 90 greater than or equal to greater than or equal to okay and then this is actually less than 69 so this is
fine because we want you know 59.9 to be an f and then I'm going to say else if
score is so we're going to to say greater than or equal to and we can say else if score is less than 60 print F
let's run this and you can see that it says I got an F now let's change the
score to be an 80. let's run this you could see it gave me a b and then let's
change this over here to be in 90 and boom you can see I got an A now what if
it was a 95 let's run this and it's still an a what if it was an 87 let's
run this and you could see that I got a B okay so with that logic you know we
can fill the rest of it out if you weren't able to do it now you should definitely be able to do it so let's go
ahead and we're going to say else if score is greater than or equal to 70 I'm
going to say print C and then we're going to say else if score is greater
than or equal to 60 let's say print D and then what we could also also say is
we could say else so I can actually remove all of this and I can be pretty clever here and say print F because
that's the only other case left because we have a case that's higher than 90 and then we have all the way down to a case
that's greater than 60. so the only time an else would happen is if it was something less than 60. that's the only
time right because otherwise it would be caught by this guy right here okay because that would mean it's higher than
90. so anything less than a 60 is an F so we could just be clean and write it like this now let's go ahead and try a
few different numbers so 87 and I got a B let's try 93 what do I get a 103 maybe
I I scored so well I got above 100 for this yeah so that's pretty good let's go
ahead and try you know 67 and that's a d that's very good let's try maybe 53 53
what what do I get here boom and I got an F okay so not good I failed the class okay
this was my score in math every math class that was my score so this is not
too far from the truth anyway so I hope you got some good practice with how if else if else conditions work and what
Boolean really means because everything here at the end of the day is very
simple this is either the word true or it's either the word either the type
false okay and this is a very specific data type true or false and how I can prove to you that these are data types
this is Boolean data type so for example if I uh call type on the number five it'll tell me that is of class integer
if I call type on 5.2 it will tell me that it's of type float if I call it on
type on hello it'll tell me it's a string so see if you can call type on
false and what do you get and false is like this with a capital f okay so give that a try five four three two one what
did you discover right let's look at it false and it's of class Bool and if I go
type true it's of class Bool so booleans those are the only two Boolean values
that exist true or false and now you know if we want to take it even further
we can actually chain values together as well okay so for example let's say we
wanted to either have we wanted to show either a passing grade or a failing
grade okay so if we wanted to just do that and we didn't have this A B C D minus stuff okay or a b c d uh F stuff
we just had you passed and so if you pass it just said P okay or maybe just
pass and if you failed it just said failed that's it so how could I do that well I wanted to be where if you got you
know within this range let's just say this is a passing range and anything less than that just doesn't work so I
could actually say that I could say if score and let's say I set the score here 80 for now if if score is greater than
or equal to 60 and to make this example even better let's say you have pass failing and then you have like super
pass meaning the the student got let's say uh you know superpass is when they
get greater than a hundred okay so they just really crushed it let's say I start with the passing grade condition so the
passing grade condition I'll say if the score is greater than or equal to 60 and
score is less than a hundred if it's or
less than or equal to a hundred because we're defining superpass to be something that's greater than 100 okay so 101
would be like you pass Super past it so we could actually even say this we can actually write multiple booleans here so
for example I could say true and false and I get false so when you write with the Boolean gate logic or Boolean logic
both of these statements have to be true whenever you have an and both statements have to be true or all statements have
to be true in order for you to get a true so true and true and in other words like 5 is greater than six okay five
five uh let's say 10 is greater than five and ten is greater than six since
both of these statements are true you're going to get back true but if you said 10 is greater than 5 and 10 is less than
6 since this statement is a false here this whole thing is going to evaluate to false and not work which means that the
only way that the code is going to run is if it's if the score is in between
these numbers if it's greater than 100 or it's less than a 60 it will break and
it won't work and we're just going to go ahead here and say passing grade so let's go ahead and run this and you can
see that I'm getting passing grade now another cool thing and kind of important thing I want to show you in Python is
there's another way to write it which is really nice and it's called pythonic okay so very pythonic way of writing it
it just means you're writing very clean code that is pretty language specific can't really write in JavaScript and
also this code is very stylistic in Python okay it's a nice way of writing it so I'll give you an example so
there's multiple ways of writing the same statement another way to write it is you could say if score so since we're
really saying score in between these two numbers there's a nicer way to write it you could actually say and this looks
nicer and reads nicer in my opinion and you don't need to write a bunch of and statements and you could say print pass
and grade and to prove that it's working I'll comment out this part and run you'll still see that it says passing
grade okay I'll run it again just so you can see it and I'll choose 59 as a score
and it won't say anything and then I'll choose 103 and it won't say anything it's detecting that it's out of that
range and right when I put it in that range it will show up and say passing grade this is really cool this allows
you to capture in between array change okay and this is the same thing as writing this guy over here same exact
thing so you could chain your booleans with an and statement and then the last thing I want to show you is you could
also change your booleans with an or statement like this okay so you if you
have a true or false you're going to get back a true so an or statement only one of them has to be true so for example
it's like hey what time did you eat today well I either ate at 3 P.M or I ate at 10 pm I'm not technically wrong
okay I am telling you the truth one of them is correct so here it's giving me a
true so if I have 3 is greater than 5 or 5 is less than three okay or we can say
five is greater than three it's going to give me a true because here 5 is greater than 3. so since this is true and this
is false it's going to Value to true so all that confusion aside okay I can also
write ORS so I can say if score is less
than 60 or score is greater than 100 I
can say you either failed or you passed or you super passed okay so now let's
choose the score and make the score 103 and let's see what it says it says you either failed or you super pass yep and
if I choose 59 you either failed or you super passed that's correct and if I choose a 63
it'll it'll do this passing grade okay so you can see that this or statement
works and it catches two things it's catching two you know it's caching below
the boundary and then above the boundary so this or is super helpful too and I just want you to be aware of that or
statement that it that it exists okay so this is a range there's an or way of
doing this okay and then there's an and way of doing this I hope this was like not too confusing but I wanted to show
you all these things because as we start to build up and add more layers of complexity it's really going to help you
because these tools are going to come in handy and then you'll be able to write more pythonic code so this here I'm
sorry if I didn't explain this correctly but this here is a very pythonic way of writing it
this over here is like a regular way of writing it this is how somebody who's
maybe coming from another programming language would write it somebody who's been in the python ecosystem knows that
they can write it like this and this looks way way cleaner just these are the three examples that you should look at
and these will be helpful so if you want to take note of this you know this is available for you the whole time this
will be available to you the entire time and on the left hand side I have quasi.py right that's the file I am
going to be coding in okay quasi.py just to be very clear main.py is the file
you're going to be coding in and if you don't want any of my lines to run just go ahead and comment this out by the
time you're watching this this might be they're commented out or deleted already so I wouldn't worry about it too much
but my file is quasi.py okay you're going to write in main.py and follow along there so there you go just wanted
to give you a little crash course on if else conditions because I think this will be valuable for you with that said let's keep on rocking and rolling all
right you are doing great so far now what we're gonna do is we're just gonna comment out everything else that we
don't need so make sure it's commented out and if at any time you look over here and you see things changed don't
worry because I'm gonna keep adding things and adding more exercises and projects for you guys inside of this
course all you need to worry about is keep coding inside of main okay main.py
and since I'm cozy I'm just going to be coding in kazi.py so at any time you can
go into cosita py you should have all the notes and everything because that's where I'm going to be doing all of my work now with that said let's keep
rocking and rolling let's work on understanding and learning how functions
work inside of python so in order to define a function I will do something
along the lines of death okay d e f which is Define a function and then say
I'm gonna call it say my name like this and first we'll just call this function
and then we'll see what happens okay and this is just going to say hi rafae qazi it doesn't need to even say hi I'll just
be like this now if I run this piece of code you'll notice that nothing actually
happened why am I not actually seeing anything in this case now the reason why I'm not seeing anything is it's just
like I defining a variable and if you don't call that variable it doesn't really do anything so for example say I
said name is Rafi qazi well now I need to call that variable right if I need to do this so let's just say here name is
John how would I call this here if I run this it doesn't actually output John to the screen
if I want to call it I do print name and when I run this it will actually say
John but the difference between a function is when you call it it's very
similar to a variable but when you call a function you have to put these open
close parentheses in front of it okay so it's very similar to a variable name except you got to do this and once you
do this it runs everything that's inside of here so I'm going to hit run and you
can see it says say my name okay we're going to get rid of this John thing here now what if I wanted it to say more
names okay so let's say John and then let's go here and let's say Cara and
let's say here and say sam and if I run this it'll run all of those lines of
code but if I comment this part out right here it will say nothing so
whenever I uncomment this this entire chunk of code is going to run that's the
cool thing about a function it'll allows us to run big chunks of code at one time
now I'm going to show you something else so what I want to do here is I want to
make another function and this one will be more Dynamic so we'll call it say my name two okay so we're going to make our
function a little bit Dynamic so it's going to basically take in a user input I'm going to say print rafikaze okay and
let's just call our function print say my name to and then make sure we call it
open close parens and I don't have to actually say print here because I'm already printing from the function itself so there we go I got Rafa quasi
in this case what I want to actually say is I want this part to be dynamic so I
want this to be name dynamically but it says this is not defined so what I'm going to do is this function is going to
take in an argument and that argument is going to be name so it's going to take in a name and whatever name the user
gives it print is going to put that name right here and then call the print function and then it's going to print it
out onto the screen all right so I'm going to go ahead and say say my name
and I will say Cosi and let's run it and boom you're going to get cozy I can say
Rafe and boom it's going to run it so you can see how uh it can run your full
name like that now we're gonna step it up a notch so I'm gonna comment this out because I don't need to run this
function right now so we're going to comment this out I'm going to make a greeting function and this will take in
your name okay so we can do some string formatting here so I'm going to say hey and then we'll say name
okay or exclamation mark and let's go ahead and print greeting now or not
print but let's just say greeting and we will say name is qazi and let's run this
and you can see that it says hey qazi and I can even put a little Emoji here
to make it more fun and you could see it says Hey Kazi now let's put exclamation
mark at the end here that'll look nicer I think now what if we want to make not
only the name Dynamic but also the greeting Dynamic meaning that we should
be able to say the uh the person's name is qazi so greed Causey and greet them
with a specific greeting so we can actually do that thing okay so
it'll take in a greet and then it'll take in the name so now I can actually go ahead and give it two arguments okay
and the first argument I'll give it is aloha and the second argument is the
name so I'm giving this function greeting two arguments that's how we say it and then we want to make this dynamic
as well so what should I replace this hay with so I get greet over here I'll
give you five seconds to think about it five four three two one all right so
we're gonna go ahead and change this with greet so now greeting is dynamic and the name is dynamic and let's go
ahead and run this and we get Aloha qazi okay so this is an example of multiple
arguments okay inside of a function this has one argument inside a function uh
this here an example of no arguments so these are some simple examples of
of functions okay and if we want to add some documentation to our function so
they're more readable we can actually do that as well so I'll show you something it's called triple quotes inside of
these triple quotes I can say greeting ticks and two arguments green and name
and it greets the user and then I can actually even give an example of how to
call this function so I can say grading and then I'll take in Aloha and then a
name like this and then actually actually even show what that will output so I can show that it will actually
output this string right here so that way if a user is about to use your
function greeting they can look at it and they can go oh man I really understand what this code does it takes
in two arguments greet a name and it creates the user this is how I would call it so this is a great example and
this is what I'm expecting it will return turn so you don't always have to do this but documentation is an
important and valuable skill that if you actually learn now you'll be way more advanced ahead of so many people because
people shy away from it and run from it and if you just spend like three minutes or two minutes often times you could
document most things very quickly and it'll help and save so much time and
really help out other your fellow developers you know because you're going to get a job as a developer one day and
so if you can write code that's very helpful like this your chances of getting a job will be so much higher
because everybody wants a developer that is actually helpful to other people and isn't just some nerd that sits in a
basement writes code and then when things break just doesn't communicate and nobody else knows how to handle that person's code because everybody hates
that person so this will actually help you with that okay so our greeting function is looking good to me we can go
ahead and comment this out for now now one other concept I want to show you is the concept of default arguments so I
can say what if the user doesn't give a greeting what if that happens you know
they don't put in anything for this so there is something you could do for default arguments it's a it's a pretty
nice trick and I'll show you how we can do this so what we're going to do is the argument we know we're going to need a
default argument for let's go ahead and put that at the end so I'm going to say comma and we'll do greet just like this
okay so name comma greet and the greeting that we'll actually give here
is Aloha let's say aloha by default if you don't put in anything for greet
it'll say aloha by default so let's go ahead and give this a try I'm going to uncomment out this greeting and I'm
going to hit command enter to run it and look at that I got back Aloha qazi because by default it assumed we had
Aloha happening okay now if I went ahead and gave a specific greeting and I said hello and we ran this you'll see now it
actually says hello Aussie so it's a very nice way of having default arguments like this because it makes
your code a lot more user friendly because if a developer it you know forgets to put this or a user doesn't
put a certain piece of information you can still let them go to the next page you know so an example of that would be if you made a fitness app and you asked
the user for their body weights you know their body mass index their height Etc
on a page but the user like didn't put in any of the information they should still be able to hit next and go to
another page where maybe they can log their calories but if you didn't have these default arguments it would like
force them to just stay on that page and just be like no you have to give me your body weight your body mass index your
height and your gender all of it otherwise I can't let you go forward so default arguments are really really nice
now one other really cool thing I want to show you is something called named arguments okay so for example if if I'm
looking at this you know this gets pretty confusing because if I'm looking at this I don't know which place is for
argument and I have no idea which place is for greeting like where what goes
where I have no idea where does my where does my grading go and where does my name go right so is this the name and is
this the greeting or is it the other way around so right now we're doing something called positional arguments so
we know that since name is in the first position or the zeroth position I'm
going to put my name in this earth position and since the greetings in the first position I'm gonna not put this
but I'm gonna put a greeting like high okay so we know that but this is a concept known as positional arguments
but what we actually care about are named arguments because that's a really nice way of doing it you don't always
have to do this but this will make your life a lot easier in the future what I'm going to say instead is I'm going to do
a greeting and I'm gonna say name is qazi comma great is high let's just say
so now it's very nice because I can actually even change the order of this right so I can actually order it this
way because it's greeting so now it doesn't really matter where I call it let's run this and I should see high
qazi look at that so the order of these actually does not matter anymore because
it's a named argument so I really like named Arguments for functions you don't always have to use them but it's very
handy and then when you're calling this function and you're looking at it later and you haven't looked at your definition of a function in a long time
it'll be very clear what the heck is happening for you in the future okay so for now we'll just keep things simple
and we'll just call our functions using positional arguments all right so positional arguments okay and then we'll
say name and then greet but I'm going to comment this out for now because I don't
need this all right let's go ahead and now we'll create another function so with functions because there are such a
life blood of coding there's pretty much no app that you'll write that won't have
functions very unlikely unless you're writing some simple Python scripts if you master functions you're going to be
a great coder so let's do a lot of practices with functions so let's go ahead and create a function it'll be
called sum and it'll take in two arguments two numbers and what this
function will do okay at a very simple level sum if I call it with like one and
two it should return three okay so takes two integers returns there's some that's
it if you want to take this documentation and you want to add it in the body you can do that as well and so
now it makes it very clear what you're about to write as your code okay that's
that's what I like about having some documentation like this what it'll look like so what I want to do is for this
function I just want to go ahead and say return a plus b okay so if I'm taking in two numbers a a b then I just want to
return their sum so let's go ahead here let's put this out here for now okay and
let's just take a look at this the reason I'm showing it to you like this is because I want you to start getting used to seeing functions if you see this
in there that might make it bloated it might confuse you for now but in future when you're writing your own functions I
highly recommend you do the documentation within it like this so boom here we got our sum function and
then when we return we just return a plus b so this is a function it returns these two numbers now let's go ahead and
call our sum function and I'll say sum 1 comma two here's what's going to happen watch what happens when I run it nothing
got output to the console because this is a return and not a print so for this function and most functions you're going
to return the statement because once you return it you could actually do something with it so for example I'll
show you what I mean so I could print this if I want to and now I'll actually get a printed answer three but what's
cool about return is I could actually create a variable called num and now the result of sum is stored inside of it and
now I could go ahead and print num so I could use this value later that's returned so you could see num was
printed out and is three however if I replace this with print you'll notice
we'll have a problem here if I replace it with print it prints it out right but
then num it stores the value none inside of that like there's nothing because
when I call sum here says something with print and then nothing gets stored here so in other
words it's broken and not useful outside of the function okay so that's why return is a good way to do it all right
so we're going to go ahead and I'm just going to say print for now so this function is working now I want to show
you something so what you could actually do is you could say from Main import
this function sum that you just wrote so we can play with it in the Shell now
since I'm not in the main file like you might be I'm in this file called quasi.py I'm going to go ahead and I'm
going to replace main with cozy and I'm going to say quasi import sum so now I
actually have access to the function sum inside of my command line which is really nice and now I can go ahead and
use this so I can say sum 1 comma two and Watch What Happens boom I get back
three let's try sum again and I'll say five comma 20 27 boom I get 32 so you
could see this function sum works every single time and I like this interactive
terminal because you could play with this right you could do a lot of things with it like for example what if I do sum of 5 comma 27 plus 10 well this will
evaluate to 32 and then this will add a 10 to that and then these will get added together and boom you get 42. this
allows you to play test some ideas and do everything very very quickly so that's why I like playing in the console
there's a lot of playing we can do here and then here you kind of write your clean you know finished pieces of code
you know and then because you wanna you you can run them once whereas on the console like you can just keep hitting
enter keep running it and it's easier alright so there you go that's how we do our sum function now what I want to do
is I'm going to comment this out and I want to take a step backwards and so
this way we can get a little bit more practice I'm going to take a step backwards and I want to convert some of
the previous stuff we had written and turn that into functions so for example
this food calculator app that we had written earlier I'm going to copy this entire thing command C or control C on
Windows and I'm gonna come over here I'm gonna paste it and my task is I need to
convert this into functions all right so that's what I need to do so when I'm
looking at this the first thing I want to do is what so let me ask you this whenever you're about to create a
function what three letters do you write I'll give you five seconds to figure that out five four three two one yes you
write the word def okay so we're going to say def Define this allows us to
define a function now what's the name of this function going to be well what will this entire piece of code do it will
calculate the food total so wouldn't that be a good name for it calculate
food total perfect so we're done with the name now we need to know what are
the inputs that this function takes I can actually see these inputs right over here it takes in one input right here
and second input right here so these over here are going to be the input that it needs these two so see if you can try
to make them the arguments for this function by yourself use this as a hint
I'll give you three seconds three two one you could pause the video you could try this by yourself as well so you get
some practice so food amount we're going to take in his argument and tip percentage we're
going to take in as an argument so those are two things this function is going to take as an argument and then what we're
going to do because those need to be given we can't just calculate that right there's no way so we need to know hey
what the tip is at this restaurant or what the food total is we have to wait for our server to give us that now we
need to calculate the tip the actual tip percentage and then we need to calculate the tip amount so once I have the tip
percentage which is right here I can turn it into let's just call it a variable like tip percent okay so we
take the tip and we divide it by 100 or we could even get rid of this because we know that this is our hip right this is
this thing right here so if we get 20 then this is going to be 0.2 which is
going to reflect 20 so this is our tip percentage now we need to get our tip
amount while tip amount is going to be food amount multiplied by the tip
percentage so we take this and we multiply this okay you could put this in
parentheses if you want and this will be tip amount and let's go ahead and just
print tip amount for now and usually printing when you're creating a function is often used for debugging seeing where
your code is at seeing if things are working as you expect them to or not so now we're just going to go ahead and call this function so I'm going to say
calculate food total I'm going to give it a hundred dollars and a 10 tip and let's see if it calculates the tip
amount correctly so the tip amount should be ten dollars let's go ahead and run this and we did get back ten dollars
now the last thing we're missing is the total amount well that's going to be
whatever the food amount is plus the tip amount that's what that is and since
we're using the word amount everywhere we can just replace it also everywhere and this this case and just simplify our
life and then the code will look simpler total is Food Plus tip okay it looks
nicer and easier now we need to make sure that we actually return this
because you see it'll tell you hey you're not using this okay so we're going to return this in a second but first let's go ahead and just print it
out and let's see if we get back what we're expecting and you can see that I'm getting back total and it says 110 right
there what I can do is I can just return total because that's all this function needs to do and we can delete these
other lines of code I click that button over here because it will style the code and make it look pretty alright there we
go let's run this and we're getting back nothing because we're just returning and we're not printing so when you return
what happens is this will evaluate to that number so if I did 100 comma tenant
this will give me back let's say a hundred and ten dollars is my total amount and then print will actually go
ahead print it out and show it onto the screen so let's go ahead and give this a try and boom lo and behold you can see
that I got back a hundred and ten so calculate food total is now working exactly like we expected okay so there
we go we've taken that blob of code and turned it into a nice function and now
if we you know commented out the nice thing is that our code will still be
fine we just have to comment it out and then this entire block won't run anymore so we could just kind of ignore this
block but it's nice to be able to calculate food tip like this now you can use named arguments because you're like
hey which one is the tip and which one is the food it's kind of confusing right so what we could do is we could say food
is you know 100 and then we could say tip percentage is 20 all right and now
we could call it with the named argument and of course we'll have to print that result and you could see that I get back
120 and then I think we did something else with food if I'm not mistaken we
made food look really nice so we could certainly do that here as well we could make food look really nice just copy
that piece of code and if you want it to kind of have that like prettiness action going on which is not totally necessary
in this case I'll uncomment this and then just make sure you indent everything so I'm going to hit delete and hit enter okay and sometimes this
happens with python which is really annoying so delete delete bring it up to a new line delete bring it up to a new
line delete delete hit enter delete enter delete enter delete enter and yeah
this this I'm not gonna lie is a little bit annoying because it needs to be indented in a specific way and when it's
not indented in that specific way it'll give you errors and you will be like what did I do I didn't do anything wrong
they'll just be like nope you your mistake was just being born in this world all right now the error we're
getting is it says food amount is not defined so that's because we called it food and we call it a tip rename it
correctly and there we go food amount so it's printing out exactly like how we
wanted it to now let's get a little bit more practice in with functions so I want you to give this a try yourself see
if you could turn this weather thing into a function so I'll give you a hint
so first let's comment this out and so we'll say Define and I guess we'll call
this function weather to Emoji because you give it a weather and then it tells you what emoji that is represented okay
so we're going to say weather to Emoji okay so this is what the function is going to be called I'll leave the body
empty for now because that's what you're going to be writing and then for documentation we'll we'll say this okay
we'll say whether to move OG will and they'll take in some arguments I'll leave this blank too but you have to
kind of fill that part in and let's write it like pythonic like this so
we'll say Emoji takes in one argument as
a string okay so we know that whatever the user gives us is going to be a
string and let's just say we're expecting expected uh values from user
is just going to be like rain thunderstorm all right so these are the
expected values and our expected inputs okay so they're going to be either of
them and then it's going to be like this so if we call weather to Emoji function
with let's say rain well we should actually get back is that umbrella
okay if we call this function with not rain let's say thunderstorm we should
get back cloud with thunderstorm just like this and then if we call this with
the weather is sunny outside then it should just give us sunglasses and if
you want to be super accurate this is it returns a string so this is like me
being super accurate and you can see that this documentation is already
probably very very helpful for you because you could see okay this is exactly how I'm going to be calling this function this is exactly what it should
be returning okay I think I can understand that so you where I wrote
pass you have to replace that with you know the body of the function which
means you have to replace that with the correct code so that when I call whether to pass function and I give it an
argument like rain it does indeed return this and when I give it the arm when I say thunderstorm it does return this so
you have to figure that part out so I'm going to give you about five seconds here to pause and then try to do
this on your own and then we'll try to do this together five four three two one
all right let's do this together so if you got to this part very good and if you give it a try and you got it
beautiful job if you didn't it's okay we're gonna do this together so now what
I want to do here is I want to say what I had initially said right so I can I
can I don't need to go through the entire logic again I could copy paste I could copy paste this
and let's uncomment this and then let's just make sure that everything is indented properly so I'll I'll just
bring it back up and hit enter so because there's something called Scopes which is really important to understand
in programming so I'll just take these comments away for a second just so you could see it so this is a function so
everything underneath this function will be indented showing that it's part of
this function right over here then every time we have a if condition anything
that's part of that if condition will be indented like this print statement to
show that it's part of the if statement so this entire thing belongs to this
weather Emoji function okay that's why it's indented okay this print is indented because part of this if this
print is indented because part of this lsif but keep in mind else if is not inside of this if okay so keep that in
mind it's very very important and neither is this else and now if I want to get outside of this function I have
to make sure I unindent all the way out and then write something so you know I am outside right now but if I wrote
something at this level I am still inside weather to Emoji function okay so
indentation indentation makes a huge difference in Python all right so just
remember that so actually let's let me go bring my comments back because those were actually quite helpful okay so
there's my logic now for weather weather is actually going to be passed in
automatically let me put this outside of here okay and let's do it like this just
so when I'm going through the code with you guys it's not super confusing because the big that big blob like just
makes it look too intimidating so the actual logic of the function here we're just going to put in weather so it's
going to take in a weather that's the input and then it's gonna see if it's rain it's gonna do this if it's cloud it's going to do this if it's
thunderstorms going to do this otherwise it's going to print sunny and Bob's your uncle
all right I have to indent and undent all this stuff so I'll just do that real quick so you can see copy paste copying
and pasting usually in Python it's not a good idea just try to write stuff from scratch and then you won't have these
weird indentation problems because even a difference between a tab for example if I write a tab you see how a tab like
is that versus four spaces or two or spaces so a tab looks like it's really
just two spaces but it's not it's a whole different character and so if you're copying pasting copying and
pasting code from somewhere where the writer of the code was using tabs and
then but you were using spaces in all of your code then that will break and that that copy and paste will not work as
well so what I recommend is like put the code next to so you can see it and then write it from scratch and then you'll be
fine all right so whether the Emoji I think it's pretty much done if weather is rain whatever so let's go ahead and
try calling it now so I'll say weather to 2 to emoji and I'm going to give it
rained and let's see what happens so let's run this and boom look at that I got an umbrella let's go ahead and
import this now and here so from qazi you should do from Main and I'll say import weather to Emoji so I'm going to
import this function that I just made and I'll just say whether to Emoji I hit Tab and tab allows me to auto complete
it and I'll say rain and then I'll hit up and go back and delete the inside of the parentheses and I'll say cloudy and
I'll go up and I'll say thunder storm and you can see that it works every single time and if I went here and I
said hailing it gives me sunny so every single time if it's not any of these three I'll get back Sunny so this code
over here right Maps perfectly to this output right over here and if you
actually look in our documentation well our documentation here looks very similar to what we're seeing out inside
of the console okay so this is just multiple ways for you to understand and get back to you know that conclusion but
I'm showing you a little bit more advanced stuff than some people might but I think it's helpful for you and it'll it'll really prepare you for the
future so let's comment out whether to emoji and then let's keep moving forward now one other cool thing I kind of want
to show you is uh it's a little bit more advanced but some of the stuff that we're documenting out here we could do
something called type hinting where it allows you to essentially integrate documenting and coding at the same time
I don't want you to be doing this yet but I just want to expose you to it so
if you ever see it you're not confused by it and you know what it means and just know that it's there to help you
and not to confuse you so for example we were saying you know we're we're writing all the stuff here and telling the user
hey it takes in one argument as a string right but then the user is probably thinking well does this function return anything well then we'll have to write
okay this function returns nothing or what we saw earlier turns none so so you know the user has to actually like read
all this and try to understand this so we can actually make this simpler for the user so with this weather we know
it's going to be a string so we can actually do colon Str and Str is a built-in if I go to the console and I
write like some random variable it's going to say hey it's undefined but if I write Str it's going to actually say oh
that's class strength and then there's another built-in right which is none which just is like hey this is none okay
like nothing that's what that means so what I could do is not only could I tell the code that we're expecting a string
so when you're reading this you're like ah I get it I'm expecting a string here for weather you could also do this and
say none which if somebody was reading your code they would immediately know oh weather is a Str whether it's a string
and this function actually returns none ah okay so um I shouldn't be expecting a
return statement here so it's very nice to kind of bake in documentation into your code like this because it's just
very helpful and this is a brand new new feature that was enabled after python 3.5 plus and you know so it's really
nice because if you use typescript or any of those other types of languages they have they have this type of stuff
there and what I like is like you could use it or you could not use it and your code would still work so for example if
I run my code here and I run this I'm still going to go ahead and get my umbrella nothing really changed and you
might be like why would I ever write more lines of code well same reason why
you write more documentation or documentation in general is so your code is cleaner and easier to read and
something for you to understand is 80 to 90 percent of your time as a developer
will be used to read code okay about 80 to 90 percent of your time only about
say 10 or 20 percent of your time will actually be used right in code okay so
for example why why do I mean that if you were building an app and you built your own app and it took you like six
months or nine months or a year to make you're not every single day going to be coming back to that app and like writing
so much more in code a lot of your time is going to be spent reading the code understanding what you've done and then
maybe adding a new feature and then if you want to add a new feature you'll you'll need to go back and look at again
what you've done and then see if you could add a new feature because adding a new feature wouldn't just be as simple
as copy and pasting lines copying and pasting lines you'll have to understand all the work that you've done previously
so the cognitive load of if you just make it messy and leave it jumbled and
don't have any documentation or anything it's going to be a nightmare even for you to understand what you did and to
catch up with everything so for now that you're a beginner you don't need to worry about any of this you can just be
like screw docs screw type hinting I don't give a I'm trying to write a simple code fair I agree with you
honestly to this date that's how I write a lot of my code but if you want to get hired and have higher chances of getting
hired and write code it's very pleasant to understand and read because again most of your code and other developers
on your team will be reading your code this is the way to go go and if you pick up these habits now it'll just it'll
make you so awesome to work with for future so just a little note there just a little rant there on it I just thought
I'll leave you with this okay so this is called type hinting so I'll leave a little comment here saying type hinting
okay that's what that's that's what that is so let's keep on moving forward now let's go ahead and type in some of our
other functions okay so for example we created some so why don't you try to type hint sum and if you have multiple
arguments you can just repeat this process right here for the multiple arguments as well okay so give this a
try and see if you could type in some I'll give you about five seconds five four three two one if you want to type
in sum you can actually go ahead and say int it's a built-in so if I write int
here it's a built in okay int and I'm expecting an integer here as well okay but in the docs I had integers so I'm
I'm if I'm reading reading this code now I go okay I'm expecting it two integers to be coming through but then what are
we returning well we're also actually returning a see if you could fill this out here what does this return once this
get evaluated so if I had a one here and a 2 here this will become a three and I'll return to three three is what data
type you're right if you got this okay this is I'm gonna be returning an INT so
now when I'm reading this without even looking at anything else I just know okay I'm getting integers I'm returning
an integer very simple but initially very confusing to look at and then when you get used to it then it's simple and
then you're like oh actually this is super helpful it saves me a lot of time and effort like for example you know if
you had food well what the heck is if I wanted to convert this into type hinting right what's Happening Here How can I
convert this into taipant well I'm getting back I'm putting in a food but is food a like you know it's food am I
expecting a string like chicken or am I expecting a food amount like a number well how would I know that it was an
amount also can I get back an amount like 50 or what about 52.5 live so I can
also get floats well float you know is like a super class of integer because
floats contain integers right so I can actually go here and I can say float it's a built-in data type food is float
and type uh tip percentage is it could also be a float okay but in this case we
could just say integer okay we're expecting back to get back into your 15 20 not many people release it 25.5
percent is what I want to tip and then what are we returning while we're returning a number which is you know
could be a hundred and twenty dollars and 20 cents so it could be a float so I could actually just say float so now
when I look at this function I just go okay I'm expecting some kind of number here some kind of number here and I'm returning some kind of number okay so
some math stuff going on here all right so that's how I would type hint both of those now if I call sum and we run this
I should still get some without any problems so it didn't really do quote
unquote anything it just made your code a lot more read edible and it makes other developers not want to slap you to
be honest so great so whether to Emoji is now good you've gotten some practice
with type hinting named arguments default arguments calling functions turning your previous code into
functions all of this is a these are actually very valuable skills and it's a lot to synthesize in a very short amount
of time so I'm going through this but I expect that you're watching this over days and weeks so I hope that this can
register in your brain now before we move forward I want to give you an exercise it's time for an exercise put
some cheesy music or something here throw some cheese on the screen all right great so time for an exercise all
right get ready get ready we're gonna try to keep this exercise as simple as humanly possible and we'll start off
with something something basic it's not that basic so don't get excited it's actually a little tricky but um I I
believe in you I believe venue I believe you could do this so I have this exercises folder right here you can go
in here and do the exercise okay so I'll go into exercises and we'll go into this
exercise here bigger guy this is going to be your first exercise all right so now I'm inside of bigger guy so this is
how it works so I go here and you read The Prompt make sure you read everything that's there don't just not read because
that's mean we spent so much time and effort making this for you making it easy here's the prompt write a function
bigger guide that takes in two numbers and returns a bigger one make sure to
return to use return and not print in your function you could write print in
your function while you are let's say working on it but you know in future
make sure to uh return it but I'm Sorry by that I mean that at the end once
you're done make sure you return it okay like don't just leave all the prints there but don't return so like while
you're debugging and working on it's pretty normal to use print at the end of it you should have a return majority of
the times on all your functions one other important note that I want to leave you with is and this will come in
handy later so I'll say important right here and it'll say Do not forget to
import this into main.py alright so I'll talk about this in a second this is
going to be a very important point because if you don't do this and I don't tell you about this you won't be able to
run your bigger guy function and then you'll just be depressed alright so let's just talk about the function first
real quick okay and what's happening here so given two numbers return the bigger one so I want to be able to call
bigger guy just like this bigger guy takes in two arguments two comma three
and it Returns the bigger one three okay so that's an example for you if I had
obviously 10 then it will return 10 right here okay it won't return the
smaller Guy where it says pass is where you're going to write your solution
where you're going to write the code okay I have written pass here because I'm not just going to give you the
solution it's an exercise now if you want to actually call this function here's how you're going to do it you're
going to go inside of your main.py and I'm going to show you how to import stuff because it's going to be important
for me it says import quasi because because I'm still working on this file for you this line shouldn't even be
there and it doesn't matter so I'm just going to comment this out for now because it's not necessary okay you
could just if you feel comfortable you can even delete this but it's not going to be there most likely uh now we're going to say from exercises
dot bigger guy so I'm gonna go dot bigger guy so by doing this I have so
here imagine like we're we're on this walk and this journey together right so when I do exercises it takes me into
this folder right here boom and it just opens it then we're gonna do the dot bigger guy it goes into this file and it
opens it now inside of this file I have pretty much only one function and it's
called bigger guy as well so I can actually say import bigger guy and
that'll get me access to that function but since I'm so nice and I want to make life even simpler for you you can
actually just say import exercises dot bigger guy and that's it okay yes this
is going to remain yellow but leave it it's not important it's not important so let's go back into our bigger guy right
here okay and if you want to run this let's do this okay so I'll just say
print and I'll say banana Anna here and then I'll say print bigger guy and then
give it two arguments so we'll just give it one and two for now and I'll run I get a banana printed out to the screen
so without confusing you too much if you want this to run you'll need to have
this imported in the main file if you don't have it imported in the main file and you run it you get back nothing NADA
nobody's there nobody's home okay because what's happening is the only file your python is running right now is
this main.py file as the only file that's being ran none of the other files
are being ran so you have to import and then you can actually run that file okay
so import allows you to do that here is another way you can run that file okay
and this is the way you could run it on your local computer anywhere as well so say you want to run this file bigger guy
and let's just say you forget this import method or you just don't like it I don't know whatever the reason you can
run it from your shell okay so go to your shell you can hit enter right and
and this it should tell you're in this folder whatever your folder is called CD into exercises okay so the command
line stuff is valuable and so I'm I think it'd actually be cool if you learned this because if you're doing
python you're gonna be doing something with the command line so CD into exercises and all this means is I'm I've
changed directory and now I'm inside of this exercises folder and then simply do python bigger and
then you could just hit tab it'll auto complete it okay and there we go so the
banana was printed out to the screen it ran that file so those are the two
different ways of running this file I think this is a much easier way because once you set it
up this way you can just keep working on your code you just say print cookie and
then just hit command enter and everything will run okay you're getting the cookie and you're getting the banana
everything is working perfectly so in my opinion this is a much easier way now once you're sure that you have written
this function and you've written it completely correctly and just to give you hints you're going to have some you're gonna have to do some if
um else conditions here and to give you even further hint you're probably gonna have to do only one if and only one else
and your logic is going to be you know basically like hey if this is greater than this one then return this one
otherwise return the other one okay so I've kind of given you the logic now you just have to turn it into code and we'll
code it together if you don't get it which is totally fine so that's kind of the logic right there and if you're sure
that you did it right I have man I'm so nice I have also written tests for you
which means my tests will run and test if your code is working or not and if
it's broken it'll catch it and tell you so what you could do is you could go into the shell and once you're inside of
the shell just make sure to go to the home directory so let's just say you were in exercises just do CD space dot
dot that will take you out and back One Directory so now that you're in the home
directory whatever of your project just go ahead and do PI test if you run Pi test it'll run and it'll tell you if
your function is correct or not and here it's saying uh nope this function was
not correct we ran the test it says hey we ran this a bigger guy one comma two
and where it was supposed to return to it actually didn't it actually returned
none and that doesn't seem right now I'm
hiding the solution from you because I just solved the problem if you have done it correctly and you do PI test it
should basically say green okay um and it should give you uh test all
exercises okay and it should give you a like a green check mark for this now if
you just do PI tests right on your computer you're going to get something ugly that's gonna have red red marks and
stuff like that and I don't want you to have that because it's testing every single test that I've written inside of
test all exercises so it's actually saying that you passed for the bigger
guy one but you failed for some other ones right so one failed and it says one
passed you can see the green here passed but what I want you to do is don't test the entire file in all the functions
right so if I actually look in the test file I want you to just test the bigger guy function so I've written these tests
you don't have to worry about them but I'm just checking if you know if I call it with one and two does it return two
if I call it 10 and 20 it should return 20. so I've written these tests don't touch anything in the test file okay so
just get out of this test file I'm just showing this to you so you're not like scared what this is yeah what's going on
here but I'm also testing other functions in there so if you're doing Pi test it'll test this guy and it'll test
every other exercise you've done as well so we don't want to do that we want to test only your uh bigger guide bigger
guy okay so let's go back and here's what we're going to do I'm going to clear this okay and then we're simply
going to go ahead and say I'm going to say Pi test do Dash K and I'm just going to say test bigger guy that's it so now
for bigger guy I did pass successfully for the other now if you want to test other functions you obviously just give
the names of whatever the other functions are and make sure you don't change function names and things so go
ahead and give this a try I really hope that you get it I think you will and I'm
just going to set it back up to how you should get it okay so it's just going to be like this
is going to be pass boom okay and then yeah that's it so replace this pass with
the correct code run this test it out and yeah and if it's successful then it
should pass essentially all of the tests and then you should be good to go with that said good luck I'm rooting for you
all right welcome back so I hope you gave it a shot and made tremendous
amount of progress I really hope you were able to actually fully solve it but no worries uh if you didn't let's do it
together and even if you did hey maybe you'll get to learn something so here's the situation right I have to
return one of whichever one is the bigger one well I'm gonna check and I'm gonna say hey is
a greater than b okay so I'm going to do that check first so let's actually go ahead into our
console let's just test something so I'll set a num A5 and B I'll set it to
10. and I'll just say hey is a greater than b and I get false okay so I'm like okay so far so good I
like using my console as I'm writing my code because very interactive I can see what's happening and then come back and
add it to my code okay and now I can actually even write here if a is greater than b
then you know just give me back a just like print a whatever so if a is greater
than b let's see give me a else give me b
so let's see what this does I ran this line this code and if you actually see I
got back 10 which is actually exactly what I'm supposed to get right in that case so I'm going to say if it's a is
greater than b return a else return B okay so basically what I'm
saying is you know just do do this little chakaruski over here and if it's
if this number is bigger then return it otherwise if the other number is bigger then return that yeah that's it so let's
return run this and we we can try running this function and see if it gives us what we wanted to give us so
I'll say bigger guy and I'll call this with one comma two
let's run this and I get back to 2 which is completely correct let's go five it
should choose five now so it's looking correct I can also import it as a console if I want I can say from
exercises dot bigger guy import bigger guy and then I can say bigger guy give
it two comma four so I'm just showing you multiple ways you can access this function and play around with it and
then I'm gonna go ahead in my uh test and I'll say test okay and um let's just leave a little
note here and then we'll say to to test
your code this is the command that you'll write Pi test Pi test k
and then you know bigger guy whatever so I'll remove this yeah
this is going to be the code that you write for this one right it's a pie test and then I'll say bigger guy
shell okay there we go so now it's very clear what's happening all right let's run this
and boom there you go it says all tests have actually been passed all right
there you go so if you got this congratulations if you didn't all good they're going to be plenty of more
exercises so don't lose hope and let's keep going all right welcome back you're
doing great so far all right so now let's get out of this function okay
hopefully you got this one correct let's go back into your main but I'm gonna go
into my Kazi because that's where I'm writing all my code but you should be writing it in your main okay so just
ignore cozy so let's go over here now I want to introduce you to our friend
Lambda okay it's a great friend you're gonna love him or love her she's awesome
but in order to learn about Lambda you know we need to just get the technical definition out of the way and
it is basically allows you to create an anonymous function uh boring boring
boring definition but it's a lot more fun in real life so let's just use it without doing too much talking here's an
example so remember when we had our sum function right so it was a comma B and
then we said return a plus b well with Lambda we can actually make it a lot cooler for example I could say sum and I
could say Lambda okay and I can say a comma B and I can say a plus b so this
is let's just call this sum two so basically over here this is a this is a
whole function okay how do I know because I can actually use it I could say print sum to and let's give it one
comma two and it's telling us what the inputs are it's an anonymous function right here all right so I'm going to hit
run and right when I hit run boom look at that I get back three now I could
change this to let's say five comma ten let's run this and I get back 15. so you
can see that this is a really nice way of writing the same piece of code and it
just puts it in one line and honestly I really like looking at it like this and
in functional programming if you're doing JavaScript or whatever you come from that ecosystem yeah a lot of
functional programming will look like this okay JavaScript has its error functions but a lot of those Concepts
came from like Python and functional programming languages like this synonymous functions are really nice now
you could use you could create this function without a name and use it or
you could do it here so either way will work but yeah that's the definition now I want to introduce you to this concept
of implicit return so notice that you actually didn't even have to say return
here here because in Lambda functions you can only have one expression instead
of multiple expressions and that's expression expression it thinks you're returning okay so when I run it you get
back 15 and I don't even need a return statement so that's nice because it looks cleaner now how does Lambda work
so Lambda you say Lambda and then you put ARG one you put Arc two however many
arcs you have right whatever and then colon argone plus R2 or whatever like
however you want to use them this is where the arguments go and then after the colon is where your expression goes
okay so we just say expression all right so you know if I want to make my greet function I can say take greed comma name
and then just go high I can go great cozy now my grid function has turned
into a Lambda and I can run this okay so my bad name so now let's do print
and we'll call this great and now I'll say great and we'll say aloha and I will
say qazi and let's run this and boom we got that okay so you can see it it works
it's easy to read and everything is just in one line now there will be more we'll talk about later about lambdas but for
now I just wanted you to be intro to them and not be scared of them because you'll see them a lot so you know become
friends with Lambda that's a good idea and also I wanted you to get familiar with the concept of implicit returns
right they're returning here you're returning here um implicit returns now another thing I
want to intro you to is called testing so testing your code how do you test
your code you might have heard of something called unit test or whatever we're not going to get too deep into it but I'm just going to show you how to
write basic basic basic basic basic tests for example we've already defined our sum function right so for example if
I do print let's comment out both of these lines here so let's say I write my function sum 1 comma 2 I should get back
3 and it should print it out over there it does beautiful how do I test this so
how I test this is I can actually go ahead and say assert that sum of 1 and 2
is equal to what can you guess I mean it's pretty obvious right sum of 1 and 2
should return what three right so I will write the statement assert that sum of
one comma two is equal to 3. so when I run this and if I don't get any errors that means everything worked and our our
code works great now imagine you went to your sum function so let's see if we can find our sum function let's say we want
your sum function and you did something that may be broken maybe you like instead hit a minus here and maybe you
did that by mistake and then you just like moved along if you didn't have this a search statement you would run your code and it would seem like everything
else is fine but that sum function might be causing so much so many errors in your app but watch this if I run this
now boom it just immediately catches and it says Hey assertion error assert
someone comma two equals three and that's not the case here okay and I can even leave a little helpful message and
it's like someone comma 2 does not return three like it should and I I can
put a little X here or whatever and you run this and I could see hey sum 1 comma two does not return three like it should
so now there's like a more helpful error message and you can and assert allows you to do that so what I like to do
sometimes when I'm coding is I'll just have a bunch of assert statements like some you know and and I want a really
rigorously test this like does it work on negative numbers like negative 20 comma negative uh 20. so negative 20
plus positive 20 should give me back zero so I want to assert that this is zero okay so let's go back to our sum
function let's fix it so I'll say a plus b okay let's run it again and now you
can see that all tests pass okay so I can say print some function in all tests
passed and I I'm just doing this one for just show you don't have to ever like do
that okay but I'm just doing this so we could see it cleanly okay some functions all of the tests pass because if it
broke at any of these points it would just stop running right there it wouldn't go any further that's what
assert does now what I would probably do you know as a next step is I would not
just leave this code outside by itself but I would put it inside of a function so I'd say test sum so that'd be like
hey test my sum function and all it would do is it would just have these assertions so I'm gonna delete delete
hit enter delete delete hit enter and maybe a couple of more assertions like make sure 20 plus 20 is 40 make sure you
know 560 plus 780 is 560 plus 780 is
thirteen one three four zero okay so yeah just make sure sure that those
match so now I need to and I'll put this print statement inside of that function
as well okay now if we don't call that function obviously when I run my code nothing will happen because I'm not
calling it so I'll just say test sum and we'll run this and boom look at that it says all test
pass in this case we have four tests I'll just say four or four and then we'll run this and we'll say hey all of
the four tests passed so sometimes that's actually a really good way for you to actually write your code because
okay you know what what your functions should return right so for example let's say we want to write a test for
calculate food total before we even really write the code for it so I'll say test calculate food total and I'll do
this and I'll just hit assert calculate uh when I call that function calculate
food total yeah and isn't that what I called it oh okay I see I called it like
this uh camel case so I'll just say calculate food total and this is really
helpful because documentation just showed up from our code so the first argument is food so I'll just say hey
the food amount is a float right it's telling us which is very helpful and it
says the second argument human is tip percentage and that's an integer so that's also very helpful so I know okay
20 so if I have a hundred dollars and I have twenty percent tip the total amount
should actually return 122 um 120 okay so that's what it should
return so let's go ahead and test calculate food total and I'll call this
and let's run it and let's see if we get an error we did not get any error let's say if we said 125 boom now we get an
assertion error so that's what's nice because you could write these tests and it gives you a very clear idea of how
your function is going to look if there are any edge cases you'll be able to catch them right here for example what
if we had a decimal percentages that people were giving it like would that still work and what would happen if they
were giving this would that still work and what would what would the result of that be so you could test that you know
you could test what if people give me you know a negative number because for your apps when you're making them for
users you'll have to also write these tests right imagine somebody who's using Instagram right now well the developers
have to test what if the user like hits the back button on certain case or like tries to delete somebody else's comment
are they allowed to do that can somebody you know create a new comment are they
allowed to do that is that working because what if all of a sudden they added a new feature but then that broke
the ability to create comments they want to be able to catch that right away without you know with waiting for a
really long time to find that out so they have all these test cases and then as soon as that function breaks or you
do something where it doesn't work these test cases will actually catch it let's go ahead and do test calculate food
total and so like imagine I went to my test calculate food total and I was like I'm just gonna like change around a
couple of things and I'll try uh just doing divide divide by 100 I'm sure it
won't make a difference let's go ahead and boom We like caught that there's an error right away that it doesn't work
it's saying assertion error right it caught it right away so let's go ahead get rid of this let's
run it and now boom you can see there are no assertion errors anymore and our
problem is solved okay so this assert thing I really like using it it's very
simple to use I love how simple python makes it so you know get in the habit of also testing your own code and this is a
very light and easy way to do it and then later on if you ever want to write unit tests I have an example of unit
tests here for you and I'm I've written some unit tests in here okay so uh
that's that's the way to do it so far you're doing great let's keep on going all right now let's go forward and we're
going to talk about probably one of my most favorite things that makes programming honestly programming and it
is arrays okay a raise which in Python we actually call lists okay so if you
hear arrays they're the same thing as lists okay so lists are one of my favorite thing things in just
programming lists allow you to do a lot of stuff but let's just start off with simple things so let me ask you this
question right so far if you want to hold multiple items in one variable how are you going to do that so let's say I
want to give you like you know I want to say hold 10 numbers in one variable how are you going to do that you're you're
not right because if you say x is equal to or you say numbers is equal to how
are you going to hold 10 numbers because if you do 10 comma 10 well that won't work that won't do what you wanted to do
you could try 10 10 10 10 but that also won't work because that's an error it's
like okay what the heck is even that if you try to put them all together well that's just one big number that's not 10
different numbers lists are amazing for that now where are lists used well if you've ever been to Netflix here's an
example of an of a list here the list of users and for every user show the user
so this is an example of a list and where it gets used if I go inside here
all of this this is a list okay list of movies so it's the first movie this is
the second movie third movie fourth movie fifth movie and multiple things are being stored without lists this would not be possible lists are erased
it would not be possible I'm gonna create an array or a list of fruits and in this list I'm gonna have
different fruits I'll have a cookie I mean that's not really a fruit I'll have an apple I'll have a pear I'll have a
ice cream that's not a fruit what other fruits are there blueberry there we go
I'll have a banana so I got a bunch of fruits here and yeah my my pie flakes is
freaking out pie flakes is just really really just saying hey like it usually tells you about styling but it's
freaking out here because I think it's like I don't understand this blueberry and this stuff is
okay now I can print fruits so let's go ahead and run this okay it actually
caught it correctly it said hey I don't know what this blueberries thing is so let's change the blueberries to an
orange let's give this a try and let's see if it knows yes it looks like it knows you you don't have to use these
emojis I just like to use these emojis because I'm sure you're bored with all the other boring programming tutorials
and so this would make your life a little bit easier it's something more fun to look at than just numbers so here
are my fruits that I have now here's the cool thing I'm going to show you a couple of things with lists so lists
have different type of methods that you can use and if you ever hear me saying word like methods versus functions
here's really what that means anything that I do like this if I do print or
whatever that is a function okay this is an example of a function but anything I
do that requires me to do a DOT so with with the list I'll probably show you like list dot uh list dot append
if you ever do this dot a pen thing so append would be a method whereas print
would be a function so just some terminology stuff that you know could be helpful for you so let's go ahead and
print fruits and you know of course when I when I print fruits it shows me the
fruits right over there and now I'll show you some methods that you could have so for example what if I wanted to
add more fruits like let's say I want to add another orange well what I can actually do is I can say fruit dot
append and I can append another orange and then let's go ahead and print fruits
again so Watch What Happens look at the first array right this is before adding
the orange and then look at the second array this was after adding the orange and now you can see that I've added that
orange okay and it's a pen because you're adding to the end that's why it's a pent and there you go I got myself
another orange and so you try a pending a strawberry and see if you could do
that and if you can't if you don't have emojis just use the word strawberry so give that a try I'll give you five
seconds five four three two one all right let's do it together so I'm gonna
go ahead and I'm gonna say fruit start append and I'll put a strawberry here and then we'll print this out again
let's run this and now I should see yes without this it's four items originally
then I added the orange and then I added the strawberry and you can see all of
them are actually added correctly how they're supposed to be added there you go that's your buzzword of the day a pen
now let's look at indexing what if I want to get the zeroth item right there
and maybe needing I want to get this apple what if I want to get that orange how will I get that orange out of that
area so I can do print fruits right that I could do and I'll comment out uh some
of these fruits right here actually let's leave it uncommented for now just like okay I can print out fruits but how
do I get that specific fruit out of there well what I could actually do is something called indexing so if I show
you a raise arrays have indices okay so the zeroth item is going to have the
indices of zero meaning this apple here is going to have the indices of zero
then the second item is going to have one because in programming numbers usually start from zero okay and then
one instead of one and two so in this case we have the pair so one is going to
be the pair then it is Orange right there so let's go ahead and give that a
try now so I'm going to go ahead and do fruits of zero and let's run this and
look at that I got my Apple okay I'll go ahead and comment out all this other stuff for now and let's look I got my
Apple okay let's go ahead and see how we get our pair and you can see I got my
pair let's go ahead and try fruits of two and I got my orange okay so I think
you're getting the idea right now why don't you go ahead and try to get that banana I'll give you five seconds five
four three two one all right so I hope that you figured out how to get the
banana but it'll be very simple right we're just gonna do fruits of three and
if I run this I should get back that banana right over there okay so so far
so good I'm able to index it and get back things now here's a cool way to get
the last item so it's like how do you get how to always get the last item in
an array that might be a great question for you to think about okay maybe that's a problem you could try to solve
one nice way we could always get the last item of an array is we could go
backwards so python allows us to actually index backwards as well which I
love because JavaScript and those things don't have that so it's like when you're working with lists my God it's annoying
to not be able to go backwards so here's how we can do it instead of saying fruits of three I could actually go
fruits of negative one and fruits of negative one you'll notice actually
gives me this banana right over there and this means that even if I change the
size of it meaning I keep appending let's say I keep appending fruits here okay and then let's comment out all
these other ones so I'm changing the size of it and I'm appending like an orange and a strawberry so it needs to
give me dynamically the strawberry let's see if it could do that I'll run this and boom look at that it actually gave
me back a strawberry so it doesn't matter how many things I'm adding or not adding right it will figure out in its
own way so comment this out now comment it out now let's say I add a cookie here and when I run this fruits of negative
one is still going to get me to cook you okay so even though the size of this keeps changing this starts from right to
left whereas this starts from left to right okay so right to left so negative one okay in other words this will be
negative one and like I'll zoom in so you can see it better that'll be negative one that'll be negative two
that'll be negative three okay but if you if you're going this is if you're going right to left
okay but if you're going left to right then this will be zero and this will be
one okay and then this will be two this will be three and this will be four and I think you get the idea okay so in my
opinion it's much nicer in or uh in Python and way easier to be able to get
like the last item of an array and the first item of an array so that's how uh
this method append works and that's how uh indexing works and you can actually
like pull values out of an array now the other thing I want to show you when it
comes to arrays is something called slicing so this is a very valuable thing to learn so I'll say so it says slicing
when you have slicing in an array that means what if I want a chunk of this
array from here to here or what if I want just these three elements from an array so how do I slice this array
earlier I gave give you an example of Netflix right if we go back to Netflix say all of these movies every single one
is in some big giant array but I just want to slice and give you in this in
this list right I just want to slice and give you every trending now movie so maybe I'll go through that let's say
like every single movies in this giant list every single movie well I might
want to slice it and just get you the trending movies or I might just want to slice it from
here to here and get you you know award-winning shows or what or yeah
right so for example boom boom like if I don't want to get you everything so
that's worth slicing can come in and actually help us all right so if I go
here and I go fruits of zero through two
let's see what happens so I'll go ahead and print this and then let's comment this out and let's run this okay and you
could see that I got two fruits so I went from zero to two now it goes up two
but not until okay so it's like the first one you know first argue first one
is inclusive and the second number uh is exclusive second exclusive so kind of
annoying I understand but it stops right before two meaning that if you did zero through two what it would really get you
is 0 and 1. okay so that's what it's going to get used to two now if I did
zero three zero through three it'll get me this now go ahead and get me all the
fruits but not including the cookie because that's not a fruit so get me from here to here what are you gonna how
are you gonna do this so print that out right here give that a try so five four
three two one so how we would do that it would be very simple I'll just say zero
through four and let's run this and that gets me all the way up until there
except for the cookie all right now another thing that's very valuable is I
want to always know at any given time what's the length of my array so that's something you very commonly have to find
out whenever you're working with a raise so in Python there's something called
Len and when I call it you can see it's a built-in function that comes with python and so say I have this this
fruits array so I'll just copy this and I'll say fruits is equal to that okay so I'm doing it in the console just so it's
easier for you to follow along and you could interactively do that too and now I could actually go ahead and say Len of
fruits like this so watch what happens when I run this it's going to go ahead
and tell me that the length of this array is four okay so length is a very
important function it will allow you to you know always get the full length of
the array so if I asked you hey create a function that can like you know always
get from the start all the way to the second last item so basically regardless
of the size of the array it gets from the start to the second last but then doesn't get the last one right how would
you do that well you'll need to actually know the length of the array so then what you could say is hey go from zero
to the length of the array minus one okay so you could go hey go from zero
right here right there to the length of the array minus one
okay so in other words I could say print fruits from zero to land of fruits
minus one because this is going to be 4 minus one is going to be three let's go ahead and give that a try
and there you go that worked it didn't get me the cookie so if I comment these
out as well and I run this you can see it works it doesn't get me to cookie so it goes from
the start all the way to the second last at the end so slicing is a very valuable
thing and what's really cool about slicing is you could also slice strings
as well so if I have a string like this even though we're not talking about strings but slicing is like an array
method or a list method it could still be valuable for this so if I have a
string like hi my name is cozy okay I can
slice this and go zero to ten and if I run this
it'll get me the first 10 characters right hi my name is whatever if I go 20
it will get me the did I nail it like no I didn't okay good it's freaking out so
if you go above the maximum amount it'll just max out so you could go zero through eighteen that'll give you the
whole thing so you could slice this too what if I wanted this last character right there where it says I what if I
wanted that well I could just go and go ahead and go negative one here now one other thing I
want to show you with the raise that's very nice is how you can actually reverse it in a really easy way
so I go here and this is something also new as well so if I go ahead and print
uh fruits right and let's go ahead and comment this out and comment this out so if I go ahead and print out fruits and I
go give me zero through let's say a five and I run this it'll get me every single
fruit right and obviously this is part of the fruit too apparently cookie is a
fruit I bet you didn't know that so if it does that um I can I can also reverse it so I'll
show you something cool so there's also a step so this says
the first zero right so if I was to make this out so I have this I have I have
this right and I have zero excuse my bad handwriting colon five
whoops colon one so one when I have this
right this means from okay let's go make that bigger this over
here means two let's make that bigger too okay and then this over here
means step so step by just like step by one by one
character which is the default okay so if I run this now you should just get
fruits this regular array but what if I wanted to skip and get you every other fruit meaning I wanted to get you apple
and I want to get you an orange and the cookie but nothing in between well I could actually step by two and I could
do that okay and I could get boom like I'm so you see how I'm like skipping over every single two now what I can
also do is I can go backwards as well so I can this allows me to step forward and
if I go negative one this allows me to step backwards so if I run this now
um I'll I'll I can't have this be zero colon five okay because the from and two
are reversed so the trick here is if you don't specify this at all and you don't
specify this at all you just do colon colon you can actually do colon colon negative one and this will actually
reverse reverse the array and you could actually reverse strings like this as
well with that same technique so if I change that to negative one here it'll go backwards instead of you know
if I change that to positive one that'll go forwards okay so arrays our lists have a lot of
tricky methods and you know and functions you can call on it and you know the slicing business but it's very
valuable for you to learn because it's going to be super super helpful as we start to get to the later projects because you're going to need all of this
stuff you know when we're doing bigger projects or if we're building a game or anything like that now some other stuff
that's actually helpful for you to know as well with lists is that list could hold different types of data types so
for example I could have numbers and strings in here so I could say hi and I
could have a float like 8.5 I could have integers hell I could have other arrays
inside of it or other lists inside of it like another list of numbers so I could have all kinds of stuff inside of a list
lists are cool with it lists don't have any problem with that so you can see that's the output right when you run it
you should get this see I was able to reverse that list as well so yeah you
can I'm just used to saying array my bad list so yeah you can always you list can
hold any type of data type I think that's a helpful thing for you to know and then there are a lot of other
methods that lists have we won't go into all of them today but I left you with
some of them like an append method right and just kind of different functionality you could do with it you could call Len
on it and get the length of the list you could call you know you could slice it
so I wanted to just give you certain pieces that would be valuable so you can
see right here right there's tons of different methods append is one of the
ones I showed you there's insert which allows you to insert an item into the
list anywhere there's clear which will clear all the items in a list there is
count the count items and things of that nature you have removed so you can
remove items from a list sort allows you to sort the list reverse allows you to
reverse the list yeah pop will allow you to basically remove the last element of
the list and then return a new list which is pretty interesting it has really nice use cases and then of course
index as well so if you put a cookie it'll tell you what the index of that cookie is or the you know banana what's
the index where is that specifically located so there's a ton of different
methods I just wanted to show you a few of them and with that said we're gonna move on and we're gonna start learning
about something really fun called dictionaries and python let's get to it
all right now let's move on and talk about dictionaries so I will comment
this out dictionary is a very powerful concept inside of python let's start with visual examples and now make our
life a lot easier all right so say we have this person here which is me hi I'm qazi and we have
this person and the person name is qazi and person's shirt is black right this
is the shirt that we're wearing so in Python so we're going to represent this with a dictionary so if you just look at
it by example you'll kind of get it very quickly so first thing I'm going to do is I'm just going to say person and then
whenever you're creating a dictionary you're gonna create these curly braces okay all right and they have something
we call key value pairs so for example if we're looking at this guy right over
here this part right here would be what we
call a key and then this part right over here is what we would call a value okay
so that's what that means key values it's like if I try to get that person's shirt I get the value black back okay
and if I try to get this person's name I get the value cozy back let's go and
leave that there so you could see it and now we're going to go ahead and we're gonna say okay so it's basically in a
key value format so the first key we have in this case
is our name so I'm going to say name and let's put it in quotes like this
and then the value is cozy okay so that's key this is key number one so
this right here now already matches that okay so I can
go ahead and say person and I can say person show me the person's name and we
can print this and now I'll run this and you can see in the console I just got
back cozy how did I just get back cozy by doing this okay so whenever you do
this you call your dictionary and then you give it which key you're looking for
and in this case we're looking for this name key then it's going to spit back out the value now if you want to add
another key to this another key value pair so basically if we want to add the information about the shirt we just put
a comma here and then now we can say shirt is black and now why don't you go
ahead and print out the shirt and it's going to be in the same format right over here okay exactly the same you're
just going to replace this here instead of name you're going to put in something else and then run it and see if you can
get this color black back so I'll give you five seconds five four three two one
so go ahead and pause it and try it and if you've already done it great job and
let's do it together if you if you didn't get it no worries we'll just do this together right now I'm gonna say person and I'm just gonna go ahead and
say shirt and this right here should spit back out black okay so let's go
ahead and run that so you can see cozy and then we get the shirt color back black so both of this is working now
what I want you to do is add another key value pair see if you can add another key that says laptop is an apple okay so
this is your task right now so it should be the laptop is Apple okay so Apple
should be the value and laptop should be the key so give that a shot and see if you can add another key value pair in
here I'll give you five seconds to pause five four three two one one all right
so let's go ahead and give that a try now so I'm gonna go ahead and say comma
and I'm just going to say laptop is an apple and now we can go ahead and
print that out as well I can say laptop is an apple okay boom there we go now
normally when people are writing dictionaries most of the times how they make it look and if you're coming from
another language this is an object or a map so if you're coming from Java or JavaScript you know it's called an
object there just like lists are called arrays so this is how it'll normally
look because sometimes if you're making it run really long it can look confusing so how we like to do it is like this
each key value pair represented on its own line and then open close like this
so it's very stylistic and it looks good so styling your code is a thing in
coding and if you can make your code look nicer then that's great okay so
people are going to love you for and other developers are going to love you for it so like reading this you know wouldn't you agree that this is reading
this is much easier like okay key value key value key value then reading this
right that that looks much more confusing so that's why we like to do it like this
and this should still run if I run it I still get all my all of my stuff here is
getting printed out so there you go now what we can do is we can create a
function that you know that takes this information and then maybe just gives
you a little greeting okay so like this is like our Advanced greeting thing okay
or just maybe introduces who this person is so let's let's create this function and I'm going to say Define and we will
call this introducer and what the introducer will do is let's say we just
put this person into our introducer and then it's going to go ahead and say hi
my name is blank my shirt I am wearing a
black shirt oh not black but like a blank shirt and
the laptop I use to code is n blank okay so we'll put some emojis
to make it fun so this is going to be the high part it's going to be the shirt part
and this is going to be there we go so now if I run introducer
and I say print introducer oops I get an error and this person is not defined
introducer oh yeah I got a call introducer like this my bad okay and then also let's comment all of this out
because that's what's complaining because we just took the definition of person away from there and you could see
okay and we don't need uh the print statement there for now you can see it
says hi my name is blank I'm wearing a blank shirt and the laptop I use to code
is n blank okay is a if you're you know isn't Microsoft or is an apple all right
and so now instead of these blanks we're going to actually put in these specific
values so the way to do that is put a f here so this enables string formatting and then I'm going to basically say here
name and here we can go ahead and say shirt and then here we can go ahead and
say laptop but this won't work right why will this not work because we don't have
access to actual name and shirt and laptop variables if I run this I'm going to get an error well we do have access
is person so remember we gotta actually call it like this so replace this name
here with this so give that a try and see if you can actually make that happen I'll give you five seconds here to give
it a try or pause the video five four three two one okay now let's do it together I'm going
to say person and then we'll say name just like that and then we're going to say person and we'll say shirt just like
that and then here we'll say person and then we'll say laptop just like that now
let's run it okay what's the error that we're having here it's complaining about
invalid syntax so let's see okay so the problem that it's actually having is if
you look here it says Hey person is not defined so the problem that we're having facing here is we haven't put this print
inside of our introducer function so that's where I'm having an error so let's go back and hit enter and enter
and now it's actually inside of this introducer okay so it's indented right
here so now let's go ahead and run introducer all right so this syntax error is basically complaining because
we have single quotes here but then like also single quotes here so what's
actually happening is that this single quote is looking for another single quote to end so when it sees this it
goes oh that's the string and so it thinks this is it because it's looking for the last one and then it wants to
end it here so what we need to do is leave either this as single quotes and
then double quote all of these or do it the other way meaning make this double
quote and then leave everything else single quote and that would solve the problem so let's go ahead and just make
these double quotes because that's much easier to do I'll make this double quote right here and run this and there we go
I see hi my name is qazi I'm wearing a black shirt and the laptop I used to
code is an apple okay there we go so our introducer function now works uh pretty
correctly now we can even go further and add this person's you know let's add let's add assets so
let's say that qazi is you know has about a hundred dollars in his bank account okay so assets and then for debt
we'll say let's say Kazi has fifty dollars worth of debt and then what we want to do is
so now we have assets and debt so that's that's cool we added that but what if I
wanted to add something that could actually automatically calculate kazi's net worth so if I did net worth now
there's no way to actually set assets minus debt here because these when we're
creating this these aren't defined yet so if I run this this wouldn't do any it'll be like wait I don't understand what assets or what debt is so here we
want to create a function that can call so essentially like imagine I had a function right imagine
at a function you know we'll just we'll call it uh net worth and then I did
and I said hey grab the this person object okay or this person dictionary
and then basically do grab their assets and then subtract that
by their debt okay and then return this that's the so like if we want to create
this well there's something really cool that you could do inside of dictionaries as well you could actually create
functions inside of dictionaries so in other words you're kind of creating a
method because you're gonna have to use a DOT something but yeah so it's just
kind of it's a really cool hacky thing that you know it's a little bit Advanced so I I don't imagine you're going to be
using this right away but in the future this is something you could use so I would I would say just have this up your
sleeve Right In Your Arsenal so check this out right this is pretty cool so what I can say is I can actually create
a function here now I can't create a function like this because whenever you're doing def you have to Define you
have to create that function on its own line it can't be it can't already have stuff behind it and then you could do
def it won't work so remember how we can create inline functions our friend it
starts with an L see if you could remember that yes that's right our friend Lambda this is where our friend
Lambda comes in so I'm going to create a function on the Fly here an anonymous function we don't need to give it a name
because I mean I guess in this case in case the name would be net worth and what I want to do here is I want to say
essentially this and I don't even need to write a return because remember lamb
does have an implicit return so net worth is a function that does this so
now I can actually say and let's continue this right and my net worth is
and here's how I have to call this function okay so this is an interesting part so I'm just going to show you
separately here first so if I want to call that function this one right here I gotta say person net worth and that'll
get me access to the function but anytime I have to call a function remember I got an open close parentheses after that and that will actually call
this guy right over here so I'm gonna just cut this because I know I'm gonna
need this and my net worth is and here we're going to go ahead and pop that in
and then we're going to run our introducer function so let's run this and there we go it says hi my name is
qazi I'm wearing a black shirt and the laptop I used to code is an apple and my net worth is 50. and then if you want to
make it look prettier put it you could put a dollar sign here you could say USD here or whatever your currency is of
currency of choice and then you could put you know a money bag emoji here
right and now when I run this boom I could also put all of this on a new line
so every single thing starts on a new line right boom boom new line new line and now it reads like this
it looks a little bit cleaner so it goes let's run this it goes right hi my name
is qazi I'm wearing a black shirt and the laptop is the code is an apple and my net worth is fifty dollars
okay that's just to make it look slightly pretty well there's a lot of stuff you could do with dictionaries including you could put functions in
there as values uh you could have you know you could have fruits in here so
you know or maybe I could say favorite fruits right and I can actually go ahead and
put all my favorite fruits so let's say I love I don't really love apples but that's fine I do like bananas so let's
actually put an orange here and so you can see that it could even hold an array right as long as you call a favorite
fruits so I'll go ahead and say my favorite favorite fruits are
and then I'm gonna go ahead and say person and then we're gonna put favorite fruits okay let's run this okay
invalid syntax so let's just fix whatever error we got
so it's saying we're having ah because we probably didn't put a comma here right comma here and then let's run this
and there we go hi my name is qazi I'm Moringa black shirt the laptop I use to
code is an apple my net worth is 50 USD my favorite fruits are the following
yeah there's many different ways to do this these are some of the ways that I
like to use my dictionaries you know you could you could hold so much information in here and like for example a phone
number would be a great thing to put in here so for example a what's your phone
right so whenever you think of a CRM think about your iPhone all right so you
have your iPhone right and now this iPhone that you have stores all kinds of
information so it's like you have a contact by the name of qazi and then
you'll have their phone number and then you'll have their you know maybe their address you know their their
first name their last name and uh yeah all of that information that's actually being stored on the back and it's
actually being stored as a dictionary all of that okay because hey here's a
here's the thing here's what's actually being stored in it and dictionaries are perfect for that because what you do
right is you don't necessarily no con no my phone number or most people's phone
numbers on your phone but if you actually just type in quasi it gives you that entire object okay that has all the
information like kazi's phone number kazi's address gives you all of that so
think of it like it's a key value pair so you search for qazi and boom you get
all the things you need so that's why it's very valuable and it's it's very helpful and you know you could think of
Google search like that too where you search a thing and then Google shows you
some results so this here is an example of a key value pair so I just typed in Marathon right I'm getting all of these
Keys essentially and so imagine the search term is a key okay so search term
is our key in this case and then all the results that we get back
think of that as the value so think of that as a big giant array that we get
back we have Marathon Staffing that's the key and then the value is this array
of like results so it's like it'll show us you know website one website to
website three website four Etc you get the idea right so those are
already stored inside of Google's database and it's literally like a key
value pair so now I've actually click Staffing Marathon Staffing and I'm going to get all these results
right here and it's telling me okay this is these are all the websites that I get so key
value pairs are pretty much everywhere and everything that you do you know and like you could
store a phone number and phone numbers are generally stored as a string so I could say one two three three four five
six right there we go so there we go right so put a comma here and now you
could get this person's phone number as well okay so this is a good introduction
to an object or a dictionary a few important things for you to know as in
the differences between let's say lists and Python and dictionaries is when
you're trying to get an item out of a list you use this index so you go hey get me the fruit from position zero
right here we go and we get this item so let's say I want
to get this item right here I'm going to go ahead and get this item with this index and the index here is zero right
so zero one two three Etc that's how that
those are the names of those right that's how I get access to them and there's actually something really nice
you could do with dictionaries it's called um dot value so I'll give you an example so I'll say print person dot
value so there's some like methods as well that dictionaries have they're really nice so if I do this I'll get
access to all of the values let me comment out that function that just
makes it look a little confusing so I'm going to comment out the function for a second and I will remove the net worth
call from here for just a second you don't need to follow along with that and here I have my values right these are
all my addict values which is I have uh you know cozy black apple boom boom so
these are all the values likewise I can also get all of the keys so this is another important method to remember
about dictionaries so all my keys are like name shirt laptop phone number assets that favorite fruits so I'm
looking at the values here and if I was just to look at the values so let's go ahead and
print it out and I'm just going to call list on it so it literally looks like a list like a pure good old list right
right there and if we looked at this well the value of cozy in a list would
be zero but in a dictionary or sorry not the value but like the index or the
location of this isn't like zero in this case it would be name and if I do name
I'll get access to it here in order to get access to this I will put in color instead of one so in a in a list you
would do zero and you would do one in an object in a dictionary you don't do that
you just put their keys so that's kind of the nicer part about it now some
other things that are that are not going to be crazy vital to you right now but some information that is useful for you
to know about dictionaries versus lists is lit lists are ordered okay so they
fall follow a specific order dictionaries are not ordered starting in
Python 3.8 plus anything that's 3.8 and moving forward dictionaries are ordered
and it is a built-in thing that comes into uh python most other language
languages objects are never ordered and uh the in dictionaries in Python used to
not be ordered but it is so cool I'm like actually nerding out over and I'm so excited there are definitely ordered
now so I can give you like a quick example so let's just make things and we'll say health points of this fighter
or whatever is you know 100 and maybe the name of this user is uh quasi so I
can Define oh let me put uh quotes around this all right I have I have things here okay now what I can do is I
could go things and I could actually just reverse it so I could I could call reversed on this
and let's go ahead and call list here and do this and when I call it you could
see that name and health are now reversed the order of insertion was held first and named second right and now
when it reverse this it just gives me this okay if I do list things it goes
Health common name so yeah I mean this is so cool the order is kept and why I
really like this is like when you get to the more advanced Parts later on and and you know when we're coding you're going
to get to these parts where you know if we have to sort data we'll usually have
to take it out of a dictionary put it into an array and then like do some jiggery pokery with it because arrays are the only things that keep order or
lists are the only things that keep order but like man this is so nice so it's going to make your life a lot smoother
yeah dictionaries are now honestly probably one of my most favorite things I want to use them even more so it's
like you get the benefits of a list plus a dictionary so I'm excited
um as you can tell so yeah huge update and uh thought you guys should know that yeah this is massive
and then one other thing before we go on to the next data types for you to learn inside of python lists and dictionaries
lists and dictionaries are mutable so these are mutable and mutable just means
changeable okay so you could change it you could change the values you could delete the values you could update the
value so that's another thing that I I think is going to be actually important to show you is in a dictionary how to
update the value of a certain key value pair because I've shown you how to get a
key value right how to get the shirt or how to get certain things but I'm now
going to show you I'm just going to put the net worth back here real quick boom there you go let's just run it let's
make sure our net worth is coming out fine oh yeah and let's comment this yep
and then let's uncomment this sound for now so I showed you right but now I have to show you how to assign an update
values so let's say that we Define qazi's shirt as black here but maybe
today is a new day and cause he decided to change his shirt thank God no more
smelly cozy we're gonna go ahead and say shirt and I'm gonna go ahead and change
the shirt color to Blue okay if I actually do that okay or maybe let's
make it orange so there's every letter is different not because blue is B and L and it could look similar so let's go
ahead and send my shirt color I change it to Orange so let's run this and now you could see here that it says kanji's
wearing an orange shirt even though we started it off as a black shirt so using that you could update a user's you know
their laptop you can update their phone number you could update their assets you could update their favorite fruits
Etc so now I want you to go ahead and give this a try try changing let's say
the assets to a thousand dollars a thousand essentially okay so give that a
try right underneath here it'll be very similar to this but the key you'll have is assets and then you'll choose a value
of one thousand so I'll give you five seconds here five four three two one
let's do it together and I'm gonna grab assets and I will change assets to one
thousand okay let's run this and you can see my net worth is now nine hundred and
fifty dollars right because a thousand dollars minus fifty dollars should get you nine hundred and fifty dollars
so in terms of dictionaries I think this is good now let's move on to other data types all right so now let's go ahead
comment out introducer so when you run your code you should see nothing
essentially okay and let's go down here and we'll talk about tuples okay that's
another data type inside of python and they're just like anything you put in
these parents okay so for example a tuple just looks like parents I'll I'll
put it right next to it so you could see for example if I had numbers and I said
one comma two okay now this is a tuple I can print it out print numbers okay so
let's run this and boom and now I can also print out their data type so I could say print type numbers okay just
like that now I could see that it's it's type Tuple class is Tuple now one thing
I can't do is tuples are immutable meaning you cannot change change their
data at all so I can still get access so I could go numbers of zero and they'll
still get me that should get me one so there we go so I got the first item from that Tuple right so I can I can index it
but I can't actually go I can't go numbers of zero to ten like this is
something you could actually do in a list we are not going to be able to change it so let's try running this and we get an error and the error basically
says Tuple object does not support item assignment all that means is you can't
update items inside of tuples okay now tuples are used in Python quite often
and they usually represent things that you can't change and so you'll oftentimes see these array of tuples of
maybe like key value Pairs and that just represents hey these are two things that you can't and should not change anyway
so this is helpful when you're dealing with data that needs to be secure and data that throughout your app when
you're building you shouldn't really change honestly as far as tuples are concerned that's all kind of you what
you really need to know there are some other stuff we could do with it later but let's not go too much more into
detail on tuples let's move on to the next data set that is one of my favorites and it exists in Python let's
go all right now let's move on to one of my favorite data types sets they are
awesome so I'm going to put that right over here
and these are very very powerful I mean you learned sets you're gonna be a
pretty awesome human being okay so let's go ahead and comment out all of this
stuff don't need uh need it anymore so I'm gonna make a comment I'm gonna learn
about sets okay what's nice about this is what if I told you hey
there are two um they're two you know let's say
databases okay database one and it has certain users emails
okay or certain numbers so I'll just say one two three four
and then there's this other one let's actually make it a little bit more fun this is too dry so let's say
uh there's a database of programming languages okay or we have some data of programming languages
we'll call this one and we'll say this is two
okay and then we're gonna go ahead and say
that instead of these numbers over here right we have programming languages so
we have Ruby and python and JavaScript
so maybe this is like right and then here we have Ruby
and let's say somebody really likes
um SQL and then there's a Java and then JavaScript okay now let me ask you this
what if I wanted to create a variable called programming languages
unique okay or just programming languages right and that should only be
uh the unique languages okay so unique languages
how can I pull the unique languages out of it can you do that can you I mean you could give it a try but it's going to be
really difficult for you to be able to do this because right now you don't really have the tools for this
right so how could you do this how could you merge these two arrays so
that all the duplicates are removed so they're no duplicates right AKA no duplicates
normally yeah that's a process it's not that easy and then you gotta write some piece of code that can do it but I will
introduce you to something called sets Okay and sets are awesome because they
are Made for This their notation is Curly braces okay kind of like a dictionary
and they are used for
unique elements getting unique elements we're getting
unique stuff okay if that looks you know stuff is less intimidating than uh
elements so I could actually throw all of these into a set
and it will know what to do with it okay now first thing we're going to do is I'm going to show you how to concatenate two arrays okay just so you
can see kind of how that works so let's call this list one and let's call
this list two okay so there's certain things uh special keywords so special keywords hmm and they are
special keywords are like you know lists is a special keyword length
Max Min these are like built-in functions and methods that Java that
python gives you that um that have special meaning so when you're creating variable names try
not to like call it list because I'll overwrite this list that python comes
with okay and uh set is another one is another one so there's like a
bunch of special ones and so try not to use them most of the times okay so that's why I'm just going to say list one list two and then we're going to say
list one plus list two and if you actually do this python is so
awesome they'll actually take both of these and they'll concatenate them together
okay let's add them together and let's go ahead and print programming
languages and I'll hit enter and you could see
that I have a concatenated list with you
know Ruby python JavaScript Ruby SQL Java JavaScript right but this
is still not uniques so now I'll show you how set works okay
so set works like this um you you take let's just let's just
call set and it's like most raw form right so and I said two comma
let's just say this and we'll um we'll do we'll just print it out
so if I print this out and I'll comment this out for now if I print this out you'll notice that I get one comma two
right but if I actually do one comma two comma two and I call this
notice that I don't get the other two right and so like the duplicates are not
there at all another thing you should know or is that sets are not subscriptable which means
that I can't get the zeroth element of a set okay if I do that it will give me an
error it says set object is not subscriptable okay so you can't like index or find
things because it doesn't store them with an index or a key value pair
okay so there's no get the index of zero get the index of one it's either in the set
or it's not in the set okay so we could do things like that so for example let's say I have uh I'll just call this things
okay and I'll make this a little bit bigger and zoom in here so you can see better
so let's I have things right and I have one comma two comma two if I do things
it'll only show me one comma two now I'll say two in things it'll give me back true yes it is so in Python you
have these special things called in which is a special keyword and it allows you to ask a question is the thing
you're looking for inside of what you're where you're looking so it's two in things yes it is but it's three in
things well no it's not so I get back false this is very helpful to know if
something exists or not and sets are the best data structure one of the best data structures to look through
um really really quickly okay so
um so it just will not hold any of those values right now let's go back to sets
and let's look at what happens if I do the following so let's look here and I'm
going to go ahead and say I have a set but I'm going to call it on an error I'm going to call it on an array
okay so let's give this a try now you'll see this does not work and it actually
gives an error so in this situation it'll be helpful to actually call or Constructor and our function set so
let's go ahead and do set and do it like this okay and boom it has
turned that array into a set okay now let's go ahead and give it an
array with duplicate items like this and call this function and you'll notice that it's giving me one comma two back
which means that it automatically removed all of the duplicates so remember how would list one plus list
two we're already getting back our list of programming languages right
like if I run this and I copy this first line all right so just make sure you copy that entire list right and then I'm
going to say uh things let's just call it things and I'm going to paste it okay so now if I
do things I should see this array with or this list with duplicate iTunes right
all these duplicate items JavaScript JavaScript Ruby Ruby but
what what can I do to make them all unique you know this you know all the
pieces of the puzzle already okay so give it a try see if you could try this okay I'll give you five seconds here to
give this a try on your own five four three two one and here we go I'm going to call my
function set on this right and then I'm just going to pass it things and let's
see what happens boom look at that how freaking beautiful right so that's all I
need to do there I already know I'm concatenating that's what I need to do right over here right because I already
or sorry this line right there because I already know I'm concatenating these two because once you concatenate these two
you get that big array right there and on that array we just call this function
set right here so we're going to do that we'll just take this we'll wrap this entire thing in and we'll call the set
function on it and once you do that you get back this beautiful right over here
set that has unique values so let's go ahead and call set on this okay and I'm
going to run it okay and uh let's comment this out and run this boom look
at that so nice right python SQL Java JavaScript
Ruby I'm getting back all of the programming languages uh that I wanted right all of this okay
so but all the unique stuff right because we don't want to duplicate so imagine
you were Google and you wanted to have unique search queries so think about it
like this let's go to google.com and I'm just going to type in how to now how
many people do you think have asked this question how to restart iPhone how to lose weight fast don't you think it's
probably millions of people that have typed this search in how to lose weight fast or at least thousands well how come
I am only seeing this one time does that mean only one person ever has searched
that you already know the answer is not true for that right the answer is millions or thousands of people have
searched for it so if that's the case why am I only seeing it once Google is doing something very similar to a set
and it's going it's taking all of the users queries right it's making this
giant list of every single query ever right and then there's probably duplicates that exist here so lose
weight fast okay another person typing in lose weight fast and that gets stored
in that array another person types and lose weight fast that gets stored in the array however Google then goes and goes
I'm gonna call me a set on this bad boy right and then once it does that well
then you just get one query that says lose wait
fast that's it okay instead of all these other like million queries
right so if we if if Google finds duplicates it it reduces them and it
probably uses something like set okay they probably use something different but you get the idea okay I'm just trying to make this easy for you to
understand all right don't shoot me if I'm not completely 100 000 accurate on some of these things
some of it is for entertainment okay would you rather be bored you'd rather be entertained but kind of like it okay
kind of like this it works so there you go you're understanding Google Now you can pretty much ready to create Google so you can see why I like sets so much
any time you um and let me emphasize the T when I say that set
okay it sounds like something else if I don't say the T in there so I like sets
a lot and their ability to give you unique data is
unparalleled it's beautiful you can't do that that will list that easily you can't do that with anything else that
easily so I like them so anytime you want have to you don't care about an or uh you don't care they are ordered but
anytime you don't care about you know getting specific indices from here and you just want to check
boom just pop it into a set right and uh if you just want a list of unique items and now I can actually even see this so
I don't have things defined here that's fine so I could actually even do you know on sets I can ask hey
um is SQL in programming languages and what do you think is going to say do you think it's gonna say true or false I'll
give you three seconds for that three two one let's see what you said I hope you said true because yes it is inside
uh but what about the programming language go is that inside so what do
you think I'm gonna get back for that true you can just be true or false three two one I'm gonna get a false in this
case because go is not inside of programming languages but SQL is right
so this is going to be true and this is going to be false okay with the capital
F right there so there you go there you have sets there are really cool okay and
I hope you enjoyed them and with that said let's keep on rocking and rolling now let's just go ahead and do one
little exercise with sets before we move on to newer things I'm gonna go ahead and I will comment out all of this and
we will create a new function and uh okay and so this way you can keep practicing functions as well okay so I'm
going to create a function and it's job let me actually write its documentation first and then you see if you could try
to do this okay so I want to be able to call this function like this I want to
call this function unique and unique should take in an array and so if I give it an array like this
okay or let's say I give it an array like this Ruby Ruby excuse that sound
that is my focus app telling me hey you're done but I'm not done I gotta keep going Ruby Ruby and python
okay so when I call Unique on this I should get back what I should get back
is Ruby and python okay and you know
what let's return it as a list okay so I'll just show you like if I have a set here and it's like one comma
two one two I can call list on this and lists will convert it back into a list
okay so let's just say we we want to call Unique on a list and get the unique elements back
um and yeah so that's how it should work okay and the function should be called unique so
um you know create a function unique that takes in a list
okay and returns only unique items
okay so that's that's what it does in English and then this is how you would write it
this is how you would write it and call it and this is what it would return okay so I hope that this is giving you enough
to write your own function so I would say take five seconds to pause this video and then go ahead and try this on
your own so five four three two one all right let's do this together if you
haven't done it yourself yet so the first thing I'm going to say is I'm going to define a function okay and
this is going to be called unique and then unique will take in you know
let's say we'll just say languages and what we'll do
is we'll return by just calling set on those languages
okay and let's just give this a try right now so I'm going to go ahead and print and I'm going to say unique
and then we'll give unique our languages so let's actually call it just like this
I'll copy this exact line and I will paste it
okay so we're calling unique with Ruby Ruby python
and then let's see what it says so let's run it and it does say that we're getting back
Ruby and python so it does make it unique right that's perfect however it's giving me back a set and not a list you
see those curly braces at the end there that represents that it's a set okay and
if it makes sense it doesn't have key value pairs if it had key value pairs that would be a dictionary but this is a set
now I want to call list on that okay so this returns this here this part that
I'm highlighting that returns this guy
and then if you wrap this guy and you call set on this
or sorry list on this like that then that will actually convert this
into a list uh into a list okay with with the items in there
okay hopefully that makes sense so that's why I wrapped it with the list let's run this and you can see I get
Ruby comma python there we go now what if we wanted to take it even further
what if we wanted to use Lambda and uh convert it into or actually on honestly
for this you don't even you could use Lambda or you could just make it a one-liner like this okay but if I wanted
to use Lambda how could I do it with Lambda well see if you could convert this function into a Lambda function
okay so unique into Lambda give that a try I'll give you five seconds five four three two one all right let's do it
together so I'm gonna do some callbacks and then that way we're practicing the other stuff we learned too right we're not just forgetting about it
so I'm gonna say unique is equal to and we'll say Lambda okay
and it takes in languages so we'll just say it takes in a list
okay or languages and uh let's set languages just like that I there's an
implicit return in here okay so now I'll comment this out and we'll run this and
you can see I'm still getting back the correct result even though I commented this line completely out
it's working okay so there's both ways of writing it for this function honestly I'd probably prefer to write it like
this because there's no real reason to use Lambda here okay um it's kind of just slightly
you know over a kill in this case but uh yeah so you can use that right
there and you should be good and you could just call Unique anywhere you want and you'll be good okay so I'm gonna go ahead and comment this out and we'll
move forward all right now let's talk about one of the most fun things with
programming and this is also without this programming really wouldn't be programming okay so I had to do my due
diligence and show you all the data types that exist in Python because that's pretty important but this is my
most favorite thing let's talk about it and we got Loops okay Loop D doopy dupes
bam all right these are loop-dee-doops that there are very very helpful in
programming okay so I'm gonna talk about them now now if you have an array
like the fruits one that we created long time ago long time ago
copy and comment it out because I don't need it up there and I'll put it here okay and I don't
need all these other different data types because that's just hella confusing now what if I asked you hey can you
print out each of these and just show me them there one by one
okay so for example what does that mean so it's like hey print out fruits of zero I want you
to print out all of them okay so that should be on its own line then get me
the second one okay and then give me so yeah go ahead do
this and do it manually so make this array make this list put whatever you
want and it doesn't need to be fruits as long as the string it should be fine and then just like print every single one of
them out okay so right now we're not using a loop this is the old school way of doing it manual way of doing it and
look at how much fun you have to hear three go here four go here one
two three four five I actually don't need more than that one two three four five there we go let's run this and you
can see all of the items are being printed right
what if I told you hey also make sure that they have like a uh you know it says
fruit and then it like shows it so for example it says fruit
like this all right and then it shows uh it shows
that okay I don't need a space here I can just run this so what if I said like make sure that every single one of them says fruit
before it well go ahead do this manually right now okay go ahead and do this manually right now so put that here put
that here put that here put that here okay now let's run it and now you got it's saying fruit for
every single one of them okay now what if I also told you print its position out as well and let's do that manually
so we're going to go ahead and say if uh you know what's that thing's index so I'm going to say 0 here
when I say one here I'm going to say 2 here I'm going to say 3 here and four
here right and then when we run this we can see fruit we could see all the fruits and then we could see
their index okay so you could see that this is this was a tedious process
not too fun and if this list keeps getting bigger and bigger oh man can you
imagine the amount of manual work we're gonna have to do is gone I'll be insane
okay it's gonna be off to charts it's gonna be off the GBS so if we don't want
to do all that manual work there is a solution thank you Lord and the solution is
writing Loops so I'll show you how to write a for loop I can say four
fruit in Fritz print fruit and I'm gonna go ahead grab all of
these lines and comment them out and run this and you can see I just got back all my
fruits so that was so much easier and all by saying for fruit in fruits that's it
just this here okay so what does this mean for fruit and fruits
well what's actually happening is this fruit right here this is one arbitrary item and this is
the actual list okay so this refers to this list over here
and this is an arbitrary variable we could call it whatever we want I could call this X and print X and if I run
this this will still work okay as long as these guys match up right that's
what's important and so I'm basically saying hey grab this fruits array
and then for each item in there give each item a name so we'll just give this item a name fruit and the first time
it's looping through so how a for Loop works is it goes through
give it a variable name of fruit okay so it goes through and the first time I'll pick the apple and then it'll
go ahead and then it'll go ahead and then it'll go ahead and print that fruit
out so we'll go ahead and go okay uh it's apple and then it'll pop Apple up
onto the screen then it's going to go a second time and what's going to happen
is this will become fruit right over here okay I'm going to make this a little bit
bigger so it's easier for you to see this will become fruit and then it will go here
and it will print it out okay then what's going to happen the next time is
it's going to Loop through and the orange will become the new fruit right and
let's get rid of this guy right here okay and then it will go ahead and make
orange the new fruit and then orange will get printed out to the screen then it will go ahead the next time it'll
Loop through it'll make banana the new fruit
okay and this will become the fruit and it will print out banana and then last
but not least it's gonna go ahead and do that one more time it's going to make this the variable fruit and then it's
going to go ahead and print that out okay and after it does this
is going to go ahead and just stop the loop because it's
going to realize I cannot go any further so it's time for me to end the loop and
then I will end it okay and then this guy over here is done so on and the code level what's
happening is these two lines will just keep running it'll it'll go down here it'll be like run this then come back up
then it'll come back here and run this then it'll come back up again and it'll come down here and run this again then
it'll come back up then it'll come back down here and run this again until there are no more items left and
the the loop is completely done okay so that is how looping works and anytime
you start to see code like this it just means somebody doesn't know how to write a for Loop because a lot of repetitive
stuff you could automate it and make your life really easy now what if I did
ask you the same thing and make sure it says the word fruit before each of these fruits well you
could just do that in one line right now you could just go ahead and say see if you can even try it yourself
you could go ahead and just say fruit and just like this
okay and run it and boom look at that it just put fruit with every single one
because that's what you asked it to do right so if we went through this
iteration again you know and kind of like what the process happened but the first time this
was the variable fruit right and
it it said hey this is fruit and so imagine you have that Apple here
right so imagine you have that Apple here and it says print the word fruit and then the actual Apple emoji and show
it on on the screen and then it says go ahead and do that then it says go ahead
and do that again then it says go ahead do that again and it says go ahead and do that again do that again and then
you're done okay so it goes ahead and just like keeps looping through that okay so all
of those lines we got it into one now what if I actually also wanted to say the index
so I wanted to say that this is the zeroth index and this is on the first index and so on and so forth just like
how we did earlier how could we do that so check this out there's something really cool that we could do in Python
so I'm going to copy this list here and I'm going to put this here so you could
you could see this uh better and we could interact with this better so let's go ahead and uh zoom in here right there
okay so now check this out I could call fruits obviously right you
already know that but I could actually call this function enumerate and I can call this function on fruits and watch
what it does let's actually wrap it inside of lists so you can actually see
it and watch what it does it actually gives you
a list of tuples remember we talked about tuples and lists of tuples it
gives you a list of tuples and it says that and the list of tuples basically
says the first item this is item number one so remember in list you could also have different types of datas right you
could have Tuple as a data type inside of a list as well so this is my first item and the first item says hey uh
position of zero and it's an apple okay so I have a tuple zero comma Apple
uh string Apple okay and the second Tuple says position is one so one comma
pair two comma orange three comma banana four comma so all we're doing here is we're
just getting the position of all of these okay and we're putting them in pairs the
position of all of these right and we're putting them in like these pairs and Tuple is a perfect data structure to use
here because you don't want a user to go here and be able to update the position of the um of the Apple because apple is
always going to remain in zero okay and the pair is going to remind in one so you want it to be not updatable so this
is a list of tuples and usually for storing pairs of information like it's really good so
enumerate gives me this so with the numerate I have access to when now I can
Loop through and I have access to my emojis apple and my my fruits but I also have
access to their positions okay so watch this I can go over here
and call this enumerate function and I know that'll give it'll be giving me
this type of uh you know pair pairs so it's like zero comma the fruit one comma
fruit so since I know uh let's actually just run this and let's see what we get so if I run this you could see I'm
getting back fruit and I'm getting back the position and the actual fruit name right
the actual fruit itself so zero comma Apple One comma pair two comma orange Etc now since I know this is a tuple so
let's go ahead and create a tuple just so you could see visualize this as well and I'll say apple since I know it's a
tuple I can index a tuple right if I do thing of zero I'll get back the zero
that zero and if I do thing of one I'll get back the Apple so if I want to get
the Apple here I just do think fruit of one right so if I run this you could see
I'm getting all the fruits okay so in other words this right here just means
fruits okay now if I go okay so uh my bad so
let's just write that that right there is fruits okay and now next one I'll say fruit of
zebra okay and run this and now you can see I'm getting back all my indexes
right my indices so this right over here right is the index
this over here is the fruit itself so this is a fruit and this is the index now wouldn't it be a lot cleaner If
instead of writing fruit of one and fruit of zero we could just write the actual word
you know fruit here and then we could actually write just index here like that would look so much
cleaner you know so it's like it's easy to read that code well
there is a way we could do that so there's something called unpacking okay
so I'll give you an example so let's say I have a zero here so let's let's go again
and say I have a 0 here and I have a apple here
okay now if I set this to one variable then when
I obviously call that one variable like thing it'll just refer to that Tuple so for example if I do thing it'll refer to
that Tuple however if I do two variables here so since that
a thing I actually say index and then I say fruit now if I print index it'll
give me zero and if I print fruit it'll give me this Apple so this is uh this is
called the Tuple unpacking okay so it's a little bit of more advanced concept but hey you should just learn it right
Tuple unpacking okay and then there's like all other you can unpack an array like that
list like this too you can unpack other stuff but all that means it's complicated but sounds complicated but
we're just saying hey we just like to store these in separate variables like index and fruit So then whenever you refer to index and fruit it'll be this
and then that Tuple just evaporated in this case is just gone like the actual parentheses and the Tuple object right
it's gone so I could do that here since I know that I'm going to be getting back this
structure right here I could just rename it because this is what I'm going to be getting here let me
just rename it I can say hey get me
index comma fruit okay and now if I for example print out
the index you could see I just get back the indices and if I print fruit you can see
I get back the fruits okay so I'm just going to go ahead and
say a fruit comma index all right there we
go so this solution right over here you can see is much much much cleaner right
and it um it gets us what we want but it's just overall a much cleaner way of looping through this and getting
everything that we want so you won't all of us have to use enumerate but if in any situation you need access to your
index index enumerate is going to be the way to go but the more most common way
you're going to write the loop is just going to be for fruit and fruits print fruit this is going to be the most
common way you're going to be doing things with it okay and you're not always just going to be printing you're obviously going to be doing stuff with
it right you're going to be uh returning thing you're going to be uh not returning it's not a function but if you
had a function you'd return it you can keep adding items to that array
with the for Loop so there's a lot that you could do with it but this is a very basic example of you know a loop now
let's say I wanted to add 10 more apples to this fruits array how could I do that
well what's the default way we would do that it would do fruits dot append so
let's do it let's go ahead and try this in the console right now so the normal way to do it would be let's say I have
I'm going to copy my fruits list over and paste it and I will say fruits dot
append and let's say I add another apple and let's print out fruits again and you could see that another Apple was added
well what if I want to add another Apple well then I just do that line again I'm pressing up up on my keyboard to get
back my most recently input commands so if you press up on your keyboard I'll hit enter
and then I'll get fruits right we'll go fruits append print it out
and you could see that with that technique I have successfully added a
lot of apples so to order to add 10 apples I would have to keep appending many many
many many many times I'll need to append it 10 times obviously right let's go ahead and do that manually now right so
how am I going to do that I'm going to say fruits.apent and I'm going to say apple
right and then I have to do this 10 times so let's go ahead and do it one more time I think that's 10 so let's go
one two three four five six seven eight nine ten okay that's one extra now I can
go ahead and do print fruits okay I can go ahead and print fruits and when I run this you can see that I have
10 apples added here to this list so that was a
kind of an annoying way to add this many um apples to this list so how could we
add them using a loop well there's a really cool way we could do this I'm
going to show you something called range so range if I do range of 50
okay and let's do range of 10. and if you just run it you won't really see anything it'll just arrange like that
but if I convert it to a list you can see that it just created a list on the
Fly for me that goes from 0 through 10 okay but not including 10 just up to 10.
so that's what range does so this is a really nice way so for example if you had a list
so I let's say I said for I in right and I said print I this Loop will
run how many times let me ask you that question how many times will this Loop run Loops will always run the same amount of
times as there are items in the array that you're running it on or the list that you're running it on okay or
whatever you're running it on so in this case there are one two three four five items so this Loop will run five times
if there were six items it would run six times if there were seven items it would run seven times you get the idea right
and um and I will just be the number in this case so I will be one the first
time I will be two the second time I will be three you could also just call this number so it's not like stupid
looking variable so if I run that it should print out one two three four five
and I'll comment out a bunch of the other stuff so it's like less confusing let's run this
so I see one two three four five here okay now what if I want now another way
to say this here all this is doing is saying hey run this
thing five times that's what this is saying okay run this piece of code five times so the nicer way to do this is I
can just say Range Five so this will also run five times okay
you can see that one two three four five right ran five times
now what I want to do and I don't even really need access to
this variable so I could just call it a underscore and I can just say haha now
print out haha five times because I I'm just skipping underscores basically I'm
just saying uh hey I'm not really using that variable so I'm just I'm not even
gonna really store it in something I'm just going to store an underscore most programmers know that if you see
underscore you're not gonna like you're not gonna like print underscore you're not gonna call it you usually just
ignore it and so because I don't really need access to the elements that are inside of this list
so I can I'm just printing haha five times so this let me this piece of code right here is saying do this five times
that's all this is saying okay this being whatever I'm writing
here it's going to repeat that five times Well if you have this piece of knowledge how could you add 10 pieces of
fruits here okay add 10
uh apples to the fruits list how could I
do that how could I add it to the fruits list see if you could do this yourself and you should be able to do this yourself
because you have all the pieces here to do it okay you need this line you'll need some of these lines right so try to
add it yourself I'll give you about five seconds five four three two one hopefully you took that time to pause
the video and try it yourself pause it now if you need it and uh we'll do this together now
so I'm gonna go ahead now I'm gonna say four don't need access to this and range
10 fruits dot append Apple and I'm gonna get rid of all of these
here and if you wanna see it in action you could even print out the fruits array 10
times so you could see it so let's run this and you could see the array let me let me comment the hahasa and you could
see the array getting bigger and bigger each time because it's adding an apple to it right adding an apple to it right
here right here right another apple right here another apple right here another
apple right here another one right there another one right there there and then you get this okay
so if I now remove this print from the loop because I don't want to print it every single time I just want to print
it once the loop is done so I'm going to put it outside of the loop and I'm just going to say print fruits and let's run
this now and you can see it added
you know 10 apples at the end here
okay so that's how for loops work okay that's that's how they work hopefully
that was a good intro for you into for Loops there's a there's gonna be a lot more let's comment out everything there's gonna be a lot more that we're
gonna talk about when it comes to for Loops because they're pretty much going to be used everywhere okay so there's a
lot to cover with them there's gonna be a ton of exercises we're gonna do with lists and Loops Etc we're going to do
them soon enough uh first I want to introduce you to another type of loop as well which you won't really use that
much but it's good to be aware of it so when you see it you know what it does and there will be times you might
actually need it okay so with that said let's go ahead and learn while loops
all right now let's talk about my friends while loops
there we go all right while Loops are fun but they can be very crazy and they
can be very dangerous meaning you can very easily write an infinite Loop
um and so yeah you don't want to do that okay so watch out for this I'm going to
say that as the first thing because you are going to write a loop that'll never end what I like about for Loops is they
automatically end and you don't have to have an end condition that's nice this
not so nice all right so I'll show you an example of a while
loop okay so let's just go ahead and say here we have uh Kazi and let's say we
have Kazi and he's currently sitting okay that's what cause he's doing he's
chilling and he's sitting all right now I'll say while qazi is not so that's
another cool thing so it's like um so that's how we would kind of say it in
English right Kazi is not so we'll say uh is qazi standing and we'll do a check
and it should say true and we'll says qazi sitting
okay um and sorry I'm I did not mean to just have meant to put two equal signs but
that's fine let's just say cause these settings let's say Kazi is sitting let's just redefine it and I'll say I'll check
is Causey sitting it should give me a true and I'll say is qazi uh standing
and it should give me a false because we have defined cause you to be sitting so now I can write a while loop very easily
I could say while cozy okay is not so there's also not okay
this is a very important operator okay so for example I can say quasi is
standing that'll give me false right but if I say cos is not standing that should
give me a true just like that okay so I'll say while quasi
is not standing
we will say and when you hit enter and it shows the three dots like that I'm in the console right now by the way okay so
just writing the console I'll give one space here okay or we give two spaces that's fine
as long as you indent some amount and I'll say print get your fat butt up
okay let's there now I'm not going to hit enter yet but
this is a while loop and it'll automatically start running so it's like while kazi's not standing print get your
fat butt up and you'll notice that right now cause he's not standing right and so there's never a condition where qazi
will be standing that means this Loop will keep running
for ever AKA infinite Loop and now I'll hit enter and I'll hit enter again and
watch this it just keeps on keeping on right it just keeps on running over and
over and over and over and over again I mean this has ran thousands of times to stop this hold control and then press C
on Windows probably hold something and press C control probably or option uh
not you guys don't have option uh something alt okay just look it up and
that should kill your command line so if we were to write that in our program our program we just keep looping just like
this infinitely and that's not what we want we don't want to create an infinite Loop okay
let me just see the status of qazi and it says cause he's sitting so what I'll do instead is I'll say
maybe after 10 times it's printed out we can say causes then standing after 10
times okay so in order to do that okay I'll need to teach you how to create a
breaking break condition to end a while loop okay so let's set a counter
and we will say the counter is zero okay and then when that counter Hits 10
we will break out of our Loop so let's try this I'll say while counter is less than 10. and we'll say
put a space here and we'll say print counter okay and then what we're gonna
do in the second line here before hitting enter one more time is we're going to go ahead and we're gonna
increment counter so I'm going to say counter is equal to whatever counter previously was plus one so I have
defined counter here as zero so this is incrementing it by one so
we're taking this definition of counter at zero and then I'm redefining counter
here to be whatever it previously was plus one so if you follow the logic of
this Loop what's happening is the first time I Loop through this it says while counter is less than 10. so I go while
zero is less than 10 that statement evaluates to True since that evaluates
to true because it needs a conditional one set of values to true it runs the
entire while loop block so it prints out zero so then it spits out boom you get
zero here and then it redefines counter to be whatever it previously was plus
one which means the new definition of counter is gonna be one okay then the loop runs
the second time and it goes while one is less than ten okay so the second
time it runs it goes one is less than 10. okay that's what it checks so let me actually write this
together so while one is less than 10 this evaluates to a true
okay and then it runs again what the heck happened there
okay this evaluates to a true all right and then it prints out one and
then it sets the counter to whatever it previously was in this case it was
previously one uh and then one plus one is going to be 2. okay now counter is
set to two okay and then this so the second time we Loop through this is two the third time
we Loop through it's three the fourth time fifth times six times seven times eight times ninth time and then when we
go the tenth time through the loop what actually happens
is this statement over here is not true anymore
it goes while 10 is less than 10. let me ask you a question is 10 less than 10
no 10 is not less than 10. so that statement becomes false and when stat
becomes false everything underneath it does not run so it does not run the
block of code and it finally comes to a stop so let's try this and I'll hit enter
and you could see it ran from zero through nine and then boom went through nine right
so that's how a while loop works now I'm gonna
zoom out of here okay and then we're gonna go ahead and write this down into our
uh into here okay so now I'm going to say cozy let's set him to sitting
okay and um while cozy
is not standing we will tell we'll keep telling him
get your fat butt up
and then another loop another loop we wrote was this counter one and then we said while counter
is less than 10 so this will run 10 times but not because of that but
because we're in an increment counter counter equals counter plus one now another way to write it which is very
common is we'll see counter plus equals one okay that's the same way of writing that
statement and then here's another writing that same statement we can say counter plus plus
they're both the same statement and I can prove to you in the command line over here
let's say we have count we set it to zero if I do count plus plus count plus
plus oh actually never mind I take that back python does not have that so let's try count equals zero and let's go count
plus equals one and now let's go count boom we get back one okay so ignore that
I said that that was wrong okay and count because in JavaScript which I've been using a lot of lately
right that has plus plus and other languages like Java itself has it and
I'm sure C plus plus and other languages probably have it too so count plus equals one will increment it by one and
so will count equals count plus one and now I'm gonna go count it's two now
okay let's go count plus equals one let's print count we get back three and
you get the idea so that's how you can increment it so we're going to go ahead and increment it like this
counter Plus equal one okay and then print counter
and uh I'm gonna comment this line out so it doesn't put me in in an infinite
Loop I'll comment all of that out and let's run this okay and you could see I get
zero one two three four five six seven eight nine okay I get all the way up to nine
so that's how while while loops work and that's how you have to end them so make
sure you always have a statement that allows you to break them majority of the times though you won't really need to
use while loops and I tend to avoid them as much as I can because it makes code look not as clean uh not pretty there
are some times you need to use them like if we're creating a game and that game just needs to be running infinitely long
meaning the user should be able to play it the entire time yeah that you'll probably have to put in a while loop so
there's certain situations where a while loop does make sense but most situations
like this one I would just do with a for Loop it'd be much easier to do this with the for Loop okay but this pattern here
will be important like setting a variable outside of the loop and then incrementing it through the loop
uh that pattern is important so don't forget that and don't make this mistake of putting the counter inside of the
loop because you keep setting it to zero over and over and over again so just max
it'll increment to two is one because you'll increment it to one then you'll come down and you'll set it back to zero
then it'll do zero plus one and you'll get one go against zero one so you wanna
put the initial one outside of the loop outside the scope of the loop and then
you just keep incrementing that one you want to repeat the amount of times you're incrementing it by one you don't
want to repeat the amount of times you're setting it to zero you only want to set it to zero once okay that's basically what I'm trying to say
all right so there you go those are that's an intro to while loops with that said I'm gonna go ahead and comment this
out and we'll move on to doing some interesting fun exercises
so let's go ahead and do that now all right let's do some practice
exercises with everything that we've learned so let's just start with lists
okay so what if I have numbers okay and I want to double these numbers
so basically what if I want you to write something that when I call it let's say I call it
double and I give it this array here okay it returns Back to Me 2 4 6.
eight and ten okay so if I call that it should double
everything up and spit that back out to me how could I do that how could I create
something that does that well let's go ahead and let's create uh a function and we'll call it double
okay and let's say it takes in some argument numbers okay I'll remove this numbers
here for now because you should immediately know that this is a function right and this is a function call and
it's taking in an array okay or a list rather so I could give it a list type so let's
actually see is it list or is it list yeah it lists with a lower case is going to be fine so I could do add type
hinting in here as well and I could say that it returns a list okay so double is the numbers takes in a
list Returns the list you don't need to add in the type hinting but let's just practice
everything that we've learned so far okay it's not going to really change the code in any way if you remove this
it's it's not right the code is going to remain the same but I like to just leave this here for now
okay and now in order to double this list of numbers that we're getting well how can we do that so what I want
you to do is try see if you could give this a try and do this yourself you have
most of the puzzle pieces to be able to do this yourself it would be a little challenging to do it said we had
difficulty of six or seven right now because there'll be a lot that you'd have to figure out okay
but take about five seconds right now to pause the video five four three two one all right great let's do this together
so the first thing I'm gonna do is I'm gonna create a um an empty array here that's gonna
that's gonna store all of my values okay and now the pattern I'm going to use is
I'm going to keep appending to this list okay so I'm going to make this list here and I'm going to keep appending to this
list right here so let's write our Loop and I will say for numbers
for number and numbers for now let's just say print number
okay if I run my code nothing should come out right nothing should work here hope make sure everything that you've
written so far is commented out and now I'll call this function double
and we'll give it an array so I'll say one two three and we'll give it a list one two three
and you could see it's printing them out so I'm calling the function and the function is working as expected great
okay this function I'm happy that this function is working as I want it to work
now what I want to do is I wanna append it to this array so let's try
that so I'm going to say result dot append and I'll just keep adding those numbers so let's go ahead and do
print result and the result remember I'm printing it
outside of the loop if I put it inside of the loop it'll print it out every single time right it's a pending so one
the first time okay so if I do this and I run this the first time you'll see was one then it
was one comma two then one two three okay if I put it in the most accurate place I would be right here and you
could see it starts off as empty then it goes to one and it goes to one comma two
right and then we will print the final one so let's run this
you can see it starts off empty then prints out then appends one to that array then it appends a two to data rate
then it depends a three to that list right so again I'm going to be using arrays interchangeably right because
I've used a lot of JavaScript so lists whenever I say array just think list okay so I have this result list and I
just keep appending to that list again and again well if I want to double the numbers at this point it's very simple I
just append double that number okay and so let's do this you should see
this so like first iteration I go through is empty then the first iteration I go
through I append this okay I appended two then the next iteration I go through I append A4 and
then I append a six and every single time it just keeps doubling
okay now what I want to do at the end is I don't need it to say print
and here I just needed to say return so I can say return
result okay return result and now if I run this you'll see nothing so we will have to do
print and now we will see the final result it's two four six okay so now it's
working so this is how you can uh double
a list okay if I've given you a list you can double it this is a very common pattern so remember this pattern and
like practice it and write this code and write it again from scratch but this is how it works you have a result
you you create a empty array then you keep appending to that array and then
you you keep a pen you create an empty list you keep appending to that list and
then you return that list okay that's how that works so
very common pattern okay and let me actually even write it down very common
pattern create empty list
Loop through and append to that list return
that list okay this is a very common um pattern I don't know if it has a name
or not but this is but this is a common pattern so just remember that this is
something that you do okay so just take note of it memorize it this you're gonna be doing a lot of this in your code okay
so it's like if you wanna you know if I go back to Netflix and we have a list of movies here we have a list of movies
right so maybe I have a list that's called trending now
trending now list right and the start that list is empty trending now and then
I keep looping through and I keep putting items inside of that so I keep looping through
just like for a movie like if I go to Netflix here right the loop that's written here and the trending now is
pretty much like very simple it's it's basically for movie in
trending movies and then it'd be like print or output somehow movie
okay and then it like shows you each of those movies it just Loops through and makes puts this here Loops through puts
this here Loops through put this here Loop screw puts this here so that's effectively what's happening inside of
that Loop oops well we're already shooting the Python tutorial but thank you for the reminder appreciate it so
yeah you want to Loop through and you keep uh pending and that's what's even
on Netflix did they make a list they keep appending through to that list then they append all the trending now movies
and then they put it in the list and then show it okay so that's yeah long
um explanation of this but I think I just want to drill that point home in in multiple different ways now there are a
lot of other cool things that lists allow us to do too for example before there were there's a method there's some
methods that we have that we could call on strings okay and uh lists can help us
with that so I'll give you an example let's create a new function so I'm going to comment out this print call right
here and we'll create a new function and I'll call this function I'll just write the
documentation for it real quick and it'll be count Words count Words okay this is this is how I'm going to call
the function and this function I'm going to give it a string like
hi my name is qazi okay or let's remove any kind of special characters for now
and so I'll just say hi my name is qazi and when I call this function what it should return to me is it should say one
two three four five so there's five words should return a five so
count Words function should count Words should count
um if given a string should count and return number of words okay so that's
the function count Words that's what it should do so I know it takes in a string and then it returns a number
so if I want to create this here's what I'm going to do I'm going to create a function we'll call it count Words it
will take in some input from the user so we'll say you know phrase from the user
and based on that phrase that phrase will be a string so I can just put that in the documentation so phrase is going
to be a string okay
uh just a little note so you could create a type hint here if you want you could go it'll be a
phrase will be a string and then we return an integer okay so you could do
that but I'm going to remove this one okay so I'm just going to keep it like a basic one right now all right and let's
go ahead and just print out the phrase for now let's call this function and I'll say print I don't need to say print here I'll just
say count Words and I'll say hi my name is qazi and let's run this and you
should just see hi my name is Kazi here for now right there right so that's good that's
that's really good for now the next thing I want to do is I want to find out
well how long how how many words are here how do I find that out so check
this out there's something really cool that we could do with strings so I'm going to zoom in here so you could see
better and there's something awesome that we could actually do with strings okay and what I
could do with strings is I could go hi my name and you could call this method it's
called dot split okay and if I do a DOT split on a string
it will actually split that string
based on um empty spaces so wherever it sees empty spaces it just removes them and
and then it turns the rest of it into a list like that okay for example imagine
I had high my name is
okay or imagine I have a CSV file like an Excel file maybe if you've ever seen one like that and it says age comma
gender comma height comma sex right if I if I have this well and I and
I have it as a long string if I want to get a gender height sex I want to get
all those headers and attributes and store it in a list I can if I call Dot split here well that won't work because
it's still putting the commas in here and it's just giving me back one string that's not what I want so what I could
do is I could split it by commas I could tell it splitted by commas once I do
once I do that it actually removes the columns from the string so
then I have a gender height sex and as four separate attributes so it's four
separate properties right and that's what I that's more of what I want so split is a really cool method and when
you call it on a string that has spaces what you're doing is you're basically saying
splitted by empty spaces just like this when I run this this will work now
notice that this line over here dot split and then
dot split with empty spaces Returns the same result interesting
right they're returning the same result right here because by default if you actually don't pass anything into this
dot split method on a string by default it will it will put this I'll assume
you're you're asking for an empty string Okay so we know that we could call the function
Len to find out the length of our list
right so if I can actually take these words and I can split them well then I can actually find out the length of my
string right or that phrase that I passed it so zoom out here so see if you
could actually see if you could give that a try all right and see if you could make this function work I think at this point you
have enough information to be able to put this together if not that's all good too so I'll give you five seconds to
pause five four three two one time all
right let's go ahead and do this together if you were able to do it great if you're not that's okay too we'll now
do this together so here's what I want to do I'm gonna take my phrase and I'm gonna split it
okay and then let's just print uh let's print [Music]
um this out and I'll remove this here so let's run this and when I give it High see
this line over here it's saying hi my name is uh cozy
right and boom it's showing me all this stuff there and everything is split boom
hi my name is cozy so I already know well then what can I do actually well I
can actually call the function Len on that so for example phrase.split
gives me that and then what I'll do essentially is I'll just call the
function I'll wrap this and I'll just call the function Len on it that's what I'm doing here so I'm just taking this
right boom because that's where that's going right there and then I'm calling the
function Len on it so it'll just give me the length of that okay
so let's go ahead and run this and there we go count Words is five so count Words
now I can remove this return uh this print and write return right there and I
could actually turn it into a one line solution so let's go ahead and print and you can see count Words is a very
simple one-liner solution and um yeah I can I can type in anything here
cookies cream
cream soda legendary
okay so if I keep giving it words it keeps counting it and accurately so
that's that's how count Words works if you were able to
get it great if not that's all right and uh hopefully that gave you some more
exercises with like and and methods that you could actually use with lists now I
want to show you something very very very helpful to help you visualize for Loops or any type of Loops in general
and this is a debugger that's actually built into replit and this is fantastic this is a fantastic debugger okay so
debugging is a very useful skill and it'll help you a lot so what I'm going to do is um go ahead and uncomment this
line out where we were printing double okay and let's comment
let's comment this out as well okay and what I'll do is I'll put a break
point here so if you see this blue thing that I just added right next to it you can do that by clicking here and
unclicking here okay so just click right there and then get that blue point to show up okay so once you do that I'm
going to go ahead and click this that's the debugger get that icon right there so let's go
ahead and click the debugger and now you could see that it's currently saying uh
let me make this let me do this so maybe the debugger looks a little bit bigger
okay so there we go so it tells you the breaking point is on line 395. right
it's this right here because that's where we're actually calling this double function from so it's a good idea to put
the breaking point there now if I hit run on this it runs from
right here okay and then there's already a couple of things here so it knows about special
variables and it knows about function variables so special variables don't touch them that just ignore them they
come with python so ignore this function variables you can pretty much
ignore that too but all this is saying is hey since you defined all of these functions and we didn't comment them out
right we have a ton of functions defined but just not commented out so if I keep going up
you'll see introducer and all kinds of functions at the top that are that are
defined and just not commented out right so let's go back down so that's what it's noticing so ignore
that too for now okay ignore that too now hit this next step right over here
Next Step so the first line of the code what it's
saying is we are given numbers and numbers are one two three because the user passed it in so it already knows
that this numbers over here is one two three at the moment okay that's all it
knows because it's on that line right now now let's run another line so it's
on this result line now now when I run the result line notice that it now knows
a result is a variable that's instantiated as an empty empty list now
it's telling me that it's going to run this line over here so let's hit next on this next step
and now it says hey I know what numbers is and I know what result is already but
now I know that number is an integer and it's one right it even knows their data types lists lists and integer so it goes
hey I know what number is at this point because the first at the first Loop number is going to be a one then hit
next again okay and now it can tell you hey I just ran this line over here
and this is what happened result is a list now that list is not empty anymore it has two inside of it okay great I'm
going to run line 390 again that's why it's grayed out right so let's run line 390 again
boom and it says Hey number is now two run it again
and it goes boom I just added four to the result okay
let's run it one more time it goes hey I know that number is three
so number is 3 here so it's going to be basically doing 3 multiplied by two and
it's going to take six and append it to result and so after this line This
result over here should have a six so let's give that a try and boom you can
see that we have that six right there okay let's run it again and now it's
going to that line return result finally so let's go ahead and run it again right it did that and then now it's
going to the print line and it just printed out okay so that was a full step-by-step
line by line exactly everything that happened and uh yeah so debugger can be very
helpful uh in order for you to like find out what your code is doing okay so I I
would highly recommend any part specialty loops and then to turn it off just hit this stop okay so you can turn
it off but for visualizing Loops very very very helpful okay very helpful
all right now we'll do some more practice still with lists because this is going to be key okay so we're going
to just keep sharpening this sword now let's say that I have
um okay so let's say this right if I call a function
uh and we'll call it some list okay if I call this function and I give
it one two three it should return back to me is six so what's happening here
I'm summing up this entire list okay create a function that can
that given a list of numbers it can return their sum so we're going
to go ahead and create this function how do we do that how would we do something along those lines
so think about this there was a pattern there's a couple of patterns we've used
in the past so I would say that if you give this a try right now it'd be of a difficulty seven out of a ten and you
could do this because you have all the tools available so what I'm going to tell you is that it's gonna use this
counter pattern that we had created earlier it's going to use similar to this pattern right here
okay where we did Count plus equals one but instead of count plus equals one you're going to do plus equals something
else so you could give that a try I'll give you five seconds it'd be challenging and then we'll do this together five four
three two one okay let's go ahead and do this together now
so obviously I Know This Much the function
is going to be called some list and it's going to take in some numbers okay now I know that that's going to be
a list data type and I can further type hinted to say list of integers
okay so again we don't need to do this and I know it'll return an integer okay
this much I know about this function so I can get rid of it for now just so I can keep this simple
all right so some list is going to take it numbers and it's going to sum up all of the numbers and then return them so
the first thing I'm going to do is I'm going to uh say
count and I'm going to set it to zero then what I'll do is I'll Loop through these numbers okay so I'll say for
number in numbers and let's actually comment this out for
now and let's actually try this manually first I think that'll really help you so let's try how would we do this manually
if I gave you numbers and they were one two three and four how would you do
this manually well you'd first go through and you would do you know numbers
uh uh you would create you know account and you set it to zero
and then you'd basically go through and you say okay I'm going to take counts and I'm gonna plus equals it by numbers
of zero okay so that by doing that I'm incrementing count by that right so for
example let's go ahead and put it in the console here so we could visualize this better so I'm going to set count to zero
and I'll set numbers to this okay now I'll increment it by the first element
in that array I'll increment count and let's go ahead and see count so count is now one now I'll increment
count by the second element in the right which is the two now count should be
three then I'll increment count by the third element in the array which is the
three show the count should be six and then I'll increment it by the fourth element
in the list and then let's go ahead count and you could see count says 10. okay that's the
pattern that I would have so in effect I'll be writing this
and this and this multiple times copying pasting doing it
by hand and then I'll print out my my account and that
will be the the sum right okay so let's do it in a loop now so
we'll set for number in numbers and we'll say count and we'll just
increment it by the number and then at the end we'll just say return count okay
now let's go ahead and give this a try so I'm going to go ahead and say print
some list and we'll give it one two three
and let's see what happens boom there you go that worked Let's uh
comment out any other print statements we have let's comment this out right here let's run it again you can see
we're getting back six now what if I put a 4 in there as well comma 4 that should
get me to a 10. and yep I see a six and I see a 10. so
my sum function is working correctly my sum list function so let's go here so
that was yet another practice for you to do okay and we're gonna do
you know I would say let's at least do one more practice okay so this is good practice for us
but loops and loops and lists combined there's so much
you could do with coding with that so that's why you want to keep drilling those practice skills and getting better
at it okay now I'm going to comment out both of these and now what we'll do is we'll say We'll
create a find Max okay and find Max if you try to do it yourself that would be a challenge of 9 or 10 difficulty
because you don't necessarily have full on you kind of have the tools to do this
but it's it's but it's a difficult one if you want to do it by yourself it'll be a pretty difficult one okay so we
want to make this one fine Max that finds a Max from a list so for example if I give it a list of one two three
four it finds this so let's go ahead and create comments for this I'm going to say find
Max okay and then I will give it one five
ten three if I do that it should return 10 that's what find Max should do okay
well how are we how on Earth are we going to make a function that can go
ahead and do this so if you want to give it a try pause the video now give it a try and otherwise let's keep going okay
so I'm going to go ahead and create a function it's going to obviously be called find Max okay find Max and then
it's going to take in you know a list of integers and I don't
need to type hints okay but I'll just go here it's going to take in a list of numbers you could add in type hinting
after you're done writing your entire function that way it doesn't take up cognitive load mentally from you but it
makes your code more readable when looking at it later it's going to take in numbers and it's going to find the
max well how I want to do this is I want to set the current Max
okay and I'll set the current Max to the
first item inside of that list okay so if I was to do this by hand
I'd probably have current Max and I'll set that set that to the first
element in that list right so if you gave me a list and you said hey Kazi you know
here are the numbers and you said there are 1 5 10 comma three just like that
well I would probably set the current Max to 1. okay or in other words
I would set it to numbers of zero okay the first element of that list
and then what I would do is I would go because we're assuming this is a really
large list right because if it was a really really large list you couldn't just you wouldn't just be able to
eyeball it is what I'm saying Okay so let's say this was like a really large list and there was like some some Max
number in there you wouldn't just be able to eyeball it'd be too hard okay so I'm gonna command Z this and make this
back to the small list that it was right because that's usually the real data you're working with real data is
like massive right here we're just using some dummy variables dummy lists making them small so we can conceptually
understand what's happening okay so I would have this and I'll set
the current Max to this then what I would do is I would just go through each of these items and I would compare this
and this and if I found out that this item was
greater than this item this number right here I would replace current Max with this
new current Max and then I would compare right then you would compare
this and this and if this was greater than the current Max
uh then I would set this to the current Max and then I would compare this against the current Max and if this was
greater than the current Max and it set at the great current Max otherwise I would just Skip and ignore and keep
moving okay that's the pattern so basically I would check you know uh
through the through the loop I would say hey is oh let's just start with that so I'll
say is um and I'm just writing this in English for now one greater than current Max and
then it would say the answer is no so then I just continue moving and I
would say is in the second Loop I'd say is 5 greater than current Max what I'm writing here is called pseudocode it's
helpful to write code in English like this because you can before you end up writing actual code you can just
visualize what the heck is happening and then you could syntactically turn it into actual code and it's an easy way of
doing it it's five greater than current Max the answer is yes since the answer is yes I'll say current Max is now equal
to five okay then I'll go through again I'll say current Max then I'll say is 10 greater than current
Max and since the answer is yes I will say current Max is equal to 10. okay
here we'll just say go to next number okay that's what's happening here so if
it's no go to next number and then I'll go is three the last item
in the loop greater than current max if that's that's a no okay well then just
um and the loop because we know we're at the last number and it will automatically end the loop so that's
really the algorithm that we would write now I'm going to go ahead and comment all of this out so the pseudo code is
there and we can use the pseudo code to create our real code okay all right so
let's go boom and I will say
for number and numbers if number greater than current Max well
then set the current Max to the number to whatever number is
and that's really it I don't really need to do anything else and then once we're done with the loop just return current
Max okay and um yeah let's give it a try
because that's essentially the logic so let's go ahead and say find Max and I'll
give it one two three ten Seventeen four
six five six let's run this and look at that it found the current
Max so damn damn fast right now if I
copy this and I just paste it a couple of times and we make we put a current Max like
here of 19. let's see if we could find it it found it instantly right it found it
really really fast okay now I'll make it smaller there we go and boom yeah it
works every single time so that's how you would write it okay so again you saw
that we had to work with lists here we had to do loops we have to do if else conditions so we had a for loop with the
if else condition so that's probably something new you know that you might not have seen before so the the reason
why you want to set it to the first element and you don't want to set current Max to be zero or something like
that is if you did set it to zero and I tricked you and I just gave you like all negative numbers your when I run find
Max you're going to return back a zero but like there is no zero in this list
right so you want to set it as the first element
of that list so you so instead I should have gone back like you know negative one because that's the
biggest number out of all of these other numbers here so that's why numbers of zero is the way to do this okay so
hopefully that gave you some solid practice with using lists all right so
now since we did a little bit of practice with lists let's do some practice with dictionaries okay so
dictionary practice
um and just again just a friendly reminder you should be coding the entire time in maine.py since I'm Kazi I'm
coding in here and at any time if you need notes or everything you're probably writing or will write is all in here
okay everything that I'm writing will be made available to you in quasi.py so you
could just go there and get access to all of this code okay just in case you couldn't follow along or anything for
that reason okay so with dictionary um with dictionary practice what we're
going to do is we're going to create a function and we'll call this word frequency and
what this will do is it will take in a string so let's say I say
I love Batman because
I am Batman so weird string weird phrase to say so
I'll take in a phrase which will be of type string and you'll notice
that it is repeating certain words uh certain words a few times so let's go
here and which this should return is a is a dictionary and that dictionary
should basically say the word I should be the key okay I
and it should say since it I happens twice it should say two times
and then since love happens only one time it should say love is one since
Batman happened twice it should go Batman two
and then I is already done so if we ignore that and then m
happens once okay so if you call word frequency on this I love Batman because
I am Batman this is what it should actually return so what this is doing is it's telling
you the frequency of uh whatever it is you're doing okay so let's go ahead and
create this function so we're going to say Define word frequency frequency
and it'll take in a phrase okay and then it'll give us this guy
over here now the first thing I notice when I do this is I imagine usually with
the string by itself there's not really much you could do with it so I would want to turn this into a list that's
probably the first thing I'm thinking okay so let's go ahead and do that so I'll do phrase
and it's all of these words are separated by a space right so I can
actually just do phrase phrase dot split by empty space or just
remove this and by default it's actually putting that
and let's go ahead and print this all right and we'll call this function
now word frequency frequency and the phrase will give it is
this I love Batman because I am Batman so let's give it that okay and let's run
our code and comment everything else out in the meantime Okay so yeah you see it turned it into a array
or a list right and we have these inside of the list now this is where a dictionary is going to be really helpful
to keep track of all of this because dictionary can have only unique keys so
if I appears twice in a dictionary it'll only appear once
so what I want to do is here's how I would do it if I kind of did it manually okay so I'd kind of create a dictionary
I'd create an empty dictionary okay so I'll just say result or something like that and then I would
Loop through this list over here okay which is which has all the words in it
and I'd say something along the lines of like okay if I get I
um the first question I'll ask is is I in result okay I'll look inside of this
dictionary and see if if it's already there if I is not
end result because they'll say no in the start then what we'll do is I'll say okay
set create a new key value pair
okay and we'll say set the key value to I
and sorry set the key to I and the value to zero okay so basically
in other words I'm gonna do this I and I'll say zero because it didn't
exist so this is this is just Loop Number One
okay Loop one then we'll Loop through uh the second time right we'll go again we'll go to
the second iteration of the for Loop and we'll be on this word love because we'll do something like forward in words you
know or for word and phrase or whatever this whatever we're going to call this list over here so for word and words
let's just say the first time word is going to be I the second time the word is going to be love so I'm going to say
is love in result the answer is no well then
we're just going to follow the same logic and we'll say set the key to I and value
to zero okay and I'll remove this and because it's the same thing so like set the key to I and value 2 or in this case
we'll set the key to love and value to zero because this is and I apologize the value should be one
because this represents that it's been found one time so there we go one so it's like hey I've this is this I has
been found one time so I'll set it to one not zero then we'll loop again
so I'll copy paste this format and we'll loop again the third time and
we'll find the word Batman is Batman and the result the answer is no since the answer is no we'll set that to one this
is the third Loop then we'll Loop through the fourth time
and we'll find the word because and since this is a no we'll set the key to
and value to one let's Loop through again and now we get to kind of the interesting part and we get to the I is
I in result the answer is yes and so now we won't set a new key because the key
is already there we'll say increment the value of
of result of um I
buy one okay so we'll increment the result
increment the value of that key okay or in in English I'll say of
this key of the I key by 1. okay then we'll Loop through it again
we'll what will we find now you help me with this okay what will we find what's the next word I love Batman because I
and what's the word we're going to use here am right so this is going to be m
then is m in this result dictionary yes or no
it's not um and by the way I wasn't updating this dictionary but this dictionary would be
getting updated the entire time right so so result to one and then we'll set
um Batman to one as well right after this and then four would do
we'll say because whoops we'll say
because and it's because I don't want this running uh along the entire line I
will do this so you could see key value pairs on every single line so I said because we'll set that to one
and then it'll bring us to I again and we'll say I because I
and now we'll increment the value of this I to 2 instead of actually adding a new key
okay and then we'll say am and am is that in the result uh dictionary yes or
no no right it's not so it's we're going to say no we're going to increment the
value of uh we're not going to increment the value we're going to set the key
to uh to M and value to 1.
okay so we're going to go ahead in here we're going to say key I'm sorry not key but M and we'll say one
okay and then the last Loop that we're gonna do is going to be the increment Loops I'll copy this Loop seven
and is Batman and result the answer is yes increment the value of Batman Key by
one so since we're going to do that we won't add a new key we'll go to the
existing Batman and we'll increment it and we'll put it as two okay so that's how we would do it manually if we were
doing this all right now let's go ahead and turn all of this into code so first
up I'm going to comment this entire thing out and then we're going to go ahead and write the code so I'm going to say
Define and I think I have my function already here so I'll actually
just okay let's uh let's write up top let's
write up top because Bunch everything is already there so let's write our function here
okay we're going to follow that same logic so in the start I'm going to create an empty dictionary
okay it's just going to be empty there's going to be nothing in there right now um and if you create empty squigglies
you might think this is a set but no this is going to be a dictionary and you can check it here you can say type of
empty squigglies and you will see these curly braces or squigglys or whatever
you want to call it class is dictionary so it assumes it's a dictionary instead of an empty set okay and that's what we
want we want a dictionary okay so um result is this for now then I'm going
to Loop through okay we'll say this split is just words right because I
get back a list of all the words and I'll say for word and words if word in result if the word is already
in result in that case what I want you to do is
incremented by one okay or in other words if we follow our logic I'll say if
the word is not in result then I want you to set the key okay so how we're
going to set the key and I'm going to say result and we'll create a new key and the key
will be titled that specific word and also set the key to one otherwise else if it is inside a result
if it is found well then we'll just increment result
um buy one okay and then at the end let's go ahead and return result okay
and uh let's go ahead and run this
and of course we forgot to call Print here that's why it didn't show so let's go ahead and print and run this
all right there we go we're getting back exactly this right over here you can see
I is two loves one Batman is two because
oh my bad should have said because
one right because is one and then m is one right there
okay so this works perfectly so hopefully this was not too overwhelming
or too confusing because we're just building on top of you know essentially every single
step that we had previously done now if we want to make the input uh Dynamic for
the user we could go ahead and say word frequency and then let's say that
it takes an input from a user please enter your phrase
okay now if I run this and I comment this out it's going to ask me right here
please enter your phrase and let's go ahead and practice this so I'll
I'll go ahead and enter my phrase here and I'll say I like to eat cookies
boom I like to eat cookies right let's run let's run it again let's say cookies
cookies cookies cookies I am a bookie bookie bookie bookie let's
run that hit enter and cookies it happened three times
um cookies with a comma happen one time right because we haven't we haven't taught it yet how to care about special
characters like a comma so that is fine because cookies comma is as far as I'm
concerned it's a brand new word I am a
right bookie right bookie showed up four times so very nice very nice it works
perfectly so you can make it Dynamic by asking it the input
um from the user okay so that's uh that's it for now in terms of practicing
with dictionaries now we're going to go ahead and move on to some really big boy
and big girl stuff which is going to be higher order functions and then after that we're going to step it up a notch
and it's gonna be awesome okay I'm not even gonna tell you it's gonna be a secret you're gonna be in for a surprise so with that said I'm really excited
can't wait to start talking to you about this stuff all right I hope you're ready to talk
about higher order functions this is scary scary stuff but don't worry it's
not that scary actually we'll walk through it together okay um so cool let's go ahead and comment
out every single line so when you run your code it should be empty nothing should be uh
printing out okay now I'm going to talk about this higher order functions okay big big words but
what what are we really Gonna Learn here and what we're gonna talk about I'm just gonna show you two for now map and
filter okay because those are really the only two ones you'll kind of need
um and then after that I'll show you something and you won't even need this anymore okay but this is gonna be the building block for the next thing that
we're gonna do so let's just start off with this so remember that function that we wrote that doubled things so we wrote this
function and uh you could double right you call Double on one two three
and you would get back one sorry two four six well here's a
nicer way of doing it we can actually use the map method okay and whenever you
run this map function what's nice about this map function is at the end it will
always return a brand new array now if I want to use map to make this happen over
here I need to give map a function okay and what map does is map goes and gets this
guy and gets this guy and gets this guy and it has the power to get this guy and do something with him get this guy do
something with him get get this guy and do something with him and this is something you would normally write a for Loop for and loop through and do all the
stuff map you can kind of do it in one line and I want to call map right and I want
to be able to call it and map is a function and it takes in another function as an input so you're going to
put another function in here okay so for example I'll put let's say I get I
create a function you know our function double uh does what it goes through if I look
at it uh it goes through and it doubles the
numbers okay so let's go and create a function here so you could see it and
I'll just say double number so this function is going to be a lot simpler it's going to expect some kind of number
and it will return that number multiplied by two okay
that's it so I'm gonna go ahead and give the double number function to map so
it's taking in a function okay so I'm not giving a function call like this I am literally giving it the definition
of that function okay for example if I did from qazi you can
do from import from Main import blah blah or you could just do import double number so I'll do from causing import
double number okay so I had some errors in my thing so I just refreshed
everything and uh yeah now if you if I run it from quasi like for some reason sometimes I'll give an error so just
like run I guess double number first if you're getting an error where it's not recognizing what it is so just like run
it like this first and once you run it like this now try doing from cozy in
your case from Main from qazi import double number okay if you're in
Maine you could probably also just do import double number that should work too and now if I do double number and I
call something call um call it with two I get back four so like I can see that
double number function works as expected so what I want to do is I want to apply
this double number function on everything on this one here on this two
here and on this three here okay in place update these in place and then
return like a new array so basically I'm not going to be changing the actual list that the user gave me but I'm going to
be making the copy of that list and then you know essentially changing that you could think of it like that
okay so that way the actual data that the user gave doesn't doesn't get lost
okay so I'm going to say map double number give it that and then also now it needs an array so I'll give it an array
of one two three okay
now if I tried to print this you're gonna see that I'm going to get something a little weird it says Hey map
object at blah blah blah blah bloop okay so it's an iterable object and in order
to show it and have it reveal itself in other words we're gonna have to call list on it so list will turn it into a
list and you can see boom that worked we've doubled everything right two four
six so we gave it a function and we gave it a list okay so we just said hey we gave
it a double number function and we gave it a list and said do that to this list and now we could
essentially write that entire thing in one line and if I actually if we go and look at
our double number right and I'm going to put it underneath this
and I'll just comment everything out honestly this over here looks a lot more
complicated than this over here because it's one line okay so if we were to turn
double this into a function so if I said define you know um and we call this yeah you
don't even need to turn it into a function right that's the whole point because you could just write it in one line it wouldn't really make sense to
even honestly make it into a function you should just call map right there call whatever you need to do and do it
right there now here's another reason why I like it you can create this double number function
on the fly without even creating this function here so in other words I can
actually do this okay I can say instead of this I can actually make a function on the Fly and
I can say Lambda numb and just take that num and multiply it
by two so return that so this is now the same exact thing as this
okay we're taking in an input num number and then we're taking num number and
multiplying it by two just like that multiplying it by two right that's it and now if I actually run this you'll
see I'll get two lists of two four six one from this and one from this okay so
I can actually look I don't even need to use this anymore and I'll comment this out and there you go this is a nice
little one-liner that we just did on the Fly okay well what if I wanted to
make a function that squared everything what if I wanted to make it so instead
of it going doubling 246 we squared it so you know 1 squared 1 squared is going
to be one two squared is going to be 4 3 squared okay is going to be 9 right so I
should get back one four and nine how do I do that well that's very simple we go here and
we just replace this with a square we're just going to square that result that number okay so we're going to go through
I'm going to Loop through get one I'm going to square it I'm gonna go get two okay map is already
writing the loop for you that's a nice part that's why you you're not the one writing the loop map is already doing
that for you whenever you see map you're essentially mapping through the entire list okay
then I'll go through two and square two and then I'll go through three and square three and then I'll just get one
four nine in place of whatever is there right now okay like that
let's run it and you can see I got 149 Okay so
let's go ahead higher order functions right this is the example of map very
nice very very useful okay now I'm going to show you another one that is very
useful and we call this one this is filter okay
filter is another beautiful one which you can use very commonly so for example
let's say I have a list of numbers so I have a list of numbers and I have
one two three four five six seven eight nine ten
eleven twelfth okay now let's say I only want to get the even numbers watch how
easy that is to write it I can actually say map and I write my Lambda here and I say I'm
going to take in a number okay and then for and I'm going to say oh not sorry not map we're going to
write filter okay I'm gonna filter and filter where the number does not
equal um or or we'll do this so how do you get
let's let's just show you the logic here first so I'm going to send numbers one two three four five six okay
and let's say I want to get all the even numbers from this numbers list right here well how I'll do that I'll zoom in
so you can see actually let's a get away from there okay so how do you check something is an
odd number how to check for an odd or sorry even number let's check for an even number all right what I'll do is
I'll say two modulo 2 should have a remainder of zero
so if I take the number two and I divided by the number two it should have a module of zero yes
okay let's take four and do modulo two and check what I get back
let's take six and do modulo two meaning like all these numbers divided by two have no remainder so every even number
every even number divided by two has no
remainder is basically what we're saying that's um that's a definition of an even number
okay that's that's an even number now an odd number will be you know like
five so let's say I try five modular two equal zero and it'll say false okay so here let's say I want only the
even numbers well I'll just pass in this this condition so to this filter I'm
just going to say grab the number and just make sure that the modulo 2 is 0 if this is true then pop it into the new
list filter also returns a list filter is a function and it returns list
okay and a new list so I'm going to apply this and I'm gonna give it my numbers
okay let me zoom out here so you can see everything filter I'm going to give it my numbers list
right here okay and then in order to show this I
obviously have to wrap it and list and in order to show that onto the console I need to print it
okay so let's go ahead and print this and look at that wow right like we were able to create
this filter so easily if you had to manually do it that would take a lot of work and you could try to do it manually
write your own Loop and all of that but yeah filter already automatically starts looping so
whenever I'm doing filter I'm thinking I'm already looping in my mind I know I'm looping through every single item
right but then the condition is like only put the thing in the new list
if it matches this condition right over here so I go through here and I say his number divisible by two nope okay we
throw that throw it away then we go to this and we say hey is this divisible by two yes it is so we throw it in the
final result list then we go to three and we go nope four check five and six
check seven and eight check nine and ten check right check and then we just keep
dropping those and that's how we're getting all those guys in our list
so that's how that works and you know the basically the code here is a nice
one liner I'm super zoomed in right but if I'm on my computer and I'm just zoomed out I'm just zoomed in so you can
see better right but on my computer this is how I see it so it's like that's a smooth one-liner with plenty of more
space to write right so that's how you will filter
so that's enough for an introduction of higher order functions
and now I'll show you something that's going to be even better and it's like
the most epic thing um and that is called
list comprehensions they're much easier to write than all this filter and
um you know all this map stuff much much much easier and they will pretty much
replace their powers and and give you new brand new powers okay and and you
can write you can replace the functionality of map and filter with them and they're just much easier to
write and smoother so let's go ahead and learn about list comprehensions now
all right my friends now I want to talk to you about list comprehensions and how
they work okay so I'm gonna go ahead grab that same list here numbers okay
one two three four five and watch how cool it is and how I can do it with a list comprehension so I can say
um let's say I want to use this filter one right over here right I first thing I have to do when I'm
doing a list comprehension is I have to make a list just like this okay so make a list
and then I will say number for number in numbers
okay um and then I'll write my if statement if number is divisible by two okay and
let's go ahead and just print this and boom look at that that is already
working okay it's giving me the all the even numbers and now I'll kind of explain what I've done so this is a
regular for Loop four number and numbers this part you know already okay oh and then I say
only get me the number if the number is divisible by 2.
and then it asks how should I build the list that I returned to you
um just give me number okay for each of those numbers just give it back to me so for example this filter would only allow
two okay just give me two back great this filter would only allow four in the
next Loop okay just give me back number and so it just keeps appending it boom boom boom all right keep sharing a new
list out of that and then we return it now what if I wanted to double all these numbers I just do this
and that doubles every number okay oh that is doubling actually all the even numbers so okay let me give you
an example okay so this is the uh I'll write a comment filter and give
me only even numbers okay
and then here I'm gonna go ahead and remove this statement here
okay and I'll say for number and numbers here's what I
want you to do with the number number multiplied by two for number and numbers okay so this basically means
Loop through the numbers list call that
variable you know whichever variable you're iterating over number and then
the new list how I want you to make it is a makeup make it up of these elements number multiplied by two so if I print
this out you'll see it has doubled uh all of those numbers right there
okay and honestly in my mind this looks way easier than writing map and filter
and then wrapping it in a list and Lambda and all kinds of crazy stuff this just looks like you're writing a for
Loop right that's the power of list comprehension so that was filtering and then this is you just essentially
did a map map double numbers okay so this is an example of a map this is
example of a filter and um yeah that's why I didn't spend too much time teaching you these because you'll kind
of never have to use those again okay map and filter because list comprehensions are Kink and you can just
use them for everything what if I wanted to get odd numbers to give that a try okay so get odd numbers
give that a try here I'll give you five seconds five four five seconds to pause
okay now five seconds to solve it so take five seconds to pause and solve it five four three two one all right let's
go ahead and do this together and I would just simply say okay I'll let me make an array first so if I first make
my array or list and then I'm gonna say four number and numbers because that's my
Loop so let me just write that get that out of the way okay so this is my Loop right here and then what do I want to do I want to
get only odd numbers okay so only get the number if number
modula 2 does not equal zero so if it's like if uh if basically there is a
remainder in other words okay and I'm going to say once you get that
number then all I want you to do is just give me that number back I don't want you to double that number I don't want
you to Triple that number and just give me that number back and let's print this okay
okay and let's go ahead and comment out all of this so we can see very clearly where our result is there we go one
three five seven nine eleven so I got back all of my odd numbers here
now if I told you uh you know
give me all of the odd numbers cubed okay so that's like crazy I wouldn't ask
you to do that that's crazy but you would just do this and that will give you all the odd
numbers cubed so this will get you all the odd numbers this is going to cube all of them and then that there you go
okay so really really crazy fancy stuff that you could do with this and not just
this right again if I take you to the Netflix example it's like if I have you know this giant list I want to just
filter out where the name is cozy so it'll just filter that out or if I have like every single movie data and I only
want like comedies I could filter this out this entire database out and I could
filter where there's only like the the title is comedy or they have comedy in their attribute and it can filter that
out so there are very real world applications of where you could use this
right you could filter out obviously with strings as well you could filter it out filter for anything floats whatever
is in your list you could do it so list comprehensions are absolutely amazing and python you could also do 2D you know
array two-dimensional list comprehensions too uh which we won't get
into because two-dimensional lists are kind of a little bit more advanced than we need to get right now because we're
just trying to Learn Python right now right and and master the basics so there
you go uh I hope you enjoyed learning about list comprehensions as much as I enjoy teaching it they are so freaking
badass they're so cool and they're very very easy to write right this is an example of doubling the numbers and it
was so easy to do so I enjoyed them I hope you enjoyed them
um as well and um last thing I want to leave you with is just there's a couple
of special keywords that I think you should just learn how to use and I won't take too much time on this but I do want
to just share them with you so I'll do this here I'll just zoom in here a
little bit so you can see very clearly let's go ahead and delete all of this and so for example
python comes with something called sum so if I actually do sum one two three it
can automatically just sum it up for you so you don't actually have to write a function that sums okay so that's one
really nice one there's obviously Len which you're already aware of okay and
then there's also Max so you don't have to write your own Max function it can Max can do that for you 10
five seven and boom there you go you get back ten
so you could see Max automatically will always pick out the max number there's
also Min which is often times also very helpful so I'll say 50 uh negative 7
337. let's run it minimum the smallest number is negative seven and boom you
can see that I get back negative seven Okay so very nice these are some built-in
functions some lend Max Min okay I'll just put them here for you and I'll
comment these out so you have access to them and uh it doesn't know what that is I'll
just remove it
okay I'll just put these three so if you're looking at it later it just looks like nice little notes for you that I've
left Okay so special built
in functions with python okay there we go awesome so list comprehensions plus
some special built-in functions plus a little kiss for you your beautiful face and with that said let's just keep
rocking and rolling what's up guys welcome back so I've
added a couple of nice things for you let me go ahead and show you so go ahead
back to your um course and right over here you're going to see markdown so
click on markdown and in your markdown you're going to see all of this nice stuff that I've added for you it's gonna
say welcome to the best Python tutorial in the world by clever programmer and here I'll list out exercises projects
and any future projects that we'll be creating we'll go here okay and the Order of this might change by the time
you are watching this tutorial because we're constantly making changes making improvements seeing like where you might
fall into a trap or what we're constantly changing this so for example here's a list of apps that you're going
to have so this is going to show you hey here the apps okay now here's an example uh so for example this counter app that
you're going to build it's going to be a really nice app they're going to build with flask now if I actually scroll down over here it's going to tell you hey
before you start uh this project make sure you've mastered the following pure
python Concepts and it will tell you hey it's okay if you don't know web development Concepts we'll learn these together so for this counter app we're
going to be covering the following concepts web development and pure python related Concepts so web development for
this project is going to have these three concepts in there routing get request database you don't need to know
these These are okay these are new we're going to learn it together so you don't have to know those however before you
enter this project you will need to know these Concepts dictionaries named arguments incrementing decrementing and
functions now if you have made it to this part of the course you know all of these already if you didn't skip any
sections you have been familiarized with dictionaries you have learned named arguments which is where you call a
function and any given arguments a sum you can say a equals one and b equals two okay so those are like named
arguments you have learned increment in decrementing which is no num plus equals
one or you know or like a cookie hello uh plus equals one so it's like
incrementing uh uh a key in a dictionary right so you have learned those Concepts
you have learned functions and how to call functions so all pure python concepts are good which means that you
are eligible to go ahead onto this project now another thing you're going to see in this project is going to see
project live demo and solution all right so you're going to see these three things the project means this is the
exercise project where you're going to write your code this isn't going to be the complete project so this is going to
be like you coding this kind of from scratch okay so that's going to be that uh the live demo is going to be
obviously the demo of the app working so for example if I hit this plus button right here you can see my calendar app
is incrementing right and when I hit this um when I hit this minus button here you
can see my app decrements right so how do we do that how do we create an app like that with python so you're going to
create that and this app is deployed onto the internet which is super nice about Rebel right replit allows you to
deploy apps with a click of a button which means you will be good to you'll be able to show all of these python
projects you make to everybody else and then there's going to be a solution section right there's going to be a solution section and this section is
going to have the link to the full solution all the code which I don't I
recommend that you go to the solution once you feel like you can't make progress on the project and in this
course we're gonna go through the project together all right we're going to cover every single thing we're going to walk through it step by step together
so you should have no problem completing this project portion but if for any reason you're stuck you always have the
solution file you can just go to that the next app you're going to be making in this course or one of the apps also
you're going to be making is this random dog generator right this will have what the app is what concepts you'll need to
learn right I now have some additional notes for you as well like you know know hey this is how dictionaries work so you
can scroll down and see those and so this is just a snapshot from what we have done already and so it's like okay
if you create dictionaries and you call the function boom this is what it will do or if you want to remember hey how
conditionals work here's like a little cheat sheet for how if then statements work and you can come and always check this or you know if you forget for Loops
you can always see these examples that I've like written out in a very clear way because I know in notes here it's
not always so clear where the examples are but here they're very clear here's Loops here's working examples of Loops
right and then how do you find frequency of words in a phrase boom some more examples right so this will constantly
be evolving and more notes more exercises more projects are going to be going there but yeah I just wanted to
kind of give you the lay of the land I hope that this makes sense and I hope
that this is helpful for you all right with that said what we're gonna be doing is working on our first
python project I'm so excited to do this with you so let's go ahead and do this
one together now we have this app that we're going to be building together the counter app and
it looks gorgeous and it's going to cover quite a bit of python Concepts and
we're gonna do this slowly and one step at a time so it's not overwhelming and I've tried my best to make it as easy
and simple to understand for you as possible so what you're going to go ahead and do is click this project link
over here because we don't want to see the live demo right now and we don't want to see the solution right now so let's go ahead choose a project so once
you click this project it's going to bring you to this page over here okay and then all you're going to want to do
is hit Fork Rebel so you hit Fork Ripple and then if you haven't you obviously have an account I'm on Incognito but
you're just gonna go to that Rebel okay because uh once you Fork it it'll allow you to edit code so you must hit Fork
very important okay so go ahead Fork that ruffle CP counter app okay and then you could call it whatever you want you
could change it okay so there you go now in here we're going to be coding now here's how this app is going to work so
once you go here and if you hit run or whatever this is what your app should be
showing you home page right there okay so that's what it's showing you and
before I do anything else with this app I'll just walk you through what's inside
and what's happening in this app okay so so you're not overwhelmed now there's only one file you need to worry about
okay there's no other files that you need to worry about right now so that's the only file right there that you have
to worry about it's the first thing I want you to notice the second thing I want you to notice is here
okay we only have eight lines of code and I know there's some stuff that you
have not seen in that's in here before and we'll walk through that one step at a time okay so let's just walk through
line by line okay the first two lines I don't want you to worry too much about
but they are just importing stuff to help you out so you've seen me use a
little bit of importing in Python not too much of it but all we're doing here is we're just asking some other files
for help that's why we're doing import okay so there's a counter app that I've created for you which I have hidden from
you right now okay and that has some helpful functions that you'll need to complete this project so your home page
app show and DB and I'll show you those later okay but these are these are there
to help you that's what's happening in those lines so you can pretty much ignore these for now let's go to line
eight okay what's happening in line eight over here this line is simply
running the app all right and it's running the app on Port 81 or whatever which honestly even all these details
you can ignore I don't even pay attention to this I just see this it runs my app if you remove this line your app doesn't run okay so it's simple as
that this is to help you this is to run the app so that's it so
far now it brings us to kind of the interesting part of our code which is this part over here
okay so the thing you've probably never seen before is this guy right there okay what's this at sign and app.rout all
this is saying okay I'll I'll open this in a new page so you should probably do that too
all this is saying is that when I hit my home page meaning I don't have a path here or about or anything like that in
my URL when I hit my home page do the following run this function home
okay so for example I could also say only when I hit the banana page
uh give me a banana like this okay now make sure you stop and start your app
again so you'll have to do this pretty often you'll have to stop your server and run it again because if you don't it's not going to show the new changes
now if you go to your app and you refresh it's going to give you an error
and you could just go slash banana and if I go slash banana now you can see
that it's actually giving me back a banana right so that's how this works this is just
saying where this is happening so we're just going to leave it on slash our home page and now on our home page we'll say
give us a banana so I'm going to hit command enter you could also do that too that can help restart your app if you do
command enter and there we go I can see my banana is now on the home page so without going
too deep into it I just want you to understand what it does at a simple level it's just saying yeah on the home
page buddy show me this banana that's all okay now this function name here you
could call it whatever you want it doesn't really matter I could literally call it this right and if I start my
code it'll still um it'll still give me that banana okay so this function name is not that
important it's just important that it has a function name or at least that there is a function okay that's what's
important so that's what's important okay the function name itself is not that important here so I'm just choosing
it to call home because it's like when you go to the home page this slash
route run my home function that's all okay now there's this other part that's
happening which is doing uh which is doing this uh which is showing this banana part over here now
this is HTML so we are returning HTML here or we're writing HTML here uh which
means that if you have not seen HTML don't worry we'll do a whole video talking about a lot about HTML and what
it does and everything like that okay um because if we're doing some projects with web development with python you'll
have to know HTML and honestly let's be honest like regardless of any type of development you're doing especially in
2022 or after 2022 in some Modern year 2023 2024 whenever you're watching this come on like you have to know the web an
HTML regardless of what you're doing if you want to become a data scientist python engineer it doesn't matter
so for example I can write H2 which is a heading tag and I can say hello and and
close the tag with the slash right and if I run this you're going to get this like big sized
hello if I say H1 I'm going to get an even bigger size hello right so back to my point of what I was saying with
python and with python and essentially web development like
you have to know it whether you're trying to become a data scientist uh you know a a web developer a data analyst
whatever you're trying to do with python you're going to be dealing with the web either you're going to be scraping the
web pulling information from the Web building an app that's on the web interfacing with an app all of that is
gonna there's gonna be something there okay so it's better if you learn it um and we're just going to learn some
basics of it right now I'm going to show you very bare minimum but most important is like you're getting some HTML here
okay so that's what's happening here now what I've done is I've created a nice
little function for you that allows you to kind of show a much nicer looking
page because right now if you look at this page it's pretty ugly right but we can also style this page and do things
within this page to make it look better so for example I could even style it in
here and I could say style and I'll put double quotes here since I have single quotes out here and for my style I'll
zoom in a little bit here so you could see better I'll say background Dash
color colon and I'll say let's say red okay and I'll hit command enter and
Watch What Happens it'll restart the server and you'll get all of red stuff
here okay so if we did a lot of styling and a lot of HTML stuff here we could
make a nice looking page so I'm gonna help skip you a step and I'm going to take you a step forward really fast what
I've done is I've created this nice function called show and the show
function basically shows you whatever you give it so I could you know again give it some ugly looking HTML like this
and if I restart my server um hopefully it's going to show you some
kind of stuff so we're going to call our nice helper that we created show
and inside of this show it takes two things but we can also sometimes leave
it blank so right now what I'll just do is I'll give it home page okay so this is a home page that we created and so
I'm gonna give it that that home nice looking home page and let's see if it
can show that nice looking home page onto the screen so I'm going to go ahead and restart and hit command enter on
this and let's see what happens boom there you go all right so just like that
right our app is already up and kind of running and if you drag it down it'll
kind of normalize it but if you want to see it in the best view possible just open up a new tab here so you could see
it kind of in the best view now if you hit any of these buttons like for example plus the app will break and if
you hit minus the app will break so what we want to do is we want to
connect this plus button and this minus button so that they actually speak with
something okay because right now there's nobody to speak to and I hit plus you'll notice it takes me to the slash
increment page but our code doesn't know what to do with the slash increment page right like
if I zoom in over here right it says slash increment paths our
code knows what to do at this path when we go to the home page with the the slash or whatever it knows what to do
but when we go when I hit plus sign and I go to this increment page
our page has no idea how to react what to do it doesn't know
so think about this if in order to handle what happens at
the Home Route we need to do a slash like this this means root right the home
page if I want to handle the increment path aka the slash increment path right so
let's let's let me put some notes here so if this guy over here is root
this is our like rude or our home page right then
if we want to go to our increment path wouldn't that be just increment
right so if that would just be increment then we need to create another route
what we have on line seven that handles that so what I want you to do right now is just write one line of code for me
please that should be pretty much this much in length okay and it should be very very similar to
this line but it should basically handle what uh handle what happens or at least uh
mention what happens when we go to that route okay so it should be very similar
to this and see if you can write that I'll give you about five seconds okay if you don't that's okay this will give you five four three two one all right let's
do it together so all I'm going to say is I'm going to say app.route slash increment so now I
know that I'm I'm going to be handling my slash increment route
and all I need to do it to be to be technical in Python these things with the at sign are called decorators
they're a little bit of magic so that's why we're not going to go too deep into them but in this case it allows us to
handle what happens as at this route now right underneath it what we need to do is write a function so here's what I
want you to do before I even do this because this is just a python part so I want you to write listen to me very
carefully so you can turn this into code write a function called increment that
Returns the word increment that's all I want you to do let's write a word increment that
returns a string increment that's it so take five seconds try to do that this is pure
python this is no web development right now okay five four three two one so I
hope you took that time to pause and give this a try let's do it together now so I'm gonna go ahead and do increments
okay and I will say return increment okay so that's it that's all I'm doing
here now let's go back to let's restart the server always make sure to restart
the server it's very important it's a gotcha you're going to fall for a lot so don't fall for it hit command enter so
your server restarts and go here and by the way if you see all this red stuff at the bottom here right behind me they're
not errors it's just flask sending you red messages to scare you I have no idea why I wish they did it but yeah so okay
now let's go back to our app let's first go to our home page
okay now we're on our homepage now when you click this plus button it's going to route you to the slash increment page so
let's go ahead and click this bullets man we're handling what happens
at the increment page Isn't that cool that is awesome we're already handling
what happens at the increment pitch okay um and and we could we could put whatever we want here right we could put
a plus button we could put increment word whatever we want so all good we're
handling what happens now what we need to do when somebody clicks
increment is we need to update a number okay so for example if you click
increment then a function should run that actually increments a number
right that's what should happen that's why the user clicked the plus button so that big giant number could go up by one
that's the only reason they did it right so we need to add that functionality
okay so we need to have imagine there's some number okay so imagine we just had a variable number which we don't right
now imagine we had a variable number we would do plus equals one or Imagine This
uh imagine we had this imagine we had some fake magical database and we said
database equals okay and it was a it was a dictionary
like this and it said number and the number was Zero okay now let me ask you a question
how would you get access to this value right over here zero how could we get
this and increment this number by one how could we do that so if you remember
from your previous lessons with python if you're going through the full python course
is how do you access a key inside of a dictionary think about that how do we do
that how do we access a key and or a value inside of a dictionary well it's a dictionary right so the
first thing I'm going to do is I'm just going to say database and grab the number
okay and then what I could just do is I could say you know let's just first
print it out and let's just make sure that we we have access to this now anything that I print is gonna come in
here to the console so I'm going to make myself a little bit smaller so you can see this console right over here okay so
I'm going to make this a little bit bigger and we're going to run this app again and then all I'm going to do is I'm going to hit this plus button and
then once I hit it you're gonna see what it's going to say at the bottom here and you can see it actually saying print
zero okay now here's the cool thing our show
function is really really smart so what we could do to our show function is we
could also give it um it it also like if we look at our show function definition right show function
definition or let's say we call our show function here okay I don't know why it's not popping
up the documentation our show function what it does is it takes in a page and the second thing it
takes in is a number okay so it's a page and number so for page I want to give it the home
page so that's what we have done essentially here okay
and for the number if you don't give it a number it's going to assume that you want a zero but before we even do that
let's just do this first so when they click the page we don't want them to come to this ugly looking page we still
want them to come to the main page right because if we go to the actual solution file
which is this one right over here you can come back to the course and you
can hit solution right if we come back to the solution file right here
and we go ahead and look at the app here okay so not the solution file sorry I
meant to say if we look at the the demo of the app live demo if I hit plus it
goes plus but it brings me back to the same home page right so the page has not changed so what that basically means in
my mind is make sure the page is the same like
we're not changing the page at all actually so bring me back to the same page right so let's just give that a try
let's say that so now when we hit the plus button it should bring us back to the same page and we should still see
print coming up here which means that when I when I hit this button it's still running this function which is a great
sign so let's hit the plus button or sorry let's restart our server
and let's hit the plus button and watch what happened I'm still on this home page
yet it's still printing that database number zero so that's a very very good
sign right that's that's effectively what we want that's exactly what we want
so now what we want to do is the show page takes two things it's very very smart
so show input show takes in this function show takes in which page you
want to show and it also takes in a number as a second argument so it can show this page and if you give
it number it knows how to update this number based on the number you give it that's the cool thing about this
function show so say that I give it a number like 57.
okay let's restart our app so I'll hit command enter and let's see what happens
okay let's hit something plus and you could see that it's showing 57. right
why did it show 57 right now because I told it when I hit increment show
exactly 57 so every time I hit increment it'll show that okay we still haven't done anything with decrement so if you
hit it obviously it's going to do this because we haven't handled that routing yet so we'll do that next so what I want to do is I clearly can't
hard code 57 here right that's not a great solution but what I could tell it to do is I could say hey
um what I'm gonna say is
the number is this database one example so what we
want to do is we want to take this database number and we want to increment it how can we increment a database
number by one do you remember that from any of the lessons that we've done
can you think about how to do that I'll give you five seconds five four three two one so you could have used these
five seconds to pause the video but if you're not if you can't think about it to increment a number we just
do plus equals one so when I do plus equals one that will increment this number here so let's just
go ahead and verify that what we're saying is true so let's print out our database here
okay and um when I hit let's do command enter so it's it runs our app again and
then I'm just going to hit the plus button and when I do you can see every time I hit the plus button you could see
that the database number is going up so it's five and six and there's a problem with when you're trying to do this
within replica sometimes within this iframe uh it will refresh twice so just
go and open it up in a new tab hit uh start or you hit refresh and then hit
the plus button hit the plus button and actually let's just restart the app okay
go back to the home page now hit the plus button edit again oh wait
um yeah so you could see the database is now at 10 and now it's at 11. so you
could see that it just keeps going up and up and up and up and up and up so what we want to do then is we don't
want to give this a hard-coded 57 right if we don't want to give it a hard coded
57 what do we want to give it can you think about that so see if you could think about what
goes in there and I'll give you a hint it has to do with the database okay that's what we
want to give our function and remember these are named arguments right number equals page equals these are named
arguments not positional arguments to take about five seconds five four three two one all right so let's do this
together what goes in here is the database number
okay that's the number that we want to put in there so now let's go ahead and reload this app
and uh let's go to a new browser and let's hit uh refresh let's hit plus plus
plus plus wow look at that right every single time
it just keeps incrementing I mean isn't that beautiful every single time wow
what happens when I refresh the app goes up goes up because I keep going to that increment path right what happens if I
go back to the home ah it goes back to zero now what happens
if I hit plus it goes back to 23. interesting so why is that going to zero
that's interesting so what we want to do here is since we're we have this database number
it's it we're giving it to our increment but let me ask you this shouldn't our home route have access to
that too because right now the problem is when we go to the Home Route if you look at our definition of Home
Route home has no idea about the number because we're not passing any number
into here so it has no information show has no information about that so when show has no information about that what
show likes to do is show the number zero so let me ask you this how could we pass
show this number over here I'll give you a hint it's with pretty much the exact same line of code but in
here okay so think about that take about four seconds to pause the video and give that
a try Yourself four three two one let's go ahead and do this now so I'm gonna
give it the same number I'm gonna say database number
so this is a not a real database right it's a fake database that we just created kind of on the Fly
so let's restart our server let's hit command enter let's go right over here let's refresh this one and I'll hit Plus
and I'll hit plus and I'll hit plus and I'll hit plus so that's very good but let's go back to our home route so I'm
just going to go back to our home route and our home routes that's four isn't that great I'll hit five six seven eight
that is beautiful right that is awesome I can keep going keep going keep going
keep going there's only one problem
it stores the data when I'm refreshing so that's not a problem it's very good if I go back to the home page it still
remembers that I'm at number 16. that's very very good but
if I restart the server and we go back to the app
and we go back to the home page guess what it starts at zero well what if we wanted to make a counter
that remembers forever so meaning if you hit it 20 times and then tomorrow your
grandma used your app and hit it 20 times and then the day after that your paw your daddy
use your app and hit this counter 40 times to count his steps every second he walked
it should be at like a 60 or 80 or 100 it should remember all of that and it should never ever forget
right how cool would that be if your app has data that it can record even when you kill
the server and start it again and it remembers it forever so you know because this app is already
online right you could link this to people already but it would be much cooler if it could
remember forever so like how are many people use this app let's just say you show it to like 10 or 20 of your friends
they keep hitting plus plus plus and you see the counter is at like three thousand or five thousand right because
it clicked it so many times so that would be cool and then every time you come back to the app from any browser
anywhere at any time it'll still remember so for that what we actually need to do is we need to use a real
database and I'll show you how easy it is to use a real database
remember when we were using this fake database right over here and we said it has something called number and the
number is set to zero well let me tell you something that DB the word that I have over there for you
this DB right over here that's literally this guys it's literally this exact dictionary so like
imagine you just change this word from database to DB and you can use it the exact same way
the only thing is that this DB that I'm giving you is replits database which
means it's persistent which means that regardless of when you use this app it'll forever have permanently stored
that data kind of like a memory card when you played video games and it saved data forever so that's all you need to
know which means that you can really get you can comment down this line
and I'll just change it to DB don't run this line because that'd be terrible that'll break your app
but just know that DB looks literally like this okay I'll put
a Emoji so even if you commented this line out you won't mess it up right so just know that DB looks just
like this so then in order to increment the DB number it's that easy
you just change that word with DB
and you change this with DB and you change this with DB and DB and
that's it you're done like DB is literally that so there's not much to do except for just change everywhere with this database with DB and now you're
using a real database that's permanent so let's restart our app now
and let's go to our uh let's refresh right plus plus plus so we're at six
right now now I'm going to kill the server and start it again and you can see that you're getting some database
here right because I'm printing the DB so I could also print the DB number as
well and I could restart the server so now I'm going to restart the server and look at that it started at six
when I hit Plus right you could see that it's at eight and this number is coming directly from
DB now if I go to the this app right here and
we refresh this should be at a nine it's keeping track of all of it right all of it plus plus plus I can restart the app
again I can go back to this page and we can go to the home page now
and you could see it's still in 11 right 12. that information never went away so
just like that you have a full on database my friend
just like that and really all the lines of code that you wrote to make that happen were very
very little right we wrote this one two three four five five lines of code
and you have a nice looking home page which you know obviously looks nice once you uh you know open this app or just
stretch it out so you could see it kind of like through the whole screen right so once you could see it through the whole screen it looks great and boom you
hit plus and you get what you want right so in the iframe if you do it on Rebel it'll be a little bit funny like this
but if you do it here it should be fine and it should only go up by one every single time you hit it but now here's
the problem when I hit minus it goes to this decrement route slash decrement
right that route and it just doesn't know what to do the requested URL was
not found in the server if you enter the URL please check your spelling and try again and it doesn't know what to do it
doesn't know what to do so now I'm gonna give you one bigger
exercise and this exercise is going to be for you to figure out how to make the decrement path work from start to finish
so we're not going to do baby step it but you're going to be writing about four lines of code they're going to look
very similar to this with just a few changes where it might say increments
there might be another word you might be using there so pay attention to details don't just copy paste like one of my
friends was trying to do you're gonna change a few letters at least okay
uh otherwise going to be similar where you increment the number and decrement think about what you need to be doing or
you're going to increment the number when somebody hits minus no you're going to decrement the numbers your decrement
function will do that okay and then this line of code I'll already give you a hint this will look very similar or
pretty much it'll be you know it's a high chance it'll be the exact same okay so take about five seconds to pause and
try the try making when you click this button things work and then make sure to
restart the server with command enter or control enter if you're on Windows or just by or just by stopping and starting
again to have the new changes take effect and then go to this other browser and run your app and hit the minus
button run your app like go on back to the home page and then hit the minus button
right and then see what happens okay so I'll give you about five seconds to pause and try adding the decrement
functionality all by yourself so five four three two one all right welcome
back let's go ahead and let's add the decrement functionality together so it's
gonna be very similar right so I'm gonna do app.route and I'm going to say decrement this will
handle what happens at this path we've gone through this right and then I'm going to go ahead and call
my function decrement okay again these function names don't matter but I'm going to call it decrement here because
that's clean and it makes sense and I'm gonna get the number from our
database and I'm going to decrement it so I'm going to say minus equals one you could also do
multiply equals one and minus equal 1 is the same thing as basically saying
it's same thing as saying this okay but it's just easier to write it so I'm going to say minus equals 1 here
so I'm decrementing it by one and then I'm just going to go return show so we're going to show
the home page and then for number
I'm gonna show the database number okay that's that's
the number I'm going to send to my show function okay so I think that that should be it
let's give this a try now so I'm gonna restart the server with command enter
the server is restarting let's go back to our main app right over here if I decrement this should go down by one so
let's try it hey let's go if I hit Plus
beautiful right it goes up by one we hit minus it goes down by one right every
single time so there it is just like that your very first app is
done and if you want to show it off to everybody just take that URL make sure
you take the home page URL right here and just send it to anybody you want
right now and they can use it now this app is not mobile friendly so it might not look good on their mobile device
but it is web friendly so as long as they're on the website on their computer desktop friendly so if you they're on a
desktop it'll look great and it'll work great so look at that you did this with just a few lines of
code Isn't that cool you did your very first project with python I mean this is
mind-blowing I'm so excited for you that you got this done
I'm just I'm excited I'm pumped you got this done congratulations uh this was
wonderful and uh with that said let's keep on going and let's build some more
amazing stuff all right what is up now we build this amazing app that is great but how did we
build it and how did we build it so easily so there's a lot of mystery around this app for example what is this
home page thing that's happening and what's up with the show function that just magically does everything in
reality things aren't going to be this easy for you right now the truth is that there's a lot of stuff that I'm hiding
from you and I've done a lot of the hard work for you and so when you're writing the code you only have to write a few
lines of code and then everything works so we're going to unpack and demystify this app into its component parts and
see the real truth about how this is actually made and you're gonna build it with me from
scratch and we're just going to unpack one thing at a time until we're fully unpacked where there's really no
abstraction that I'm offering you just have a fully built app with python now
let's start off with the simple things first the framework we're going to be using to build this app is called flask
flask is a web development framework very popular with python and allows you to build apps really easily when you
think of flask you could think of it kind of like node.js and JavaScript now if you're a beginner none of that might make any sense to you and that's fine as
far as you're concerned when you want to do stuff on the web with python you use flask as simple as that there are other
Frameworks like Django Etc we're gonna keep it with flask because flak flask is the simplest and easiest one to
understand and when you get more advanced I think you could go on to Django or something else but flask is very popular lots of apps are built on
it so let's go back to our app right over here okay now we have a bunch of uh
things that that we don't really fully understand like what is this counter app file what's this home page what is this
app what does this show what is this database thing okay so let's deconstruct kind of one thing at a time with our app
now the one thing I want to deconstruct First is let's go ahead and start by
deconstructing um deconstructing this show function
okay so what the heck is show and how is it working now in reality you won't have
a flask a function called show okay what you will have is a function called
render template string so let's go ahead and play with that real quick so I'm going to say from flask import
render template string okay so that's what you're going to have
now on this home page I'm going to go ahead and comment out this line just so it's there so you can see it in
comparison but we won't be using it now if I run my app let's just say return
hello and when I run my app you'll see that it won't look very great you should only
see Hello right over here okay now let's start from there so I see that hello
how do I write something so it looks a little bit nicer so we can use obviously
we can just write regular HTML here but what we want to do here is we can also use render template string so I can
do this render template string and I can go H2 and I can say hello and end H2
okay and now what it's going to do is going to go ahead and show you that hello but since we're using HTML so
it'll look bigger and kind of bolder now since we're using HTML
and we're going to be using a lot of HTML let me go ahead and just kind of introduce you to HTML okay with python
um you know or with anything really in general it's like hey how does how does web development work what is this HTML
CSS stuff if you've never been introduced to it before it might be a little bit confusing but let's just go
ahead and do this together so I'm going to go ahead and from flask instead of
importing render template string but I'm actually going to import is from flask import render template okay just render
template just that right or actually you know what let's leave it as render template string let's
leave it as that and I'm just going to go ahead and create a variable we'll just call it HTML for now and I'll put
three um quotes like this so this will think of this as like our HTML file okay what we
would make and HTML files usually have a certain structure but I will just say
okay we have a H2 and that says hello end it and and whatever I wrote here in
this HTML I'm gonna just go ahead and pass it to my render template string so I should see essentially the same thing so let's remove this and let's give it
our HTML you could call this a variable whatever you want we could call this um my I could call this my home page
okay so it's different than this home page that we're being passed I'm gonna say my home page right there and let's
just copy and let's paste this okay let's run this now so if we give this my home page okay we're getting an
error so let's do that and let's see if that still gives us an error it doesn't and that works okay so you can see my
home page is being rendered out now what else can I do with in HTML well
I could have an input box if I wanted and the input could be you know type
uh type text so now if I run this
I can see that I'll have an input type right over here but type text
okay I could also have a button if I wanted so I could do input and I could say type is submit
there's multiple different ways of doing buttons and make sure you close this tag with the self-closing tag like that
let's run this okay and now you can see I have uh input
thing that I could actually type in and then I have also the submit button showing up okay in this input I could
actually have have a placeholder that says let's say username let's run this make sure you do command enter that'll
restart your server and there you go now it says placeholder is username right over here
okay or clever clever cozy whatever right I want it to
be so we can write H2 elements we could also write H1 elements in our H1 is even
bigger so you could go H1 or if you want to go all the way you know hello
say welcome back and then you could go all the way down to H6 it's the smallest
and I could do this and let's run this okay and H6 again is going to be the
smallest you can see I have that this that and then I can also make input
Fields right and HTML is very nice and I could have things like P tags so I could have a P tag and the P tag could say
hi my name is qazi okay PTAC boom
and we run that okay let's restart our server so let's
do command enter and there you go P tag is showing so P
tag is a paragraph tag so if you want to write like a paragraph or like a text you normally will wrap it in P tags if
you want to have inputs where the user can type in or do something then you'll call them inputs okay kind of like this
H6 is heading six so that's the smallest heading and H1 is the biggest heading so
you could do all kinds of stuff like that now what I could do is what if I wanted
to wrap all of this and color it red how could I do that well
I could uh let's start off with how could I wrap one thing and give it a color of red so let's just say welcome
back if I want to give it a color of red well what I can do is I can create a div and divs are these like these boxes that
you're creating around things and I can wrap this H2 in this diff okay in this div right here so you can see I have
uh let me zoom in a little bit more okay all right there we go so you could see I
have this H2 and I've wrapped it in this div okay so in other words all I've done
in my mind is I've created this empty box around this and now I can control that box and I can
style that box and I can do whatever I want okay so that's all I've done that's all what a div is doing
now what I can do is I can do something called so there's something called CSS okay so here you're learning a little
bit of HTML and then there's CSS so CSS is the styling of a page okay so HTML just
gives its structure so it just shows the page but CSS is how the page is actually you
know it gets styled all right to explain to you what styling is and how it works say I go to Netflix you could go to
youtube.com or really anywhere and say that I I right click here can we turn this off
okay so say I right click here and we hit inspect element okay now inside of
inspect element say I go to the uh to the Head okay and
usually in the head of a HTML page okay so this is usually how HTML page is structured and you can even highlight
things on the HTML page so I could like go here and you know we could see like all right
this is like a HTML div you could see it says div and then it has an image inside of it and has a number next to it Etc
but let's go ahead and I'll unselect this okay and I'll go all the way to the
top and so you'll see like HTML we have HTML although at the top and at the bottom so that's usually how a HTML page
is structured and then it'll have head it'll have body body is usually where you put all of your content okay so
that's where like binge-worthy TV shows and all of this will go okay head is
where often times people put styling okay this actually always where you put
your style file or you link your style file so let's go ahead and remove the style file and Watch What Happens so
I'll go here and I'll basically what I'm trying to do here is I'm trying to find anything that says style sheet so you
see where it says Rel style sheet it's usually a style sheet I'm going to click it and I'm just going to delete it and
then click another one delete it click another style sheet and delete it so once I've deleted all the styling on
here now there's essentially no more styling left so look at this this is actually how Netflix would look if you
didn't have any styling this is what it would look like okay and you tell me if this looks good
it doesn't look very good right this is how this is how everything would be looking on Netflix this is Netflix
okay hard to believe right very hard to believe now and then you can see that like list
over here it looks so hideous right all of it just looks terrible so if I hit inspect right in our in our
head is where we removed it from and if we refresh this page now
you'll see that the styling will come back the style file is linked and now boom all the styling is there okay so
that's just a little bit of how HTML and styling Works in real life so here's how I can add styling here now
in our app I'll zoom out here so inside of our app I'm gonna go ahead and say this div that
we created here right this block right here that we created I want to give it a color red so I can actually say
background Dash color okay and let's put some uh we're gonna
put quotes around it and we're gonna say style equals I'm
gonna say this and I'll give it a color of red let's say and then end quotes and put a semicolon here
okay let's go ahead and restart our server now let's see if anything happens
okay we don't have any changes yet ah so this quote should not be here actually
so let's remove that quote from there let's do it right here okay so we basically want to say style is an
attribute and the style that we're giving this is a background color of red
so now let's hit command enter and run this and now you can actually see that that div is red okay so here's what I
want you to do I want you to make this entire thing red so do that as an exercise okay real quick and basically
what you're doing is you're going to be wrapping the entire thing in one box so a hint for you is you should only write
one line of essentially two lines of code and you should only create one new div and your
div should wrap everything all of the content inside of that div
and then all I want you to do is simply just go ahead and say color red okay
background color red and once you do that that should be good to go okay so I'll give you five seconds to pause and
try it on your own five four three two one all right let's go ahead and do it
together now so since I want to put everything inside of a div I'm just going to wrap the whole thing inside of
a div okay and I don't need to indent it but I just like to indent it so everything can look cleaner so I'll just
go ahead and indent that all right so there we go and the CSS part just so you're confused
the CSS part is this part any part that has styling that's CSS this is literally
that's the CSS part and then the HTML part is like the entire thing is the HTML Port okay
all right so you know think of HTML as like the skeleton or the body that you
have and then think of CSS as the clothing or the Fashion on that body so
the shirt that I'm wearing is CSS okay but like my body and my actual skin
that's more like HTML that's a skeleton the structure that holds me up
okay now that I've put everything inside of that div I can just go ahead and say style I'll
say background Dash color red
okay let's run this and you can see the entire thing is red now okay so that's just to kind of give
you an example of how things are working under the hood and how you would create your own HTML
now I'm going to remove this annoying looking red and we're going to move on to the next part of our application
let's remove the Reds here okay let's remove all of this I'll remove this entire div and remove this entire div
and we'll hit command enter so we restart the server okay and let's remove
that div there too we don't need that anymore
okay let's hit command enter here and so just so we can have everything clean and
nice okay just like this now if I go to our final version of the app which is this right here
you will see that I have two buttons okay so these are two buttons just like this button that we created the only
difference between this button and this button is that their styling is different but they're still both buttons
that's it alright so this just has a different styling and I'll even show you
a little bit of how you can add styling but in this course we're not going to go too much into styling okay that's not my goal my goal is to keep you focused on
the python aspects of the course all right so that's what's happening there okay so they're they're both of
them are buttons so this page will have two buttons but watch what happens when I click a button right so if I click a button you'll notice that the URL at the
top will change and say slash decrement slash decrement so I'm going to click it
and Watch What Happens boom look at that so how is that happening how is that saying slash decrement over there and
how come when I click the plus button it takes me to slash increment okay well
let's go ahead and see that so what I can do is I can take let's say an
input so like I'm going to remove um let's say I make a new button okay and I'm going to remove both of these
for a second and to make a new button I'll say form okay and we'll close form and inside of
this form I'm going to put an input and it'll be a self-closing tag and we
will say and self-closing tag just means when you open a tag in HTML you have to
close it like this so if you open an H1 you have to close the H1 okay H2 you close H2 if you put a div you close the
div same thing with form if you open the form you got to close the form now in this input I'm going to go ahead and
just put a button and so I'm going to say type submit okay and um yeah we'll just leave it as
as uh as that okay we'll leave it as that now the only problem with this type of
button when you put submit is that you can't really change the text so instead what
I'd like to do is I'd like to just say uh button and say let's say
um strawberry okay and we'll close this button and now
when I run this so let's restart the server I'll hit command enter you can also stop and start again now I should
just see the button strawberry okay and also open this in a new tab because you'll need to open a new tab in order
to see the URLs changing okay so keep this open in a new tab
and what I like to do is I like to open this up kind of one third of the two-thirds of the way and then I like to
take the app that I'm trying to see and set it one third of the way so that way
on the left hand side I could see code and on the right hand side I could see my app
all right so now I have this button but when I click that button if I go all the way to the end my URL
doesn't change yet so how will I get my URL to change so what I want to do here is I want to say
action and for the action of this I want to give it
a path so I'll just say strawberry okay so when you click the strawberry
button it'll actually take you to the strawberry page
all right so now let's go ahead and try I'm going to full screen this so you can see this I'm going to hit strawberry and
Watch What Happens okay actually let's refresh our server so I'm going to hit command enter
okay and then let's go ahead and give it a try we'll refresh here
and I'm going to hit strawberry and look at that it took me to the page called strawberry
right so now so this is us working on our front end right now okay we connected our back end earlier but now
we're actually building out our front end the client side of the app and we're we're making it work so if I click
strawberry that's very good if it's taking them into the strawberry page now
let's go ahead and I want you to try making a button on the home page okay so
go back to the home page of the app and the button that I want you to make should be called banana okay so when I
click banana it should take me to a URL route called banana so I want you to give that a try right now I'll give you
five seconds five four three two one
time okay so uh if you've paused the video and
give it a try good job if you haven't that's okay we'll do this together now so I'm going to create a form all right
and we'll end the form the action of this form will be banana and
the button will be banana just like this okay so this will give you a button and this
form action thing is what does the thing that does the magic of like when you click it it actually takes you to that
page okay the action is doing that so let's keep going here I'll do command enter and we'll restart this app here so
just make sure you come here and you refresh okay once you start now you should see strawberry and banana and I'll full
screen this so you can see URLs changing so I'll click strawberry first and you
saw it change now I'll hit back and I'll click banana now and you can
see they're actually going to the banana route now that's very good now let me ask you
this since we're doing that that's awesome how do we actually get
uh you know so if we go back to our completed app so let's take this app and
let's put that over here if I go to my completed app right this part is very good like if I
hit this minus sign it changes the URL if I hit this plus sign it changes the URL but these buttons are also connected
to code remember so for example when I click this minus sign it actually
runs this function over here so how do I connect my strawberry and
banana in a way so this um like a like a strawberry
function runs or a banana function runs when it's clicked okay maybe maybe uh
when you go to this page instead of it saying not found it shows a if I click strawberry instead of doing that it
actually shows me a strawberry emoji and when I go to the banana page it shows me the banana Emoji how could we do that
so I'll tell you this you actually have all the information you need to be able to complete this this will be a
difficulty of like six or seven you need to just recall and put things back
together kind of like how we did for increment and decrement because you already have the pages routing you so it's very
similar to the exercise we've already done so I'll give you about five seconds to pause give it a real try and then
come back and let's do it together five four three two one time all right if you
give it a try and you got it good job if you didn't that's all right we'll do it together
so I have these two forms right and and I have these routes so when I think the
route in my mind I'm already thinking I gotta make that route so I can just do app.route
and I can go ahead and do strawberry and the function that I do is going to
be called strawberry okay and what this function will do is
I'll just have it return strawberry that's it it's literally all I'll have it do okay let's hit command
enter and then let's click strawberry and look at that that easy so
you have the front end part you've made this button that's your front end part
you did okay and this is your back end part okay where your front end makes a
request to the slash strawberry page that shoots it over here
then this piece of code runs on your back end or server side it gets this on
the server's side and then it returns that okay
it returns that back out to your front end to your HTML
okay so that's like a it's a relationship there's like you're going from client to server side to client
side okay I know it sounds complicated right now but over a long period of time
these terms will start to make sense okay but you're going from front end to back at the front end okay so this HTML
part right over here is the front end part in other words whenever I say front end it's the stuff you can see and touch
so this button over here right when it shows up that's something you can see in touch so that's front end
this year you can't see and touch this is happening on the back end but then when it shows it back up here and you
can see and touch it again it's you know that it's showing it on the front end okay so usually things you can see are
easy way to sit that's front end things you can't see AKA you storing data in a
database that is more of the back end so we've already done this now I want you to go ahead try and adding the banana
route so that when I click the banana button it actually shows me the banana Emoji so I'll give you about five
seconds to pause and give that a try five four three two one all right let's
do it together now so I'm going to go ahead and I'm going to go ahead and say
app.route and we're going to do banana that alone is already going to run this
piece of code here that I'm about to write and I'm just going to go ahead and say return banana okay if you don't have
emojis go get emojis make sure you're putting it in a string okay putting those quotes around that it's important
and uh if you don't have a mode you just use the word strawberry or banana that's fine okay now let's restart the server hit
command enter and then hit banana and there we go now we are seeing a banana
output it to the screen when I click that button so just like that with that much ease
here's what you've done okay this form button here
is what's showing this guy okay specifically this form action here
is what's updating the URL once you click all right and then
this guy over here is rendering what happens on the next page once you click it so once you click it
right this is the guy that's showing all of this
so that is how all of this is Magic is actually working okay so those are the buttons that you
didn't have to create that we essentially helped create for you now how will you convert this from
strawberry and banana into increment and decrement well think about it right
you will still have a form and an action and you still have two buttons so let's say that I get rid of all of this stuff
over here right I don't need that and let's say I get rid of all of this stuff over here let's restart this let's
refresh this if I go to the completed app there are two buttons that's it those are the only two buttons we
actually need right here right now let's go back to our app we
got two buttons so that is good now let's look at what those buttons are called This is called minus sign this is
plus sign those are the titles of that button right or the names or whatever so simply we're going to change the
strawberry with a minus sign and this banana what will we change that with you go ahead and do that part I'll give you
three seconds you could do this in three seconds three two one we're gonna give it the plus sign okay
so now we have two buns let's hit command enter so it refreshes let's refresh our page and let's see what
happens great so now we have two buttons here that's very very very very very very very very good now we need a number
at the top we need a big huge number just like this at the top so here's what
we're gonna do I'm just gonna go ahead and let's say uh for now I'm just going to do H1 and
I'll just say 23 okay and we'll we'll end this H1
okay and then let's run this
okay let's refresh this and there we go we got 23 and we got a minus and a plus now when I click this minus I go to the
strawberry page when I click the plus I go to the banana page right but that's not what I want to happen what I want to
happen is I want this increment function to run and I want this decrement
function to run once I hit this minus sign and this plus sign
so if I want those things to happen well I can actually just change the names to increment and decrement right because
this button is decrement so I can actually change instead of strawberry or whatever I could just say decrement
right there and instead of banana right here I could say increment right here
now what's happening is it's actually going to run those functions at the bottom okay but I'm going to remove all
of these show commands okay we don't need those commands for now and let's say we even remove this
render template string command and home I'm just going to say hey render my home
page that's it so all of these I'm just going to have them return my home page for now that's
it so if we run our app hit command enter and let's run our app and let's refresh here we should still
see the same exact app right now okay so nothing should have really changed that much now when I hit the minus sign I want to
detect that I've hit the minus sign so we can add a print statement or we can have it say return so for now let's just
have it say return and we will say um you know we we land on the increment
page increment page and here we will land on the decrement
page okay so I'm going to hit command enter let's hit minus sign and you can
see I entered the decrement page and if I hit plus I enter the increment stage
so this is a really good sign so far because it means our buttons are connected which means even this is
happening this DB number command is happening so whatever number is stored in our database is actually going up
so I don't need this strawberry and banana route anymore I can actually get rid of them those are there just to help
you kind of understand what we were doing okay now the next thing is I need
this number to be dynamic because right now this number is not a dynamic number it's a
um hard-coded number but that's not what I want I want this number to come from the database now this is the HTML part which means
this is the static part okay so usually any HTML CSS code is static which means HTML does not have it's not a
programming language it doesn't have the capability to like calculate stuff and
do stuff it can just show what already is meaning that HTML can automatically go from 23 to 24.
okay it's static it can't change so what we need to do is
use Python to get the updated number pass that number back to HTML and then
HTML can show it in the front okay that's kind of how the relationship
between HTML and CSS and and python works here
so how do we give it a number well if I do just return my home page or return
increment we can't pass it any data okay so how do we do this in that case well
how let's just start with the my home page how do I give Dynamic data to my home page so it can actually render that
out over here here's what I can do I need to actually call my render template string function that I had
imported from flask earlier okay so I'm going to go ahead copy this render template string
and I'm going to paste that over here render template string okay and render template string is a
function that takes in the path so we'll give it home page or our my home page this this one that we just created over
here we'll give it that as a path and then it takes in like what are the arguments that you actually want to send
it okay which means like uh you could send it a whole bunch of
information and it will have access to it on in the HTML side okay so for
example I could actually say here's a cookie okay and I can actually give it a cookie now
I can change this cookie variable right over here my HTML will have access to it okay but
in flask there's something called ginger templating j-i-n-j-a and that allows you to write
like python flask code inside of HTML so it can basically allow you to make HTML
Dynamic so here's what I mean instead of just 23 I could actually change this with the
word cookie and now whatever is the value of cookie that I'm storing here it'll actually
pass it right there okay so let's go ahead
and uh hit command enter and let's refresh and let's see if we get a cookie
at the top there we go you could see that we're actually getting back a cookie at the top so we we're giving our
page access to some data and it's able to retrieve it so I could pass it
multiple pieces of information for example I could give it a cookie variable I could also give it a
um age variable and let's say age it says 28. and now we have access to the edge so I
can go ahead and say age is and I can see the age variable
right there okay so now if we restart this server and hit Refresh on our app
you could see age is 28 it's whatever I passed in here it's passing it in boom right there
right so let's go ahead and delete the H because we don't need that and for cookie we don't really need the cookie
right well we actually need access to is the number and the number we can get
from our database so I could actually say DB number okay now let's go ahead and
refresh so I'm giving it access to number and make sure that this is the number that we want to pop in here so
replace this variable cookie with this number so go ahead and do that now give you three seconds to do that three two
one time let's do it together boom I'm just going to change this number hit
command enter and simply refresh now it's going to have the number here
uh that's in our database okay now if I hit uh since we've connected I believe
let's see whatever we connected so we have increment working except when
you click increment watch what's going to happen it's just going to take you to this page that's going to say increment but when I
come back right nothing now if I refresh you'll see it says one so if I actually go here
it'll take us to the page increment when I go back and refresh the home page it'll say too so incrementing is
happening we're incrementing the database except we're going to a
different a completely different page okay and later we're going to deconstruct what databases as well what
is this database thing it will deconstruct that as well leave it as a note here for now
so here if you notice in our finished app when I hit minus it
renders me back to the home page it doesn't take me to a newly designed page so we should still be using this exact
page that we've created here and we should just reuse it okay so this page here we should just reuse that page so
I'm going to go here and return I'm going to say my home page okay and we're
going to say render template string so you can see render template string allows us to pass arguments to our back
end okay boom and render template string my
home page and then the argument I'm going to give it is also number DB number
so now increment page is going to look exactly like our home page and this number is going to be updated
dynamically because it's literally going to just run this pop in the dynamic number and then output that number okay
so if I full screen this app let's go ahead and actually hit command enter so we restart our server let's go ahead
here and let me hit plus sign whoops getting an error let's refresh
first let's hit plus sign now okay what's happening here let's go ahead and check
uh okay let's go ahead and make sure we're going to the right page so we are going to the increment page
so let's see what the error is I'll open this up so I could see what the error is it says my home page is not defined okay
got it so it's uh it's my home underscore page okay like this so I just
had a misspelling and you can use you know just debug your code and you'll be able to find your errors let's go ahead
to our home page now and now let's hit plus and watch what happens you can see that I got routed to
increment and boom it changed to six now hit let's hit plus again boom it changed to seven plus again boom it changed to
eight nine I clicked it twice it's eleven so that
is working completely okay so now I've changed my this function over here pretty much to
not be using the baby guardrail code that I had for you right the show function you're writing your own actual
factual flash code to make this work so very very good now what I want you to do
is make decrement work so we've made increment work from scratch try to make decrement work by yourself I'll give you
five seconds to pause and give it a try yourself five four three two one time
all right so let's make this work if you have good job
if you haven't let's do it together so I'm still going to be decrementing the database number and here I'm going to pretty much just
do the same thing because I'm returning the home page and giving it the number that was just updated so now decrement
should be done okay so let's hit command enter so we restart the server let's
refresh here just to be just to be clear and if I hit minus right you could see
that it took me to the decrement page and you could see decremented this number let's hit minus again minus minus
minus let's hit plus plus and it's working perfectly okay now
let's go ahead and destructure we still need to so we have pretty much destructured and deconstructed all of
this code into real flash code we're very close uh we just need a couple of more things
and then we should be good now uh so this show function you won't need
it anymore you could actually delete it in this home page function that I gave you you won't really need it you could
delete it okay now what we need here right is
um we need to understand what this database thing is so here's the cool thing replit comes in with something
called a database it's very nice and they make it very easy to use so if you want to use it
here's instructions just click it and you'll if you click this insert over here it'll even insert this code for you
so I'll hit insert that's it so once you import this database you can just use it
just like how we were using it and we would just say DB and then we just use the DB and that was it so now you don't
even need access to this DB that I was giving you for my counter app because you now know how to get it you can just replit import DB so we're done with the
understanding of the database okay and we're just going to write one line
of code which will account for what happens if you're running this app for the first time if you're running this
app for the first time and you never had a database if you try to Index this number thing and this key was never
created you're going to get an error okay so for example if I'm in Python and I'll go into shell
and I'll type in Python okay and uh let's say that I create a variable
called thing okay thing or or a database okay and it's a empty dictionary let's
just say if I try to go ahead and grab a number from there watch what's gonna happen I'm going to get in there it's
going to say what the heck there is no key there's no key so what I want to basically say is I want to say hey if
number key is not in my database
well then I just want to go ahead and create that key so I'm going to go ahead and say
uh database number and I want to just set that equal to
zero because that's where the default number should start from okay so I'll do that and now if we look
at the database you can see it actually just created this so now if I try to index it
or if I try to increment it it won't have a problem it'll just allow me to
do that without throwing an error right you can see it's incrementing and I can keep incrementing it
right and now I print it out it says number is three because I incremented it twice so on and so forth so this line of code
here we're just going to write that right here so I'm going to say if number
not in DB then DB number just create a new key
and set it to zero okay so this is like useful for initializing the database if it's not
been initialized yet okay so we're done with so now you're completely done with understanding the database and how it
works and if you actually command enter and run this app from scratch let's refresh
it will everything will work so if you hit plus it'll work if you hit minus it should be working
okay very very very very very very good great so we're done with that part when it
comes to understanding the database you know we're done okay now what's what's
left what's well what are some of the other things that you have to kind of understand or you have to know so the
next thing I would say is this app thing where's this app dot run
coming from how are you doing app.rout whatever this is a flask app that you actually initialize at the very start of
your app so whenever you have a flask app here's what we need to do from flask we need to actually import flask this is
a very important step of any flask app that you ever have most of the flask apps that you create
will kind of come with this default code written in okay the next thing that we need to do is we need to Define what app
is an app is just flask and name okay and this you honestly will never have to remember or memorize you will always
just look it up how to initialize a flash Gap and this is how you'll have to initialize it okay so this right there
just initializes a flask app and uh creates it for you and then in the future anytime you do app.something
app.run for example it runs this flask app that you created okay so this is
like something you can memorize or just look at it and copy it next time you don't really have to try to understand
it too much that's just how you run a flask app so now we don't even need access to this app
thing that we were getting from counter app and as a matter of fact we don't need access to counter app at all we can
get rid of this whole darn thing and be left with this and now this is
completely all of your own code with no help code from me right now okay so
let's go ahead and hit command enter and let's run this again so I'll refresh
okay and now if you hit minus it'll work minus right if you hit plus plus plus
there we go okay everything is working now the only thing that's not looking very good in
this app obviously is the styling The Styling looks kind of terrible so let me show you how you can get the styling as
well okay and let me show you really the Santa is not real type of situation here so I've hidden a lot of things from you
if you actually click here and you actually click show hidden files Okay click here and the three claps
collect collapsible dots right there and hit show hidden files you'll see
there's a bunch of hidden files so I don't want you to worry about this file config and I don't want you to worry
about this file vent okay the only files I I have the solution for you right here
and I have the raw solution for you right here okay so this is the solution with the guardrails the baby guard rails
and this is the actual factual truth the raw raw raw code that you would have to
write if you coded this app up from scratch okay so those are they're available for you
if you want to see them now what's interesting is I want to show you this static app where there's a CSS file and
here we've written already a bunch of CSS for you which is the styling for the app so you don't have to do really
anything um you just have to import the style file and then your app will actually
look really good so let's go to our main.py file okay and
at the top right here I'm actually just going to go ahead and import this okay and how I'm going to import this is I'm
going to go ahead and say link and we're going to say Rel
stylesheet okay and we're going to say href
and I'm going to give it the path of this file right here okay so the path of this file right here is actually dot
slash static because I need to go to the static folder and then inside of the
static folder it's right there so I can say static slash counter underscore styles.css
close it out and then that's it you can end the tag or you could just leave it like this
either way it works it's a self-closing tag so that should be good and that will link your styling okay
so let's go ahead and let's run this and let's see if it actually makes a difference so let's hit
start wow look at that right it's already looking so much better so if I oh full
screen it look at that the no the minus sign here is looking good right the plus sign here is looking great that is
awesome this is already styled um now if you want to put these buttons
so they're in a row and not in a column like this all you have to do just wrap it in a div okay
so let's go ahead and take these forms and wrap both of these in a div I'll give you five seconds to try it on your
own five four three two one let's do it together now I'm just gonna go ahead and
say div here and I'll set div here and just indent this so it looks nicer
okay I hope I select it all and I just hit tab or shift and tab to bring it back
and let's go ahead and refresh and now your minus and plus signs should be above just like this they're looking
juicy now right they look great awesome and the last thing we need to do is make
sure that our 12 right looks like that 18 right because it has a yellow circle
around it and so the secret for that is if you go to our styling and I'll kind of explain some of the
styling to you here as well I'll open this in a new tab okay so some of the styling that you're
seeing so if we look at this here right I can I can change things inside
of my styling app as well that'll obviously change uh how my styling looks but for example let's take a look at our
forms right or our buttons so this is the styling that's showing that so it's
like for example it says Hey make the background color this so you can see the little gray outlines make the color of
it this or transform 1.1 so when I hover over it you see how it becomes a little bit bigger
right like a little bit bigger right there right there right that's happening because of transform and the transition
is making it happen over a period of 0.2 seconds it happens pretty fast so that's
what it's doing and you can see it says button colon hover so on Hover do these
okay and then the styling that we want for our number is going to be in our
span tag so instead of putting our tag inside of an H1 if we want to put the
big circle we want to wrap hours in a span tag instead so let's go ahead and put this in a span tag actually like
this and let's go ahead and end it in a span tag like this and let's go ahead and
refresh our app okay or sorry let's hit command enter first so we can restart our server
so it serves our new static file and there we go okay our app is looking and
doing exactly what our finished version of the app was doing all right so I hope
that that deconstructed and demystified a lot of what we did just do let's just do a quick recap of everything that
we've done right we have a flask file uh flask app and we need access to our
template string we got our database okay we initialized
our app right here and we initialize our database right there we created what our home page should look like and that's
div my bad okay we created our home page and what
that should look like and then to our render template string we gave our home page and then the
database number and we did the same thing for all of our paths we created an increment path and a
decrement path so if you click the minus button you come here and if you're the plus button you come over here
okay um and then here we're obviously just
running the app okay so that's all we did and we got the entire thing
uh pretty much up and running okay now the last thing I want to do is for organization purposes normally you will
not write I mean after this app you will never write your HTML here okay that is
a good way to do it when you're a beginner and you're just starting out but what we want to do is we want to have our own HTML file so let's go ahead
here and I'm going to also hide hidden files because you don't really need to see all those files it's not necessary
we'll create a new folder and we'll call it templates inside of templates I'll add a new file
it'll be called index.html so this will be our HTML file okay and we're going to
take all of our HTML code and we're actually going to just put it in here
okay now we don't need my home page anymore so we actually don't even need
to use this home my home page that we created here okay and what we're going to do
is instead of render template string we're actually going to import render template
from flask just render template just like that okay and then let's scroll down
so we're going to replace all of this with rendered template render template render template
okay and then instead of my home page I'm actually just going to give it the index.html file just like that
so now it's just rendering this file it's very important you put in the templates folder if you don't it won't be able to find it okay because it looks
inside of a folder called templates this function right here render template and there you go it's going to just go ahead
and use that file right over there okay let's copy this let's paste it okay
so we're done and you can essentially comment this out now you don't need this I'm I'm just going to go ahead and take
this put it below I don't really need that anymore okay I don't need this statement
in there anymore I don't need the show function right there anymore right
um there we go okay now let's go ahead and run this app
and see if it does what it's supposed to do or if it crashes let's refresh and looks like it's the same right boom
beautiful plus minus minus right it's working perfectly so that means that
we're pulling all of our data from our index.html so now it's much more organized meaning that our our
client-side logic and our on our backend logic is separated so here
right we have all of our client side or front end
logic all right and that's separated from all
of our logic here which is essentially our like
um let's say server side or back end logic okay so they're
they're separated now which is really nice and uh yeah you preferably you don't
want to have like you want to have each file right should have its own language specific code so for example a CSS file
should have CSS code HTML file should have HTML code a Javascript file should have JavaScript
code a python followership a python code before we had a python file and had a bunch of HTML coded and I think that's
that's plenty confusing we don't need to do that right and CSS we don't want to go too
much into CSS but uh how it works essentially is if I go here
and I show you for example the span tag if you want to style the span tag you
call the span tag right here in your CSS file and you just give it styling if you change anything here you'll see your
spam tag change and I encourage you to try to change things and see if you can break things and then bring them back by just undoing right and see what happens
um you know you could change your div style it you could change your button styling you could change the font size
on the button right you can make the font bigger or smaller you could make the button with a bigger bit with bigger
smaller height bigger smaller you can see what changes that makes and if you want to get access to counter underscore
Styles file then make sure you hit show hidden files so you can show you all of the hidden files that I'll just keep hidden for now
okay so hopefully you had fun with that project that hopefully deconstructed a lot of the mystery for you with flask
and python you should now have your very own fully functioning python app from
the ground up if you want to see any types of solutions you can click raw solution and this will show you the
solution that we came up with right now versus the guardrail solution that you
should have came up with earlier uh it'll show you the the helper file that I wrote for you it will show you
the Styles file that that we have for you so I'll show you everything okay so hopefully that was helpful I hope that
you enjoyed it and things made sense hopefully you weren't too confused and with that said I love your face and I'll
see you in the next project now we're gonna build the YouTube app with python
and flask this is going to be awesome it's gonna we're gonna have apis we're gonna pull the data from YouTube and
we're gonna render it out and we're gonna build it in a really cool way where it's almost going to look like react code because we're going to use
components and something called macros inside of flask which is a really nice feature we're going to show you how to
use templates template filters inside of flask and it's going to be completely beginner friendly okay so don't worry so
if you're watching it as a clip on YouTube the link is in the description below if you're watching it as part of this big python course that I'm doing
right now well then you'll have the link kind of available to you right over here so I'm gonna go uh into this right here
and so on the right hand side if you're in the python course you should see this big markdown file Okay click on that and
it'll walk you through this project okay so this is a project we're going to do right now it's going to be the YouTube app and it this will walk you through
what are the concepts that are covered here okay you don't need to worry about list of dictionaries we'll cover that
inside of this but you should know these over here okay this is what the project is going to look like and here are the
three links available for you projects a live demo solution let's take a look at live demo of this app so this is what it
looks like uh this is what this app looks like now you could have you could
be pulling data from Mr beasts video or you can be pulling data from my videos
what that's crazy that was so quick or you could be pulling data from Peter McKinnon's videos
and just like that we're pulling data from Peter McKinnon's video so you could see this app works it's fast you could
be doing this all with python and guess what it's actually responsive so if I go
ahead and change the size of it you can see boom it's becoming smaller you see that
right there right so this is fully responsive and all of this is going to be happening with python so I hope
you're excited for this project it's going to be a really really fun project with that said let's just get right into
it so I want you to go here and click project okay this is a solution if you
ever need to look at it don't look at it right now you know look at it at the end but let's click project okay or again
it's going to be in the link in the description below if you're watching it as a clip this is a page you should come to and
your flask app right here should already be running now if you come to this page
most likely it's going to ask you to Fork this so you're going to come to a page that might look like this just go
ahead and Fork it not a problem right there okay then you can actually make changes and do whatever you want with it
and just make an account if you don't have one okay forget and then you call it whatever you want so I'm gonna go
ahead I'm gonna Fork this as well and since I'm your instructor I'm just going to call it instructor okay you could you
could leave it as exercise or put your name plus exercise and then just do it okay
so there we go and now we should have like a fresh fresh fresh file and when I
hit command enter I should see this hello world or um or home page uh pop-up
okay it's going to pop up soon let's give it some time there we go so now we have our home page
coming up over here and we know that our flask app is up and running okay it's it's up and running like this is live
live live live live which is so cool so freaking cool I remember when I used to use flask or do stuff with programming
and I was a beginner I would just try to install it on my computer and it wouldn't work and I'd be like how do you
install flask and then when I would try to install that it'd be like you need to install pip manager and then I could such a process and like now you're just
getting this app up and running um this is awesome and like you guys should thank replit because they make your life so freaking easy okay
now inside of here here's what I want you to notice there's only a couple of lines of code a bunch of it is not
really that important these are just channels right here that you'll need access to okay so it's like five six
lines that don't even need to really worry about but I put this here because for this YouTube build you're going to
need access to a couple of Channel IDs I didn't want you to have to go to youtube.com go to my channel find out how to get my user ID or Channel ID so I
just gave you IDs for Mr Beast MKBHD and Peter McKinnon uh right here okay so
that's one second this is just a average flask app which you know this is just a
boilerplate code that comes with flask right when you start it and we're saying on the home page like when you route to
this slash right that's the home page just right now print this out right this takes in HTML so if I change this to H2
right here and I change that to H2 this will turn into a heading tag and it'll
become like that and then this line here is just running our app so if you remove this line your app won't run okay so that's that's it that's it for all of
these lines of code we're done understanding that next up is our static folder this I don't need you to touch at
all do not touch this at all I'm just leaving this here for you but this is where your styling is going to be for
this app so in order to make it look beautiful kind of like this a final version of the app right you're going to
need access to that styling and since I don't want you to waste a lot of time doing The Styling we have essentially
done The Styling for you so as long as you provide the HTML structure of the page correctly and name the classes and
divs correctly which I'll show you how you can do that you should be good to go alright so CSS don't worry about this
you can pretty much ignore this don't delete it but you can ignore this okay so you are just starting from here and
now you understand every line of code in here like this is not that important I understand this is a boilerplate code
that comes with flask that's really it okay so a few lines of code and we're getting started hopefully from a point
where you and I both are at a pretty similar understanding of what's going on here okay now let's
build on top of this now what I want to do is I want to pull in data from YouTube that's the first thing I want to do so the first thing that comes to my
mind is let's go to rapidapi.com okay and they're going to make your life really easy in terms of pulling data and
it's free sign up here and we're going to go to YouTube okay and uh go YouTube
and instead of having to like sign up with YouTube and try to pull data from there it's going to be harder rapid API
makes your life a lot easier okay so you it's if just take my word for it if you haven't done too many apis and it'll
even generate code for you okay so this is going to be the really nice part so watch this I'm going to zoom in here a little bit so you could see but if I
want to make a request it's going to give me all the code that I need okay so for example let's look at what I want so
let's look on this left hand side oh first of all if you are new you're gonna need to go inside of pricing and you're
going to need to subscribe to the zero dollars per month it doesn't even ask you for your credit card so just go
ahead And subscribe for it and then click come back to end points okay and
points is where you need to be now inside of your endpoints this is the API that tells you with the YouTube data API
you can add various YouTube features to your app use the API for search videos playlists channels and more more what
we're going to be doing is we're not going to be using their search API though you could okay
but we're going to be using their Channel and Channel videos okay so for
example what this should do is if you give it a channel ID like this type of ID right here it
should spit back out videos for you for that channel so for example if we go back to our app and I grab the idea of
qazi right here we go back and we go here and we paste it watch what's gonna
happen this ID right here is going to change dynamically okay so watch I'm going to paste keep your eyes there
paste right and that ID just changed because it took it from here and plugged it into there
okay great now this is node.js code that's not what we want we want python code so let's hover down and let's go on
request I'm going to hide myself here so hover down here Python and choose request okay that's what we want so now
this is the code from the request library that should be showing you okay now we're going to go ahead and click
test endpoint so we'll see what type of if we send this request here
let's see what type of data we get back so I'm going to hit test endpoint and boom there we go so here's the data
structure okay and this is something important to understand I know we didn't work with this type of data structure too much before
so it might be a little confusing but it's at the end of the day it's a dictionary okay this is a dictionary and
it has only two items inside of it um you're gonna get scared when you look at these items because they're pretty
crazy items but just understand the underlying data structure is something you already know this is a dictionary
with two items okay it starts right here and it closes right here has two keys
only that's it it has the contents key and the cursor next key we don't need
access to the cursor next key the only key we need access is contents okay now inside of
um let's go click inside of content so I'm going to click inside of contents it tells me that there there's 30 items
which tells me as content is a key and is a value it's storing a list and that
list has 30 items and my gut feeling before I even look at it is that it's probably videos that's what it's
actually storing as items okay so let's click here and that's what we see 30 items and every single one of them is a
video okay and each item is actually a dictionary so this is a complicated data
structure right but it's basically a dictionary so it looks like that like the squigglys let me go make it here okay so this is
what the data structure looks like right now okay I'll make it right there so you have a dictionary okay inside of
the dictionary you have what you have two items you have two keys you
got um Let me let me manually write this for now okay so like this
okay we'll just call this dictionary data that's like the topmost one and it
has content as a key and that has a list right and then it
has another one which is cursor next so I'll just say cursor next and I'll just say
blah okay so we're not going to be worrying about cursor next now inside of content it has videos and so each video
is a key value pair okay it's like this so these are empty dictionaries now each
video If we go inside uh each dictionary has two keys inside
of that so it has a key type and as a key video so let's write that out so we have type and it says video and then the
other thing other key it has is called video [Music] Okay so
let me show it to you like this okay all right boom okay
and what does video have well video is a key value pair and as a key you have
video and as a value of that key we have a dictionary with nine items in there okay so let's go ahead and take a look
at it video and this is a dictionary here and this has a bunch of items in here so
it has a is live now is fall so meaning like this video is currently not live so this is
false and if we take a look at other stuff let's see publish text if we look at
that so published time
text right if we look at that it says null it has uh it has not been published yet so
it's a video I scheduled but it hasn't been published yet by the time you're watching it'll probably be published so
this here would be a none okay if you see a null in Python that's a nun most likely okay the next thing it has are
stats so stats once we understand this data structure the rest of like making of the
app is not going to be that hard but this is like vital vital vital that we understand this data structure because
if you understand this and we can manipulate it already then our life is going to be really easy we'll just plug
in the request into our app play out the data structure and we're ready to go okay
so it has stats okay so stats has one item and just one
key of views so stats key uh and then as and then stats is
like a dictionary okay and then inside of there is you have views views and uh this video has one view so
far okay but we'll just write let's say 23 000 views
okay great and then we have thumbnails okay that's another data structure we'll
have in here so let's go ahead and write that thumbnails
thumbnails okay and thumbnails is a list
and it has four keys inside of it okay but we'll just make two keys that's enough
so when I was going through these what usually they are is they're they're just
all um they're all thumbnails so it's a URL of the thumbnail and then it tells you the
height and the width of the thumbnail so what I realized is the zeroth one is
the lowest quality thumbnail and then the third one is the highest quality thumbnail okay this last one is the
highest quality thumbnail but not every single um video has four thumbnails some have
like one and some have four okay so I'm just gonna say this video
has like let's say two thumbnails and let's just take a look at what the thumbnails look like so I'm I just care about the URL you're not gonna need to
worry about the height or the width so I'm just gonna put the URL here so I'm just going to say URL
and blah blah.com okay put another URL here I will say link.com
okay there
you can put a comma here okay so if you think about this right
this looks complicated but what's Happening Here I have data data has how many keys let me ask you
this and let's just practice this right now okay data has how many keys data is
a dictionary right and data has how many keys I'll give you a hint it's between one or
two that's the answer either one or two how many keys does it have if you guessed one close but may you
might have forgotten about the second one so it has one key okay content
and it has a second key cursor neck so it only has two keys okay great now
um inside in in these two keys the only key we care about is content so we're gonna
go ahead into content now now inside of content you're going to have about 10 20
30 items because it's going to get you like the last 30 videos of the channel okay
so if I get back my last 30 videos each video is going to be what data type
each video is going to be represented either as a list or dictionary which one do you think okay take about five
seconds to answer that five four three two one each data type is actually going
to be a dictionary okay so it's the dictionary actually starts from here
right starts from here and ends right there all right now you can have other movies there for sure so like if we
could have other videos there uh let's just put one more video so we could have like a more accurate
um way to view this so let's look at another video so this is like build modern portfolio with next.js and we can
see time text is 10 days ago so let's put that there which time taxes 10 days ago is live now is false stats are this
is how many views it has we'll leave this like this okay so now we know that this has how many so the
content has how many videos inside of it can you tell me right now okay I'll give you five seconds five
four three two one content is a list with only two items okay you could even
call Len on this now you have a third item but it's empty so I could delete that item but I'm just leaving this for
now so technically yeah you have three items but like two actual videos right the other one is like completely empty
so that's what it is if I if I close this right you could see all of the
items okay let me even let me remove that too so you can just see content right now has only two items so let's
just let's play with this right now let's just prove that this is true so let's go ahead data and let's go ahead and check
the type of our data okay I know this is like kind of boring stuff it's like why
are we worrying about data structures or whatever but trust me like you're gonna
these Keys Should Be Strings okay so that's what the error is right now let's run this so yeah right now I know
that it's going to be like annoying or it's going to not make sense and it's like why are we worrying about this nerdy stuff right now where's the app
called that you're showing us I promise you if you learned this the lists and dictionaries and these data structures
underlying you're going to become so damn good because everything every API
requests everything you try to do on the web is going to come to you as a list of dictionaries okay lists of dictionaries
is literally going to be everything knowing how to move through it Traverse through it get the data again in and out
that's going to be a game changer for us if you get good at this you're gonna smoke everybody else okay trust me on
that um it's getting confused what some of these are so I call them as variables
because I'm used to JavaScript so let's just go ahead and put quotes around these
um so we we tell it like hey this is the key all keys should have these quotes So URL should have a quote around two we're
gonna need to do that for other and let's put quotes around these quotes around this quotes here quotes here
and we should be good okay let's go ahead and run this
all right let's see what we get in our console so we print data right so it's
proving to us that that is a dictionary right now what we want to do is we want
to get uh content okay inside of our data we want to get
content so let's see if we can get content and you can see on the bottom here we're actually getting that content
right that content is actually popping up right over here uh it's giving us all of the data that
that we're looking for so for example if I move this up make myself a little bit bigger here if
I move this up you could see uh I can see the type I can see video I can see it has another key called
video and then that video has all of the data that I need right so when I'm getting content let's say all right now
whenever I get these lists of dictionary stuff and all of this and I'm printing it out usually being able to see it in a
nice way is actually a game changer when you see it like this it's usually very confusing it's like what the heck are
you looking at how many items are there it's kind of hard to like visually understand what is happening so what I
recommend is you use something called P print okay and um and it's something you'll
need to install so but don't worry repl I believe will install it for you automatically and we're just going to go
ahead and uh give this pretty printer indent of two
okay and all it does is gonna print it but it's gonna make it pretty so it's just going to make it so it's like more
this this here is more readable okay like for example if I take this and I go
to like Json format or something online and I pop this in
um and I process this it's going to make it prettier for you okay so like you you'll be able to go and you'll be able
to actually like look at your data and you'll be able to like hit minus plus plus and you can actually see like
what the heck is happening okay so that's kind of why I like some Json formatters
but let's just use uh pretty print for now and see if that can actually do the job for us so I'm gonna go ahead and say
so we can just do uh p p dot P print okay like that
so instead of a regular print we're gonna use like a more pretty print and we hope it does the job for us let's
reduce the indents to one and let's see what happens okay
all right there we go so that is still looking a little wonky right but
it does look a bit better so I can I can kind of like see it more
now right uh so this right here I can see uh is my first video right here
and this right here I can see is my second video okay now
um let's see how we're gonna get uh deeper into the nesting of this right so for example if I have content well if I
want to get this value over here video how will I get access to that if I'm inside of content and I want to
get access to the first video let's think about that if I want to get access to the first video
how do I get access to that so here's how I want you to think about it right usually when you look at this this is
going to overwhelm you and kind of complicate things now it's looking complicated but if you think about it at the end of the day
right if I go into contents here or even like our contents right here these are
just two items so if I want to get the first item in a list remember you
remember how to do that right remember we had fruits and we had a fruit right here how do you get this guy it's going
to be simple okay I hope you got this so let's go ahead print and we're going to say data content of zero so this is
going to right here and I'm going to comment this out right now this right here right if I look
it's giving me the first it's giving me the first item right in this case this
is the first video and it's giving me that right there okay well then how do I
get further inside because there are two keys inside of um inside of this right
so if I go in here you could see inside of content and even the zeroth items when I get the first video so this right
here is vid one video right inside of here I have two keys key number one and key number two I don't need access to
key number one right I don't need access to key type so how will we get access to the video and the value of the video I
want access to like all the data of this key video how do I do that can you guess so see what you are going to put here so
you can get access to all of this okay so take five seconds if you don't get this that's okay we'll get this together take five seconds so try it yourself or
pause the video five four three two one all right let's do this together so now
at this point I know I'm already getting this dictionary right here if I want to get access to this video well that's as
simple as just doing video okay if I now hit enter I'm not going to get this type
key thing anymore and I'm just going to get that dictionary AKA this part right
here okay that's the part that I want that's the meaty juicy part that has all my data now that I have access to that
video well what do I need access to now well I'll need access to if I look at our finished app
I will need access to published time text for sure I'll need access to the title of the
video so that's important so let's go ahead and grab a video
and copy the title here right title
so let's come down here and let's actually add that in so I'll go ahead and dictionaries type order doesn't
really matter and we'll just say build [Music]
whatever right I'm just copy pasting this you don't you don't necessarily need to have this exact title if you
have any other title make sure to put the comma there so I'll put a title here and then we'll also put a title for this
video and we'll say title is uh uh let's say I'll grab just like some
other random videos title because this data does not need to be like accurate right it doesn't matter
and we'll just grab that title okay bring it in and I'll post it paste it right over
here okay there we go cool so I have two
videos and they both have titles now okay so let's go ahead and grab the first video's title well
now since I have access to video right inside of video these are all the
keys I have access to is live now publish time text stats title so in order to get access to title what will I
need to do you give that a try okay you're gonna add something here and what's the key you're going to add here
to get the title I'll give you five seconds five four three two one let's do
it together I'm going to go ahead and say title okay title will get me access to that ah I probably made that mistake
again of not putting quotes around um everything so let's just double check
what I did here title app I forgot to put a comma here
comma okay there we go
all right and let's go ahead and run this so I should see this title right here build medium with next.js and there
you go you can see that build medium with next.js right so this is the first video and
once I guess once I get the first video I can get that first videos all kinds of information about it right so for
example I could say first video and save it in a variable and remove this title
part from it so this is actually going to get me access to the first video so let's go ahead and print first video and let's run this and then
if I want to get the data um let's remove that parenthesis so I'm
getting access to the first video now if I want to get the data from the first video well I could actually just do print first video title right if I want
to get the publish time text I can go published time text and if I want to get
let's say thumbnails I can go ahead and grab them
just like this oh oops oops thumbnails okay and now I should get all of that
data about the first video so you can see I'm getting the let's let's comment out that first line because I really
just want this okay so there we go title is that right publish time text is basically
like oh this video is not really published right so that's why it says None
um and then thumbnails it gives me uh a list of thumbnails so in this case we
just have these dummy URLs showing up right those are the those are the quote-unquote thumbnails okay so that's
the data structure that's we are looking for okay that's the data
structure that we're gonna once we retrieve it we're gonna be able to do stuff with it now
I think that we're able to understand what's happening here right and then as it gets more complicated understanding
this underlying data structure will be super valuable for you and now what we're going to go ahead and now we're
going to actually start pulling the data dynamically into our app so we can go ahead and make that request that we were
making on rapid API except let's go ahead and do that in our app so let's go
ahead and copy all of this okay and let's go inside of our app and
I'm just gonna go here I'm gonna paste it okay I'll take import request and I'll put it all the way at the top so
request is a library and um you know a replit will install it for
you if you try to run but you know you can always go to the package manager and install it if you don't have it for
whatever reason cool and then yeah and then let's just go through what
code it gave us right so this URL here is going to be the API endpoint that we need to hit which don't have to worry
about too much but this is we're gonna be making our get request okay this query string right here is where we're
going to be passing in our Channel information so for example remember I gave you channels earlier well let's go
ahead take those channels and let's put them all the way at the top of the app so every part of our app has access to
these channels and now we're making the query to the specific channel here we'll
remove this I'll go here and I'm going to go ahead and remove that and instead I will write
channels and I'll just write quasi okay so this is going to get you clever programmer or let's just go ahead and
change this to clever programmer right clever programmer let's change this to clever programmer and there we go you're
gonna see that and this is yeah and then delete these
things you can just leave and ignore because rapid API gives these to us you can ignore these two these are important
and required so you can't remove them but this is like API Keys some like tokens whatever like this is rapid API
giving it to us so this is like important stuff right so just leave it there but you can kind of ignore it and
then here it's actually making a request for you and then it's passing in the headers and all of the information that's necessary
so it's making a get request it's passing in this URL as an endpoint and
then for headers it's passing in this information which means like it's passing in the sensitive access tokens
the password AKA um and then it's passing in any query
parameters that we might have okay great so you know for query
parameters is passing this it's passing in you know this is the channel that we need to hit okay and these are the
languages that we need to head and that's a response that runs and then it will go ahead and get that response for
you so let's comment out all of our other stuff that we were printing out actually we don't have any other print
statements right there let's comment out all of this here for now and let's go ahead and run this once we
run this we should see response.txt show up on our screen let's see
there we go so where now you can see all of this data so this is about like 30 videos that we're getting back from
clever programmer okay and if you go really looking searching inside of it you could see it says build a to-do list
app with solidity right there right so that tells you that
um for getting back real data okay it just looks ugly and don't worry we'll we'll
actually know what to do with it afterwards but it was important that you understood the overall structure before
we went in okay and this will be called contents most of the time so I'll call it contents here too so in your notes
it's easier because that's what they're calling it right contents if I go here and we see the response
right you see contents and not content okay so for this response well now what
I want to do is I want to actually put this inside of our home so whenever somebody refreshes the page we want to
make this request every single time so I'm gonna go ahead
and starting from this URL Point all the way to this I'm just gonna cut it
okay and we're gonna go down here inside of our index function and I'm
just going to paste it in there okay now I'll need to go back back and delete uh and enter okay so I can adjust my
indentation because if your indentation is off your app will break which is annoying but just how python is
all right and there we go so now I fix my indentation so all of this stuff
should be underneath the index function so right when I hit the home page boom
uh this request should run and get the data okay so let's give that a try let's just make sure everything is running so
I hit command enter to restart the server and yes I'm getting back my data very good
now instead of getting it back as a response dot text I want to actually get it back as a Json so I'm going to go
ahead and I'm going to say data is equal to response.json okay that's the data
and let's go ahead and print out the data okay and let's run this
and you should see all of that data right over here okay so now we're getting it back as a
Json and what I'm going to do is I'm going to import just sonify from flask
and that allows us to just take a Json dump it out onto the screen and I'm
gonna return and I'm going to say jsonify and I'm going to give it our data
okay and we want to dump it out onto our home screen rather than our console so
let's go ahead and hit enter and let's just see if we can do that right now so we want to dump all this data yes and
we can this is huge success right now like huge right so if we go here
we can see this data is being dumped and I have a I have an extension I forget what it's
called but it's some kind of Json I think it's Json viewer that's the Chrome
extension I have and it makes the jsons very nice for me so like for example I
can play with the Json really nicely so here I can see I have this data and it
has two keys contents and cursor next if I hit plus it opens up all of this stuff
and I can hit minus minus minus and like every single video object uh video dictionary I can close it or I
can like open it and then go through close its keys or open their keys Etc so
it allows me to like basically go through and like understand the data structure really well so I would say
it's pretty helpful you might just see if you don't have this extension you might just see like a straight up white
ugly looking page that looks very similar to this so like if you don't have that extension uh this is the page you should expect to see but that's not
very useful right okay great so that means we're getting the data and we're putting out the data
now all we are really looking to do is like make it look pretty that's it we're
like we're pretty much done doing a lot of the dynamic heavy lifting of this app that we needed to do okay now let's go
ahead and do that so I'm gonna go say I'm gonna say contents okay and I'm going to
get I'm gonna go inside of this data right here and I'm gonna pull out this
key contents right because when I'm looking at this so that dictionary right there I'm calling that data okay so
that's called Data now inside the data I'm going to index it and just pull the
contents in here so that's why I'm going to index it and ask for it to give me
the contents okay just like that so let's go here contents and let's go
ahead and print contents now and see if it prints it out into the console yep
it is um it's in the console all the contents right you guys I can see a lot of
information about video video with thumbnails I'm seeing all kinds of stuff so that's a really good sign now what I
want to do is I want to write a nice little um for Loop and what that for Loops job is
this I want to create an array of all of these videos except I do not care about
this key right here at all I don't care about
this key right here so I want to ignore that key type and the second thing I want to ignore is I don't
um the second thing I want to ignore is any video that's not been published so on my app I only wanted to show the
videos that have been published anything that has not been published I don't want it to bother even showing me that
because I don't care I don't care if it's not been published do not show it
to me so let's go ahead and write a list comprehension that can actually do that
for us so I'm going to go ahead and say videos and I'm going to say get me the
video for video and contents okay so I'm gonna basically I'm looping through this contents
and I'm going to say if the video and let's index the let's get the video
key so we're making sure essentially that we're not getting this type thing we're specifically saying or return this
okay so if that video um has a published time text okay so only
get the video if it has published time text if it doesn't meaning if it has null it won't get it and here
we are saying video All I'm gonna say here is just get me the
video key so don't get me the type key at all okay so that's videos now let's
go ahead and print out videos and let's see what we see
okay and now let's uh let's see if we can get videos to be in this jsonify
let's see if that works let's give it a try it does work so
let's refresh so now we can see that yep so now we're just getting a new list
right and that list just has videos in it straight up there's no dictionary called key there's no extra key uh keys
in there there's just a dictionary with a video data inside of it and that's all
that's all we're getting and this should be about like 20 or 30 videos right so boom right there are all the videos
they're stored in a list called videos and if I open this up there's no key
called if we look at all the keys you know there's no key called uh
type and now we just have all the useful keys that we need like badges is live now length seconds blah blah and every
single thing that publish time text was null is now been filtered out okay that's the nice thing about this
this is saying only get me the ones that have published time text that's it so if it has a publish time text get it back
to me okay and out of those just do this okay so we're we're mapping and
filtering here which is very nice and python allows you to do that with list comprehensions which are very handy
okay so we're getting our videos now what we need to do is we need to render
our template and we need to send this data back to our index.html and start playing with this data there okay so I'm
going to go ahead and I'm gonna say render template and I'm going to say render index.html and I'm going to pass
it these videos okay so I'm going to take these videos and I'm going to pass it and give it this value videos so in
the in the front end in our HTML file we'll have a variable called videos that we could then use okay now this render
template make sure that we import it from flask so I'm going to go ahead and import it because we'll need access to
that okay and then what we're going to do is create a new folder called templates and
inside of templates we're going to create index.html and in here let's just go ahead and say H2
and let's say videos let's just make sure that this page is actually loading so I'll put this down here
and our videos page is actually loading let's make sure that that page has
access let's make sure that this page access has access to all of our videos so I'm
going to go ahead and save videos just like this so let's see if it has access to our videos variable
nice you could see it does okay now let's just give it one video okay so
let's just get our first video here so I'm gonna say first video and I'm gonna go videos of zero and let's just give it
one video and let's see how it deals with it okay so we're gonna say first video equals first video
and we'll go ahead hit save command s and here I'm gonna go ahead I'm gonna say first video
so we'll just get and I'll I'll delete this for now okay let's run this
and uh that's it we're getting back just enough data for one video okay now what
we're gonna do is um we're going to go ahead and just
start really like pulling the data out that we need okay so for example uh let's go ahead and in
this H2 I'll say first video and I'll say title and let's put these
double squigglies here so it knows that this is like a python code and not just
HTML so let's write that and let's see so boom I got my title of the video okay
so that's very good let's go ahead and see if I can get the published
uh time text let's try that
okay and then after this let's go ahead and see if I can get the views of that
video so if I go look I have stats and then stats has something called views so
I can go stats and then I can go views just like this so let's see if I get my
stats and you can see I'm getting my stats and then the next thing I will need is I
will need a um I will need let's go look at our final app
okay so I have views so here I want to say views after this
okay views and then I want to say the channel name
okay so we could we could hard code the channel name if it doesn't give that to us
yeah it doesn't seem like it gives us the channel name in this case and the next big thing big obvious thing we need
is this image we need to get these images from here okay so let's go ahead and grab the image as well so I'm going
to go ahead I'm going to say image tag okay and for Source I'm going
to write Dynamic python code here and we'll say first video okay and let's go
ahead and just call it video instead of first video you'll see why the rest of our code will become a lot easier so
let's go ahead call it video and video here okay so it's just one
video and then let's go ahead to our templates
okay and let's rename all of these and call them
okay let's see if it allows us to
play with this ignore that sound that's the sound to keep me productive I'm
going to select all and I'm just going to change this to video and that's it okay
all right now video now let's go look at this data structure so how do I get my thumbnail so I'm in my video then I will
in uh I will get this thumbnails key so I'll go ahead and do thumbnails
okay and let's put a double quote around here double quote okay so I get my thumbnails
now then after I get inside of my thumbnails I need to get my zeroth element so I can get zero one two three
four or zero this is zero this is one this is two and
this is three okay so I could get any of those this would be the lowest quality and then
this would be the highest quality okay but let's just start with the zero one so I'm going to go ahead and I'm
gonna say zero and then I need to get the URL right so after zero I need to get the URL so I'm going to go ahead and
say um URL okay so grab the video get its key
thumbnails inside of that get the first thumbnail and then get the first thumbnails URL that's basically what I'm
saying here and let's end our image tag here okay let's self close it let's run
this let's see what happens and there we go we're actually getting
that image back now right we're getting back the image and uh let's comment this line out so it
doesn't run okay let's do this so now we just see all of this stuff so it's already
looking pretty clean we're dynamically getting the data you know if we change this we already
know this app is dynamic and I could prove it to you by if we go here and you replace cozy here right because
we're giving it in if we go to query string we're giving it in from channels
clever programmer but you could also give it Mr Beast Mr Beast right here so just give it Mr
Beast uh inside of channels and you'll notice that it'll pull a Mr Beast video
and show that there we go all right holy crap that's a lot of views right
so you could see and it was one day ago so you can see this app is already Dynamic it's pulling the data it's doing
the things that it's supposed to do and uh those are really the four pieces of information that we need if we if we're
looking at this right we need the image we need the title of the video we need the streamed how many days ago how many
views and then the clever programmer part and the logo is hard coded okay so that will remain the same so now at this
point we have to make this card here look really nice so let's create a card
and make the card look uh look nice okay let's go ahead and do that now so I'm
gonna go ahead and cut all of this for now or just comment it out and leave it let's let's select all of this and let's
comment this okay and let's go here and let's just make a card so I'm going to go ahead div there's going to be some
HTML stuff here that we're gonna do don't worry about it too much but the only thing I want you to worry about here is just make sure you're really
following along and writing all of these lines lines and especially you're naming your divs the same and your classes what
I'm naming them here so let's say we have our class card okay inside of that
we're going to have a let's start it backwards so then it's
easier for you to see okay so let's take our image and let's work backwards so I'll take our image I'll uncomment this
uh okay that's annoying would not take this and paste it here
okay so let's take this image for example let's run our app so basically right now it should be just showing you
that image right there okay and something to keep in mind if I change that to a three the quality of that
image is going to become higher so I want you to keep this in mind for future because we're gonna we're gonna
be doing something with this we're gonna write a piece of code that's going to dynamically always choose the highest
quality available all right so now that we have this image
um what we want to do is we want to put it in a thumbnail container okay so let's go ahead here and this is where
this magical style file that we've created for you is going to start coming in real handy so do me a favor and at
the top just link this file okay so at the top I want you to just say uh link
and we're going to say a style sheet not ref I meant Rel okay we're going to say
Rel style sheet and then for href I'm gonna go ahead and say static slash
styles.css okay and we can just close this self-closing tag all right now let's run this okay so you shouldn't see
too many changes yet except there is already some changes coming up so if I go to this app right now you can see
that things are already kind of centered right and our image is already in in the
center there and and the background is dark okay so that already happened from just bringing the style file so that's a
very good sign now what I want to do is make our card so we're going to finish making our card so in here I'm gonna go
ahead and say class and we'll set thumbnail container and let's take this
div and wrap it here so let's wrap that image inside of this thumbnail container and let's run this okay now it's
starting to look already better now we're going to create a card so I'm going to say class card and that's going
to wrap everything okay so everything about this card that we're making here
I'm I'm selecting everything and hitting tab everything that we're making about this card here is going to go inside of
these card divs okay so for example everything is going to go inside of this
card diff from this point on okay so let's run this okay so now here's what you should see
you should see a card and there's like already some some stuff
in the back right your image is already going in the middle so that's good okay next up what we're gonna do
is let's go ahead and give this image a class now so we're going to give it a class here so image source is going to
remain that but class is going to be thumbnail okay there we go so now this image
should be looking a lot better okay and then next up what we'll do is I'll
I'll just give it three right now so it looks good and then in the future when we run into that error because some of
the images don't have a three uh they only have low quality available and I'll show you what we can do all
right so boom there we go thumbnail container is good now let's create an info container where we're going to
store information about you know the title uh of the video the the channel
name how many views how many days ago it was published Etc okay so let's go ahead and do that
div and then let's go and we're gonna say class and we're gonna go info container on this and inside of this
info container we're going to put all the stuff that we want to put okay so div I'm going to create another div here
and we're going to call this Channel
logo container really make sure you're not making spelling uh errors here
because what needs to happen right now is your your code that you're writing needs to match up with the CSS file so
for example let's say you're making this card component right and I go here your class
here that says card needs to match up with what it says in the styles.css as
the class for card because if they don't match up all the styling for the card you're going to lose it so for example
let's just say You misspelled card and you must you you wrote card with two D's
well that ain't gonna work buddy because if I run restart the server and run this
apparently that's working okay I don't know what to tell you there that's not supposed to happen
why is that happening um okay if you keep doing that at some point you're gonna get into trouble okay
if you keep misspelling all of this stuff here right let's just give this a try let's
restart this it's probably my style sheet is not refreshing or something that's what's happening right now okay
but just trust me if you mess with this you're going to get into a lot of trouble so don't do that just make sure
that you're staying consistent with all your uh just don't make typos okay you should be good let's go back to our file
so thumbnail container okay or info container sorry and then Channel logo container and then inside of this
Channel logo I'm gonna just go ahead and drop this logo and um you can copy it or you can paste your
own logo so here's the logo that I'm using this is a this is the clever programmer logo and the classes Channel
logo okay that's all I did here I just popped this image in okay inside of this
Channel logo container so let's run this now and we should see a logo be logo is
popping up okay very good so we're we're good with our info
container now we still need more stuff in our info container we're good with our Channel logo container but we need
more stuff in our info container here what I want to do is I want to have another div and a class and we're going
to say info and let's end this div and within this info
I want to go ahead and create a P tag and I'm going to go ahead and say I'm going to say video
title just like that and let's see if that shows up so let's hit command enter and
restart the server I'm going to make myself a little bit smaller so you can see there you go you could see that it says
should I start a Hindi coding Channel next up we're going to go ahead and create a span tag and I'm going to say
clever programmer and we'll do a line break after this let's go ahead and do this
okay there we go now that's being popped in correctly
okay and then what we could do is pass in another span tag
and this span tag will have the stats of the video so I'm going to go ahead and
say views on this okay and we'll we'll write the word
views after this so let's run this and let's just see what we get so this should be the actual data and then this
should be the word views showing up right there okay very good make this a little bit bigger
okay and then I'll put this uh dot here it's option eight on Mac on Windows I'm
not sure what it is if you don't have this dot copy it from online look for DOT something if you can't get it or
don't want to get it then just don't and put a period there or a dash that should
be fine too okay and then the next thing we're going to put here is the time text okay so I'm
going to go ahead and save video uh published time text okay let's hit
command enter so it restarts our server or control enter if you're on Windows and there we go it says streamed five
days ago so if I go to this app and I refresh I can see all of this data popping up here which is a great sign
the only concern I have right now obviously is we only have one app one
card and we don't have lots of other cards okay so that's that's a concern
but it's not that big of a concern now here's what we're gonna do I'm going to refactor some of this code and and make
it make it pretty nice actually okay so this card component here we can
make it its own component I'm gonna get rid of all of this here okay and we can use it like a component how
we do in react if you have now if you don't have experiences around it's totally fine but all we're gonna All I'm
gonna say is I'm gonna make it just nice and organized and easy to use okay so let's go ahead and do that
so I'll show you how to create something called macros it's really really nice uh
to create macros okay so I'm going to create a new file and we'll call this components
dot HTML and I'll paste this code in here I'll delete the style sheet link okay at the
top I'm we're going to go ahead and put this percent sign so only one squiggly and then a percent sign okay not two
squigglies this time and I'm going to go ahead and say macro card
okay and it's going to take in a video as a function so literally this is like I'm writing a function here okay
and then you're going to put a minus sign and then a percent sign okay it's weird I know but just trust me just
do that your life is going to be great okay and then at the bottom we're gonna go ahead and say end macro okay but make
sure you put a minus sign here I'm going to say n macro and a percent sign and done so our macro is done here
now in our index.html look at how clean this is going to become remove everything okay and simply what you could do is now
you never have to look at this component again since you've made it already once you don't have to worry about it and
what we could do here is a we can actually do this
go all the way to the top and we can say from from
components dot HTML import
card okay so now we can import card okay let's run this app and just watch what's
gonna happen so if I run this app really like nothing should be showing up like no card or anything should be showing up
okay because we're not rendering this card component right now it's our index HTML
that's the main file components is not running right now now if I want to show the card component all I actually have
to do is I have to just go ahead and say card and pass it the video that I have that's
it now once I passed the video card component once you pass it the video it already automatically knows
what to do once you pass it the video it goes here it sees videos as a function it then takes this video goes here grabs
all of this it uses a variable video here so it literally works like a function inside
of python which is freaking epic it's so cool right so there you go you have a
card and now what we want to do is we have lots of videos right we have 30 videos not just one video so we want to
write a loop that can help us access all of those videos and just iterate through them so we are already sending back this
videos list okay so and we only send this video video back uh for dummy data
and like playing around and seeing if we could make a component now that we're done we could pass our entire list of
videos and then just Loop through and make a card for all of them okay so let's go back and I can just go
ahead and write a for Loop so I can say four video in videos
and pass it to our card and then just end for Loop just like that and if you
run this this is going to be kind of crazy but I think literally the entire app will work let's see
so let's see hopefully we don't get a crash okay we got a crash it says the
there's a video that does not have an element three if you could see that three right there okay so that was the
error I had warned you about so let's just put replace that with zero look go back to your components.html replace
that with the zero and hit command enter and run this again okay and let's refresh this page boom there we go we
just got everything right like everything is showing up this is insane
um there's just one thing that we have to fix with styling like you see this is if
we look at this in the final solution there's a gap right here right between each card but if you look here there's
no Gap it's just like one big thing so all we want to do to fix that is in our
index.html we need to just create a div and we need to give it an ID of home and
we need to put the whole thing inside of that okay and run this and that should fix
our problem okay and let's go back here and let's refresh and look at this it's done it's
showing up right if I make it smaller right it shows up one by one so it's
fully responsive as well all right um that is so nice and then one last
thing that I want to do is here it says 40 998 views if you go to the final version it says 41k views 13k views 44.5
K views so that's how YouTube is actually YouTube it says either K or M
for million so what we're going to do is we're going to use this Library called numerize
it's really nice and here's how it works so I'm going to go ahead and open up our
command line here and let's go and pop this bad boy open make it make it huge
so you could see it gonna go right there I'll move this here we're going to say python okay and so just in the Shell
just run Python and um from numerize dot numerize import
numerize okay and if I call numerize on a number like 23 000 watch what it's
going to do it's going to turn into 23k if I call it on a bigger number it'll turn into 230 million and turn it as a
string okay so numerizes really nice if you don't have numerize you could probably just do if you for whatever
reason you don't have your pip install numerize or you could install it from this package manager right here click
that and just type in numerize and install it okay but if you Fork this the
right way you should already have access to all of this okay so numerize a super nice Library so
we're just going to use numerize for what we're trying to do so I'm gonna zoom out here okay and we're gonna go
and say from numerize dot numerize this only annoying thing about this but that's fine import numerize okay so
we're going to go ahead and do this and I'll show you something really cool in
flask you can create these filters and they're awesome if you have experience developing with react ever
man with flask you could create these uh template filters which is essentially like you're creating something inside of
your context API or Redux and your entire app has access to it it's awesome but if I'm going to keep it at a simpler
level and you're a beginner watching this for newbie it just all it means is awesome and it's very easy it'll make
your life simple okay that's all you need to know about this all right so let's go ahead and create a
um not this but we're going to set template filter okay and then this template oh don't put
a colon there so inside of this template filter here's what we're going to say
we're going to go ahead and say Define and I'll just call it numberize
okay this is going to be our function it's going to take in a number of views so you're going to pass it views it's
going to be a function we're going to make and it's going to return it's going to just call numerize on it and it's going
to pass in views and we're going to say comma 1. How many decimals do we want okay that's it that's what this filter
number is that we created is going to do it's just gonna depend on this numerize thing okay
so uh once we once we do this you get here's what we can do now
okay now that we've created this filter here's what we can do so we can go back to our templates and let's go to
index.html or let's go to our card component rather so I'll open a new tab here let's go to
our card component and here I'm pulling views and what we could actually do
is I can actually just pass this guy numberize like that like a filter
okay and once I actually pass this markup filter it's going to take this
number of views here and call this numberized function on it and do what needs to be done so let's
hit command enter and watch it in action there we go 41k views how freaking sick
is that that is awesome right 41k views 13k views
44.5 K views 15.7 K view so it rounds it to one
decimal 170.1 K views I mean it's it's gorgeous right it's uh
it's it's doing what it needs to be doing I mean it's awesome so in terms of number eyes we're good
now we just need to create one more filter and all this filter needs to do is grab the third image if it's
available and if it's not available just grab the xeroth image okay grab the
highest quality image if it's possible okay so we're going to go ahead create another filter and this is super cool I'm in love with
the flask templates they're so cool so I can go ahead and say template filter
and I can say to find highest quality image and it'll take in images because
we're going to give it a list of thumbnails and what this will do is it'll return
the uh is going to return images of three okay uh and and the URL of that
if the length of images is greater than or equal to four so meaning if I have a
thumbnail let's go here right if I have uh if I have thumbnails and that has a
length of 4 or greater then just get me the highest quality one but if it doesn't have a length of four meaning it
has a length of 1 well that clearly means that it doesn't have this and doesn't have this and it doesn't have this just grab me the zeroth one so if
it doesn't have a length of four or greater just grabbing the lowest quality one because if you try to get this one it's going to error out because it's
going to say it doesn't exist right so that's what it's going to do so we're just going to check for length and if
length of 4 or greater then just grab the fourth one and if it's not length of
four then just or if it's less than length of four just grab the zeroth one that's it okay so grab the highest
quality what you want if the length is greater than or equal to four else
grab the lowest quality one let's go ahead to our components and
here I'm going to remove this okay I'm just going to give it remember this function takes in a list of thumbnails
okay so let's go ahead and even maybe rename it to thumbnails thumb
you know it takes a list of thumbnails and so this is a list of thumbnails so
pass that to that function we'll call it highest quality images
okay and now if you see keep looking at this image and if I run this app you're going to see that the image quality is
going to become much better we have an error
no template highest quality images ah yeah because we called it highest quality thumbnails now so thumbnails so
let's do this let's see if this works
and we still have an error it says highest quality no filter name house quality thumbnail so let's see what's
happening let's go to main.py um
oh yeah highest quality image singular is what it's called highest quality image because the function gets us only
one image so that makes sense why would we call that there we go that image is looking way
better now right it's looking way way better now if you want to check this app
out and see if it's working everywhere let's go ahead and um let's go ahead and
test it out right let's go and replace where it says clever programmer with Mr Beast okay so let's go to channels so
let's go ahead and just say active Channel okay and uh
let's pass in active channel here okay so we don't have to keep going all the way down here to pass this active
Channel and here I'm just going to say channels um and let's give it
uh Mr Beast okay so let's go ahead and make the active Channel Mr Beast and let's see if
that works oh boom there we go and if I make it bigger
boom that is nice right right there look at that if I go ahead and change the
active channel to MKBHD let's see if that works let's hit command enter
and let's wait for it there we go right MKBHD is showing up and working with
this python app that we made let's go ahead and change it to Peter McKinnon let's give that a try
and we could see Peter McKinnon is showing up right if you want to make this even more realistic see if you can
add in uh put in Peter McKinnon's logo here manually pass that to the back end render that out on the HTML and do the
same thing for the name and see if you could do that I bet you could actually at this point all right so this app is
super Dynamic right when I go when I scroll it it's a responsive mobile
responsive this app is fully functional it's deployed online already and this is a
phenomenal python project to show somebody and especially if you're a beginner and you you're made this or at
least you understood some of this right as you were doing this this is phenomenal now do I expect you to understand everything here and expect
you to be able to come up with this yourself hell no okay or figure out all this HTML stuff or how it
connects to styling no do I expect your brain to be hurting right now absolutely like I don't expect that you should be
able to get this okay because you're new okay right now is not the time where I
expect that you should be able to understand all of this your brain is probably hurting this is
probably a lot to grasp you might even be thinking man maybe I'm not cut out for this or I should quit or something
along those lines I know those feelings because I've been there all I want to tell you is programming and the start
for a while it feels overwhelming then when those Concepts become clear and you keep building on them it becomes simpler
and simpler and a lot less overwhelming because you learn how to see things for what they are and just iteratively do
one thing at a time okay it's kind of like learning how to ride a bike there's so many steps if you really think about
it or driving a car but once you get used
to it it's so easy and it's all automatic okay so I hope you enjoyed it
and had a lot of fun I had a lot of fun making this for you and building this
project and uh with that said I love your beautiful face and I'm gonna see you soon in the next project great job
look at this it's so sick ah all right I'll see you soon peace
I just picked a number between 1 and 100. can you guess which one it was I'll
wait I'll give you three seconds no no really take a guess three two one wrong the number I chose was 73. all
right now let's build this game with python we're going to use Python to
build this guess the number game okay and you'll be able to have users guess what your number was and then you'll be
able to select if they were right or wrong in this case the one that we're building is you get to play with an AI
the AI picks the number aka the computer picks a number and then you get to crack
that code like a detective and we're gonna build this game with python using flask and there's going to be JavaScript
and HTML and styling and all that stuff but the good part is the way that I've built it for you you're not gonna need
to worry about a lot of the HTML and the CSS part you're just going to focus on building the game now what's covered in
this is you're gonna need to have a database to be able to do this so I'm going to show you how to set that up
even if you're a complete beginner you're going to need to be able to input and the user can type in what your
actual guess is and then once you hit check me it will actually actually tell you if that guess is Right meaning it's
correct right the green one will come up or if it's too low or if it's too high
right so then yellow and red those things will pop up and let the users know and then you'll be able to restart
the app as well and then you know get back to it so there's a bunch of functionality that this app will have
and let's just go ahead and demo this right now so here we go I'm going to
pick a number computer has already guessed the number okay and it says good luck cracking it so I'm going to go
ahead and pick 50 and I'll hit check me and it says it's too low I'm going to go ahead and pick 75 it says it's too high
let's go ahead and pick 65 because we want to pick a number lower okay it's a
65 is too high as well okay let's go ahead and go 58 in between 60 and 50.
okay let's go 54 and between 50 and 50. oh wait actually we gotta go higher so
it's in between 65 and 58 which probably means it's around 63. it says that's too
high so it's in between these two now I imagine so I'll go pick 60.
too low so 60 it's either 61 or 62. there we go and it says that 61 is
correct right so we have solved the problem we've cracked the code and if we wanted
to play again we just hit restart and we get going again all right so this is the
demo of the app very simple game but what I would say is that there's a lot of Concepts that we cover here in flask
you're going to learn routing you're going to learn how to deal with databases all that stuff right so with that said let's go ahead and get started
now if you're watching this as a clip on YouTube the link will be in the description below for the project go
ahead and Fork that uh click that Ripple it and then you're going to click Fork that'll give you access to this entire
project and everything in between if you are watching this inside of this epic
python course great if you're watching this here well you'll have access to all
of this inside of that mega mega mega Python course and obviously if you want to take a part of that mega Python
course and you're not a part of it already just scroll down below and one of the links will be there to enroll in
it and it's all all of these resources everything is free okay so you're going to scroll down and
you're gonna find the guess the number project you're going to keep scrolling in the python Mega course and just
scroll down to guess the number project okay this might be higher or lower for
you just depends on the time that you're watching this and if we decide to make any changes and this is the project and
here are all of the links for it that are there for you so you got project live demo and solution so click live
demo if you want to see the live demo click solution if you want to see the actual solution so I don't recommend you
click this right now click this probably at the you know and not something you
want to be working on looking at right now the project is the one where you're going to do this as an exercise and try
to solve this yourself okay so those are the things that are
available to you so I'm going to go ahead and I'm going to click this project link so we can get started working on this
okay and then I have my solution open up here just so I can always see what it looks like so you can have your live
demo open up the whole time so you can kind of always have a point of reference to see which which you're going to be
referencing right and uh let's go ahead go ahead here
and if you hit command enter right now it should just start this app for you
right here so if I open this up this is not the solution file this is your exercise file okay
and if you're clicking this it would ask you to do a fork so I'm gonna do that fork with you okay I'm just gonna call
this instructor okay let's go ahead and Fork so if it
brought you to a page asking you to Fork just go ahead and Fork the project that way you can code in it right and you
won't have to be blocked by anything and then let's go ahead and hit command
enter to run this server and run this app and again what's nice about replit is you already have these static files
and templates available to you which essentially means that when this app
runs you won't have to spend you know really any time on
on getting it set up right like all of the styling and everything is going to be there for you so there we go I just
had to restart the server again and now my app is open so I'm going to open this
one up okay and now this is the version that
we're currently working on okay so like you'll see if I write in stuff there's no functionality like if we type in
numbers here there's no functionality if I hit check me it says it's broken
um nothing happens if I hit restart it tells me it's not found it's broken so all that means is we need to just work
on it and and make it functional okay so when I'm thinking about making
this functional here are the first things that I'm thinking about right the first things that are actually really
important to me is one I want every single button to be
connected okay and that's really easy to do so I just I in my mind already I'm thinking okay I need to create a
uh route for this button and we'll just create the route of it to be at home
page so that should be fine and then I'm also thinking I need to create a route for this restart button or reset button
so I I'm just going to go ahead and Route it to reset okay how do I know these things well if
I actually click check me um or let's put in some information and hit check me you'll see the URL didn't
change so that's on the home URL so I already know that piece of information and then when I click restart it takes
me to slash reset all right so if I look really zoom in there you'll see it says
reset right so now if I go back that's how I know where each button is
being routed to so in my mind the routing problem is already solved what I'd urge you to do is see if you can
create the routes and then just like print that the button check me was
clicked for this one and uh for this one also print that the
restart button was clicked okay so see if you can create those routes in the function so then when I hit check me it
doesn't actually um it it basically shows me you know hey print checkout I don't care where you
show it whether it's on the screen or in the console it doesn't matter as long as I see it somewhere when those buttons
are clicked so you should have that much information and you should be able to do that part so I'll give you five seconds to pause and give it a try five four
three two one all right let's go ahead and let's do it together now
so since I know I need to make these routes well in my mind but I'm going to go ahead and do let's lower this here a
little bit so we can see this I'm just going to go ahead get to working on those routes I'm going to say app.rout
and first route is already made so I actually don't even need to do anything okay first shot is made so I'm going to
go ahead and make a second route here and the second route is just basically going to go ahead and say
reset and I'll Define reset and we'll just say print reset or in this case we
could even just do return reset page okay so it's going to take us to a new
page reset page and then here I could print you clicked me
you clicked check me button okay so if I were to go ahead and
try this let's hit this button check me and let's see what happens so let's go ahead and give it a two let's hit check
me okay let's restart the server so don't forget that hit command enter to restart
and you can actually see it says you clicked me check button and let's click it again
you clicked check me button let's type in hit check me you clicked check me
button right and if you don't type in anything and you do this it'll stop you because it's just doing validation it's
making sure that you're putting in the right information I'm just going to make the font size a little bit bigger for you guys right there all right so you
can see the you you the check means showing up correctly and then let's go ahead and do
the reset page one so if I hit restart now it takes me to this page that says reset
page okay so all this means is I made sure that all the buttons have something
right like all the buttons actually do something they're not just broken so all my routes are working
okay now the next thing that I need to do wait this probably just needs to
refresh refresh let's try 23 let's hit check me okay so now the problem that we're
having and the reason why we're getting this error is because we're making a post request and a post request is not
allowed by default how I know this is if I if we go to our templates and we go to our index.html okay so this is where all
of your HTML for this app is coming from so for example you know here's your nav
bar right um the AI has picked a number that's all
coming through this HTML file and then for example if you're if you're like hey how is the styling happening that's all
already done for you in styles.css as well okay that's all happening right here
so uh but you don't need to worry about too much of how this HTML stuff is happening because I want to stay focused
on the python parts so what's happening here right let's go
look at this form this is the only like real interesting thing we need to see so I have this form here okay and this form
has a method of Slash okay and then I have another form here for the reset so this form here as by
default has a method of get so anytime you don't specify anything you have a get request that you're sending but this
one over here is doing a post request okay why are we doing a post request
because the user wants to send over some data so the user is typing the stuff in and then the user is like clicking one
of these buttons and then use users trying to send some data okay so that's that's effectively what's
happening and so if we're getting a post request well then on our back end we actually
need to look for that post request okay and retrieve the data from there so what
I want to do is um for first before I even do that I want to detect and I want to allow that
method so I'm going to say methods and we're going to say we want we'll allow get and we will allow post by default
get is allowed meaning if you don't meaning if you don't put any of this
it's the same as if you had put this okay these two are equivalent statements
so by default it's allowed so we're going to go ahead and add in a
post request so it's allowed now now if I run this we'll hit command enter and
we'll go here and refresh okay and then I'll type in 23 and hit check me you see it brought us back to
this exact page and we didn't run into any errors right it just brought us back
to this page and there were no errors it didn't say method not allowed because now post post requests are indeed allowed if
that makes sense okay [Music] great so it seems like we're good on that side
all right so now next up what we want to do is we want to actually grab the value
that the user is inputting in here okay so how we're going to do that is in this
way so I can go ahead and say request okay
and we can do request.form and I can actually say that
let's go to our index.html and I'll open
this in a new tab okay so in our index.html you'll see
that this input has a name number guess we'll need access to that specific name
so let's go back to our main.py and I'm going to go ahead and say get me
that number guess so that's it'll extract the value of whatever was inside and it'll put that here once you click
this button check me okay and let's just try printing this and see if it does
anything so I'll restart the server and let's see what happens so right now
I actually got an error and the reason why I got this error that says bad request is because
I did not run this like it's it's asking for a
form that doesn't really exist right now okay so for example if I ran this without it let's see what happens
our app runs okay and if you look at our form or form right now if I hide myself here
right if we look at our form our form here is pretty much empty right so if I
look at my form you can see empty okay now let's say I put 23
okay and then we run you can see I have this form here and it says 23 inside of
it now okay so if you think of a form it's really just a dictionary in Python and
it has the key number and then that key has a value guess okay so it's it's really just a
dictionary it doesn't look like a dictionary it kind of looks weird but it it that's all it is it's just a
dictionary okay that's all you need to remember about this so
um what I need to do is I only need to get the data when there is a number guess
because if I restart the app in the start there is no number guess right
there's no number that has been guessed at that point so we could do it in a few ways we could
assign that number to be Zero from the start or the way that I really like to
do it is we could do and check if the request method is post if it is a post
request then we will extract the information
from the form and we will extract this piece of information
we'll say number guess
okay and then we will move this you click me button inside of there as well because right now the problem like if we
run this the problem with the you click you check me button is it will run on every page refresh so even if I just
refresh here it runs if I refresh again it runs if I refresh again
you click check me button runs so I don't want that to be
being printed every single time right so I'm going to go ahead cut it and put
that inside of this if statement so it only detects it and runs this once it is
a post request so let's go ahead and hit command enter and now you'll see it doesn't say you
click check me button anywhere and I can keep refreshing this page and again I'll refresh it and again I'll refresh it so
you can see I refreshed it like multiple times but it didn't say you click check me button which is exactly what we want
now say I put the number 23 here and I hit check me now it says you click check
me button and it pulled a value out of the form and gave us 23. very good so
now we can actually get access to guess this is the guess that the user is
guessing Okay um and we can detect that the click happen so it's very good I don't need
this print statement anymore and let's just go ahead and see what the type of
guess is so if I run this here's one interesting thing you'll see even though
we're putting in a number guess will actually be of type string
because whenever we're taking it user input by default it's actually type string so what we want to do is we want
to actually type use a special built-in function in Python and type cast this to
an integer so we want to go ahead here and go ahead and do int
um and we can actually put that here right there so now we know that if I
print type yes and we run this it will be an integer because it will convert it into
an integer so let's say 23 let's say check me okay and you can see it says class
integer okay so now we have essentially forced it to become an integer okay so that's
that's good so we're able to get the user input now what we're ready to do is
we're actually just ready to write python logic because we're getting a number and at that point we know what to do
right we know what to do so let's go ahead um and we at that point we just know we
can write like regular looking python okay so let's go ahead and write a python function so I'll call this
function define check number show message and here's what this function will do
okay uh it will it will take in
um the guess uh the computer number okay or let's just say the guess number
the one that the human guess and the computer number so meaning this is a
compute this is the number that the computer will pick automatically so I'll take in two different
uh pieces of information okay it'll depend on those two arguments they'll have like two arguments in other words
okay and it will either return instead of returning true or false here's what
it'll do okay so imagine I called let's say I call this function check show number and I gave it some the value of
let's say for the guest number I said the human guest
five and the computer number guest
uh 50. okay so if that was the case would this
function check number should do is it should return the following message it should say
you know so let me ask you this right is this number lower than the guess of the computer
yes it is right so since it's lower because 5 is less than 50 right so this
is slower it should print a message that says 5 is too low
okay here is and it should be a string okay
I'll put it in double quotes just to emphasize that it's a string
okay uh if you guess 75 here but the computer number was 50 well then it
should say what it should say 75 is too high right and what if you guessed
50. well then in that case it should say 70 uh it should say 50 is correct
so that's what this function needs to be able to do either says the guest number
is too low or the guess number is too high or the guess number is correct that's the job of this entire function
okay so see right now with this information okay one last piece of information you'll need is how to
actually generate a random number from a computer okay so that's going to be something important but for now you
could just hard code a computer number and you should be fine okay so before we even we'll make a note
Generate random number we'll do that later but for now even if we don't do
that you should be able to write this function and if I give that function you know 550 it should give me five is too
low if I give it 75.50 it should say 75 is too high if I give it 50 50 it says
50 is correct okay so take five seconds to pause the video and give that a try yourself five four three two one
all right welcome back let's try to do this together now okay so I know that it
takes in two parameters so I'm gonna two arguments I'm gonna go ahead and say computer
uh or a second guest guess
um guest number and then we'll say computer number so
those are my arguments that I'll take okay and then the definition of function is going to be pretty simple it's going
to say hey if guess number is greater or this case
scenario let's do this first case scenario lower right if it's lower than computer number
well then what I want to do is I want to return right and I want to go ahead and say
return uh guest number
and let's put that F outside the string guest number is too low
okay and then what I want to do is I'll paste that and I'll say if the guest number is
higher than the computer number then I want to say guess is too high and then l
so we can we can make this an else if so let's do an L if okay and then else
we could say it's correct because that's the only other choice left so we're
going to go ahead and say guest number is correct okay just like that
so those are the functions that we you know this is essentially what check number show message should do right it
should check the number see if it's correct or not and then it should show and return this message you
know one of these messages right here now let's try this function in our command line so I'm going to pop that up
right here and go like this like that and let's go
ahead and do it so from main import check number
let's see if it allows us to do it check number show message
okay wow that was interesting it didn't allow us to do it so I'll restart the server and let's try it again
let's try it one more time restart the server python
from Main import interesting
does that want me to kill this server I don't think so right
now that's fine it's just saying it's in use so let's do it the regular way let's just go ahead and go
and try print and we'll do check number show message
here and we will say check number show message and I will
give it the guests of five and the computer guess will be 50. okay so this will be like the first example that we
have here all right let's go ahead and run this
and let's see what happens and you can see that the function ran
and now it says 5 is too low okay let's go ahead and give it
75 and the computers is 50. let's go ahead and hit command enter so
we run our app again so it runs that it says 75 is too high and then let's go ahead and try 50 50
should be correct and you can see it says 50 is correct
so now we know that our function is working perfectly
that is exactly what we're looking for right and now all we want to do is make
sure that when we call this check number we already have the information of what the user typed in so let's call this
function right over here now okay so I'm going to go ahead and say
check number show message okay check number
or it's really um check number message because it doesn't
show we have to show but it's check number message so that's fine so we're
going to call this function check number show message and we'll give it our guess and we also need to give it our computer
guess so let's just comment this out for a second right now if in if we're in Python and I'm going to go ahead and
just type in Python right here how do you create a random number well you got
to do you gotta get uh random choice and what I like to do
is let's say I have an array of five items if I call this function choice on that
let's call this function let's put parentheses at the start let's put parentheses on the end make sure you're
in Shell if you want to run python here and now every single time I call Choice right you could see that it's picking a
random number and it's doing that by itself it's picking a random number between one and
five so that's how it works but now I need to give it a big list of a hundred because
I need to pick up between 1 and 100 all right so I need to give it a list that
starts from one and goes all the way to 100 like I need to give it a list like
that so I'm not going to manually create a massive list I don't also want to write a for Loop so in Python there's
something really nice it's called range and what range really does is if you give range let's say we give range 2 and
we call the function list on it it'll create a list with two numbers if I give
range 5 it'll create a list with five numbers if I give lists uh if I give
range 10 I'll create a list with 10 numbers okay and here's another nice
thing about range you could give it a start and a stop so in other words I could say start at one because I don't
want to start at zero because we don't want to pick a number zero we want to pick between 1 and 100 so we're not not
going to pick a zero for this game okay so we're gonna go ahead here and it ends
here but usually in coding it's up to but not including so it's inclusive of
the first number but exclusive with the second I don't know why they do that they shouldn't do that it's stupid
um but whatever that is the case so this basically means you get a list from 1 to 100 okay so there we go you have this
list from one to one hundred so how we could do this is if we want to create a random number okay or we want to make
something like computer number we could just go ahead and called uh called choice
on Range one comma 101 right and now if we print out computer
number and hit enter right it will it will do that so if I just keep running this right here choice between
that every time I call this it will get me a random number right because that's effectively what's happening under under
the hood okay so this piece of code will get me a random number so I'm going to copy this
go back to our code and we're gonna go and create computer
numbers here so I'll say computer number and we'll set choice and from random
import Choice okay because we want uh the choice to be coming from
uh we want to import it okay so we can have access to it all right so now that I have access to
the computer number and I have access to the user number right so this is a computer number here's the user number
now I need to call my check number show number message function and pop both of
these in there okay so we're going to go ahead and say guess
and then we're going to put in the computer number right here okay so we're going to call check show number with the
guess and then the computer number and um since it returns information we want
to do something with that right so this is going to be our message and let's go ahead and try to
print that message out so I'll say print message
so we should be able to see stuff happening inside uh here okay so let's go ahead and put
in 50. so like right now the computer has picked the number and to show that
to you is like we can we can write a statement here a computer picked and uh we'll just put computer
number in here okay and the future we'll remove this because we don't want to be able to see the computer's number
okay so let's go ahead and pick 50 now or let's go ahead and run the server hit
command enter otherwise your changes won't show up and if I go to the console here
we look uh okay so it says computer has picked
and let's stop our function from running from here so I'll I'll do this let's hit command enter one more time okay so you
could see it says computer pick 97. now obviously if I pick 97 message will say
it's correct so let's pick 50 First and let's hit check me right it says 50 is too low great let's
pick um 75 okay it says 75 is too low let's
pick uh 90. let's say check me it says 90 is
too low as well let's go ahead 95 it says 95 is too low and let's go ahead
and pick 97 and now it says 97 is correct so there you go
okay so that was one easy way for us to get the computer number and then
um our routes and everybody kind of have has access to that computer number everywhere else okay so uh that's that's
one way we could do it and then run this function Okay computer Choice and then boom we just keep guessing now what we
want to do is we want to make sure that this guess that we did is showing up so we want to be able to
see a history of guesses as well so for example if I type in 50 here right I see a history of guesses
that'll show oh actually this is the r version so let's go ahead to the solution version and in here if I go 50
and we hit check me you'll see it says 50 is too high let's go ahead and do 75
it says 75 is too high let's go ahead 25 25 is too low
right so this history of guesses we want to go ahead and make that now okay so
how do we do that well think about it like this every time the user types in
something we essentially have access to it right so we need to just append whatever the user adds to that list so
imagine we had an empty list like this of uh let's call it guesses
if we had an empty list of guesses well what hap what would happen in that case
what would happen is every single time the user makes a guess well we just pop in that guess right here right so
couldn't we just do that so let's go ahead and do just that so I'm going to go ahead and say guess it's not append
and we'll just pop in that guess and every single time we pop that in we just
print out the guesses list okay so let's go ahead and take a look at this now so
I'm gonna run this let's hit command enter now we're getting to the really interesting
parts of the app so let's say check me now you can see that there's a list with 23 in it let's go ahead and put 24. now
you can see a list that has 23 and 24. let's go ahead and do 100 check me and
now you can see it says 100 right um so we could see that now what we want
to do is we want to pass it not just the guess but we want to pass at the actual
message so we want to pass it um you know we want to pass it not just
23 but we wanted to pass we wanted to have the information if it's too high as well okay so how could we instead of
appending the guess number we could just append the guest message in that case so let's go ahead and move it here and
we'll say guess dot a pen message okay instead of just appending guesses
so now if we run this okay let's go ahead and do 23
let's go ahead and do 25 let's go ahead and do oh we need to show this too so we need
to do print guesses because we're not showing this let's rerun our server by hitting command enter or stopping and
starting our server right there let's go ahead and do 23. let's go ahead and do 50. let's go ahead do 75 and now you can
see this list that is becoming longer and longer and it says 23 is too high 50
is too high 75 is too high now let's go ahead and do um
15. let's go ahead and do 10 and it makes sense right because what
did the computer guess um I don't see what the computer guessed
computer picked four so let's go ahead and pick four and now you can see it says correct and you could see in our
history we also have correct okay so it seems like we're able to
actually get the number of guesses now what we want to do is we want to pass the guesses that we're getting and we
want to pass this information back to our we want to pass this information back to
our front end okay back to our front end meaning like we want to actually show this information show up here so there's
just going to be a little bit of kind of like front end part we're going to do but it's still not HTML related it's
still python related okay so what we want to do here is in render a template
we need to give it the guesses okay so I'm going to say guesses is
equal to guesses okay so now our front end our index.html will have access to
this variable called guesses okay so let's go ahead here um and look and if you keep scrolling
down you'll see this div here and it'll have this comment inside of it that says insert guesses here so that's already
telling us where to do this exactly okay so I'm gonna now basically just say
let's say I do double squiggly and I just say guesses okay let's restart our server let's hit command enter
and let's go ahead and do 23 and you could see that that 23 is too low is actually showing up on our screen
right let's go ahead um let's open it up here as well so we could see it more clearly
see uh we'll say 26 check me a hundred check me so it's actually
already showing up and and looking pretty good actually you know like not
looking the best but it's showing up because we're passing a list back so it's literally just spitting out that
list right now so what we want to do is we want to Loop through that list so what I could say is I could say hey turn
this into a for Loop okay so put only once quickly with percent signs opening and closing it and we're going to say
four guests in guesses I just want you to give me the guess
okay and then we'll close this out with N4 so it ends the for Loop let's hit enter
and run and check this so if I hit um now let's go to our app
100 is too high 50 check 50 is too low
30 check so now you can see it's actually showing up as
you know as one big giant string so let's see if we could do something
further if we want to make this even better well we could can't we just put it in P tags would be my question is
that possible could we do this so let's give that a try and let's see if putting it in P tags will get it to
do [Music] um we'll get it to do what we want it to do all right so after adding the P tags
if I refresh this app here you could see that now it just breaks it up into new
lines okay so you could wrap this inside of P tags just like this and now every
single time you type it in it should break it up into different lines now watch this this div if we actually give
it a class because we've created The Styling for you so if you actually go to static
um the Styles and I scroll all the way down to
red green and yellow we've created The Styling for you where if you actually
give it the class of guess and then you give it a class of red green or yellow
it will automatically highlight it the right way so I'll just show you what that means let's go to our HTML and
let's just go and say guess red like this so if I give it a guess red like
this okay watch what's going to happen here uh let's go ahead and say let's restart
the server so we hit command enter right now and you could see if I give a 35 you could see it's in Red so let's run this
again okay 50 okay 100
all right now with our styling we don't need these P tags even actually we can get rid of these uh P tags so let's
get rid of them okay and what we're going to do is we're going to wrap just our guess inside of
the div okay so let's go ahead and do that now let's just add
this inside of the div and then we'll do the loop outside of this and then we'll have a div here
uh class guesses container so hopefully by the time you're watching this this should already be kind of there for you
and you shouldn't have to do it yourself but right now we we do have to do it ourselves that's fine let's just go
ahead here and paste this okay and then boom
oops let's go ahead like that
okay just like that cool so I have a div here that guesses
container and then inside of that I'm doing my Loop okay and then every single
time I loop I create a new div with the guess in between so this is really what it's
looking like all right um and then yeah that's that should be good now let's go ahead and let's go
ahead and hit enter and then we're gonna go and style this so let's go to our app now let's refresh and let's take a look
and see if it got any better and boom it got way better right let's hit 50 50 is too high 80 and even when you hit enter
it automatically Works 100 100 is too high so now let's go back no matter what
number you give it it's going to sit too high for example even if you give it zero or you give it like negative 55
it's always going to say too high so that is also not the experience that we
want we need it to have different things um I'm sorry it's not going to say too high
that's not what I meant to say it's going to color it red is what I meant to say Red's going to keep coloring everything red because we have
hard-coded red here so instead of hard coding right here we want to add some logic here so that's a really cool part
and what I want to say is if the guess is too high then I want to go ahead and
get a red if the guess is low then I want to go ahead and get something else so we can go ahead and write
um a conditional here okay inside of this string and I can actually say if hi
the word hi is in guess uh let's put a double quotes around this
double quotes like this we can say if high in gas if that is true then I want
to say red okay so let's see if this works so basically what it will do is if
it's ever true it'll evaluate it to true and it'll just say red it'll like replace this whole thing and
it'll just say red like that um and then we need to obviously end our if so let's go ahead and say end if and
let's close it okay let's run this and uh let's hit command enter to run this okay I'll say
23. so since it's too low you can see it's not styled but let's pick 100 and it's
too high and now you can see that it's actually red so this is working correctly it is correctly detecting if
the word hi is in your guess based on that I'll conditionally render it just
make sure that you have a lowercase high in your function uh this function over
here so you have a lowercase High and a lowercase low or lowercase okay otherwise
it won't really work um so if is if that's in guests then
you're good red now we're just going to add these conditionals multiple times so there's a first if then we're gonna go
ahead and write another else if so this is the second one is going to be an else if low in guess
then it's going to render out yellow okay and then last but not least we're
gonna go ahead and say green if none of those conditions are true and so I can
actually just write green right here okay so if I said guess yellow or gas green
or guess red it'll style it accordingly so now let's restart our server
uh we're getting an error because we're not ending our ifs correctly so let's
take uh let's take this here and we can put
that outside just like this and then let's wrap one more else if so we can actually say else
if we can say correct and gas then give a screen
otherwise and if so there we go now let's go ahead and hit
wait what's the error happening now so if highs and guess
um I don't need to end if here because I'm ending prematurely so let's stop that from happening
okay so if high is in guess then give me a red if low is in gas then yellow else if correct is in guessed in green
otherwise just end if so let's hit command enter restart the server Let's Go 23 let's go 100 so now this is yellow
this is red perfect let's find the correct number 75 is too high let's go 60 is too high
let's go 55 it's too high let's go 40.
it's too low let's go 50. it's too low let's go 53. scroll down
and it says 53 is correct okay but now there's another annoying thing so that's
really good styling is working perfectly but there's another annoying thing that's kind of annoying me right now I have to keep scrolling down from my most
recent guess and that's a that's a bad experience right because I think what should be actually happening is I should
have did not do that like I should just automatically pop up so like if I go to the solution version and I type in a
guess like 55 or let's say 100 let's go 100 and I run this you could see that
that pops up at the top so that's what I want to be happening I want it I want all of my guesses to pop up to the top
well how we can do that is keep in mind that this is a list here this over here
is a list so let's say I take this list and let's just open up python for a second and I'll go
um actually let's just zoom in like a hell a lot so you could just see this like super clearly
because I know it's super annoying to like constantly have to look at this in like such a tiny screen
I'll just move this here for now okay so I'll paste that list and we'll just say messages or guesses
and I'll pay sellers right so I have guesses here now this is the order that it's in but I want to see this one first
all I got to do is I gotta just reverse the order of this list if I do reversed
guesses that alone reverses the guesses now you can't see it because it puts it
in this reverse list iterator object so you can still Loop through it but you can't see it okay if you want to see it
you can just wrap it in a list so it'll convert it back to a regular list object okay so make sure when you do this
listing make sure to put right close all of the parentheses and you could see that it has reversed its order which is
amazing that's exactly what we're looking for so if you want to do that well then all you got to do is if you
wanna so you could you could do this right like if if I did it like this now this will give you this list object but
if you're looping through this it's not a problem so for example let's say four guess in reversed guesses and I go ahead
and I say print guess you could see it Loops through it no problem and then it returns you this
result so let's go back to our app and now what I want to do here is I want to
return our guesses but I don't want to just return regular guesses what do I want to do to them what order do I want
them in that's right I want them as reversed guesses okay I want to reverse them so let's go
ahead and do reversed guesses that's what we're going to be sending back to our front end okay so once our
front end gets these as reversed it automatically is just going to Loop through and it'll be good okay so we're
just sending it reverse from here so let's go ahead and restart and give this
a try so I'm going to say 50. so oh geez 50 is correct wow guessed
it right on the first try huh 75 is too high let's go 90
that's so rare there was a one out of a hundred chance for me to get that that is so rare I got that on camera that is
insane um yes such a low chance man jeez
so 0.0 one percent right
one divided by 100 yeah 0.01 [Music]
um I mean one percent chance why am I being such an idiot the one percent chance it's a one out of 100. anyways
95 is too high all of my most recent numbers are showing up at the top
okay 34 is too low so that's exactly what I was looking for right I wanted them to show up at the top so this
reverse trick does exactly that now the last thing I want to do is reset so when
I hit restart well it shouldn't actually bring me to a different page it should still bring me to the same exact page so
let's attempt that first okay so if I hit restart
let's not give it guesses right now let's just do it like this and let's say I go here restart my
server and I type in a few guesses like check me and then I hit restart
boom right it just restarts and then
we get going again okay 50 check me
right however the problem that's happening is like for some reason all of my guesses are coming back so let's say
like I guessed about multiple stuff right so I guess 30 50 35 but now when I
hit restart it goes away invisible for a second but then when I hit this again all of my guesses come back that's not
what I want that's that's pretty weird I want it to truly restart and I wanted to
truly like guess a new number for the computer so one thing I know for a fact is I need to re-guess the computer
number so we're gonna go here and we're going to say computer number
um is now like re like changed basically okay so now the computer number is
picked again once the reset happens the other thing that I want to do is I need to set guesses to empty again
okay so guesses will be an empty list again and then I call this
function okay and if you ever wonder why do we never pass computer number to our front end is
because we never want to show it it's only for our back end to know not our front end okay so our python app needs
to know about it but our HTML JavaScript CSS like all the stuff you're seeing visually here doesn't because we don't
want to reveal what the computer Choice was so this will reset it effectively and then we'll just send that list back
and now we don't even need to really reverse this because it's an empty list right so why does it matter if you
reverse this or not and now let's hit restart our server and let's give this a try so I will say 35
hit check me it shows up I hit 90. hopefully it'll be red it'll show up and
now let's hit restart and now everything is gone let's hit 50.
let's see if it's computer picked a new number okay let's hit 50 again
check me ah interesting it brings it all back it
brings all of it back so let's go let's see if it's a problem that we're only having on replit like AKA iframe
problem let's take a look at our version of the app or deployed version of the
app here our instructor flask guess the number right and what's super cool is this app is deployed so you could
actually just link it to anybody and even if they are Incognito or wherever they could just open and start playing
with your python app so that is a really really cool thing that I do want to give a huge shout out to for ruplet because
that is that is awesome like not you not even worrying about deployment and
things already being deployed that is crazy so let's go ahead and hit 50 here and also check me and I'll hit 90 and
we'll say check me and then I'm gonna hit restart okay and now everything is empty let's
go ahead and hit 50 again okay and it brings it all back so now this is a problem that we gotta solve because
that's really annoying why is that happening so the way that we can actually overcome this weird problem
we're having the way to overcome this is you know really what's Happening Here is
I have these local variables like computer number and guesses and computer number of guesses and these variables
are getting confused and lost in here because the same stuff that this has access to this route Index this stuff
reset route doesn't have access to that and so then that information is getting Lost in Translation okay between these
two routes so what I want to do is I kind of want to create like a global variable that everybody has access to
AKA like a database variable that everybody has access to so let's do it that way okay
so what we're going to say is we're going to say from replit import DB okay
and then I'm just going to initialize certain keys so for example one key I'm going to need is guesses
and then the second key I'm going to need is computer number so I'm going to store that inside of our database so our
app knows about it the entire time okay if you're thinking about a database it's really just this
like I'm gonna have guesses and it's going to be stored as your like stored as a list okay there's gonna be a list
of moves so or list of guesses so seven is too high for example okay and then you know let's say
five is correct okay um
so let's go ahead here this is just to show you what this will look like and then we'll have another key and that key
will be computer number and that'll just be whatever the computer I guess is right so this will just be like
57 whatever the computer has guessed here okay so that's what the DB will
look like it'll just be a dictionary with like some data in it okay that's all I want you to understand about it
but this is a database we're getting from replit and it works out of the box really easy to use okay so we're gonna
have two keys in that database one is going to be guesses one is going to be computer numbers we're going to initialize it and I'm going to say
because if I try to append to guess this but guess this doesn't exist as a key inside of this dictionary like if I try
to pen to guesses but let's say guesses doesn't exist and I do DB bracket guesses dot append
it's going to give an error it's going to say hey that key does not exist so what we need to do
is um I'll just initialize all of this I'll save guesses
not in DB so it'll check if this key exists in
the database if it doesn't then I want you to initialize that key so we're
going to say guesses equals this okay and then we're gonna do
do the same thing for computer number if that doesn't exist then we're just going to say computer
uh DB computer number is equal to
uh this random choice so yeah so it's like whenever the game
starts or it's initialized it should just be a random choice that the computer picks
and that's what should be inside of the database and problem is solved okay so I'll
remove this I'll remove this DB stuff here because that's what it is and then I'll remove our guesses and I'll remove
our computer number this statement over here because we don't need access to any of these anymore
okay what I do need access to is computer this database variable here
okay so now when we call this function message I need to give it the computer number from the database
okay and now when we need to append I I'm not I can't just append to guesses because that doesn't exist anymore I
need to append to DB guesses okay so there we go and now when we need to
clear stuff out I just go directly to the database okay and I say hey clear
out the number of guesses and also I go directly to the database
and say hey reset and pick another computer number okay and then
in my backend for databases right here I give not guesses but DB guesses and
same thing here I give DB guesses for my guesses okay so that is really it
that's really it so let's go ahead and hit command enter and try to run this
now so I will open it up here uh let's go ahead to this route and hit
enter okay and I'll put in 50 check me
uh okay let's see what error we're getting and now the error we're getting is it says print guesses we don't have
guesses anymore so let's remove those okay we do not have guesses anymore
uh you could put uh instead of that you could do DB guesses for print
and you could do DB computer number for message okay let's go ahead and run
this let's go back to our app hit continue all right there we go let's go ahead hit
restart it's gone let's now type in 75 and you can see none of the old data
came back right 50 run this 25. 30 is too low 45 it's too low 60.
is too high okay 55. 50
53. come on yeah let's go baby all right so we got
52 is correct so it is working correctly it's pulling from the database and what's great that it's pulling from the
database means I could even restart the app so let's say I like restarted the app
everything is still Gucci all my data is still there and I could kill the server and start it again so I could stop and
start and when this app would refresh it would refresh with all of that data so like
if somebody has a game session that they're playing uh that will stay there
even after you hit refresh or whatever they won't just lose it simply because they refresh their page or something so
or you restarted the server so that's a really cool part about having a database because it's pulling all the data from a
store database okay and with that said I mean unless I
am mistaken your app is pretty much your app is honestly done this has every
feature every functionality you could restart you could uh guess the number
and check if it's correct or not right and then this returns our function check number show message will return one of
these statements we get that as a message we're reversing it so it's coming in the right order we
have all the styling in place for it so yeah with that said there you go that is
fully your app you can share with your friends your family could show off hey look what I made with python you know
and especially if you're a newbie or getting started I mean I'm really proud of you for being able to get to this
part and get it done even if you just copy pasted everything that I did or
even if you looked at the solution file or even if you're using the solution file okay the main thing is you're
trying and you're here and the start all of this stuff is really hard I know but I promise it gets easier over time
okay so I don't expect that you would have figured this out yourself or done it yourself but I do expect is like you
at least gave it a try and that's all that matters okay with that said I love your beautiful face great job on making
guess the number and and I'll see you in the next video
Rock Paper Scissors Shoot maybe I got you who knows welcome in this video
we're gonna be building rock paper scissors with python and using a web
development framework called flask now I've abstracted away essentially all the
stuff that you need to know about web development so you really don't need to know any web development at all the way that I've designed this app for you is
you're pretty much only going to need to worry about writing python code okay uh if you're watching this on YouTube and
you want to follow along and build this app out with us the link isn't going to be in the description below if you're
watching this as part of this big course that we have done um I'll show you exactly where you can
go ahead and get the link but first things first I'm going to go ahead and demo this app so you can see exactly
what it is that you're going to be building so let's go over to it and I will share my screen with you now all
right so this is the app that you're building now I'm gonna choose which one I want and I chose Rock and you saw that
it said human picked Rock and the computer picked paper and paper beats Rock so I'm now at negative one and it
says you lose okay let's go ahead and pick scissors this time damn damn I lost again beating you what the cheese okay
there we go now to draw I'll pick scissors again it really likes rock huh let's wow right when I pick paper it
picks scissors this computer is too smart okay so I'm just getting destroyed here
okay what's crazy is that this is totally random so I should be probably at some point winning but you get the
point now I can also hit end and it'll end the game and watch this it's actually really cool when I actually
refresh right the data doesn't go away the data is still there so how the heck am I
doing that with python well guess what this app also has a database so you're going to be mastering databases you're
going to be learning about routing how that works you're going to be learning arguments you're gonna be learning about so much and like so much python stuff as
well so just hang in there it's going to be a fun project all right and then if I hit this end
it completely clears up and starts all over again boom boom boom okay all with
pure python all right with that said if you're excited I'm gonna walk you through it so if you're going through
the course the clever programmer python course okay and if you're watching this
and you're like I have no idea what the heck you're talking about I'm doing an amazing python course which is you know
8 10 12 hours long it's a pretty long course and um if you want to become a part of this
course the link is in the description below you could just join it completely free no charge for anything
um and uh yeah it'll give you access to all of this material the entire course all the exercise of projects we do and
you'll have access to this okay so here we go so we're gonna find this project this rock paper scissors project right
over here and then inside of this project uh you're gonna see that that project has links so we have a project link I'm
going to click that and open it I have a demo link and then I have a solution link but I will not open the solution
link okay I'll only open these two uh the solution link we're gonna leave it
not click it because that's the solution I don't want you to see the solution right now okay I want you to work on the
app so click the live demo and let's go ahead and check it out so here's the live demo of the app right we've already
checked that out so that's all good we can close it now actually I like to leave the live demo running so let's
just leave that open for now and then the next thing I want to see is the actual project so let's go here and now
what I'm going to do is I'm going to walk you through an explanation of this entire project because this project is
going to be different than the ones we've done before this or the ones we'll even do after this you are going to be
doing a lot of this because I think you are ready but it's designed for you in a way where you can do everything step by step however for all of that to happen I
need to explain to you how it works because if you tried this on your own right now it won't really make sense and you'll get lost or frustrated I don't
want that to happen I want to make sure that you have a great experience and you actually build it let's talk about first things that you don't need okay so these
over here static template stuff you don't need to worry about it pretty much at all we've hidden these complexities
from you completely in this project so you really don't even have to look at it
I was planning to hide these files folders but I think at least you should know that they're there okay in the
static is the styling of your app which you don't need to worry about okay it makes it look beautiful and color powerful and all of that and then in
templates is your template structure so it's like where does the div go where does a head go Etc okay so this here is
all your front end meaning right now if you open this app and you hit run at the top right uh first thing we're actually
going to do is when you open this exercise it's going to ask you to Fork so make sure to go ahead and hit fork
and I'll just call this uh instructor okay so make sure to go ahead and Fork because otherwise you can't write code
obviously unless you Forks you probably forked it um okay so there we go so static and if
I run this app right now okay it should show me this over here and nothing should happen so like let's say I open
this okay and I'm going to zoom in here so you could see a little bit better if I click nothing will happen click
click click click meaning none of these buttons are connected to anything so you'll see routes changing at the top
you see it says end you'll see it says play Choice equals Rock you'll see it
says Choice equals paper you'll see it says Choice equals scissors so all of this information there's
something happening but these buttons aren't connected to anything yet meaning there are no functions that we have that
are firing off yet because that's the functionality that you're going to build okay okay so here now let's walk through
the rest okay so I don't need to worry about this I the only one file I need to worry about is this main.py that is it
okay now let's zoom into that main.py and turn our attention to that at the
top you'll see some imports that you're gonna need to do not touch these These are perfectly imported for you
um you will need to add any other Imports and you won't need to remove anything so you can just leave this untouched uh like some of the code here
pretty much all the code that's written for you you can you should leave that untouched because you're going to need
access to that all of this here is I'm just creating database
database information for you that's why the app even when you refresh right it still has the data because we're using a
database here and we're using the replit database so game start player score choices results those are
initialized in the start as like false right because when the game starts it hasn't started yet it won't start
until you hit play that's when the game will actually start alright so
yep basically here all of this stuff database information that we're going to
need and it's going to change so choices is going to be you know what choice the
human picked and what choice the computer picked and computer will be picking a choice at random
player's score will be well what's the current score of the player meaning if
this player has let's say two points or the score is two the score is two
then that basically means that the net result of the student uh of the player
is like two plus two okay uh if you lose player score goes down by one if you win
player score goes up by one right so you get either plus one or -1 based on winning or losing and if
it's a draw player gets zero so that's what's going to be going in there that's all going to happen later okay all of
this stuff you're going to touch later now let me go to the functions that you should work on first and then you're
gonna work on other things next okay so I'm gonna close this index one
and I'm going to close this play one okay and you're going to see this function called get computer Choice okay
and so you're going to see functions like these so if I go ahead and close out all of these functions here this
game is made up of um one index you don't really have to do too much there okay but one function
play which is going to be your main logic that's going to go in there it's made up of computer Choice function two three
four okay and then there's end game so I would say like about five functions that you'll need to make now let's start with
an example of a function so let's say we want you to make this computer Choice function okay you don't need to change
what you write in here the arguments are already given to you in this case there are none none that it takes there's
documentation here for you so it tells you hey get computer Choice randomly selects between rock paper and scissors
and returns that string for example if you call this function git computer Choice it will return Rock
if you call it again it will probably return scissor okay so every single time it returns something different and it's
a string and so now you have to actually based on this information you have to
write this function get computer Choice okay and the hint that I'll give you is
you'll be using choice that you got from random so
remember when you did from random import choice so you'll be using Choice okay
and if you want to like play around with python and see if you could get this function working which you could always
do is you can just pop open the shell you could type in Python and then here
let's zoom in a couple of more times you could see like super clearly so you could type in Python here and um
then you could play with randoms you could say from random import Choice and then you could see how Choice works so
choice you could give it an array and then you could see okay every time I give it this it picks a run number
randomly okay great well what if I gave it strings like hello
[Music] ah that works let's see if that works yeah eventually at some point it'll get
the string hello okay great what if I gave it uh Rock here okay and I kept
running this wow it gives me rock so then you could actually take this and see if you could
convert this uh into into code for your app so you could go here and then you
could actually say okay I know how to use Choice and then this time instead of giving choices of one
two three I'll give a choice of rock paper scissors okay so get computer choice you should be able to do this and
then at the end make sure you return so you should return Choice and then whatever is the array
that you're going to give it okay so I'm gonna put in one two three but you're probably gonna put in something else right like rock paper scissors or
something and then that would be essentially this computer Choice function would be done now if you want
to test that your function is done here's what I want you to do if you want to actually test that you have written
your function correctly you can go ahead and do print get computer choice
and then pass in actually this won't take in any uh anything so it's like get
computer underscore Choice like this okay and call the function just like
that and it should return either rock or it should return scissor and it should do that as a string so if your function
can do that then you know your function works so you could test it out a couple of times by hitting
stop and start or command enter to restart your server and then you can actually also look here
in the command line and it'll tell you it'll print out the
result in the command in the console okay so that's how you would test it
now you have another function here called calculate result and this will
compare Player move and computer move and return the score accordingly so meaning here's a situation where a human
would win if you call this function calculate result and you give it Rock and scissors
it should return one why because player choice is the first positional argument
and computer choice is second so if I give the player Rock and I give the computer scissors well who would win in
that case the player right because rock beats scissor so then you get one point for that so human wins here's another
condition second condition which is human loses well you flip that scissors
and rock and the computer wins aka the human loses okay and then the human
draws so you calculate result if you do rock rock you get zero so you understand now right how this function would work
it'll take in this it'll compare them against each other and it'll give you a zero negative one or one and it'll
return a number okay it'll return an integer so your job is to go into this
function calculate result and your job is to basically fill out the body of the function now I've given you a lot of
hints to make your life easy so for example here I tell you create a variable called score and set its value
To None well you could go and do this then you'll need to write another line
and maybe even multiple lines here it's like hey uh what are all the situations
where a human draws well all this situations where a human draws are
probably whenever the player choice and the computer choice is equal to themselves so
basically it's like if player choice is the same as the computer Choice well
then in that case what am I returning here I might be returning something right a 10 a 20. so you're gonna write
this line of code I'm not giving you the right answer here right but you're going to return either a negative one a zero
or a positive one so you have to figure that out but that's how you would write that first if statement they'll catch
essentially all drawn situations all drawn situations are where it's the same
then you're going to chain that with elseifs of all of the situation where
the humans human wins so it'll be where you know if a human picked um
Rock and the computer picked scissors if the human picked paper and the computer picked Rock if
the computer picked so you literally write out all the situations where the human would win and then you would write that in Python code right and then you
would write down your else statement at the end which would be you know what happens if the human loses in that case
set the thing to negative one and if you do this part correctly you could just simply do an else here you don't even
have to really write any if else if uh type of conditions here okay
so that is what is happening with this function so make sure that that's working correctly in order to test it
call it on these terms and see if you get the same results that I'm getting here one negative one zero okay so give
that a try so that'll be calculate result then the next function you're going to
need to build after calculate result is
um the next function that you're going to need to build okay let's go ahead and do this is going
to be the get result function and what this should do is it should take in a string
with the value of U when or you lose okay or it's a draw based on the score
for example if I give it a 1 it should say you win if I give it a negative one it should
say you lose and if I give it a zero it should say it's a draw so the logic for get result will be very
similar to the logic for uh you know doing one of these previous functions
like the calculate result one so that's going to be pretty similar so you should be
you should be good to go there okay it's going to be very similar type of way you're going to do it you can have a
score and then you know if that score is a one something should happen and if
it's a zero something should happen if it's a negative one something should happen okay
so that's what's happening with the get result it takes in a score and then it returns something okay to test it call
get result on one you should get back you win call get result on negative one you should get back you lose call get
result on zero you should get back it's a draw and then uh one of the last ones
we're gonna do is end game and in here what you're going to need to do is what
endgame does is resets every value in the database to its initial value okay
so you're gonna go ahead and reset all of the database values that you have
here so game start player score choices result you're gonna set them back to
their initial States because well we're ending the game right end this slash end would run when you hit this button here
so that's what we want to do here okay and then we want to pass that
information to our front end so make sure that this all of this information here right now just hard code it to be false
and zero and empty strings but you're going to need to pass in your own um your current state of the game from
the database so for example it'll look more like DB game start for example and
you're gonna basically do that for every single one player score will come from database choices will come from database
result will come from database so it'll just put the database variables there that you're passing to the front end and
then that should be good because then your front end needs that information and based on that information it goes
and does things and keep the variable names the same here because if you change player score variable name or
Choice as a result your front end will break because your front end is depending and it's attempting to look
for those specific terms okay so for example it's looking for game start player underscores player underscore
score uh choices result so it's looking for
that specific piece of information okay so that's end um end is fairly straightforward and
then we have the function play okay so this is going to be the entire logic of
the game this will be the most difficult one to write for you but what this will do is it will change the game so in the
start you'll have these notes okay so read all of these notes and try to do them yourself I won't explain every
single line of these notes but basically you know it'll ask you to do things and then you just gotta try to do those
things okay so for example this request.orgs thing might throw you off but how what we do here is if I'm
playing this game if I want to retrieve that the player picked scissors or let's say the player picks Rock and I want to
retrieve that from the URL I can in Python I could just do requests Dot orgs
and I can say rock or sorry I could say choice so basically what I'm doing is I'm putting in that keyword argument
right there of choice and it's going to actually return and spit that value back out to me so tell me that the player
pick Rock for example okay so that's how you could do this and
you could get back the player choice by doing request.org so I'm giving you that hint already on how to do it
okay then you're going to generate a choice based on the computer you'll calculate the score of the players
you'll update the result choices and player score in the database and then you'll send all of that data here and so
all of these are going to be pulled from the actual database so all of this here
will be coming in from the database okay so there you go it's a really big
project I want to just make sure that I thoroughly walked you through it and covered every single detail that I could
about it I'm gonna try to leave you to it take hours days however long you need
to do this and then we'll get back together and go through it don't look at the solution until you have worked
pretty hard okay this is the exercise I would say don't look at the solution until you've worked pretty hard and give it a really
really strong try Okay um yeah and but don't be discouraged if you don't get this I don't expect you to
get this right it's a massive project for you to do right now would be really difficult but it will push you and I
want to just push you I'm hoping that you get the calculate result uh get computer Choice I'm hoping that you get
those right okay you get you get some of these functions right two or three functions you get right even if you
don't get the flask specific functions right or whatever right I'm happy if you do that so that would be a good place to
start give this a try and then once you give it a solid solid try remember
there's always a solution file that you could cross reference if you're completely stuck you could cross reference the solution file or which is
right here behind my face um or just wait till pretty soon you and
I are going to go through the solution together and we're going to build it out step by step okay so good luck enjoy go
cry crush this click the link below right hit the replit fork it so you
could work on it so do that right now and with that said I'll see you in a second and good freaking luck
all right welcome back now we're gonna go through the rock paper scissors solution together I hope you gave it a
try and you got close I know you might have spent hours you maybe might have even spent days
um I just want to have you pat yourself on the back because that is powerful if you didn't get it that is okay that is
totally what I expect you are a newbie in coding you're not supposed to get this but all I'm trying to do is
challenge you and trying to get you to see the beauty of coding and trying to understand it bit by bit but also feel
that pain and frustration that comes sometimes now let's go and do it together step by step and um yeah let's
see if it makes sense okay I just want you to have fun that's your goal right now so let's go to our app and let's go
through the solution I'm just gonna try to go through a little bit at a faster pace because I'm sure you've already taken a
lot of time with it right already so let's go to
um let's start with the simplest function first get computer choice this is very easy I'm gonna go ahead and say
return and I'll call Choice which I'm importing from random right there okay
and then I can simply just go ahead and say choice and give it a rock paper
scissors okay um and I know that I need to uppercase
it title case it like this because even in these documentations right here it tells me that it should say rock like
that scissor like that so that's already telling me how I need to get this right this will basically get the computer
Choice okay that's how we're going to get the computer Choice okay now I'm going to work on another function so if
I want to test this function I'll just probably call and do this get computer choice
and let's just run this and see if it I'll restart my server and let's see if it works
get computer choice you can see it says Rock so that's a really great sign let's run
it again and you can see it says scissors so
literally it set it in the same exact order that it says here
right so I know and scissors let's make it plural my bad okay
so I know that it's it's you know um I know it's working okay I know my
function computer choices work because I'll remove that print statement so we're good with computer Choice that's
uh right that's a correct correct one now the next one I got is
calculate result so I'll just follow the comments and everything that's there without even really going crazy so I'll
set the score to none and then all situations where a human draws well this
is if human uh if player choice right I have this argument this has two
arguments so I know that if player choice is the same as the computer
choice well then we're just going to set the score to zero
okay so this is like a drawn situation all situations where a human wins so now
we'll chain all of this with else ifs because it even tells you to chain him with else if so I'll say else if player
choice uh equals equals Rock
okay so the player can win with three different ones right so here what are
the three wins that a player could have well the player could win with rock the player could win with paper and the
player could win with scissors those were the only three times where the player could win so these will take care
of all the situations and rock can only beat one opponent and paper could only beat one opponent scissors could only
beat one opponent opponent meaning scissors can only beat paper paper can only beat rock rock can
only beat scissors so I know that I'm just gonna have one
uh line of code is essentially gonna take care of this and another one that's going to take care of this another so it
should be like three else ifs essentially so if player choice is Rock and and
um or actually I can say and like this and computer choice is what computer choice would have to be
losing choice we're gonna go ahead and say return or
score is equal to one so this isn't a situational human wins I'm going to copy
paste this here okay now it's the second choice if player choice is paper and
computer choice is Rock
player wins okay what's the third situation where the cleric will win
if the player chooses scissors and the computer picks paper right so now we
officially have all the situations where the player would win so we're done with
this part now it's a little ding right there okay and now we have else otherwise human loses so I could just
say else score is negative one this is the only other case lost if we've
accounted for all the drawing situations and we have accounted for all the winning situations the only other situation that's left is
um if the human loses right that's the only situation left and at the end we're just
going to return score so this function now is complete now you should go ahead
and test it obviously and write print statements to test it I won't because I'm very very sure that it's good okay
but you should give it a try and I'm also doing this so we can keep the pace of it uh smoother
all right now we gotta work on another function called get result well how does this work so get result returns a string
with the value of you win you lose or it's a draw based on the score okay so if I call get result on one I
get you when if I call it on negative one I get you lose otherwise I'll draw okay that should be simple enough right
I could say um if score is equal to one
return [Music] you win right
elsif score is equal to zero or negative one
return you lose and else
okay else returned
it's uh and let's put double quotes here it's a draw
the reason why I'm putting double quotes is if we use single quotes it would be confused because it would
think that the string starts here and it ends here but that's not what's happening right we
have a string starting here and ending here so putting double quotes So then it knows that this is an apostrophe
and not a string ending okay so that's it for my get results so
I'm done with my get result okay that's good now my end game well what I need to do is I need to
reset all the variables right that's what it told me so I'm going to go ahead and do just that so I'm going to say
DB game start I'm going to set it to false
okay um DB player score I'm going to set it to zero DB
choices I'm going to set that to empty string and DB result I'm going to set
that to an empty string as well okay and then I need to pass all of
those to my front end okay so this is the part that I've told you is going to
be a little bit tricky so boom right there boom right there we're only passing only
database stuff to the front end okay that goes there
cool so now our end game function so whenever we hit end game our end game function will run right and then all of
this will happen and then it'll send that over and once I send it over index.html will render all of that out
on the screen okay so now our end game is done and then all we have left at
this point is really um really just a few ones so this one needs all the database information so
this one is very very easy just like the last one let's just finish this there isn't even really any code you need to
write here like any extra code we're just sending the database variables here to index
which is our home page so let's just get index done okay the result and then we'll set it to
this okay and then the last one that I I really got to do is
I want to be able to change the state of game um I need to change the state of
game start in the database to true so for example once you hit play well now the game has begun so game start will
change from false and it'll now become true so we're gonna go here and I'll say
I'm just gonna yep perfect that's great I'm good here I'll do game start and
I'll set that to True okay so I'm good with that now the next thing I need to do is get the human Choice from URL
arguments and save humans in a choice in a variable okay so we're gonna call it
um we're gonna just say player choice and we're gonna set it to this because that
is getting us the player choice uh from the URL okay so that's what's
happening there player choice and next up what I want to do here is I
want to generate a choice based on behalf of the computer and then save it in a variable so here I'm going to be
leveraging the functions that I've created earlier so I'm going to say computer choice is equal to get computer
choice so now I'm leveraging this function that I created earlier then we're going to calculate score of the
player versus computer choice so now I can do uh get the score from
the database so I can say result and I can set it to the database so now I can do get result
and then I can give it the score okay and if we want to get the score let's actually get the score first so let's
let's calculate the score first so we're going to go ahead and say score and I'll say calculate result
and we'll give it a player choice and computer choice because now we have the player choice
and we have the computer choice right so this is coming from the URL you know with whatever the user is clicking
um and then this computer choice is being uh we're getting this randomly
okay and then we give this for calculate results function so if I go to our calculator result function it knows what
to do and then it Returns the score so it either returns a negative one a positive one
or whatever right so if I go to our thing I know that this is either going to be a
negative one or a zero or a one okay so that's what the score is doing
then what I'm going to do once I get that score is I'm going to increment the result in my database by plus equals
um or sorry actually I want to set the result in my database to whatever
the result was of the most recent game okay so score and I'll get result and
get result either says you win you lose or you draw or as a draw
okay so that's what writes out for example in the solution version that's
the function that's gonna do it's the draw it's a draw part or it's a win part or whatever
that's how we're figuring that out and then score is the function how we're uh
score in the database is how we're keeping track of this two and three and then it turns to four Etc so let's go
back here to our app and then I'm going to get the uh set the choices key
to a string and this is going to be a string that's going to say it's going to be a string formatting
here and we're just going to go ahead and say player choice
and we can make a human Emoji here
man person
okay so this will represent a human Choice and then I'll put this bot here
robot and we'll this will represent the computer Choice okay and then we'll go
player score we'll increment the player's score by the score that we just got for the
game so if the human lost or if the player lost it'll decrement it by one if the player if it was a draw it'll just
add zero which won't do anything and then if the player one then it'll be a plus one it'll increment it by plus one
now I need to give the database values to our back end so we've done this before a few times so I'm just going to
take this and put that uh for the result
we're gonna give our front end choices so we're gonna put that right here we're gonna give our front and player score
and we're going to give it game start so let's go ahead copy this right there and
we're going to give it game start okay there we go and now at this point
we should be pretty good actually the whole game should essentially be working
so let's go ahead and hit command enter on this and I'm just going to open it up in a new tab and let's check it out boom look
at that right paper versus rock you win let's go
hit this scissors versus rock you lose right that was a one of the situations that we had
Rock versus paper you lose huh interesting paper versus Rock so we pick
paper computer pick Rock so that means we win and you can see that it's incrementing that uh result as well so
if I keep winning it'll keep going up to a plus score or a zero score if I keep losing it'll keep decrementing down to a
negative score and now watch what happens when I hit end boom everything is gone
even if I refresh it's gone right not there so we are using a
database and we're getting all of this to work right so there you go
uh did not mean to put that there and get it out of here there we go there
we go got it okay so there you go that is rock paper and scissors
you went ahead and built it yourself now you even have a URL it's deployed online
already so you could share this with your friends family anybody that you want
um but overall I just really hope that you had a ton of fun building this you had a great time and don't be so hard on
yourself if some of the stuff you didn't get or feel like it's kind of going over your head
you know go through the rest of the course if you're not part of this course make sure you sign up for it below so
you can you know be able to go through the entire course um because if you go through the whole
course it'll make a lot more sense and if you just jump to this project here because that'll be a lot trickier right
with that said I hope you enjoyed it this was a great project I had a lot of fun building it with you I hope the
explanation and then the solution type of method worked well I spent a lot of
time with my team building each you know exercise function in a way that's just awesome
um but yeah I hope that worked for you I hope you enjoyed it with that said I love your beautiful face and uh I'm
gonna see you soon let's keep going time to build another app with python
and flask this one is going to be called a random dog generator because Isn't it
nice when you click a button and you get a picture of a nice puppy that's what this is about and this app will have a
lot of functionality for example this will have a database this will have the ability to track the users and the
sessions and um yeah it'll have a leaderboard for who generated the most dogs
and we'll do this in very few simple lines of code and so it's gonna be a lot of fun building it let's go ahead and
demo this app so I can actually enter my name here so let's say I go qazi
and I go login slash sign up it'll bring me to this page over here right this is the home page now it's telling me that
my username is qazi it's uh it's telling me that this is my first login that's ever seen and it's also telling me that
these are the total amount of dogs that were generated the entire you know website wide all users combined and then
it tells me here who the users of this app are so we have these three users right here Kamikaze
David test those are the three users of this app so far okay and then these are
the dogs that were generated all right now if I go ahead and I hit refresh
okay let's go ahead to this page and let's go ahead and hit get random dog
there we go you can see that now I just got a brand new dog right here let's hit
another another time get random dog boom I just got another dog and you can see this total number goes up and it's also
tracking dogs that you have generated so it actually can keep track of every single user and all the dogs that
they've generated so when you log in it'll keep track of your dogs but when you log out and you log into somebody
else then it'll keep a track of that user's dogs right so I can keep clicking and you can
see that I'm in the leaderboards right here now if I go ahead and I do more than nine I'll actually pass
test okay so let's keep going let's keep going I just generated eight dogs let's go ahead and generate nine
dogs and ten and Watch What Happens boom right when I did 10 you can
actually see that I pass test and now I'm here all right so that leaderboard
works perfectly you can detect my number of logins now let's say I log out right and then let's go ahead and I go
quasi and I log back in it remembers that I've generated 10 dogs let's say I log out and I log in as a new user so
let's just say I'll say um John let's enter and say you have generated
zero dogs and number of logins is one now if I hit get random dog right the
dog is generated and I can see it on the screen so a lot of concepts are covered
here like for example being able to keep track of the session of the user meaning when I refresh it still knows that I'm
John so the app is still running a database all of this information is
actually stored in a database forever right so it says 45 when I refresh it will still say or if I generate a new
dog obviously it'll go up to 46 so you could see how this app is working right like every
single time I click this I get a brand new dog we have this little nice little spinning effect if you hover over it and
all of this data over here from the leaderboards this of course is coming from a database as well where we're keeping track of all of the users and
then it's showing that so you'll learn a database as well in here okay great now
if you're watching this clip on YouTube you can just click the link in description below it'll take you to the
exercise page of the app for the repository and you'll be able to use it
if you're part of this python course that we're going through the mega Python course we'll link that below as well
uh then just simply go down to where so in the python course right the best
Python tutorial in the world if you keep scrolling down you'll see all the projects you'll see this counter project if you scroll down you'll see this
YouTube app project that we've built and you'll see this random dog generator so you could go down here to random dog
generator and there will be Three Links available for you one will be a project link so this is the link where you'll
actually click and build your application uh the second link will be the live demo
of the app and the third link will be the solution file so this only look at it if you really really really really
really need to and you're stuck but this is like the solution so don't look at it right now okay but you could look at the
live demo that should just get you to this page and you should be able to hit get random dog or if it doesn't see that
you're a user in session you could just create a new user and keep clicking get random dog and it'll keep generating
random docs for you right so it has apis as well because we're using an API to get these dogs all right so I want you
to go ahead and click project okay and now that you've clicked project it should bring you to this page and if
you're hitting it from your computer it might actually bring you to this page that asks you to fork okay then once it
brings you to this page just go ahead and click four okay go ahead and click Fork like this and it'll ask you to
create an account create an account it's all free all right so uh nothing really
to lose there and then just Forks can build off of it and since we're not building it from scratch we're giving
you a couple of components and things that you'll need like HTML and whatever you know it'll be wiser for you to Fork
this will make your life a lot easier all right so I'm gonna go ahead and Fork this with you as well so I'm going to go
ahead and Fork this and you can call it whatever you want I'll call my Fork instructor because well I'm your
instructor okay so that's what I'm going to be calling it that way feel free to call it whatever you want right as long
as you can find it easily and and do whatever you need to do okay so here we
go all right now that you've forked everything and renamed everything once I run it you should see this page over
here okay this guy right here so this basically means your app is you know
running it's not fully built yet right so for example you have this front end
but let's say I log in hit login and sign up it doesn't work if I hit get
random dog it does not get me a new dog if I hit you know let's say I hit log out it won't log me out right and this
data over here right now is dummy data meaning it's not dynamically changing or anything like that it's just hard coded
in here okay so right now in the current state this app is broken okay but all
the front end is there why is the front end there is so you don't have to spend because it's a python course and we want
to keep the concepts focused to Python and flask and we don't want to focus the
concepts on web development necessarily so let's go ahead to
um yeah we want to just keep the concepts Focus to like python web development and flask web development
not necessarily HTML and CSS and The Styling part okay so great so this is where we're at now
if we want to connect these buttons right like a get random dog button so it
actually gets a random dog well what we need to do if you remember is what
and some of these things if you want to give them a try you should actually pause the video and give those things a
try because that's how you will learn if you just keep watching me doing all of
this it's gonna be not like the most helpful way for you to learn okay so I urge you to keep pausing the video at
times and giving things a try now some things are new Concepts but like connecting this get random dog Button uh
to a path where when you click it right once you click it it takes you to
just get dog route is as simple as creating a route inside a flask and so
you've seen us do that with python multiple times at this point so I want you to give that a try on your own okay
I'll give you five seconds to pause the video five four three two one all right
now the URL now I'll we'll do it together if you if you didn't pause it or whatever or if you've tried it great
so let's go ahead and do this together so the URL said get dog so I'm just going to go ahead and I'm gonna create
get dog and dog function and I'm just gonna say uh let's go ahead and say
uh return dog page okay just just let's just do
that for now let's go ahead and hit command enter I'll go hit refresh here
okay and then we'll hit get random dog okay and there you go you can go ahead
and see that the dog page is now showing up okay so like that part is connected
now what I want to happen is I don't necessarily want a entirely new page to
come up um what I want to happen when I hit this get random dog is this same page to
render okay the same page to render just with new data though this time
so let's just walk through some of the other pieces of code that we have in here just so you can fully understand
what we have so this is a basic flask app so far okay and we're rendering
index.html okay so index.html is right here
and this is already all created for you okay so this is the HTML and the CSS
part that you don't really have to do okay this is all created for you now if I go back here and this components is
also created for you as well it's a card component that we created so you don't have to create this and then the styling
is all done so that's that's the stuff that's all already there
okay now let's go back and inside of here we're we're getting
the dog but now what we need to do is still return the same page okay so what I'm
going to say instead is I'm just going to say render template and I'm just going to pass in this guy
right here I'm going to say index.html okay and all we need is information
about a dog so let's just say we had a dog uh image
okay let's let's just say we had a dog image and this image was let's just go
to Google and let's get a dog image okay so there we
that looks like a really cute dog all right we're going to go ahead and copy image address and I'm just going to
paste that image address in there okay so this is a dog image now to my front end I can send this
information okay so I can go ahead and I can say dog image it's equal to dog image
okay now what this means is I am sending this information so it's available inside of my index.html
okay that's what I'm doing here and this variable here that I'm creating we will have access to it in the index.html okay
so in my index.html what I could do is this is where the dog image it's
already telling me that this is where the dog image is supposed to go okay so this is where I'm going to go ahead and
put my dog image I'm going to create an image tag and these notes are telling me exactly
how to create it and I'm going to say my source in this case
is the dog image okay so I'll put double quotes
this and I'll say dog image just like that and we'll give it a width of 200 and
we'll give it a height of 200 as well
okay and then let's give that a try let's go back
okay so let's give all of this a try so I'll hit command enter and we'll go here I'll refresh and right now I don't see
anything dog related right but let's hit get random dog and let's see what happens and right when I click get
random dog our dog shows up okay and this stock shows up and that
dog we already have like ready-made you know ready to go and that dog shows up right away so
uh so far so good right like so far so good when I run this get random dog when
I when I click it initially right it shows me the dog right away so that means our app is working I can restart
the server obviously we can go back to our app and we refresh and we're seeing the dog because I'm already on that
route get dog but let's say I go back to the home page and you see I see no dog but right when I click get random dog it
shows up okay now this styling and where the spinning and everything is coming from we've already created a CSS styling
for you where when you add an image we make um we make stuff happen to that image
okay so we'll make it so that image will either spin or look a certain way or fit
a certain way Etc so all of that is done right dog hover uh that's what's doing
that hover effect okay but I don't want you to worry about the what's inside of that Styles file
okay so we're putting this in this div with the dog okay so now my dog image is showing up let's
go back here but what I need to do is I
need to now actually get the dog data okay so let's go ahead and dog image API
so let's find dog image API there is dog.ceo
and what this does is this will get you a random dog every single time you click
it okay so if you hit fetch over here zoom in more okay and the URL is there if you need to
go to a dog.ceo dog API okay and if you hit fetch it will just
get a random dog for you okay and it will return it to you in in
Python this would be a dictionary that has two keys message and status and then
those keys have these values so the key we care about the most is the key called
message and that's really the URL I don't know why it calls message it should be called the URL okay and every
time I run this it creates a new URL and then it shows that image right and
that's the image that we need okay that's the image we need access to so I'm going to go ahead and I will copy
this that's what we need okay and we're gonna make a request so if you remember
we're gonna go ahead and do import requests which is a library
and we're going to go ahead and do request.get we'll put this dog image in there we'll say response
is equal to that and then I'll say data is equal to response.json and then let's
go ahead and print um print that data over here
so I'm going to go ahead and rerun this and let's see if we get any errors or what happens
and did I get any data okay I didn't get any data yet but maybe
once I click the get random dog I might actually get what I'm looking for so here's what I'm going to do I'm going to
make this like this and I'm going to take our app and I'm gonna put it like one thirds here and I'm gonna make our
coding editor two-thirds so I can just see this here the whole time now let's go ahead and let's see what happens when
I hit get random dogs I'll make myself a little bit smaller here and let's watch
what happens I'll hit get random dog and right when I hit that
you'll notice that I actually got a bunch of data back and I can actually see I got this URL
I got the message dictionary and then it tells me here's the URL for the dog and if I command click it it'll open in a
new tab and I can actually even see the image of the dog okay so that means that
that's clearly working so now all we need to do to get that out
is we need to just say data and we need to get the data message and
that will just get us the URL without necessarily getting us the entire dictionary okay so let's hit command
enter always make sure to restart your server otherwise your changes won't show up okay and in this app on the right
hand side I'm going to go ahead and hit get random dog
just like that okay and you could see I got back just
the URL right here just the URL okay all right now that I'm getting the URL I
know that I can just send that image back to my backend and I'll just print
it out so let's go ahead and remove this I will say
uh this is the dog image and boom it's that's already plugged in so we're
giving it the dog image okay and we don't need this dog image variable here anymore the hard-coded one
and uh that's essentially it so we're giving the dog image to our front end
our front end already knows how to render it right over here okay so let's go ahead and command enter command enter
will restart our server you could always also stop and start again so either way
should work and now I'll hit get random dog and there we go we just got a random
dog let's click it again I got another dog let's click it again I got another dog beautiful now
that is working perfectly but what isn't working perfectly is I need to find out
a total dogs generated so every single time a user clicks any user clicks I
don't care who any single time a request is made by clicking this get random dog
a get request is made to our get dog route or get dog function I need to
store that in a database and say hey somebody requested a dog which means a new dog image was generated
so if I want to do that I need to actually have a number in my database
and I need to increment that number in my database so you should actually give that a try see if you could pause the
video here and you could get the number from the database okay or you could
create the database with replit and try to right and just so you have a hint
from replit import DB okay so that should get you the entire database and
then the database all it is is it's just a empty dictionary so to use it is very very easy okay that's what DB is it's
empty dictionary when when it starts and to use it is very easy if you want to create a new key you could just say
total dogs generated or whatever right then
um that will just be the key okay total dogs generated and you could set it
equal to one and now set it to one or you could increment it by one so see if
you could do total dogs generated and make it so in the get doc function it
increments it by one make it so you pass that information to your front end and make it so that your
front end actually shows that information out here if I go to our
index.html file you can already see you have this card Emoji with total dogs all you have to do
is pass it data okay where it says zero you need to just pass it a number so
what you're going to do once you have your number is you could just do something like you know dogs generated something like
that and once you do that everything will already automatically be handled for you okay because this card component
knows what to do it just needs three pieces of information and once you give it to it it'll make a card for you
okay great so let's go back to here I want
you to take five seconds to pause the video and then we'll do this together five four three two one all right let's
go ahead and do it together now okay I hope you gave it a try and hopefully you made some progress
and even if you didn't get it don't worry because this is you know this is going to be a tricky task and we'll do this together
all right so from replit I'm already getting access to my database and so now what I want to do is I want to go here
and um just increment my database by one so increment
okay so I want to say total dogs generated by
one okay but here's the here's the tricky thing right it's possible
that total dogs generated might not be um
might not be uh created yet as a key so
if I'm incrementing a key that has not been created I'm going to get an error so a simple hack I like to do which we
did in our last app as well is is uh I will just say if
dot total dogs generated not in DB
then simply go ahead and set that key total dogs generated
to be zero okay so now that we initialize it so we will initialize it but anytime our app runs if
this key has not already been created okay once we do that
we can increment it by one so that's not a problem and we'll just send that information back okay so we'll go ahead
and say uh dogs generated equals
DB total dogs generated okay so now we're using the information from the
database and storing it in a variable called dogs generated okay or we we could say
total dogs generated as well okay
um yeah this is fine dogs generate is fine that way it's not too long and doesn't run across multiple lines so
it's easier this way okay so I think we're good on this now let's go to our
let's go to our front end now so I'll go to our index.html
and inside of our index.html let's go ahead and add it so here where it says
total dogs I'm just going to go ahead and change that with total
dogs generated and let's see if that works
let's go ahead and hit refresh okay we got an error
let's see if we can put this in quotes and if we will still get an error if we put it in quotes let's try it
oh I have to close this out
let's give this a try let's refresh our app all right so this is not what we want
right it says it it literally says the the ginger templating so that's not what
we want so we're gonna remove that ah actually since this is already python
because it's in these two squigglies it's Ginger is what they call it but it's flask calls it I could actually
just write the variable name here and I can just say total dogs generated because I have access to that already
so let's go here and let's refresh okay great
um let's see why it's not showing it is it giving us an error so let's just
dissect this one at a time so I'm going to go back to our main.py and let's go ahead and hit print and we'll see total
dogs generated and let's see what it tells us for total dogs generated
um [Music] seems like it's not actually giving us
oh yes okay okay okay okay okay okay so the problem that's happening is we need
to go to this path get a random dog that's why this will only run when we go
ahead and say get random uh dog okay when we click that button
click this button right here so let's go ahead and click that button get random dog
okay and interesting it still says total dog to
zero let's hit it again set it again all right and let's see what our ah dogs generated so let's go
back to our index.html and we're gonna call this dogs generated here okay so we were also giving it the wrong variable
name so that's what also caused the problem so let's run this now and let's hit get random dog okay and now we can
see that total of seven dogs are showing up and then eight dogs and nine dogs and
ten dogs but watch what happens when I go to our home page it says nothing is
showing up right so what we want to do is in our home page we want to also pass
this information okay so what I'm gonna do is let's go here
and think about how you can pass dogs generated to also your home page okay so
I'll give you five seconds to try and figure that out you should be able to figure that out and it's it should be
pretty easy okay so I'll give you five seconds to pause and try it yourself five four three two
one all right let's do it together now so it's very simple I'm just going to
copy this line because I already have access to the database and I'm just going to do the same thing docs
generated is these total dogs generated and let's run this now when I hit refresh it'll show this even on our home
page as you can see the URL is the home pages URL okay great so that problem is
now solved when I say get random dog every single time and I'll increment this by one
and that's already working that is so cool okay now what we need to do is
we okay we're Gucci with this right but now our problem is different our problem is this how come when I go to the home
page it doesn't show me a dog why is the link broken well because if
you look at the home page we're not passing any information about the dog image so when we go here and it's saying
uh where did we put the dog image let's see yeah we put the dog image right over
here right well this variable dog image is actually not defined so when it's not defined it
has no idea what to show so it just doesn't show anything so what we're going to do is
how about this whenever we get how about this right so whenever on the
client side so our client side somebody makes a request to get the dog
so we give them a image of a dog okay this is a dog my drawing is terrible
then what we could do is we could actually store that inside of our database
okay store that inside of our database and we could store that last dog
right the most recent dock that they clicked and then since this is in our database
now our back end our server side
will have access to this okay
it will have access to this if you don't have it stored in the database then there's no way that our server side will
actually have access to it because it's not stored anywhere it's just gone that image is just gone so that's the
solution that I suggest we use okay it's going to be a simple one and so what we can say here is
we'll go ahead and create a new key inside of our dictionary and we'll say last image okay or we can call it last
dog and that will be this dog image right here okay that's
going to be the last or the most recent dog that we got
okay and uh yeah and so that's then since it's in
our database Now everywhere inside of our app will have access to it okay and we're just going to write that line for
that one too so we're just going to say hey if oh uh last dog
last dog is not in the database then I want you to just create it but uh give
it an empty string okay so just set it to set it to nothing like no dog so that's
what we're gonna do and then let's go ahead and pass this
so let's go here and I'm gonna say last dog
okay or we can just say dog image is equal to database last dog
okay so that's the last dog that the user got right so let's run this now and let's
take a look at our app I'll refresh this so now our home page will get the last doc from our database since we didn't
have a dog in our database yet you can see that it's empty but let's say I now do get random dog
that's the dog that it is stored in our database now watch what happens when I go to the Home Route and we run this
we're now still going to see a picture of that dog because that was the last dog that the user got got stored in our
database and then we're just outputting it okay so now we're done with the
functionality of uh you know being able to ask for a dog and then
being able to show the dog on on either to get dog route or the home page route
let's also just add a little bit of Border radius to the dog so he looks nicer so again we're not going to be
doing too much CSS but this is pretty much um all we're going to tune this is really simple okay so let's go ahead
here I'm going to say style and we'll add a little border
radius here so I'll just say border radius and we'll give it a 10 percent that should be good
and let's refresh here and let's see what it looks like there we go so we got the Border radius
so the image looks just a lot cleaner right just to we didn't even have to add too much border radius just that alone
should be good all right so at this point of the app all of the global data
parts of this app are now completed meaning uh the total dogs is like this
global data part of the app that's completed and being able to get this dog on when you click get random dog that
part is completed so like the surface level functionality you know or the
global app functionality is completed but the entire main functionality of
this app actually lies in user-specific information okay so this
part is not completed yet that part is not completed yet this part is not completed yet being able to sign up with
the new user has not completed yet being able to log out is not completed yet and then showing those specific users and
everything is not completed yet right so there's a bunch of functionality that we need to add and all of that
functionality is user specific okay it's user authenticated in other words so
it's like if that user is not authenticated uh this stuff will not work okay
so let's go ahead and add uh stuff in about the user so I'll show you something you can actually uh first of
all actually let's do this let's make it so when somebody types in their username and hits login we actually get access to
that data okay so let me go ahead here and let's type in a name so I'll just
say Kamikaze or I'll say Kazi right and we'll hit login here
you can see it says method not allowed and this method is not allowed for the
requested URL now let me show you something here because this is going to be an important thing to understand so
if I go ahead and I hit inspect and I go into Network okay and make sure that you've chosen all in this case
and let's go ahead and hit click a certain page okay so let's close this for a second and I'll hit get random dog
all right now let's go ahead and hit inspect
and go to network and um just go ahead and do get random dog again or just refresh the page while
you're on this URL that says get dog and you can see we're actually making a
uh we're actually making a request get dog okay so you could see right over
here it says get dog and let me see if I can actually make this a little bit bigger so you could see it
okay there we go um and you have
you could see that we may get dog and you can see the request method here is a get request method status 200 is means
everything is good it's clear it's working and made that request this was the
request URL and then it knows as a result of that request there was also a response okay
you click this response right here I'll show you like what happened as a result and it popped in that image
right and that's what happened this is obviously what the page would look like
if it didn't have any styling okay so you could see that that's the that's the response we're getting
okay now if I go ahead into this username
um and the next one Watch What Happens okay so this is this is how a get request looks like okay we're doing a
get request on this now when we're sending data through a form like here if
I'm writing cozy and I'm trying to send the data through a form this will not happen from a get request get request is
only so you can retrieve information but if you want to send information then you
use something called a post request okay so this will get info okay this
will send info okay so what what do I mean when I hit
get random dog I want to get a dog so I make a get request
but when I want to set when I want to sign up a new user I'm getting the data from the user the user is sending that
data so that's going to be a post request to our back end okay and watch this
when I go ahead and click um login sign
up it's going to take me to this page it says method not allowed okay now let's go ahead and hit inspect
and let's go to network again okay and let's refresh this exact same page and you will see I get this 405
error right here and this will be all red so let's click this and it's saying hey the
request method was a post the status code with a 405 meaning like not found or error basically okay so 405 this is
so it's a method not a loud error that's usually what that means I believe and it
happened at this URL okay so now we need to think about
well you know what the heck happened and
you know how how do we uh stop this from happening now you might be asking the question well how come one button
get random dog sends a get request
but clicking the login sign up button sends a post request how come they are
sending different requests like how come this is get and then this uh this button right here
is post how's that happening well the answer lies in the HTML part of the code
so if I look here and we find this login button so I'm going to hit uh get random
dog so this button here right we're passing the action slash get
dog by default the method that's being used whenever
this is a situation uh is that it's a
it's a get request so here this is a get request that's happening okay that's the
default Behavior over here where we're saying login slash sign up right over here if you actually
look at the form the action is route to the home page but the method is actually
post okay so the method is a post request that's what's triggering it so in other
words I could actually take this here and say method is equal to
get and it wouldn't really change anything because by default if you don't write this this line is already there
okay so having this or this is the same exact thing
but I'll just leave it there so it's you know you could cross compare it so here we have in this login form we
have the username placeholder thingy and then we have the button so you could actually click that button and then you
know since it's a post request it has the ability to send the data over to our server now here's how we retrieve this
data so when we go here to our main.py let's go here to our app route now
that method it said is not allowed right so we want to do is we can send in methods and we want to say you we should allow
the get method and this route will actually allow the post method now let's run this app and let's click login and
sign up and let's just see what happens and what's the error it gives us so when I did that watch what happened
it didn't give us an error this time right let's click it again log in and
sign up no error so what did it do well it detect it said that this method is loud and then it
just went ahead and rendered the home page okay but since we have a post request happening we want specific
things to happen we want to be able to retrieve the data that the user just gave us so what I can actually do is I can say
if request and request this is global uh
variable that all of the flask app has access to and so if you run it inside of
a like a route here and you do requests you'll get access to things like what
the user passed in as you know query parameters or what the user passed in through a form you can access all of
that and so we can also detect methods so if request method is equal to post
then I want to say print you clicked the login slash sign up
button okay so let's just go ahead and try that so
I'll command enter so our server restarts and takes changes I will open this up so I can see everything being
printed out and then we'll run this ah request is not defined so we want to do
is we want to grab requests from flask so let's go ahead and grab request okay let's hit command enter
restart our server here okay let's go back and now we shouldn't
have any errors coming up now if I hit log in and sign up you
could see if I click it you could see over here it said you click the login sign up button
right over there okay you click the login sign up button okay
so that means I'm detecting The Click happening now I need to actually get the user form so I can actually say print
request dot form and we can ask it for the username okay and we're going to say
user underscore name now where is this username thing coming from this has to do with our front end so if we go here
we said that this input is going to have the name of user underscore name so if
we want to pull the value out of this we need to make sure that in our back end we also say user underscore name just
like this okay so now let's go ahead and open this up and we'll run this hit
command enter to run it and then we'll type in a user here
okay so let's go ahead and say quasi and I'll say log in and sign up and you could see that it's pulling the data
from The Forum now so we can actually now get input from the users right that
is awesome so now I can see it can say okay you click the sign up button and it
says cozy over here okay so this is a really good sign it
means we have made a ton of progress all right now that we're getting the user what we could do is we could actually
store that session so I'm gonna go here I'm just going to comma session I'm going to import uh also get access to
each session inside of flask and sessions are kind of like cookies to store data about the user okay and now
in the session I can just go ahead and say session user okay or username whatever you want
to say and I'm gonna go ahead and do this say username is equal to
whatever the user puts in the form okay so if the user makes a post request and submits this form
whatever user the name they put in that becomes your username and then restore that inside of our session
okay so that becomes a username we store that inside of the session Okay now what's cool about session is
our app has Global access to this session thing which means that I can
actually go to our index.html here and just call session without even needing to pass session through
um through my template okay so let's go to index.html and here where I was passing the word
cozy instead I'm just going to go ahead and say session user just like that
okay so let's go back and let's re-run this app so I'm going
to hit command enter okay so we restart the server and let's go ahead and try saying my name is David
and let's see if this changes over here so I'll say David okay we got an error ah so whenever
we're setting sessions we need a secret key okay our app will need a secret key
so we'll just go ahead and set it up if you're getting this app you should already have the secret key set up for
you and some other variables in there but I'm going to be writing this from scratch so you could just understand
better what's going on so basically here I'm gonna go ahead and set my secret key okay so I'm gonna say
app dot secret key and I'm going to say very
bad secret key okay if you want to use actual secret Keys what I recommend is Rebel it has
something called environment variables so you could store a secret key there and then you could retrieve it from here
okay and they have docs too if you want to go see how to use sensitive
information and they have OS dot Environ right and then you can actually type in
whatever password you wrote so that would be a pretty good way to keep it secret and as a matter of fact
we could actually even do that right here so I could say OS dot Environ okay and if we look at the docs the docs
tell us to do this right the docs tell us call this
function and then uh or not sorry to call this function it's a dictionary so index it
and then I'm just going to say flask key okay I'll say flask Secret
key I guess we'll say that and then here I'm just going to put
very bad secret key
okay that's it and I'll add this as a new Secret
flask secret key now if you're gonna store a secret key do it
like that that'll store it safely that way anybody viewing your code will not actually know what your secret key is so
you could actually keep it hidden rapplet makes this very very easy for you but yeah right now we're just doing
dummy data stuff so that's why we don't need to have put like a actual you know 64-bit or you know 256 bit Shaw hash
cryptographic secret key we could just put a pretty bad key and we'll be fine all right and then
what I want to do is I'm going to do app.config and I want to say session so since
replit has an iframe that they're using here sometimes cookies don't work properly so if we go ahead and do
session cookie same site that'll solve that problem okay
none and then we're going to go ahead here and I'm going to say I have a cookie config so this session
cookie secure and we'll say true okay and that's done this these lines are not
even really necessary this is just so in the replit iframe if you're running your app it works the main thing was just
setting the secret key here okay without this you can't have sessions so let's hit command enter let's refresh
our app and let's see what happens okay I think we got an error let's see
what's the error we got so it says OS is not defined so let's go ahead and Define that and at the top here we can just go
ahead and import OS just like that okay so let's run this and let's see what the error is now okay
now it says app is not defined okay no problem so we're going to go ahead here
and put that as one of the first lines of the code okay and now we shouldn't be having
errors great let's go ahead and refresh this
there we go you could see it says David okay now let's go ahead and change it to Cozy and if I hit login sign up you can
see it says cozy and let's go ahead and say ninja and I'll hit enter and now you see Ninja
here okay and there's something deeper that's happening okay so for example if I refresh let's say I go ahead to this
link and I just refresh right if I do that the name is still there if
I hit get random dog the name is actually still there what the hell is happening how are we making this happen
the secret lies in what's what happens if you hit inspect and you go to application here okay and inside of
application you'll see we have session storage and we have cookies okay so
let's go ahead into our session into our cookies here
okay and inside of our cookies we can see that we have this session
okay this session is storing all of the value okay this inside of this session
is where we're storing our user and everything so as long as you have access to that session right there you'll have
access to everything that that session sees okay so if you store a key in there
you'll have access to that session and let's see the expiry date over here okay
it's kind of like cookies okay uh the expire it pretty much never
expires okay it runs for a really long time so that means even if you refresh you'll you should still see this as long
as your session is up okay and I believe until you close out your Chrome browser
or something like that or your Safari or whatever you're using and you come back so that's what it's where it's stored it's stored in like a local storage
cookies uh inside of your browser and that's how it actually stays there even
after some time okay so that's why we used
um that's why we use sessions there all right now that the user is signing in
and I'm able to retrieve that user's information what I'd actually like to do is store that user inside of my database
and that way we could have a big database uh with you know so just
imagine a giant dictionary with um every single user that's ever signed
in okay and information about them so essentially how I would want my users to
look like is Imagine This I imagine I had users and they would be it would be a list of
dictionaries so like this okay and then each of those users would
have some information about them so for example I'll have their username
uh they would have you know so let's say qazi they would have logins
okay so that let's say that would be you know One login or whatever and then they
would have they would have dogs generated okay so
like the dogs that they generated and that might be you know five or whatever and we would have each dictionary here
would represent the user so let's say David has like four logins right
then we have another user and their name is Kevin and they have like 12 logins
and then their dogs generated is like 27 or something right so this is how I want
my users to look like and then I want to be able to Loop through the users and get you know get a
user update a user change their record delete them whatever I want to do right so that's how I would want to do it I
would want to have a list of users just like this and each dictionary representing a user now what I would
want to do is I'm going to store this inside of a database okay I don't want to just store this in a dictionary
because while that is nice um after I refresh all that information
is just going to vanish and so I don't really want all my information to just
vanish right that's not fun so let's go ahead and use a database so what I will say is in my database I'll
create a collection called users okay and users will have
um have some data okay and we want to add if we want to add a new user well how we
would add a new user is we would actually go to our users okay and we will append
a new user and when we append we'll need to essentially append a dictionary just like this okay so remember since this is
a list I can call Dot append on it and so when I call an append I can add a
user to it okay so if you're having trouble visualizing some of this don't worry
let's open up our shell and let's just write some python code here so you can
see what we're talking about okay so I will go like this and let's zoom in a little bit
so you could see clearer okay so let's go ahead
all right let's go ahead and say um let me zoom in more so it's even easier
to read just like that okay now let's say I have
a database okay and I'll make it an empty dictionary just like this now inside I did inside of that database I
want to have a list of users so initially I'm just going to create it and we'll set it to this so now when I
do DB you should see DB has users and it's empty so it's an empty collection right now
now if I want to have access um you know users I want to add a user I
could just go DB dot append right and then I can DB users if I do
this it should give me back that empty list now if I want to append to that list I could just go a DOT append just
like this and I can give it a user to a pen so I'll just give username qazi
and then logins two and then we will say
uh dogs generated I will say seven
all right there we go now when I do DB users I will see that I have that user quasi
in there okay now if I want to get information about the user I could go DB users and I could say
you get me the zeroth user okay if we have multiple users get me the zeroth
user so let's try adding more users so I will say I will also add David
you can just hit up up on your keyboard and it should bring this up and I'll
also add Kevin okay now when we do DB users Watch What
Happens I get all of this data right here okay uh let me zoom out here and zoom
here now as you can see better there we go okay
so now that's what DB users returns to me right it's a list of users so if I
call type on DB DB users you can see that it's a list so
since it's a list I could even I could Loop through it I could also index it so I could go DB users and if I ask for the
xeroth guy well that'll get most likely cozy
now if I did DB users and I said zero you can see it's giving me Kevin okay if
I go ahead and do one your your zero might be different than mine because my computer crashed and I had to redo this
again so that was fun okay but uh yeah so but idea is that it
should be giving you some users okay I'll do user three I ended up creating more users
okay I I have like four total users right and so it'll it'll show you those
users now if I want to grab a specific user and update one of their properties well what I could do is I could go ahead
and do username and set that equal to
uh let's just say a fire emoji
okay so now if I print out DB users you could see that there's a user with the
username of fire emoji uh just put quotes around if you if you do use an emoji make sure to put quotes
around it but you could see that now we got a guy with the fire Emoji so that name has been changed okay so this is
how it interface with it uh this is how I would you know add to
it this is how I would uh update data inside of it Etc so keep these notes available for
yourself because this information is going to be really valuable helpful and important
um when we're creating our database okay all right now when we're creating
our users we need to create that inside of our database okay so I'm going to go ahead and say DB
users and when it's not initialized I need to just go ahead and initialize it so I'm just going to go ahead said if
users not in DB then just go ahead and say DB users and set it to an empty list just like this
okay so this is going to be the default state that we're going to have for this
and then here I'm going to go ahead and say let's go down here so once the user
signs in we're going to go ahead and say DB users and I'm simply going to append so we're going to append and we're going
to append that user okay so when I think about that user
well that user at this point is going to be you know their username is going to be
uh the username they gave us because that's already stored here
um and then we're gonna go ahead and check there
logins and we're gonna so since it's a new user right so this is for a new
new user okay we're going to set their logins to one and we will also
set their dogs generated to
zero because right now they haven't really generated any dogs they just signed up they haven't like hit get
random dogs yet right that's all they have done so we're going to set that to zero and so in our users database now
that user should be there okay but you're gonna see that we're
gonna run into a problem pretty quick with this so let's go ahead and do command enter and I'm also going to open
up our shell and inside of our Shell let's just clear all of this out I'll write python I'll
hit delete at the top and I'll type in Python so you can see this okay and now let's go ahead and
do from replit import DB so we get access to our database in this environment
okay and if I show you the DB right now there shouldn't be much inside of it okay like let's go ahead and do DB dot
keys so we can see all the keys that are there so right now there's only uh there's a last dot key there's a total
dogs generated key and users key so let's go ahead and take a look at users okay and so far we don't really have
um any users yet okay inside of our database and that's what we wanted
now let's go ahead and create a new user so I'll say Kevin and
I'll hit log in and sign up okay now this should be updated to Kevin here let's go ahead and run that line again
and you can actually see that Kevin was added to the database that is very good
so look at that we're already being able to add users to our database that is
exciting let's go ahead and add cozy and let's see what happens I'll hit log in sign up
let's go hit up and enter and now you can see we have two users so this is an observed list kind of ignore some of
this Parts observe dick but all it is the list and this is a dictionary okay
and then here in this dictionary here in this list here there's two items so
let's see if we can um call length on this or maybe it doesn't
allow us to call length let's see yep so we can see that there's two users in here okay and I can also just go ahead
and do users of zero and it'll give me the first user which is Kevin and if I do a one it'll give me the second user
which is qazi and yeah so I could see both of the users are there with all of their
information logins is set to one doc generated is set to zero so that's good so far but here's the problem what
happens if I sign up with Kazi again okay and this is case sensitive so let's
say I sign up with Kazi again let's hit sign up and let's go and print out our database
and you can see we got three users now what we got three users so what there's two
causes you know our goal was to make sure that everybody has a unique username so if you sign in with the same
username right in our in our final working app if you sign in with the same exact username
so let's go ahead and do qazi here it will be a login okay
and if you sign up with and it won't reset all your data it'll keep it at 11 52 all of that but if you sign in with a
new username and you hit log in
um you could see that it resets your data right login One log dogs you generated is one as well
okay so let's go ahead leave this signed in okay and let's go
back to our app that we were building Okay so huh why when I do quasi this is
happening so what we want to do is we want to make sure that that doesn't happen so how do we do that well we need
to actually I'm going to remove this because you don't need that anymore what I need to do is actually need to
make sure of the following okay
when a new user when a user signs up or
logs in so basically when the user hits when user clicks this button right so
when user clicks login sign up here's what needs to happen
check if that user already exists okay that's step one
and then two if that user already uh if and okay so let's say that that user
exists okay so I'll put it under here if that user already exists then what we
want to do is we're going to select that existing user okay
we're not going to append anything we're just going to pull that user out of our list of users okay
select this is from our list of users otherwise
um if it's a new user if it is a new if the user does not exist already AKA
new user so if it's a new user well then I want you to go ahead and
append create and append that user
to the database okay so this is really the logic that
we're actually trying to do so we can't just like mindlessly put a new user without checking if that user already
exists so what I want to go ahead and do is I want to check if user already
exists okay so how do I check well
look at this let's go ahead to our python rubble and here if I do DB users I get all these users here right so if I
want to check for a specific user in here I can actually use filtering which is very powerful so let's say I'm
looking for a user um you know let's say I'm looking for qazi
okay what I could say is I could say
get me the user for user in DB users okay so Loop through so this is
the for Loops it's like Loop through every users and users okay
and what I want you to do is only get them to me if users username
[Music] is equal to cozy
okay it's exactly equal to cos if that's the case then get that user for me so
what it's going to do is going to filter this entire list and get me where the name is qazi so let's run this and now
when I show this it's giving me two people but both of them have the name Causey in there so it's filtering it out
okay in a normal list we would not have this other qazi in
there the second quasi that we have we would not have then in a different database okay let's try this same thing
for Kevin now so you should give this a try okay see if you could get Kevin
here okay give that a try I'll give you five seconds to pause and try it five four three two one okay so we're just
gonna go ahead and say so this is saying Loop through for the
user and users if the user has Kevin inside of it then just give me that user
object okay or give me that User Dictionary so let's go ahead and do this let's try to type in Kevin and you can
see that list is being filtered out and we're only getting Kevin back so that's how we can actually check for a
user okay so I'm gonna go ahead and pretty much copy paste that code
okay and what we're going to do here is instead of a hard-coded Kevin here
we're gonna put with the user we're gonna check for what the user just typed in as their username okay so that
variable is already called username so we're going to take that variable and put that there instead of Kevin instead
of hard coded Kevin so I'm going to say username just like that
okay so um what will happen if it doesn't exist
let's also go ahead and see that so let's look for a name that doesn't exist so I'm going to go
and remove this and then just say Lance because Lance I know does not exist
okay oh there's an indentation problem if somebody doesn't exist it's going to
give you an empty list and if you call Bool on an empty list it's going to give you false okay so if a list is empty by
default it's false and if a list has something in it like haha or something it's going to be
true this is going to be helpful for our if then statement that we write here okay so we're going to say if
uh the user exists that's what this is saying if the user exists then I want you to say
for now I'll just say user already exists okay if not then I want you to go
ahead and append the user okay and I'll say print
uh new user okay and we'll put ta-da here
and we'll put an exclamation mark here so it's easier to see it in our print statements let's hit command enter so
these changes do take place okay and in our app
here I'm going to say quasi and let's hit login slash sign
up and you could see it says user already exists it's telling me
right there okay let's go ahead and now type in Lance
okay and it says you click the blah blah
button new user and now you can see Lance is showing up here and now watch what happens if I hit Lance again and I
do log in and sign up so now it's detecting it as a login there we go rather than a sign up okay so now it
says user already exists it already knows that that's Lance Okay so
um so yeah we're able to actually detect if the user exists now what happens if
the user already exists well we don't really need to do much we just need to update their logins that's really it
right so if a user who's already signed up logs in again and if we look at our
main app we just need to increase increment their number of logins
so how could we do that well we can go grab that user right so that's
that user right here okay so let's go ahead and say
so I can actually say user is equal to that and remove that colon from there and I
can say if user so this will grab the user it'll either
return an empty list or it will return a list with that user okay so we're going
to say if user print user already exists and will actually print out
information about the user by doing user of zero
okay and then what we want to do is we want to grab that user's logins and we
want to increment them by one okay so let's go ahead and
paste the print statement after the login so we can see the new updated login so let's go ahead and hit command
enter here and we'll open up this and we will
now go ahead and type in Lance and I'll hit log in and sign up okay we got an
error it says list indices must be integers or slices not string
so let's see ah yes so we want to go ahead and say user
uh user of zero right so the user that we
found that specific user's logins we want to increment that by one
okay so let's go ahead and give that a try
so let's go ahead and open this up I will say Lance here and we will hit
login okay and it says user already exists
okay let's go ahead and type in Lance again
all right so let's see what's happening here is it printing that out print
user of zero yes it is and so you could see
it's saying user already exists and then it prints out the users you could see the user initially was at two logins and
then we print them out again and there are three logins and then there are four logins right so that means that the number of
logins is incrementing correctly
now to make our lives easier so we don't keep having to say user of zero what we could say is we could say user is the
following user is
um so we're going to redefine user here and I'm going to say it's user of zero
if user exists if we found somebody and if
not then we're just going to say user is none okay so it's either the first guy in the list that we get back here after
we filter the list or if it's empty then we just return none so this user is
either going to be uh a user like this with a username and
blah blah blah blah blah blah blah okay so it's either going to be a dictionary or none
okay like that so we can remove the zero here now and I
can remove this zero here now too because I'm deconstructing the user from that list
okay and let's run this
and I will go ahead and
say Lance here and we will hit login and sign up you can see it says user already exists logins five and it's working
correctly okay great so there we go a lot of that
functionality that we wanted to add is now you know pretty much completed it check if a user it checks if a user
already exists if they do exist then it goes ahead and
um and increments them right if they don't exist then it goes ahead and appends
them okay so now what we could do is we could turn this into a nice little function so
we don't always have to come to home and see this big giant definition which can look intimidating and honestly sometimes
confusing so we could actually say Define
create or update
user okay and I'm going to Define this function all the way at the bottom so not here
okay so let's go ahead all the way at the bottom here and I'm going to create a new function and it's going to just be called
and this is going to be a regular function so it's not going to be a routing or anything like that we'll say create or update user I'll
take in user and then the definition of this function
it'll do this okay I'll copy that and I'll paste that in here okay and um
indentation problems will happen so just go ahead backspace delete everything I'm doing
yeah just backspace everything correctly okay backspace delete and then this else
is going to be on this same level right there okay
so I'm actually holding command and then I'm hitting delete on my Mac you could probably hold Ctrl and hit backspace or
something on your windows and then hitting delete one more time to come here and then hit enter command delete
delete enter command delete delete enter command delete delete enter command delete
delete enter command delete delete enter there we go okay
um so there you go okay so now we've created this function Creator update user
and it will take in a username so we're going to go ahead and say user
underscore name okay so this function if you just give it a username it will automatically know how to find that user
and then once it finds that user it will either update their logins or it will
create the new user inside of the database so that's what this function does create
or update user so we're going to replace all of this
code right here and delete it so now our functions everything should look very similar and
we're just going to say create or update and give it the username and never have to worry about the logic anymore because
the logic is already done okay so once the new user signs up then we create or update that user in
our database that's it okay so let's go ahead and check
if this is working correctly so I'm going to open up my python here let's go to shout let's run this and
let's see if we're getting any errors or anything like that okay I'm not getting any errors let's go to our shell
okay I will delete this right here and then we'll just say from ruplet import
DB so I can take a look and then let's go ahead and create a new guy called cookie and we'll hit this
and now I'll do DB users and um let's see if we find Cookie yep I
see cookie with logins of one okay let's have cookie log in again and I'll do DB
users and we could see cookie logins too okay so no problems there that worked
perfectly so being able to create a new user works and updating an existing user
works because you notice it didn't create another cookie it kept the same cookie guy and just incremented right so
for example if I update Lance if I log in Lance Lance should update and not get
created so if I do Lance login now when I run this
you'll see Lance logins of six okay but if I do pants a new person and we do
login and I do DB users you will see that pants here has a login of one so
it's a new user that was created so the ability to create a new user is
now working perfectly okay Creator update user and now that that functionality is working and we have
that user inside of our database now we can actually start passing that user around that information we could
actually pass it around and do stuff with it right so for example name I don't need to worry about
because name I'm pulling straight up from the session but what I do need to
pull from the session okay is not just the user but I need to pull more information about the user like their
number of dogs okay or um the number of logins okay or the dogs
that they've generated Etc so what I'm going to need access to is I'm going to need access to that
specific User Dictionary okay that user object that stores all the information about them like their username docs
generated Etc so this function here Creator update user I'm going to have it return something so I'm going to say
return and I'm going to have it return the user okay so the user is either going to be the first guy or it's going
to be none okay so I'm going to always get some type of user okay now what I
can do is over here I can actually go user is equal to that because I know
that this function is going to do its thing but then at the end of the day it's going to return a dictionary okay
uh or it's going to return none for the user and that user I can pass it to my
database or sorry my front end so I could pass that user to my front end and now my front end will have access to
that user's information in terms of the dogs that that user has generated or that logins that that user has generated
okay now the last thing that I want to do well let's actually make logins work
first so let's go ahead and go here I'm going to go inside of my templates and
we'll go to index.html and since I have access to that user what I can do where
I have the number of logins I can actually just go ahead and give this one a try because you can actually figure
out what to write here okay how will I get access to users logins so see if you
could make this work all right I'll give you five seconds to pause to try it yourself five four three two one all
right hopefully you'll give it a try and figure it out um I'm gonna go ahead and say
user and logins okay since I already have access to that user
so let's go back to our main.py I'll open it in a new tab here
see if I could reverse this cool okay and then let's go ahead and hit command enter
okay and now let's see if it shows us number of logins so I'm going to go ahead and do Lance
and let's hit login look at that it's saying seven let's log in again let's
run it run eight Wow Let's Do It Again login
nine right now new person one you could see new person one doesn't
have any logins because this is a brand new uh user okay it's a brand new user it
doesn't have any logins right now okay so number of logins right now is zero and we don't even have to write zero
okay so for logins we can actually do that same trick as well if we do want it to
say zero you could probably just go ahead and say logins is user
uh logins okay uh if user logins exists
else is zero so this basically what we'll do what it
will do is if the user has logins then it'll show the login and if the user
doesn't have logins if this statement is false meaning that it they have zero logins it'll be false okay that's the
cool part about python there's something called truthiness of a statement so 0 will evaluate to a false
then it will just give zero okay so if I do this and we can also always go back
here and just say um logins okay so I could run this
and then let's refresh
and there we go number of logins right now let's say I whoops that's not ours
this is our app okay so let's go ahead and now refresh
okay so this person has so let's create a new user I'll just say two
uh okay so not not user login or not user logins
check let's just check if the user exists okay so give me the logins if the user exists otherwise l0 that's better
that's a better statement okay let's run this again
okay and let's look at it okay let's create a new user I'll say three let's run
okay and now you can see my username is three and my logins are zero so that's actually working correctly now or let's
say uh Michael okay let's hit enter and you can see I'm Michael but my logins are
zero okay so that takes care of that you know number or zero problem
okay we could even create a template filter and then that could be you know a thing that gives us whether it's a
number or zero okay we could do it that way uh we could certainly do it that way as
well okay actually it should say zero without us doing any of this hacky stuff
um the problem is I believe happening that we're not returning our user here
after we create the new user so we shouldn't be returning none that's not
right uh we should be returning a user so for example if a user exists
well then we know that we can just send that user right that's easy because that'll already exists but if the user
doesn't exist we want to create the new user
right and then we need to set that as the new user so we can actually go ahead and say
okay I don't I don't even need this uh here right now the statement here
okay or yeah I do so we'll leave this user statement here that's fine and now we'll
just redefine the user and we'll say user is equal to
okay and then we'll find that user again in the database using the same exact
trick right here okay so we'll find the user so we'll say user is equal to
[Music] username but we'll find that specific user inside of the database
okay after we create that user now we can find them right because we couldn't find them earlier so find the user if
they exist obviously just increment their login but find the user if they don't exist append them then find them
again from the database so we can actually have that specific user dictionary that we need access to
okay and that's going to be the that's going
to be the user okay and then we can just get the actual user right here
um and then we can actually return that user okay or we can just run that same line again but in this case we know for
a fact that since we just created that user looking up somebody with that specific username will return to
somebody and we'll get the first item in that list by doing the zero right there and then we can just go ahead and say
return user okay so now that problem will actually be solved so let's go back
to index.html we can go ahead back to saying user logins
okay let's restart the server by doing command enter control enter okay and
let's create a new person and we will say Angela and let's run
okay and there we go we shouldn't ever see Zero logins either by the way we should actually see One login because
when she created a new sign up that is considered a login right so it should
start her with one and then if I do Angela again it should put her at two Etc Okay so
that part is now good now the next thing we want to do is you want to do some conditional rendering meaning if a user
is not signed in AKA when the user is on this page
you notice that I'm not seeing any of the other stuff right I'm not seeing the table I'm not seeing get
random dog I'm not saying log out I'm not seeing a leaderboard I just see this enter your name
okay that's all I'm seeing so but then once I log in successfully
then I am seeing this entire page okay but then I'm not seeing this input here
anymore okay so we want to make sure that we have that same functionality as well
that technique is called conditional rendering meaning only render if this
statement is true or else show this other thing so what we want to do here is let's
think about what are the things that we need to hide if the user is logged in well if the user is logged in we need to
hide a we need to hide all of this right there
okay so what we're going to do
is find that part so this is the form and this is where it says enter names
all of this stuff here we need to hide once the user is logged in okay so I'm going to go ahead and say if
session um if the session does not have a user okay
meaning if there's no user logged in then show this
otherwise don't show this so let's give this a try so if I'm logged in with Angela it should not show anymore once I
restart the server fingers crossed let's see let's refresh obviously because we
didn't do that okay and we can just go ahead and do this
okay so now we have a different problem it says the variable user referenced
before an assignment okay and to debug errors don't freak out
let's just go ahead and see how to debug okay because that's another thing you'll need to learn so we can actually click right here user
and it's telling me that it's something is happening on this line here so I'll go ahead and click this so it'll expand
and it's saying the error is happening right here on line 43 and home you're
referring to user but the user has not been actually defined
okay so let's see what the problem is okay it says local variable user
reference before assignment so to me when I'm looking at this that doesn't look to be true because I'm
clearly assigning user here and then referencing it here
but let's see if it says a different story when we go look at the code
so let's go to our
let's see if it's referring to anything here 's a reference before assignment
let's go back up to our home
ah so this user is only getting registered
when it's a post request meaning when it is uh when we're submitting a form if
you're just going to that page normally right the there's going to be no user
when you're going to that page let's say uh you know by just refreshing
and uh not doing a post request so what happens in that case so what we're going
to say here is otherwise the user is just none okay so for example else
uh we will say user is none okay so we don't have a user so that's what we're
going to do for the user okay let's go ahead and hit enter now we shouldn't
have an error happening anymore let's hit command enter as well here so we restart our server
let's go here and refresh and let's see what happens what will happen hopefully
it will do what we want it to do here we go we're seeing Angela we are logged in
and notice that we're not seeing that form up there that used to say
login username blah blah blah right now let's go ahead and set up our log out
functionality so we're going to set up a route for logout so this should be pretty easy at this
point because you know the pattern already right slash log out so we know that we're going to create a slash
logout route and then we're going to write python code that corresponds to it so I'm going to say
app.rout put at sign here and we're going to say log out and then we'll
create our function log out and what that will do is set the session
of the user to none okay that basically means that the user
is logged out okay that's all we're going to do with this it's going to set the username to
none basically okay that's all we're doing here and then we will just render our template okay
render and now I can just basically go ahead and return
um all of this stuff here so I can just put this return statement and I can say return render template index.html set
the dog image well we won't have a dog image here in this case because we're sending you back essentially to a page
that doesn't even really need it what we're going to have is dogs generated for log out and that's essentially it so
let's go ahead and hit enter command enter to restart the server and now when I hit log out it will log
me out and you won't see Angela here anymore so let's hit log out cool okay now we're getting a different error
which is user is undefined okay and that
error is happening where let's go ahead and take a look let's click it and it's saying that the
error is happening right here where we're calling user
logins it's like where the heck is user even coming from right so now we just
need to figure that part out because if we're passing in none here right for the user then we should
essentially have no user to pull login information from so here's the way we want to solve it we
could actually solve this with conditional rendering all of this stuff here like all of these
cards right and these buttons container if we get random dog or this button it says
log out or this leaderboard all of this I don't even need to I don't I only need
it to show up if the user is logged in I don't need it to show up anytime else so it's going to solve that problem here so
we're going to say if session user meaning if the user is logged in
then show all this stuff otherwise don't even bother showing this so I'm just going to finish wrapping this entire
thing okay and uh
so where did we start wrapping it right here wrapper let's see where that wrapper finishes finishes right here so
we're going to go ahead and say end if
there we go okay let's hit command enter so we restart our server and let's go to
our app and let's go home page okay and you can see we're here and if I
log out you can see that it brings me to this page it's just rendering only these
components here but when I log in so let's say Angela and I hit enter boom Angela right there
number of logins right there get random dog okay now we're getting a different error
for user okay so now we're getting when I hit get random dog
uh we're getting an error with the user so let's see what the problem is so let's go back because we know that we're
logged in for sure so what's there here we're not actually grabbing the user and uh we're not
uh basically when somebody clicks get dog we need to get our current logged in
user right and then we need to pass that current logged in user uh here we should
be able to actually pull that information from our session as well so we should be able to go user
and then say session user if there's a user logged in that
session could have access to it but let's go ahead ah but the problem with session is that we only have
um yeah we we only have the username we
don't necessarily have the login so let's actually just grab the user from the database so let's do this
there's this piece of code that keeps repeating itself okay this guy right over here it repeats itself here and
then it kind of repeats itself here it's kind of annoying so let's go ahead
and refactor this because we're going to need to find here we're going to need to find that
user that's logged in so we're gonna have to essentially repeat this code for the third time so let's not repeat that
many times okay there's a principle called the dry principle and it stands for do not repeat
do not repeat yourself okay in programming so we don't want to keep repeating ourselves
okay so let's create a new function and this function will call it get user
get user from database and this will take in a username
okay and it will return that user now all it will do is this
okay and what I'm going to say is I'm going to say this is the user and here we can
just return return this okay so either return the user otherwise return none
so now in order to get the user what I could actually do here is for the user I
can actually just say hey get the user from the database based on the username
so I can refactor that part of the code and then I can get rid of this don't need that
and then here we need to repeat that same thing so just copy this
paste it here because we need to repeat that process again so find the user in the start find the user if you create a
new user and return that user so this function we've already needed to use it twice so it was already very helpful
creating that and it simplifies our logic a lot okay and uh great now
I'm gonna go up here and reuse this function here and I'm gonna say
user is get user from database okay
and then we're going to give it the username and the username here we could actually get that
from the session if we want okay so we can definitely get that from
the session so we need to actually check if the session actually exists okay so
let's go up here and I'm going to check
um you know we could put it at the top or the bottom I could even put it here so I could say if session
okay so if there is an existing session with the user then what I want you to do is get that
user from the database so get user from database based on the uh username
so I'm going to pass in the username right here and then I also want you to get the dogs generated for that user so
I'm going to go ahead and say user uh dogs generated
and I'm going to say and there's a nice little trick that we could do so for example imagine if we
did this right dogs generated and I did increment the dogs generated by plus
equals one right that's what I would like to do but the problem is that
there might be a case well actually in this case every user will have this docs
generated I don't think we even need to worry about that I think we could just leave this with with dogs generator plus
equals one and I think that should be fine okay and then once we do that we
can actually so we're going to update that user's docs generated by plus one because obviously they just hit get dog
and then we can actually pass that user back so I could say user user okay let's
run this now and let's go here let's refresh our app
and hopefully we won't have errors now okay so right now we have Angela and it
says dogs generated or zero let's hit get random dog okay get random dog get random dog okay
so we know that this button is working we know that it's getting us random dogs we know that the number of dogs is
increasing we know that the user Angela is logged in but the dogs you generated is not changing why is that happening if
I go here right why is that happening well the reason why dog generator is not showing
up is because we haven't connected it yet to our front end so let's go to our
index.html and here we've hard-coded zero so all we need to do here is I need
to say user dogs generated just like that let's hit command enter
let's come back here let's refresh okay and now when we actually do
get random dog you could see that that is updating right get random dog
boom there we go right all of it is updating now so if you're Angela you can refresh and
come back and it'll still say nine dogs generated right if you log out and you
log in as heavy it'll say that this is your first login
ever and then you have zero deduction right it's all remember you if I log out and log back in as Angela you'll see
that it remembers that too it's a 10 dogs generated number of logins four so it's showing each user their very own
authenticated information which is very powerful right in in all of the apps
that you see with Instagram or whatever you're only seeing your own data you're not seeing somebody else's posts you're
not able to control somebody else's post you're not able to log somebody else out you can only log yourself out so even
though we didn't have email and passwords this is still a very good mechanism
to be able to see where you're at and what's actually happening
now the only real functionality we have left is creating a leaderboard so we can actually see all these users and then we
can actually like increment all these users right and um yeah so all the users we created like
for example right now just showing dummy users so we want to be able to show
all of our users and then we want to be able to show them in the right way so first of all
let's just try to show all of our users okay so how will I do that well my
database has access to all the users already okay let's go here let's go take
a look at our table okay and right now what it has is it's
uh all the data here is hard coded okay so first let's go ahead and just study
the structure of this table here so we have a table class leaderboard it has
these are the headers all right so for example if I look at this it says uh name right
that is right there so I can change that dogs generated right there okay and that
star just represents that this is the column we will be sorting this by okay
so our headers are fine we can leave our headers as they are what we do need to change is hard-coded data so you could
see I have uh this is two here okay so this is the index
okay so for example I can put a trophy here like this right and then hit um
we can hit command enter so it serves this page correctly and refresh
right and then you will see that it says one trophy next to me okay so
uh this is where our trophy or index will go okay so this is going to be the position this over here will be the this
over here will be the username right it says that right there username then this guy underneath it will be the number of
dogs generated okay so dogs generated will go here and then this will be the number of logins okay at the bottom or
the last one and then I'm just hard coding all of these other rows so I can actually just
remove all of these other rows okay because all
we need to do at this point is we need to write a for Loop that just goes ahead and makes all of these rows for us okay
so for example if I go here we're going to repeat this process right
we're going to repeat this process the process of creating a new row adding the data in there creating a new row adding
the data in there creating a new row adding the data in there so whenever you have things that are repeating like this
I like to think to myself all right maybe we can use a for Loop
here okay so I'm going to remove all of these rows here let's go ahead and refresh this uh page okay
and I'm just going to go like that just go to the home page directly and we should only see one person here
right now okay number of logins name blah blah blah okay we should only see cause you right now but this is still
because the Quasi is hard-coded now we have access to the user so I can actually write a for Loop here I can say
four user in DB users
okay I can go ahead and list out each of the users right so for user and users here
where it says username I can go ahead and say user
username and since this is going to be python code I want to make sure I put
that oh sorry username does not go there username goes underneath it
okay username goes there so we'll just we'll just say zero here
and then where it says 12 number of docs generated we're going to go ahead and
say user dogs generated just like that close it
and then number of logins will be user and then we can say logins
just like that okay and so let's go ahead and make sure
that we wrap this entire row inside of a loop so let's go ahead and end the loop
now so I'll say end four and we'll put a percent sign and don't forget to put a percent sign at the top here as well so
this should have a percent at the start percent at the end percent at the store percent at the end let's hit command enter and let's see if this is going to
show all of our users let's refresh okay so we're it's saying DB is not
defined that's fine because it's we just call it users so let's just say users here okay because that's how we pass the
database if you look in our main.py uh wherever we're passing users which is
where we're passing users uh we're actually not passing users anywhere interesting so let's go ahead and pass
all of the users so we're going to say users and I'm going to say DB users
put a comma here and then we can pass in users here as well so I can say users and I can say
DB users just like this okay let's run this app
right we just need it on two of our views let's go ahead and refresh
now we won't have that what what's there this time okay let's see invalid syntax okay I
probably forgot to just put a comma that's probably it comma
yep let's put a comma here okay let's refresh
and there we go right we're getting all of the users with their number of dogs generated
right and um yeah so there we go number of dogs generated is 10.
and name Michael we have Angela Angela's 10 dog generated now we need to make it
so uh now we need to make it so that when we have 10 dogs generated
Angela should be number one so we actually need to sort this okay so we're going to go ahead and create this
function there's going to be a bunch of stuff that you've probably not seen before in this one so just kind of hang
tight and you know once you get used to seeing stuff like this you'll understand okay you'll understand the pattern of
this okay I don't want you to freak out over this so we're going to create this function called get leaderboard okay
it's going to take in users and what this will do
okay is um and I'll show you an example okay so this is going to be example of
how sorted works I'll just put this example here okay and how it works is
you call this function sorted and let's say we give it a list of companies and lists of companies is a list of really
dictionaries each dictionary representing a company and if I tell it uh hey
go ahead and sort it by its Revenue so let's say the dictionary has you know uh
it's a list of companies there's something that has revenues let's just say Revenue here okay so if I make a
data structure here we have companies let's just say and um
we have company one company two right so company one is basically you know has a
revenue of hundred dollars and the name of this company is let's say Facebook
FB and then we have another company who has a revenue of
say two hundred dollars and then the name of this company is Google okay so
if I ran this line of code what that would do is it would
take this list here right and it would sort it based on
Revenue so the best highest revenue will come first because we're saying reverse is true so it'll give it to you in a
descending order which means it'll put highest revenue first okay and we're telling it to filter by this key called
Revenue right there okay so filter by that key instead of filtering by the name because you could also sort it
alphabetically if you did it by the name so we'll do it by Revenue so it sorts it numerically okay based on the revenue
number and yeah and they'll return to us the companies okay and we could we could even play around with this in the
uh let's open up this Shell let's go ahead and clear everything
okay I'll go here and we'll say python I'll zoom in a bit so you can see better
so let's go ahead and write companies right and then I'm going to go ahead and say sorted
and we'll do sorted right let's run this and you can see it says hey this is what
the revenue is and it sorts so if I had a hundred or a thousand or ten thousand or one million companies it would do it
in a matter of a second and it'll sort them all okay so it's a very powerful thing we could do
all right so there we go that's the power of sorted that's how we use it so since we already have access to all of
our users what we can say is we can say leaderboard okay and we can call sorted
we can give it a new list so let's say we're going to create a list of users okay and these users are basically we're
going to create a new list okay let me show you this in the rebel
first because this part is slightly confusing so let me go here and um
let me show it here first okay so let me delete all of this okay now I'm going to type in um from
replit import DB now let's go ahead and do DB users okay now what I want to do is sort the
users by docs generated so imagine if I did that same thing so let's say I said
um where was that line of code that we had right so it is sorted command so I'm
going to say sorted and for the list I'll give it DB users and for the key I'm going to give it
Lambda and I'm going to say user is user sorted by dogs underscore generated
and then reverse is equal to true and I'll run this and boom there we go you
can see that it just sorted that based on Doc generated so I have the highest
dogs generated showing up and then I have the lower docs generator showing up after
so that's really it looks like that essentially works so let's go ahead and
basically write that line of code here okay so I can actually go I can even go
here and just copy what we wrote Because that's effectively what we're going to need okay and uh that's what our
function leaderboard is going to do I'm just going to do we can set a return to sorted leaderboard okay that's it
and we can remove everything else so now this function is a nice little one-liner
which it goes and grabs all the users
sorts them by docs generated and the highest ones are at the top
okay so now that we're done with that let's see if this leaderboard thing actually
works and if it does you know we can actually just send these users to our
back end and our backend will be able to deal with it okay so let's go ahead and
try that so now instead of giving my let's say my home page
instead of giving it just regular users will give it sorted users so I'll go
ahead and say I'll call the function get leaderboard and I'll give it users like this
okay and I'll take this copy this and I'll do the same thing for when you hit the get dog route
okay and let's run this okay and let's refresh our page and
let's see if it actually sorts it the way that we want and there we go we're
seeing Angela we're seeing dog generated now let's see if we can try to compete with Angela so let's become Kevin I'll
log out we'll go ahead and log in as Kevin let's hit get random dog
let's again random dog and you could see that we're starting to actually compete with Angela right I'll hit it four times
here and I'll hit it three more times okay let's hit it again
and let's hit it and there we go Kevin is already in the lead let's run it again
there we go right Kevin is now in the lead okay when somebody has two of the
same numbers then they'll just sort it randomly okay it'll just pick flip a coin between the two so there we go
Kevin is now number one but there's only one thing that is
missing right now okay there's only one thing that is missing right now and that is this place okay so how come for
the place we have uh zeros for everything why is that we
need to be able to get a number so I want to have first one here and I want to have two here and three here and four
here Etc so here's a trick that we can do I can Loop through something so for
example let's say let me show you here first okay so let me show you here first let's go to Shell
and DB users right and I can let me write a regular Loop so
for user in DB users and I can say print user okay so that's
great that it's getting me the user but what if I also wanted the index well remember I showed you this trick a lot a
while earlier and it's called enumerate so I could actually do for user in enumerate
DB users and now when I call this I can go ahead
and say let's actually do this uh let's run this again so I just did a
control C to kill it and start it again so let's go ahead and say index comma
user and enumerate user and now I'll go ahead and say print the
index and the user and run it and now you can see I'm getting the index here with the 0 1 2 3 4 5 6 7 8 9 10 11 right
and then I'm getting the users on this right hand side so I'm getting the index and the use for index and the user index
of the user so enumerate allows me to Loop through and get the position of each of the
indices so then in that case that's going to be a very easy thing because I can actually just call enumerate here
enumerate and wrap this leaderboard and enumerate and do the same thing here enumerate
right wrap this in that and on our front end I can say for user
for for index comma user and users I can go ahead and say
index plus one because we don't want to start it from zero we want to start from
one so let's go ahead and hit command enter and let's refresh
and let's see if it gives us what we're looking for there we go
there we go so now you could see Kevin is position
number one now for Kevin we want to give him a trophy but everybody else we don't
want to give them a trophy okay so we could do this in a few ways we could write an if else statement right inside
of here or we can create a template filter I kind of like creating
filter sometimes okay so we could say we could create a new filter so let's go
ahead and do app.template filter and I'm going to say this function will
be um
trophy so trophy for first place okay and what
this function is going to do is it's going to take in a number
okay and uh basically we're gonna say return
and I'm going to put a trophy and the number one as well
if number or it's actually going to be taking in
an index okay index so put one if index equals
equals zero okay
and let me think if this is going to mess anything up this actually might
mess mess it up
hmm this might mess it up but let's give it a try first so let's go ahead one if
index is zero else index plus one
okay so we could we could do that all right now we'll have access to Trophy first place pretty
much at any point um no actually I think this should work I think this should be fine so let's go
ahead back here and let's go ahead and say index and go ahead trophy
first place so pass an index as the argument for this function trophy first
place and that will either print out the position or give you the trophy
okay so let's go ahead and run this
and let's see if that works there we go that filter worked real nice
okay so we could actually even call it
um trophy or position right it either gives you the trophy or the position so
trophy or position okay we could call it that and fix the
naming here let's go ahead here and refresh and now you can see that Kevin
is in the lead okay and if I I can obviously log out as Kevin I can go
ahead back in as Angela and I can keep hitting get random dog multiple times
okay let's go ahead if you click too fast you'll break it okay so don't click
so fast all right let's see what the error is
right now let's restart the server
okay so I'll hit command enter here and let's go right there and let's go to the home page
okay it looks like it's coming back up perfect there we go okay Angela is at 11.
we can get random dog get random dog get random dog and Angela can soon take
over and as soon as she takes over you'll see that she gets the trophy okay so let's go take over
boom she took over she got the trophy she moved up in the spot right dog generated became 17 for her and so you
could see that this is working correctly okay the next thing I want to do is obviously I want to remove any
duplicates that I have because once I remove them then in the future anytime anybody's using our database it will not
allow you to create duplicates so let's just go ahead and remove if we want to
get our app in like perfect condition let's just go ahead and um
we could remove [Music] okay let's go ahead and get rid of that
we can essentially remove our database okay so our our users at
least so I can just say DB users and let's set it let's actually do it from
here I think it's safe it's a better choice so let's go ahead and make sure you do from replit import DB and then we're
just going to go ahead and say users is equal to a empty list
okay so as soon as you do that if I go here and I refresh this app would either break right because there's there's uh
now we don't have any users at all so let's go ahead and see DB users
we have no users at all okay so that's gonna be a problem so this is basically
the very first time somebody's using your app and let's see where we got the
error from and it's saying total uh total dogs generated plus equals one and
it's trying to increment the dogs on somebody okay so let's go ahead to enroute to the home page
and now I'm on the home page okay and because we have sessions
um on right that's why it's saying Angela but in terms of users it has no existing users data that's why you're
not seeing any user specific data this is coming from sessions okay so this here is completely empty
well now we can actually start creating users and we won't be able to create any duplicates so now if I create Angela
hit enter hit get random dog you can see Angela is now in the database at the
bottom right you can see her numbers incrementing every single time I generate a dog for Angela let's log out
let's log in as Angela again let's just make sure her number of login increases and you can see it does okay let's log
out let's go ahead and come in as Kevin and you should see that number of logins
should be one let's hit get random dog get random dog let's see if Kevin can overtake Angela
let's run it a few more times all right and there we go Okay Kevin has
officially overtaken Angela we have a total of 66 dogs created so if you want
you could you could have reset this as well if you wanted to okay but there you
go uh you have 66 dogs generated in this app you have two users that everybody
could see here in the leaderboards you can log in and log out you can generate a random dog use an API request you're
sorting this table by the leaderboard and so you learn how to sort so there's
so much here right there's sessions there's databases there's server side routing there is front end stuff that
you're dealing with here I mean you just accomplished so darn much
and if you got to this part honestly I'm really really proud of you even if you didn't and you just made progress and
you got closer to it hell I'm still super proud of you I mean this is absolutely amazing and incredible that
you made it this far and again if you ever get stuck you know just go ahead and hit that solution file
and the solution file will have everything for you because if you're watching it as a clip the solution file might might be in the comments below but
if you're watching it as part of that python course then just you know you you still have the solution file inside of
your you know python course right over here you can just always go to this uh
you know read me just hit markdown and here you have all of the apps and
everything that you're going to be building and you can see okay for random dog generator here's the project here's
the live demo and here's a solution and if you want access to this course again it's completely free the link is in the
description below you can get access to this mega mega mega Python course that has everything there for you plus some
awesome awesome projects so you can always pull the solution file from there anyways super proud of you
great work with that said let's keep on rocking and rolling
that was crazy we built so many projects together we did so much coding together
you learn so freaking much you're less than one percent of the people if you've
made it this far because not a lot of people will ever make it this far so
thank you so much for getting all the way to here I really appreciate your
beautiful face this is not the end my friend this is just the beginning okay and I hope that I could play a tiny
little part in your journey of becoming a developer I know you're gonna go on to
become a phenomenal developer and that just makes me proud and that makes me so happy just knowing where you're gonna be
at the end of the day with that said I love your beautiful face I hope you enjoyed this journey together it was
kind of like a Harry Potter mixed with Lord of the Rings mixed with some Wizardry because man that was freaking
awesome with that said I love your beautiful face this is Kazi and as
always I'll see you in the next video [Music]
you're probably wondering why we need

another python course on this channel

well Anil has an interesting approach to

teaching python this beginner's course

will help you learn python by thinking

and types this course teaches basic

programming Concepts instead of just

focusing on language syntax it's always

helpful to learn from different

perspectives and this may be just what

you need to Learn Python hi guys my name

is Anil kulkani and welcome to this

course modern python where no one

thinking and types

now if you wanted to Learn Python if you

are complete beginner or if you have

been struggling to Learn Python for a

time then this course is for you let me

share my journey of learning python it

took me a pretty long time to understand

python rather many months or rather a

couple of years to understand Python and

finally when I started to learn more

about python I could understand that I I

was struggling to Learn Python because I

was not able to think in types

you know python is a dynamic type

language so sometimes you are at lost to

understand what goes well and where we

have to use a particular variable or a

data type or a data structure so this

course is obviously designed for the

people who are totally new to python or

if you have or if you are struggling to

Learn Python for a while now

throughout this course I'll be taking

you through a smaller Journey we will

start by thinking at types and we will

end in thinking in layers so thinking is

in layers is like an architectural

pattern I will I'll help you to

understand what goes behind creating a

production level application before we

can go ahead and write python we need to

do a couple of things the first thing is

obviously we need to install Python and

we also need to set up our development

environment

but before that I would like you to meet

my friend Lewis now Lewis is going to

help us throughout this course for

learning python

before you can do anything else I want

you to go ahead and download all of the

source code for this entire tutorial

what I want you to do is just go to this

link github.com octilium slash modern

python101 and this is where you can find

the entire source code for this entire

tutorial

you can just click on code and just

click on download zip to download all of

the files in a zip format or if you are

using GitHub you can simply use this

link to to clone the repo after you have

downloaded all of the files this is how

it's going to look so let me open up my

readme and just let me open up in my

preview mode

okay so this is how all of the files and

the folders would look like now please

keep in mind that on my machine I could

have a couple of more additional folders

just for the sake of helping me

throughout the tutorial

but overall this is how it's going to

look in your machine as well at any

point in the future if you want to

compare your code with mine you can

simply click on this folders for example

if we just click on this folder type

system you can see there are a couple of

files which I have already written

for example just click on this file

variables and you can see all of the

code is right over here if you want to

see the sequence in which we are going

to learn all of these files then you can

simply click on readme and here you can

find the sequence

for example in this one the first file

would be your variables the second one

would be variable rules which is right

over here

and so on

well that's it for this video in the

next video we are going to download and

install python on your machine

before installing python I thought it

would be a very nice idea to give you a

small tour of python

for this I want you to open up your

favorite web browser and I want you to

search for

python online compiler

and I want you to click on this link

this is for repair id.com

and as you can see we have a working

python environment ready for us

so right on this line I want to print

out modern python 101 so just replace

hello world with

modern

python 101

and just click on the Run

so as you can see we have the output of

modern python 101

let's try one more simple example and

this time I want to print out my name

and my name is

octallium on this line instead of

printing modern python I want to print

out my name

that's it just hit the Run button one

more time and you can see we have the

output of octallium as you can see right

in Python is as simple as writing your

plain English and from the next video we

will see how to install Python and how

to set up our development environment

you can just go to the website

python.org

from here let me just zoom in first okay

from here just go to downloads and as

you can see since I'm using Mac OS so

that's why it's showing as Mac if you're

working on Windows most probably it will

show you on Windows and at the time of

recording the latest version is 3.10.5

so I just want you to click on this and

it will start the download you just have

to install python just as you would

install any other program just click on

this it will open up a installer dialog

so just click on continue continue

okay agreement I agree

and install now since I already have

python installed I won't be installing

but in your case if you don't have

python installed just go ahead and click

install

after the installation is done I want

you to open up your terminal if you are

working on Windows just make sure you

open up your Powershell

and let me just try to zoom inside this

as well

so once you have your terminal open I

want you to type python

hyphen and capital V

so as you can see it's showing the

python installed version in my case it

is 3.10.5 just make sure you have a

version which is more than 3.10 3.9 will

not work because I will be showing you a

couple of new features which I have been

introduced in the version 3.10 and if

you are watching this video in the

future you don't have to worry because

all of the functionality that I'm going

to show in this tutorial all of those

things are going to work in the future

as well the next thing that I want you

to do is install Visual Studio code

so I want you to go to this website

code dot Visual studio.com and I want

you to download video Studio code and

install it

so just click on this since I'm using a

Mac it's showing Mac if you are using

Windows make sure you click on the right

button

so just click on this

it will again download the installer and

you just have to install Visual Studio

code as you would install any other

program after installing Visual Studio

code I want you to open it up

so this is my visual studio code on the

left you can see there is a small bar

and I want you to click on extensions

let me take it up right over here and I

want you to search for python

the first thing that pops out right over

here this is the python extension by

Microsoft I want you to click on install

now I do have a couple of more extra

dependencies these are optional but I

would highly recommend you to install

all of those so just open up a terminal

if you're working on windows open up

your Powershell

and there is a command which is called

this pip now pip actually ships with

python I want you to type pip

install

IPython

my pi and black and just hit enter so

this are a couple of extra dependencies

that I would like you to install now

since I have already installed it's

showing me as

already satisfied but in your case it

will go ahead and install all of the

dependencies

and that's it now we can start writing

python code on our machine if we have

some doubts then you can open up this

readme file so this is the code that we

downloaded from GitHub

so inside my folder number one

introduction just click on readme and

you can see I have provided the links

for everything

there are a couple of more optional

dependencies for example this one code

Runner

this one we would see in some of the

future videos and if you want to have

the exact same theme like mine so you

can use this theme I'm using a theme

which is called as Pitch Black theme

and now if you are working on a Mac and

if you have issues while typing this

command so suppose you are you are

typing python slash V and if you are not

getting this output then just make sure

to watch the next video where we would

see how to rectify it sometimes on a Mac

you may not get the desired output

suppose you are typing python slash NV

if you are not getting this output then

maybe you can try typing Python 3

hyphen and V

now this is because Mac already comes

with a pre-installed python but most of

the times it is not going to be the

latest version you can use this syntax

python 3-3 all the time and if you want

to use pip then also you need to type

pip 3 and then you can say pip3 I want

to install my

IPython mypai and black this is also

going to work

but typing Python 3 and pip3 all the

while becomes slightly boring

so what I'm going to do is I am going to

set up an alias

for setting up an alias first thing that

I want you to do is I want you to go to

your home directory you can go to your

home directory by typing CD and that's

it let me clear up my terminal by typing

control and L

now if you type LS

Dash A L that means I want to list all

of my files and folders inside my

current directory and I also want to see

some of my hidden files as well

so as you can see it's a pretty long

list but the file that I am interested

is this one

it's called as dot

zshrc that's the file where we will set

up an alias I want you to go ahead and

open up that file inside your code

editor you can open up the same file

inside virtual Studio code by typing

code

followed by the name of the file don't

forget to put the dot before and now

just press enter

if you are not able to open up this file

from your terminal then inside your

Visual Studio code I want you to

type shift command and P and it will

open up a new window and I simply want

you to

type code and you can see the pop-up

shell command install code command in

the path I want to click that and after

clicking that you can simply

close and open up your terminal once

again

and

let me just Zoom inside

and now we can see I want to open up my

DOT zshrc file inside my code editor

just hit enter

for now just ignore all of the stuff

which I have inside my zshrc that's

because I'm using a lot of fancy setup

the thing that I want you to add inside

your zshrc are just these two lines

so what we are doing is we are just

setting up an alias that means whenever

we are typing python inside our terminal

at that time we actually need to type

Python 3 and the same thing goes with

Pip whenever we are typing pip I want my

system to invoke pip 3 instead so this

is what our Alias is going to do

just save your zsh RC filing again go

back to a terminal I again want you to

close and open up your terminal one more

time again let me Zoom inside it and now

this time if you're typing python

hyphen and V it should give you the

right output now that we have python

installed on our system it's time to

write our very first hello world program

but before we can write our hello world

program I would like you to create our

very own directory structure so that we

can organize all of the code in a much

better way

so for that I would like you to open up

your your finder or if you're on a

Windows just open up any window and

navigate to to the place where you want

to create the folder so I am just going

inside my home directory and here I'm

going to create a folder by the name of

modern

python

101

you can create this folder wherever you

want after this I am just going to open

up my visual studio code and I'm going

to drag this folder inside my visual

studio code

okay so here we are here I am going to

create one more folder and I'm going to

name it as 0 1

introduction

let me spell it right

and inside this folder let's create our

very first Python program so let's

create a file inside of this and I want

you to name the file as

hello world dot py always make sure that

we have the extension as dot p y so dot

py stands for a python file and right

now what we are going to do is we are

simply going to print hello world to our

terminal

a couple of lectures ago we have seen

how to do it online by using a python

online compiler but in this video let's

try to do it on our local machine

let me just collapse my sidebar

the first thing that I want you to write

here is an inbuilt function by the name

of print so basically what we are trying

to do is

we want to tell python hey python I want

you to print

hello world

and that's it now I want you to open up

your terminal and inside this terminal

let us see how we can execute this file

I'm inside my directory of modern python

101

from here I want to go to my newly

created folder 0 1 introduction and once

inside this folder I can simply run my

file by typing python followed by the

name of the file and just press enter

and here you can see we have the right

output of hello world

if you want to change this from Hello

World to hello octallium

let's do it let us save the file again

go back to the terminal

let me clear up my terminal let us try

running the file by typing python

followed by the file name one more time

and we have the desired output of hello

octallium

now typing Python and hello world.py all

the time becomes a little boring in

order to automate this task we are going

to install one more extension and this

time the name of the extension is called

as code Runner

so I want you to go to your extensions

Tab and I wanted to search for

code Runner

this is the plugin make sure you install

this plugin

once we have this plugin in place we can

simply run the file I'll just show you

how to do it

let me close my terminal let me close

all of this

so once we have the plugin installed you

can simply click on this play icon right

over here and that's going to execute

your file

so as you can see the code on extension

actually exuded my file and I have the

output of hello world on the screen so

this video was just to give you a small

feel of writing python on our local

machine from the next videos python is

going to get much more interesting and

we will start to learn all of the basic

fundamentals of python

now let's actually start learning Python

and the first concept that we are going

to learn in Python is all about

Understanding Variables

but before we can understand variables

we need to go on a picnic with Lewis yes

let's go on a picnic and then let's see

what variables is all about

so Lewis is planning for a picnic and he

is going to pack a slice of pizza in his

Tupperware

you don't want to go hungry on a picnic

do you Lewis also wants to pack some of

his clothes inside a bag and also a

bottle of water now let's try to

visualize this concept A Little More

technically

so you can imagine your Tupperware bag

and bottles to be your containers

and what this containers are going to

hold

is this slice of pizza clothes and water

so you can imagine all of these things

to be values so the containers are going

to hold all of the values now let's try

to see all of these things in the world

of python

so here we have three containers

Tupperware bag and bottle and we have

three values slice of pizza cloves and

water

so essentially what's happening is your

containers are just like your variables

because your variables are going to hold

some data you can translate this concept

in Python by typing like this on the

left you can see Tupperware is a

variable and the variable of Tupperware

is holding a value of slice of pizzas

this equal to is also called as the

assignment operator that means we are

assigning the value on the right to the

variable on the left and the same thing

goes with bag and bottle as well now

it's time for us to create some more

variables

so I'm inside my folder number two type

system so this is the code that we

downloaded from GitHub

and this is the folder that we created

remember we've created a folder called

as modern python 101 so this is where I

am

here I am going to create one more

folder

and I'm going to name it as 0 to type

system

and inside of this I want you to create

one more file by the name of

variables dot pi

and this is where we are going to create

some of our variables

here is the scenario Lewis wants to go

for a party and he has three items with

him he has balloons he has some crackers

and he has some hats but he has only a

single box

so let's see what he is going to do

let's create a variable called as box

here we are going to create our variable

called as box and let us assign the

value of

balloons to the variable of box please

remember to put this inverted commas

because this is the value that has been

assigned to our variable of box on the

next line we simply want to print out

our variable so as you already know we

can simply say hey python I want you to

print out my variable and the name of my

variable is box

that's it just save a file and let's try

to run the file

now there are two ways of running the

file if we have code Runner installed

you can simply click on this and this is

going to run your file and here you can

see we have the output of balloons or

you can also run the file from a

terminal in order to run the file from

the terminal first we need to go inside

in the right folder

as you can see right now I am inside the

folder modern python 101 and I need to

navigate inside my folder which is 0 2

type system once inside this folder you

can run the file by typing python

followed by the name of the file in my

case the name of the file is simply

variables dot pi and hit enter

so as you can see we have the output of

balloons

let me put up a small Command right here

all of these lines that you can see over

here which starts with a hash sign this

actually means a comment and these lines

are actually going to be ignored by

python while executing your file now the

suppose Lewis wants to take crackers

instead of balloons so let's see how we

can reassign the value to our variable

let me put up a command

and here we can simply reassign by

saying that

for the variable of box I want to

reassign the value to a new one and the

new value is going to be called as

crackers

let me get the spelling right

and we can again try to print it out so

let's try to print out

the box one more time

let me run the file

and here we have the output so you can

see the first output is balloon and this

output is coming from from right over

here from line number seven

and on the next line I have the output

of crackers this output is coming from

this line line number 11. at line number

11 the variable of box no longer holds

the value of balloons because we have

reassigned the value on our line number

10. the new value that the variable of

box holds right now is just crackers

now for the last time if Lewis wants to

change his mind and this time he wants

to take hats so let's see how we can

reassign the value for the last time let

me put up some comments before we can do

that so for the last time we are going

to reassign the value of box and this

time the new value is going to be hats

and as usual we simply want to print out

the value inside our variable so we can

say hey python I want you to print my

variable of box that's it just save your

file and try to run it for the last time

so as you can see we have the output of

hats and sorry we can see the output of

hats

now this output is coming from our line

number 15. the current value that our

variable of box is holding is hats the

previous values of crackers and balloons

all of these values are now replaced and

the only existing value Inside the Box

variable is hats

till now we have seen how to work and

create variables now let's have a look

at what's happening behind the scenes

so this were the variables that we

created last time we created just one

variable called as box but we assign the

value of balloons crackers and hats to

the same variable now let's see what's

happening behind the scene and how

python is treating all of these

variables

just imagine this is the memory of your

PC and let's see now how python is going

to handle your variables

in Practical terms how python handles

the memory would be very different in a

practical scenario

but right now just have a look at this I

have simplified things so that it's much

more easy for us to understand

so just imagine all of the green area is

the memory of your PC now let's see

what's happening python would read all

of your source code

and as soon as it comes across this line

box is equal to balloons what python is

going to do is python is going to create

a variable called as box inside the

memory and python would look at the

right hand side and it's going to find

balloons so it's going to assign the

value of balloons to the box and all of

these things are happening inside the

memory

so on the next line when you are trying

to print out box you get the output as

balloons

but what happens when python goes to the

next line that is this one where you are

reassigning the value of box to crackers

at that time the value of balloons is

actually taken out and a new value of

crackers is been assigned to the Box

so after your line number six this is

how your box is actually going to look

like so box is going to hold just the

value of crackers that's why online

number seven when we are trying to print

out the value of box we get the value of

crackers

now the same thing is going to continue

on the next line as well when python

comes across this line box is equal to

hats it's going to remove the value of

crackers inside the memory and it's

going to assign a new value of hats and

box would be equal to hats inside the

memory and that's the output that we are

getting from line number 10. till now we

have a much better understanding of

variables and this time we are going to

see what you don't have to do while

creating a variable

you can't just arbitrarily name your

variable there are certain rules for

declaring your variables and that is

what I am going to talk in this video

this is the code from GitHub and I

wanted to click on this file variable

tools I don't want you to waste your

time just watching my type so I'm just

going to copy this file from my GitHub

folder

to my modern python 101 folder and let

me just paste it right inside my zero

two type system

so here is the file and now let me try

to explain what's happening

the first thing that we are going to

talk is something about declaration

Styles there are different styles in

which you can declare a variable

the first style that you can see over

here this is called as camel case the

first alphabet would be in small case

and the next words would start with the

alphabet so this is called as camel case

the next is your Pascal case in Pascal

case as you can see all of the words

they would start with the capital

alphabet

the next one as you can see right over

here on line number 11 this is called as

snake case

online number 12 this is also a variable

but this is used to declare a constant

I'll be talking about constants in the

future

this is also a valid variable and

normally you would use the syntax with

an underscore whenever you want to

declare a private variable I will be

explaining what is a private variable as

well in the future this is also a valid

variable where you can have a number at

the back

and you can mix your numbers with your

snake case or your

camel case or Pascal case or any other

case that you want so till now what I've

done is I have declared a couple of

variables and let's try to print them

out and see how they look on our

terminal let me just run the file

and oh let me first try and clear my

terminal

now let me go back to the file and let

me run it once again so here we can see

we can use different variable styles to

get our output now let's have a look at

the different rules for not declaring a

variable

as you can see online number 29 you

cannot declare a variable which starts

with the number if I just uncomment this

file

it's going to show me an error

similarly on line number 30 let me just

comment this back

so similarly on 30 if we have a hyphen

it's not going to work if we have some

special characters like a comma it's not

going to work if you use a dollar sign

at the front it's also not going to work

and if your variables has a space in

between so that 2 is not going to work

so whenever you are creating or

declaring variables always keep these

things in mind when it comes to your

style you just have to be consistent in

whatever style that you are choosing

as a normal convention whenever we want

to declare any variables or the name of

the functions we would use snake case

but that's just the convention it's not

required

and whenever you want to declare the

name of a class at that time we would be

using the Pascal case

and whenever we want to declare a

constant at that time we would use

everything in uppercase now we have been

making very good progress with our

variables

we have seen how to assign values to our

variables but we have seen how to assign

only a single type of value to our

variables

you can see over here balloons crackers

and hats all of this data types are

called as strings

so whenever you are working with your

Python Programming you always have to

work with some sort of a data and this

data can be classified into different

categories

the first category that we are going to

see is something called as a primitive

data type

so what do I mean by a primitive data

type it simply means that these data

types are already present inside python

the first data type we have already

worked with it's called as a string and

you can see it's always inside a code

for declaring a string you can use

double quotes or you can use a single

code both of them are valid syntax the

next one is called as an integer so you

can see we have whole numbers so 45 is a

kind of integer the next one would be a

float whenever you have some decimal

places it's called as a float inside

python

and the last one is called as a Boolean

Boolean can have only two types either

it can be true or it can be a false

now let's go back to our code editor and

create some of this basic primitive data

types

so let's create a new file inside my

folder 0 to type system I am going to

create a new file and I'm going to name

it as primitive data types Dot

p y

let me add some comments as well

now let's start creating our variables

first let us create a variable for

holding our string and I'm going to call

it as my string that's it so my string

is my variable and it's going to hold

the value of Lewis

let me spell it right

the next variable would be my integer my

end for short it's going to be 45

next one would be my

float it would be 3.14 the next one

would be my bull it stands for my

Boolean data and this time I am going to

assign it the value of true

make sure you always use the T with the

capital T

and that's it we have declared our

variables and we have assigned the

variables with the primitive data types

now let's try to print one by one so I

want to say first I want to print my my

string let me just copy and paste it now

the next thing that I want to print

would be my integer

next let me print out my float

and the last I want to print out my

Boolean value

just save the file and let me run the

file inside my terminal and here we have

the output Lewis 45

3.14 and true the last thing that I want

to discuss in this video is about your

styling

for example you can see right here

single quotes is also a valid string and

if you use double quotes

it's also a valid string so which style

should you use basically you can use any

style but you have to make sure that you

are consistent throughout your code base

in order to avoid such situations when

you're working in a large team the

python Community has come up with some

of the style formatters and one of the

style format is called as black

so if you remember at the beginning we

have installed a couple of optional

dependencies and one of the dependency

was called as black if you have not

installed then you can simply open up a

terminal

let me clear all of this

and you can install the dependency by

simply typing pip

install and black

and this will install the optional

dependency

black is a code formatter and we are

going to use black to format our code so

that it is consistent throughout

the first thing that I want you to do is

I want you to open up the settings for

visual studio code on a Mac you can do

that by typing command and a comma I

think on our Windows it should be

controlled and a comma

so this is my settings file and I want

you to type

save

and the first option that I can see over

here is called as format on Save I want

you to select this now again go back

search for black

so here you can see the first option

python formatting black path make sure

you have black right over here

and that's it

just close your settings file

and

let me save this file it's saying that

format autopape is not installed install

no I don't want to use that one I want

to use black so I'm just going to click

on this one use black

and that's it now if I come back to this

and if I put a single quotes

now just watch what happens when I save

my file

it automatically formats from a single

code to a double quote black is a really

useful utility and we would be using

black so that all of our styling is

similar

since we know a little bit more about

strings let's try and see how we can

output the string in our desired format

this is also called as string formatting

let me create a new file inside my

folder

and I'm going to name the file as string

formatting dot pi

let me put up a comment at the top what

I want to show in this video is how we

can have a desired string output

don't worry if the concept sounds a

little strange it will get cleared in

just a couple of seconds suppose I want

to print a statement saying that hello

and followed by a variable

and that variable can hold a name for

example you can say hello Lewis or you

can say hello Chico or some of the name

so let me first create a variable called

as name and let me assign it a value of

Lewis

now let's see how to format this string

and get an output as hello Lewis

let me

collapse my sidebar and here I can say

print

and I can put my codes but before my

quotes I need to add one more alphabet

called as F that means I want to have a

formatted string and here I can say

hello and I want to print the name over

here

so I am going to use curly brackets and

inside the curly brackets I can place my

variable so I can say name let's save

the file and try to run it

and here we have we have the output as

hello Lewis

there is one more format of doing this

we can simply say print and then we can

say

hello

you can put a comma followed by the

variable that you want to print so I can

say name

just save a file and let me run it one

more time

so as you can see we have the same

output

but normally you will see me using a

formatted string so let me just take out

the second example I'm not going to use

this kind of syntax

now let's see how we can output a string

saying that Lewis is Dash and dash years

old and dash and dash has to be filled

by an variable

so I can create a variable called as age

and I can say age is 13 and here I want

to print Lewis is 13 years old so I can

use a print statement again I am going

to use a formatted string so F and

quotes then inside my curly brackets the

first variable that I want to print is

the name so name goes over here

so Lewis is then I want to place the age

right over here is 13

years old

that's it just save your file and try to

run it one more time and we have the

output Lewis is 13 years old

let's do a couple of more practice over

here

suppose Lewis has a dog and then let me

spell it right

and the name of the dog is Chico

and this time we want to print out Lewis

has a dog named Chico so you can say

print again your formatted string your

curly brackets your placeholder for your

name so Lewis

has

a dog named

and the dog variable goes right over

here

and that's it

let us try to run the file

and we have the output Lewis has a dog

named Chico

let's do it for the last time suppose

Lewis also has a cat

and the name of the cat is Coco

so let me copy and paste this line

and I can say Lewis

has a cat name and the variable of cat

would go right over here

let me save the file and let me run it

for the last time

and here we have the output Lewis has a

cat named Coco

we are making really good progress but

this time I want to make a program that

would have a bug inside it

so let me create a file inside my folder

and I'm going to name the file as my

first bug Dot py

bug actually means that we have some

sort of an undesired behavior in our

program

so let me put up some comments okay now

let's get started with this one

let's create a variable called as box

and let's assign the value of balloons

to it

and let me print out a formatted

statement saying that

box contains

and the variable of box goes right here

let me just run this file and we have

the output that the box contains

balloons

now just watch closely what happens I

can also say box

is equal to 10.

now this really doesn't make any sense

why would I want to store 10 inside

balloons balloons is a string 10 is an

integer

but if you try to print this we are

going to get an output

let me copy and paste this line from

here

just blow this let me save it and let me

try to run the program

and we have the output box contains 10.

and this is because python isn't

dynamically typed language and this was

the point where I really struggled when

I was learning python

but you don't have to worry about this

you can easily solve this problem by

thinking in types in this video I am

going to introduce to you a concept

which is called as type hinting let me

put up a command so what type ending

really means is we always want to

associate a type with our variables

and this will really help us to create

robust programs and to take care of all

of the bugs before we can actually run

the program now let's start thinking in

types let's create a variable called as

food

and let us assign it a value of milk

now I want to tell python that food

should always contain the value of a

string it cannot contain any other value

and the way to do it is by using a type

hint

you can write a type in right over here

let me take it a little

you can add a type and try to here so

after the name of the variable just put

a colon then we can see this variable

has to be of the type of a string and

this you can write Str so Str means

food variable is of the type of a string

and that's it and let us print out a

statement saying that

let us do a formatted string we can say

Lewis is going to drink inside the curly

brackets we can see food

and I'll just save it and run your file

and we have the output Lewis is going to

drink milk

we can reassign the variable food from

milk to

and then we can say

Lewis is going to eat

let me save the file and let me try to

run it and we have the output Lewis is

going to eat eggs

now this time if I say food is equal to

false

let me just copy and paste this line so

let me just paste it right over here

save the file and let me run it for the

last time

but watch this

we still have the output it's saying

that Lewis is going to eat false false

and doesn't make any sense over here so

this is what we call as a bug this is an

undesired Behavior we don't want to

assign faults to our food

the way to take care of this is by using

one more plugin which is called as my pi

first thing we need to install my Pi I

hope you installed my Pi in the

beginning where I was discussing about

the optional dependencies

if not you can just open up your

terminal

let me clear all of this

and you can install my Pi by saying pip

install follow followed by my pack and

that's it

after installing my Pi I want you to

open up the settings again you can open

up the settings by

by pressing command and comma on a Mac

it should be Ctrl and comma on Windows

and here I want you to type Wi-Fi

and I want you to click on this python

linking my Pi enabled

just click on this one

and that's it now you can see the code

editor is highlighting false and it's

saying that we have some sort of issue

over here if you just hover over false

it's going to say incompatible types in

assignment

expression has Type Bool variable has

Type string what it means is variable

has a type of Str so if you refer the

line number 20 we have assigned the type

of string to our variable that's what

this error is trying to tell us we have

declared the variable as string but in

the expression we are trying to assign

it a value of Boolean that's why it's

not going to work

or rather it's going to work because

python isn't dynamically typed language

but at least in your code editor is

going to show you that something is

wrong so you can see on the top as well

it's showing an error right over here as

well

but if you see the file and if you try

to run the file one more time

it's going to execute

you can see we are executing our Python

program

so this is the thing with python python

is in dynamically typed language and

it's not going to enforce the data types

on the runtime

that is why to prevent such kind of bugs

we are going to use my pie and we are

going to use type hinting everywhere

let's try to do some more practice with

our primitive data types

so let's create one more program right

over here

and let me create a file and the name of

the file is just practice.py let me put

up some comments as usual

and let me collapse my sidebar

now this as you can see Triple codes

these are also a valid comment and

normally you would use triple quotes

whenever you want to write some kind of

a documentation inside the string but

the thing about this triple chords is

you can also create strings and you can

also do a string formatting by using

triple quotes we are going to see an

example of this right in this video here

is the situation Lewis wants to open up

a pizza shop and he needs to write a

program for accepting orders

now this is a very important tip before

you always start coding first you always

and always need to visualize now let's

just try to visualize our pizza shop and

let us try to think what all variables

we would require

the first and the most obvious is we

would require a variable for customer

that's the place where we would save the

customer data

the second variable could be a pizza

base maybe you would like to have a thin

base or a base filled with cheese or

whatever you prefer

the next variable could be for storing

the pizza size maybe it's like a 12 inch

pizza or maybe it's like a 14 or 16 inch

pizza so we would require a variable for

storing the size as well if it is a

pizza it also needs to have some kind of

a topping so we would need one more

variable for topping one more for cheese

and one more for the price

so this is how we would first visualize

the entire program and only after

visualizing your program you would start

coding

I will come to this concept A little

later in detail but right now let's get

going and let's create some of the

variables let us create the first

variable called as customer

the type of customer is going to be a

string so let us try write Str and the

name of the customer would be CC

let me put CS Capital

the next variable would be for my pizza

base so I can say my pizza base

again the type is going to be string

this time I want to have a thin base the

next one would be for my

Pizza size

now I bought my pizza size to be an

integer suppose I want to eat a 12 inch

pizza so that's what this is going to

indicate

the next one would be for my topping

topping has to be a string and I want to

have some toppings of olives

the next one let us create a Boolean

saying that extra cheese

and let us create

the typing in so the extra cheese

variable is going to be of the type of

Bool so the customer can say yes they

want false if they don't want in case

they want extra cheese then we can say

true otherwise it's going to be false

the last one is going to be price

now since price is going to contain

decimal values so we can say price is

going to be a float and we can say this

is for 8.99 dollars

just save it and now let's try to print

all of these values in our terminal let

me put up one more comment over here

now since this program is for accepting

pizza orders let's try to write print

statements that would make some sense

so the first one I can say

received

order from followed by

the name of the customer

let me save it the next line we can

print some of the pizza details so we

can say print again for the formatted

string and then we can see

the pizza base would be the pizza base

then we can say size

is going to be Pizza size in inches

followed by

toppings

and I can write toppings over here

save this

now let us try to print if the customer

wants extra cheese or not so we can

again say is

extra

cheese required

and let us put the value right over here

extra cheese

and the last thing we want to print is

going to be the price so we can say

bill amount

is going to be the price so I can put

the price right over here

let me run the program and here we have

the output

received order from CC let me take this

a little down

and

and now we can start comparing

so you can see we have declared the name

of the customer as CC that's what we

have right over here

the base of the pizza is thin so thin is

what we want the size is 12 and the

topping is volumes

do we require extra cheese yes we

require and the total amount is 8.99

dollars

let us have a look at one more

alternative syntax of using formatted

string let me put up a command right

here

now this time I am going to construct an

entire string which will hold all of

these values

in order to save all of this data let me

create a new variable by the name of

order

details is going to be of the type of

string

and now this is the interesting part we

can create a formatted string outside

the print statement as well so I can say

F and I can put

my comma right over here

but I'm going to use triple quotes

because I want to create my string which

is going to be in multiple lines

so if you just compare your output you

can see we have multiple lines on the

first line we have the statement for

received order the next line has the

pizza details and so on so I want my

string to be multi-line that's the

reason why I'm using triple quotes right

over here now between these triple codes

let's start adding our values now this

is pretty simple I just have to copy

from above let me just

paste this inside

the same thing for this as well

please note that I am not copying the

inverted commas because I already have

them outside

let me put this line

this one as well

and this as well

so what we have essentially done from

line number 34 to line number 39 is we

have created an attached string and we

have saved that string to a variable and

the name of the variable is called as

order details

on the next line we can simply print out

the order details so we can say simply

print my order details

and that's it let's try to run this file

and we have the output

let me just comment all of this for a

moment so that the output is much more

clear

Let Me Clear My terminal again go back

and let me try to run the file

so now you can see our formatted string

is also working

let us have a look at one more very

simple alternative

we just saw that we can create a

multi-line string by using triple codes

and assign that string to a variable

but let us ask the question do we really

require a variable maybe not

we can simply print out the entire

statement so what I'm going to do is I'm

just copying all of this formatted

string

let me copy all of this let me go down

let me write print and inside my print

function I'm just going to paste

everything as it is

that's it let me just save the file

and let me run it

and as you can see we have the desired

output you can use any of the string

formatting style there is no right and

wrong method in this one

welcome to a new section

this section is all about decisions

decisions and more decisions

and we are going to learn how to take

Decisions by the use of flow control

mechanisms that means there are multiple

flow control statements such as if and

else while while and do and some other

statements so we will have a look at all

of this control flow statements

first thing that I want you to do is go

back to your code editor and let's

create a new folder right over here

let me name it as 0 3 flow control

and the first file that I am going to

create over here is called as driving

license Dot py

let me put up a comment as usual now

let's see what's happening Lewis wants

to drive a car and he wants to know if

he can apply for a driving license or

not

so first let me declare a variable

called as age is going to be of the type

of integer and let me assign a value of

13 to it the first flow control

statement that I am going to introduce

in this video is the if and else

statement suppose the legal driving age

in your country is 16. so right now we

can create a very simple if and else

blocks we can say if

the age

is less than 16

. in that scenario I want to print out

you are not

eligible for a

license

but what happens if you are more than 16

in that case you are eligible for

license

so on the next line we can simply say

else so that means you are actually more

than 16 years old

and let me copy and paste it right over

here

here I can say you are eligible for a

license

let's have a look at what's exactly

happening

python is going to read your file from

top to the bottom

on line number six it is going to create

a new variable called as age and it is

going to assign the value of third into

it

when python comes to line number 12 it's

going to try to evaluate this statement

right over here

what's happening in this statement

my age is 13 13 is less than 16 so this

condition on line number 12 is true

and since this condition is true python

is going to print whatever which is

inside the if block you can see the line

number 13 is indented towards the right

so this is a tab space so that means

this line belongs to the if log so

python is simply going to print out you

are not eligible for a license

and after printing this block python is

actually going to skip the else part

because it's not the case with us and

python will go to line number 16 where

it will exit from the program let me

just save the file and let me try to run

it

so as you can see we have the output you

are not eligible for a license

now let's try to imagine what happens

after a couple of years

so after a couple of years the age would

be 19. now let me copy and paste the

exact same flow control statement and

let me put it right over here

let me save it and let me try to run the

file

so the second time we get the output you

are eligible for a license

and this is the case because on line

number 21 you can see now Lewis is 19

years old

let's go back to our code

one thing that I want you to understand

is it's not necessary to have an else

block we can simply write an if block so

let me put up a comment

and let me just copy and paste this

block

right over here

let me

comment this let me

comment all of this

so the only thing we have in our file

right now is this variable age

which we declared as 13 online number

six and we reassign the value on line

number 21

and we have this if an else block now I

am going to take out the else block and

I'm going to

left indent this line

so that means we do not have an else

Block in this condition

this is just the if block and this is

the next line let's see what's happening

let me scale the file and try to run the

file one more time

ah so in this case I am getting the

output you are eligible for a license

now let's see what's exactly happening

when python comes to this line land

number 32 it's again going to evaluate

this statement

in our case the age is 19 so 19 is not

less than 16 and since this condition

will evaluate to false python is going

to skip the if Law And since we are

going to skip the if block python is not

going to print this line it will simply

move to the next line on the next line

that is on line number 35 we are simply

going to print out you are eligible for

a license and that's what we get on our

terminal you can check the terminal one

more time

let me

let me clear up all of these things let

me run the file one more time

and that's it you have the output of you

are eligible for a license you can also

chain multiple if and as blocks let me

show you an example for that

now suppose after too many years Lewis

is 100 years old

let me just go and copy the code from

above so let me just copy

this one

and

right over here

and let me uncomment all of this

here we can start chaining our if and

else blocks

so on the next line I can say else and

if in Python we write it as e l i f that

means else and if

so the next condition that I want to

check is my age

greater than 100

in that case I want to print out

you are too old to get a license

let me comment this one

now let me try to run the file

oh but what is this

we are getting an output saying that you

are eligible for a license but that's

not we want we want to print out you are

too old to get a license

and we have a small bug and that bug is

exactly on line number 45.

we are saying that if the age is greater

than 100

but right now our age is 100

so in order to make this statement true

we have to say if the age is more than

or equal to 100

now let's save it and let us try to run

the file one more time

and this time we have a proper output

saying that you are too old to get a

license

till now we have seen very simple if and

else blocks let's try to expand our

knowledge

and this time let me create a new file

by the name of alien license dot pi

here is the situation Lewis desperately

wants to drive a car and he hears that

in a planet called as zorton there is no

age limit for getting a license so let's

see how we can address this situation

let us create a couple of variables the

first one would be for age

of the type of integer age is 13

the next one for a planet

Planet the type would be string and let

me assign it to Earth initially

let me introduce to you a little more

complex statements by using and and or

statements

so let's start writing our compound if

and else blocks along with and and or

the first case would be if the age is

less than 16 and

the planet

is

Earth

in that case I simply want to print out

that you are not eligible for a license

on Earth here you can see I have double

equal to that simply means that this is

a comparison operator we assist and

compare if the value inside the variable

planet is equal to Earth or not

now let's move on to the next blog for

the else statement here we can say else

if

the age is greater than 16

and if the planet

is again Earth

in that case I want to print out that

you are eligible for a license on Earth

but what happens if both of these values

are false what happens if the planet is

zorton or what happens if the age is

less than 16 but you are trying to apply

for license consultant

let's try to create one more condition

over here let us write an if and less

block right over here so we can say else

if

if the age is less than 16

and if the planet

is zorton

in that case I want to print out

you can apply for resort in your license

because it's valid in the planet's Orton

let me save the file

and let me try running it and let us see

what output we are getting

so I am getting the output that you are

not eligible for license on Earth

so let's get back to the code and let us

evaluate what's exactly happening let us

begin with evaluating all of the if and

LC block

let's start with this one on line number

13 let me put up a comment over here

so this is how the evaluation is taking

place

python is going to compare is the age

less than 16 yes my age is 13 13 is less

than 16 so the first statement is going

to evaluate to true so that comes right

here

the next operator that we have is and so

and comes right over here

now python will go to the last statement

it's going to compare is planet equal to

Earth so as you can see on land number

seven we have assigned the value of

Earth to planet

hence this statement also evaluates to

True Earth is equal to Earth so that's

why we have a true over here and since

we have two truths this entire statement

on line number 13 evaluates to true so

we can print out you are not eligible

for a license on Earth and right after

this let me put up one more comment just

to explain what's happening and since

this if statement on line number 13

evaluates to true

the execution is going to stop right at

this point python is not going to go to

the next alternative block python will

directly jump to line number 22 and it

will exit from our program so that's

what is exactly happening so let me put

up some more comments right here

execution does not reach over here the

same thing for this one as well let's do

a small exercise

on line number 14 we have tried to

evaluate the statement

let us try to evaluate the statements on

line number 18 and line number 21 as

well let me put up a comment right here

now let's try to evaluate this statement

my current age is 13. as you can see on

line number six we have assigned the age

as 13

so the first statement age is 13 13 is

greater than 16 no it's not so we have

false right over here

the next operator is and so and comes

right over here

the next statement is planet equal to a

yes my planet is equal to what so we

have a true

but in this case we have one false and

one true

so this statement is going to evaluate

to forms let's see what's happening on

line number 22 let me put up a comment

right over here as well

so as you can see the age is 13 13 is

less than 16 so we have a true condition

over here

now the planet

the planet currently is Earth and Earth

is not equal to zorton so we have faults

over here

one true and one Falls is always going

to give you an false statement

we can actually try to improve our logic

at this time by introducing an or

statement remember insult and even if

you are less than 16 you are still

eligible for a license

so we don't have to check this condition

at all we can simply say if you are age

16

or if the planet is rotten in that case

you can apply for resort in your license

in this case the evaluation will be

different my age is less than 16 it's

true and right here instead of n we have

an or condition

the next is planet is resultant so

that's again going to be false true or

false

now this time whenever we have an or

condition and we have one true and one

false it's always going to evaluate to

True since we have an or statement the

true wins over the false

but since the first block is executing

we are not going to execute this block

and just for your reference let me put

all of the and and all tables right over

here

so these are all of the and and or

scenarios

but you can do much better

if you are in confusion

just open up your terminal and I want

you to open up the IPython shell

remember we have installed IPython at

the beginning of the series if you have

not installed you can simply install by

typing pip

installed

I python

what happens is python actually comes

with a shell you can simply type python

this takes you inside a python shell and

here you can start writing python

commands for example I can say OnePlus 2

and I get the output of 3.

you can exit this Shell by typing Ctrl

and D

now I python is a slightly better

version of this and it's slightly more

interactive so I prefer to use IPython

shell

just type IPython and go inside the

shell

let me clear up the terminal

and whenever you are confused what

statement evaluates to what you can

simply type right over here here you can

type what happens if I have one

condition which is true and the next

condition which is also a true

we get a true but what happens if I have

one true and one false condition

we have a false

what happens if I have one true

or false

then also we get a true

what happens if I have a false and also

false

we get a false

let us try to evaluate one last

condition

what happens if I have a false

and

false in that case it also evaluates to

false so you can always come back to

this iPad and shell and see how the

statements are being evaluated now

suppose Lewis migrates to zorton then

let's see what's happening

let me put up a comment now Lewis is no

longer staying on Earth he's staying in

Jordan

let me copy and paste all of this

and put it right over here

I am not going to change any of the

logic

let me just run the file as usual and

let us see what output we are getting

oh first I need to exit this you can

exit this by pressing Ctrl and D yes I

want to exit let me clear up my terminal

go back to the file

let me save it one more time and let me

try running it it looks like we have a

small bug and I exactly know what we did

wrong

at this point we did not reassign the

value of planet to zorton that's what we

need to do so we can say map planet now

is

certain that's it just save your file

and let us try to run the file one more

time

now we have the desired output

you can apply for resulting in license

now let's try to see how the statements

are being evaluated so let's see what's

happening on line number 48

this statement Planet equal to Earth

this time it's going to evaluate as

false

true and false is going to evaluate true

or false and so we are not going to

execute this block

let's go to the new block age is greater

than 16 no it's false Planet equal to

Earth no it's false because we are

staying in zorton

false and false we have a false so

python will go to the last condition

age is less than 16 true

Planet equal result and yeah it's also

true

true or true

equals to true and that's the reason why

we have this output as you can apply for

result Indian license let's try to see

the next Concept in the flow control

mechanism

and this time I am going to introduce

you A New Concept which is called as

looping we can iterate over things that

is called as looping and we can iterate

by using a for Loop let me create a new

file as usual and let me show what I'm

talking about

here I am going to create a new file and

I am going to name it as printmyname.pi

and let me put up a command

so this is the situation this time now

since Lewis is staying in Jordan

he has to do things in a shortening way

in zorton they don't print your name on

a single line

they want to print each and every

character of your team on a different

line so let's see how we can do that

first let me create a variable for name

and let me assign the type as string

the name is Lewis and this time let me

introduce you One More Concept which is

called as the for Loop and we are going

to use the for Loop to iterate over all

of the characters in Lewis it simply

means that we want to go from one

alphabet to another throughout this

string creating a for Loop is very

simple we can simply say

for

character inside my name I simply want

to print out

the character let me put up a comment

right here

so on each iteration we are just going

to print a character let me save the

file and let me try running it here we

have the output

we have each and every character on a

new line

and we are doing this by using a very

simple for Loop now let's see what's

happening inside each of the iteration

here we are saying for character in name

first time the character is L you can

see right over here we get the output of

L

you can write over here as well

the next character is o u i n s

so on each iteration we are printing a

single character on new line

let's try to move on and learn One More

Concept for flow control mechanisms

this time I am going to show you the

while loop

for this as usual let me create a new

file

and let me name it as guess Planet dot

pi

and this time this is the situation

now since Lewis has migrated to zodan

his friend from Earth they are a little

curious to know where he is so Lewis

decides to write a program that will

make his friends guess the name of the

planet for this simple program I am

going to create three variables

first variable would be as a Boolean so

I can say

correct guess this would be an Boolean

initially let me assign it the value of

faults

the next Boolean for

guess

so this is the place where we would be

storing all of the gases that his

friends are going to make initially it's

simply going to be a blank string and

that's it

the next one for the planet so I can say

planet of the type of string

this is going to be zorton

let us have a look at the first

alternative

the first thing that we want to do right

over here is we want to create a loop

and we want his friends to keep on

guessing till the time they get the

planet right

first let us see how we can get the

input from his friends

the way to get an input is by using

another inbuilt function by the name of

input so we can say input

and I can write a prompt over here

Lewis says that can we guess my planet

and I want to save the input inside my

variable of guess so I'm just going to

the left

the input has to be saved inside my

variable of guess so my guess comes

towards the left

let me save this and let us try to run

this and see what's happening

let me also print out the guess on the

next line

now let's try to run this file and see

what's happening

so as you can see I am getting the

prompt Lewis says can you guess my

planet

let me write as Mars and we have the

output

now this output of mass is coming from

this line from line number 15. if you

are having some issues while running

this file from the code Runner then what

we can do is I want you to open up your

settings

let me collapse my terminal

here I want you to write code Runner

and let us scroll a little down I want

you to

go a little more down

and I wanted to check this option run in

terminal so make sure that this option

is checked or what you can do is you can

simply use the python command

let's try to navigate inside the folder

now this time the folder was 0 3 so you

can go inside this folder and you can

say hey python I want you to run my

program which is called as guest planet

and we have the prompt and this time it

can be Pluto

and we have the output of Pluto let's

get back to our program

here we can create our event and else

blocks so we can say if the guess

is equal to my current planet

then I want to print out

all right guess Lewis is a Jordan

else we can say

that I want to print out

Lewis says it's a wrong choice I want

you to try again

let me see this and let us try to run

this one more time

suppose my planet is Mercury

and we get the output Lewis says wrong

choice try again let me clear up my

terminal and let me try this program one

more time this time I am going to write

as zorton what's this we still have the

output saying that it's a wrong choice

but that's not the case we have written

certain

the issue is this that we have written

zorton with a z which is in the small

case but we have saved planet with a z

which is in the upper case

the point that I want to convey is all

of the strings are going to be case

sensitive inside python your upper case

z is not equal to your lowercase z

let us see how we can handle this

situation

we can go back to our if block right

here

and we can actually convert from capital

Z to a lower Z in fact we are going to

convert the entire string to a lowercase

string and you can do that by using an

inbuilt function

now this function Works only with

strings and since we have two strings

guess and planet we can use that

function right over here so we can

simply say guess I simply want to lower

it and after this I want you to put

brackets so this means I want to invoke

the function of lower I will come to

functions a little future in the series

but right now just go with the flow so

what this statement is doing is

is going to take the guess and it is

going to convert it from whatever case

it may be to an lower case we want to do

the same thing for Planet as well so

here we can say lower along with the

brackets

just save it

and now let's try running this file

let me write zorton with a smaller case

z

and this time we have the output right

guess Lewis is at Jordan now let's try

to improve the logic even more we don't

want to exit this program

we want to ask his friends to keep on

guessing till the time they get the

guess right

and we can do this by wrapping all of

our logic inside a while block so let's

see how to do that

on line number 16 let me make some space

and uh

here I can say while

my

correct guess

is not true so that means till the time

we don't get a correct guess I simply

want to keep on looping so let me put a

colon over here

and after this I want to indent all of

this if and S blocks one tab space

inside

so now if an else blocks belong to the

while loop

let me save it

and let me try to run the file but we

have a small bug let me run the file

first and then you will understand

what's wrong with it

so here it goes

it's asking me for the name of the

planet I am writing marks

so what's this it's keep on looping

something's wrong with our program let

me stop it by pressing Ctrl and C

the issue is we are just keeping on

looping the first thing python will go

online by 18 it's going to see is my

Mars equal to my Jordan it's not so it

will go to the next line

it says that Lewis says wrong choice try

again so this is what we are getting

and since our wild condition is not true

as you can see on land number six do we

have a correct guess false

and that's the reason why python will

again go back to line number 18 it's

going to see Mars is equal to Zordon no

so it's again going to go on a line

number 21 and print out Lewis says wrong

choice try again the way to come out of

this while loop is we need to have a

circuit breaking mechanism that's why I

have created this variable called as

correct guess

so right over here after line number 19

since we have a correct guess this time

let us reassign the value of correct

guess

to true

now let's try running this file

oh let me

clear up my terminal now let's try the

file one more time

so it's saying that can you guess my

Planet let me see as Mars

oh no we again have a issue let's see

what's wrong this time

now the issue is we are not asking for a

new input after we get a wrong guess

that's why we never have a correct guess

in order to correct this let me take

this line let me cut it out and I want

to paste it right over here

let me indent

so we have a proper variable

we don't require this pin statement now

let me take it out

and let us see if we can have a running

program let me put the input as Pluto

is saying wrong choice now this time it

is again asking me for an input and is

actually waiting for my input let me

write Mars no it's not going to work

Earth no it's not going to work

let me write zorton

and that's it we have the right guess

let me add some comments so that it's

much more easy for us to understand

what's happening the first comment goes

right over here

so on line number 16 we are just asking

the users for their input the next thing

that we are doing which is right over

here

we are just lower casing all of the

strings so that we have a much more

correct comparison then as a circuit

breaking mechanism we are setting the

current guess variable to true so this

is what is happening right here

inside the else block if the condition

is false then we are going to print the

statement and just to give it a small

cosmetic touch I am going to put a line

just below this

just save a file and let me try running

this file for one more time

so my first planet would be Mercury

we have a very nice output saying that

wrong choice and then we have a line

below it

now this time it's going to be zorton

with a lowercase z

and we have the right output there is

one more alternative way we don't need

to declare this variable all the time we

can simply work directly with the while

loop let me put up a comment and then

let me show how it works let me copy and

paste everything from above so let me

just copy this

let me go right over here

let me paste it

I also want to comment all of this

once inside the while loop we have one

more alternative which can act like our

circuit breaker here online number 33 I

can simply say while true

this means that I always want you to

start the value because true is always

true

and on line number 40

instead of saying correct guess is equal

to true I can say

break

so that means as soon as we have a

condition which is right I simply want

to break out of the value

let me save it and let me run it and see

if it is working or not okay so my first

planet would be Earth

a wrong choice the next planet is zorton

and that's the right choice let's try to

learn the next flow control statement

and this time we are going to learn the

match statement so let me open up my

sidebar and let me create a new file by

the name of

match color dot py and let me put up a

comment

so this is what we want to do

volt Island Resort and Lewis he has

packed a lot of stuff and we want to

check if he has anything that matches

our favorite color

and we are going to do this by using a

match operator

now please keep in mind that match is a

brand new operator which was introduced

in the version 3.10 so in case if we

have any version below 3.10 it's not

going to work so please make sure you

have any version 3.10 or higher here

what we can do is we can create a

variable called as

my favorite color

and we can ask the user for an input so

we can say input

and here we can see

enter your

favorite

color

what's wrong with this

spelling okay so enter your favorite

color

now let's try to print

the favorite color

let's try to run this file and let's see

if it's working or not

so it's asking me for my favorite color

I say it's black

and I have the right output

now let's see how the match operator is

going to work we can write that I want

to match on my

favorite color

and the first case would be

in case if I get the input as black

in that case I want to print out a

statement saying something like

Lewis has a

black

t-shirt

now suppose the user input

is red then maybe in that case I want to

print something like

Lewis has a

red car

suppose my favorite color is yellow

the code the colons has to be outside

the codes

and I want to print out

Lewis has a yellow

shoes

now in case the favorite color is green

in that case I want to print out

blue is has a

green hat

but what happens if we don't get a match

so in that case

we can write like this case followed by

an underscore so that means the default

case would be this one in case we don't

get the favorite color right here we can

simply print out that

Lewis has

nothing in and let me put my color right

over here

followed by the word of color

just save it let me save the file and

let me try to run it one more time

let me give the input of green

it's working

let me try to run the program one more

time

This Time Again green

but you can see we are getting the

output as Lewis has nothing in the green

color

now this is again because I have entered

green where G is capital

while inside the match operator you can

see I am using a lowercase G and you

already know that strings are case

sensitive inside python let us tackle

this issue and it's going to be a very

simple thing

we can either write over here I want to

match my favorite color and I want to

lowercase it first and then I want to

match

or we can say

on this line I want to say that my

favorite color should be equal to my

favorite color but in the lower case

or even better what we can do is we can

write it right over here Dot

lower

and let me take out this line

and that's it if you're wondering why I

don't have a type annotation right over

here

and the reason is just hover over input

and if you read the documentation it's

saying that the output is of the type of

a string we will look at the syntax when

we learn a little bit more about

functions your my Pi plugin is smart

enough to infer that the variable

favorite color is of the type of a

string and since your favorite color is

a string we can apply the lower method

on our string you can always

write the type over here and it's not

going to hurt

so this is also a valid syntax let me

run the file for the last time and let

us check what's happening

now this time I am going to say red with

the capital r

now it's a match Lewis has the red car

till now we have learned a lot and I

think it's time for us to start writing

our game

so what I've done in the background I've

created a file by the name of game save

sort and underscore one you can see on

the tab right over here as well and I've

added a couple of comments

let us see now what we are supposed to

do inside this game

now as we remember Lewis is staying at

Jordan but this time zotan is under

attack Thanos has arrived and he is

going to attack zorton now fortunately

Lewis can call his Avenger French from

Earth and so he has made a call Avengers

has received his call and they I want to

send four of the Avengers to save zorton

the four Avengers who are going to save

zorton are Iron Man Black Widow

Spider-Man and Hulk each of the Avengers

have their own attack and power and they

have to fight with Thanos in order to

save zorton

but we have a couple of conditions

Avengers can only attack in pairs so

that means at each given point of time a

single Avenger cannot attack Thanos

because Thanos is much more powerful so

Avengers have to team up in pairs of two

and they have to attack Thanos

and while doing all of this Avengers

only have three chances to kill Thanos

otherwise Thanos will kill the Avengers

and we will lose the game sounds

interesting isn't it

but the first thing that I want you to

do is not write the code Yes you heard

right I don't want you to write the code

first

I want you to understand what we have to

do and then you can start writing code

in order to understand better I want to

introduce to you a very simple concept

which is called as VOC dtp it's a very

simple concept that I've come up with

and the entire concept is divided into

two parts so as you can see the first

part is VOC the second part is dtp

so the first part simply means to

visualize outline and code the next part

would be debug test and polish

for now we would be concentrating on the

first part visualize outline and code

so as a programmer always remember first

you always always need to visualize

before you can code you don't have to

write code immediately so let's start

visualize what's going to happen inside

of a game

since it's a game we already have some

characters so let's try to visualize the

different characters that we have

we have two main categories one category

is for the super heroes and the next

category is for the super villains

we have a specific list for the

superheroes and those are Iron Man Black

Widow Spiderman and Hulk and for the

super villains right now we have only a

single super villain and his name is

Thanos so this is where we just simply

try to visualize how the game would look

like

and now we know the characters in The

Next Step let's try to outline how this

characters would look like and how they

would work

so coming to the next point of outline

since we have characters all of the

characters should have some properties

they should also have some constraints

and we should also have some sort of a

logic I have already specified that our

Avengers have a fire or an attack power

but if we have an attack power then we

would also require life and having a

property of life would make our job much

more simple and we can Implement a very

simple Logic for the game now this game

also comes with a couple of constraints

that we can't forget

the constants are the first one that we

saw Avengers can only attack in parents

so at a given time only two Avengers can

attack a single Avenger cannot attack

and more than two Avengers also cannot

attack and Avengers only have 3 chances

of defeating Thanos

so this is where we are just trying to

outline how our characters are going to

look like the last and the most

important part is

can we come up with some kind of logic

where we can simulate the attack now

let's go back to our code editor and let

us see how we can translate all of these

things in our step number three so as

you can see the step number three is to

actually code

in Step number three what we are going

to do is we either is going to translate

all of these things to a logic and that

logic would be coded with python now

let's start with declaring our variables

if you refer our outline we have a

property and the properties are for your

fire or attack power and one for the

life

so let's go right over here and let us

start creating some of our variables so

we can see

the attack power of Iron Man

so I can see Iron Man

attack

power

and just suppose it to be 250

now let's start thinking in types

now since it's a power I have to do some

sort of calculations so it must be

either an integer or in fluid

for the sake of Simplicity I am keeping

it as integer the next thing that I want

you to remember is

since this is an attack power we are not

going to change the attack power in the

future so no matter even if we are

losing or we are winning the game the

attack power of Iron Man is always going

to be 250 so just as a stylistic

preference I want to name my variable

everything in uppercase

so this would denote that I want to have

a constant instead of a variable

now what do I mean by constant a

constant simply means there is some

value which we don't want to change and

that is what we are indicating by

writing everything in the upper case

Now features hover over our variable you

can see on the left we have constant

so that means our code editor knows that

this is a constant but we can go further

and we can improve our typing for this I

am going to import and use something

from an additional package

now what is a package

package is basically some code that the

developers of python have written and

have put all of this code inside a

library which is called as the standard

Library so what I'm going to do is

I want to say I want to go to my

typing package so this package lives

inside the python standard Library

please remember that standard library is

already built into python so from the

package of typing I want to import

finally and we can wrap this integer

inside

finally

now it's very clear that Iron Man attack

power it's not just a variable it's a

constant and we don't want to change the

value of the constant throughout our

program let us repeat the same thing for

Black Widow Spiderman and Hulk as well

the next superhero would be our Black

Widow and she has a power of 180 the

next one would be Spider-Man Spider-Man

has an attack power of 190. the last

superhero would be Hulk and Hulk since

he is the biggest guy he has an attack

power of 300. let me put up some

commands right here so

this is where we are declaring our

constants and on the top let me put up

one more comment so this is the stuff

that we are importing now let's go back

to our outline just to figure it out

what we are supposed to do next

we have defined the attack power now we

also need the life

so let me go to the next line and here I

am going to define the life of Thanos

and the life of Thanos is 1500. as you

can see I don't want the life of Thanos

to be a constant I want it to be a

variable that's why I am declaring

everything in small case

and my my pie is smart enough to infer

that Thanos is of the type of integer or

if you want to be explicit you can

always type int right over here the

reason why I don't want it to be

constant would get much more clear when

we implement the logic for the game now

let's go back to our outline

and here you can see we have a couple of

constraints the first constant is

Avengers can only attack in pairs so let

us go back to our game and I want the

game users the ability to choose our

pairs in order to give this ability I am

going to create one more variable called

as choices and let me assign it the

value of 0. again I don't need to

annotate as integer because my Pi would

be smart enough to infer that my choice

is variable would always be an integer

after this let us create a couple of if

and else blocks and let us start

creating our pairs for our Avengers for

the sake of Simplicity I am just going

to create pairs in line so what I mean

the first pair would be Iron Man and

Black Widow

the second pair would be Black Widow and

Spider-Man

the third pair would be Spider-Man and

Hulk and the fourth pair would be Iron

Man and Hulk but you're free to make the

pairs in whatever choice you want

so here we can say if my choice

is one in that case I simply want to

print out that Iron Man and Black Widow

are attacking Thanos the next choice

would be

Choice number two

and this time I want to print out Black

Widow and Spider-Man are attacking

Thanos

next choice would be three

and this time Spider-Man and Hulk are

attacking Thanos and the last one

if the choice is number four then Hulk

and Iron Man are attacking Thanos while

doing all of this let us not forget that

we want to ask the user for the choice

of The Avengers

so let us Implement that logic and I

want to implement that logic before our

if and else blocks

so here I can since we want to ask the

user for the input we need an input

block

and let us display a prompt message

saying that enter your pair number

we want to assign the input back to our

variable of choice so Choice goes on the

left

and let me save my program but as you

can see we have a small bug so if we

just try to hover

you can see that we have an error saying

that

incompatible types in assignment

expression has type of string variable

has type of integer

so this was what I was telling you about

variable has the type of integer our

variable of choice as you can see on

line number 29 we have declared a

variable called as choice

and the type of this variable is an

integer

but if you hover on input and if you

read the documentation

it is actually giving us a string

so this is where when you start thinking

in types it's going to help you to avoid

a lot of bugs to address this bug it's a

very simple solution

we simply want to convert the string to

an integer

and the way to do that is by using a

cast let me just show you how it is done

so I am going to wrap all of this inside

my brackets

and I want to cast all of this into an

integer

so what this means is my input is going

to give me a string and I want to

convert that string into an integer

right over here

now our types are going to match on the

left is also an integer and on the right

is also an integer now let me see my

program and let me try to run it

suppose I want my pair number two

you can see Black Widow and Spider-Man

are attacking Thanos

let me try to run the file one more time

let me go by pair number four

Hulk and and man are attacking Thanos

so we have some basic logic in place

this time let us display a nice message

to the user informing them of all of the

pairs which are there inside the game

so before I ask the input I want to

display a nice message for this I am

going to create a new variable called as

message and I am going to assign some

string value to it so let me create a

variable called as message

and I'm going to assign some value to it

and this is the value

so please note that I am creating a

multi-line string by using triple quotes

and just before we can show the choices

I want to print out the message let us

do that right over here so we can say

print and my message let me save the

file and let's try to run it

and this time we have a very nice

message and we can see all of the pairs

who can attack Thanos

this time let us go with the pair number

three

and we get the output that

Spider-Man and Hulk are attacking Thanos

let me clear up my terminal

and let us go back to our code

now since this message is never going to

change I can actually make it as a

constant so let me change from the

lowercase to the upper case

and here as well

so we have a message in the form of a

constant let me put up a comment right

over here saying that this is going to

be one of my helper message

and I can utilize this message multiple

times whenever I want throughout my

program

now the next part would be since we have

multiple chances of attacking Thanos we

need some kind of a loop and inside the

loop we can keep on attacking Thanos for

at least three times in order to

simulate this Loop situation I am going

to use a while loop so I can just come

down over here and just before my print

message I can see

while

true

and let me indent it's why it has to be

while not white and let me indent all of

this thing

one tab space inside so all of this

belongs to the while loop now now let's

see since we have a while loop we also

need some kind of a circuit breaking

mechanism in order to exit

now let's go back to our outline and see

how we can do that one of the constraint

is that we only have three chances of

attacking Thanos

another constraint is if we have already

lost or we have already one then we can

simply break out and we don't have to

play a game so we are going to combine

this logic together and come up with a

very simple circuit breaking mechanism

so let me go back to my code

now inside my while loop we need to have

some sort of circuit breaking mechanism

so let me put up a command either we can

break out whenever we win or we can

break out whenever we lose so let's

write our logic right we are but before

adding the logic we need to create one

more variable and that variable is going

to hold our number of attacks as you can

see the constants we have three chances

for an attack so let's save that data

inside one variable let me go to the top

and declare a variable right over here

so this is called as attack numbers and

I am going to assign it a value of 0

initially

let us go back to the while loop and let

us Write Our Winning or our losing

conditions first let us see the winning

condition so we can say if

the life of Thanos

is less than or equal to 0 that means we

have 1 but we need to add one more

condition right over here the second

constraint and that constraint would be

if my number of attacks is also less

than or equal to 3.

only in this case I am going to win

otherwise I am going to lose and I am

going to print some kind of a message

over here so right now let me

just put up a comment that this is for

the for the win

for the else block that means if we have

lost so we can say if my attack numbers

are greater than or equal to 3 oh this

has to be else and if

now in case my attack numbers are more

than or equal to 3

in that case I am actually going to lose

now before I forget we need to add the

break statements to actually

break out of the while loop so let me

add them right away

the next thing that we need to do is we

want to display a nice winning or a nice

losing message so what I have done is I

have already written a nice message

which I am going to paste it right over

here just above the message so the first

one would be my winning message and it's

going to be you successfully saved

zorton along with a couple of emojis

and since this is a constant

all of this is capital and this is final

Str if you want it you can write this if

you don't want you can take it out and

my pie is smart enough to infer that

it's a constant of the type of string

the next message would be our losing

message so I'm just saying that Thanos

killed Avengers and captured zorton

the reason why I have all of this

separately in a constant or in a

variable is because in future if you

don't like this emojis you can simply

take them out

and you don't have to change all of the

logic that you write below you have to

just change one constant or one variable

and it's going to reflect throughout

your code it makes our code much more

manageable let me put back my Emojis I

just love them

and go back to our if and else block let

me

remove this and I can say here I want to

print my

win message and

here I want to print my

lose message

sorry it's going to be a lost message

let me save my file now let us go back

to our outline and let us see what we

need to do next

now we have to do the most important

part that is how to actually simulate

the attack unfortunately for us this is

the most simplest part let's see how we

can do that

suppose you are using the first pair

right over here in this case what's

happening is

Iron Man and Black Widow they are going

to attack Thanos

and if we just scroll up

Iron Man Has a power of 250 Black Widow

has a power of 180 and Thanos has a life

of 1500

so when Iron Man and Black Widow are

attacking Thanos we simply want to minus

the attack power from the life of Thanos

and since we have two Avengers who are

attacking Thanos we have to reduce the

value by 250 and 180 from 1500 and that

is how we simulate an attack

so let's go down over here and let us

Implement that logic

so we can say that my new Thanos life

would be my current Thanos life minus my

Iron Man

attack power

and also minus the

Black Widow attack power and that's it

and after doing this we also want to

increment the number of attacks since we

already have done one attack so we can

say my current attack number would be my

attack number plus one

so initially if you see the attack

number is zero

and whenever we have an actual attack we

are going to increment it by one and

remember we have a constraint right on

line number 49 that we cannot have more

than three attacks

if we have more than three tags then we

are going to lose the game let us do the

same thing for our choice number 2 3 and

4 as well let me just

copy this

let me paste over here and before the

attack I have to say that my

Thanos life would be my Thomas life

minus

Black Widow attack power minus the

Spider-Man attack power

let me go to the new line right here

again the same thing let me copy here as

well

and then here my Thanos life would be my

Thanos life minus

Spider-Man attack power minus

Hulk attack power

let us go to the last choice

and here we can say again the same thing

Thanos like would be

Thanos life minus

Hulk attack power

minus Iron Man attack power

here is my Iron Man

save it and that's it I think we are

good to go and we can try out our game

so let's give it a try

let me take this up a little bit

so the first thing is we have a nice

message saying that we have the

following pairs

for the first pair I want to go with the

first one Iron Man and Black Widow so I

just press one and enter

so I get the message that Iron Man and

Black Widow are attacking Thanos

now it's asking me for the second pair

now I can say I want to go with Black

Widow and Spider-Man so I enter my

choice number two

again we get a message saying that black

Widow and Spider-Man are attacking

Thanos and it is asking me for my third

pair let me go with Hulk and Iron Man so

I can type 4

and that's it and unfortunately we have

lost the game

Thanos has killed Avengers and he has

captured zotan

let us play the game one more time

this time I am going to choose my pair

number four Hulk and Iron Man

and my pair number one and again my pair

number four and that's amazing finally

we have been able to save zorton you can

see the message right over here

and this brings us to the end of section

number three

just take a break have some nice snacks

or coffee and I will see you in the next

section

welcome to a brand new section

this section is all about data

structures

data structures is just a common name

for how we can group our data together

and the first data structure that we are

going to see is called as a list now

since Lewis has a migrated to zorton he

has been making a lot of progress and in

Jordan people greet each other by saying

Zola

so Lewis wants to write a simple program

where he can beat all of his friends by

saying Zola followed by the name of the

friend you can do this by using multiple

print statements but that is not a very

effective approach what if you have

hundreds or thousands of friends then

you can imagine that using a print

statement for each and every friend

would get too tedious instead python

offers a much better solution

and that is called as a list so what we

are going to do is we are going to

create a list and after that we are

simply going to look through the list

and print a grading message to each one

of his friend let's see how to do this

behind the scenes I have created a new

folder called as zero four data

structures and I'm working in this file

called as friends dot pi so let's get

started with this one let us create a

variable called as friends oh let me get

the spelling right

now this friends is going to be a list

for creating a list you have to use open

and closing square brackets and inside

this you have to insert all of your

elements

suppose the first friend is CC

and then we have a bunch of other

friends Rocco Chico and Nico so this is

what a list in Python looks like now

let's see how we can add the type hints

to this one

now obviously this is a list so what we

can do is here we can simply say that

friends is a list and after that let us

try and specify what kind of data that

our list would be holding and if you see

all of our data types are strings so

what we can do is we can simply tell

that this list is going to be a list of

strings the next point that I want to

tell you is all the lists in Python they

always start with the index number of

zero so let me put a command and then

let me try to explain what's happening

so this is how your list will look

inside the memory

on index number 0 it will have CC on

index number one it will have Roku on

index number 2 Chico and so on always

remember that list will always start

with the index number of 0 and this is

common across all of the programming

languages not only in Python the next

point that I want to share is if you see

the length our length is 4 that means we

have four elements inside the list so

this is the first element second third

and fourth so the length of our list

would be four but the index number would

be up till 3. let's print out the

friends and see how they look like so

let me print the prints right over here

and let me run this file

so these are the friends we have friends

right over here now let's create a very

simple for Loop and greet all of his

friends

so let me start by putting some comments

let me take this a little up and we can

use a very simple for Loop so we can say

for

friend in my list of friends

for every friend I simply want to print

out a greeting message saying that

Zola followed by

the name of my friend

let us run this file

so here we have the output Zola CC Zola

Rocco and so on

let's see what Lewis wants to do next

so Lewis simply wants to count his

number of friends

so remember I just told you that the

length of this list would be 4 and we

can find that out by using an inbuilt

function which is also called as length

let me show you right over here let's

print out friends

length

and inside the curly brackets I can find

the length by using the inbuilt function

called as length Len and let us pass our

list to it just save and run your file

and your we have friends length is 4 and

that is what we were expecting let's see

what Lewis is doing next oh he had a

fight with Nico and he wants to unfriend

him

now let's see how we can take Nico out

of our list so we can see Nico Nico is

the last element inside our list and we

can remove him by using an inbuilt

function which is called as Pop let me

show you how it is to be done

so I can say I want to unfriend

and I can say from my list of friends I

simply want to pop the last value now

since Nico is the last element we can

use this method to remove an element

from the list

let us print out the friend that we have

just unfriended so we can just say

unfriend and let me put my curlies and

let me put unfriend over here let me

also copy and paste our friends

and let's see how our list is looking

right now so let me just

paste it right over here

just save it and try to run your file

and here we have it we have unfriended

Nico and this is how our current list of

friends looks like Let Us Go Back

let us see what Lewis is up to this time

so Lewis has made a new friend by the

name of zico so let us see how we can

add Z code to our list we can add zico

by using another input function by the

name of append let's see how to do that

so here I can say in my list of friends

I want to append one more element and

that element is called as zico

let us copy this line and paste the new

list

let me save it let me try to run my file

and here you can see we have zico at the

back

one more thing you must have noticed

that I am not assigning a variable for

this operation so for example I am not

doing something like this

the reason is if you just hover over

append

you can read the documentation this

function returns none that's why I'm not

assigning it back to my list of friends

but at the same time if you hover over

Pop now this method of Pop is actually

returning back a string that's why I'm

using a new variable on the left to

collect that data

but for this we can't do the same now

let's see what Lewis is up to so let me

go down right over here

and let me paste a new comments this

time Lewis wants to know who is his

third friend inside the list let us

check it out let me open up my terminal

so this is how our latest list looks

like so cc is a first print Rocco is the

second one and Chico is a third friend

so let's see how we can get this value

from our list and we can do that by

using our indexes

so just remember let me scroll a little

up our list it has a set of indexes and

always remember that the index is going

to start from 0. now let's see how we

can get the third value from our list

so here I can simply print out

from my list of friends

I simply want the friend who is on the

index number 2.

now remember we are using 2 because our

index starts at zero

let me put a command

so let me save this file and let us try

to run this file and here we have the

output Chico is the third friend inside

the list

let us go back

this time Lewis again had a fight but

this time he had a fight with Roku and

we need to remove Roku from our list as

well

let me scroll to our list

if you see Roku is inside our list at

index number one so let me show you how

we can do this so let us go down

here I can say from my list of friends I

simply want to remove

Roku that's it

let me copy this line and

paste it over here and let us try

running this file so this is our new

list we have CC Chico and zico we have

successfully removed Roku from our list

let's see what Lewis is up to next and

it seems like Lewis and Rocco have

become friends again

so let's see how we can add Roku back to

our list

remember that Roku was at index number

one so we want to insert Rocco back to

its original index so let me show you

how it is to be done so here I can say

in my list of friends I want to insert

at index number one

the element of groco

and let me try to print out the list one

more time

that's it just see run your file and

this is the new list we have Roku back

at index number one inside the friends

list

let's go back and let's see what Luis

wants to do next so this time Lewis

wants to confirm if Roku is in the

friends list or not and we can do this

by using our if and in syntax

so what we can say right over here is

if

Roku

in my list of friends then I simply want

to print out yay Roku is in the front

list or else I can print out

some other message so let me save the

file and let us try to run this one

now since Roku is inside the list we get

the output that yay the Roku is in the

friends list

let us go back

let's see what's happening next so this

time Lewis patches up with Nico as well

and this time Niko has become his number

one friend so we want to add Nico back

to our list of friends

but since Nico is his number one friend

right now we want to add Nico at the

beginning of the list so we can do this

by using the same syntax

right over here we can use the same

syntax

and let's see how to do this so we can

say

in my list of friends I want to insert

at index number 0

the element of Nico and let us print our

list of friends as well so let me go

down

let me paste and let us run this file

and here you can see we have Nico as the

first element inside of a list

let us go back so this time Lewis wants

to sort his friends in alphabetical

order

and luckily it's very simple we simply

have to say

friends I simply want

to sort it

let me copy and paste the list of

friends

and let us run this file

and here we have the output you can see

all of the names are sorted

alphabetically so CC Chico comes first

Nico Rocco and finally we have zico

let us go back

so this time Lewis doesn't really like

this ordering and he wants to reverse

the order

luckily this too is very simple

let me just copy this and let me

paste it right over here

and instead of sort I simply have to say

I want to not remove I want to reverse

that's it and let us run this file

and this time we have the new list and

you can see the first element is zico

and the last element is CC

let's see what's happening next

and this time Lewis again had a fight

with Nico and we again need to remove

Nico from our list but before removing

Nico let us have a look at our list

so this is how our list is currently

looking like and Nico is the third

element or you can see the index number

of Nico is two so keeping this in mind

let us go back and see how we can remove

the go from the list earlier I have

shown you two different methods of

removing elements one was this one of

remove and the first one was with the

pop method let me show you one more

method Again by using pop let me copy

all of this

and let us go down

now since Nico is at index number two

what I can do is I can tell python that

I want to pop an element from an index

number two

let us save and let us run this file for

the last time

and here we have it we have unfriended

Nicole and this is our updated list

the next data structure that we are

going to learn is called as a tuple

behind the scenes I have created a new

file which is called as subjects.pi and

let's see what's going to happen let me

collapse my sidebar

now it's time for Lewis to go to school

and he has to choose his subjects but

his school wants to make sure that once

a student chooses their subjects they

won't be able to change it so let's see

how we can do this and the way to do

this is by using a tuple

so you can imagine Tuple to be like a

stricter brother off list once you

create a tuple you can't change or

modify it so let's see how to create a

tuple

so let's say that we want to create a

tuple by the name of

subjects

and the way to create a tuple is by

using the round brackets and instead of

these round brackets we have to add our

elements suppose the first subject would

be maths the next could be

science then we can see history now

remember that's similar to our list our

tuples will also start with index number

zero that means the index number for Max

is 0 for science it would be 1 and for

history it would be two

let us see how to add typing for this

one

so here I can say that subjects is

obviously a tuple

and the way to define its type is we

have to put our square brackets and

since tuples are strict we have to

define the data type for each and every

element

so for example in this Tuple we have

three elements and the types are string

and string so here we can see that the

first element is a string

the second is the string as well and the

third is the string as well

suppose we had one more element

so if I say that we have one more

element as 13

now the data type of 13 is an integer

so what we would have to do is after

this we would have to say that my fourth

element is of the type of integer

so make sure whenever you are creating a

tuple you write the data type of all the

elements inside the Tuple let me take it

out this is not required for our example

right now

let me also put up a comment so saying

that the index number for match is 0 for

Sans is 1 and history is two

let's see what we can do next so let me

take it a little up

so this time Lewis wants to count his

number of subjects and you can do that

by using the inbuilt function called as

length so we can use a simple print

statement and we can say that

number of

subjects then inside our curly brackets

we can use the inbuilt function called

as length and let us just pass our Tuple

inside so we can say subjects

let us run and see the output

and here we can see that the number of

subjects is three

let us go back

the next thing that Lewis has to do is

Lewis has to sign up for all of the

subjects

so let us create a very simple Loop and

by using the loop we can sign up for all

of the different subjects

you can use your regular for Loops to

iterate over the Tuple so here it goes

we can see for my subject in my couple

of subjects

for each iteration I can simply print

out a statement saying that Lewis is

signing up for let me get my spelling

right Mr be signing up for and inside

the curly brackets we simply have to say

for my subject let us run and let us see

the output

so here it is Lewis is signing up for

maths and then for Science and the last

one is history

let us go back

so this time Lewis wants to see which is

his second subject and we can do that by

using our index so as I just mentioned

tuples also have indexes so the second

subject would have an index of one

so let us try and print it out

here I can simply say that I want to

print out

from my top love subjects the subject at

my index number one

also let me put up a comment saying that

since the double starts from index 0 we

are using one let us see the output

so you can see the second subject is

science

let us go back

and this time let us see what's

happening

so this time the school wants Lewis to

take another three subjects to get his

full credits now what happens is once

you create a tuple you can't add

different elements to a tuple

for example when we saw list we could

append elements to the list but you

can't do for the Tuple then what can you

do well you can add two different tuples

and create a new Tuple let me show you

how it is to be done so suppose the

additional subjects which he has to take

would be a new Tuple and we can say that

the new subjects are English Python and

physics on the next line we can create a

new Tuple called as my total subjects

and we can simply add our top subjects

plus our additional subjects

so now we have a new Tuple which has all

of the subjects together

we can also try and print it out so here

let me just say that my

all subjects would be my couple of total

subjects let us run it

and here we have the output you can see

we have English Python and physics at

the back and also we have maths Science

and History

so this is our newly created Tuple let

us go back and let's see what's

happening this time now it's obvious

that out of all of the subjects Lewis

loves Python and he wants to make sure

that python is inside his list of

subjects so we can check for an element

inside a tuple by using our if and else

blocks so let us see how to do that

so here we can simply say that if python

is in my Tuple of total subjects if this

is true then I simply want to print out

yay Lewis is going to Learn Python if

not so we can say else

we can print out oh no no python for

Lewis so let us save this file and let

us try to run this file for the last

time

and here we have the output

now since python is inside our Tuple we

get the output of a Lewis is going to

Learn Python

now let's try to learn about

dictionaries

dictionaries are of mapping type that

means the dictionary are going to map a

key to a value

so let us see what's going to happen

right now behind the scenes I've created

a file called as marks.pi and I'm

working in this one so let me collapse

my sidebar and let us see what's

happening

now this time Lewis has given his exam

and he has received his marks

so let us see how it looks like so we

can create a dictionary and call it as

marks

the way to declare a dictionary is by

using your curly brackets

and inside of this curly brackets let us

give the key and the value pairs suppose

the first subject is maths so we can say

Max

and he scored maybe 80 marks in his

match so this is how your key and value

pairs look like on the left of the colon

we have a key and on the right we have a

value

let us give a couple of more key and

value pairs suppose the next subject was

science and suppose he fed 82 marks in

science

and let me add a couple of more subjects

as well

so this is his score

and the next line let us print out all

of this subjects we can say

in my formatted string my marks and

let us see marks let me save the file

and let us try running this one

and here is output so this is the

dictionary that we just created

now let us go back and see what's

happening next

let me put some comments right over here

so this time Lewis wants to check all of

the subjects now remember inside our

dictionary the keys are our subjects so

let us see how we can just get the keys

out of our dictionary

the way to do that is very simple let's

also use a for Loop to print out the

keys so we can say for my subject in my

dictionary of marks

I want to get all of the keys and for

each iteration we simply want to print

out the subject let us run this file and

see the output

so here is our output we have all of the

keys inside our dictionary

now let us go back and let's see what's

going to happen next

so this time Lewis wants to check all of

his marks now again remember that the

marks are the values

so anything on the right is the value

and this time we want to get only the

marks out of our dictionary

so let us do that and the way to do that

is similar to something like this so let

me show you how it is to be done

so we can say for my score

in my dictionary of marks I want to get

only the values

and for each iteration I just want to

print out my score

let me save the file and let me try to

run this file and here we have the

output here you can see we have all of

our score

let us go back

let us see what Lewis wants to do next

so let me take a little up

this time Lewis wants to check out all

of the subjects and marks together that

means we simply have to print out our

key and value pairs so let us see how we

can do that

again let us use our for Loop to print

out the key and values so we can say

for

now since the keys is for the subjects

let us call subject and on the right we

have score so we can say score

in my dictionary of marks I want to get

all of the items now this method is

going to return our key and values which

we are capturing right over here

and for each iteration let us print out

our KN value pairs so here I can say

that my

subject and here we can say the score

and we can say the score is out of

just let me save it and let us try

running this file

and here we have the output match Lewis

code 80 out of 100 science was 82

history was 78 and so on

now let us go back and see what we have

to do next

and this time Luis wants to check if he

has passed in all of the subjects or not

and the passing marks are 50.

so let us see how we can do this

we can do this by using our for Loop and

our if and edge blocks so let me show

you how it is to be done

so here we can say for

my subject and my score in my marks dot

items

for each iteration I want to check if my

score is greater than or equal to 50

only in that case I can print out that

subject and I can say pass

else if the score is less than 15 that

means he has failed and so we can print

out the name of the subject so we can

say

the subject and we can see field let me

save it and let me try to run this file

so let's see how he has done in his exam

match is a pass science is a pass

oh but what's this English is a field so

let's see what's going to happen next

let us go back to our file

so let me take it a little up and let me

put some comments so those things that

there was some kind of a totally mistake

for his English paper and he's asking

for a revaluation

and after the revaluation the new marks

are 70 so let us see how we can update

the values in our dictionary

so this time what we want to do is let

me show the dictionary

so this time we want to update the marks

of English from 35

270 so let us see how we can do that so

let me go down

and here I can say that from my

dictionary of marks I want to go to my

key of English

and I want to assign the new value of

17. so this is how you can update the

values inside your dictionary

on the next line we can print out the

value we can say something like this

Lewis

score inside the curly brackets we can

see the marks of English

in English

so let me just save this and let me try

to run this file

so here we have the output saying that

Lewis scored 70 in English

now here what we are doing is this

syntax we are just retrieving the value

from our dictionary

so the syntax means that from my

dictionary of marks I want to get the

value for the key of English let us see

what is happening next now this time low

is also took an exam for geography and

his code 78 marks

so this time what we have to do is we

have to create a new key and a new value

this time remember we don't have

geography inside our dictionary of marks

and we have to create one right now

so what we can say is for my dictionary

of marks I want to create a new key for

my geography and I want to assign the

value of

78 to it and Lewis also wants to check

if he has passed in all of his subjects

or not

so let me go up and I just have to copy

all of this and let me paste it right

over here

so here is the output and it looks like

Lewis has passed in all of his subjects

and you can also see we have the output

for geography as well

now let us go back so let's see what's

happening this time

so this time his friends on zorton they

want to know how much Lewis scored in

Python so let us see how we can retrieve

the values from our dictionary so let me

show you the first alternative

let us create a new variable called as

our python score and we can retrieve a

value by using the syntax so we want to

say that go to my dictionary of marks

and I want you to get the value for the

key of python and that's how you

retrieve the value but this syntax has a

couple of limitations which I'll explain

it shortly but first let us print out

these values let us print out the marks

in Python so we can say Lewis

core the python score in Python let us

run this file

and here we have the output saying that

Lewis scored 98 in Python now let me

show you one more alternative method let

us go down and let me

put one more comment and here again we

can say that the python score and this

time we can use one more alternate

syntax so what we can say that from a

dictionary of marks I want to get the

values for my key of python and on the

next line let us print out the same

statement so let me copy from here and

let me paste it right over here

and let us run our file

so this time we can see we again have

the output now let us go back and let's

see what's happening next

so let us see what's happening this time

and this time his friends from Earth

they want to know how much Lewis code in

Java

so what we can do we can create a

variable called as

JavaScript and we can save from a

dictionary of marks I want to get the

value for my key of java and the next

line let me try and print it out so what

I can say that I want to print out Lewis

code

Java score in Java let me see and let me

run this file and this time you can see

that we have an error and the error is

called as key error now this is because

our dictionary does not have a keyword

as Java so this is one of the

limitations of using this syntax right

over here let me put up a command saying

that this syntax will throw an error now

let's see a better way of getting the

values from our dictionary and that is

by using the get method that we just saw

on the next line let me paste some

comments and I want to comment this out

because this is always going to fail so

let us go down right over here

let me take everything up so here let me

create one more variable called as our

Java score and let us use the get syntax

so what we can say is from my dictionary

of marks I want you to get

the value for the key called as Java let

me save this and this time let us try to

print out this same sentence so I can

just copy and let me paste it right over

here let us run this file and see the

output

so this time we get the output of Lewis

scored none in Java so let us go back

and let us see what's happening

now this method of get returns a none if

it can't find the value and that's what

is happening right over here one thing

that I forgot to show is how to use the

typing for this one so let us go up and

let me show you how to write the type

hints for our dictionary

so this variable of marks this is a

dictionary so we can say this is our

dictionary

and inside the brackets we also have to

mention the types for our keys and

values so here we can say that since all

of the keys are string so the key is

going to be of the type of string and

the values are integers so we can just

say int and that's it now let us go down

and let us see what's happening so here

on the line 108 this get method is going

to return none or if it finds a value it

is going to return our score which is of

the type of integer now let us use our

if and else blocks to print something

meaningful so here we can say that if my

Java score is none that means if we

can't find the value

then we can simply print out saying that

Lewis did not study Java

and else we want to print out this

statement so let me take it inside my

else blog and let us try to run this

file and here it is we have the output

of Lewis did not study in Java

now let us go back

the last thing that I wanted to show you

is how to delete some elements or how to

delete the key and value pairs from our

dictionary now suppose we want to delete

the key and value pair for English

then we can say that I want to delete

from my dish media of marks

English so this is how the syntax goes

let me remove the extra codes

now let us print our marks one more time

so I can see

marks and let us print out the marks

right over here

let me run this file so this is how our

dictionary is looking and you can see we

have deleted English from our dictionary

as well the last thing that I wanted to

mention for this one is the lookups and

dictionary are extremely fast what do I

mean by lookup

so on line number 108 we are getting the

value from our dictionary so this is a

lookup when we were working with our

list or tuples we were using indexing

but for a dictionary we always use the

key to get the data and this is the

reason why lookups in dictionary are

extremely fast

and we would be using dictionaries and

lists in our final project as well so

make sure you go through them a couple

of times and understand what's exactly

happening

there is one last thing that I wanted to

show you so if you open up the code from

the GitHub so this is the code from

GitHub

inside my 4.04 data structures this is

the file which I am referring to it is

called as dictionary

now let me collapse my sidebar

so here I have one more sample

dictionary called as pizza and you can

see the structure is very interesting

the first key value pairs we have

integer as the key and string as the

value

for the next one we have a float as our

key the next one is even more

interesting we have a tuple as the key

and the last one we have a Boolean value

as a key now the interesting part is

this is a valid syntax

so let me copy all of this and let me

paste all of these things inside my

IPython shell so here it is let me paste

it right over here and let us try to

print out our pizza

so you can see we have a valid output so

what happens is you can use any data

type for a key as long as it is

immutable

so our strings are immutable integers

are immutable floats booleans are also

immutable and we also saw that our

tuples are immutable as well so you can

use all of these data types as your keys

the way to retrieve the data is similar

so let me give you some small examples

so here we can say from my dictionary of

pizza

I want to get the value for the key of

10. and here we have the output

the same thing can go for our float as

well so we can say 8.99

and here we have the value

you can do the same thing for our Tuple

as well let me copy this Tuple

and here I can say from my dictionary of

Pisa I want to get the value from the

key and this time the key is a tuple so

let me paste it right over here

and you can see we have the right output

but before we make such additionally I

want you to wait and think do you think

that this is going to be a developer

friendly dictionary I would rather think

not

I just wanted to show you that you can

create such dictionaries and all of this

is a valid syntax

now let us have a look at the next data

structure and this data structure is all

about being unique

the name of this data structure is

called as a set

for this video I have created a new file

called as teach dot pi and let's get

working with this one

so let's see what's happening this time

Lewis wants to show some of his English

magic to zortans but Jordan's they can't

understand what's happening and they

want to see each alphabet separately

that means they want to understand each

unique alphabets so let's see what's

going to happen next

so suppose we have a magic word called

as

Abracadabra now let's see how we can get

the unique alphabets from our string

so on the next line let us create one

more variable called as unique alphabets

and in order to get unique alphabets

from the string we have to create a set

and the way to create a set is by using

the cost which is called as set and let

us pass our variable magic words to this

one

now if you hover over the variable

unique alphabets

you can see the type is set and the set

is of the type of a string

so let's write that over here so this is

a set and the data type is for the

string let us print out our unique

alphabets so here we can say I simply

want to print out

my unit alphabets

let me save it and let us try to run

this file and here we have all of the

unique alphabets

so let me take this a little up

so inside our word of abracadabra

the alphabets of c d a b and R all of

this alphabets are unique

let us go back let's try one more time

and this time let us use a sentence so

we can create a sentence like this the

big blue sky and the big blue ocean and

let us see the unique alphabets so I can

reuse my variable of unique alphabets

and this time let us create a set from

our sentence and let me copy and paste

this line

right over here let us run the file

and this time we have an output so all

of this alphabets are unique inside our

sentence

but what happens if you want to check

the unique words instead of the

characters let us see how to do that the

first thing that we would need to do is

we would want to convert our sentence

into a list of words

so let us see how to do that first let

me create a variable called as my word

list

and we can simply split our sentence by

using an inbuilt function by the name of

split

so we can say that I want to split my

sentence now if you see the type of

sentence is a string right

so on a string you have a method called

as

split

so this is going to return a list of all

of the words inside the sentence let us

try to print it out on the next line so

let me say

my word list

is my variable of

word list let us try to run this file

so here you can see we have the list of

all of the words inside the sentence so

the next step is to actually create a

set out of our words list and once we

create a set then we can know all of the

unique words inside our sentence so

let's do that let me put up comments in

that we need to extract the unique words

let us create a variable called as

unique words and we simply need to

create a set out of our word list

let us try to print it out

so here I can say

my unique

words

and the variable of unique words let us

try to run this file

so here you can see the unique words are

big Ocean Blue Sky the and and also one

more thing that I want you to note that

at the beginning and at the end we have

the curly brackets so you can see right

over here

for the beginning we have a curly

bracket and at the last we have a curly

bracket so this symbolizes a set in the

dictionary we had key and value pairs

inside curly brackets but for a set we

only have values

so let us go back

so this time zortans they are really

impressed and they want to see if we can

add a couple of more words to our set

so let's see how we can try and update

our set so what we can do is let us take

the existing set for our unique words

and we can say that we want to update

with the new values and here we need to

pass an iterable that means you can pass

a list or a tuple or any other data

structure which is iterable

so let me paste some values right over

here so let us see if we can update with

the new values of big blue and Sky let

me copy this line and let me

paste it right over here and let me try

to run this file

now if you see nothing is happening

this line and the line before that

they are exactly the same now what's

happening

no sense set is all about being unique

we can't add the existing values to the

set if you go back to our code big blue

and Sky these words are already existing

inside our set so nothing is happening

let me put up a comment if you try to

update your set with existing values

nothing is going to happen

now let us try to update with some other

words which are not there inside the set

so I can say my unique words

I want to update with the new values and

this time I want to pass the value of

green and grass

let me copy this

paste it right over here now let us try

to run our file and this time you can

see we have the words of green and grass

inside our set let us go back and let us

see what's happening next let me put

some comment right over here saying that

something does happen

now what happens is zortens they don't

like the word of grass now let's see how

we can remove the word of grass from our

set so we can simply say that from my

list of unique words I want to remove

and I want to remove the element of

grass

and again let me copy and paste all of

this

and let us save and let us run our file

and you can see that this time we have

removed the word of grass from our set

let us go back now I just wanted to let

you know that you can do a lot of other

operations on sets such as your union

and intersections and so on but I would

not be covering all of those inside this

tutorials now let us see how we can use

data structures for our game so behind

the scenes I've created a new file

called as game saves button 2 and this

is the file and I have also pasted a

couple of comments right over here

so this time what is happening is the

war is just getting more intensified

this time the army of Thanos is also

arriving and since it's going to be a

very intense fight

our program will automatically choose

superhero and the super villain and our

Avengers have exactly three chances to

defeat Thanos now this time since we

have already seen data structures

we are going to create a nice data

structure for our characters but first

let me go to my old file inside my

folder number zero three

and let's copy a couple of things from

here

so

let me copy from here

till my last message

let me go back let me collapse my

sidebar

and let me paste it right over here

so this is our current file now let's

get started this time we are going to

define a nice structure for our

characters you have seen that our

character has an attack power and Thanos

had life but this time our super

villains are also going to attack our

superheroes so all of the characters

will have a property of life as well so

let us see how we can do all of these

things let me create a constant and let

me call it as Iron Man

and the most ideal data structure would

be additionally now since with

dictionary we can have the key and value

pairs it makes much more sense to use a

dictionary right over here

the first key would be for the name of

the character

so in this case the name is Iron Man

the next key would be for the attack

power so I can say my

attack power

the value is of the type of an integer

and the attack power of Iron Man IS 250

the last key and value pair would be for

the life so you can say I want to have a

key for my life let's give him a life of

say

1000 now let us see how we can Define

the types for this one now obviously

Iron Man is a dictionary now if you see

the structure of our dictionary

all of the keys are strings but for the

values sometimes we have a string and

sometimes we have an integer

so let us see how we can Define the

types over here

since all of the types the keys are

going to be string so we can see the key

is of the type of a string and the value

we can see it's either going to be a

string or it is going to be an integer

so this is how you define the types for

our Iron Man

now since this is going to be a constant

we can wrap all of these things inside

final so let me do that

let me put my brackets and let me say

final but what happens is typing all of

these things again and again becomes so

boring so what we can do is we can use a

small trick and that trick is called as

in typing Alias so what I can do is let

me just cut out all of these things and

here let me create a new variable called

as character and I can Define the type

right over here so what I am doing on

line number 20 is I'm defining a new

variable called as character and I am

assigning the type to it so what I can

do on line number 22 is I can simply say

that Iron Man is a constant of the type

of character

so this is going to save us a lot of

typing let me put up some comments over

here

now let us go down and let's create some

more superheroes so let me just paste it

right over here so what I've done is I

have created three more superheroes one

is Black Widow Spiderman and Hulk and I

have also assigned values to each of our

superhero let me put a comment right

over here so this is for our superheroes

similarly let us also do for our super

villains so let me put a comment right

over here

so I can say that let us Define a super

villain called as Thanos

the type would be final and we can say

character right over here

and let's create our dictionary so we

can say the name is Thanos the attack

power is 1500 and life is 1500 similarly

let me create some other supervillains

as well so I've created a couple of more

super villains One is Red Skull and the

last one is Proxima now since we have a

structure for our character

we don't need all of these things so let

me take it out the next thing is let us

create a list of all of our superheroes

and all of our super villains

so let me put up a comment and let us

create a list for our superheroes

and we can say this is going to be a

list so I can put my square brackets the

first is our Iron Man next is

Black Widow next is Spider-Man and last

is the Hulk now let us see how we can

Define the typing for this one so

superheroes is a list

and the type is of the character let us

go down and let us create one more for

our supervillains as well so I can say

that my villains is again going to be a

list of my

character and let us create a list right

over here the first is our Thanos then

is for the Red Skull and losses for

Proxima let us go down and let me put up

a comment right here that choices and

attack numbers all of this are our

helper variables it takes out and let me

take this out as well that's not

required now let's go down

and let us see how we can implement the

actual attack

the last time we had used a while loop

this time I want to show you a for Loop

and I also wanted to show you a new

keyword that keyword is called as range

so first let me type and then I will try

and explain what's happening so I can

create a for Loop saying that for attack

in my range of 3 now let me try to

explain what's happening if you remember

we have a constraint that Avengers can

attack only three times and that's what

I'm doing right over here let me open up

my IPython shell and let me try to

explain over there

so range is an inbuilt keyword inside

python

so we are typing as for my number in my

range of 3

I simply want to print out my number

let's see what kind of output we are

getting

so we get the output of 0 1 and 2 and

after we get to our for Loop is going to

stop so that means our Loop ran for

three times this was the first this was

the second and this was the third time

so this is where I am trying to

implement our constraint of Maximum

three attacks

so here our for Loop will run for

exactly three times and then it will

exit let's see what we can do next now

since this is a very intense fight our

program has to choose a superhero and a

super villain randomly so let's see how

we can do that first let me put our

Command and here again I want to show

you one more function which is built

into Python and that is called as random

integers so what's going to happen is

for each iteration of our for Loop we

want to choose a superhero and a super

villain and remember our superheroes and

supervillains are listed and lists have

indexes right

so for Iron Man the index number would

be zero for Black Widow the index number

would be one Spider-Man would be index

number two and Hulk would be index

number three

so what we are going to do is we are

just going to generate a random index

number and we are going to take that

Superhero out of our list of superheroes

and similarly for our villains as well

but before we can generate an random

integer first we need to import that

functionality

so here I can say from my package of

Random I want to import something which

is called as random int let us go down

and let us see how to use this let me go

to my iPath and shell and let me give

you a small demo right over here here I

can say from random I want to import my

random integer

and let us try and see the output of

random end

and let us pass the values of 0 to 10.

so this time we get an 8 let us try to

make it one more time this time we have

a three this time we have a seven

so you see that we can randomly generate

different numbers so let's see how to

use this inside our program

so here I can say that for each

iteration of the for loop I want to

generate a random integer and my

starting index would be 3

and my last index would be 3

now let's see why I'm writing 3 over

here the first time we want to generate

a random integer for our hero so let me

create a variable called as

hero index and assign the value right

over here now let's see what's happening

if you see our list of superheroes we

have four elements that means the length

is 4 but the index number is 3 that is

why I am writing 3 right over here let

us generate a random integer for our

billion as well so let me create a

variable called as

villain index and I can use the same

function random integer I want to start

at 0 and at the max I want to have 2

that's because the length of valence is

3. now let's see what we can do next

so what we are doing on line number 54

and 55 is we are just generating a

random integer number

the next thing is we can use that

integer number to get a superhero from

our list so let's see how to do that

so let me put up a comment saying that

we have a couple of more helper

variables and I can say that I want to

get my current superhero

from my list of superheroes and the

index number is the randomly generated

number which we have stored in the

variable of hero index so that means on

line number 54 we are just generating an

index number

and online number 57 we are using that

index number to get a superhero from our

list of superheroes let us do the same

thing for our villain as well

so here I can say that my current

villain would be from my list of

villains from the index of my villain

index

let us try to print out the values and

see what's happening

so here I can say I want to print out my

current superhero

and I want to print out my current

supervillain

let us run this file so here is the

output

for the first iteration we have Iron Man

and Proxima for the second iteration we

have black widow and red skull for the

third iteration we have Iron Man and

Thanos so you see for each time we have

a different pair who is going to attack

each other and that's what we want so

let us go back to our program

let us display a nice message right over

here

so let us see I want to print using my

formatted string

the first thing I want to display is my

attack numbers I can save my attack and

let us also display the names of our

superhero and our super villain who are

going to fight so I can say inside my

curly brackets that my

superhero and let us also get the name

now remember that current superhero is a

dictionary and we can get the values by

using our key and values and tags so I

can say that I want to get the value of

my key of name and then we can say that

is going to fight with here we can

display the name of our super villain so

I can say my

current villain and I want to retrieve

the value from my key of name let me

save it

let us take out this line it's not

required now and let me try and run this

file

so this time we have an output for the

first attack we have black widow who is

going to fight with Red Skull

the next time we have black widow again

and she is going to fight with Thanos

the last time Spider-Man is good fight

with Thanos what we can do right over

here is instead of displaying 0 we can

start from one so let me go back and

here I can say attack plus of one let me

save it and let me try to run the file

so this time we have a much better

output let us go back

so here before we can attack we also

need to calculate the total life so

what's happening is for each iteration

of our for Loop we have a superhero and

you also have a villain so we need to

calculate the life of our superheroes as

well as our super villains for that we

would need two more variables so let me

go right over here

and create two new variables right over

here

so the first one would be for our hero

life and initially give it a value of 0

the next one is for our villain life

again let us set it to a value of zero

now we don't require this variables

because remember we are using the

function of range so we can simply take

them out it's not required

let me take it up

let me save my file and let us go down

right over here

let me put up a comment saying that

first we need to add the life for each

iteration so I can say for my life

and for each iteration what I want to do

is this is my life of hero and I want to

add the life of my current hero to my

hero life for each iteration so I can

say my hero life plus my current hero

and from my current hero I want to get

the value of his life let us do the same

thing for the life of villains as well

so I can say my villain life is equal to

my villain life plus my current villain

and I want to get the value for life

now what we can do is we can also use

our shorthand syntax that means we can

take this out and here we can say plus

equal to so this means the exact same

thing let me do it for the villain life

as well so let me take it out plus equal

to now you see that we have an error

right over here but for now just ignore

this error all of this errors will go

away when we Implement these characters

by using classes now let's see how to

implement the actual attack so let me

put up a command now what is going to

happen is our villain is going to attack

the hero so what we need to do is we

need to minus the attacking power of the

villain from the life of the hero so let

us do that right over here so I can say

that my hero life would be my hero life

and minus I want to have the attacking

power of my villain so I can say my

current villain I want to get the attack

power we can use our shorthand syntax

right over here as well so here I can

take this out and I can say minus equal

to let us do the same thing for the

villain life as well so here I can say

my villain life minus equal to the

current superhero and I want to get the

attacking power of my superhero

now let's see what to do next so this

attack is going to happen for three

times and after the attack is done we

need to see if we are willing or we are

losing so once we are out of the for

Loop let us print a nice separating line

so let me put up a command and let us

print a nice separating line so I can

say equal to multiplied by 70. so what

this is going to do is it is simply

going to repeat the string of equal to

70 times next let me take it a little up

and let me put up a command so this time

we want to check if we are winning or if

we are losing and the logic for this is

very simple if the life of the heroes is

greater than or equal to the life of the

villains that means the Avengers have

won so let us do that right over here so

we can say if the hero life is greater

than or equal to

the villain life

then we simply want to print our win

message

else that means we have lost so let us

print out the Lost message that's it let

me save my file and let me try running

this amazing we have a nice output so

here you can see that we attacked three

times the first time Spider-Man attacked

Proxima the second time again Spider-Man

attacked Red Skull and the third time

Black Widow attacked Red Skull but

unfortunately Thanos killed Avengers and

he has captured zorton let us try

playing one more time so let me play one

more time okay so this time we have

saved it's so amazing

welcome to the last video in this

section

now this is an extra video and I want

you to come back to this video after you

learn about classes

I am putting this video right over here

just for the sake of completeness

in this video we are going to learn

about enums so behind the scenes I have

created a file called as choices and let

us see what's going to happen now elams

are the perfect data structures whenever

you want to create multiple choices or

varieties so let's see how to do that

the first thing is we need to import

enum so we can say from my package of

enum I want to import enum and let us

Import Auto also so I'll explain what is

it all about suppose you wanted to

create choices for different pizza sizes

so let us see how to do that so I can

say my class

of my pizza size now this inherits from

my class of enum

let me put up some documentation

and here we can say that my first choice

would be for a small size

and we can assign it a value of 8

the next choice could be medium it could

be at 10 inches then we have one more

for large

it could be 12.

so what this simply means is we have

created an enem of pizza size and we

have three choices small medium and

large

now let us see how to work with this

enum so let me go down

let us create a variable of choice and

suppose the choice of the pizza size

could be medium

so we can say from my enum of pizza size

I simply want the medium value

let us print out the value on the next

line so I can say print and I can say

one order four now in order to get the

value we can say from my enum of choice

I want to get the value and then I can

write inch pizza so let me save this and

let me run this file and we have the

output one order for a 10 inch pizza so

let us go back

let us create one more enum for colors

of a t-shirt so I can make a class and

the class is for color this also

inherits from my enum

let me write some documentation this is

for my t-shirt varieties and here I can

say that my first choice is red and I

can give it a value of red the next

could be blue and green let us also try

to print out the values

so let me go right over here and let me

copy this line let me go down let me

paste it right over here and here we can

see one order for my colors suppose we

want to have Green Dot we can get the

value right over here

and this becomes my t-shirt

that's it just save and run your file

and here we have the output one order

for a green t-shirt let us go back let

us create one more enum there may be

times we don't require a value

let me show you one example let me

create a class called as role we can

inherit from enum now suppose you want

to create different rules for your stuff

it could be a associate it could be a

supervisor and so on and you don't want

to assign values to them but what we can

do is we can automatically give them

values let us see how to do that

suppose the first rule is for an

associate

we can assign it a value by using our

imported function called as Auto now

remember on on line number eight we are

importing Auto and that's what we are

going to use right away

so what this Auto is going to do is the

first time it is going to assign the

value as 1 the next time it is going to

assign the value of 2 so suppose we have

one more role for a supervisor

and we assign it to Auto so this time

the value of supervisor would be set to

2. suppose we have one more rule for the

manager

now this time the value of manager would

be 3 let us try and print it out so I

can say print from my in above role I

want you to go to my manager and I want

you to print the value

let us run this file and here you can

see that the value of manager is

automatically set to 3.

welcome to a brand new section this

section is all about functions

till now we have used inbuilt functions

such as print and in this section we are

going to learn how to create our own

functions but before we can create our

own functions I wanted to talk a little

bit about functions the main goal of a

function is for your data processing you

have some sort of an input this input

goes inside your function your function

processes the data and finally we would

like to have some sort of an output

so this is your ideal function

you take an input you process it and you

give back an output but in real life

it's not so simple

so let's try learning more about

functions so let us go back to our code

editor behind the scenes I've created a

folder called as zero five functions and

this is the file called as greater dot

Pi let us see what's going to happen

right now so this is a very simple

program for greeting

and the people in shortened they greet

each other by saying Zola

and Lewis wants to write a program where

he can greet his friends in Zola so

let's define a function and the way to

define a function is by using the

keyword called as def followed by the

name of the function so we can say the

name of my function is greda and this

function accepts one argument and we can

call that argument as anything in this

case I am going to call that argument as

name and then you put your colons and

inside of this you have to write the

body or the logic of the function you

can also write some sort of a

documentation and you can do that by

using your triple quotes so you can say

that this function greets

Zoltan let us go to the next line and

let us print out a greeting message so

what we can do is we can simply print

out a message we can use our formatted

string and then we can say Zola followed

by the name now let us see how we can

Define the types for this function

we can say that this function of Grita

accepts one argument and we can Define

the type right over here so we can say

my argument has to be the type of a

string and since this function returns

nothing so we can say that this function

is going to return

none let's create one more function

called as main so we can say this is my

main function

this function does not accept any

arguments and this function returns

nothing

here we can create a list of all of the

friends so I can create a variable

called as

friends and let me assign some values to

it so these are all of the lists of the

friends and we want to greet all of

these friends

we can create a very simple for Loop and

using the for Loop we can call this

function let me show how it is to be

done but before that let me add the

types for this as well so friends is a

list and the data type is a string or

the next line we can say that for my

friend in my list of friends for each

iteration I simply want to invoke the

function of greeter and pass a name so

what we can say right over here is

for each iteration I want to call the

function of Greater and I simply want to

pass the friend each time now the reason

why we have created a main function is

just by sake of convention we always

like our programs to start with the

function which is named as Main

now let us see how to use this function

you need to invoke or you need to call

this function in order for our program

to run so on the next line we can invoke

our main function and the way to invoke

is by just writing main along with the

brackets

so whenever you write the brackets that

means that you want to invoke the

function if you just write like this it

means an assignment but if you want to

run that means you want to put the

brackets so let me save this and let me

try to run this file

and here we have the output so we have

Zola CC Zola Rocco and so on

we just saw how to write a function and

in this video I'll show you how we can

write a slightly better version of our

greater function

first let us go back to our diagram

now in an Ideal World We would like to

take one input and we would also like to

give back an output

but let us have a look at this function

called as greeter we are taking an input

but we are not returning an output so

let us see how we can create a better

version of this so behind the scenes

I've created a file called as beta

greater dot pi

and let us get started with this one let

us go back to this file and let me copy

all of these things so let me copy right

from here

let me go back to this file and let me

paste everything right over here let me

collapse my sidebar and this time let us

try and return something so instead of

just printing Zola followed by the name

we can actually return this value so let

me take out the print statement the

bracket as well and here I can say that

I want to return my new string so what

this function is going to do is it is

accepting one argument and it is

transforming that string into a greeting

message and we are returning that string

as well now since this function is

returning a value we also need to change

the type over here and the type is

string so what happens is when we were

using the print function we were causing

something which is called as a side

effect but this function is a more pure

function it takes one input and it gives

back one output now it is the

responsibility of the color function of

how to handle the written data let me

tell you let me show you what I mean by

it but first let me write some comments

so let me go right over here and put me

some comments

saying that the call function is

responsible for the written data and

here I can say that

this function transform the original

string to something useful and let us

change the documentation as well so this

function is going to return a greeting

message

now let us go down and let us see what's

happening on line number 25 we are

invoking the function of Grita and our

main function is responsible for calling

this function

nut means conceptually you can call the

main function as your caller function

that means main is calling greater and

now it is the responsibility of your

caller function that means it is the

responsibility of your main function

of how to handle the return values

now this pattern is very useful

what if you wanted to check for the

written values

you can check for the written values and

you can do something with it let us have

a small example right over here let me

put up some comments over here now

suppose Lewis finds Chico to be queued

so what we can do is we can say for each

iteration

if Chico is in the output of my function

of grida so greater and friend

now remember our function of Grita is

returning back a string

and if that string contains Chico then

we can't print out something like this

so here we can say that print is cute or

else we can simply print out the message

as it is so here we can simply print our

glitter and friend

so what's happening is for each

iteration our function of Grider is

returning back some values and that

value is Zola followed by the name of

the friend so for the first iteration

the return value is Zola CC the second

time is zolaroko and the third time is

Chico and so on

but since the function of gritter is

returning as data we can handle that

data in multiple ways so first let me

run this file and then let me try and

explain you again one more time

so here we have the output that Chico is

cute

so what's happening online number 27 is

let me open up my IPython shell

so here I can see if Chico in Sola Chico

then we have the answer as true

if we say something like this

Lewis in zorachico the answer is false

and that is what we are doing on this

line

suppose the output of this function is

zorachico that time we simply want to

print out a message saying that Chico is

cute so basically what we are trying to

do is our caller function is handling

the response of glitter in multiple ways

let's have some more practice with our

functions for this video Behind the

Scenes I've created a file called as

weight dot pi and let us see what's

happening

now since Lewis is staying in zorton

gravity Works differently over there and

this time we want to calculate how much

you wait in zorton and this is the

formula to convert the Earth's weight to

salt and sweet let me go down over here

and let us Define a function which is

called as

calculate weight

this will accept one argument which you

can call as weight

we can Define the type as a float

because your weight can have decimal

values so let me write the type the

float and this function will also return

the float value

inside the body of the function we can

have one single return statement and we

can say that I want to return and here

we can calculate the weight by using the

formula so we can see

the weight plus of 32

divided by 8.

now let us try and print out the weight

so let me write a very simple print

statement

we can use our formatted strings so you

can see

U way and inside the curly brackets let

us invoke the function so I can say

calculate weight

and for example let's pass 60 kgs

and then you can see kgs on

zorton let us say this and let us try

running this program

so here we have the output saying that

you weigh 11.5 kgs on certain

let us go back I wanted to show you one

small trick what happens if we want to

display exactly two decimal places or

three decimal places and so on

the way to do that is right over here so

here we can say that

I want to display my two decimal places

for the float

receive a file and drive Renegade for

the last time

and here we have the output so you can

see we have two decimal places

let us have a look at the next example

this time I am working on this file

called as fly dot pi and let's see

what's happening this time now we just

saw that gravity insulting is much less

as compared to Earth

so what happens is if you weigh 15 kgs

or less then you can actually fly on

certain

so what Lewis wants to do is Lewis wants

to see which of his friends can fly so

let's see how to work with this one

and there is one very important concept

which is called as single responsibility

principle

and let us see what do I mean by this

principle in this video

so as a convention let us create our

main function first and from there we

will create functions as we require them

so let me Define my main function so I

can say my Define and Main this function

does not take anything and it returns

none so I can write none over here now

inside of this function let us create

the friends of Lewis so let me create my

dictionary of friends and let me assign

some values to it so here we can see

that we have a couple of values cc is

being 54 Rocco is being 88 and so on

let us also write the types for this one

so friends is medicinally

the keys are strings and the values are

integers what we can do over here is

instead of just declaring integers we

can also write a float so in case if you

have a decimal value in the future we

can easily handle it if we declare it as

a float

next let us create a function called as

flying friends and see which of the

friends can fly so I can say my function

of flying friends

and we just have to pass the dictionary

of friends

now let us go up and let us start

creating our functions

so as you can see there is one small

constraint and that constant is you have

to weigh 15 kgs in order to fly so what

we can do is we can create a constant

so let me call the constant as maximum

flying bit and we can assign it a value

of 15 let us also Define the type for

this one so since this is a constant it

has to be declared as final

but before we can write final we need to

import it

so here I can say that from typing I

want to import final and here we can use

the keyword of final so our maximum

flying weight is a final and the pipe we

can Define it to be a float as well now

let us go down and let us create the

function for flying friends so here we

can say that Define

flying friends this takes one argument

let us call that argument as friends

and and as you can see on line number 28

we are passing the argument of friends

and the type of friends is this one is

dictionary string and Float so let me

copy this right from here and let me go

back to my line number 18 so we can

Define the type right over here so this

friends is going to be a dictionary and

this function is not going to return

anything so I can just write none let me

also write some documentation for this

function

so what this function is going to do is

this function is going to display all of

the flying and non-flying friends now

remember that this function is creating

a side effect this function is not going

to return anything that's why we can say

that this function creates a side effect

now let us go down and let us Define the

body of this function so here what we

can do is we can use a for Loop to

iterate over the friends and see which

of the friends can fly or not

so I can see for the name and Earth

weight in the dictionary of friends

we want to get all of the items now

remember that the keys are the names so

if you see right over here the key is

the name that's why I'm naming this

parameter as name and the values are the

weight so that's what I'm calling as

Earth weight right over here

so for each iteration the first thing

that we want to do is we want to

calculate the weight in certain so let

me create a variable called as

zort and weed and here we need to

calculate but for calculation let us

create another function called as

calculate weight so let me write the

function first and then we will create

it so calculate weight would be my

function and I need to pass my Earth

weight to it now let us go up and Define

this function

we have defined this function in our

last video so let me open up that file

right over here so the file was called

as weight dot pi and I just have to copy

this go back to my current file

let me collapse my sidebar and let me go

to the top

and we can paste it right over here let

me also add some documentation

so what this function is doing is this

function is calculating your weight in

zorton

so this is an example of data

transformation it is taking a weight in

kgs and it is returning the same weight

but in short and in weight you can also

say that this function is a pure

function since it takes one input and

gives back one output now let us go back

to our function of prime friends

so on line number 36 we are able to

calculate the weight in zorton

now the next thing to do is we just need

to check if we can fly or not so here we

can say that if and here we need one

more function to check if we can fly or

not so first let me write it and then we

will create the function we can call

that function as can fly

and we need to pass the weight in

shorten so let me pass my zorton weight

now let us go up and create this

function as can fly so just let me go

right over here

and I can Define my function as can fly

this function accepts weight and the

type would be a float and this function

is going to return a Boolean value

let me write some documentation for this

as well

so the only responsibility of this

function is it is going to see if you

can fly or not that's why we have the

written value as the Boolean

so this function is also a very nice

example of data transformation

so you can see that we are accepting a

data which is of the type of fluid then

we are transforming the data and we are

transforming from a float value to a

Boolean value

let us see how we can write the body of

this function

now the body of this function is very

simple we just have to say that we have

to return

if my weight is less than or equal to

our constant of Maximum flying weight

so what we are doing is we are basically

composing functions where each function

has only a single responsibility for

example this function of can fly the

only responsibility of this function is

to say you if you can fly or not

now the only responsibility of this

function calculate weight is just to

transform the weight from the Earth to

the Sorting in weight now let us go back

on line number 47 we have created this

function can fly now this function is

retaining a bull value so we can use it

with our if and else blocks let me take

it a little up

so here we can see that if the friend

can fly then we can simply print out a

nice statement saying that here we can

put the name and then you can display

the weight in zorton and then we can say

kgs can fly on Jordan

else that means the friend can't fly in

that case let us print out another

statement saying that

the name followed by the certain weight

can only walk on zorton let us save it

and let us try running this file but

before we can run this file we have to

invoke our main function so let me go at

the bottom and here I can say that I

want to invoke my main function so I can

say mean followed by our brackets let me

save it and now let's run this file so

here we have the output

CC the weight is 10.75 in shortened so

she can fly but for Nico Nico weighs

16.75 so he can only walk on zorton and

similar with zico as well

so getting back to our program what we

have done is we have seen how to create

functions which can have a single

responsibility principle now let us

understand one more very important part

of functions and that is how we can work

with variable arguments and variable

keyword arguments let me create a file

over here and let me name it as

arguments and keyword arguments that

means args and kwarts for short

let me put up some comments

the first thing that I want to show you

inside this program is all about

unpacking first we will see how we can

unpack a couple of data structures in

Python and once we understand unpacking

then we can move to the variable and the

keyword variable arguments so the first

thing that I want to show you is all

about unpacking suppose you have a tuple

like this Lewis and Zappa you can unpack

the values of this Tuple in a single

line so on the left I can say that my

Lewis would be my first name so I can

write fname

and Zappa would be my last name so I can

say l name

and that's it this is called as Tuple

unpacking Lewis would be assigned to

this variable and Zappa would be

assigned to this variable just to

confirm let us print out the values and

see what we are getting

and you can see we are getting the right

values

now let's see how we can unpack a list

suppose you have a list like this and I

want to unpack this list but while

unpacking I only want the first value

inside a variable and I want all of the

rest into a separate list

we can do this by using a special syntax

so I can say first then I can say star

rest of the values is equal to my list

so let's see what's happening the first

value that means cc is assigned to this

variable and Roku Chico and Nico inside

a list is being assigned to this

variable we can name the variables

whatever you want let's try to print out

the value and check if we are getting

the right output or not let me run the

file

and here you can check the output

let me take it up

the first value is CC and that's what we

are getting right over here rest is a

list of all of the remaining values

Rocco Chico and Nico that's what we have

right over here next let us see how we

can unpack a dictionary suppose we have

an existing dictionary like this so this

is for specifications

type is dynamic optional static typing

and it is found everywhere let us create

a new dictionary and let us try to

unpack the existing dictionary into it

so let me call the new variable as Lang

and I can see

name is python

now I can unpack the entire dictionary

right over here by using a very special

syntax so I can say star star

followed by the name of the dictionary

that we want to unpack so the name of

the dictionary is specs

that's it let us print it out and see

what we are getting

and as you can see we have the right

dictionary so the name is Python and

here you can see we have unpacked the

entire other dictionary as well now

let's go back to our program now let's

try to think of a situation where we

would use this functionality suppose we

have a function and this function has to

accept unknown number of arguments at

that time we can use this functionality

now suppose we have a function called as

unknown friends

and we don't know the number of friends

that we are going to get in the

arguments so here I can see that we are

going to receive variable argument and

that variable argument I can declare by

writing so star and the name of the

variable as a convention whenever we are

getting variable arguments we name that

variable as args now let's go to the

body and see what we can do with this

one let's try to Simply print out the

values so I can say for

my friend in my arguments

I simply want to print out my friend oh

it has to be friend not friends so

this looks good

now let's see how we can add types to

this function

by default python is going to pack all

of the variable arguments inside a tuple

so essentially what's happening is this

argument is going to be of the type of

Tuple and since this function is not

returning anything this is going to

return

none let us invoke this function on the

next line so I can say my unknown

friends

and here let me pass a couple of friends

so I am passing an unknown number of

friends

now adding type in to this variable it's

a little tricky because by default RX is

a tuple but we can say this Tuple is of

the type of string and that's it this is

how we would add type hints to our

variable arguments this simply means

that our variable of args is a tuple and

the data type inside the Tuple is of the

type of string

let us try to save this file and let me

try to run it

and we have the right output we can see

all of the friends right over here so

all of these friends are coming from

this line

right over here line number 33 now

similarly we can also accept keyword

arguments now what do you mean by

keyword argument first let me write the

program and then I will explain what

exactly I mean by a keyword argument so

let me put up a comment

so suppose we have a function called as

unknown product and this function

accepts a variable keyword arguments so

that can be denoted by two stars and by

convention we always name the variable

as

kwarjs that means keyword arguments now

let's see what we can do inside the body

of this function

now what python is going to do is it is

going to pack all of the keyword

arguments in the form of a dictionary

so we can simply print out the key

and the value

from our keyword arcs

dot items

and let us print it out I can also write

this in a short form V for value and K

for for the key and here I can simply

say I want to print out

my key

and

my value

now let me try to invoke this function

by passing keyword arguments so this is

the place where all the things are going

to get cleared so I can say my unknown

product and the keyword arguments would

look something like this

name is equal to Pizza price is equal to

3.99 topping is equal to olives and so

on

so you can see all of the arguments are

in the form of the key and the value the

key and the value

so that's why we call this variable as a

variable keyword argument

by default it's always going to be in a

form of a dictionary now let's see how

we can add types to this one

now adding types for this one is really

very tricky

if you see our keyword arguments the

first one is a string the next one is a

float

the last one is a Boolean so we don't

know what kind of argument we can get

inside the dictionary

so this time what we can say that the

values can be anything so I can write

the type as any and let me import any

from our typing Library

so on the top I can say

from typing

I want to import any so what this really

means is since we don't know the value

of the type of the dictionary we are

going to accept any kind of a value and

since this function is not going to

return anything we can say that the

return type is none let's try to run our

program and here is output let me just

take it up

so for the variable keyword arguments we

have name price toppings and extra

cheese

and that is what we have right over here

now let's see how we can combine both of

these Concepts together

that means let us combine the variable

arguments and the variable keyword

arguments in a single function

so let me put up a comment over here

suppose I have a function called as

invoice

wherein I am supposed to generate an

invoice for a product but I don't know

what is the product I don't know the

characteristics of the product then how

do I handle this situation so let's see

how we can Define the function

the first argument can be the name of

the product so I can simply write as

product

the type is going to be a string

after that since we don't know what the

product is all about or the different

varieties of the product we can simply

write that we can also accept a variable

argument right over here now suppose the

user gives an argument in the form of

keywords we can handle that situation as

well by using our keyword argument so we

can say double star

keyword and args

and this time let us simply print out

our product arguments and our keyword

arguments so I can say I want to print

out my product let me copy and paste

then I want to print out my arguments

then I want to print out my keyword

arguments now since this function is not

good written anything so I can say that

it's going to return none

now let's try to invoke this function so

let me go down over here I can say

invoice

my product would be

sneakers

now suppose the sneakers are available

in black and white color so I can give a

variable number of arguments so I can

say

black

and white

we can also Define a couple of keyword

arguments over here suppose we know the

name of the brand so we can say my brand

is equal to me bits Nike

the category would be my Air Jordans

price could be

899.99 dollars

in

stock would be a Boolean value and let

me assign it a value of

false these stickers are not in stock

let me save my file so as you can see my

formatter which is black it

automatically formats my file now let me

save the file and let me run it for the

last time and here we have the output so

let me just

take this down

the product is our stickers so that's

what we are getting over here now this

arguments by default this is going to be

a tuple so that's why we have a tuple

over here and the keyword arguments this

is always going to be packed as a

dictionary so that's why we have the

last line as a dictionary

there is one more important concept that

I want to cover and after that we can

move on to our game

this concept is called as your local and

Global variables

for this I want you to create a new

folder right over here

and I want you to call that folder as

scratch pad

you can utilize this folder for adding

small programs and for doing small

experiments I always create and use a

scratch folder let's create one file

inside of this folder

and let me name it as

variable Scopes let me put up a heading

right over here so we are going to talk

about global and local scopes for that

let us try to understand One More

Concept

all of these files that we are creating

these files are technically called as

modules

so in the world of python all of these

files are modules now let's go back to

our file

inside our module if we declare a

variable like this num is equal to 10

that means this variable has a global

scope that means anyone inside our

module can use this variable any

function or any functionality or any

variable inside the module can use this

variable so let's create a function

called as print Global num

and this is simply going to print out

our number

let me save it and let me invoke it

right over here so I can say print

Global number we can do a slight

improvement over here we can use a

formatted string and we can say

Global number is and this is my number

now let us try to execute this file

and we have a output saying that the

global number is 10. now let us see what

happens if we declare one more function

and if you declare the same variable

inside that function so let me create a

new function by the name of

print num

this does not accept anything and inside

this function let me assign a value of

20

to the variable of num

and let us try to print out and see what

values we are getting over here so I can

use my formatted string my local number

is the now

let us invoke this function and let us

see what we are getting

let me

run this file

and here is output

now watch closely what's happening

on line number eight we have declared

that the num is 10.

and on line number 16 we are saying that

num is equal to 20.

now what happens is whenever python sees

we have the same variable

python is going to create a new variable

called as num and this variable is

available only inside our variable of

print num and that's it

so this is also called as variable

shadowing now please keep in mind that

this variable shadowing can introduce a

lot of bugs and this bugs can be really

difficult to debug

just to demonstrate let me go right over

here and let me say I want to print my

num

let me save it and let me try to

run it

so here you can see the global num is 10

but on the second line the local number

is 20. and this 20 is coming from our

line number line number 17 so this

variable is accessible only inside this

function and it is not valid outside

outside only this number that we have

declared on line number eight is visible

that's why we are getting the output of

10 right over here now let us see how we

can access This Global variable and how

we can do some operations on it let us

create a new function by the name of

increment number here we simply want to

increment our number by 2 so we can say

my num

plus equal to 2.

but what's happening right over here is

python is seeing that we are doing some

sort of an operation on num so python is

going to create a new variable we want

to increment the global num

so we have to explicitly tell python

that hey python I want you to use

the global num

and that's it let me put up some

comments so I have a comment for this

one and this one is my function or my

local scope and this one for my Global

declaration

let me save it now let me increment the

number and then we can print it out so

let me say that I want to increment the

number

let me save it and let me try to run it

so this time you can see the global

number is 12. now let's see one more

behavior of the global number so here

let me create a new function

by the name of increment my local num

and here I am saying that my new number

is is equal to my existing number

plus of 10.

and let me print out my new number right

over here now can you tell me what is

going to be the output of line number

13. well we don't have to guess we can

simply run the program and let's see

what output we are getting so let me

invoke the function right over here so I

can say

my new function I want to invoke it let

me save the file and let me run it

so as you can see I am getting the

output as 22. let us see what's

happening right over here so as you can

see on land number 29

the value inside num is 12 you can see

that's what it is and since we are

creating a new variable and we are

trying to assign value to the new

variable

python is taking this num from the

global scope

in the global scope the value is 12 and

we are trying to add 10 that's why the

new number is 22. in the next video we

will go back to our game and let us see

how we can divide all of the logic into

small functions

now let's see how we can use functions

inside our game so I want to do just

copy this file from folder number four

to our folder number five

and I want to just rename this file from

number 2 to number three

and that's it and let me also change the

documentation for this module in this

video we are going to concentrate on two

main things the first concept is called

as dry that means don't repeat yourself

what this means is whenever we have some

kind of a logic that is repeating at

that time we want to take the logic out

and put that logic inside a function and

we can keep on using that function

wherever we require it the next one is

what I've already shown you this is

called as single responsibility

principle that means we want to Define

our functions in a way that one function

will ideally do one job at a time

let's see how we can do all of these

things

let me go down over here so here you can

see that we have a list of all the

superheroes and all of our super

villains

so what I can do is I can create a

function that will return the list of

all of this superheroes and

supervillains as well now why do we need

to do this the answer is we want to

isolate parts of our program

suppose you are working in a team and

you don't want any other developer to

add or subtract from your list of

characters so that's why we need to have

some sort of an isolation so let us

create a function for superheroes and

supervillains as well let me put a

comment right over here so this block is

going to be for my superheroes let me

Define a function called as get all

superheroes this is not going to take

anything and let me take all of these

things inside my function and since I am

going to return a list of superheroes I

will also cut my line from 51

and I'll put it inside my function

which is right over here

I also need to return my list so I'm

going to use the keyword of return and I

want to return my list of superheroes

now since my function is returning a

list of characters so the return type of

my function would be

like this so this function is going to

return a list of characters till now I

have been using this keyword of final

because I just wanted to show you that

whenever we type everything in capital

that symbolizes a constant and we don't

want to change the value in the future

but these days your code editor and my

pack is smart enough to infer that if we

write everything in capital we can

actually skip writing final so I am just

going to take it out what I can do is I

can just leave Final on this line number

40 just as a reference for you

and let me take it out

right over here and this one and this

one let me see my file if you just hover

over any of the variable you can see

that we have the word of constant that

means my pi and your code editor they

are able to correctly in for that this

is a constant let us create one more

function to get a particular superhero

in this function we can get all of the

superheroes but what happens if we want

to get a particular superhero and

remember this is a list of superheroes

so we can get a particular superhero if

we know the index suppose the index

number is 1 so we can return Black Widow

if the index number is 3 then we can

return Hulk and so on so let's create a

function to return a single superhero

let's create a function right over here

so I can say Define a function called as

get superhero this function is going to

accept one parameter called as index of

the type of integer

and let us see what this function is

going to return

this function is going to return a

character

but what happens if we can't find a

character in that case we also have to

return none

so this function is either going to

return a character or it is going to

return none

let's see how we can implement the logic

let me add some documentation right over

here but before we can get a superhero

we need the list of our superheroes

but that's pretty easy we just created

an entire function for this so I can

just say

that my

superheroes is equal to the function get

all superheroes and that's it we have

the list of all our superheroes now

let's see the logic of getting a single

superhero from the list of superheroes

we already know how to work with indexes

but this time we have to be a little

more careful what happens if we get

index number which does not exist in

that time our program will panic and it

will exit but we don't want this kind of

a behavior

let me go to my IPython shell and let me

show you what I'm talking about

suppose I have a list called as

my characters would be

a b c and d here you can see the length

is 4 so I have four characters so the

length is four but my index number stops

at 3. so this is my index number 0 index

number one index number two and index

number three we don't have a index

number four

now what happens if I say I want to get

characters on my index number 4. this is

going to cause an error let's see what's

happening so as we can see we have an

error and the error is the index is out

of range and we want to avoid this

situation inside our program because we

don't want our program to panic and exit

so let's go back and here we can say

if my index

so if my index is less than the length

of my list of superheroes only then I

can have the right index number so here

I can say I simply want to return

from the list of superheroes the

superhero at the given index

else we have some issue and here I can

return

none because we can't find a superhero

let me just save my file let's do the

same logic for our super villains as

well let me put up a comment these blogs

are for my villains let us Define a

function get all villains

this is going to return a list of my

characters

and let me take all of these things

inside

and then I also want to return my list

so return villains

then we want one more function to get

our single villain so let me copy and

paste this block

so this goes right over here

this becomes from superheroes to villain

and that's it so now we have a way of

getting a particular character and and

how to get a list of our characters now

let's see where we can use this logic

the place where we want to use this is

right over here on line number 98 and 99

here you can see we first generate a

random index and after that we want to

get a superhero given that index

let me use the function right over here

but before we can use this function as

we can see we have a block for the

attack we can create a function for the

attack and we can isolate this

functionality as well so let's start

doing that so let me add a comment

saying that this is the main Logic for

the game

and I can define a function called as

attack

this is going to return nothing so I can

say none

and let me take all of these things

inside

my function so all of this things goes

inside my function

let us change this logic so this becomes

I want to get

super hero from the given hero index

and this becomes

and get my villain

from the given index just save a file

and you can see we have a bunch of

Errors let's start addressing this

errors one by one

first thing that I want to change is

this variable what I mean to say attack

is the attack number so we can improve

the name of the variable from Attack to

attack number

let me change right over here as well so

as you can see inside my print statement

I'm using this variable so this also

needs to be changed from Attack to

attack number there is one more final

point that I want you to think

if you see at the definition of our get

superhero we are returning a character

or none

so what happens if we don't have a

superhero or if you don't have a villain

in that case we can't have a fight let's

create some logic to handle this as well

so here after this line I can say

if

I have a superhero and if I have villain

so my current villain

only in that case I can do something let

me write a comment over here so if you

have a superhero and we have a super

villain in that case we are going to

have the attack

else that means we don't have a

superhero we don't have a super villain

that means we have an error so let me

print out a message saying that error no

superhero or villains to fight now let

us go to this line land number one or

four

what happens if we have a valid hero and

a valid villain then we need to have an

actual attack so all of this logic from

line number 108 to 117 should go right

over here but we are going to create one

more function to simulate the attack if

you're wondering why do we require so

many functions

the answer is for flexibility if in the

future you have some more characters if

you are fighting seeing changes then you

can change only a single function and

the changes would be reflected

throughout your program

so we want to have our program as

modular as possible

that's the reason why we are creating so

many different functions first let me

invoke the function and then I will

Define the function so the function

would be called as simulate attack

similar attack

now let's see what we need to pass to

this function the first thing that I

want to pass is my attack number

we can have only three attacks so that's

why we have the range of three over here

so I can say

the first parameter I want to pass is my

attack number then obviously we need the

superhero and we also need the super

villain

now let's go down to line number 107 and

let's create this function so let me

just copy

all of this

let me go down let me create a function

let me say that

Define function put my codes

let me add a command

I also need to adjust the spacing

because this is out of format

now let's work on this function so here

I don't need the word of current

this has to go this also has to go

it has to go from everywhere so let me

do a multi select

so this looks good let me save my file

everything is looking really good let me

put a comment right where so this is a

place where we are

setting the life this is where we print

some nice message and this is the place

where the actual attack is taking place

but I'm not really happy with this logic

here we are manually adding and we are

manually decrementing let us create

functions for this as well

you must be thinking that I have gone

crazy why do we require so many

functions let me ask you a question

suppose tomorrow the logic of the game

evolves and you have some bonus

attacking power or you have some bonus

life then what do you do so at that time

you simply have to change the logic in a

single function and that's it so let's

develop this habit of making the logic

inside different functions as possible

and let us try to stick to the principle

of single responsibility function

that means I want my function to do only

one job and also in the future when we

learn testing at that time testing

functions becomes a much more simpler

job so let's see what functions we are

going to require we are going to require

one function to increment the life of

the superhero

want to increment the life of the

villain

and then one more to decrement the life

of the villain and one more to decrement

the life of the superhero so we require

four different functions to do all of

these things so let me go to the top

and uh

here just below the characters let me

put up a comment so this block is for

the live let me go below and

I want to take this variables

to the top as well so let me paste it

right here and here we can start

creating our functions

the first one was to increment the hero

life

so this function accepts life which is

all the type of integer and it returns

nothing so it has to return none

let me put a comment now let's see how

to use the logic inside of this here I

have to operate on this variable

and if you remember the last video this

variable is defined on a global scope

that means I have to use the keyword of

global to reference this one so let me

go down over here and

let me say that I want to use the global

variable of

hero life

and let us increment the life so I can

say hero like is equal to

plus my life

and that's it

we can also use the shorthand syntax so

I can simply say

plus equal to

so let us copy and paste this one and

this time let us

decrement so I can say

decrement

this becomes

decreases this becomes minus equal to

and let us do the same thing for our

villain as well so let me copy all of

this

and let me put it over here

and my hero becomes villain so let me do

a multi select

and this becomes my

villain let me copy and paste this one

for the last time so this one to

decrement

so this becomes

decrement

decreases

minus equal to

let me save my file everything is

looking really good

let us go down and see what we are

supposed to do next

now once inside our function of simulate

attack let's see how we can use this

functionality but first let us set the

types for our function definition so the

attack number is my integer

my superhero is my character

villain is also of the type of my

character and this function is going to

return nothing so I can say none now

let's use the newly created functions so

we can use the function right over here

so I want to increment the life of

superheroes let me grab this

let me take it out and write the name of

the function this was to increment the

hero life

same thing will happen here also let me

take it out

put inside my brackets I want to

increment my life of the villain

let us do the same thing so here first I

want to decrement the life of the hero

so

let me put this inside my brackets

and I can see I want to decrement

the hero life

and let us do it

here as well

and here I can say

I can decrement

the villain life

just save your file and we can see we

have a couple of Errors so let's see

what's happening so what's happening is

my Pi is complaining because of

incompatible types for now you can

ignore the error but let me try and

explain what's happening all of these

errors will go away when we convert all

of the characters into classes in the

future videos but right now what's

happening is if we go to the definition

of our character

here you can see the values can either

be a string or an integer this is the

thing that my Pi is trying to complain

is saying that we can't add or we can't

subtract strings right over here

so that's why it is showing this error

so let's move on and let's go to the

next block

so this is the place where we are seeing

if we have lost or if we have won the

game we can create a function for this

as well so I can put up a command saying

that this is for my final game status

and let us Define a function called as

win or lose it's not going to accept

anything

and it is going to return nothing

let me take all of these things inside

we can slightly improve the code as well

on line number 164 and 166 we are

printing a statement so let us get those

variables inside our function so here

they are let me take them out

and and let me

paste it right over here

they have to have the right formatting

let me put up some documentation right

here

and a little space

let me save and see if everything is all

right or not everything looks good and

we have a very nicely typed program the

last thing to do is just to Define our

main function and we simply have to

invoke it writing the main function is

the most simplest thing so we can just

say

let me Define my main function

this is also going to return nothing so

this is the place where we would start

the game first thing is we want to have

an attack

the next thing is we want to check if we

have lost or won

and that's it the last thing to do is we

simply have to invoke this function so I

can just say main just save a file and

let me just browse if we have some

errors or not

we can ignore this error as I have just

explained

but let me check if we have some errors

no no everything is looking beautiful

all right so let's go down and let us

try and play this game beautiful it

looks like I have defeated Thanos in the

first try itself it's amazing

hi we are officially at the end of this

section

but I have decided to add one more bonus

video

now this bonus video is all about

teaching you higher order functions

now learning higher order functions can

be a little bit challenging for

beginners so I want you to just sit back

and relax and just watch as if you are

watching a movie

if you can understand the concept then

it's really amazing if you can't there

is nothing to lose and normally it will

take you multiple attempts maybe twice

or Thrice before you can understand the

concept

and which is perfectly fine I don't

blame you for that the concept itself

can be a little more challenging so just

enjoy and see if you can get it

welcome to the world of functions

let's start by understanding what are

functions and how they are managed

inside our memory so suppose we have a

couple of functions so here I have

defined two functions one is hello and

the next one is good morning

so these are pretty simple functions now

let's see what's happening inside our

memory

so this green area would be our memory

now please keep in mind that this is a

very simplified version in actual life

things are much more complicated let's

see what's going to happen now when

python comes across this line number

three and four it is going to create a

function called as hello inside our

memory so this is what is happening we

have a function called as hello inside

our memory now the next question is how

does python know how many functions it

has created inside the memory the answer

is python gives each and every object a

unique ID now what do I mean by an

object object is a generic term just

like all of us are human beings but we

are also animals same thing anything

inside the world of python is an object

a variable is an object a class is

object a function is object anything is

an object inside the world of python so

let me say python is going to create an

object which is also type type of

function inside the memory and the way

python is going to keep a drag of all of

the objects inside the memory is by

giving each one of them a unique ID it's

just like us every one of us has a

unique passport number so you can say

each one of us has a unique ID as well

the next question would be how does

python know where does the object live

it knows because it allocates some

address to the object it's just like us

every one of us has an address similarly

inside the world of python every object

which is created inside the memory also

has an address and this is how it looks

like now this format is a very special

format it is called as hexadecimal

format you can see this address always

starts with a 0 followed by an X so

whenever you see this format it means

it's an hexadecimal format it is just a

way of representating the memory inside

our computer now what happens when

python goes to next line line number

seven it sees that we have another

function so it goes back to the memory

and it creates another function by the

name of good morning

now good morning also has a unique ID

and it also has a unique address

so for example we can say good morning

has this address right over here we can

see this in action inside our IPython

shell so let me open up my IPython shell

so here it is so here I can see my

definition of hello it's simply printing

out hello world so here I'm just

creating a very simple function

let us see the ID of this function so I

can simply type I want to see the ID of

my function called as hello

so this is the unique ID of our function

you can also ask python to reveal the

type of this object so you can say I

want to see the type of hello

and the type is a function if you want

to see the address then we can say I

want to see the hexadecimal of the

object which has an ID of hello

and here it is so this is the address of

hello inside our memory let us create

one more function so let me Define a

function called as good morning and on

the next line I can say I simply want to

print

good morning

so we have another function let's see

the idea of good morning

now you can see we have a different ID

this ID ends in 144 the idea of hello

was 0 3 2. let us also check the address

of this one so I can say hex ID of good

morning

so you can see we have a different

address so this is F7 F0 and here it was

b370 so that means hello and good

morning are two different objects with

two different ID and with two different

address inside our memory

Let Me Clear My terminal

and now watch closely what happens if I

create a variable called discrete and if

I assign it the value of hello and if I

try to invoke greed

we have an output called as hello world

so what's this what's happening behind

the scenes now let us go back to our

diagram to understand what's happening

what's happening is python is actually

playing a trick with us

so this is the variable which we just

created

but if you check its address it has the

same address as hello

so in short what python is doing is it

is just creating a reference to hello so

the grid variable is just referencing

the function of hello it's just like

sharing your house and when we invoke

this function by using brackets so

when we use the bracket that means we

are invoking

here you can see I don't have the

bracket on line number 33 I am just

assigning the function of hello to grid

and on the next line I am using brackets

to invoke the function and when we

invoke the function we get the output of

hello world so what happens is when we

invoke grid it goes back

it says that grid is actually

referencing hello and behind the scenes

it's this function which is being

executed

but on the scene it looks like it's the

function called as grid which is being

executed

now let's get back to our code editor

and start writing some code

what I've done is behind the scenes I

have created a new file called as Hof

this stands for higher order functions

Dot py and I have created a couple of

comments for us

the type of function is also called as

callable

because this object can be called we can

give some arguments to it and we can get

some values from it that's why in the

world of python functions are also

called as callables if you're thinking

why do we need this kind of a

functionality the answer is till now we

have been passing data to the functions

but sometimes it can be very expensive

so what's the solution the solution is

passing the function to the data you

have to just start thinking in Reverse

so what we are going to do is we have

some data and we would be passing

functions to it imagine you have

terabytes and terabytes of data it would

be so expensive to transport all of this

data from one server to the another

server just for the sake of computation

instead we can simply pass a function to

the data and we can get our job done

much more easily so let's start by

creating the same function called as

hello right over here so

this is the function that we created the

next point I again want to reiterate

that function is just a regular object

of the type of function there is nothing

special about it now let us print let us

also try to print the ID of hello

and let us also try to print

the type of

let me run the file so here it is

let me take it up a little bit

okay so when I'm saying I just want to

print hello so hello is a function which

is present at this address

the ID is this one and the type

is actually a class of the type of

function let's get back and see what

else we can do now let's try to create a

variable and assign the value of hello

to that variable so let me put a command

and let us create the variable called as

grid and let me assign the value of

hello to it again remember I'm not

putting my brackets over here because I

am not invoking the function I am just

assigning the function hello to the

variable of grid now let us try to

invoke the function of grid so let me

write grid with the brackets let me save

the file and let me try to run the file

so here we have the output of hello

world let us go back and see how we can

add types to all of this variables I

just explained that hello is also called

as a callable inside the world of python

so the type of grid is actually a

callable type

let me go up and let me see that

from

typing

I want to import

callable

now let us go down

let us start adding our types right over

here so grid

is of the type of callable now if you

see the function of hello it is not

taking any arguments and it is returning

none

so what we can do is callable let us put

some brackets this means that grid is of

the type of volleyball and inside this

brackets we have to specify the input

arguments and the output of the function

and here inside the square brackets the

first argument is always a kind of list

and the second argument is the return

type of this function now let's see how

we can add the types hello it is not

accepting any arguments so the first

argument to callable would be empty next

our function of hello is returning none

so here after the comma I can say

it's a callable which returns none and

that's it we have a nicely typed

function as well let me add some

comments just for the sake of reference

so here we are just assigning the values

and here we are invoking the function

let us see what else we can do with our

functions let me put a separator and let

me put some comments

so this time we are going to create a

universal gritter remember I just

explained the concept that we can also

pass the functions to the data that's

what we are going to do right now I am

going to create a universal greeter that

takes two arguments the first argument

would be for the name and the second

argument will actually take a function

now suppose you want to grid Zola then

our universe are greater function will

grid as Zola if you want to create as

good morning then our function will

great as good morning

if you want to create as goodbye then

our function will great as goodbye

sounds awesome isn't it so first let me

type all of the functions and then I

will try to explain all of them let me

create the first function called as Zola

so what this function is doing is it is

simply taking one argument and it is

returning a Grita in the form of Zola

followed by the name let's create one

more function for good morning the next

would be for goodbye now let's create

our Universal Creator function so let me

put up a comment over here and I can see

my

Universal

greeter so this function is going to

accept

two parameters the first parameter is

the name

and let me get the spelling right string

the name is of the type of a string now

what should be the next argument

the next argument is of the type of a

function

let me name it as greet up

the type of this is callable

now let's see how we can Define the

types inside callable look at all of the

functions which I have created Zola good

morning goodbye

the function signature is common all of

these functions accept only one

parameter that two of the type of string

and all of this function returns a

single argument which is also of the

type of string

so that's what I am going to pass right

over here let's see how we can Define

the types so the first argument is a

list and the second argument is the

return type all of the functions are

returning strings so I can just write

string over here and all of the

functions are also accepting a string so

inside my inner brackets I can say

string so this is called as a function

signature

all of this function except one string

and return one string

same thing we are saying over here our

callable accepts one string and returns

one string

now let's see how we can Define the body

of this function let me add some

documentation

now here you will be amazed it is just

two lines function

the first thing that we want to do is

let us take the function of Grita

and pass it the argument of name that's

it

that's the entire Logic Let Me assign

the output to a variable called as

message

on the next line let me simply

print it out

just save a file

let me try to run the file and after

that I will again try to explain what's

happening but before that I want to

comment all of these things let me

comment out all of this I don't need all

of these things the grid function as

well

let us invoke our Universal greater

function and then we can have a nice

output so let me go right over here

and here let's see how we can invoke the

function so let me say Universal greeter

my name is

thallium

now let's see what we can pass as the

second argument if you see right here my

IDE is telling me that Glitter is also a

type of function

these brackets it denotes a function it

takes a string and it returns a string

so basically we can pass any functions

that satisfies this signature

and luckily all of our functions Zola

good morning and goodbye satisfy these

conditions so we are going to pass one

by one inside the universal reader for

the first one let me pass simply as Zola

now remember I don't have to put

brackets because I am not invoking I

simply have to pass my function and

that's it let me copy and paste

let me take a little up

the second one would be good morning

the last one would be goodbye that's it

just save a file

and let's try to run it and hopefully

this time we should have a nice output

wow it's so amazing single function can

produce multiple outputs now let's see

behind the scenes what's exactly

happening for example let us take just

this line line number 65 so Zola is

actually a function and this is how it

looks now let's go back to our

definition right over here this Zola

comes as a function called as greater

inside our function

now this greater is just a reference to

the function of Zola

let me open up my diagram one more time

so imagine this to be our greater

function and this to be Zola

so greater is just a reference to Zola

and whenever we invoke this function

behind the scenes the original function

is being evoked so let me go back to my

code so you can see on line number 61 we

have a new variable called as Grita so

this grid is actually a reference to

Zola we pass one argument of name to the

function

this name goes right over here and if

you see the function definition we are

returning a string called as Zola

followed by the name we are saving this

string inside a variable called as

message and we simply want to print it

out this is happening with each of the

functions

the second time what happens is we are

passing good morning now the second time

this greater over here this references

good morning and what good morning is

doing is it is simply returning a string

good morning followed by the name if we

capture this output inside this variable

right over here and we are printing it

out and the same thing goes with goodbye

as well that's the reason why every time

we have a unique output first time grida

was referencing Zola so we have Zola

octallium second time it was good

morning so we have good morning

octallium and the last time we had

goodbye so we have goodbye octallium

sounds pretty neat isn't it

now let's get back and let's try to

learn a little bit more about functions

let me put a separator

a function as we saw can accept a

function but a function can also return

a function

now this part really took me a couple of

attempts to understand so if you can't

get it don't worry

you will eventually get it so let's go

down and let's see how we can create a

function that accepts as well as returns

a function

let me put up a comment

let us see how we can create a function

that will return us a function

let me Define a function called as

add Wi-Fi

this takes one argument number which is

of the type of integer

now since this function actually returns

a function so we can say this is going

to return a callable

and we will Define the types A little

later on right now just go ahead and let

us type the body of the function

let me add some documentation

now what I'm going to do is I am going

to create one more function inside this

function

so let's create one more function

let me create a function called as by 5

and

this actually does not accept anything

and this function returns an integer

inside this let me say I want to return

the number that we get right over here

so I want to return that number

plus of 5 so this is the function inside

this one and since our outer function it

has to also return a callable so we need

to have a return statement

and this time I am simply going to

return my function which is going to be

this one called as Wi-Fi

first let us see the type hinting and

then we will try to understand what's

happening so let me go back to this line

so we know that this function is

supposed to return a callable type

now this callable type is actually this

function so now we can start adding

types to it so here goes my brackets

first one is for the inputs

after the comma is for the output this

function is returning an integer so let

me write

int over here and this function is not

accepting anything so this argument

remains blank

just save a file so this is also called

as your higher order function

let's see how we can work with these

functions let me say that a new variable

called as sum is equal to

my function of add by Phi is

let me pass a argument of 5 if it is

hover over right over here so your IDE

is also telling you that the return type

is a function which accepts nothing but

returns an integer so what's happening

is a variable of sum now this is

referencing to this variable which is

inside

we can also invoke some and let's see if

we are getting the right output or not

so I can say print and sum

and that's it the reason why we are not

giving any input right over here is

because sum is referencing this function

right over here and this function does

not accept any argument that's why it is

blank let me just save it and let me try

to run this file and here we have the

output of 10.

so this Phi plus this Phi is equal to

10. well we can also written a function

that accepts an argument

that means we can create a function

which can actually accept something and

do with the data

so this time let us create a new

function called as universal adder but

this Adder is going to be a little

unique

this Adder is going to add to numbers

and subtract by one it's our own add-up

so let me go down over here let me take

it up

let me add a comment

and let us Define a function called as

our unique adder

now this accepts one number so this is

going to be our first number so let me

call it as num1

the type is integer this also returns a

callable

we will add types shortly

let me add some documentation now let us

create one function right over here

but this function is going to accept

another number

and we are going to return this number

plus another number minus of 1.

so I can say Define

our adder

this function also accepts one argument

let me call it as num2

type of integer

and this one returns an integer

and let us place our logic right over

here

so since this is a unique Adder what we

want to do is

we want to add the first number

the second number and minus of 1.

let us go below and complete the

function by adding our return statement

so we can say

this function right over here this is

going to return a callable and this time

this callable is going to be Adder so we

can say return Adder

let us Define the typing for this one so

our brackets

one more brackets inside for the input

argument and the next one for the

written argument

let us see this function this function

is returning an integer so we can say

integer right over here and this

function is also accepting one integer

so inside this brackets I can say

integer

and that's it we have a beautifully

typed function as well

let's try to invoke this function and

let us see if it is doing its job or not

so my order would be my unique Adder let

me pass one argument of five

and as you can see this is returning one

more function and the function signature

is integer returning an integer

let us print out the value let me use my

print statement

adder and here I want to give my next

number

so I want to add Phi and Phi let us see

what output we should get so I want to

add my 5 with my 5 but minus of 1 so the

output should be 9 so let me save my

file and let us try running it

and here we have the output of 9.

let us go back and let us try to study

what's happening

so what's happening is our function of

unique Adder is returning another

function

so this Adder is referencing the return

callable from this function and the

return callable is this function right

over here so in short add a is

referencing this Adder over here

let us try with one more example so let

me add

four

and three the output should be four plus

three seven minus one six let me save it

and let me try to run it and here we

have the output of six let me put it

back to five and five

now let us move to the last part which

is called as a Lambda

let me put a separator line over here

and let me put some comments so we are

going to learn about Lambda now lambdas

are pretty simple but they are often

neglected

trust me they are not really complicated

it is just a different way of declaring

your functions

let me first type and then I will show

you what's exactly happening let me go

to the top

right over here

now this is a function called as hello

let us see how we can Define this hello

using a Lambda

so I can say my new function called as

hello number two

would be

a Lambda Lambda simply means a function

now this function is not accepting any

arguments so we can just write colon but

this returns a string so we can say this

is going to return

hello world and that's it it's so simple

the entire function can be condensed

into a single line let me copy this and

let me go back to my IPython shell

and let's play over there so let me

paste it right over here and I can

invoke my Hello to just a circular

function and we have the output of hello

world

so lambdas are just your regular

functions but they are declared in a

different way suppose this function

accepts one argument then that argument

will come before this columns let me

take it out and let me show you one more

example

let us go right over here for Zola so I

can say my Zola number two

would be my Lambda now this function of

Zola accepts one argument as name so I

can write name

and this returns a formatted string so

you can just copy

and

paste it right over here and that's it

we have a Lambda function ready

let me copy this and paste it in my

IPython shell let me paste it

and that's it

let us invoke this one Zola to

octallium

I forgot to close the string let me

close it

and we have the output of Zola octalium

it's pretty simple isn't it

let me again take it out

so just for the sake of practice let us

create one function which will act like

a calculator now just imagine your

calculator it's a single calculator but

it can do multiple functions it can do

addition subtraction Division and so on

so we are going to try and mimic the

same functionality by using lambdas so

here let me create my first Lambda by

the name of ADD

so I can say this is going to be a

Lambda

this accepts two number so my number one

and my number two

and this is just going to return the sum

so I can say number one

Plus

number two if you notice we don't use

the keyword of written inside the Lambda

because whatever value that comes after

the colon it's automatically returned

let me save this one

now as a convention the arguments for

Lambda functions are written as X and Y

but you can write num1 and num2 but

right now just for the sake of

Simplicity let me convert this to X and

Y so let me Define

multi select this argument becomes my X

and the next argument becomes my y

let us see how we can add types to our

function

so as we know Lambda is nothing is just

a function and we know the function is

also called as a callable we can say it

is of the type of callable

now inside the first brackets are for

the inputs the next one is for the

output

now let us see what's happening our

function of Lambda is accepting two

inputs this is the first one and this is

the second one and we want to say that

both of the inputs should be of the type

of integer so let's go back right over

here and we can say the first argument

is an integer the second argument is an

integer as well and we are returning a

single value so we can say this function

is going to return a single value of a

type of integer and that's it let us

create one for subtract and one for

multiply so let me just copy and paste

this would be for subtract

I just have to make a very small change

this has to be x minus

and this one would be for multiply again

this is X into

so you can see it's so simple let's

define a calculator on the next line so

I can say Define calc

now let's see the inputs so obviously we

required two numbers so I can say my

first one is an integer the second one

is also an integer

and the third one is going to be a

function let me call that function as

operation

so we are going to operate on both of

this number that's why I'm going to call

this function as operation we can call

anything that you want the type of this

one is exactly the type of this one so I

just have to copy and paste

from here to here

now let's go to the return type

and this is going to return an integer

so what's happening is we have a Lambda

it is taking two integers and it is also

giving an integer in return so this is

what we want to return so this integer

comes from here to here

and inside let me put some documentation

here the written statement is extremely

simple

we simply want to execute the operation

on both our numbers so number one and

number two that's it and we simply have

to return the output so I can say return

save your file and we have a nicely

defined calculator as well let's try to

invoke our function and let's see if we

are getting the right output or not let

us try adding 4 and 5 so I can say I

want to print

the output of my calculator

I want to add 4 and 5 and the operation

here is going to be this add operation

so I can just pass that function right

over here I can say add

next let us do subtract and multiply as

well so this will be

subtract and this would be

multiply

save your file and let us try it running

for the last time

and here is output

4 plus 5 is 9 4 minus 5 is -1

4 multiplied by 5 is 20 well that's it

for this video I hope you really enjoyed

working with functions more you start

practicing with functions more you will

start loving them and once you are

hooked to functions you will never want

to go back again

and if you want to learn the functional

approach of programming

then perhaps python may not be the right

programming language because python is

an object oriented language if you want

to learn more about the functional

aspect then you can learn languages such

as Elixir Haskell and Scala those

languages are built around the

functional approach

welcome to a brand new section this

section is all about object oriented

programming

even though the name sounds pretty big

but the concept is not so difficult some

of the main aspects of object oriented

programming are classes instances

inheritance and polymorphism

so I will be covering all of those

inside this series let's go to our code

editor and let's start creating some

classes behind the scenes I have created

one more folder called as zero six oops

and inside of this folder I have created

a file called as basic dot pi and I have

posted some documentation right inside

this file first let us create a class

and then we will see what is it all

about and after that I will come to all

of this documentation so let me collapse

my sidebar

so let me go below and

let us create our very first class so we

can use the keyword of class

followed by the name of the class let me

just call it as some class I don't care

the name right now

the next line is for the documentation

of the class so let me add some

documentation saying that defines an

empty class and inside of this I don't

want to pass any logic for now I want to

keep the body as empty

so I can simply say pass

and that's it we have created our very

first class let's try to print it out

and see what output we are getting so I

can say

I want to print out

some class let us save it and let us try

to run it and here we have the output

underscore underscore main underscore

underscore dot some class

now this output looks a little bit

cryptic and we will take care of these

things in the future but what this is

trying to say is in the main file

there is a class called as some class so

this sum class means this class

and this underscore underscore main

underscore underscore simply means the

main file

now this is just a naming convention

whenever we execute some python module

python behind the scenes names the main

module as underscore underscore main

underscore underscore so this double

underscores are also called as Dundas

python makes a lot of use of this

tenders and we would be seeing them

shortly let us go back and create some

more classes let me put a separator

let us create a class which represents a

person so I can say class

followed by the name of the class now

remember the name of the classes are in

Pascal case that means the first

alphabet of each word has to be Capital

if you check this class my S was capital

and C was Capital just make sure you

always follow this convention whenever

you want to define a class

now let's go right over here and create

a class of person

let me add some documentation that this

class defines a person now let's see

let's try to imagine a structure of a

person every person has a first name and

a last name so let us give this

properties to our class of person and we

can do that by using a Dunder method

which is called as init now don't fuss

over what is this method what is a class

and whatever I'm going to show you right

now this video is just to show you what

is the class and in the next video I

will explain you all of the things which

are happening behind the scenes right

now just go with the flow the first

function inside your class always has to

be a special function by the name of

Dunder in it so this is how you define

it Define

Dunder

in it

Dunder this is just a naming convention

by python we have a Dunder in the front

and under at the back

there is nothing special about this

function this is just like your regular

function just that we have a different

naming style for this one now since this

init function belongs to a class the

first argument should always be self

self actually acts like a reference it

means the instance of this class again

don't worry I will explain all of these

things in the next video this function

of init is going to accept two more

parameters the first one would be for

the first name of the person

the type is going to be a string next

one would be the last name

again a string and always remember that

this init method returns nothing so the

return type is going to be none and

inside let us see how we can construct a

person here we have to say that cell Dot

first name is equal to first name so

what I am trying to do is I am just

taking the first name and I am creating

an instance variable called as first

name

now this can be anything I can also name

it as

if name and I can write this as F name

it doesn't really matter

the same goes for this one you can call

this ABC it doesn't matter but if you

are writing ABC over here then this also

has to be ABC but as a convention it is

normally cell

and let me change this to my first name

let us create one more instance variable

for the last name so I want to say

for my instance of a person so that

means for self Dot

last name is equal to last name so the

same thing I am taking the last name

from my init method and I'm creating

something which is called as an instance

variable right over here now let's see

how we can work with this class so I

want to say my first person is a type of

person the first name is Lewis

the last name is Zappa let me save this

and let us try to print

first person that's it let me comment

this out I don't want this one and let

me run this file

and here we have one more cryptic output

saying that it is main dot person object

at so and so address

if you have seen my last lecture about

higher order functions you can make it

out that this is a hexadecimal address

for this object let us go back and see

if we can improve this one let us create

one more Dunder method and this time the

name of the random method is called as

underscore underscore r e p r

so this stands for representation

underscore underscore and self always

remember the first argument by default

inside a class should always be self now

this is going to return a string so I'm

going to put a string over here

and let me just say return and I am

going to return a string so I can just

say inside my codes that this is a

class of the type of

person

that's it just save a file and try to

run it so this time we have a much

better output so this underscore

underscore init and underscore

underscore repr these are also called as

magic methods python is always going to

look for this magic methods whenever it

has to create an instance of the person

class let me add some

documentation over here

so this magic method of repr is also

known as the official representation of

your class now let's see one more magic

method let us open up the terminal one

more time and to be frank this output

doesn't make much sense except that this

is saying it is just a class of the

person

it is not giving any details of which is

a person what the first name what is the

last name and so on

but we can improve this by using one

more magic method and this time the name

of this magic method is underscore

underscore Str so I can say Define my

Str

so this Str simply means for the string

representation of the class and as a

convention it has to accept self as the

first argument

this method also returns string

let me add the documentation saying that

this magic methods provides string

representation of an instance I will

explain all of these things in the next

video instance and classes right now

just go with the flow and complete this

video so here I can say I want to return

a string let me construct one string by

using our string formatting

so I can say person

the way to get the first name and the

last name is using this syntax self DOT

first name inside this curly brackets I

simply have to say I want to get

the first name of this instance

so self is acting as a reference it is

telling python I want to fetch the first

name of this particular person only so

let us have the last name as well so we

can say self Dot last name

let us save the file and let us try to

run it

so this time we have a much better

output and this output also makes some

sense that this is a person and the name

of the person is Louis Zappa

let us create one more person let me put

up a comment first over here

so what we are doing is we are creating

an instance of the class of person let

us create one more person so I can say

the second person would be person the

first name could be CC let me get the C

capital and her surname could be

Neutron

let us printed out

let me print out my second person

save your file and just run it and here

we have the output the second person is

CC the first person is Lewis

so I think we have learned enough for

this first video in the next video I

will explain all of these things and

hopefully you would have a better

understanding of classes

now let us try to demystify our classes

so this is the class of person that we

have created in the last video

for this slide I had to slightly

compress the syntax so we can see some

of the namings are different from the

names that we gave the last time

so just go with the flow so this was the

class that we created last time the name

of the class is called as a person and

we have a couple of magic methods inside

of this one

now let's see what's happening inside

our memory

so as usual this is our memory and let's

see what's going to happen next python

will see that we have a class called as

person and it is going to create a class

inside its memory

now this class doesn't hold any data

this class that you can see over here

this is just like a design or rather it

is just like a blueprint for a building

but we don't have the building yet and

how do we know what is the design of

this class we can see the design of this

class with the special method called as

init

this method is also called as the

Constructor or the initialization of our

class so let me repeat

this is just a class it does not hold

any data it is just like a design or

blueprint now let us see what's going to

happen on our line number 15. whenever

we are creating an object of the type of

person

that time we say that we are creating an

instance of the class of person

so let's see what's going to happen

python is going to take the design of

person from our underscore underscore

init method so it's going to take the

design so we have the design

and it's going to create an instance by

the name of person one

so as you can see we have an instance by

the name of person one

so that is being constructed inside our

memory the same thing happens with

person 2 as well python is going to take

the design of person

and it is going to create an instance of

person two so here it is so this is the

basic difference between a class and an

instance class is like the basic

blueprint or the design

and an instance is an object of the type

of class so person one and person 2 are

called as instances the design is called

as a class now if you have seen my

earlier video about higher order

functions you must be knowing that

different objects have different memory

address

so person number one and person number

two are completely different objects and

they have a completely different memory

address just imagine that this is the

memory address for person one

and this is the memory address for

person number two now let's see what's

happening behind our Constructor or our

Dunder init method so this method is

just acting like fill in the blanks so

you can see our Constructor this is for

the first name and this is for the last

name

and you can see right over here first

name and the last name this init method

just acts like a fill in the blanks

so it's going to take Lewis from here

and it is going to put it right over

here

is going to take Zappa and it is going

to put it right over here

so that's what is happening

so if you see inside the memory when the

first instance is created

init method is going to assign the first

name to Lewis and the last name to Zappa

same thing is going to happen with

person number two as well whenever we

are creating this instance the init

method is going to assign

the last name sorry this has to be first

name not last name

the first name to CC and the last name

to Neutron

the last thing that I wanted to explain

is all about this keyword of self

now self only acts as a reference that

means it tells python on which instance

do I populate in the data or if you want

to get the data it simply tells python

from which instance do I have the data

let me show this in action let us go

back to the previous class which is

right over here and on the next line let

us print out the first name for both the

persons so I can say I want to print out

my first person's

first name

and let us do the same thing for the

second person as well

the save a file and let us try to run it

and you can see we have a different

output

let me take it up the first person's

first name is Lewis

the second person's first name is CC the

way python can keep a track of this is

because of the keyword of self so this

first name belongs to the instance of

this one

so let me show in the diagram whenever

we are printing the first name of the

first person the self references to the

instance on this memory address so

python can correctly retrieve the date

of Lewis and that's what we are seeing

on our terminal so let me open up the

terminal and this is what we get and

similarly when we say we want to print

out the first name of the second person

let us go back to the diagram the self

is telling python that this time the

person is actually this one and this

person can be found at this address

so the first name this time would be CC

and not Lewis

I hope now we have a much better

understanding of classes instances

objects Constructor and so on now let us

move on in the next video

we just saw that instances have

different memory address let me go back

to diagram

so here I explained that this instance

has a different memory address and this

instance has a different memory address

now let's see that in action let us go

back to our code

and here let me put up a comment

and I don't want this one so I can take

it out

this one as well and let's print out the

memory address of our P1 and P2 as well

so I can say print my formatted string

and I can say P1 is located at memory

address and if you have seen my video on

higher order functions we know that we

can get the memory address from hex

and then inside we require the ID of the

object

and we require the ID of P1

let me copy and paste it this time it

has to be P2 this also has to be P2

just save it and let us try to run it so

here we can see P1 is located at this

address so here you can see this is four

seven six three f

and P2 is 479 e d so you can see we have

two different instances at two different

memory locations and both of them have

taken the design from the class of

person and the Constructor was our init

method let's create one more function

inside our class

so let us create a simple function for

grid

so I can say Define grid

and as you know the first argument

should always be the self

always acts like a reference and this

one actually does not return anything so

I can say none

and here I can say print

formatted string

let me put the first name

self DOT first name

and then I can print a message saying

that first name says hello that's it

just save your file now just one small

technical detail all of the functions

that we create inside the class they are

called as methods so let me put up a

comment over here so

this is a method that prints a greeting

message

so methods and functions is the same

thing the only difference is that

methods are always tied to some class

that's why they are called as methods

now let's see how we can call this

methods

so let me go right over here let us get

the first instance so we can say P1

and we can call the method by Dot and

the name of the method so we can say I

simply want to invoke the method of grid

on the first person we can do the same

thing on the second person as well so I

can say

second person and let me put up a

command

that's it let me save and let me run it

and here we have the output Lewis says

hello CC says hello

if we go back to the definition of class

you can see we have four different

methods in it representation the string

representation and grid What

differentiates between this random

methods and the regular method is that

python by default is going to search for

this render methods so that it can

Implement its own magic if you change

the name from init to something else

then the class Constructor is not going

to work

so always make sure you get the naming

convention right in it is for the

construction

repr is for the official representation

and this is just for your reference this

is called as a string representation

even though the name starts with an

underscore you can use them just as your

regular function

let's see how to do that let us go right

over here

let me make some space and

let me print out P1 dot underscore

underscore SDR

and that's it

so what we are doing is we are simply

calling the method called as SDR on the

instance of P1 that's it let me save and

let me try to run the file

and here it is we have the output of

person Lewis Zappa so this is absolutely

possible but this is not the recommended

way of doing it so let me put up a

comment

possible but not recommended

well that's it for this one in the next

video we will convert the character from

our game to a class now let's see how we

can convert the character from our game

to a class

What I've Done behind the scenes I have

created a new file called as character

dot Pi inside my zero six folder let us

go back to the folder number five and

inside the game so this is how our

character looks like our character has a

name attack power and life

we can use this parameters to create our

own class so let us go back to our

character.py file let me collapse my

sidebar and let's start creating a class

for our character so the first is the

keyword of class followed by the name

character let us go inside the first

method is always going to be the

Constructor that means our underscore

underscore edit method so we can

write like this Define

my init

remember the first argument should

always be self for reference here we can

accept three different arguments let us

go back to the game

so we need one argument for the name one

argument for the attack power and one

argument for life so let us go back to

our init method and here I can see I

want to accept a name

pipe string

next is attack power

pipe is an integer

life

the type is an integer and this method

always returns none let us create some

variables inside again you have to

follow the conventions

you have to write self dot name

and let us take the data from this

variable and put it right over here so I

can say name remember that you can name

this anything so I can just call this as

n

but you have to change over here also

but as a convention normally we would

like to keep it the same names so let me

go back

the next is for the attack power so I

can say self Dot

attack power would be my attack power

the text would be self dot life

would be my life

let me add some documentation right over

here

saying that this method creates an

instance of character let me add some

documentation for the class as well so

this is for documentation of the class

that this class defines a character

now let us create an instance of this

class so let me create a villain first

so I can say a villain

villain the first one would be a

character

the name would be

Thanos

his attack power is 400 and his life is

1500 let me

print out the villain number one

let us save the file and let me try to

execute this file

and here we have the output but as you

know this is a little cryptic output so

what python is telling that this is a

character object add this and this

memory address but you already know how

we can improve this so let's start

adding some of the dender or the magic

methods the first one I can save is my

repr the first argument is self and this

returns a string

I can say return so this is my class of

the type of character

let me save the file and let me run one

more time so this time we have a little

better output my VLAN is actually a

class of character

let us improve further by using our Str

method so we can Define it right over

here

SDR

first argument is always the self

this this returns a string and let us

construct a string right over here

so I can see the name

it would be self dot name

next would be the attack power

and this would be self dot attack power

next would be life

so this would be self dot life

that's it let me save it and let me try

to run it so this time we have a much

better output the name is Thanos attack

power is 400 and the life is 1500 let us

go back and let us create some more

characters let me put up one comment

over here so while constructing a class

you can actually use key and value pairs

so let us create one more villain and

let's see how we can do this so this is

my villain number two

it is a character and here we can use

the key value pairs so I can say the

name

maybe this time it is Red Skull

the attack power is 300.

and the life is 800 and that's it

let me try to print out the second

villain as well so I can say villain

number two

just save it and try to run it and here

we have the output Red Skull attack

power 300 life 800. now the beauty of

this key value pairs is you don't have

to specify the arguments in a given

sequence you can mix up the sequence but

still we can have a proper instance so

let me show you maybe I can just take

this out and put it here

and let me save this let me try to run

it one more time and still we have the

right output let us go back and let us

try to create some more Heroes let me

create one hero so this is Iron Man

attack power is 250 life is thousand let

me create one more so this time it is

Black Widow the attack power is 180 and

the life is 800 and let us also print

them out let me run the file for the

last time

and here we have the output Thanos Red

Skull Iron Man and Black Widow before we

can move ahead let us take a small pause

and let us think do we really require

classes let us go back to the earlier

program that we wrote

so let me go back to my file called as

basic

and let me collapse my sidebar

so let us ask a very fundamental

question do we require a class

the answer is it depends

whenever you want to have a structure

and a behavior together at that time

using a class makes much more sense if

you require just the data then you can

use any of the data structures you can

use a list you can use a dictionary or

some other custom data structures as

well but whenever the structure and

behavior is tied together that's the

best place to create a class for example

in this file we have a class of person

now let's see what's happening

person has a structure and that

structure is defined by the first name

and the last name

now this person can also have a behavior

a person can greet another person so we

have a method called as greed

so greed Can Be Imagined like a behavior

of a person

a person can have different kinds of

behaviors a person can walk a person can

talk a person can eat

so all of this Can Be Imagined as

behaviors but all of this behaviors is

tied to a structure and that structure

is the First theme last name and maybe

you can have multiple other parameters

such as your age your location and so on

so just keep this in mind classes are

not the solution for everything

make sure you use the right data

structure or the right classes only when

it is required let us learn more about

classes and this time let us learn about

class membership till now we have been

creating variables inside our

Constructor

so for example in our class of character

so we can say surf.name is a member of

the instance of this class

same thing attack power can also be

called as an instance variable let us

create a new class and let us try to

study what is this all about so behind

the scenes I have created a file called

as

members.pi added a couple of comments so

let's try to see what's happening inside

let us try to create a class called as

box

and let us Define an init method this

box has two sides this is my side number

one I can say the type is integer my

next side

also the type of integer

it returns none

let us create the variables inside so I

can say my

side a is equal to my side a and my

side B is equal to my side B now what we

have done is we have created variables

inside our Constructor class now

remember what this method does it

actually creates an instance and fills

in the value so if we refer this diagram

our Constructor is simply filling the

values of the instances so the variables

that create inside they are called as

instance variables let me put up a

comment right over here

now if you go back to the diagram

the data is different for every instance

so for example the first name for person

number one was Lewis

and for person number two it was CC

now let us see how to create class

members let me put up a command so this

class members are defined on the class

scope so this class members are defined

outside our Constructors so let us

Define a couple of class members as well

let us create a variable and we can see

box type and this is going to be a

packaging Carton and the color for this

one would be brown so this variables

that we have created box type and color

this variables would be accessible to

all of the classes please note that we

don't have self over here because we

don't need reference to an instance

this data is available to all of the

classes and all of the instances let us

create a Str method

here I can say Define my

Str

ugan cell

this always returns a string and I can

say

return

my side a would be

my self dot side a

and my side B would be

sorry it has to be self Dot

side B

for this example I am going to skip the

repr but you can write it on your own

let us create an instance called as the

first box and I can say the box side a

maybe it's three and the next is 4.

let us try to print out my box so I can

say I want to print my box

let me save it and let me try to run it

so here we have a box side a is3 and the

side B is 4 now let us try to print the

class variables

from an instance

remember this class instances are

available for all of the instances so I

can simply say I want to print my

box first Dot box type

and let us print the color as well so I

can say the color

let me save it and let me run it so we

have the output it's a packaging Carton

and the color is brown let us go back

and let us try to solidify this concept

of class members now this class members

are available on classes itself you

don't have to create an instance

that means if you go back to the design

we can get back the data from the design

itself we don't have to create an

instance to get back the data now let's

see this in action what we did till now

is we created an instance of the box and

then we printed

this variables right over here but we

can simply say I want to print the box

type from the class of box

let me copy and paste we can also say I

want to see the color

that's it just save it and let me try to

run it and we have the output packaging

Carton and brown

so this time what we did is we simply

accessed this variables from the class

we did not create an instance so this is

what I mean to say when all of the class

members are available to the class

itself and also to the instances let us

create one more box and

print it out so let me print my box

number two

and just for the sake of confirming we

can say my B2 dot box type

and my B2 dot color

and we should get the same output let me

save it and let me run this file for the

last time

and here it is we get the exact same

output let us try to study the next

Concept in our object oriented

programming and this concept is called

as inheritance and polymorphism

what I've done is I have created a file

right over here called as inheritance

and polymorphism

and let us try to see what's going on

just to give you a very simple example

we are all human beings but we are also

animals that means we inherit a lot of

properties from animals for example all

of us have eyes ears hands and legs but

all of us human beings we don't speak

the same language now that's

polymorphism in action inheritance means

we inherit all of the features of an

animal

and polymorphism means even though we

have the same properties but we exhibit

different Behavior now let's create some

classes and see this in action let us

create the first class called as animal

so let us create a class of

animal

let us Define our methods over here

first is the cell

and let me accept one argument for name

one for the age and one for the number

of legs

this returns nothing so I can say none

let me put up a comment that we are

going to create and initialize the

instance variables let's start creating

some of our instance variables so I can

say my self Dot name is equal to my name

then myself dot is is equal to age

then self dot of legs is equal to Magnum

of legs let us also create the Str

method so I can say Define my SDR

it

takes a self it returns a string

and here I can return

let's say we can just return the name

for now so I can say name and this would

be self Dot

name let us try to give animals some

kind of behavior so let us create a

method called as talk on animal so I can

say Define a method called as talk

the first parameter would be self and

this is going to return nothing so none

for now let me put up some documentation

saying that this method makes the animal

talk but let's see what we can do right

now

since we don't know what kind of animal

it is that's why we can't talk yet so

let us print the same thing right over

here

so I can say print

my formatted string

self dot name

can't talk yet so let us go down and let

us create one animal so this is my first

animal so I can say

I want a instance of the class of animal

the name is Robin Age maybe he's 10

years old number of legs is 4 then let

us print out the animal and let's also

try to make the animal talk so

a1.com just save a file and let me run

it so here we have the output we have

Robin and Robin can't talk yet now let's

go back and let's see how we can create

some sort of inheritance

let us create a dog now remember dog is

a kind of animal so you can say that dog

inherits from animal let me create a

class and then I will try to explain

what's happening so let me create a

class called as dog

now here inside the brackets we have to

specify from which class we are

inheriting so dog is inheriting from the

class of annual so this is how it goes

let us create our Constructor right over

here as well so Define init

self now let's see what happens since

the dog inherits from animal dog also

needs to accept all of these parameters

name age number of legs so let me just

copy and paste

and here we can accept some more

arguments as well

so let me create one more argument for

breed so we can accept one for breed let

me get the spelling right let us go down

and let us start creating our instance

variables here at this point python can

do a small bit of magic for us

since dog is inheriting from animal we

don't have to create all of the instance

variables manually instead what we can

do is we can pass the common data to the

class we are inheriting from so we are

going to take all of this data and we

are going to pass this data to animal so

technically animal can be also called as

your parent class or it can also be

called as your super class let me put up

a comment so we want to take all of the

common features and pass it to the

parent or the super class python

provides a keyword called as super so

this super means the class of animal and

now we want to pass all of this data to

one method and that method is called as

init now remember in it is just like any

other function except it has underscores

at the beginning and at the end so we

can call that method as we can call any

other method so we can say super

and underscore underscore init

underscore underscore

and let us pass the common features

which is the name

age and the number of legs now it is the

responsibility of the superclass that

means the class of animal to create

instance variables for the name age and

number of legs

the only argument that is remaining is

for the breed so inside dog we can

create one more instance variable called

as self dot breed and we can assign the

value we can also create extra instance

variable even though we are not

accepting parameters right over here so

let me give you a small example so I can

say self DOT type is equal to dog so you

can see we can create instance variables

wherever we want them so let me save

this

so this is what I mean by inheritance

dog is a class which inherits from

animals and they share a lot of common

functionality that's why we are passing

the common functionality to the

superclass and we can create some

additional instance variables as well

now let's see how we can introduce

polymorphism in this class remember

remember the superclass of animal has a

method of Str so let's override this

method and let us create a different Str

method for dog so let's see how we can

do that the syntax is going to be

exactly the same so we have to say

Define Str takes in a cell

gives back a string

and let me print out a message over here

let us use the formatted string so we

can say

self DOT type

followed by the self dot name

and let us also print out the breed so I

can say the breed of the dog is

self Dot bead

oh sorry we can't print because remember

the Str method always has to return a

string so thanks to our typing my code

editor is catching an error so this has

to be

written not string

let me take out the brackets

now everything looks good now let's

create it all so I can go right over

here so I can say my first dog

is an instance of the class of dog

the name is whiskey

the age I can use my keyword arguments

as well so my age is five years old

number of legs is obviously four and the

breed maybe the breed could be Doberman

let's try to print out our dog so I can

say print

my dog let me save it and let me try to

run this file so here you can see we

have a doberman by the name of whiskey

and the breed is double man now let us

try and explore some more benefits of

inheritance

so you can see we have created a class

of dog which inherits from animals since

dog inherits from animals it also

inherits all of the behavior of animal

the class of dog does not have a method

for talk but the class of animal has it

so we can actually make the dog talk as

well so we can say

D1 dot talk let me save it and let me

try to run this file

and we get the output that whiskey can't

talk it but we can use our polymorphism

and we can make whiskey talk so let's

see how to do that

so inside my class of dog we are going

to create a new method called a stock

and the new method is going to override

the method inside the class of animal

so it's just like creating an another

method so we can say Define talk

it always takes self

this is going to return nothing and here

let's print out

so I can say self Dot

name

says woof and let me save the file and

let us try running this and now we have

the output whiskey is saying woof let us

go back and let us see what else we can

do

let me take out this space this class of

dog it can have its own Behavior now

since this is a dog our dog can also

sniff different items so let's create a

method called a sniff on dog so let us

go down over here so I can say Define a

method called a sniff

the first argument is always the self

now these methods are just like your

regular functions they can also accept

arguments so let me take an argument for

the item that the dog is supposed to

sniff

it is going to be a string this method

is also going to return nothing so I can

just say none

and let us print out a message

self dot name

is sniffing out the item so please note

that here we don't have to use self dot

because item is not an instance variable

item is just an regular argument on a

regular function let us go down and let

us try to sniff so let me say D1 I want

you to sniff for ball save a file and

let us run it so here we can see we have

the output whiskey is sniffing out ball

let us create one more class for cat and

since cat is also an animal cat is going

to inherit animal as well so you can see

we can have multiple classes that can

inherit from other classes as well let

me put a comment saying that this method

of talk

this is the place we are altering the

method and we are adding some

polymorphic Behavior so let me go down

and let me put a separator

and let us create a class of CAD

and creating that class is pretty simple

I just have to copy all of these things

so let me copy let me go down and

paste it right over here let's change

the name from Dog to cat

the type also is a cat this time we

don't want the comment now and the cat

says meow and we don't want this method

because cats are not so good at sniffing

so let me take it out let us create one

instance of our cat so I can say my cat

number one is my cat

the name is Jess

suppose she's two years old number of

legs is four and the breed could be a

Persian cat let us print out the cat so

I can say print

and let us also make the cat talk so I

can say C1 dot top that's it let us run

the file

and we have the output so we have a cat

named Jess the British is a Persian cat

and chess is saying meow

so now you get the idea just for the

sake of practice let us create one more

class for a dinosaur now this dinosaur

is also going to inherit from animal let

me copy and paste this separator let me

copy all of this as well and let me go

down and let me paste it right over here

so since this is a dinosaur I can just

say Dino and this has to be Dyno as well

and since we don't know what dinosaurs

can talk put some random text

now the dinosaur can also hunt so let us

create one method for hunt so let's

create one method called as hunt it

accepts itself

and returns a none

here I can say print self dot name

is out for hunting let's create one

dinosaur so I can say my Dino one is

equal to my Dino

suppose the name is Adam

age could be eight years old suppose the

number of legs are two and the breed

would be T-Rex let's print out the dyno

let us also make the dino talk and also

let us make the Dino Hunt that's it let

me save and let me run the file and we

have the output so this is a dinosaur

Adam is saying something Adam is out for

hunting

so now you get the idea we can have

multiple classes inheriting from a

single class or you can also inherit

from multiple classes as well but we are

not covering that in this tutorials let

me put a separator and let me show you

one nice trick we can also ask python if

a certain class inherits from other

class or not so let's see if the dog and

the cat inherits from animal or not so I

can say print

and we can use an inbuilt method called

as is instance the first argument is the

object that we want to compare so let me

pass my dog and the next argument is the

parent class that we want to compare

with so suppose I want to see if the dog

is of the type of animal so let me save

it and let me try to run it and here we

have the answer it's true and that's

because the glass of dog is inheriting

from animal now here I want you to

understand one point all of the dogs are

animals but all of the animals are not

dogs so please keep this in your mind

let us check if demon

is a kind of dog so I can say is

instance Devon and dog let me print it

out

and yes it is let us do one last time

for our cat so let me copy and paste so

this becomes C1 and

this becomes cat and let us see the

output so here it is C1 is an instance

of cat as well

now let's try to learn about decorators

so this decorators are like the higher

order functions but this higher order

functions are already built into python

this decorators can give some additional

behaviors to our classes

so we are going to have a look at couple

of these decorators some of the

decorators that we are going to see are

property static methods class methods

Getters and finally setters

so I have created a new file called as

decorators and I'm going to work inside

this file for this example let us

imagine that we are working for a store

and we have to write a software that

will manage our stuff now since all of

the staff members are also persons

so first I am going to create a class of

person and then I will create a class of

staff that inherits from person so let

us start with the person first

so I can see the class of person

our Constructor in it

self

and suppose we want to accept the first

name

this is a string the last name this is

also a string

and this returns nothing

inside let us create some instance

variables so we can say self Dot

first name is equal to my first name

as self Dot last name is equal to my

last name

let us also create the string method so

I can say

Str

uck and this always returns a string

so I can say return this is a person and

then I can say my

self DOT first name and

self dot last name let us create one

person and print it out so I can say

this is going to be sorry not permission

I want a person

the first name would be Lewis the last

name would be Zappa

and let us try to print him out

now let me try to run and see the output

so we have the output of Lewis Zappa

till now you are familiar with

everything

now let's go to the example now suppose

you want to retrieve the full name every

time now instead of creating one more

instance variable over here saying that

self Dot

full name is equal to something

something

instead of this we can create a property

and that property will create a full

name for us and we can retrieve it just

as we would retrieve any other instance

variables so let me take out this line

and let me show you how to use our first

decorator so let me go down over here

the way you use a decorator is by this

symbol at the rate and then you name the

decorate so this time The Decorator that

I want to show you this is called as

property

so this is our decorator

and after that let us create the

function so I can say Define

full name

this takes self as the first parameter

and returns a string next line we can

simply

create the full name and it has written

the full name so we can just say self

DOT first name and self dot last name so

what we have essentially done is this

full name right over here this would act

just like your instance variable so just

imagine that here we had one more

instance variable called as self dot

full name so this property will function

exactly like this let me show you this

in action so let me take it out

let us go down and let us try to print

the full name of the first person so I

can say print

first persons full name that's it now

since this is a property we don't have

to use brackets after this one because

remember full name is just like your

instance variable let me try to execute

the program

and here we have the output Lewis Zappa

now let us go back and let's start

working on some other classes but before

that let me put some separators so this

is one separator and this is another

separator

now let's create the class of stuff and

this staff will inherit from person but

let us try to expand our knowledge over

here Suppose there are different

categories in the staff there could be

an associate there could be a manager

and so on so we can have multiple roles

and each of these roles can have

different salaries so suppose if you are

a associate then your salary could be 15

for an hour if you are a supervisor it

would be twenty dollars if you are a

manager it could be 25 dollars

so what we want to do is whenever we

create a new class we also want to

dynamically give that person a different

salary based on his role sounds a little

complicated but don't worry let me show

you how to do this

now since we have to Define different

roles at this time using an enum is the

best option so if you have not seen my

video on enum I would highly recommend

you to go back and see that video so

that was in my section number four and I

think that file was this choices dot pi

so we are going to use this enums in

this file

I want to use enums because I want to

Define different rules let's see how to

do that let me go to the top

and first let me try to import a couple

of things so

from my package of enum I want to import

enum and I also want to import my auto

so now we can define an enum let me

create one called as class role so this

inherits from my enum

and inside this let me put some

documentation that this rule is for our

staff members

now let's create a couple of rules

suppose the first role is for an

associate so I can say associate and let

me write Auto over here the next one

could be a supervisor again is equal to

auto

the last one could be a manager so I can

say manager is equal to Auto let me just

save it and let us go down

and let's start creating our class of

stuff let me put some separators here as

well

okay now let us go down and here let us

start creating the class

and the class is of stuff and this class

inherits from person so here let us

first Define our Constructor so I can

say Define my init

the first argument is always self

now let us see now since stuff inherits

from person person requires two

arguments first for the first name and

for the last name so let me just copy

and paste right from here so I can take

this

and put it right over here

now the next argument that we want is

for the rule remember we want to take

the rule and we would be dynamically

creating the salary depending on the

role

so I can say I also want to accept a

rule and the type would be

rule

this method always returns nothing so I

can say none so inside this we want to

pass the data to our superclass

so let me put a comment and then I can

say

I want my super to initialize with my

first name

and my last name now let us create some

more instance variables maybe we can

accept one more parameter for the staff

ID so let me write it right over here

so I can say the staff ID

would be an integer now let us go down

and let us start creating the instance

variables so the first variable would be

for the staff ID and this is is equal to

the staff ID let us create one more

instance variable called as is

stuff and let us put it to true so

remember we can always create instance

variables even though we are not

accepting them inside our Constructor

method next it could be for the role so

I can say self dot rule is equal to

rule

now for the next one I also want to

record the date of joining for the staff

member so let's see how we can do that

so I can say self Dot date

joined

and this time the value has to be in the

format of date date and time fortunately

python has an inbuilt library for doing

exactly this and the name of the library

as you can guess it is called as date

time so let me go above and let me

import it so here I can say

from

my library of

date time

I want to import

date time now let us go down and let's

see how we can assign the value of date

time so here we can simply say date time

for now so what's happening is the

moment that we are creating this

instance

we can have the date time automatically

assigned to our variable

before we proceed I want you to wait and

I want you to think once we have a staff

member I don't want anyone to

accidentally change the date joint

so what's the solution let us try and

make this variable a private variable

now there is no real concept of private

and public but we have a convention so

whenever we put an underscore this means

that we want to keep this variable as

private you can also write double

underscore or a single underscore it's

up to you normally whenever we want to

enforce that it's a strictly private

then we can use double underscore

but a single underscore also means that

we want to keep this variable as private

so let me write a comment right over

here

so this is going to be our private

member and all of this are public

variables the next thing to do is we

want to assign the salary but the salary

has to be dynamically assigned depending

on the role if the role is often

Associated then the salary has to be 15

if it is the supervisor then the salary

has to be 20 dollars if it is a manager

then the salary has to be 25 dollars

let's see how we can dynamically assign

a new instance variable called a salary

and assign values to it so let me put up

a comment that we want to dynamically

create and assign values

so let's see we can use an if an else

statement so we can check if the rule is

for supervisor or for manager and so on

but we can also use our match statement

so in this example let us use the match

so I can say let us match for the role

the first case that I want to match is

for my role dot associate

so in case this rule is for an associate

then at that time I want to dynamically

create an instance variable called as

salary

and I want to assign the value of 15 let

us also add some type hinting so instead

of 15 it can also be 15.5 15.75 and so

on

so let us declare this instance variable

as a float

now you must be wondering why do I need

to have a type hint right over here but

here we don't have the answer is it's

because we have declared the types right

over here so this first name is a string

so by default this first name is also

going to be a string staff ID is an

integer so here the staff ID is also

going to be an integer and my Pi is

smart enough to infer all of these

things but here since we don't have this

instance variable declared anywhere we

have to be explicit and let us declare

the type is going to be a float here

again let us think about the visibility

I don't want anyone to change the salary

salary has to be privately managed so we

can see I can put an underscore or I can

put a double underscore let us go to the

next case suppose the rule is for an

supervisor then I can say self dot

underscore underscore salary

would be twenty dollars

then I can say if the rule is for a

manager

then I want to assign the salary of 25

let us also Define the string method for

this one so I can say Define my

Str self this return a string

so let me

return so I can say this is a staff

member

the name is

self now here I can use the property

that we have defined for full name

if you scroll little up

we don't have an instance variable for

full name but we have declared a

property and that's what I'm going to

use right over here I want to display

the full name so I'm using self dot full

name next we can also display the ID so

I can say ID is my self dot staff ID let

us go down and let us try to create a

staff member this time so I can say my

staff member is my

stuff the first name is Chico

the last name is Jonas staff ID can be

three two four five let's give her a

role of manager so I can use my enum I

can say the role is role dot manager and

let us try to print it out so let me

print my stuff that's it let me run the

file so we have a new staff member so

you can see right over here the name is

Chico Jonas and the ID is three two four

five let us go back and let us see what

more we can do with our classes the next

decorator is called as the class method

just imagine the scenario that we

already have a person in our database

and this person is joining our shop as a

staff member so what we can do is we can

simply take that person as an argument

if you see right over here we are taking

first name and last name as an argument

instead of this we can take a person and

from that person we can create another

class for the staff

so let us go down right over here

and this is called as class method and

now always remember this method is you

should create an another class till now

we have been working with instances but

what this class will do it will return

another class which is all the type of

stuff itself so let's see how to do that

suppose we want to create a new staff

member from an existing person so I can

say Define new so new is just the name

of the function you can write anything

that you want and since this is a class

method the first argument is called as a

class till now we have been taking the

first argument as self so we can see it

was selled

but since the class method works on the

class that's the reason why the first

argument is a class if you are still

confused then let me go back to my

diagram so this is a class and this is

an instance the class method is going to

work on the class itself that means we

can create a new person from a design of

the person that's what it really means

let us write the different arguments so

obviously we want to create a new staff

member from an existing person so we

need to accept a person next we also

need a staff ID so this is going to be

an integer then we also need a rule the

type is for the rule now here this

method is going to return an another

instance of the class and that instance

is of the type of stuff itself so this

function returns a staff let me add some

documentation saying that this is going

to create a new instance of the staff

itself and let's see how we can create a

staff in this case this class actually

means

staff so here we can see I want to

return

a new staff member

and the first name is going to be the

first name of the person that we are

accepting so I can say

person DOT first name the next argument

is

the person dot last name then we have to

give the staff ID and then we also have

to give role now unfortunately we can't

write this syntax but what we can do is

since this class means staff we simply

have to replace staff

with class and it's the same thing now

the written value is of the type of

staff

but what's happening is we are trying to

return the staff member before we have

defined the class of stuff so in order

for this code to work we have to do

something so we have to go a little up

and we have to say

from

future

I want to import

annotations

so what do I exactly mean to say is

since this method right oh yeah the

method of new is retaining a staff

but at this time python does not know

what the stock because python has not

yet created this class

but by importing this functionality from

futures

we can tell python what's exactly

happening so let us go down and let us

add one person to our staff member

so since we already have a person called

as Lewis Zappa maybe he joins our store

so let us create a staff member from

Lewis Zappa so let me say my staff

number one so here let us create a new

staff member by using this class method

the first argument as you can see it's

for a person so let me pass my first

person the staff ID could be one two

three four and the rule could be the

role of a supervisor now let us try to

print it out let me say I want to print

my

first staff member and this I can say

this is my second staff member

disable file and try to run it so we

have the output the first staff member

is Louis Zappa with id1234 and we have

one another if you are a little confused

then just keep in mind that class method

is a method that returns an instance of

the same class now let's try to move on

and let's learn a little bit more about

classes now since we have defined this

instance variable as private date join

but what happens if anyone wants to see

what is the joining date so we can

create another property that will

display the joining date so we can go

down and let me create a property so

here I can use my decorator called as

property let me Define the property

called as joined

on this text the self and this is going

to return a string

let me put up some documentation saying

that this is for the joining date of the

staff member and since this has to

return the joining date we can simply

say I want to return and here I can say

myself

dot underscore date joined

now if you're wondering why do we have

to do all of these things and the answer

is since this is a property we cannot

assign values to an property at least

not yet in technical terms this is also

called as in getter in short we can

simply get the value from here but we

can't set the value over here later on

when I teach you about Getters and

Setters at that time we can actually use

properties to get as well as set

different properties but for now let us

go with the flow

and let me try to save the file and let

me try to run it let us try to see the

joining date of Lewis so I can say

print Dot joint on

and that's it let me try to run the file

and we have a joining date now this

joining date looks pretty complicated

it's in a different format but

fortunately we can also have the output

which we can understand so let's see how

we can do that suppose I want to see the

date in a format of month day and the

year so let's see how we can format this

fortunately there is one inbuilt method

for our date time and that is called as

string format and we have to use a

couple of keywords right over here so

let me paste it over here so this

capital b stands for the month the

lowercase d stands for the day

and obviously y stands for the year so

let me save this and let me try to run

this file and here we have a much better

output so the date of joining Fort Lewis

Zappa is July the 6th and the year is

2022. let us see the last concept that I

want to teach you in decorators and this

concept is called as Getters and setters

I have already partially explained that

this property right here this property

acts as a getter that means I can always

get a date but I can't set a date but

let's see what happens if we want to set

and value suppose we promote an employee

suppose an associate becomes a

supervisor or a supervisor becomes a

manager that time we also need to

increase the salary so let us see how we

can do that by using our Getters and

Setters now if you remember we have

declared the salary as a private member

but what happens if our HR department

wants to see the salary so first let us

create a property or a getter to see the

salary and then we will see how to use a

setup to set the new salary so let us go

down and let us create one property for

the salary so I can say property and let

me call it as

salary tax the self as an argument and

this returns a string I think I have

declared it as a float yeah it's a float

so this has to return a float

let me put a comment

so this acts like a getter of the salary

and we simply have to return our self

dot underscore underscore salary let us

see the salary of Lewis so let me say I

want to print

stuff one dot

salary and that's it let me run the file

and here you can see the salary is

twenty dollars for an hour now let's see

what happens if I try to set the salary

so if I say my S1 dot salary is equal to

17

let me save it we have an error so if

you just try to hover

it says that property salary is defined

in staff is a rate only so what this is

trying to say is we can only get the

value we can't set and we can't set

because this is just a read only

property so this is the beauty of

Getters and Setters we can't

accidentally change the values but what

happens if we do want to change the

value at that time we need to create

another method which is called as a

setup let's see how to do that normally

you would use a Setter when you need to

do some kind of validation before you

want to set the values now in this case

let us see what kind of validation do we

require if you remember if the rule is

foreign associate the minimum salary is

15 dollars for a supervisor the minimum

salary is twenty dollars now if the role

is for supervisor but if we try to set

the salary which is lower than 20

dollars then we don't want that to

happen so this is a part of our

validation logic and we can use that

inside our setup method the way to

declare the setup method is kind of

weird in Python but let me show you how

it is so the syntax is I want to say for

my salary this is the setup so this is a

Syntax for the setup this simply means

that we are declaring a Setter method

for the property of salary let us create

the function for

salary

obviously the first argument is for the

self and the next argument is for the

amount that is the amount of salary that

you want to give the employee so I can

take one more parameter called let's

amount the type would be of a float and

since this is a setup we are not going

to return anything so I can say none let

me put up a comment saying that this is

our setup method

and inside of this let us see how we can

use our validation logic and how we can

set the new values let's start with the

associate the associate cannot have a

salary Which is less than 15 dollars so

we can say if my self dot rule is role

dot associate

and if the amount

is less than 15 dollars that means it is

going to fail our validation because we

can't give an associate a salary Which

is less than 15 dollars so let me print

out a message saying that error

associate cannot have a salary less than

15 dollars

now what happens inside any of the

methods you have access to all of the

instance variables so if you see I'm

using this instance variable called as

self dot Rule and we have defined this

self dot role right over here

so this is where it is online number 60

but since we are inside the same class

we can have access to all of the

instance variables the same thing is

happening everywhere so for example in

this property of salary I can access the

salary a natural the salary is being

declared right over here either online

66 68 or 70 but we can still access all

of the instance variables let us go down

and let us create the next validation

logic so this was for an associate next

let us create one for the supervisor and

the last one for the manager so we can

say

else if

the rule

is for the role of supervisor and if the

given amount is is less than 20 then we

need to print an error message so we can

say supervisor cannot have a salary

Which is less than 20 dollars let's go

to the next one we can again check if

the role this time

is for the role of a manager

and if the amount is less than 25 then

let us print one more error saying that

manager cannot have a salary less than

so this should be 25

dollars for an hour now let us go down

now what happens if we pass all of this

validation that means we have the right

Rule and we also have the right amount

in that case we can assign that amount

as a salary so here I can say else

if everything is fine

then my salary is equal to the given

amount and let me print a nice message

saying that self dot full name

now has a salary of dollars and

self dot salary and I can write per hour

so remember that this salary is a

property so as you can see the visual

studio code is telling you that this is

a property and this is a get a method

now let me save the file now let me try

to run it if you see online number 120 I

am assigning a value of 17

but the role is for a supervisor and if

you see inside our validation logic

supervisor cannot have a salary of 20

that means we should get an error let me

save the file and let us try to run it

and see if we can get an error and

that's it we have the right output so

it's saying that error supervisor cannot

have a salary less than 20 dollars for

an hour what happens if you try to set

the salary which is valid so I can say

s1. salary is equal to 20 or maybe I can

say 22 so let me save it and let me try

to

run it and we have the right output so

on the next line you can see Louis Zappa

now has a salary of 22 dollars for an

hour let us go back to the file and this

time I want to show you the final

decorator in this section now we have

been inheriting classes for example here

the class of staff is inheriting from

person in some of the earlier examples

we were inheriting classes such as

animals dogs and so on but what happens

if I want to say that you can't inherit

this class whatever class I have created

this is the last and final class and no

one can inherit it we can do that by

using a different decorator but first

let me import that

and that comes from our typing Library

so I can see right over here from

my library of

typing

I want to import

final

and just before the class stack we want

to declare as final we have to use it so

suppose I want to say my class of staff

is a final and no one can inherit it so

I can just say

at the rate and this is going to be my

final class

let me save it and let us give it a try

so suppose let me put a separator over

here

suppose someone creates a class called

as HR

and let us try inheriting from staff and

we can keep the body as empty so let me

just write pass

let me try to save it

now you can see the code editor is

highlighting that we have some issue and

it is saying that the class of stuff is

marked as final and it cannot be

subclassed so let me just comment it out

and I think we have done for this video

let us start converting our game into

classes

so the first thing that I want to do is

let me just copy and

paste it inside this folder let me

rename from 3 to 4 and let me change the

documentation so this is where we are

trying to improve our design by using

classes so let's see how we can start

using classes inside our game till now

we have been using an alias but now what

we can do is

instead of using an alias for the

character we can actually create a class

for character so let us go right over

here and let us create our class for

character so we can see class character

now let's see what instance variables do

we require

now each of the character has three main

things you can see right over here name

attack power and life so we can Define

these as our instance variables so let

us do that

Define init

cell the first is the name is going to

be a string

attack power integer

life is also an integer

this returns nothing

let me write some documentation saying

that this creates an instance of

character

so here I can say self dot name is equal

to the name self Dot attack power is

equal to the attack power

self taught life is equal to

the life let's also create a nice Str

method so we can say

Define a string method for this one

self and this always returns a string

and inside let us make a nice string

representation for the character so I

can say

the name of the character is self dot

name the

attack power

is going to be

self dot attack power

and the life is going to be

self

dot live let me save it next let us see

how we can create superheroes and our

villains

now superheroes can inherit from our

character and our vlans can also inherit

from our characters

so let's see how to do that so let's

create a class called as superhero so

you can say my class of

superhero this inherits from the

character let me put some documentation

and let us write the init method now

since this is inheriting from character

I can simply copy and paste all of this

copy and paste

and this

returns nothing

now inside since we are inheriting we

can use the super keyword and we can say

super

dot init and we can simply pass

the name

attack power

and the life

so the superclass of character would be

responsible for creating all of this

instance variables

next we can also create one more

instance variable called as a rule

so this instance variable can say that

this is a superhero or this is a super

villain

in order to define a role again let us

go back and create a nice enum so let me

go to the top

and first thing that I want to do is I

want to import so from enum I want to

import my enum

and also I want Auto I can say my class

of

character type this inherits from enum

let me add some documentation then I can

say superhero and assign it to Auto then

I can say villain and assign it to Auto

as well so let me save this and let us

go on below

here I can create one more instance

variable I can say cell dot rule and

this would be equal to my character type

Dot

superhero

let us also create the Str method so I

can say

Str yourself this returns a string

let me copy and paste all of this

let me put it here

not just before the name I can say that

this is a superhero so I can say

this is a superhero and put a nice Arrow

now since this line is really long so we

can do one small trick

let me take it down and I want to have

brackets around this so this is my

opening bracket and right over here I

can put my closing bracket

and what I can do is let me cut this

portion out for the life

and on the next line I can simply again

say F and paste it over there

and that's it so this is also a valid

syntax next let us create the same thing

for our villain so I can simply copy all

of this

paste it down

so from Superhero

it becomes my villain

and this has to be my villain

this has to be again my villain let us

go down and we don't need all of these

things because we already have a class

for character

so I can take all of this out I don't

want any of this

now let's see what we can do with life

with life I'm going to do a very small

trick I am going to create a class for

life but all of the methods would be

static that's because I don't want to

create an instance of life it makes no

sense I just want access to Hero life

and we're in life so let me create it

first and then I will try and explain so

here I can say this is going to be a

class of life

and what I want to do is I want to take

all of these things inside

so

till yeah

all of these things goes inside my class

now let's start changing them one by one

now what happens is you can see my these

two variables

these are outside my init method or

rather I don't have a init method over

here and that's also perfectly fine

these two variables belongs to the class

so they can also be called as my class

variables and that's what I want there

is one other alternative approach let me

paste it right over here

that approach is called as data classes

but I am not going to cover them inside

this course you can use this link to

study more about data classes

now let us continue with our journey

I'm going to use a new decorator which

is called as static method so let me

copy and first let me

paste everywhere and then I will try and

explain what's happening since this hero

life and we're in life belongs to the

class I no longer have to use the

keyword of global and hero life

so I can take it out

and now what happens is this hero life

is actually a class member of the class

of life so I can simply say

life dot hero live plus equal to life

so this means that this hero life

variable references exactly this one let

me save it and then I will try and

explain what this new decorator is doing

now if you see I am not taking the

argument as self for static method

that's because this decorator works on

the class directly it does not have to

create an instance let us go back to our

decorators file and there I will try and

demonstrate what's happening so this is

our decorators file

now let me go back to the diagram itself

so here is our diagram again whenever I

am saying that this is a static method

means that we can call that starting

method from the class itself

we don't need to create instances for

example

here in our decorators file you can see

that we have this one date time dot now

no matter whatever the class you don't

need an extra instance we can have a

common functionality

that's what I mean to say by a starting

method so basically static method is

just like any other method but it does

not take a self argument because it

works directly on the class and not on

the instance suppose we can create a

static method called as describe and

that static method will just describe

what this class is going to do so let's

create it and see it in action so let me

go down and just after this property

joint on I can create my static method

so I can use my decorator

of static method the name would be

describe

so again this is not going to take

itself neither this is going to take a

class because this is independent of

everything this is going to return none

let me write some documentation what's

happening so this method is just going

to describe what this class is all about

so I can just print out that this is a

class to

create a path member

now let me go down

and here I can simply call this method

on my class so let me call it at the top

I can say staff Dot describe and since

it's a method I need to use my brackets

that's it let me run this file and here

we have the output class to create a

staff member Now using this same concept

let us go back to our game now here what

happens is we have two class members

hero life and we're in life

I want to get access to this variables

and that's what I'm doing right over

here by using a static method you can

get a little bit more clarity when we

use this method later in this video

for now let us change all of the syntax

so this one also becomes my

static method and I don't want Global

and this becomes my live dot hero live

same thing for this one this also

becomes my static method I don't need

the global I can say

my life got villain life

and

same thing for this one as well

so this also becomes my static method

I don't need the global and this is my

life Dot

that's it just save a file let us go

down

so here what we can say is this is a

list of superheroes so instead of just

character I can say

This Is My Superhero next what I can do

is I can create instances of My

Superhero by using the newly created

class so I can say my Iron Man

is a superhero the name is obviously

Iron Man

next the attack power is

250 and the

life is

1000 so similarly let us create

instances for all of the other

superheroes as well

so here we have we have a black widow

Spiderman and Hulk now since we have

everything in classes I don't require

this constant so I can just take them

out they are not required this becomes a

list of

superheroes

and I have to change this as well

so Iron Man

Black Widow

Spiderman

and Maya Hulk let us go down so this

instead of character we can say this is

going to return a superhero rest

everything Remains the Same so let us go

down to villains this is going to be a

list of our villains

again let us do the same thing let us

create instances so I can say my Thanos

is equal to my villain

the name is

Thanos

my attack power is 400

life is 1500 let us create the rest as

well so we have all of them let us take

out all of this it's not required

this becomes my villain and we need to

change all of this as well

fastest tunnels then it's The Red Skull

and then is Proxima let us go down so

this becomes my villain and everything

is looking good let us go down and let

us see where we need to do some more

changes

this becomes a

superhero and this becomes a villain now

let's see where we are going to use the

class of life and the static methods

that we have created

we are going to use exactly right over

here for the set life and for the actual

attack so here I can say from my life

I want to access the static method

called as increment hero life and I

simply want to pass the life of the

superhero so I can say my superhero dot

live and we can use the syntax because

life is just an instance variable on

superhero so this is the beauty of

working with classes

let us go down again we can do the same

thing we can say

from my class of life I want to access

the static method of increment villain

life

and I want to pass the life of my

villain we don't need all of these lines

we can take them out we can do the same

thing right over here as well so I can

say

live dot I want to decrement my hero

life

let's pass

the attack power of the villain and same

thing below live broad decrement villain

life and let's pass the superhero

attack power

we don't need all of this

we can take it out

let's save our file now let us go to

this line it seems that we have some

error so let's see what's happening

value of superhero is not indexable oh

yeah that's right now since this is a

class we have to say superhero

dot in the name and here also villain

dot name

and now the error is gone let us go down

and here what we can do since hero life

and villain life are now the class

variables of life so we can simply say

live dot hero live

and yet it becomes life dot villain life

and now we have a beautifully typed

object oriented game design so let me

save my file

and let me try to run this

now that's really amazing everything is

working perfect and it seems that I have

also won the game welcome to the last

video in this section this video is all

about the different magic methods that

we can use inside our classes

till now we have seen only three magic

methods one was in it second one was

repr and the third one was Str but

python provides many more of this magic

methods so let me try and cover some of

the most commonly used magic methods

what I've done is behind the scenes I've

created a file called as box

and let us start working with this as

you can see it's completely empty so

let's create a class

call it as box

and

the edit method this box is going to

have two sides so I can say my side a

the type is an integer

similarly we have side B type is an

integer

this is going to return nothing

and

my instance variable so my side a

is equal to my side a and my

side B is equal to my

side of B so let's create the wrapper

method so you are already familiar with

it I am just returning a new string

called as class of box now let me create

the Str method so till now there is

nothing new to you inside my Str method

I'm just returning a nicely formatted

string saying that this is a box and

side a and the value of side B let us

create two boxes so this is my first box

and this is my second box let us also

print them out so I can say

print my box first and print my box

number two as well

so let me save the file and let me run

so till now there is nothing new to you

let us go back now suppose what happens

if you do something like this I want to

say I want to add both of them together

so if I say B1 plus B2 is equal to my B3

and then I want to print my B3 let us

save and let us try to run this file and

see what's happening

it's saying that this is an unsupported

operand and that's because python does

not know how to add one box with another

box but we can implement this

functionality by using different magic

methods

so if you go back and if you say minus

again if you try to run

again we have some sort of an error

because python does not know how to

minus these boxes

and the same thing will happen for all

of the different operations such as

multiplication division less than

greater than less than equal to greater

than equal to and so on but what we can

do is by using different magic methods

we can implement this functionality on

our class so let's see how we can do

this step by step the first thing that I

want to show you is how we can use the

in operator so let me give you a small

example this is my IPython shell

if I say

o in

octolium

so we get a true so let us see how we

can implement this syntax of in for our

box

we can implement this by using another

matching method and the name of this

matching method has to be specific and

the name is underscore underscore

contains underscore underscore

this tricks self as the first argument

the next argument is what we want to

check so let me name that argument as

number

for now let us skip the type and I will

come back to it a little later let us

see what this type has to return let us

go back to my iPad and shell and here

you can see the return type is of the

type of Boolean so that's what is going

to be the return type

so this function is going to return a

Boolean that is it has to return true or

false the logic for this is pretty

simple let me again go back to my iPad

and shell and let me show it first over

here suppose we have a list so let me

call it as L and this is 1 comma 2.

now if I say 1 in my list of L

we get the answer of true if I say 3 in

my list of L we get the answer of false

so what we can do is we can simply

create a list of both the sides so side

1 and side 2 and we can simply compare

that the other argument is inside that

list or not so let's see how to do that

here we can simply say return

if the given number is inside my list

and I can say

the first List member is my self dot

side of a

and my

side of B

now this method works but this is not

foolproof what happens if this second

argument is not a number if someone

provides a Boolean value or some other

value then how we can say the user that

we have an error so for this let me show

you some new syntax so let me go down

let me put a comment now if you remember

when I was teaching you about classes

and instances

we use one method which is called as is

instance and then we could check if the

dog is an instance of animal if the cat

is an instance of animal or not so we

are going to do the same thing right

here we are going to check if this

number is of the type of integer or not

if this number is not of the type of

integer then we can simply throw a

number so here what we can say number

it can be any object we don't know

beforehand what the user is going to

provide so object is a generic term and

if you remember everything inside python

is an object so we can say number could

be any object and now let's try to see

if the number is an integer or not so we

can say if then we can use the inbuilt

function called as is instance

then we can say is my number and

instance of my integer and if not so let

me go up and I can use the word if not

here I want to throw an error so I can

say

raise not implemented error now since

this number is not the type of an

integer we don't know how to do the

comparison so we simply raise an error

in the next section I'll be teaching you

more about errors right now just try and

understand if in a situation we don't

know what to do we can simply raise an

error so that's what we are doing right

over here let me save it and let me show

you it in action so we don't want this

one here I can say is 4 inside my box of

1 and I can also say is

6 inside my box of one let me save it

and let us run this file

so here we have the output let me take

it up 4 in box number one yes and that's

true

six in box number one false let us see

what's happening

so this is our box number one we don't

have a six over here now watch closely

what happens if I write something like

this

I can write a over

let me save it and let me try to run it

and this time we get an error and this

error is of the type of not implemented

error and that is what we have coded if

you go back to our line number line

number 15

since a is a string but we want an

integer so what's happening is in this

line we are raising an error if we try

to evaluate is instance number is a type

of instance it's going to fail because

here the number is actually the string

of a so if not an instance of integer

then we want to raise an error and

that's what we are doing so if we just

open up the terminal we are throwing and

not implemented error so this error

which is called as not implemented error

so this is a standard way of throwing an

error inside this method let's see some

other operators so if I want to say is

my box one

is equal to my box 2. let us see how we

can do this syntax

right now let me take it out

and since this line is always going to

fail let me take it down and let me

comment it out so let me go right over

here and

I want to copy and paste till this one

let me go down

and let me paste

since we want to see both the boxes are

equal or not

the magic method is called as equal

short form EQ let me write the proper

documentation so this

so this checks if both boxes are equal

or not

and this line is the standard check that

we want to have now let's see what to do

right over here this time we expect a

box so let me change the name of the

variable from number to a box let me go

down so this also has to be

box here we want to check if the given

object which we call as box

is an instance of the class of box or

not so instead of integer this has to be

my class of box

so if the another object is also a box

only then we can have a comparison but

there is a small limitation of python we

can't use the syntax directly but we can

use a small hack and let me show how we

can do this

again let me go to the top and I can say

from my future

I want to import my annotations

and now we can use the syntax which is

right over here now let us see how we

can compare both of the boxes

now what happens is the box has a side

side a and a side B if both of the boxes

has to be equal that means both of the

sides should match so that's what we are

going to see right over here I can see

that return self dot side of a is equal

to is equal to

the Box dot side of a

maybe we can rename this variable we can

call this as the other or we can say the

other box

right now I'll just write this as other

so right now we are comparing the self

plot side a with others side a

similarly we also need to compare the

side b as well so here I can say I want

my side a to be equal and I also want my

side B to be equal so I can say self

plot side B

has to be equal to the other Dot

side of B and this also needs to be

changed from box to other so let us go

down and here we can say I want to print

if my box one is equal to my box 2 let

me save this and let me

run this file

and here we have the output false box

number one is not equal to box number

two let us go back and let us try to

implement some other methods let us try

how we can check for less than and less

than equal to so what I mean is how we

can implement this Behavior B1 less than

and B2

or less than or equal to B2 so let us go

up right where and let us start creating

our method let me copy till this line

and let me paste it over here

so whenever we say that we want to

compare if it is less than the magic

method is called as

LT which stands for less than let me

also write the proper documentation so

instead of this we want this one now

let's check if the other box is smaller

or not one simple way of doing this is

by calculating area or you can also use

this syntax but I think using the area

is a much more cleaner method now since

we already have the side A and B we can

define a property for area and we can

use that property right over here

so let me go over here and let me create

a decorator for my property I can say

this is for my area

self

and this returns an integer so I want to

return

my site a multiplied by

my side of B

now this makes things much more simple

so here's simply what I can do is I can

go right over here and I can say return

self dot area

is it less than the others area and

that's it

let me save my file but what happens is

this magic method is only for less than

we also want to compare for less than

and equal to so if you go to this line

number 44 we have an equal operator as

well

so let's see how we can Implement that

and that's pretty simple let me just

copy all of this

and paste it

now this magic method is called as less

than or equal to that means L and E and

on this line we simply have to add equal

to and that's it so let us start

printing all of these things so let me

go down over here here I can say I want

to print if my B1

is less than B2 one more beauty of this

magic method is we have simply defined a

magic method for less than and less than

equal to but python can infer how to

implement greater than or greater than

and equal as well it simply has to

reverse the logic and python does it

behind the scenes we don't have to

create another methods since we already

have these two methods in place

so here I also want to check if my

box of one is greater than my box of 2

we can also use the less than an equal

so we can we can see

if this is my less than or equal and we

can also use the greater than an equal

so this one

let me take out this line let me

comment all of this let me

comment all of this and let us try to

run this one

so here we have the output let us check

if the output is true or not the first

one is is my box number one less than my

box number two

let's see what's happening

3 multiplied by 4 is 12

2 multiplied by 5 is then so that means

my box number one is larger than my box

number two

let's see the statement so this is

exactly opposite my box number one is

larger so this becomes false and that's

what we have over here in the second

line yes my box number one is larger so

we have the output of true

and so on for the line number 53 and 54

as well let us go back and let us see

some other methods as well now let us

see how we can Implement some basic

operations such as addition

multiplication division and so on

luckily writing all of those methods is

just a matter of copy and paste so let

me show you first let us create a method

for addition so where we can add two

boxes let me copy and paste since this

is for addition the magic method is

called as ADD let me change the

documentation and let me also get my

spacing right

and here we simply have to add the areas

that's it let's check what's the error

oh yes now it's saying that it got an

integer as the return type but it is

expecting and Boolean so let's see

what's happening oh yes here we have

written Boolean as the written value but

that's not what is happening area is an

integer so let us update this from

Boolean to an integer so you see there

are so many benefits of having a very

well typed code let us Implement other

methods for subtraction multiplication

and division as well let us create one

for subtraction

and since it is a subtract we can

say that this is subtract let me change

the documentation

and this becomes

minus let us do for

multiplication

and since this is multiplication this

becomes mul for multiplication

let me change the documentation

and this becomes multiplied the next one

for division now this becomes a little

tricky if you think for division it

would be just div you are partially

right but that's not what is happening

let us go back to our IPython shell and

let me try and explain what's going to

happen

so suppose if I say 1 divided by 2

we have the answer of 0.5 this is called

as true division now if I say 2 divided

by 3 we get the answer of 0.6 as well

again you can see this is a true

division

but if you watch closely we have two

integers and the output is a float what

happens if you want to have the output

as an integer as well

in that case we have to use

double slash and then three

so this syntax is called as flow

Division and this syntax is called as a

true division the written value of an

true division is always a float and the

return value of floor division is an

integer so let us go back to our code

and see how we can do this the first one

can be our true division so I can just

say this is my true Division and this

becomes my true division now remember

that the return type is going to be a

float this time

since this is going to be a true

division

let me copy and paste this for our

floor division so here I can say I want

to have my

floor Division and here I want to have

one more slash and that's it let us go

and let us print out all of these things

so let me go right over here and let me

put all of my print statements let me

comment all of these things out and let

me try to run this file and here we have

the output

so B1 minus B2 is 2 let us check if that

is the case or not

so the area of first box is 12 the area

of the second box is 10 and that's what

is happening so 12 minus 10 we get the

answer of 2. and if you check the answer

of all of the other methods obviously

all of them are going to be right

when I was going through the code I

realized that we have a small mistake

it's not really a mistake it is just

about following the best practices of

python so let me try and explain

everywhere we are trying and throwing

this error called as not implemented

error which is absolutely fine but the

guidelines in Python suggest that

whenever we have a binary operation that

time we simply have to raise an error

which is called as not Implement so this

and this are two different things please

keep that in mind so let me Rectify all

of these things

so let me just copy and paste it

everywhere

so all of this let me do my multi select

this becomes my not implemented

this one and this one as well so let me

save the file what I mean by an binary

operation so all of this operations

minus plus multiplication division Etc

all of these are called as binary

operations

but this one when we are checking 4

inside B1 this is not a binary operation

so in this case we are using

not implemented error and whenever we

have a binary operation at that time we

are using just not implemented

well that's it for this video and now we

are officially at the end of the section

and I will see you in the next section

where I will try and expand your

knowledge of error handling in Python

welcome to a new section this section is

all about error handling in Python

now errors in Python can be divided into

a couple of categories

the first category can be thought as

your syntax errors that means whenever

you make some errors in typing those

errors are called as your syntax errors

now fortunately these errors are very

easy to catch and these days we have

much better tooling inside Visual Studio

code and our plugin my Pi or if you are

using an IDE such as pycharm all of

these tools will help you to catch

syntax errors

the second category can be thought as

your runtime errors

that means this errors are not reflected

inside your code but whenever you try to

run it this errors will pop up this

error is a little bit difficult to debug

so as we saw in our last video whenever

we can't handle a situation we were

raising some kind of Errors so when we

raise those kind of Errors at least we

can have some idea what's going wrong

during our run time and this errors in

Python are called as exceptions so let's

see one by one all of this the first

thing that we are going to see is the

most common one and that is called as

your syntax errors so let me go back to

my code editor and what I've done is

behind the scenes I've created a new

folder called as 0 7 error handling and

this is a file called as maths dot pi

now let's see what's happening there is

some red line right here print X and Y

this is an example of my syntax errors

so at least I need to have a comma right

over here or I need to have like my

formatted string so something like this

and this has to be inside my curlies

and this as well

and now if you try and save your error

will go away so this is one of the most

common errors called as a syntax error

now let me try and show you what do I

mean by a runtime error so what I've

done is I've created another file called

as divider and let's see what's going to

happen this time let's create a function

that divides two numbers so I can say

Define divide

the first number could be an X the next

is in y

and this does not return anything

and we can simply print out my x divided

by y so till now everything looks

perfect and we don't have any errors now

let me go down

and let me say I want to divide my

four

by zero now what's going to happen we

can't divide any number by zero it's

just not possible so what is going to

happen is our program is going to panic

and it is going to exit so let me save

and let me run this file and let me show

you this in action so here it is our

program pan it and we have an error

which is called as zero division error

division by zero so this is an example

of runtime errors

there are no visible errors inside the

code but whenever we are trying to

execute this code we have some errors so

let me put a comment over here so this

throws or raises an error and the type

of the error is zero division error if

you open up a terminal that's what we

have so this is a type of error or

rather this is a type of exception in

the world of python let us try to expand

our knowledge of errors

so in this program we saw that when we

Panic we get an error this error is a

very specific one and the name of this

error is called as 0 division error now

python gives us an error handling

mechanism in the form of try and accept

blocks so let us see how we can use that

syntax to catch this zero division error

so let me go back and let me create a

new file and I can name the file as

smart

divider dot pi

so let us create our function called as

smart divider again it's going to accept

X which is integer

Y is also an integer this is

returning nothing

now let's see how we can do a very smart

division last time we saw that when we

divided by 0 we got an error and that

error was 0 division error we can catch

that by using our try and accept blocks

so this is how the try and accept blocks

goes so inside the trial

this is the code that you want to try so

trying the code

and in case this code fails then we can

say accept and this is the place we are

going to catch the specific error

and we have that error then do something

with the error

let us see how we can fill these blocks

so inside try let us see if we can

divide or not so I can just say my

number

is equal to x divided by y

and I want to

print out my number now what happens if

we get the same zero division error so

we can tell python that whenever we are

going to have that error I want my

accept block to catch it so I can say

accept my

zero division error so that means

whenever I get this error I want to

catch that error and after catching that

error I can do something with it so let

me just print out some message

can't divide by 0 use some other number

now let us go back and let us try

dividing by 4 with 0

and let us try to run this so this time

we have a much better output our program

is not panicking instead we get a very

helpful message saying that can't divide

by 0 use some other number so as you can

see we can handle our errors now imagine

one more scenario

instead of 4 I write as a

then what happens let us run and see

what's happening this time again we have

some other error and this time the error

is called as type error and

unfortunately our program is panicking

and it is terminating Midway let's see

how we can handle this situation as well

so let me go back and let me create

another file this time I will name it as

really smart divider and let us start

writing the code for this one let me

copy and paste the code from my smart

divider so

let me take all of this and paste inside

my really smart divider

so since this is a really smart divider

I can say this is my really smart

divider let us have a look at the error

one more time so what's happening is

let me take it down

so what's happening is we were trying to

divide by a

now a is of the type of a string and

fourth is all the type of integer

both of them are essentially of

different types so that's what this

error is saying so we have a type error

let us see how we can catch this error

as well we can chain our accept blocks

so we can say if we have a zero division

error then I want to catch it right over

here but if there is a type error so I

can say accept my type error let me

catch it right over here

and this time I can print out both X and

Y needs to be a number but what happens

if we don't know what kind of error we

are going to get that time we can use

some other syntax and this is called as

accept

exception so now this exception class is

the base class for all of the different

exceptions so just as we saw in our

classes dog was a subclass of animal so

same thing all of these errors zero

division error type error and all of

these things all of these errors inherit

from exception now the same logic goes

over here

dog is an animal cat is an animal same

thing any errors that we get is also an

exception and that's what we are trying

to catch over here here we can also add

an alias so we can say I want to catch

my exception

as a variable called as e then we can

simply print out what happened wrong so

here I can say

oops something went wrong and let me

print out my exception which we are

calling just as e

and that's it this time we have a really

smart divider let's try to invoke it

so I can say my really

smart divider cannot divide 3 with 0 can

you divide

three with four

can divide 3 with a

now let me try to save and run this file

and this time we have the output

so the first time we have a 0 so we have

the output can't divide by zero

second time everything looks good so we

have the answer

third time we have a string so we have

the output both X and Y needs to be a

number we are making really good

progress with errors

and let us learn the last missing pieces

for our error handling

so let me create a new file let me call

it as try

else and finally dot pi

and let me copy all of the code from my

really smart divider and let me paste

into this file let let us call the

function just as divider so let me

take this out

there are two more pieces for this

puzzle so till now we have seen the try

block and the accept block now let's see

the else block now what happens is if

this condition succeeds then the code

inside the else block can be executed so

inside my try block I am just trying to

see if I can divide x with Y if this

succeeds then I can say that I want to

print

right over here the naming is a little

weird but we can't really help it so

whenever a try block succeeds we can use

an else block to execute some other code

as well let me add a couple of print

statements just for the sake of clarity

so else is executed only when try

succeeds so we are trying to see if x

can be divided by y or not and if that

succeeds only then we want to print out

the number now the last piece is called

as

finally

now no matter what happens if the try

succeeds or it fails this finary block

is always going to execute so let me

write a print statement right over here

you may not appreciate the beauty of

this block finally but just imagine a

scenario that you're writing a web

application and you want to write

something to the database or suppose you

are interacting with some other apis and

you want to do some kind of a cleanup

operation maybe you want to delete some

files maybe you want to insert some

files so no matter the outcome if the

operation succeeds or fails we can have

that logic inside the finally block now

let me save this file and let me run

this file

so as you can see

we always have this output of finally so

no matter the outcome we always have

this block let me comment one of this so

that we have much more clarity we try

and run the file so we have a zero

division error and since we have some

error the code inside the else block did

not execute but the code inside our

final block executed and we have this

output right over here now let me go

back and let us drive the second one let

me comment this out and let me try to

run this so now see what's happening

since this operation is succeeding

we go to the else block and inside the

else block we first print these two

lines

so that's what is happening we have

those two lines right over here and

after that we are printing out the

number so which is 0.75

and this block finally this is always

going to execute so that's what is

happening so if you try with this one

you can have the same output so let me

uncomment this so since we have an error

our else block will not execute let me

run this file for the last time so here

it is we have a statement saying that X

and Y needs to be number

the code inside the edge block is

totally omitted but the code inside

final block is executed and we have the

output right over here let us have a

look at the next kind of error and this

kind of error is called as assertion

error now this assert statement that I

am going to show you this statements are

very useful in testing now we are not

going to learn testing in the series but

I just wanted to show you the assert

statement so what I have done is behind

the scenes I've created a file called as

find Sohan so what's going to happen

right now is

Lewis has a list of friends and let us

try to see if we can find a particular

friend in that list or not so let me

name the function as find Zohan

and this accepts a name of the friend

that we want to find so this returns

nothing so we can say none

so this is the list of friends so I can

just copy and paste it right over here

now let us create our try and else

blocks so normally you'd write as name

in my list of friends

and this would give you a Boolean value

of true or not

but what we can do is we can also use

the keyword of assert so what I mean to

say that I want python to assert if the

name is inside the list of friends or

not if the name is not present that

means we can have a kind of error and

this time the error would be assertion

error so let us use the accept block to

catch our assertion error so you can say

or not arithmetic I want

assertion and then we can see let us

print out the name

not found now in case we get a match and

this statement succeeds then we can also

write the else block and we can print

out saying that

found

followed by the name

we can also include the final block

remember that this is always going to

execute let us print Maybe

goodbye that's it let us try searching

for a couple of friends

so I can say find

Zohan and let us try to find for Zohan

himself let me copy and paste

and let me try to search for Sarah and

let us run this file

so we can see

in the first case we found Zohan so we

are printing out fine Zohan the final

block always executes we have so we have

goodbye as well

the second time we could not find Sarah

and it threw an assertion error which

was caught inside this except block

so we have the output of Sarah is not

found

and

the finery block again executed so we

have the output of goodbye till now we

have been seeing how to catch an error

but now let us see how we can actually

throw an error

so let me create a new file right over

here

this is going to be my fine Zohan part 2

dot pi

and let me copy and paste all of this

code from here

now let's get working on this file now

since I am not catching any errors I

don't require this try and else blocks

so let me take it out now if you can't

find the name inside the list of friends

at that time we want to raise an error

so we can say that we can't find the

given value that means we can raise a

value error here we can say if

the name is not inside my list of

friends

then I can raise an error and I can

raise a value error and I can also give

a custom message saying that the name

is not found

and we can also say else in case we find

the match we can simply

print it out we can say found

and followed by the name so let me save

it and let me try and run this file

so the first time we have a match so our

program will not panic but the second

time we don't have a match and our

program will Panic with an value error

so let's see that in action

and here we have it the first time we

could find a match so we have an output

but for the second time our program

panicked and it threw the value error

which you can see right over here so we

have a value error followed by our

message saying that Sarah is not found

well this brings us to the end of this

section as well if you want to learn

more about errors you can go to this

link so this is all of the files from

GitHub go inside this folder error

handling and go to this file readme I

have put up a reference right over here

you can visit this link to learn more

about errors and that's it for this one

and I will catch you in the next section

welcome to a brand new section

this section is all about learning

packages packages are used to organize

our code so let's see how to create some

packages but before that let us see a

couple of examples where we have used

them for example inside our game we have

been importing a random end from random

I also enum and auto from enum what this

means is we are importing something that

is useful from us

from a package or a module and you can

see this gives a very nice organization

so it's very clear from a random module

I am importing something random from my

enum I'm importing something as enum so

you get a lot more clarity inside your

code so let me go inside my zero eight

packages folder and inside of this let

me create a new folder the name of this

one is 0 1

local

modules for the sake of clarity I am

going to open this newly created module

inside a new code editor window so I can

just go inside this

I can say 0 8 packages and I want my

code Editor to open

zero one local modules in a new window

so here we are if we just hover you can

see I am inside my folder01 local

modules suppose you are taking a maths

class and you have to do a lot of

calculations and this calculations

involve squares rectangles circles and

so on so let's see how we can divide all

of this functionality by using our

modules let's say we have to do some

operations on a circle so let's create

the first file

let me call this as

Circle Dot py

and let me create a class of circle and

let us create the init method so I can

say Define my init this takes itself and

this also takes a radius

suppose the radius can be a float value

this returns nothing

and inside we can say self Dot

radius is equal to my

radius let us also create the Str method

so I can say my

Str would be myself

and this returns a string here I can

return saying that my

radius is my

self dot radius now in the same class

you also have to deal with rectangles so

in order to organize our code we can

create another file for this rectangle

we don't have to Club all of the

functionality inside a single file so

let's do that so right over here let me

create a new file called as rectangle.pi

and let us create the class for

rectangle

let us create one more file for dealing

with squares

so I can create another file called as

my Square dot pi

and let me just copy and paste from

rectangle

so let me paste it

this becomes my

Square this becomes just my

side I don't need this

and my

side is equal to my side

this becomes minus square and I can just

say that this is

My Side Y my side and that's it oh I

forgot to put a colon so

so what we did is we segregated all of

the functionality into different files

now technically all of these files are

called as modules inside python we may

call them as files but they are

identified as modules

so what we can do is we can import

functionality from this modules so let's

say we have a file called as geometry

and from that model of geometry we can

import all of these functionalities and

we can work with them so let me show you

all of these things in action

so let me create a file called as

geometry dot pi and here I can see from

my module of circle I want to import the

class of circle

same thing we can do for rectangle and

square so I can say

from the module of my

rectangle

I want to import my rectangle

and the last one from my model of square

I want to

I want to import

Square

so what we are doing is we are simply

importing the things that we want to

work with now this file Circle rectangle

and square they can have multiple

functions or they can have multiple

classes but we just need to import the

things that we want to work with so let

us create a circle

maybe the radius is 5

let us create a rectangle so I can say

my

rectangle let me give some random values

then let us create a square

let me give some random value as well

and then we can simply print them out so

this is my C

and this is my rectangle and this is my

Square let me save it and let me try to

run this file

so as you can see we have the right

output first one is a circle with a

radius of 5 then we have a rectangle and

then we have a square so in this example

what we did is we created different

modules but if you look closely Square

rectangle and circle all of these things

belong together and we can create a

package which I will show you in the

next video we just saw how to create

different modules and in this video I

will teach you how to take all of the

common models together and how to create

a package out of it you must have

noticed that we have a couple of

additional files

let me take it right over here so this

was the folder that we created in the

last video and you can see we have

multiple different folders one of the

first folder that you can see is for

this one this is called as py cache you

don't have to touch this folder this is

just a mechanism by python to speed up

your code just let it be there now for

this video let me just copy and paste

this folder

and let me

rename this to 0 to

package

and also let me open up the folder

inside a new window so I can say code

02 package

so here we are so this is the exact same

code that we created in our last video

now what happens is circle rectangle and

square all of this are similar all of

this are shapes and we can organize our

code in a much better way so let's

create a package which is called as

shapes so packages are nothing they are

just a special kind of directory so let

me create my directory and let me name

it as shapes

after this I am just going to copy my

circle inside my shapes yes I want to

move

same thing for my rectangle and my

Square as well so let me just drag all

of these files inside my folder of

shapes

yes I want to move now we need just one

more file to declare that this folder is

and package and not just an ordinary

directory the way to do that is by

creating a file and the name of the file

is very important the name of the file

is underscore underscore init underscore

underscore Dot py when python sees this

file it considers your directory to be

an package now let's see how we can

import all of this circle rectangle and

square in our file of geometry

so here you can see we have a couple of

errors and that's because we have moved

all of this code inside a new package

and the name of the package is called as

shapes so here we have to say that from

my package of shapes

I want you to go to the model of circle

and you can say that by putting a DOT

so this means from my package of shapes

I want you to go to the model of circle

and inside the model of circle I want

you to import my class of circle

same thing will go with the rectangle

so here I can say

shape slot rectangle and this also goes

to

my shapes dot Square just save a file

and that's it if you try to run the file

here you can see we have a proper output

there is one more concept that I wanted

to explain in this video

so what's happening in this video is

shapes is an isolated directory or you

can say it's an isolated package

which has certain functionality

and we have created a file called as

geometry and this file is interacting

with our package of shapes so

conceptually you can call this file as

your client and the package of shapes as

your API so what we are doing is we have

created a client file which is

interacting with our API

it's a very simple concept now let us

see how we can import functionality from

within a package itself so let me copy

and paste this folder and let me call

this as

0 3

and local package and let me open this

folder in a new window

so I can say code

0 3

now suppose you are inside your package

of shapes and inside this package if you

have to work with any of the modules how

would you do it let me show you with a

small example suppose we have a file

called as shape dot pi and inside this

file if you want to import Circle

rectangle and square you must be

thinking that we can simply say from

rectangle I want to import rectangle

well you are partially right but not

entirely right the way to do it is by

putting a DOT right over here

so this means that from my current

package so this dot means my current

package from my current package I want

you to go to my model of rectangle and

from that module I want you to import

rectangle let's do the same thing for

Circle so I can say dot Circle I want to

import my circle and also I can say from

dot of square

I want to import my Square now let us go

to our client file and let's see how we

can interact with this file so let me go

back to my geometry dot Pi now this

syntax is perfectly fine it's going to

work but let us use our newly created

file so what we have done is we have

created a file called as shapes dot pi

and we have imported all of the other

models inside this file so here what we

can do is we can simply say from map

package of shapes

I want to import the model of shapes so

this shape means this module right over

here and here we can see I want the

circle which is inside my model of

shapes

and that's it let me copy and paste it

everywhere

let me

paste it here

paste it here

and that's it let me save it and let me

try to run this file and we have the

right output let's see if we can further

improve our code so I'm going to copy

this folder and paste it one more time

and let me rename this to 0 4 package

underscore init

and let me open up that folder in a new

window so

my code04

okay so here we are so what we were

doing in the last video is we created a

new model called as shapes and this

module was importing the functionality

from all of the other modules but we can

do better instead of creating a new

module we can simply take all of this

Imports let us copy them and let us put

all of these things inside my init file

that's it just save it and I can't get

rid of this file so let me just delete

this it's not required

now let us go back to our clan file so

this is our geometry here we can simply

say that I just want to import shapes

and that's it

just save a file and everything should

work just as before so let me try to run

this file and still we have the right

output so what's happening is we are

just importing the entire package and

since we have all of the modules which

are imported inside our init method we

can have access to all of them right

over here so this init method just acts

like a Constructor for your entire

package so it's similar to our classes

we were using the same naming convention

to have a Constructor for our class the

same thing goes over here but here we

are constructing a package instead of a

class and that's about it I am so

excited to see you in the last section

in this last section we have two

projects the first one is for a cash

register and the second one is obviously

is going to be our game but this section

marks a fundamental shift till now we

have been thinking and writing with our

types but this time we would be seeing

how we can organize the code in

different layers just in the last

section we saw how we can create

packages packages was one way of

organizing our code but now let's try to

think beyond our packages let's try to

think more about in the architecture

point of view now this concept may sound

a little alien but by the time we are

finished with our projects this concept

would be much clear to you for now let

us concentrate on the first project so

this project is all about a cash

register but before we can jump in and

just start writing our code I want us to

take some time and let us think how we

can design this application so I want

you to take back to the concept of voc

dtp so this is a very simple concept

which I propose for your learning so

this concept stands for your visualize

outline code so this is your face number

one once you're done with the first

phase the second phase would be debug

test and polish let us try to see one

concept at a time

so this is going to be our problem

statement we simply want to make a

simple cache register suppose you have a

shop and you want to create a software

for your cash register so basically we

just want to implement at what's

happening at our checkout counter just

try to imagine what's happening over

there normally you would hand your items

to the cashier the cashier would scan

the item he will generate an invoice the

cashier would accept the payments and he

will hand over the products to you so

out of all of these things let us just

try to concentrate on the cash register

so let us go to our first phase which is

this one visualize outline and code

inside this phase the first step would

be to visualize let us try to visualize

how our application would look like

let's try to imagine what's happening

inside the cache register as soon as the

cash shares scans an item an item is

added to the invoice now what happens if

the customer wants to change the

quantity the cashier can simply update

the quantity and what happens if the

customer changes his mind and he wants

to drop an item then simply cashier can

delete the item from the invoice the

next thing that I want you to think is

an item can also have different

components such as a discount of our tax

which can be added to the invoice now

just to help you visualize how our code

will look after implementing our cash

register I have created a nice

dictionary so let me show you this is

how our final outcome should look like

let me zoom out a bit

okay

so this is our final outcome

if you watch closely it's not

complicated it's just a dictionary

structure we have a couple of keys and

we have a couple of values

let's see what keys do we have the first

key is for the customer the next key is

for the invoice total the next one is

for the items and the last one is for

the purchase date now let's see at the

values the value for the customer is a

dictionary itself the value for the

total is a float now here for the items

it gets a little more interesting this

bracket to this bracket this is the

value and inside this value we again

have dictionaries so these are the

different items so we have one atom for

an apple the next one is for an egg next

one for milk and inside this items we

can add different components such as

your discount

your quantity and your subtotal and for

the purchase date we simply have to

display the date of purchase that's very

easy now the thing is I could visualize

this data structure just because I have

some practice but the same thing can

happen with you when you practice a

little bit more you can visualize this

design even before you can start coding

let us go to the next step let me zoom

in again let us go to the next step

which is outline here what we are trying

to do is we simply want to outline our

structure so if you see right over here

in this step we have a couple of

different objects

first one was for the customer for the

invoice total items and so on so let us

try to outline what component or what

classes or what objects we would require

inside our application

so here I am inside the next step for

outline

obviously we require a customer the next

thing we require is the item that the

customer is buying

and the next thing which I have already

explained we require an invoice entry

why do we require a separate invoice

entry is because different items can

have different discounts or offers or

they could have some kind of Taxation so

for the sake of Simplicity let us call

this item as invoice item so this means

once you have the item Insider invoice

it will have a slightly different

structure and finally we have a place

called as cash register so this object

keeps in record of everything that is

happening on the counter so let's try to

summarize the objects that we are going

to require so we need a customer we need

an item we need one more for the invoice

item and the last one obviously we

require a cash register so till now we

have much more clarity about our

application and the different objects

that would be going inside our

application and you would be tempted to

just open up your code editor and start

writing your code but I want you to hold

your guns let's try to do little bit

more planning so before we can write the

code let us try to describe how our

objects so that means let us try to

visualize how all of these objects would

look like in the world of python so

let's see I have created a couple of

diagrams for you this is how our

customer would look like our customer

would require a couple of instance

variable it could also have some methods

and the type of them and obviously our

customer needs a first name and last

name the type of this one is obviously

is good with string and for the sake of

customer we don't require any methods

now let us go to the next object or the

next class

so this class is for the actual item

itself we need some kind of an

identifier so that every product needs a

unique ID so we can have an ID as our

instance variable

then we also need a name for an item

then we also require a price in this

case let us keep the type as a float

because we may have some decimal places

as well the next one is a little more

interesting we also need one instance

variable for the measurement unit here

the question is how do you measure the

product

it can be in kgs grams liters Etc so we

need some kind of a unit that will

describe how to measure this item now

let's go to the next object or the next

class this is our invoice item this

class is pretty simple it has to accept

one item so I have created one instance

variable for the item and since there

can be some kind of a discount we need

one more instance variable for a

discount and the customer can purchase

in multiple quantities so we have one

more instance variable for quantity now

for this class we require one more

method and that is to have our subtotal

we need some small Maps over here we

need to figure out how much is a

discount and how much is the quantity so

each item can have a different subtotal

and that's what we are trying to

calculate inside this method let us go

to the next and the last class that we

require

and this one is for our cash register so

this class is going to record everything

that is happening inside our shop so

let's have a look at the different

instance variables first obviously it

needs to know who is the customer that

is making the purchase it also needs to

know the different items that are being

purchased it also needs to record the

purchase date and here you must be

thinking that we require one more

instance variable to display the invoice

total well you are right but instead of

just creating an instance variable we

are going to create a method called as

get invoice total the reason is we have

different items and different items have

different subtotals so let us use this

method to calculate the total of all of

the subtotals this is more of a

convenience feature now let's see what

are the methods this class is going to

have obviously at the cache register you

can add an item you can update an item

you can remove an item and at the last

we can also display our invoice so till

this time we have much more clarity on

our application we have a nice outline

in place we know which classes or which

objects needs to go inside our

application we know what instance

variables are required the type of them

the methods that are required for all of

these things so we have a much better

design and a much better Clarity with us

and now we can think of writing all of

these things inside our code editor but

before we can do that I just wanted to

show you one more thing so the document

that I have put together this is

technically also known as a unified

modeling language diagram

well to be precise this diagram is a

little bit different from the document

that I have put you can go to Google and

check it out I have left the links in

the redmi file and in fact free code cam

has a full course on unified modeling

language you can click over here to have

the link for this one the next thing is

just to translate all of this document

inside the code and I have just shown

you once we are done with our code the

cache register would look something like

this

so this is what we are trying and going

to code and this structure that we are

going to code can also be imagined to be

a data structure so now we get it there

is nothing big about data structures it

is just a way to represent our data here

you can see that we have a custom data

structure of the type of cache register

in the next video we will actually start

writing the code and I will see you then

now let's get going what I've done is

I've created a folder called as 0 9

projects and inside this folder I've

created one more folder called as

project one cache register and I also

have this file inside my project so let

me open up this project in a new window

so I can say code

and here it is

so now let's start writing our code let

us see our outline

here you can see that we have four

different objects that are required so

let's start with one of them at a time

let us create the first file for our

customer so it's going to be customer

dot Pi this is going to be class of

customer

and let me Define my init method is

going to be a self and let us go back to

the document and here we can see we

already know the instance variables and

the type the two variables would be

first name and the last name let me just

collapse my sidebar so let's create the

init method for the first name and the

last name so let me go over here so my

first name is a string my last name is

also a string and this returns nothing

here I can say that my self DOT first

name is equal to my first name and then

my self dot last name is equal to my

last name let us create an wrapper

method for this as well so let me say

self this always returns a string and

this can return a very simple string

saying that this is a class for customer

let me add some documentation class as

well okay so this is the class for the

customer details now I'll just create

the Str method so this takes in a cell

and returns a string so we can say I

simply want to return self DOT first

name and I also require myself dot last

name let us go back and see which is the

next item so the next object that we

want to create is

for an item so let me open up my sidebar

let me create a new file called as item

dot pi

and let's see what are the different

parameters required so item requires

four different instance variables ID of

the type of integer name String price

float and measurement unit which is

going to be a string so let me

go back to my file of items.pi

and I can say my class of item let me

add some documentation then let's create

our init method so I can say my init

cell the first one was the ID that type

is integer the next one was name the

type is a string next one was price the

type is a float the last one was

measurement unit this is going to be our

string this returns nothing let us

create the instance variable so self dot

ID is equal to my ID

then self dot name is equal to the name

self dot price is equal to my price

and self dot measurement unit is equal

to my measurement unit let me add a

small comment over here so our

measurement unit could be a kg or ml or

so on next let us create the repr method

so I can say wrapper self returns per

string and I can say return that this is

a class of item next let us create the

Str method so Str self this returns a

string and you can say return then we

can put the name of the item and let's

display the price so let's say it's

going to be dollars and it's self dot

price per unit so we can say self dot

measurement unit let's go to the

document and see which is the next thing

that we want to create so the next thing

is invoice item things get a little more

interesting from here

if you see the instance variable the

first one is an item but the type is an

item so please keep that in mind

and for this class you also have a

method called as get subtotal and this

method Returns the subtotal after

adjusting for the discount and for the

quantity so let's create one more file

right here let me call it as

invoice item dot py let me collapse my

sidebar and let's say this is going to

be class of my invoice item let me add

some documentation let's create the init

file init cell the first argument is for

an item and the type is item but this is

not going to work because we don't have

item in this file let us import it from

the module so we can just go right over

here and we can see from the module of

my item I want to import the class of

item now this will work the next

argument was for quantity and the type

was integer the last one is for Discount

the type is a float here we can do one

more trick we can assign the values

right over here so that means if the

user does not provide an argument for

Discount that means by default the

discount would be assigned a value of 0

so this is a very convenient feature of

python now this is going to return none

self dot item is equal to my item self

dot quantity is equal to my quantity

self dot my discount is equal to my

discount now let's see what else we

require

so we also require a method called as

get subtotal so let's create that method

but before that let us create our

wrapper and Str method so let me write

my wrapper takes itself returns a string

and it can written saying that this is a

class of invoice item the next is for my

string takes the self and returns an Str

and let us create a nice string for this

so we can say the item and let us

display the self now here I want to

display the name of the item and we can

get the name of the item through our

type of item

so we can say self Dot item Dot

name so if you go to the definition of

item you can see we have an instance

variable of name so this is what we are

trying to refer right over here next we

can say the quantity and let us display

self dot quantity then let us display

the discount so we can see this is

dollars

and it is self dot discount we can also

display

the subtotal we have not yet created

this but we will create it shortly so

let me write it first and then we will

create it so I can say subtotal would be

self Dot get subtotal remember we have

not yet created this method but we will

create it shortly and let's do one more

small trick over here

let us display only two decimal places

we can do that by using the syntax so we

can say colon and we just want two

decimal places for our float

uh now this line looks a little longer

so let us try to divide it so let me

take this line and let us put a bracket

opening one and the closing one let me

take it inside and let me cut all of

these things clear and let me go to the

next line and let me paste it over here

okay so this looks much better now this

is complaining because we don't have

this method till now let us go and

create this method so we can say Define

get sub total this just takes the cell

and this Returns the float now let us

see how we can get the subtotal what I'm

going to do is I am going to use a very

simple Trick In fact I am going to

define a private member right over here

so let me put up a comment saying that

this is a private member let me call it

as self dot underscore subtotal now

remember since I want this very able to

be kept as private that's why I'm using

underscore right over here now python

does not have a concept of private and

public but this symbolizes to other

developers that we want to keep this

variable as private now let's just

calculate the subtotal which is pretty

easy so we require the price from the

item multiplied by the quantity and

minus the discount now let us go back to

this method get subtotal and we simply

have to return it so I can say self dot

subtotal the reason why we are doing all

of these things is I don't want any

other developer or any other user to

accidentally change my subtotal I want

it to be kept as private that's why I'm

using this method you can also create a

property called as subtotal which is

also a valid solution you can definitely

do that but right now for the sake of

Simplicity I'm just creating a private

member let us go back to the document

and see what is next so the next one

that we want to create is for the cache

register itself so this is the cash

register note the types that we have

over here customer is all the type of

customer then we have the next instance

variable items the type is in dictionary

then we have the purchase date the type

is date time and we have a couple of

methods on this as well let us create a

new file right over here and call it as

cash register dot Pi let me collapse my

sidebar and we can say my class of cash

register let me add some documentation

that this is the cash register for each

customer then we can Define the init

method so self so as we just saw the

first argument is for the customer that

type is customer we also need to import

customer which we will do shortly we

also need to have one more for the items

and

that is a dictionary

and we need one more for the date

but before we can finish all of this

definition let me first go and import

customer so I can say from the module of

customer I want to import my customer

now let me go down over here this

Returns the none here I want you to wait

and think how to create the instance

variable in this case what I'm going to

do is I'm not going to accept items over

here instead let us create an instance

variable directly first let us say self

Dot customer is equal to my customer

here we can say self dot items is equal

to an empty dictionary just imagine

before purchasing anything the basket is

always empty so that's what we are

saying this has to be items

that's what we are saying since we don't

have any items inside our checkout

that's why let us assign an empty

dictionary to it but here how do we

Define what are going to be the keys and

what are going to be the values of this

dictionary let us write the type in

right where items is my dictionary but

what are the types which is the key and

which is the value let us go back to our

design document and try and see what we

exactly want

this is a small trick right over here if

you see the design of items items is

actually a dictionary and inside this

dictionary we have the key is of the

type of a string so let us go back to

our definition right over here and we

can see the key is going to be of the

type of string

now let's see what is going to be the

type of value so let us go back the

value is of the type of invoice type

so if we remember inside the invoice

item we have fields for the discount

name quantity and we are also

calculating the subtotal so what we can

do is inside the cache registry we can

have the value which is of the type of

invoice item so I can say invoice item

let us go up and let us also import so

that we can use it so I can say from

my module of invoice item I want to

import the class of invoice item so

remember whenever we are creating these

items

the key is always going to be the string

so if you just go back to the design

document

here it is inside the items the key is

always going to be the name of the item

and the value is always going to be of

the type of invoice type let us go back

to the class the next one that we want

is for the purchase date now we have

already seen it earlier we can

automatically create the purchase date

by using our date time library and

that's what we are going to do in this

document as well first let us go and

import so I can say I can say from date

time I want to import my date time and

let us create an instance variable we

can call it as self dot purchase did and

we can generate this automatically by

using date time and we want today's date

time so we can just say now let us go

down and let us create the wrapper and

the scr method so I can say this is my

repr self returns or spring

and I can say return that this is a

class of cash register let us also

Define an SDR method we can say cell

it returns a string here we can just

return and here we can say first I want

to display my customer so let us display

my customer now what's going to happen

right over here is we are simply calling

self Dot customer

and if you go to the customer so let me

open up my customer file the scr of

customer file returns a string in this

format first name and the last name so

whenever we are printing this customer

by default we will get the first and the

last name together

we don't have to say customer DOT first

name and last name it's not required

next let us also display the total

number of items so we can say total

items and we can get that

from the length of our items so let us

go back to the document

here it is so items is a dictionary we

have three keys apple egg and milk so

that means we have a length of three

till now we have been using Len with

lists but we can also use length with

dictionaries as well and when you use

length with dictionary it's always going

to count the number of items so that's

what we want right over here so total

items is the length of my self dot items

let us now implement the different

methods for this one

let us see which methods we require

so let me scroll a little up

so we require methods to add update

remove and so on

first let us see how we can add items to

our cache register so let us go back let

us create a new method called as add

item by default the first argument

itself now let's see which are the

arguments we need to accept if we have

to add an item we need to know what's

the item so the first argument is going

to be an item the type is going to be an

item let us go and import item as well

so I can say from my model of item let

me import my class of item let us go

back to this method now since we know

which is the item we also need to know

how much is the quantity so this is

going to be an integer

and we also need to know how much is a

discount so discount is going to be a

float we can do one more trick over here

if quantity and discount are not given

we can set some default values so by

default the discount would be zero and

by default the quantity will always be 1

so this returns and none so let me write

none over here let me add some

documentation

and let us see how we can write the body

of this function now the first thing is

we would like to add an item to a card

only if it is not existing if we already

have this item inside our cash register

we can simply update it we don't have to

add it so the first check would be for

this one so I can say so I can say if my

item dot name not in my

cell of items first let us type it out

and then I will explain what's happening

so let us go to the next line here I

want to create a new item

but if you scroll up the key is a string

the value is an invoice item so that's

what I am going to create right over

here if you find it a little confusing

just go with the flow and after we are

done typing this function I will explain

what's happening so here I want to

create a new item is equal to the type

is an invoice item so create an instance

of my invoice item and let's see what it

takes it takes an item quantity and

discount that we already have right over

here we just need to pass all of those

inside so the first is for the item

second is my quantity

third is my

discount

the next thing that I want to do is I

want to set the key and value pairs

again let us first type it out and then

I will try and explain so I can say my

self dot items now here the key is going

to be a string so this is the part that

we are working on the key is the string

and the value is the invoice item

so if you refer the document

I want the key to be the name of the

item so that's what we are going to do

right over here

let us go down and we can say that the

key has to be

the name of the item and the value is

the new item which we just created now

let us go to the next line what happens

if this item is already existing inside

our registry

so we can say else we simply want to

print out we can see item dot name

already in card you want to update

instead let me take out one more extra

comma we don't require this one now let

me try and explain what's happening

right over here let us go back to this

document now let's see how the logic

goes

so suppose this is my iPad and shell let

me create

my cache register

for now it can be an empty dictionary

so this is all good

now let us go to this line our cash

register has one key which is called as

item and the value is of a type of

dictionary itself

so let us do that over here so we can

say for my register I want to create one

key which is called as items sorry it

has to be items

and this is

an empty dictionary

let us try to print it out so this is

how our register is looking right now we

can also use the if and in syntax when

working with our dictionaries suppose we

want to check if our dictionary has one

key which is called as items or not so

we can say items in register and that is

true let us check for customer in the

resistor so that's false because we

don't have a key called as customer

inside the resistor we can use the same

syntax when referring to items as well

remember items is also a type of

dictionary let us assign some values to

these items and then we can check for

the if and in conditions

let me copy

all of this I just want this one

and we can say for my directory of

register I want you to go to my

directory of items now what we can do is

since this is a directory we can also

create new keys and new values over here

so here I can say I want to create a new

key

for my Apple

and the value is this one we just copied

right over here so let me just paste it

over here so this is the value

and that's it let me just clear all of

this

let us try to see how the resistor is

looking right now so this is how it is

looking inside the register we have a

key called as items and inside the items

we have apple as of now

let us copy and paste one more product

this one so let me copy this

and we can use the same syntax so I want

to say

register is a directory I want you to go

and find

the key of items here let us create

another key by the name of eggs

and let us assign a value of this thing

to it

and that's it let me clear it and let us

see how our

register is looking now

so here we have it first we have an

apple which is right over here and then

we have an egg now let us check if an

particular product is inside our items

or not

so we can say apple

in my

register I want to access my dictionary

of items

and in this dictionary so from year to

year we want to see if we have any Keys

called as Apple we do have so the answer

of this one should be true

and that's it we have the answer of true

let us try to search if we have milk

inside our items or not so let me just

go and change this

from Apple

will false we don't have milk inside our

items now if I just flip the statement

so if I say milk

not in now let's see what we get as a

response so the response is true milk is

not in miter is free

now since my milk is not there inside my

register only then I would like to add

it if it is existing then I would simply

like to update it now let us go back to

our code and try to

relate what's happening so let us have a

look at this line at line number 24. I

am just trying to check if an item is

existing in our items or not on line

number 26

so items is our dictionary the key is

going to be the name of the item so

that's what I've taken right over here

and we are assigning this item

to the key that we just created and we

have a beautiful structure in place but

this function is not at complete the

moment we add one item we also need to

upgrade our total otherwise our logic

would be wrong so let's see how to do

that in order to show the totally

inverse value

we would also require one more

additional instance variable so let us

create one private this time so we can

say this is a private member and I can

say self plot invoice total

initially let us set it to zero I want

the type to be a float

instead of an integer

now what happens right over here

whenever we are adding an item

we also need to increase the invoice

total that's pretty simple so we can

simply say self Dot underscore invoice

total plus equal to and we can say my

new item

dot get subtotal

remember when we created this invoice

item

we implemented this method to calculate

the subtotal and why do we need this

method because we have to adjust for the

quantity and discount

and that's what we are using right over

here so this method gives us the

subtotal for the new item which we

simply want to add to our invoice total

but the issue is this method is not

reliable what happens if you have a typo

instead of plus we have minus or we need

to do some other validation logic before

we can increase the total the answer is

let us create one function that will

increase the subtotal so let's create

one method right over here so we can say

increase the invoice total the first

argument would be obviously the self now

let's see what argument should we take

if you go down we can get the subtotal

if we have the access to our new item

the type of this new item is an invoice

item so that's what we need to get right

over here so this function accepts an

item which is or the type of

invoice item and this returns nothing

let us add a documentation saying that

this increments the total inverse value

each time an item is added let us go

down and let us take this line this is

what we are exactly doing right over

here

let me paste it and let us change the

name of the variable because the

variable we are calling it as just the

item over here so this is the item let

us go below and use this newly created

function here we can say I want to sell

Dot I want to increment my invoice total

and I simply need to pass the new item

inside of this so new item the last

modification that I want to do over here

is I want to keep this method as private

I don't want any other developer to

accidentally change my logic let us go

down and let me update this syntax as

well now we have a beautifully typed and

a much more stable code and while we are

here let us create one more method

to decrease or decrement the invoice

total whenever we are deleting an item

from the register we would also need one

method to decrease the subtotal so let's

do it right now let me copy and paste

all of this

the name changes from increment to

decrement this also changes to decrement

and this becomes removed

and this becomes

minus equal to and that's it let us

create the next method to update our

card the logic is somewhat similar to

this one so let me copy and paste all of

this

this has to be update let me change the

documentation so this becomes too

update an existing item and this one

becomes not in the card

and do you want to purchase instead now

let's see the logic for this one we can

update an item only if it is existing so

let's do that right over here so let us

change from not in to just in so if we

have that item only then let us try and

update it but before we can update that

item we need to get the old atom back

and we also need to decrease from the

invoice total so here we can say that my

old item is equal to my self dot items

and I want to retrieve a specific item

and this item would be

my item dot name so let us go back to

our IPython and let's see what's

happening over here

we are just trying to retrieve a data so

this is our existing register and

suppose we want to get all of the

details for X suppose we want to update

the discount or the quantity and so on

before we can update we need to retrieve

it first so I can say my

egg details

first I want to go to my register now

since this is a dictionary I want to

access my key and the name of my key is

items

and inside items I want to access

another key this time the name of the

key is X we can see right here we have a

key called as X

so this will retrieve the value for this

one

let us see what's happening

oh there is a syntax error so this has

to be a square bracket let us try to

print the egg details now

and we have the details in place and

that's what we are doing right here we

are simply trying to retrieve an item

from its key now remember the keys are

always string values so if you go right

over here we can see item is a

dictionary

and the key is a string this string is

the name of the item so that's what we

want

after we have the old item we also need

to decrement its value so we can say

self I want to decrement the value and I

simply need to pass an item so let us

pass just the old item on the next line

we are going to create a new item with

updated quantity and discount and we are

going to add that item back to our

register so all of this logic Remains

the Same let us go to the next part and

let us see how we can delete an item but

first let me go back to my iPad and

shell and let me show you how to delete

an item from a dictionary let me clear

all of this and let us print our

register one more time

so you can see resistor has a key of

items and inside these items we have two

another items one is for apple and one

is for our eggs suppose we want to

delete Apple

let's see how to do that the way to do

that is by using a keyword called as

delete

and after this we simply need to specify

which key we want to delete so I want to

say I want you to go to my register from

register I want you to access my items

and once inside my items I want you to

delete my key of Apple

and that's it now we should try to print

a resistor and you can see we have

deleted Apple let's use this syntax

right over here to delete an item from

our register right over here let me copy

and paste all of this

let me take a little up the name is

remove we don't need the quantity and

the discount we just need to know the

item that we are supposed to delete let

me update the documentation so this is

going to be removed item from our cache

resistor we don't require this as well

now let's see the logic we can delete an

item only if it is existing and that's

what we are checking over here so we

need this logic in place since we are

not creating any item we can delete all

of these things here we are retrieving

an item the next line we are

decrementing the invoice total now we

simply have to delete it from our

dictionary and we have already seen the

syntax so we can say I want to delete

from my items and the key would be my

item dot name and let us see what else

is remaining

it will go back to my document

and we have to implement this methods

get invoice total and display which are

pretty simple let's create the first one

we can say get invoice total this takes

a self and this returns a float let me

add some documentation and here we

simply have to return cell dot

underscore invoice total the last one is

to display our invoice so let us create

some pretty looking output so I can say

display my invoice takes the self and it

returns

nothing let us try to visualize how our

invoice would look like

now this is the code from my GitHub

repository I am inside my projects and

project number one if I run this file I

have a output

and this is how our invoice would look

like so on the first line we would like

to have a nice separator followed by the

customer details and followed by the

date of the purchase so let us go back

and let us do all of these things

here we can create a nice separator line

by using a print statement

and I would just like to say that this

is my separator multiplied by 70 times

so what this is going to do it is going

to repeat this symbol for 70 times

before this let us insert a blank line

so we have a nice spacing in place

next let us see what we want we want the

customer details and the date so we can

just go back and

here on the next line I can simply say I

want to print self and if you see our

Str method that's what we are doing

right over here

so this is our string method customer

and followed by the total items

and that's what we want right over here

the next line is for the date

so let us go down

and on the next line we can say I want

to print my date and we already have it

so I can say self dot purchase read now

remember in some of the earlier videos

we formatted this date and time

according to the month day and the year

that's what we are going to do right now

as well

so I can use the method called as

string format time and let us give us a

format so this format stands for the

month the day and the year let's see

what we need next

we require one separator and after the

separator we require all of the items so

let's get back and let me copy this line

from here let me change the separator

from plus to our Dash and in the next

line we want to print all of the items

that's pretty easy so I can just say for

my item in my self dot items dot values

let us print out the item and this has

to be brackets because we want to get

the values out of our dictionary next

let us see what we want

so we require one more separator total

price and one last separator so let's do

that

let me copy and paste this right over

here

on the next line we can see that my

total price would be in dollars

serve Dot get invoice total and let us

display only two to seven points so I

can say colon and I want two decimal

points for my float

and that's it let us go back and check

oh no we require one more separator

so let me copy this and

paste it right over here now we have a

way to display our invoice as well we

are using multiple print statements but

if you want you can use a template or

you can also use a multi-line string as

well but this is much more simple for

now now let's get back to our document

so we have everything in place

let us check what's remaining so code we

have cache register in place now we just

need to find out a way to interact with

our cache register so that means we just

need to create a client that can

interact with our resistor so let me

create a new file let me name it as the

Vista Dot py

so this would be our clad file and here

obviously first we need to import our

cache register so let me collapse my

sidebar and I can save from the model of

cache register I simply want to import

my cache register and then we also need

a customer so I can say from my model of

customer I need customer the last thing

I want is the item so I can save from

item let's import

item let's create the first item so let

us create milk so we can say milk is an

item let's give it an idea of 100

name would be just milk

price could be 4.5 dollars and the

measurement unit can be a liter let us

create our customer as well so I can

save my customer one

is my customer

the first name is Lewis

the last name is Zappa now this customer

is going to the store and making an

purchase so let us create a cash

register for Lewis so we can say this is

my cash register number one we simply

have to give the customer and that is

our customer number one let us try to

print out our cash register right now so

I can say print my cash register one

let me save it and let me try to run

this file so right now the customer is

Louis Zappa and the total number of

items is 0 and that's true because we

have not yet added any items so let's

get back and let's make Lewis purchase

something so here we can see that

my cash register one I simply want to

add an item and the item I want to add

is my milk now you can give some

additional arguments as well the

quantity and the discount right now let

us go with the default values

and let us try and save and run this

file

now we can see we have one item on our

invoice

let us go back

let us create some more items let us

create one as egg so I can say item the

ID could be 101 the name is egg the

price could be 99 Cents for one egg

the measurement unit is for a piece then

we can make one for Rice we can say item

id could be one or two name is arise

price could be four dollars for a kg

let's create one last one maybe for an

apple we can say

item ID could be 103

the name is Apple maybe it is for 5.67

dollars

for a kg now let us make Lewis purchase

some other items as well suppose Lewis

also wants to purchase eggs so we can

say

cr1 dot add items so Lewis wants to buy

some eggs suppose this time he is

purchasing 12x

and for quantity of 12x there is a

discount of 50 cents that's it let us

save the file and let us try to run this

so this time you can see we have two

items in our invoice

a little better way to display the

invoice could be by using our inbuilt

function so let me take it out

and let me say cr1 dot I want to display

my invoice

now let us try to run this file

so this time we have a much better

output so we can see the customer is

Louis Zappa there are two items this is

the date of his purchase and these are

the items remember for the egg we

specified the quantity was 12 and there

was a discount of 50 cents that's what

we have over here here you can see we

have only one item so the subtotal is

450 for this one we have 12 items minus

the discount and so the subtotal is

right over here and right over here we

have the total price as well let's try

to play a little bit more with this one

let's try to upgrade one item so suppose

Lewis thinks that 12x are like a lot and

he wants to buy only 10x so we can say I

want to update my eggs

and this time the quantity is 10 but

fortunately the store is in a good mood

and the store is offering a discount of

say one dollar so let us save it and

give it a try so you see we have an

updated quantity of 10 discount of one

dollar and we also have an updated

subtotal as well and automatically the

total price also gets updated

let us go back and let us try to add one

more item suppose this time Lewis wants

to buy some rice

maybe he wants to buy three kgs of rice

and there is a 75 cent discount on this

one

so let me save this and let us run the

file

so this time we have three items and we

also have rice in our items as well let

us go back now let us see if we try to

add an item which is already existing

then what happens so let me copy and

paste this one

save and let us try to run the file so

here you can see we get the prompt say

that rice is already in card do you want

to update instead so you can see all of

our code is working beautifully and if

you see right over here nothing is

changed everything is just as before let

us go back now what happens if we try to

update an item which does not exist so

suppose we say that we are trying to

update an item maybe we are trying to

update

for apple and the quantity could be 10

the discount could be zero

so let me save it and let me try to run

this one so again we get a nice message

saying that Apple not in card purchase

instead and if you see the invoice it's

just as before there are no changes to

our items

so let us go back

so right over here we can say that

we want to

remove eggs

and let us try to display our invoice

after repoing as well so let me copy

this

and let me paste right over here let me

run this file

so here you can see this is the earlier

invoice in this invoice we have eggs and

and this is the next one when we remove

we don't have eggs in our invoice

so you can see we can also remove an

item from our invoice

I also wanted to show one more trick

right over here

we can also create an alias for

customers Suppose there is a big

application and there are two files and

inside both of the two files we have a

class of customer then we can create an

alias so we can just say that I want to

import customer as my customer and we

simply have to update one line over here

so this instead of a customer this will

be called as

my customer

just save your file and if you try to

run it everything works smoothly let us

go back and let us create one more

customer just for the last time so we

can say my customer 2 is my customer and

first name is Chico her surname is

Neutron let us create a cache register

for this one as well so this is going to

be my

cash register for my customer number two

suppose she is purchasing some milk and

the quantity could be four liters here I

can also use my keyword syntax so I can

say my quantity would be

4 4 and suppose we have a discount of 10

dollars let us try to add one more item

so this time she wants to buy some eggs

and the quantity is 25 next she decides

to update the quantity of x

so next time the quantity is 48 now

fortunately the store is offering a

discount of 12 on the quantity of 48.

Chico also wants to buy some apples so

let us buy some apples as well and let

us display the invoice

that's it let me save the file and let

me try to run this file

so here we have the invoice for Chico so

Chico has three items milk egg and

apples for the milk the quantity was

four liters the updated quantity for X

was 48 and for apples it was 8 and this

is the total price now we have a

beautiful program in place let us go

back I wanted to mention one point over

here if you see the code inside my

GitHub so this is the code downloaded

from GitHub my GitHub file has a couple

of more methods for example if you go to

cash register I have a couple of extra

methods so all of this is extra and I

had to create this methods because I

wanted to see the output in a dictionary

format

so if you go to this document

I wanted to have the output in this

format

so that is why I had to do a couple of

more work

and that's the reason why you can see

all of these methods but I am not going

to explain all of these methods inside

this tutorial if you want you can give

it an attempt and try and study what's

happening but to just give you a short

idea I am converting everything to a

form of a dictionary and finally I am

exporting that dictionary to a Json

format that's why I can have a nicely

formatted output now if I go to this

file register so this is on my GitHub

code so here I am using this method to

Json to have a nicely formatted output

now if you run this file I can get the

output in the way I desired I hope you

learned something new in this video now

this video had a lot of Concepts and it

was very densely packed so if you don't

understand any concept you are not to be

blamed it's quite natural that it will

take you some time to understand maybe

you have to go through this video a

couple of times you would also need to

have some better understanding of how to

work with your dictionaries before you

can understand what's exactly happening

in this code so this project is going to

test all of your basic understanding of

python up till now now the next game

would be much more easy to implement and

I'll see you in the next video I am so

happy to see you in the last part of

this entire tutorial

the last part is all about our game

saving zotan and in this final project

we would be actually implementing how to

think in layers first we will write all

of the code and then I will try and

explain why we did what we did so for

starters I have created a folder called

as project 2 savings Orton as you can

see it's all empty so let me go and let

me copy my file it's right inside my

section number six

let me copy this

and let me paste inside my project

number two let me open up the project in

a new window so I can say I want to open

my project number two

and that's it we have a nice and clean

slate to work with and this is our

existing code now let's begin till now

we have seen how to organize our code in

different modules but for this game we

are going to create a package of game

and that package will contain all of the

logic and everything that goes for

creating a nice game so here I am going

to create a package called as game and

as you know making a package is very

simple it's just like creating a

directory

so let me create a directory let me call

it as game and let us create our init

file

so that python knows that this is a

package

now let me drag and drop this file

inside my package

yes I am want to move now let's begin

with our code so let us get started let

me open up this file and let's see the

first one we have for the character type

so what we want to do is we want to make

our game as modular as possible so what

we are going to do is we are going to

take out everything and everything goes

inside its own module so inside my

package of game let me create a module

by the name of character type dot Pi I

simply have to copy and paste everything

so right from here I need the Imports

let me take all of this let me cut it

out go to my character type and paste it

let us see what's next

the next one is our character so let's

create one more module inside our

package of game

and let us call it as character dot Pi

again I simply have to cut all of this

so let me take everything from here

let me cut it out and go and paste right

over here let us go back

the next is for the superhero so again

let us create a new file

superhero dot pi and let me take

everything from here let us cut it out

go to our superhero file let me paste

this and we can see we have a couple of

errors and that's because we need to

import character and character type so

let me go to the top

now here since we are working inside a

package we need to say that from the

current package the module of character

I want to import the class of character

the same thing for character type as

well so from the current package I want

you to go to a model called as character

type I want you to import my

character type now if you save all of

the errors will go away let us go back

the next one is for villain so again go

back right over here

let us create a new file called as

villain dot pi and

let us take all of these things

let us cut it out and paste it right

over here also let us do our Imports so

from director import character

from character type import my character

type let us go back

so the next one is for the life let us

create a new file called as live dot pi

and

let me take all of these things

till till the last till yeah

let me cut it out and

paste it right over here let me save it

let's go back to this file and if you

see this file is pretty much empty now

so let me delete all of the blank lines

from here I don't require all of these

things

let me take out the documentation as

well because we already know what it's

all about don't require this as well so

let me go on the top so we have a much

smaller file this time and let's see how

we can improve even further but before

we can go a little further I wanted to

add a couple of more classes the first

class that I wanted to add is for a

player it would be so nice to have a

player so let's create a very simple

class for player so let me say my player

dot Pi this is going to be my class of

player I can Define my init the first is

obviously the self next could be for the

first name this is string next for the

last name this is also a string and this

returns nothing I can say self DOT first

name is equal to my first name and self

dot last name is equal to my last name

let us create the wrapper method so I

can say retr and sell this returns a

string and it can return saying that

this is a class of player

let us create the string method as well

so our self this returns a string so let

me just return the first name and the

last name so I can say self dot my first

name and self dot my last name that's it

and this time we are going to have one

more class and that class is for the

game State just imagine when we are just

starting the game we can have a

different state maybe initializing when

we are playing the state changes from

initializing to in progress and at the

last the state can change to either win

or lose so we can keep a track of the

state by creating a new class so let us

create a new module right over here

so this is going to be called as my

gamestate dot Pi for this I am going to

use the enum so I can say from my enum I

want to import enum and auto then I can

say my class of game state which

inherits from enum let me add some

documentation first one we can call as

initializing so set it to Auto next one

for in progress again set it to Auto the

last two would be for the win and the

Lost

let's take a moment to review what we

have done up till now we have created a

module for each of the objects inside

the game but if we have a look at all

our modules they are basically

structures for something for example

character this is a structure for

something character type again a

structure for the types of characters

game State the types of game state that

we can have

for player again we just have a

structure the same thing for superheroes

so this is just a structure for

superheroes and so on so technically we

can call all of these structures as

schemas so schema simply represents a

structure and that's it so let's create

another package inside the game of

package called as schemas and let us put

all of this functionality inside that

package so inside my game let us create

one more folder by the name of schema

and to make this folder a package let me

create file inside of this it has to be

again init underscore underscore dot Pi

so let me collapse all of these things

on the top level we don't have anything

we just have a package of game inside

the package of game we have another

package called as schema now let us move

all of the schemas into the right

package

so my character type my character

game State live player

superhero and villain all of these

things will go inside my package of

schema

yes I want to move everything

so let me collapse my schema right over

here

so inside my package of game we have

three things

first one is an another package of

schema

then our init file and last one is our

game file now let us go back to our game

file let's see what's next

here we can see that we are retrieving

all of the superheroes or we are

retrieving a single superhero normally

in an application you would have a

database where you will store all of the

superheroes and all of the super

villains and that database could be

controlled by something which is called

as a models so just to get a field of

models let us create one more package

inside game

so inside game let me create a folder

called as models and inside this folder

let us create a init file to make it

unpackage let us go back to my games

file now what happens in an application

whenever you want to interact with a

database so you can imagine all of these

things to be a part of the database

because this is the place where we are

storing all of our data so normally a

model would do all of these things for

us so let's go into models and let us

create one model for our superheroes

so this becomes my superheroes dot pi

and let us create one more model for our

villains so this would be my file for

villains dot pi and let us start writing

up a code inside of this so first let me

go to my superheroes so let us declare a

class called as super hero model

and let us create the init method now

this init method does not take any

argument because we don't need anything

and this returns nothing now for the

instance variable we can simply return

all of the superheroes or a single

superhero so let's see how we can do

that we can declare an instance variable

called as self.all and we can return all

of the superheroes but let's see how to

do that for now let me assign it a blank

list let me go back to my file of my

game here I just want to cut out all of

this functionality for get all

superheroes and get superhero

let me cut it out go back to my models

file

and let me paste everything right here

now since this belongs to the class I

want to take it inside so

let me take it inside the class

and since now these are members of the

class the first argument has to be self

and here as well the first argument has

to be

self now let's see what to do next now

this method called as get all

superheroes it returns a list of

superheroes so this means that this is

the schema of the superhero

so let's import it let me go to the top

now what happens is we are inside the

package of models and the schema of

superheroes resides in some other

package called as schema which is right

over here so here we can say from

my package of game I want to go to the

package of schema and from here I want

to go to the model of superhero and once

over there I simply want to import my

superhero now you can see all of the

errors are gone

let me save this the next thing is this

is complaining because we have not given

the tides for this one so self dot all

is going to be a list of all my

superheroes right now it is blank but we

can easily get it from this method so I

can say

this is just myself dot get all

superheroes and that's it so what this

method is doing is it already has the

data for all of the superheroes

on this line it is creating a list

and on this line it is returning that

list so we have access to all of the

superheroes now what happens here is

since we have an instance variable

called as self.all we don't have to

expose this method to everyone and so we

can make this method as a private method

and you know the way to make it private

is by putting an underscore so this

syntax has to be updated right over here

so this also becomes my underscore now

let us go to this one

so this has to be my self dot underscore

get all superheroes and in fact we don't

require this line at all because this

time we already have a class and we

already have access to all of the

superheroes inside our instance variable

called as self dot all so what we can do

is we can take out this line

and here we can simply check for the

length of

self dot all and this also gets updated

to self dot all

and everything is looking beautiful

let us also create the string method

right over here so we can say Define my

Str

ICT self and it returns a string as well

now let's see what we would like to

display now since this model represents

our data we can simply print out a list

of our superheroes

so let's do that over here so what we

can do is we can simply print out the

names of our superheroes inside a list

let's see how to do that first let us

create a list for all of the names so

this can be a list of string and let me

assign it to a empty value then let us

just populate this list with all of the

names of the superhero so I can say for

my superhero in my self dot all I simply

want to append to my list of names so I

can say name dot append and each time I

want to append the name of my superhero

so I can say my super hero and his name

and let's see we have an error missing

written statement oh yes we are not

returning the list so we can say return

my list of name now we have one more

error and this error is because the

return type is a string but we are

returning a list so let's do one thing

let's use our formatted string so I can

use my formatted string and let me put

this inside my curly brackets now

everything is looking good let us repeat

the same thing for our villains as well

so let me copy all of these things from

this file go inside my models then to my

villains and let me paste over here so

this becomes my villain this becomes my

villain

this also becomes my villain

Everything Changes this also becomes my

villain again

here we have a

villain

let's change

this one as well and this also needs to

change so this will be villains we don't

have this method as of now but let us go

to the games file and let us copy

everything right from here so let us cut

all of these things

and go inside our villains model

let me

paste everything over here and let me

take everything inside my class now

since this belongs to a class let us add

self then this becomes a private method

then we need to add self over here this

line needs to go this line becomes my

self dot all same thing over here this

also becomes my self.all and this is

just for our super villains everything

is looking really good so till now what

we have done is we have segregated our

code as per it functionality wherever we

had only the structure all of those

files wet inside my schemas and where I

have to interact with my database or my

data those files went inside my models

now let us go back to our games file so

this is my game file right over here

let us start deleting all of these

things which are not required

so let me take it up if you see we would

have a bunch of Errors now let's try to

work on this file now this file is all

about the game and the actual logic so

this is the place where we are actually

implementing the game so the first thing

that I want to do is I want to rename

this file now since this file is all

about implementation I like to call this

file as just impl so which stands for

implementation you are free to name this

file whatever you want you can call this

file as your logic your brain or

anything that you want but for me

implementation makes much more sense now

let's see what we can do inside this

file first let me close this folder and

this one as well and let me only open

this file so this is where we are

working right now our implementation is

all about a game so the first thing that

we require right via is we require a

class of game this class will keep a

track of everything it will keep a track

of which player is playing the game what

is the game state is the game in

progress or someone has won or someone

has lost what is the state who are the

superheroes and who are the super

villains and this class is also going to

control all of the methods that we have

defined over here so it's going to

control our attack

and our win or lose as well so let's

create a class so this class is like the

implementation of the entire game let us

create a class called as game let us

Define the init method it takes a self

now this init method only requires a

player we will just take one player and

we will initialize a blank game in

return so let's accept one player the

type is a player now remember inside our

schemas we already have a player which

is right over here so let's go and

import the player from our schema and we

need to do one more change so this is

not a single schema this is key Mars so

let us add an s yes we want to make some

changes now since we have changed the

name of the package let us go to our

models

so by default Visual Studio code is

going to do this for you but if it is

not happening inside your IDE then make

sure this is schemas and for villains

this also needs to be schemas so let me

go back to my implementation of file so

here on the top I can say that from my

current package so remember right now we

are directly inside our package of game

so let me collapse my models and schemas

so you can see our file of

implementation is at the same levels as

our models and schemas and game itself

is a package so we can see from the

current package

I want you to go to the package of

schemas then go to the model of player

and import our player let us go to this

line right over here so our init method

returns nothing now let's see what kind

of instance variables do we require

first let me write all of the instance

variables and after that we can populate

them the first one would be for the

player and we already have the data

that's right over here cell dot player

next I want to keep a track of the game

state so I can say self dot state would

be my game State we will import that

shortly let us create the next variable

first we also need to keep a track of

all of the superheroes and all of the

super villains so let us create an

instance variable for all of the

superheroes let me get my Spring right

this has to be my superheroes and we

need one more variable for our villains

now let's see how we can populate all of

these things for the state we already

have a game State defined inside our

schemas so we can say

from the current package go to schemas

go to my

game State and import my game State now

let's see the first time we don't have

any data so we can assign the state to

initializing so we can just say my state

would be game state DOT initializing

now let's see for the next one we can

get all of the superheroes from our

models so let's go and import our models

as well

so I can say from my current package

go to my models go to my superheroes and

import my superhero model let's do the

same thing for our villains as well so

dot models dot villains import

the villain model and here we simply

want to initialize it so this becomes my

superhero model this becomes my villain

model now just remember when we created

the model so if you go over here and if

you see the superheroes you can see the

Constructor does not accept any argument

so that's what we are doing over here we

are not giving any arguments because it

is not required and with this we can

easily have access to all of the

superheroes and all of the super

villains as well let us create the

wrapper and the stream methods for this

as well so we can say my wrapper method

takes a self this returns a string and

let it return that this is a class of

game next let us create and string

method as well this returns a string now

let's see what we would like to return

maybe we would like to return all of

this details on separate lines so let's

see how to do that so I can say I want

to return a formatted string let me

collapse my sidebar for a while now and

let me take it up so the first thing

that we want to display is obviously in

the player and you can say self dot

player now we want to display lay the

state on a next line we can use a small

trick over here we can say backslash and

N so this is going to create a new line

for us automatically and on the next

line I would like to display my state so

I can say the state would be my self Dot

let me put a comma here as well so on

the next line I would like to display my

superheroes oh I need a code right over

here so I can say my

superheroes would be my self dot

superheroes let me get my spelling right

let me put my comma and we require one

more line now since this is getting a

little long let me split this so let me

put a brackets and let me take it down

and let me add one more formatted string

right over here and this would be for

our villains so we can just say that

self dot above valence let us go below

and let us take all of these things

inside our class of games let me copy

all of these things the method of attack

the method of

similar attack and we also need this

method of win or lose till this point I

want everything inside my class let me

take it inside let me save the file

and now we don't need all of these

things because right now we are just

creating a package and we will see how

to use this package in the future so let

me take it out and you can see we have a

bunch of Errors so let's try and work

with our file

so let's work with this one so this is

the place where the attack is taking

place so I can just say in this block is

for the attack now since this belongs to

the class of game we can write self

same thing will happen with our simulate

attack as well so I can just write self

right over here so let me save this

again this one this also has to take

myself looks good now let us go back

now let's see how the attack is going to

take place now let's fine tune our

attack Logic Let me put some

documentation so whenever we start an

attack we can change our state from

initializing to in progress inside this

we can say self dot state so when we

start an attack it changes to my game

State DOT in progress then let's print

out a nice line saying that start in

attack and if you want to check the

state we can simply print out the state

as well so you can just say my self dot

state so let us go down now let us have

a look at this line at this line we are

trying to get a single superhero but now

we have this method inside our model so

let me open up the file inside models if

you go to our superhero

now we have created a class called as

superhero model and inside this class we

have a method called as get super hero

so let us try to reference this method

right inside our implementation file so

what we can write here is we can simply

say that we want to go to the self dot

our superheroes so remember this

superhero is actually the superhero

model

let me show you one more time so you can

see this superheroes is actually the

superhero models so we can access this

method right over here get superhero and

that's the way we can get our superhero

let's do the same thing for the villain

so I can say my self dot villains dot

get villain let me collapse my sidebar

now let's go to this line land number

43.

so since this method belongs to the

class it has to be self dot now what

this method is doing it is actually

doing the attack so we can have a little

better naming convention so we can just

change the name from simulate to do the

attack let me change right over here

also and we can do one more thing we can

mark this method as private because this

is all about our internal logic no one

has to know how we are doing the attack

it's up to us how do we implement the

logic this also needs to be my double

underscore you can write a single

underscore it's up to you so this simply

means that this method is just private

to this class now we have a bunch of

other errors for superhero villain and

life as well so let's import all of this

and all of the errors will go away let

us go to the top and here we can say

from my schemas from my superhero let us

import my superhero schema the same

thing we can do for the villain as well

so from dot schemas dot our villain let

us import the villain schema and we can

do the same thing from dot schemas dot

my life let me import my life and let's

see what's happening next

so you can see lot of the errors have

gone

now this is a pretty easy error to fix

we just have to import final and that's

it but let's not do it right over here

let us create a new file called as

constants now let me explain why do we

require a new file called less constants

there may be times where we can have

multiple constraints for our game for

example let us go right over here in

this method of attack you can see that

we have hardwired the value right over

here three so we have three over here

because we have

four superheroes and we have two over

here because we have three super

villains so we can think that all of

these are simply constraints for our

game but we can make our game much more

modular what happens if you want to

attack four times five times or what

happens if we have multiple superheroes

or multiple super villains we need to

have a very easy method of doing all of

these things so for this convenience let

us create a new file inside our game

inside my package of game I want to

create a new file called as constants

let me add some documentation you can

imagine this file to be just a helper

module and that's what this is doing the

first one was for the number of attacks

so we can just say the number of attacks

and we can assign a value of 3 over here

now let us go back to our implementation

file and instead of hard wiring 3 over

here let us import that and let us use

that constant over there so we can say

from current package go to the model of

constants and import my number of

attacks so let us go down and let us use

that right over here now we can increase

and decrease the number of attacks as

desired let's go little down over here

let us do the same thing for this one

let us take it out so these values are

never going to change they are going to

be constants no matter what so let me

cut it out let me go to my constants let

me paste over here let me fix the indent

now if you already know that we don't

require a final keyword because when we

name all of this in uppercase by default

my Pi or our IDE is going to treat them

as constants so we can take this one out

and this one as well and in fact we

don't require string as well because our

IDE would be able to infer all of those

things let us go back to our

implementation and let us imported so

let me go to the top so from constants I

also need to get my winning message and

also my loss message let us go down

now since we already have access to

winning and the losing message we don't

have to do anything let me take out this

line This is not required now let's see

what's happening right over here here we

also need to update the state of the

game suppose we are winning then we can

say self dot the state would be my game

state DOT win and in case we have lost

then we can say game state DOT lost so

now we can keep a track of the state of

the game at any given point of time

there is one last thing to do in this

file

and that is right over here

so here if you see we are using 3 and 2

because we have four superheroes and we

have three super villains but what

happens if we decide to add a couple of

more superheroes or a couple of more

super villains so let's try to make this

code a little bit more modular as

possible so what we want to do right

over here is we can simply say I want to

have the length of my self dot

superheroes dot all minus of one now

remember your index is always one less

than the length and that's what we are

doing right over here let us do the same

thing here as well so I can say the

length of my self dot my villains dot

all and I want to minus of one the last

thing to do inside this package

is to create a file and let us create a

file let us name it as game dot py now

this file will have a single line of

code so first let me write it and then

let me explain what I'm trying to do so

I can say from the current package I

want you to go into my implementation

and I want you to import my game as well

as my player and that's it so what we

have done is we have created an API

which means your application programming

interface so whenever some other

developers have to interact with their

code or if they want to play your game

they simply needs access to just this

one file game.py they don't have to

import any of these things models

schemas constants implementation nothing

of those things are required all of

those things are our internal

implementation the clients don't need to

know all of the logic they simply have

to consume our logic that means this

simply have to consume our API so now we

are getting logic we have been creating

our application in different layers so

this was a layer just for our schemas

models was just a layer for our database

or rather data in our case and this game

this file acts as our API now let us

create a client file and let us play our

game so outside the game let us create

our client so let me call it as main dot

file so by convention main is always

going to be the most important file or

the place where our program starts and

as a convention we require a function

which is called as main so this is the

place where python will start all of our

execution so this file can also be

thought as your client let me put up a

documentation so this file or rather

this model is just as a client it is

going to consume our API game and that's

it let us import our API so we can say

from my package of game I want you to go

to the model of game and from here I

simply want you to import my class of

game and player now this looks a little

odd game dot game but what we can do we

can improve our design with a small

trick so let us go back to our package

of game and let us go back to the model

of game let me copy this single line and

let me put it inside the init file so

this init file is for the game so I can

just put my edit file right over here

now I don't require this module let me

take it out

yes move to trash let me add some

documentation over here so since we have

this inside our init file we can simply

write

from game

import game and player it becomes so

simple now let us go back to our API

file which is this one now the beauty of

creating apis is with time your game is

going to evolve and sometimes you may

have some breaking changes so this was

our first version maybe you can have a

version 2 or maybe you can have a

version 3 but at that time the client

does not need to update his code we can

refactor all of the code inside

but the skip is API file the same

so you see we have a lot of advantages

of breaking our application into

multiple layers now let's get going to

the last part and let us create the main

method where we can actually play our

game unfortunately this is the most

easiest part let me collapse my sidebar

so this is returning nothing so I can

say none let me put some documentation

this is the place where our game begins

Let Us create the first player so we can

say my first player is my player and

Lewis the last name is Zappa now let's

create a game for Lewis so we can see we

want a game for our player number one

here let us just check the state of the

game and since we are just starting the

game our state would be initializing so

let us just check if that's the case or

not I want to see the state of my game

one so game one dot State and the last

thing to do is we need to invoke our

main method so let me save the file and

let me try

running it beautiful so as you can see

we have the state of initializing and

that's what we expected right

now let's start with the attack so here

we can say I just want to have my game

one dot attack but before that let us

try to print the game itself so let me

say print I want to print my game one

let me comment this for a moment run the

file and this is how your game looks

like the player is Louis Zappa state is

initializing this is the list of all our

superheroes and these are all our super

villains beautiful isn't it let us go

back and let us have the attack first so

we can say I want to have my attack and

after the attack I want to see if I have

winning or if I am losing let me save it

and let me try to run the file amazing

so we have a very beautiful output

unfortunately we lost and Thanos killed

our Avengers but it is such a beautiful

experience let us go back and I want to

make one last Small Change what we can

do is we we can create something which

is called as method chaining that means

what if we have a syntax like this game

one dot attack and here we can just say

dot win or lose so this will look so

neat and nice let's see how we can do

that and it's very easy to do it let me

open up my sidebar now remember all of

the implementation happens in a single

file so it becomes very easy to find out

where do we need to make our changes and

all of the changes happens in this file

for implementation now since we want to

have method chaining we simply have to

return the game so that means on our

method of attack we simply want to

return the game itself so I can say this

method is going to return my game let me

collapse my sidebar and I also need to

return so at the bottom right over here

let me go on the next line I simply have

to say that I want to return self now in

order for this syntax to work we need to

import one more thing so let me go to

the top

the first thing that we want to do is

from future I want to import my

annotations now we can use this syntax

let us do the same thing for our method

of win or lose so this returns a game

and at the bottom let me just say let me

return self beautiful let me close this

file and let me go to my main file we

can assign the game back to our variable

so I can say game one is equal to my

game one now let us print the state one

more time right over here so what's

happening is we are starting with an

attack and then we are checking if you

are winning or losing initially the

state would be initializing and after

the game it could either be win or it

could either be lost let me take this

little up so the first thing that we

want to do is we want to print the game

then the status then we play the actual

game

and let us have the state back again so

let me save this and let me play this

game so here it is

so this is our game right here the

player is Lewis state is initializing

superheroes super villains beautiful

then we are starting the attack after we

start the attack the state changes to in

progress this is how the attack is

taking place but unfortunately Thanos

has killed Avengers so our final status

is game State lost so let us play one

more time let us see if you are winning

or not

no lost no lost again lost lost oh this

time we are winning it's so amazing so

here you can see that when we won the

game our state is game State win it's so

damn amazing

let us create one more player and let us

play the game for the last time

so let me go right over here and let me

create one more player this player would

be Chico Neutron and let us go down over

here now just for the sake of nice print

route let us print a blank line before

the next game so here we can see my game

number two would be my game and this

time we can say my player is going to be

my player number two and we can start

playing the game here itself so we can

say dot attack and after the attack I

simply want to check if I am winning or

if I'm losing this method chaining makes

our game so easy to use so let me save

the file and let me play the game for

the last time oh I think both of us lost

Kiko also lost the game and uh Lewis

also lost the game let us play the game

one more time no

oh yes at least this time Lewis has won

the game before we say we are done let

us have a look at last time now there is

no more coding left I just want to show

this file and this file is called as

thinking in layers so let me collapse my

terminal my sidebar and let me put this

in my preview mode so this is the last

thing that I wanted to show you let us

try to conceptualize what we have

learned so far in this video by making

this game so what we did was we divided

our application into multiple layers now

let's see what we exactly did you can

imagine the first layer was our data

layer and the packages were responsible

for our data layer live inside the

folder or rather the packages of models

and schemas the visibility is private

and the role is internal so what happens

is whenever we want to interact with the

database whenever we want to create a

structure all of that code will go only

in this packages the advantage is when

we have multiple people working on the

same project all of us can know where to

find the data the next layer can be

thought as our business logic layer and

this layer is represented by our

implementation and we have all of our

implementation inside this file I

ampl.pi again the visibility is private

and the role is internal that means we

as the developer of this game or of this

Library only we can handle this file the

next layer can be called as an API the

package of game can be thought as our

API remember we added a couple of files

to our init method and our client can

simply import all of those things from

our package so essentially what is

happening is our API is acting like an

interface between our internal logic and

our consumer so the visibility of our

API becomes public and our main dot Pi

file can be thought as a client because

the client simply consumes our API and I

hope this gives you a much better

understanding of why we divided our code

so much and why we created so many

packages

now that was such an amazing amazing

effort and I would like you to

congratulate yourself

this was a pretty tough and a very

intense course for beginner and you

definitely deserve much needed

appreciation you have done an amazing

job

wow that was one really awesome journey

and I am so happy to see you at the end

of this course

now remember that the course is just

ending but your journey is just starting

and you have to do a lot before you can

really understand python the first thing

that you need to do is you need to solve

a lot of problems

and I also have a couple of topics that

you can see if you want to progress in

Python

so

and here they are so this is what you

should be learning next have a look at

how to handle files and folders

iterators and generators form a very

important part of python especially when

you are working with classes and you

want to create it labels

so make sure you have a look at them

then list comprehensions are also very

useful

the next point about data serialization

and deserialization

now this is very important when you are

working with web applications where you

have to convert your Json data or if

you're working with some other data

types such as if you want to convert

your CSV file or Excel files to pandas

data frame and so on the next is

decorators we already had a small look

about decorators but decorators is a

pretty big topic the next is about your

object oriented programming in which I

would like you to have a look at

abstract base classes and also oops in

this tutorial we saw how we can inherit

from a single class but in practice you

can inherit from multiple classes you

can also create classes that act as an

interface so there is a lot more to

learn about oops as well the next point

is about multi-threading and

multi-processing and the next one would

be your concurrency and async IO now

python has been a little notorious when

it comes to concurrency but lately there

have been a lot of development

especially with the async iOS and tax

so if you want to make concurrent

applications in Python I would suggest

you to learn a little bit more about

concurrency the next one is testing now

without testing none of your

applications are going to be complete

python ships with a testing framework

which is called as unit testing and

there are a couple of other testing

Frameworks such as Pi test the next

would be web Frameworks if you want to

create web applications or if you want

to create apis then I would suggest you

to have a look at Django flask and fast

API and last if you are interested you

can always try learning machine learning

and deep learning so this itself is a

very huge Topic in Python and again I

can't stress enough that you have to

solve more problems and finally before I

say goodbye I would really love to hear

from you you can visit my website or you

can tag me on Twitter or obviously you

can check me out on YouTube as well

see you and let the power of python be

with you
hey everyone in this week's episode we'll talk about the most popular and commonly used programming language
python so let's begin and learn about the development of python and gain insight about the current id trends but
before that make sure to subscribe to our channel and hit the bell icon to get notified every time we come up with new
content python is very famous for its simple programming syntax core readability and english like commands
that make coding a lot easier and efficient due to this it is the most popular and preferred language
python has interpreted high-level general purpose programming language developed by guido van rossum at
national research institute for mathematics and computer science netherlands in contrast to popular
belief that python was named after the snake python was actually named after the show monty python's flying circus
guido van rossum formulated python in the late 1980s as a successor to the abc
language in 1994 python version 1.0 was released with features like exception
handling lambda map filter and reduce python 2.0 released in 2000 introduced
features like list comprehensions and a garbage collection system capable of collecting reference cycles
python 3.0 was released on the 3rd of december 2008. undoubtedly python 2.x
and 3.x have proven to be the most used versions as of today python 3.7.4 is the latest
stable version released in the summer of 2019. python is popularly used for development scripting and software
testing top id companies like google facebook instagram spotify and netflix among
others use python some major applications of python can be seen in the fields of machine learning
artificial intelligence data science and iot python also offers many libraries
like numpy sci-fi keras tensorflow django and flask pep 8 is the official
style guide that defines the styling conventions for python code a few popular open source python
projects include pip env statistics solving the traveling salesman problem
using self-organizing maps and python to bpm converter some of the trending python repositories on github today
include nlp ml from scratch by torch transformers 100 days of ml code among
others popular websites on the internet like reddit and quora are built using python
civilization 4 battlefield 2 sims 4 and world of tanks are some popular games
developed using python according to indeed the average salary of a python developer in india is about 5 lakhs per
annum and that in the us is around 124 000 us dollars users and admirers of
python especially those considered knowledgeable are referred to as pythonists pythony stars and pythoners
since its inception python has come a long way to become the most popular coding language and continues to
revolutionize the id industry python is a widely popular programming language that is used for web development game
development data analysis as well as data visualization hi everyone
welcome to this python developer full course by simply loan in this session we will cover all the
important python concepts techniques and projects that will help you become a successful python developer our highly
experienced trainers will take you through this live session but before i begin make sure to subscribe to the
simply launch channel and hit the bell icon to never miss an update so we will start by learning the history
of python and understand the top 10 reasons to learn python you will look at the job role of a python developer the skills they need to
possess and how the resume of a python developer should be then
we'll see how to install python and the anaconda distribution of python then we will shift our focus towards
learning the basics of python such as data types variables operators lists tuples and dictionaries
next we will understand about loops and conditional statements after that we'll get an idea about
object oriented programming concepts and functions in python we will also cover some important advanced python
programming concepts such as iterators modules generators as well as packages finally we will see the important python
interview questions that are often asked so let's get started let's begin and learn about the development of python
and gain insights about the current id trends python is very famous for its simple programming syntax core
readability and english like commands that make coding a lot easier and efficient due to this it is the most
popular and preferred language python is interpreted high level general purpose programming language developed
by guido van rossum at national research institute for mathematics and computer science netherlands
in contrast to popular belief that python was named after the snake python was actually named after the show monty
python's flying circus guido van rossum formulated python in the late 1980s as a successor to the abc
language in 1994 python version 1.0 was released with features like exception
handling lambda map filter and reduce python 2.0 released in 2000 introduced
features like list comprehensions and a garbage collection system capable of collecting reference cycles
python 3.0 was released on the 3rd of december 2008. undoubtedly python 2.x
and 3.8 have proven to be the most used versions as of today python 3.9.4 is the latest
stable version released in the summer of 2019. python is popularly used for development scripting and software
testing top id companies like google facebook instagram spotify and netflix
among others use python some major applications of python can be seen in the fields of machine learning
artificial intelligence data science and iot python also offers many libraries
like numpy sci-fi keras tensorflow django and flask pep8 is the official
style guide that defines the styling conventions for python code a few popular open source python
projects include fit env statistics solving the travelling salesman problem
using self organizing maps and python to bpm converter some of the trending python repositories on github today
include nlp ml from scratch pytorch transformers 100 days of ml code among
others popular websites on the internet like reddit and quora are built using python
civilization 4 battlefield 2 sims 4 and world of tanks are some popular games
developed using python according to indeed the average salary of a python developer in india is about 5 lakhs per
annum and that in the us is around 124 000 us dollars
users and admirers of python especially those considered knowledgeable are referred to as pythonists pythony stars
and pythoners since its inception python has come a long way to become the most popular
coding language and continues to revolutionize the iit industry so what really is python programming language
is an object-oriented high-level programming language that supports built-in data structures and dynamic
semantics it supports multiple programming paradigms such as structured
object-oriented and functional programming python is often described as battery's included language because it
has a comprehensive collection of standard libraries python supports different modules and packages which allows program modularity
and code reuse python was developed by guido van rossum
and its implementation started in december 1989.
python 1.0 version was released in the year 1994 python 2.0 came out in october 2000
while python 3.0 was released in december 2008.
now that you have got an understanding of the python programming language let's now look at the top 10 reasons why
you should learn python so at number 10 we have ease of use
one of the most common reasons to like python is that it is quite easy to learn and code
it provides a simple syntax that improves readability and makes it easier to understand so developers can create
any desktop or machine based application using this language python is very versatile and is
instrumental in artificial intelligence and machine learning we will talk about this later in the
session compared to java or cc plus plus it has fewer lines of codes
in the example here we are printing a hello world program in java as you can see
if you have to write a program in java you first have to declare the class name along with its scope
next using curly braces you need to pass the main method along with its arguments
and then using system.out.println method you can print hello world that's quite a
tedious task isn't it the same task for printing hello world
can be done using just one line of code in python as shown here you can write the print function and
pass whatever you want to display inside the brackets and that will print the output
it is so simple that is why python is considered as a
high level language and its open source you can just download it from the website and start using it
at nine we have active community you need a community to learn new
technology and friends are your best asset when it comes to learning a programming language python has large
community support it has an extensive and active community
to assist engineers developers analysts and data scientists with expert support in case of programming errors or issues
with the software you can just go ahead and put your queries in the community forum
the community members will address your queries in real quick time communities like stack overflow also
brings many python experts together to help learners python enhancement
proposals or pep is where the proposals and the improvements are announced
also there are a set of recommendations or core values called the zen of python
written by tim peters that represents the guiding principles for python development
up next at 8 we have portable and extensible multiple cross language operations can
be performed effectively because python is portable and extensible in nature
for example if the users have a python code written on windows and they want to execute on a
mac operating system or linux operating system or solaris they can easily do it without any amendment
they can also run this code on any platform flawlessly and without any interrupt
due to its extensibility feature you can integrate other programming languages such as java dot net c and c plus plus
codes with python the components of other programming languages can be used with python and
thus it can be used to make a cross platform suitable application too so it is a really good feature that
python provides
the next reason to learn python is testing frameworks
python supports several built-in flawless testing tools and frameworks that help in debugging and speeding up
workflows some of the tools and frameworks supported by python are pi test selenium
and splinter this is the reason for which every tester tries to use python-based tools
and frameworks to test any application or code or to validate it in an easier manner
pi test is the most recommended testing framework for functional integrational and unit testing
you can run selenium test scripts using python programming language to automate various tasks and splinter is an open
source tool for testing web applications using python it lets you automate browser actions
such as visiting urls and interacting with their items
at number 6 we have libraries and packages another reason why python has become so
popular in the industry these days is that it has a massive collection of libraries and packages that make your
tasks simple and easy it has a range of libraries packages frameworks and modules for data
manipulation statistical calculation web development machine learning and data
science python programmers have developed tons
of free and open source libraries that you can use you can find many of them via python
package index the repository of python software python provides the default package called pip anaconda is a third
party python ecosystem other examples include numpy scipy and xango
then we have scripting and automation
python is not just a programming language it can also be used for writing scripts for automating tasks and
workflows without human intervention
the code can be written in the form of scripts and executed later further it is interpreted by the machine
and checked for errors at runtime the machine is used to read and interpret the code
once the developer checks the code it can further run or be used several times without any interruption
this allows you to automate a set of certain tasks within a program or the same code can be used with other
applications as well at number four
we have web development another reason to learn python is that
it makes the web development process so much easier
it provides a wide collection of frameworks that make it easier for developers to develop web applications
some of the examples are xango flask pyramid turbo gears cherry pie etc
these frameworks are written in python which makes the code a lot faster and stable
the task which used to take hours in php can be finished in minutes using python
python is also used for web scraping django offers many elements of intricate
programs such as template design management panel signing in signing up
signing out url routing etc
the user establishes the framework all these features become ready to use
flask is a microwave framework written in python
of all the components that are part of this module they are all ready to execute in the server context
pinterest and linkedin use flask pyramid offers more attributes than
flask it will assist users with url routing and authentication support
turbo gears is a highly recommended and scalable framework that supports features such as authentication
caching identification management of sessions and pluggable applications
up next at number three we have machine learning the growth of machine learning has been
phenomenal in the last five years and it's rapidly changing the world around us python is one of the most preferred
programming languages for machine learning because of its simple syntax and support for several machine learning
libraries using different libraries and functions in python the system can learn and train
itself from past data once the system is trained it can then
learn to adjust itself to new inputs finally it can make predictions and
perform human-like tasks automatically
at number 2 we have data science machine learning and data science go
hand in hand python is robust scalable and provides extensible visualization and graphics
options hence it is widely used in data science python has libraries such as numpy for
numerical computation of data pandas for operations to manipulate data on numerical tables and time series it
also provides simpli for symbolic computation and scipy for technical and scientific computations
it has another library called pi brain which is sought for python based reinforcement learning artificial
intelligence and neural network library scikit-learn is a machine learning library for creating classification
regression and clustering algorithms and finally it provides by torch and tensorflow for deep learning
finally coming to the most important and the top reason to learn python which is career opportunities and salary
python language provides a variety of job opportunities and promises a high growth graph with huge salary prospects
it is been used by most of the tech giants industry leaders using python are amazon
google facebook ibm nasa netflix and youtube
next you can see the google trends but i have considered three programming
languages python java and c plus i have compared them for the past 12 months
you can see it clearly on your screens that python has become a frontrunner in terms of popularity and web search
volume it means people are interested in python they want to learn it and use it in
their work you can also check for the youtube search
there also you will find that python programming language is the most searched language on youtube
now on your screens you can see the report of pypl which is popularity of programming
language index it is created by analyzing how often language tutorials are searched on google
it is a leading indicator the raw data comes from google trends the bar graph depicts that python is the
most popular and widely used programming language across the globe followed by java then javascript and c-sharp
the popularity of programming language index can help you decide which language to study or which one to use in a new
software project
the next graph shows the popularity of python and java over the years starting from 2004
till the current period which is 2020. worldwide python is the most popular language
python grew the most in the last five years by 19.4 percent and java lost the
most by minus 7.2 percent
now let's talk about the different career opportunities and the job roles that you can get into if you learn
python language first you can become a python developer
where you will be asked to write and test codes debug programs and integrate applications with third party web
services second you can become a web developer here
you will be responsible for writing server side web application logic python web developers usually develop back-end
components connect the application with third-party services and support the front-end
developers by integrating their work with the python application
you can also become a data analyst if you know python as a data analyst you have to gather
data from multiple sources using scripts analyze that data develop and implement databases and data collection systems
you can become a data scientist as a data scientist you need to understand the challenges in business
and come up with the best solutions using modern tools and techniques to analyze visualize and build prediction
models to make business decisions lastly you can be a machine learning
engineer where you can develop intelligent machines that can learn from vast volumes of data and apply knowledge
without human intervention so there's a lot of scopes if you learn python
now let's have a look at the salaries of some of these job roles
so if you become a python developer you can earn an average salary of
76526 per annum in the united states while in india you can earn an average
of 4 lakhs 98 000 rupees per annum
also if you learn python and become a data scientist you can expect an average salary of 113
000 per year in the united states while in india you can earn an average of 10 lakhs 28 000 rupees per annum
let me now go ahead and call out the 10 reasons for learning python once again at number 10 we had ease of use at
number 9 we had active community at 8 we had the portable and extensible feature of python at number seven
we saw the testing frameworks at six we had libraries and packages
then at five we saw scripting and automation followed by web development then we had machine learning and data
sense at number three and number two respectively and finally at number one we had career
opportunities and salary so who is a python developer let's answer this so here are some of
the technologies used by a python developer pandas anaconda tensorflow
python ides django web framework and python a python developer is one who develops
backend components of a web application using python when working as a web developer now the
web frameworks like django and flask are used for this purpose a python developer is also the one who
writes effective testable and scalable python code he also performs data
analysis when working in the field of data science so basically a python developer develops
deploys debugs and maintains a project so let's go through the skill set of a
python developer now the core python skills that a python developer possesses are data structures
like arrays list stack cues trees and graphs there's oop concepts like inheritance
classes and objects and abstraction there's packages and functions that is importing external packages into a
python code database and its connection that is connecting a python backend to a
database like mysql when it comes to data science skills there's numpy that
is a library for performing mathematical calculations there's pandas that is the library for
storing and manipulating data efficiently this scipy and then there's matplotlib which is a library for
plotting charts and graphs for a given data and finally there are machine learning algorithms which consists of
models like supervised learning unsupervised etc now coming to web developer skills there
are frameworks like django and flask for back-end development of web applications
and then there's web scraping which includes taking data from websites and converting that data into usable format
there's api handling which is basically handling api requests for a web application to perform server side
operations and finally there is back-end connection which basically involves the back-end part of a web app
usually handled by python frameworks now moving on let's look at the python
developer job roles first up is python web developer now a
python web developer usually writes server-side code works on the web frameworks like django and flask
collaborates with the data team to gather end users requirements develops the server-side platform deploys
applications performs tuning usability improvement and automation
moving on next job role is data analyst now a data analyst generally works on
python libraries including matplotlib numpy pandas etc carry out data analysis
collect using the scripting language explore data sets gather requirements
tune in applications analyze problems communicate findings with the team or stakeholders
the next job role is automation test engineer now an automation test engineer usually
works on python test framework tools including pi test pi unit
perform complex system tests troubleshoot code issues create test scripts design the automation framework
perform a b testing next up is machine learning engineer
now machine learning engineer has the following roles to perform statistical analysis of data
put machine learning models into production research and transform data science prototypes
research and implement appropriate ml algorithms and tools perform ml tests and keep updated with
the ml trends the last job role is software engineer
now a software engineer is expected to write server-side code collaborate with the design team to gather end users
requirements develop the server-side platform deploy applications perform
tuning usability improvement and automation moving on to the next topic let's look
at the python developer salary trends now software engineers with python
skills are offered better salaries across the globe the average salary of a python developer
in india is around 7 lakhs 55 000 rupees per annum the average salary of a python
developer in the us is about 79 000 us dollars per annum
moving on to our last segment python developer resume so let's go ahead and understand what a
python developer resume should portray just keep a few things in mind when you're preparing your resume
your resume should be clear updated and concise you should prioritize the skills
according to the job role you're applying for and do not write anything extra that's a
big no the recruiters are smart enough to know that so do not lie and do not write extra
firstly let's look at the pressure resume so if you're refresher these are some of the points that you need to know
first you have the resume header now the summary is supposed to be clear and concise
just say what exactly you want and some of your strengths next is the profile links and your portfolio so you can
mention your linkedin profile link and also your github repository link if you have next up is the projects now clearly
depict the goal of your project so just in case you worked on see five projects make sure you keep it concise and crisp
next up is your education do not lie here make sure you give a relevant education with grades next you have the
certifications if you have any certifications or achievements go ahead and write them down
next you have the technical skills now again prioritize according to the job role and lastly you have your
non-technical skills this could be your communication analytical skills problem solving skills etc moving on to an
experienced developer so again mention the resume header then you have the summary again very
crisp and clear go ahead and mention your portfolios and your links coming to experience now here you have
to clearly depict your work you will have to make sure that you write down all your responsibilities in that
company do not go overboard and write extra keep it very concise
again relevant education and your grades you have technical skills the same goes
for this as well prioritize according to the job role and finally you have your non-technical skills now let's go over
some of the features of python and these features are actually why it's considered
that using python is advantageous over using other languages so let's start
with some of these points now as we mentioned python is very it's a very readable program code readability is
very important it's one of the design philosophies behind this when it was being developed it's very easy to learn
which is why python is an entry point for many people that are just beginning to learn programming and as i mentioned
earlier it's a high level language in python we since python is open source as as i already mentioned so it gets it
benefits from all the the benefits you get from any open source technology now
it's also portable so what this means is that if we create a code in python and
we create in a particular system say on windows we don't need to make any changes if we wanted to use the same script or that
same piece of code on some other system say on a linux system or a mac system python itself comes with a
very large standard library this this facilitates us a lot because we don't need to
create our own libraries or modules or have to download very specific libraries
most of the problems that we do encounter quite commonly can already be solved by
the standard libraries that have already been provided by the developers of python write right from the beginning
now later later on during the course we will encounter what is the meaning of a data structure a data structure is
essentially a manipulation of a if of an object of an object of data and
as as you will see later python has one of the most user-friendly data structures
that can be found in any language especially compared to some of its contemporaries now python is a
dynamically programmed language and this is very important and what this means is that in most compiler based languages we
there are certain processes that can only happen during the compilation stage so what a dynamic programming language does
is it takes all those compilation specific tasks and processes and
it it does it for us as we actually type the code so we don't need to waste time
or spend extra time to do something that would otherwise be needed to be only done in compilation we would have to set
up specific uh runtimes just for that so this allows us to create our programs
and solutions much faster and allows us to debug much easier and yeah so it's a it's it's a very
important feature about python now quickly i will just go over some of the areas of python where like areas of um
or different domains where python is very heavily implemented and the first
one the first few ones that come to mind are like web development and
ai and machine learning so you have technologies like django and flash that are
built on top of python that are used extensively for web development
when it comes to something like artificial intelligence or machine learning you have
distributions such as anaconda you have pandas and many other libraries like scipy and numpy that are used
extensively to so tackle problems in this domain and similarly python finds
use in most of the scientific work that goes on nowadays because of
again some of the libraries that i have already mentioned such as scipy interestingly if you are into game
development or gaming in general you would see that python actually has certain libraries and
certain technologies that facilitate game development very very well one very
popular game in fif in case you are into gaming is a world of tanks that is built on python some of the other applications
are of course desktop be creating desktop gui's image processing graphic design applications and
something that is very relevant to me and of course you as well is a creation of education programs and training
courses there are many technologies in the environment of python that
were almost designed for the specific purpose of being able to present certain concepts
or to be able to teach certain classes and i can't think of too many programs or
too many environments outside of python that are better to solve these education
and training course related problems and situations let's uh let's
get to actually installing python so now that so i will show you how to install python on windows since i have a windows
system uh however i will also point out uh the way you you would have to install
python on aim on mac os or linux or even on mobile so yeah let's get started so
to install python on your windows computer it's as simple as going to the website python.org and selecting the
downloads section when you do click on downloads you get redirected to this website that uh this web page that i'm
on out here it by default it will ask you if you want to download python 3.9 which
is the latest version but of course if you for whatever reason if you needed a particular version of python you can
download that as well by just scrolling down and choosing the option that you want now it's important
to note that whatever option you choose of course i would recommend the latest one but no matter what option you choose
i would recommend you choose a version of python three point something because uh previous versions of python uh namely
python 2.7 and uh and basically every version of python two point something as
it will not receive any more maintenance and updates uh because uh the developers
have decided that python will they are trying to shift towards uh maintaining and updating python three-point whatever
completely right now so yeah let's not delay this any further and let's download python
3.9 so once you select the option out here you'll be you'll get an installer all
you have to do is click on that and it'll give you two options to customize installation or install now i would of
course recommend just to install now since you're a beginner do not worry about what a custom installation is if
you have multiple drives in your system by default the python will be downloaded
into the drive where your windows is actually installed your your main drive so as you
can see now that once my setup is done it should give me a pop-up soon so my setup is done for python and this is
essentially how you would um download python on your windows system uh but what if you had mac os or if you were
using linux well for mac it's a it's actually almost as simple you just go
if you see out here below this download button python option you get the website
asking you are you looking for python on a different os and it gives you the options of linux mac and even other os's
but for mac if you wanted you would just open this tab and just like the windows option you would
choose a version and you would choose an installer for that version so if i wanted to say python the latest one i
would just download this installer and i would install in my mac system now when it comes to linux i cannot show you
exactly how you would install it there are certain commands that you have to execute but essentially again if you
would just choose the linux option out here it would take you to a page with different installers and
essentially packages for linux systems in specific what i would recommend to you if you are a linux user and you need
python is to go over to the realpythen.com website and they have a very good
essentially instructions on how to install python and since i don't have a linux system i cannot directly show you
how to install python on linux so yeah if you do have linux please head over to this website and this should be of a lot
of help to you now as i had mentioned you can actually install python on your mobile devices as
well so if you were say an ios user you would go to the ios app store and
download an app called the python is the app for ios it essentially is like a
full-fledged python environment where you can develop in python on your iphone or even ipad
and if you're an android user you could you would go and download an app called the pydroid3
there's a free version and a paid version for this app and of course the difference between the free and paid is
that the paid supports code analysis and code prediction these are certain details you don't have to worry about right now and
honestly if i wouldn't worry too much about installing python on your mobile devices currently since i am assuming
most people would be learning programming and programming in python on their pcs or laptops what i had actually
shown you was installing what is called an implementation of python
on your system an implementation is essentially a program or a software or
an environment that allows you to actually work in python so what i showed
you was how to install the by default or the most basic or reference implementation that has been created by
the developers which is actually called c python even though you would not you would not have seen the word the letter
c or the prefix c but yeah that implementation that i had i had downloaded myself and i had shown
you to download uh is actually the c python implementation which is python built on top of c the the c language
essentially uh there are other implementations such as iron python which uses the.net framework and j
python that uses java virtual machines that you could use if you were interested but again these are things
that i would not worry about too much right now so now that we have tackled on how to install your implementation of
python i want to introduce what is called a distribution to you this distribution is called anaconda
anaconda is a very important distribution especially if you are looking to
use python in data science and machine learning and ai which i am assuming is the motivation for many of the people
that are actually watching this video that they actually want to move into data science and they need to learn
python as a foundation towards the moving towards data science and if that
is your goal or in any case whatever your goal may be i would recommend that
you install anaconda distribution now do not get confused between anaconda and
python their anaconda is python with i in the form of a bundle and this bundle
contains not only the basic python implementation that i had shown you download but it contains a lot of extra
libraries and technologies and softwares as well so of course this means that would you need to download both of course not if you
download a python you do not need anaconda to work on python and if you have already downloaded anaconda which i
will show you how to do it in some time if you have already downloaded anaconda you don't need to download python
separately so i'll just speak about anaconda little briefly so as i said it's a distribution it it contains a
bundle which includes the basic python implementation and a lot of technologies and softwares and
applications that have essentially helped us to use python in
in in specifically managing the big data applications and data science related
projects so so now i will show you actually how to install python i mean anaconda on your system it's as simple
as it's actually as simple as downloading just the this thing so if i did a quick quick google of
anaconda so the website that i'm looking for is anaconda.com and i'm looking at
products and i'm looking at individual edition there are other editions as well like commercial team edition these are
for companies usually or for more professional sort of projects so of course we are looking at the
individual edition and if you selected this page you would be taken to this particular web page where it will
ask you if you want to download and again there are options depending on which machine you're using after you're
using a linux you would choose one of these two if you are using mac os you would use one of these two and since i
am a windows user and i have a 64-bit system this is the option i would use so again it will it will first download and
install it for you and as you can see my installer has been downloaded so
now upon opening it it will open up this installation thing and you can just
click next on most of these again if you want to specify your destination folder you can change it here mine will be with
a default folder in the c drive and you can leave this unticked you can you can change these options much later so
this is how you install an account on windows and it's pretty much the same on other systems as well now once it's done
i will show you what exactly what are some of the things that anaconda contains that are not there if you
uh installed python like the way i had shown you earlier just the bare bones python implementation so as you can see
here my installation is actually complete and now i will open anaconda and i'll show
you what how you can actually use this anaconda so if i search for anaconda in
my system i would look for something called anaconda navigator to actually get started with this and when i open
that it should open something like this so this is what opens when you click on the anaconda navigator and as you can
see there are a bunch of applications you don't need to worry about what these mean uh right now uh just understand
that this this is essentially a bundle of uh different applications and technologies that come along with just
the normal installation of python that you get when you install anaconda navigator now now that we have actually
tackled where we've seen how to install and i'm hoping and i would recommend definitely
that everyone is watching this video installs anaconda not just the normal python uh installation or implementation
now that we have gotten all the introductions and the basics and the installations uh regarding python aside
uh let's get right let's get down to actually creating our first script so now the question is uh how do we
actually start doing this task of creating our first python script how do we how do we realize uh now that we've
installed a python like uh now let's how do we start doing something so
the answer to that question is that typically when you're working on python the one of the most basic things that
you can do is create a python script and execute a script a script is essentially a sequence of commands and instructions
that you give for python to run and execute to give you a certain result so i will show you
how you can create a python script now there are multiple ways of creating a python script you can create it directly
from command line which is obviously something i would not recommend because it is not convenient and easy and it's
not very useful for a beginner another way is using a text editor such as the one i have opened right now which is the
notepad plus plus text editor now it's very important to not get confused uh between notepad plus
plus and the standard notepad that comes with your windows or wordpad for that matter in fact text
editors such as notepad and wordpad that you are more familiar with create
text and files in a form that is called rich text now rich text is something
is text that contains formatting and fonts which is
actually a hindrance when it comes to creating actual code so what we need is
a text editor that creates or writes text in what we call as plain text plain
text is obviously text which does not contain these fonts and the formattings and it only respects white spaces and
indentations those two being actually useful towards creating code unlike
fonts and formatting which are only a visual thing so notepad plus plus is obviously a text editor that creates uh
plain text documents uh that is very that was actually created with uh programming in mind obviously you can
use a bunch of other text editors such as wim and atom and you can google for these there are plenty of them so uh
without any further ado let's create our first python script so one of the most
common one of the most famous examples of a first program in any program for that
matter not just python is creating a print statement that gives us a statement saying hello world so in
python this is how you would go about or this is the syntax you would use to create the statement
all right now where it is very important when you are saving your python program that you
use the dot py prefix so if i were to save this i can choose whatever folder i
am going to choose yeah this folder seems fine so now i give the file name over here as say i
want to keep it as test i need to prefix this with dot py and this tells
any uh sort of interpreter or anytime we need to read the script to know that
it's a python script we need to add a dot py otherwise it will not be treated as a python script will be treated as
some normal document sort of a thing so now that i have stored it as dot py i have created my first python script
now obviously the next question is i need to see what happens when i execute this line
when i run this script essentially so to see that um there are multiple ways
the first way that i will show you is a command line method which is obviously again before we get into it it's not
something that i will be using to teach you it's not something i would recommend you to immediately start using
but for the sake of showing i will show you how to execute a script in command
line well to do this you go since i have installed anaconda in my system and i
will be using anaconda to work in python what i will look for is something called the anaconda prompt as
you can see this is the option that i get anaconda prompt this will essentially open you a command line
under the environment of anaconda or python so in this now i'm already in the folder i believe
that had my script so how do i call this script or how do i run the script well the command is
python space the name of my file which was test of course the prefix is very
important so i enter test.py if you if this was in a different folder you would have to change your folders and command
line which is again something that i might show you later but since my file is already in the folder that i am in in
my command line i would just have to enter this command right now so if i execute this as you can see it's given
me an output of hello world which is which is what i wanted i wanted it to print this
these two words and of course the command line is now waiting for the next command for me so this is uh one of the
most simple ways of or the most rudimentary ways of executing a python script now another question would be
well this isn't the most visually appealing or not the easy to read or easy to use way
of executing scripts and i would agree and that's why i'm going to introduce a
another technology or a software called the ide so the ide in python or in any
programming language stands for integrated development environment it's essentially a software that not only
allows us to run scripts but it allows us to create the scripts it allows us to debug it allows us to see outputs it
allows us to see intermediary outputs it allows us to do a wide variety of tools and tasks and it comes with a
bunch of robust features to enhance our python programming experience so let's let's see so i will show you a an ide
called spider which comes bundled along with the anaconda distribution that i had mentioned earlier so if i open the
anaconda navigator as you can see the anaconda navigator shows me a bunch of technologies and
options and i'm looking for something called the spider ide which is over here as you can see here it's a scientific
python development environment this is exactly what i'm looking for so i am looking to launch this so now that
i've launched it you can see out here this is what an ide looks like now this looks very sophisticated and it's it's a
one and any almost any ide is a wonderful software that where you can create your
code you can debug your code you can check the results you can make adjustments changes and you can do a
wide variety of tasks and functions with relation to your programming so this is
the spider id in particular and this is how it looks don't worry about the exact details just know that on this left hand
pane is our current script that is open out here and out here we will get the results in this
what we call a console console essentially so now that we have already created our script in notepad plus plus
and i want to open that script and i want to see uh how and i how it would uh the result of that script would look in
an ide so let's just open it so we can browse for our file and as i had
named it test this is the file over here i open this and as you can see out here
in the left hand pane my script has opened and the command that had given our had written is out
over here now if i want to run this application i press this green button and as you can see the result of my my
execution essentially is over here it's in slightly small font but as you can see over here
it says hello world and it's way and the next line is essentially it's it's waiting for me to do another execution
of the script and then it will give me new results so let's actually give the system new results so now that i have
printed something called hello world let's let's change what's written over here let's say i will perform
basic maths all right and let's actually perform the basic maths again don't
worry about the details the syntax uh what i'm exactly doing these are things that we will actually cover in the
in upcoming videos and modules so let's create a variable called a let's store a
a number three let's create a variable b story number five all right let's get
another variable c which will store the result of what's in a and b in the addition of a and b all
right and let's print the result or print what's in
this variable c or what's the result of a plus b i will print a statement saying the result of
the addition of 3 and 5 is all right and i will put
my result over here as you can see i should get the result in this pane so
let's execute this and you can see uh my first line is executed saying i will
perform basic maths and the next line says the result of the addition of three and five is eight so
this in this script what i've done is i've performed uh two print statements and i've performed a basic expression
some variable assignments all of these things we will be doing later this is what i'm what i'm essentially trying to
show you is that ideas are a very convenient way of not only creating the scripts but actually seeing the results
and then making adjustments as well we can com we can create a completely new script we don't need to create a script
from some special file or text editor i can just create a new file here and this is my new script essentially so i can
start working on this new script right over here from the get go so ides are very powerful spider ide comes bundled
with anaconda there are other ideas such as the i idle ide it stands for
indicated development and learning environment so the idle
ide comes as part of the basic python implementation that i had
shown you in the previous video where if you just installed a basic python
implementation it would come along with a basic ide known as idle or integrated
development and learning environment but of course since we are using python and that is what i would recommend
it comes with a more robust ide called spider which is actually very very helpful for
scientific and numeric applications and was designed specifically with that
in mind now this is not the only way we can actually work with python there's another very
interesting and uh a very educative method of creating python let's say
python programs and it's something that i will be using extensively throughout this course to explain different
concepts so this technology is called or the software is called uh notebooks
now before i get into the details i will state i will just open node a basic
notebook so the notebook that comes as part of anaconda is called the jupiter
notebook and when i open or when i launch the jupyter notebook this is what i get now
a very important feature or a a feature of notebooks is that notebooks
uh a web browser or a web-based application so you it's not something
that you can use if you are offline or disconnected basically if you're disconnected from the internet it is something where which for which you
would need an active internet connection however it is way more robust and it has
very very good uh properties that allow it to be used in education or for
presentations and such so as you can see this is my jupyter notebook these are a bunch of folders don't need to worry
about what these are right now i will show you how to create a fresh notebook
so if you go here now you go to new and you select under notebook the python 3 option it will open you your first
notebook as you can see this line is essentially waiting for me to enter some sort of a command or a
statement that i would give in a normal python thing now if you would have noticed the diff in uh until now
everything that we were doing involved us uh creating a script which was the whole series of commands and functions
so if i go back to my spider ide as you can see like this is a whole script and
this script contains multiple different tasks and functions that are individually
being performed so this is a separate print function this is a separate edition another separated print function
and for longer programs or larger programs you like you have multiple different tasks being done
and if you were using a script you can only see the result of something like this by executing the whole thing at
once you cannot see exactly like what is the result of just this print statement or just this uh it's not typically what
an ide is used for and this is where notebooks come in super handy if i had
to break down my previous script essentially where i first did a print statement where i said some random thing
say hello yeah so if i execute this particular line you can see it gives me the result
now i want to do what is five plus three it should give me the result over here eight now the next
another part of your program might be storing five and three into variables so
i can do this and i can do this so now this line will store the variables now i want to do the addition of what is 5
plus 3 but i want to use the variables and i want to see what's the result as you can see a plus b means 5 plus 3
which is 8 and i've essentially broken down various different parts of my previous script into
into its individual tasks and i'm able to see what each part of that script does and this is very good when it comes
to making presentations or trying to teach a class so i will personally be
using notebooks a lot to explain different different concepts of different concepts when it comes to
python and i would recommend that you get used to notebooks in general because
it's an amazing way to learn python programming or programming in general in fact and again as i had mentioned earlier
notebooks are something that it's an online application it's a web-based application
so i will have to need a active internet connection to be able to work on a
notebook which could be a disadvantage if you do not have a consistent internet connection and in that case you would
probably use your ides or text editor which you can be used offline as well in
this video we will be introduced to the concept of variables and expressions
let's start with expressions well an expression in python is anything that
results in a value its difference although the difference between an expression and a standard
statement in python is that a statement in python is something that results in
an action or an execution of a command there is no calculation per se or any
sort of manipulation or as i said earlier calculation resulting in between
two different say numbers or other objects that results in a value and this happens in the case of an expression so
for example if i were to add two numbers say five plus ten this is an expression
which should where two objects five and ten are being added and a result is
being given to me which is fifteen now let's see an example of a statement well
a statement could be something like a print statement so when i ask python to print something for me
it's not calculating anything it's not evaluating anything it's simply performing an action that i have or a
command that i have given the system which is to print whatever i have entered over here as you can see so this
is a statement similarly there are another type of statement known as assignment statements which we will
learn actually right in the next section well let's move on to variables right now now earlier you might have learned
about objects in python so objects are essentially data
that we can work with or manipulate in python now variables are a place to
store these different objects um usually it's much easier to
store objects in python instead of using the objects explicitly themselves
because objects may be very completely complicated whereas variables are very simple to use and very simply
very unnamed in a very simple manner so that we can use them quite often in our programs now it's important to note that
in python we do not have to explicitly declare or define a variable to create
them in fact variables are created in the same statement where we assign some
object to that variable in python the assignment of variables happens using the assignment operator which is the
equals to sign so if i were to if i wanted to assign a number say 100 to a
variable say b well it would be as simple as doing this now anytime i want
to know what is stored in b i just have to enter b and i will get the value that
is stored in it and we can store different types of objects inside a any variable let's say i store i want to
store this particular word in the form of a string now this is stored in x and if i want to know what is an x i can
just see what is here and it's a string hello which i had stored earlier now it's very important that we follow
certain naming rules when it comes to naming our variables in python or else we may be thrown errors or we might get
some problems in our program so the first rule is that you cannot start your variable name with a number so if i were
to give a variable name like four num is equal to something say
the same string hello this would be an illegal variable name and i will get an error when i try this so if i were to
choose a num for is equal to hello this would be perfectly fine i won't get an error the
second rule is we are not allowed to use any non-alphanumeric characters except the
underscore character while naming our variable so for example if i were to
name my variable num underscore 4 and i say i said random some random string
this is perfectly fine however if i change num underscore 4 to num hyphen 4
this will throw me an error as you can see over here next the third rule is
that variable names are case sensitive so if i have a variable called num
or say num if this was one of my variables and i stored say the value of 50 this is not the same as me writing
num all in capitals and say storing some other value 60 these are two different variables so it's very important that
when you name your variables you are aware of what case you are writing them in because python variables are case
sensitive now the final and probably one of the most important rules in python is that you're not allowed to use what we
call reserve words in python now python has a bunch of reserved words these words essentially are performed or they
are used to perform certain special functions and are used as identifiers for certain special functions in python
that we that have a special purpose like that particular word has a special purpose within the python programming
language and we cannot use them to name our variables so a list of them either you can see over here some of them are
like false def if uh d e l raise and there are like there
are around 33 of them and sometimes some of these words are taken out sometimes there are more words added
as python gets updated now let's let's move on to a concept
where we try to really understand what do we mean by storing data inside a variable now when i say that we are
storing something inside a variable you get an image or you get an idea in your head that this variable is like a
container where we store or we put a particular object inside it so does this mean that variables have a place in the
memory are they also an object that is placed in the memory where we can put other objects inside of well i'll show
you an example where this idea is kind of disproven or where i'll show you that the idea of variable is kind of
different than what we understand by storing something inside a variable now let's say i'm storing the same object
i will take this object as some random number let's say 100 and i'm going to store it into two different variables so
i take x is equal to 100 over here and in the next line i will store 100 in
y as well now if objects were i mean if variables were objects that we placed in
our system then x and y should have two different ids but let's see what happens
when i check the id of x and the id of y they should be different in case
variables were their own objects however as you can see the id of x and the id of
y are exactly the same so well obviously we know that two different objects in python cannot have the same id so does
this so what does this mean when it comes to the nature of a variable well
the the fact is that variables are not actually objects in python in fact variables are more like pointers or
references to the actual object so when i said x is equal to 100 and y is equal
to 100 what i'm actually telling the system is that there is this variable name called x that i want to refer or
point towards the actual object that is in my memory called 100 and i do the same thing with another variable y so i
am not exactly creating a different space in my system for these variables these variables are more like
placeholders or references that point to a particular place in the memory where
this object is located and that is what happens when i do id of x and id of y it's not giving me the idea of something
called x or the id of something called y it's giving me the id of 100 each time because 100 is stored in x and y so as
you can see this is something like a visual representation of what i'm trying to say and similarly if if i were to so
in this example on the left as you can see i've used the value of 50 to explain my point so as
you can see initially x and y are pointing towards this value 50 because i have stored 50 and 50 in both x and y
now what if i changed the object that is stored in x well that means x is now
pointing towards this new object and i have stored this new object called hello the string called hello as you can see here so now
x is pointing to a new object in the system and it's called hello and
i haven't changed anything with respect to y so y will point towards the same thing and i can also make the pointer of
y different or what i'm trying to say is i can store something else in y see i stored this list in y 50 60 100. when i
do that now y is pointing towards a different object in python and x is also pointing towards something else so what
happens to this object 50 well now that there's no variable referring to this object 50 it becomes what we call an
orphaned object and we can actually see that when we do the id of x now let's go
back to my example on the right where i stored x is equal to 100 so as you can see it gives me some id represented by
this number now let's say i stored x i stored something different in x say 200
now if i do the id of x it should give me a different id because as you can see the values are different and this is
because this object 200 is what is stored in x and when i do the id of x
i'm actually getting the id of this new object now 200. so as you can see point as you can see variables are
they should be and they are treated more like references or pointers instead of containers for a particular
object in this video you will be introduced to the concept of objects in
python now what are objects in python well all the data that we manipulate or
use in our operations in our code are represented as objects or relations
between objects so if you want an example two numbers that you add in your
code well both of them are objects and they're usually numeric type objects similarly if you want to store someone's
name or an address of your hometown in your code you usually store it in a form
of text and that text is also an object usually a string similarly you might
want to create a container of different smaller objects inside them and that big
container is also a type of an object and one of those containers are called lists and similarly we have many
different types of objects which we will be covering during the duration of this course the following pictorial
representation gives us a broad classification of different python data types and objects as we can see there
are five broad classifications numeric which contains integers complex numbers
and floats we have the dictionary data type we have the boolean which essentially consists of objects that
have only two valid values true or false then we have sets and we have sequence
data types such as strings lists and tuples every object in python has three
important properties that kind of define that particular object they are its
identity its type and its value the identity of an object is it can be
considered as a place in the memory or its address in the memory where an object is stored an object's identity
does not change one once it has been created so for example if i took an
example of say a string called hello i can use the id function which is this is how you use
the id function to find out the id of this object and it should be
the answer should be in the form of a particular long integer as you can see
the id of hello is this integer two three two six four seven six six two three zero two four similarly all
objects in python have an identity we have another operation with uh regarding
the identity of an object is the is operator and the is operator compares the identity of two objects so if two
objects have the same identity it should give the answer true otherwise false now the next property of objects is the type
type of an object is essentially what defines what kind of values and
operations that that object can have so for example a numeric dr type in python such as an
integer would allow us to do arithmetic operations and similarly string object type in
python will allow us to do concatenation operations much like its identity the
type of an object cannot be changed as well now let's see what's the type of that particular object that i had shown
you above as you can see it should be string str stands for string similarly if i did a type for a number say 50 it
should give me int as you can see now the third property of an object in
python is its value now the value is the actual data that is contained in the object it's the thing that we use that
we display that we can manipulate and that we can perform operations on so for example if i were to talk about this
string the string is hello so the value of the string is the word or the sequence of letters that spell out hello
and similarly this particular object is a numeric object with the value of 50.
let's see in this in this pictorial representation i have shown you that you
can assume this dash blue area as the memory of the system now within this memory we have objects created called 50
and hello and this list containing smaller objects called cat pen and 40.
now what i'm trying to show you here is each of these objects have a type an id
and a value and let's see what they are if i wanted to see as we had already seen the type of 50 now let's find the
id of 50. as you can see we get this unique id for the object 50 which is
obviously not the same as the id of the object hello above and the value of this
object is the value of 50 itself so that was a brief introduction into objects in
python in this video we will cover the topics of numeric object types and type conversions in python let's get started
numeric object types in python are a broad classification of objects plenty of common real-life applications that we
associate with numerals such as arithmetic operations and calculus are done in python using numeric object data
types there are three main types of numerals or numeric data types in python
they are integers float and complex integers as the name suggests represent
all integer values in python these can be such as 100 minus 3 to 305 and so on
floats are used to represent numerals that contain decimal points such as 100.3 3.9 4.8 minus 6.8 and so on then
there is the complex object type which is used to represent complex numbers in python and this is an example of a
complex number 3 plus 7j this is a complex number 3 plus 7j where
the real component is 3 and the imaginary component is 7 all complex numbers have a real and imaginary
component and this is how we denote them now it's important to note that this j is a very common symbol in maths and
engineering used to denote the imaginary portion of a complex number
and it's the same in python as well so moving on let's talk about type conversion in python type conversion
refers to the conversion of an object from one data type to another for example from string to an integer and
there are different types of conversions and let's go through some of them first of all let's consider the conversion of
something to an integer and more specifically let's consider the example where we convert a string to an integer
so let's consider my example string to be some something called one four five and
i'm sewing this within a string for a reason because i want to convert a string to an integer so as you can see i
have stored this 145 within my within a variable x and if i were to confirm that
is actually an integer i can use the type function and see that it is actually an integer str now let's
convert this into an integer using the int function so how would we use it is
simply passing the end sim by passing the variable that we want
to convert into the in function and as you can see this is what i've done over here but before this i will also store
it into another variable all right now let's see what's in y well y gives us
one four five but are we sure that it's an int we can just check it by using the type function and as you can see the
type gives us the answer end that means that we've converted the string to an end
interestingly we can convert something and also specify what base we have to treat
the number as by default when we pass something in the in function the program or python will
treat whatever we have passed within the string as something in base
of decimal but what if we were to pass something that is well not in a decimal
well we could do it like this now let's store y and ny let's store
let's do this and i will show you what this means x and i will give a comma and 8. what this
does python is well i want to convert the string in x into an integer but i want to treat
whatever is an x as a number of base 8 so 145 is actually 145 in the base 8. now
when we see what's in y we get 101 which is different to 145 because well 101 is
actually the decimal equivalent of 145 in the base 8. similarly if we were to
give it in the base 2 we would just replace 8 with 2 over here now next
let's talk about converting something to a float now as we know float is just simply something that has a decimal
point so let's convert an integer into a float how would we do that simply by using the float function so if i give
120 and i pass this integer through the float function i should get 120.0
these two are not the same though they may mean the same things to us but in for python 120 is an integer and one
120.0 is a different object which is a float and this is how we convert something to a float now what if we
wanted to convert an integer to a string well we can use the str function we can
also use the hex and the oc function if we want to convert a particular number to a hexadecimal or an octal string
respectively let's look at all three examples say i have a number 688 and i
want to convert this into a string i just use the str function around this so
as we know just to confirm let's see what the type of 688 is this is
this should be an end as we can see but when we pass when we let's say
we convert it into a string 688 and let's store it into some variable let's
call it a all right now let's see what's in a it gives us 688 in the form of a
string but we can confirm by checking the type of a it is an str
so it is a string similarly we can use hex if we wanted to convert an integer into
its hexadecimal equivalent in the in in as an output of a string as you can see
this comp this sort of this sort of complicated thing is actually telling us that we have converted 688 in terms of
hexadecimals now how do we read this output this 0
should not be treated as anything it's more like an identifier which says that
the letter after this first 0 is the base of this whole number so it's saying
that x x stands for hexadecimal so it's saying that 2 b 0 is to be treated as a
hexadecimal number and if you did basic maths uh you would find that the decimal
equivalent of 2b0 is 688. similarly if i did oct if i use the oct function for
688 it will give me the result something like this so again how to read this the
first zero is to be treated as an identifier and not part of the number what it's saying is the letter after the
first or after this zero is the base of the number following these two following
these two characters so as you can see as you can see what's this saying is that this whole number is an oct
represented by this letter o and the number itself that we are dealing with is one two six zero and one
two six zero in octal system is the equivalent of six eight eight in the decimal system so this is how we've
converted a an integer in uh an integer into a hexadecimal or a an octal string
now what if we wanted to convert two uh numeric objects into a complex data
object well for that we can use the complex function as you can see here
if i passed complex 5 and say say something like 3.1
let's see what this gives us as you can see it gives us an a complex object where
our real part is 5 and our imaginary part is 3.1 so what this does is essentially
you pass two numbers the first one is the real component and the second is the
imaginary component it combines to give you a complex number as you can see here now let's look at some other type
conversions the next type we will be talking about is converting something to a tuple or a set or a list so what if i
wanted to convert a string into a tuple i will use the tuple function and as you
can see over here so let's say i have a string called random let's call it random all right
now if i want to convert this to a tuple i will use the tuple function as you can see over here the output will give me
tuples where each individual component of this tuple are the individual
components or the individual characters of my string random similarly if i wanted to convert the string to a list i
would use the list function and this will give me a list of the individual characters of the
word or the the string random and i could do the same thing with the set function to create
a set of individual characters of the string random as you can see here
so yeah these were some of the basic python type conversions that i have shown you
as we learn about more complex data types and different object types in python we will learn different
type conversions and functions associated with them in this video you will be introduced to the concept of
strings strings are an object type in python used to store textual data this
textual data could be something like for example someone's name it could be an
address of a place or it could be something like a word or a sentence now
strings in python are an object type that is actually a subtype of a broader classification of objects called
sequences sequences are objects in python which contain components placed
one after the other where each component is given what we call an index a numeric
index this numeric index identifies the component in the sequence and its position within the sequence now since
python is a zero index based language the first object of any sequence is always index zero the second is index
one the third is index two and so on now let's move on to defining strings how do
we define them well strings are defined using what we call delimiters and delimiters occur in pairs an opening and
a closing delimiter in python these delimiters are pairs of single or double
quotes so for example if i were to use single quotes to define a string i could
i would do it like this this is a string as you can see this is a string is
printed over here this is delimited using single quotes similarly if i were to define a string using double quotes
it's as simple as doing this this is also a
as you can see now a valid question arises what if i wanted to include a
single quote within my string well if i tried to let's see what happens if
i try to print a statement with a single quote naturally inside it so say i'm
saying it's my birthday all right let's see what happens if i
try to print this statement it says invalid syntax and this is because as i had mentioned in python single quotes
and double quotes are delimiters so they have a special function in python and we cannot simply just use them within a
string because python will treat them specially for a special purpose so what python will do is it will pair this and
this delimiter so single quotes and say okay this looks like a string to me and
it's not going to understand the rest of this and then it will find a random single quote and it won't find its pair
and it will basically throw us an error because of this so one way or one workaround to introduce
single quotes into a string is simply to delimit our string itself using the
other type of delimiter or double quotes so if i want to include a single quote i will close my string using double quotes
so if i did this instead of what i had done earlier this is a perfectly valid and legal way
of defining my string and i could i would do the opposite if i had to introduce a double quotes within my
string i would use single quotes to close it so if i were to write a speech statement
she said i am hungry all right i have i want these two
double quotes to essentially show that this is a speech and i'm going to close the string using single quotes and this
is a valid way of doing it as you can see my string has these two double quotes now i had mentioned that strings
are sequences well let's describe how are they sequences so first of all all sequences in python are a um it's a
essentially a sequence of smaller objects that form the sequence right so
let's try to understand like how do how are strings to be treated as sequences
some sequences that we will learn later are like lists or tuples and in all
sequences we can retrieve any particular object or
component in that sequence using its index and how do we use indexes in python well we enclose a numeric index
within square brackets now let's see what i'm trying to talk about by this example now say i'm storing a particular
string called say random within now my variable name here is test and i'm storing the string random within it all
right and this is a way of retrieving a particular index from test i write the variable
name and then next to it i put the square brackets now i'm supposed to put um a numeral within the square brackets
to tell python like what a particular index i'm looking for so let's try zero now as
i said python is 0 index based language so the 0 index essentially means the
first part of for the first component of a sequence so let's see what happens when i ask python to retrieve the first
part of what is stored in test it gives me the string r in fact is just one character r
and it's a string so as you can see it has given me the first character of the string random which is r so what this
shows is that this string random is essentially a collection or a sequence
of one character strings so this is so random is essentially a collection of
the string r the string a the string n and so on together combined to form the
whole string that we call random similarly if i wanted the character at the third position of this thing i would
use well since the third position and since we're working in python i would use the index 2 and it should give me
the letter n as you can see it's given me the letter n so this is how we can show that strings are also sequences in python
well now let's move on to certain string operations and functions that we can perform well as you have
seen already that we can retrieve any particular character within a
within a string using numeric indexes well what if we want to know what index
is a particular character at and we can do it like this we use the index function so let's say
my test and i want to know where or what position the character d is in my string
random so this is how i would use the index function index and within the index say i'm looking for
the character d and now i it should give me the answer 0 1 2. it should give me
the answer 3. so if i execute this it gives me the index 3. so this is the
index function that we can use for our strings now what if we want to
say slice a string into a into its into a smaller part we want to slice it and
we want to retrieve only that particular size well here is an example say i'm gonna i'm gonna use the same string
called random and stored in test right so let's so one way of so the way of doing this
is like this now let's see what this let's just see what this does first as you can see it's
given me a and d and if i went to my string random a and d is this particular
slice now let's try to understand what i have done by entering one colon 4. well
what this has done is it's retrieved a slice from the first position
the first index which is the character a up until the fourth position which is
the character o but it has not included o so it's very important when i index like this every every time i put
something to the right of this colon i am not including this itself all right so it's essentially one when i say
one colon for what i'm telling python is give me the first the second and the
third character but not the fourth one so it's given me a n and d and it's that's this is how we do a slicing
operation in python similarly if i were to say slice from the first if i wanted
only the first and the second character i would do this is what i would do
if i wanted the first and the second character i would do one two three so
this way it says python that i want the first i want the second but not the third off so as you can see i get a and
n now so this is a basic slicing what if i wanted the portion of a string from a
particular point all the way to the right or all the way to the left well let's consider the example of where i
want the portion of the string random from the say fourth character until the left well the way i would do this is
test now since i want it all the way to the left i don't enter any index to the
left of my colon sign and since i want everything to the left of the fourth character i enter 4 here so as you can
see it gives me a r a and d which is everything from the fourth character of
my string random to the left similarly if i wanted something to the right of it i would just do it like this i would
enter some index here and i would leave the portion to the right of the colon blank so this will give me everything
including the third character since this is how we treat the indexing in python everything including
the third character all the way to the right so this is dom as you can see now another perfectly valid um
slicing is say i want to slice or take out
different characters from the string but i want to skip certain characters like i want this one then i want to skip one
and i want to take the next one and then i want to skip one well in that case we have to introduce a step
so one way of doing this is now how do we read this so as you can see i have written 0 colon 6 colon 2. so what this
is telling python is i want every character from my string test
starting from the zeroth character up until the sixth but not including the sixth after skipping or taking two at a
time taking two time can also be assumed as skipping one at each step or skipping
one character at each step so what this will do is it will go to random it will take the zeroth one it will take r and
then it will skip the next one so it will not consider a and then it will pick n and then it will not consider d
and then it will consider o up until the sixth character whichever that may whichever that may be and if you see the
output it gives us r and o which is exactly what we wanted we wanted r we
wanted n we wanted o where we skipped uh a and d or we skipped the every second
character essentially so this is a way of slicing strings while also skipping
certain characters or skipping characters and steps now python is also an uh there's another interesting
technique that we can use in python to where we can start retrieving characters
from the rightmost side of a sequence or a string we can use negative indexes so
if i were to for example show you let's see what this what this gives me test what what is a minus one index it gives
me the character m now remember a string is random so minus 1 gave us the last character of the string random which was
m so this is a way of using negative indexes and similarly if i used test minus 2 it would give me the second last
character which should be the character o as you can see here now there are some other important functions that you may
use in python for that let's create another let's get another string let's call it upper
lower all right i'm storing it again in the same variable test let's see what happens when i use the upper function
and what happens when i use the lower function now i'm going to use the lower function for this
these two functions will respectively give out or give us the result or give us our string in uppercase and lowercase
respectively so as you can see the upper function created the first string in full upper case and the second one
created this string in full lowercase now another important and probably one of the most important methods that we
use for strings especially when it comes to data science is the split function so
let's see what i mean by split function let me create another string let's call
it hello world all right i'm going to use a split function and i'm going to see what
happens when i use this function essentially so what i'm doing in these in this these three
lines is i'm creating the string hello world i am storing it in test and then i am using the split function on the test
and whatever result i get i'm storing another variable called sliced and then i'm just going to show you what is in sliced as you can see what's happened to
the string hello world is that i have broken it into its components or its component words if that makes any sense
into hello and world and i've stored both of these into what we call a list now you might ask well how does python
know that it has to separate at a blank space well the split function by default
will break up a string at its blank spaces but if we wanted we could break it up
using or add every comma so for example if i wrote hello world using comma and
if i put a comma inside over here and now if i try to execute this
like for example i am going to find i'm going to look for commas in the string and i'm going to try to split it as you
can see there's no splitting happening i have one list with my original string itself because it's not found a comma
what if i introduced a comma over here now let's see what happens as you can see the splitting has happened it's
found this comma and it's caused a split between hello and world similarly if i in my string if i put this comma again
and i put something else it should give me the split over there again so we can define our split using some whatever we
put in between these uh circle brackets after the split function it's just important to note that by default if in
case we do not enter anything over here it will use blank spaces to do the splitting
another very important operation and very common operation in strings is what we call concatenation so if i have two
strings first and say another string second and i want to join these together well
the operator i would use to do this is called the plus symbol this is the concatenating operator when it comes to
strings so what is the result of this let's see let's print this out let's print this whole thing let's see what is
the result as you can see what this has done is it has combined the first string
first and the string second into one string called first second so this is the concatenated concatenation operator
now finally uh the last topic in this lesson is the topic of escape sequences
now escape sequences are special commands that tell python to either suppress special meaning of some
character or symbol in a string or give or give the special or give some special meaning to an otherwise ordinary
character in a string so let's look at the first example now remember my in my for
earlier in this video where i was i was telling you like uh what what is the way of writing or how
do we introduce single quotes or double quotes into a string and i told you the trick if i want to use a single quote in
my string i just close it using double quotes or if i want to use a double quote i close it using single well another way of
doing this is using what we call an escape sequence and an escape sequence in python is the backslash character all
right so let's see what happens when i use the backslash character where i want to introduce my single quote so if i use
my previous example where i wanted to introduce a single quote and say i'm going to close it using single
quotes as well so i'm going to go back to my error example so as to speak now this
would throw me an error right as you can see it has thrown me an error so what if i used the escape sequence that i
mentioned the escape sequence is just backslash character now this is the point of the string where i want my my
single quote so i introduce the backslash now i have my single quote and i continue writing the rest of my
statement let's close the string now will this work as you can see this has worked so what this has done is this
backslash character has told python to not read this special character or the single quote to
not treat it specially and let it be as a part of the string so as you can see that's what's happened here now the next
case or the other uh use case of escape sequences is when we want to
give a particular character that is otherwise just ordinary some special meaning so
let's take the example of the character t and the character n we use the character t to introduce tab space
and use a character n to introduce what we call line brick well let's see by an example so
normally the character t has no special function so the character t within a
string will just be outputted as the characterity itself
however as you can see here i'm going to introduce a backslash before this character t
let's see what it does it introduces this thing that we call a tab space which is a larger than normal space
similarly if i were to use the uh backslash n combination this would
introduce what we call a line break and if you were to see the output of this you can see at the point
of the string where i have this combination of backslash n a line break has occurred so
there are plenty of other escape sequences that you may choose to learn and
these are just two of the probably the most common ones that are used in this video i will give you an introduction
into lists and tuples starting off with lists lists are a collection of ordered
orbit arbitrary objects that are similar to what we call an array in other programming languages but lists are way
more flexible when it comes to python python lists are a type of sequence and we might have you might have seen what a
sequence is when we were learning about strings and much like in sequences or any other sequence
list objects are assigned a numerical index and whenever we want to uh
manipulate an object in a list we use its respective index how do we define
lists the lists are defined using square brackets so this is a simple way or a simple list that i have just
created and assigned to a variable a which contains three objects one two and three let's talk about some of the
features of python lists python lists are ordered and what this means is that even if two lists contain the exact same
elements if they if the elements are placed in a different order the two lists are actually unique and different
and i can check that over here i have created a list one two and three and see if i create another list two
and one and three the same elements were in different order i will use the is function to check whether these two
lists are the same and if they are the same when i use is function it should give me the value or the answer true and
if they are not the same it should give me the value false and as you can see i get the value false because even though
i have two lists with the same elements they are in different orders and so they are different and that's what we mean by
lists are ordered the next property for lists are that they can be manipulated
using their indexes or the elements and the objects inside a list can be manipulated using the indexes and we
will see that in the section where i show you list operations the next property is lists are mutable what this
means is that once we create a list object we can actually make changes and modify them without having to create a
new list object the next property is that lists are dynamic and what this means is that as we are making or as we
are programming we can actually make changes to an already created list as we are
programming without having to go through a compilation stage so if we had to say
increase the or we had to add certain elements to an already created list that
original list grows in size to accommodate for these new elements the next property is that lists can
contain any arbitrary objects so if i created a list right now where say if i want to store some numbers
say some floating point numbers now and i can put strings as well into my list all of these are
valid uh when it comes to objects that can be put inside a list we have no such restrictions so we can put any arbitrary
objects inside our list the final property that i want to talk about is that lists are
they can be nested to any arbitrary depth what this means is that i can put a list within a list and i can keep
nesting it essentially by putting as many lists i want within my list and
i'm only essentially restricted by my system's memory so if i created a list
like this within this say i put another list and within this list i put another list i
can keep going on to by keep going on doing this and i'm only restricted by the memory of my system that i'm using
so moving on let's move on and talk about some important list operations that we will be doing when it comes to
lists so let's create a basic list called a where i'm storing six numbers
so now say if i wanted to retrieve a particular element say if i want to find out what's on the index three this is
however do it if i wanted a slice of my original list and much like strings i do
it the same way so what this does is it tells python that i want all the
elements of list a from index one to index four but not including index four
so it will give me one two and three index objects so it should give me two three and four in this case as you can see
here two three and four i can do the same thing by considering elements
say two at a time if i wanted to consider elements or consider every second element what i would do is this
syntax i would use this syntax and when i give this command to python what it
tells what it understands is i want every element from a from index 1 to index 4 but not
including index 4 but i am going to consider 2 every second
element essentially so what it will do is it will go here and then it will skip one and then go here and then skip one
and that's essentially what we uh what it's essentially what we call start
slicing by using strides so i'm taking strides i'm not considering elements
consecutively but i'm skipping certain elements in between if i wanted to consider every third element i would
change this to three fourth element i would change this to four all right so let's see what happens when i take every
second element it should give it should give me uh it will consider say from one to index three right so it should
consider essentially this section but since it's going to skip one it's going to consider this
skip this and then consider this it should give me two and four as you can see it has given me two and four and
like in other sequences we can use negative indexes as well negative indexing essentially
starts looking from the right hand side of the list so when i say a minus one it's essentially looking at the last
element of the list so it gives me the sixth or the last element which is the which is object six if i did a minus two
it gives me the second last element similarly another neat trick that we can use for sequences is the following
syntax double colon and we give a minus one what this tells the
what this tells the system is i want the list a but with all the elements reversed so as you can see i get my
element uh my list a but the elements have been reversed right now let's move on to
uh concatenation and replication well concatenation much like in strings is
done by using the plus sign so as we know on either side of the plus sign should be two similar objects so if i'm
doing a plus something a being a list on the other side it should be a list as well so let's add a list like this
now let's see what's in a as you can see my original list has
789 added to it and i can also add things to the beginning of a list
similarly so if i wanted to add say zero you know at the beginning of a list i
just do it like this and i get the element 0 added to it it's very important to note that i
i actually added 0 within a list because if i did 0 like this
it would throw me an error because like this 0 is just an int object and it's not a list but when i put the square
brackets i make it a list and then this concatenation becomes valid because a is also a list similarly
if i did a star 2 this is essentially replication or a replication function
where i'm repeating the values in a twice if i did a start three it's the same function
but now i'll have the elements repeated thrice as you can see here let's move on to modifying list values
this also shows the mutable property of lists that i had mentioned earlier so let's consider this example so i created
a list with elements where there's three strings eggs apples and carrots and i
have five int objects one two three four and five now if i wanted to change say the first
element all i have to do is take the zeroth index and say if i want to replace eggs with
say mango this is how i would do it now i've replaced eggs with mango if i check what's in b
you can see the eggs have been replaced with the element mango similarly i can use the slice syntax to replace a
particular slice from my list with a slice essentially so
let's look at this i'm replacing i want to replace the first three elements i want to replace
mango i want to replace apple and carrot so what i will do is i will consider
this since this carrot is the second index so i will consider zero to three
because the third is not counted now i'm going to replace this with three different um let's see tv
and say sponge now let's check what's in b you can see my three elements have been replaced in fact i don't have to
replace like for like if i want to replace say three elements with only one or two elements that is also possible so
now if i want to replace the first three elements kiwi orange and sponge with
just one element this is how i'll do it let's say wine now let's check what's here as you can
see three elements have been replaced with one mine i can do it vice versa as well i can replace smaller number of
elements with a larger number of elements but here there is a slight caveat that i want to show you so an
obvious way of doing this would be say if i wanted to replace the first element wind with three different elements an
obvious way would be just consider that elements index and then put whatever objects you want
say i want to add instead of wine i want to add beer i want to add ball
and say club yeah well let's see what happens now if i say b check what's inside my
now you can see my elements have been added but they seem to have been added as is you know
i had entered a list over here and that whole list has been replaced
or this vine has been replaced by this whole list in the first position but
that's not exactly what i wanted i wanted the elements within this list to be individually placed into my list and
the way to do that is not this syntax but actually what i'm going to show you now if i want to replace one if i want
to replace the index or the object at index 0 i would give this statement a
slice statement where i will give zero colon one so when i do this and if i um
so let's create my old scenario again where i had one and i had one two three four and five
now if i do this b zero but i give a slice then this slice
is essentially a single object slice it's essentially the zeroth index again but because of this uh formatting or
this this type of syntax that i'm using what python will do is now when i say
peer and ball and club now what python will do is it
will not consider this whole list and add it to in place of wine or whatever i want to replace it
will actually consider the elements inside of this individually and then replace so if you see here
now if you see my list i actually have the i've removed wine and in place of it
i've put beer ball in club but these three are actually individual objects within my list and not
objects within a list that is then placed within my original list so this is an important caveat that you should
take note of so moving on let's talk about certain methods associated to lists let's take a simple list now one
two and three the first operation that i want to show you or the first method is the append method so
when i do a append and say if i want to append the list by one object called 4
i just do it like this now let's see what's in a i put so as you can see the append has put the object 4 into my
original list now say if i wanted to append three different objects i want to append
five six and seven now let's see what append function does oh no as you can see it's done a similar
operation to what we have seen earlier when we gave a single index or the single element replacement
that we saw earlier it essentially put this whole list into this particular
spot into the list and this is not what i wanted i wanted 5 6 and 7 to be individually placed and we do have a way
of doing that and the way to do that is the extend function that is what i'll show you next now if i want to extend
say the original list by three different elements 8 9 10 when i use the extend
function it will not put this whole thing it will consider each object
inside this thing individually and then add it to a so if you see my result this
is exactly what i wanted now the next method that i want to discuss is the
remove method so the remove method is what you how you use it is within the parenthesis you put
the object that is present in the list that you want to removed so you don't give an
index over here you give the object itself so if i want the object 8 all right this number if i want 8 itself
removed what i will do is put the value 8 here and it will remove it from my
list so if i check my list a as you can see the value 8 has it's gone our next another similar
function to remove is the pop function now the pop function by default will remove the right most value from the
list but unlike remove the pop function actually outputs a value
and that value is what we have popped out of the list so by default it will pop out the right route right most value
of a list or right most element of a list and in this case that element is 10 so it should give me 10. but of course
if we want to pop out any particular object in this case we do not give that
particular object we give its index so now say if i want to remove this this list object from my bigger list
as i can see it's in index 0 1 2 3 4 it's the fourth index so if i want to
remove the list which is at the fourth index i give the index value inside the parenthesis and it pops that out for me
as you can see over here so this was it for lists let's move on to tuples next so tuples are another ordered collection
of objects much like lists but they differ from lists in two key properties
first of all the tuples are defined using parent thesis instead of square brackets so this is how i would define a
tuple with elements one two and three and the next very important property that is different or that differentiates
tuples from lists is that tuples are immutable and what this means is that once we create an object of type tuple
we cannot make any modifications to it we would have to only create a new object if we wanted something different
and this is obviously a key difference between a tuple and a list but apart
from this every operation that we have done on lists are actually
possible to do in the case of tuples as well so any operation that we did to lists that did not modify the list or
that does not do any modification we can actually apply to tuples as well so if i wanted the first element of this duple
all i have to do is call it by the index 0 it should give me the value 1 as you can see if i wanted a slice
i can do that as well it should give me 2 and 3. and if i wanted to reverse my tuple well i can use my same neat
technique that i've used for lists and that i can use for the sequence i mean strings as well so it gives me my old
tuple but with the elements reversed so now the natural question is why do we use tuples over lists well one important
difference is that when we con when we make a program execution where or where
we are manipulating a tuple if we did the same thing for the exact same objects in uh that if it were present in
a list it would be much faster than a tuple essentially program execution is just faster on tuples when compared to
an identical list so use tuples over lists when we want to be efficient while
we are creating an ordered list of objects so whenever we create an ordered list of objects that we don't need to or
we don't want to make any further modifications to we don't need to create a list we can create a tuple and another
very important area where we use tuples over list or why we need a tuple instead of a list is
when we are using dictionaries dictionaries as we will see later is a data type in python that needs an
immutable component while we are creating the dictionary so if we
want to use uh something that is like a list but since lists are mutable we can use a
tuple instead and use that when we are creating our dictionary and we will see like what uh what i mean by the
immutable component for a dictionary when we actually uh learn about dictionaries but yeah these are some of
the places where we would use a tuple over a list uh a brief section on tuple
unpacking and packing is what i would be doing right now and what that means is
that when i create when i give this sort of a statement you can assume this to be
me packing this tuple into a object or a variable t now what's very interesting
is and this is something that's very key to tuples is that i can unpack a tuple
onto another tuple so let me show you what i mean by that so now that i have packed one two three and four tuple into
t let's unpack it into another tuple let's call this let's uh put these
elements into this tuple and i put this into t all right now let's see what i mean by unpacking something onto
something let's see what's uh what what what happens when i put a if i just want to see what's in a it actually gives me
the value one if i see what's in b it gives me the value two if i see what's in three giving value three and d gives
me value 4. so essentially if you think of it what i have done is i have matched
this tuple then put it into t and then put that tuple t into this tuple a b and
c d so what it's what what has happened essentially is the element a has been uh
or a better way to say this would be the element 1 has been packed onto or unpacked onto a 2 has been unpacked onto
b 3 has been unpacked onto c 4 has been unpacked onto d to show you what i've
done in a single line is essentially this this is essentially what i've done
i have assigned 1 to a 2 to b 3 to c 4 to d i have matched these two tuples
together like this and this is a very neat feature of tuples the only only
important thing that you have to keep in mind is the elements of this tuple and the elements of this tuple should be equal so if there are four
elements here there should be four elements here all right i in fact another very important thing about or a
neat feature is that we don't really need to mention the parenthesis when we're doing this unpacking or packing so if i did x
comma y comma z if i did it like this if i put say 5 and 6 and 7 this is also a
valid way of packing and unpacking so now if i see what's the value in x it is actually 5 if i see what's the value in
y it is 6. if i see what is the value of x and z it should give me a tuple
containing 5 and 7 as you can see over here so this is a neat feature of tuples
called packing and unpacking in this video we will cover concepts surrounding dictionaries dictionaries are another
type of composite data type in python that are also a collection of objects much like tuples and lists and like
lists they are also mutable dynamic and can be nested however a key difference
and property of dictionaries is that they are unordered items in dictionaries are paired using keys unlike in lists
and tuples where the objects are assigned numerical indexes to define a dictionary we use curly braces each key
value pair in this dictionary in a dictionary is separated using commas and the key and values themselves in a pair
are separated using a colon let's look at an example this is a dictionary where
i have three key value pairs as you can see they have been separated by colons and each of the pair themselves are
separated by commas and these are enclosed in curly braces to define the whole dictionary in this
example these are the keys banana apple and grape and their respective values are
yellow red and green so this is very important that in this particular
data type we have what we call a key and that key is assigned a value and we can
have multiple such pairings and we have three such pairs in this particular example another example or the or
another type of way to define a dictionary is using the dict function
this is how we use it as you can see i have inputted two value or two object tuples
this is a tuple this is a tuple and this is a tuple and when i use it in a dict
function when i place it within a list what python will do is it will consider the
first element of each tuple as a key and the second element of each tuple as its
respective value now if i check what's in d as you can see the key banana has a value yellow the key apple has a value
red the key grape has a value green this is another way of defining dictionaries
an important note over here is that the the objects that we use for keys have to
be of an immutable data type so we cannot use for example lists
as an example of keys but we can use say integers or strings for our dictionary
keys also keys have to be unique when it comes to a dictionary you cannot have
two different keys with uh or should i say the same key having two
different values you can have only one key and that one key will have a unique value assigned to it duplicate keys are
not allowed however when we speak about values we have no such restrictions you
can have a mutable or an immutable data type as a value in a dictionary and you can have duplicates as well so if i
created a dictionary with a key say banana and if i gave if i associated with it
a value green i cannot create another key banana and associate
a value yellow let's see what happens when i actually do this if you actually see
what has happened here is python has considered the second case so it's it
first looks at the first pair it goes okay so my dictionary has a key banana with a value green but right after it
sees another key banana with the value yellow so it overwrites my first key banana with the second key and it
overwrites the first value green with the second value and we essentially get one key banana with the second value
yellow so obviously this is a python does this to avoid duplicacies however
if i created a dictionary with a key banana again
if i created i gave it a value yellow or say green if i created another
key and if i gave this also a value green this is perfectly fine and this will not
nothing special will happen in this case because values do not have to follow such rules let's speak or let's see
certain dictionary operation operations and functions now so let's uh bring back our
original dictionary which we had created earlier with the three pairs all right
so what if i wanted to we can use keys to essentially do these operations and
functions let's see what happens when we so much like how we use sequence how we
use indexes in example of sequences we use keys when it comes to dictionary so
let's see what happens when we use a key over here so we as we know banana is a key in this
dictionary let's see what happens when we do where we give this command it actually gives the value associated with
that key which is yellow what if we wanted to change a particular value associated to a particular key i would
give i would do this i would give the key and assign it the value that i want to change it with
all right now if i check my dictionary you can see the key banana no more has yellow value but the value gold what if
i wanted to add a new pair you know a new key with a new value completely i would do it pretty much the same same
way as i did in the previous step i would essentially write my new key whatever i
wanted say if i wanted a new key called watermelon i would assign it a value
red and now if i check my dictionary at the end of the dictionary you will see that
my new key pair key value pair has been added watermelon red as you can see over
here now what if i wanted to remove if i wanted to remove a key value pair from
my dictionary i can use the delete function which is called by using this the del function
now how do i do it say if i want to remove the key value apple in red so all i have
to do is do d e l d and within square brackets i have to only mention the key i don't even need
to mention the value just the key so you can probably draw parallels in how
we use indexes when it comes to lists and tuples and even strings and how we use keys when it comes to dictionaries
they are quite similar so if i did this and if i um oops i think red is actually
not a key as you can see red is a value my key is apple actually it's not red it's
apple as you can see now if i see my dictionary the key apple and its value
red has been removed so these are some of the operations that we can do
for dictionaries using keys what if we wanted to use certain inbuilt functions
that are associated with dictionaries well some of the examples are as follows there is a get function when we use the
get function all we have to do is enter a key inside the parent thesis and
it will get the value associated with that key so if i gave the key great
let's see what value is associated with it as you can see it's green there is also a function called items
that returns the key and value pairs in our dictionary as a list of two object
tuples where the first object is the key and the second object is a tuple so
let's see what it does as you can see it gave me a list and in this list the
objects inside the list are two object tuples where the first object is always the key and the second is the value and
it's the same for each of the tuples so this is what items function does let's see what
the next so the next function is keys let's see what the keys function does as you can see it returns a list of all the
unique keys within our list i mean within our dictionary similarly we can
there is a function for values as well and as you can see it returns all of the
different values that are present in our dictionary in the form of a list also
it's important to note that if we have a particular value that has occurred multiple times in a dictionary it will
appear as many times it has occurred in the dictionary or appeared in the dictionary in our list over here when we
use the value function so if say a particular value say i had another key
where its value was green again so i would have the value green appear in this list once more essentially our next
function is pop item what this does is much like the
pop function in list it gives us the last entered um key
value pair that is present in our dictionary so the last centered pair was
watermelon key watermelon with the value red and that's what has popped out when we give
this function another important function associated with dictionaries is the
update function and the update function is a very neat function that is used to
merge two dictionaries together so say if i had a dictionary let's say i'm
creating a dictionary using the dict function where i have say
some key called key v so as i had mentioned i will use two object tuples
in this case and let's say i give this also a value green all right and another
pair would be say mango and let's give it a value yellow
alright so this is another dictionary that we have created as you can see over here we have created a dictionary with
the key called key v with value green and another key mango with the value yellow and i already have a dictionary d
with these values all right now if i want to merge these two
dictionaries i can use the update function what i do is say if i want to merge d with x or x with d only the
ordering will change and that doesn't really matter when it comes to dictionaries so if i want to merge d with x i use d update and then inside it
i put my target dictionary now when i check what's in d i have the
the the dictionary x and its key value pairs merged inside my original dictionary d
as you can see i have my original ones here and i have the merged ones over here so this was the update function in
this brief video i will explain what we call the type hierarchy or the standard
type hierarchy and python it's also known as the data model in python and it probably has other names so essentially
in the what we do or what we speak about in this is how the different types that we use in
python are categorized and classified and what are their subtypes so it's important to note before we continue
further that there in future versions of python there might be new types that are introduced or the existing ones may be
modified but it's safe to say that what i will speak about in this video
will still form the core of what we call python standard type hierarchy so let's begin so the first type is the nun type
uh it's accessed through the built-in name none its truth value is false it's essentially used to denote
functions or it's you it's returned as the value for functions that don't
really return anything so if you have an expression or a function that returns no particular value you actually get a data
type called none that is how python interprets it then there is the ellipses ellipsis is
something that you might encounter later it is accessed through the built-in name ellipsis um it is used to indicate the
presence of this particular syntax this particular symbol or
expression or syntax in a slice its truth value is true again don't worry too much about
ellipses right now next is numbers and numbers is something that we are very familiar with we have seen we work with
numbers a lot they are an immutable type they are created through numeric literals and they are the outputs of
arithmetic expressions and built-in arithmetic functions its subtypes are integers floating point numbers and
complex numbers within integers you have plane integers that represent numbers in the range
this number and this number so this this number is basically the largest positive
value that you can represent using 32 bit notation in two's complement and this is the equivalent
for the the negative the negative side long integers on the other hand are used to represent numbers in an unlimited
range that is only subject to the available memory of your system so these are two types of integers and as we know
floating point numbers represent machine level double precision floating point numbers or numbers with a decimal point
and a component after that complex numbers are numbers that contain a floating point number that represents a
real part and a floating point number that represents a an imaginary part so
these are the types of numbers then we have sequences sequences are finite
ordered sets indexed uh by natural numbers so each element in a sequence
has an index and that index is a natural number the different types of sequences are based on the mutability whether the
objects can be changed or not is essentially what we mean by mutability right once we create an object whether
we can modify it or not and that is how we differentiate different types of sequences so there are
mutable and there are immutable types now the different types of immutable ones are strings we know what strings
are they are sequences that contain characters unicode is the other immutable sequence and then there are
tuples tuples are a collection of arbitrary python objects and unicodes
are sequences that contain unicode characters then we have mutable sequences and
there is only one currently there is only one built-in mutable sequence in python and that is
lists lists are also again collection of arbitrary python objects finally we have
well not finally but next we have mappings and mappings are
again sets of objects but these objects are now
indexed using arbitrary index sets you know the difference between a mapping and a sequence you
could consider sequences are ordered but mappings are not ordered and
the indexes given to the objects in sequences are always numbers they are natural numbers whereas in mappings they
are not natural numbers but they are certain arbitrary objects that we can set for ourselves again in python there
is only one built in standard mapping type that is the dictionary
dictionaries are there they represent finite sets of objects indexed by nearly arbitrary
values the only condition is that these indexes must be of an immutable data
type so these so what i have mentioned until now are probably the most common
data types that we encounter uh or that we have encountered now the next types are like callable types such as user
defined functions user-defined methods built-in functions built-in methods classes and class instances so again
callable types as a whole are referenced using the call function and this is something that we will learn when we
start learning about functions when we learn about object oriented programming and methods and functions and such the
other type are modules so modules are module objects or modules essentially
are referenced or called using the import function again modules can be considered as these large libraries or
larger pieces of code or applications that we that contain various different methods
and functions and objects and classes within them again modules are something that we will think about a little later files are
data types that are called using the open function so anytime we and as we
will during the course of this tutorial we or during the course of this uh this
this course essentially we will be working with a lot of files these some of these files are text files some of
them are comma separated files so all of these files that we open using uh the function open or some other certain
specific functions where we create file objects out of these files these are what we call file
data types finally there are internal types that are used by python interpreter again
this is something that does not concern us right now but just know that the interpreter for python uses these
data types for its functioning in this video i will show you some of the
categories of operations that are possible in python so let's start off so the first category of operations are
arithmetic operations and as you can see in this table there are different types such as addition subtraction
multiplication so let's go over them one by one so a simple addition operation would be like 5 plus 6 giving me the
value 11 i can do 5 minus 3 that's subtraction similarly i can do a
multiplication using 5 say 5 into 2. there's division where i use the backslash so say i did division of eight
divided by two now you might encounter another type of division which is called
the floor division where we use a double backslash and what this does is it returns us the largest whole number that
is lesser than the result of our division uh so the division difference between the float division and and the
normal floored and uh the floor division or the single and the double backslash is this say i did 9 divided by 2 using a
single backslash it should give me as you can see 4.5 right so this is the actual value now let's see what happens
when i do 9 double backslash 2. it will give me 4 which is the largest number
lesser than or equal to 4.5 that is also a whole number so this is what we call
flow division essentially finally we also have if we want to raise something to the
power of something so if i want to do five i say six raised to the power 3 so i would use double asterisks and this is
how i would do it give me 216 as you can see if i wanted remainder between the division between two different numbers i
will use the percentage sign so if i wanted the remainder of the division between seven and three this is how i
would do it i get the answer one as you can see so next category of operations are logical operations the first one is
the logical and operation where we use the operator end all right so let's see
what we mean by this i am creating so as we know the and operation returns the
value true if both the operands are true so that's actually let's actually do this
for an example let's give this variable the value true and this the value of
false actually should be done like this false so now uh think of it like one and
zero so one and zero is obviously 0 right so if i did a and
b i should get the answer false or 0 because i'm doing true and false so it's
like doing 1 and 0. so if you see this i should get the answer false if i change this to true as well now if i do this i
will get the answer true as you can see the next logical operation is the or
operation where well logical or is if either of the operands are true then we should get the
answer to our order operation as true as well so in this case obviously if i did
or over here it will naturally give us true if i change this to false
it should again give us true and it will only give us false if both are false as you can see here now it's false the next
operation is the logical not uh it's done by using the not operator so in
this case the value that we get is true if the operand is false so let's
take a as we know a is false over here so if i did not a i should get the answer true but if i change this to true
now if i do not a i should get false as you can see so this was the logical operations let's move on to the
next set of operations that is comparison operations so there are a bunch of them let's go over them one by
one if i want to check if two operands are equal so if i did x is say equal to 2 and now y is equal to 3. if i want to
check if they are equal i will use the double equals to sign and if they are equal i will get the value true
if they aren't it will get value false as you can see since x is 2 and y is 3 as you can see x and y are not the same
so there's false they are not equal if i change this also to 2 now i will get the answer too another the next
comparison is the x not equal to or where we use the exclamation sign so over here this is
this um the result of this is true if x and y are not actually it's the same so
i should get false over here as you can see but if i change this to say 5 now i will get true because x is not equal to
y in this case the next one is greater than so if i did x greater than y as we
can see 2 is not greater than 5 i will get false over here similarly there is a lesser than if i did x lesser than y i
should get true over here as you can see there's also a greater than or equal to and less than
or equal to we simply add the equal to sign here so let's see now if i say x is less than or equal to 3 i should get
true because x is 2 i and if i put 2 here i should also get 2 but what if i
put 1 here since x is equal to 2 and 2 is not lesser than equal to 1 this is a false statement and i can do the same
thing with like this using the greater than equal to now it's true because two is actually greater than equal to one
and so this was comparison operations the next set of operations that we can do in python are assignment operations
if you've already seen a whole bunch we've already been assigning values to variables we've been doing assignments
throughout already but let's go over them and see some of the assignment operations so as we already know the
equal to operation is assigning everything that is on the or the value on the right hand side of the
equal to sign to what is on the left so if i did a is equal to 5 plus 6 it will
assign the value of 5 plus 6 or 11 to a let's check what's in a as you can see
it is 11. there is a plus equal to sign and what this does is so for example if
i did say a now since a is 11 let's create another variable called b and call this
five all right so now if i did a plus equal to b what this will do is it will
add b to a and then store it in a so let's see what this does once i do this
now let's check what's in a it should be 5 plus 11 as you can see 16. so this a plus this is this plus equal to sign is
essentially the same as doing a is equal to a plus b it's essentially the same thing they're both the same uh there's a
similar thing for this the negative symbol or subtraction as well minus equal to so now that a is 16 and b is
still 5 of course if i did minus equal to b now i'm subtracting the value of 5
from 16 so i should get a is equal to 11 again as you can see here and this is the equivalent of doing a minus b a is
equal to a minus b i mean as you can see so uh the next similar like assignment
operation let's create a is equal to say 6 in this case and say b is equal to i
will say 2 all right now if i do a star star equal to b what this does is it
multiplies b to a and then assigns it back to a so if i see what's in a now it should be 12 as you can see here
similarly there is similar thing for subtraction as well so if i added a is equal to 6 and b is equal to 2 and if i
did a sorry for division so if i did a division symbol and
equal to sign and then if i give b what it will do is it will divide a by b or 6
by 2 and it will assign that back to a so my value on a should be 3 as you can
see here 3.0 obviously this is a single uh single backslash so this is a float
division the resultant of a single backslash is always a float i can do the same thing with a double backslash so
let's see if i did a is equal to seven now and then b is equal to three now if
i did a double backslash equal to b now it will do the same division but uh it will do a floor function so it
should give me 2 in this case if i did the same thing with a single backslash just to show you
the difference between single backslash and double backslash division in this case it will give me
the value around 2.3 or something a float basically 2.33 as you can see here
then there is the modulus you can use the modulus sign as well with this assignment um say a is equal to say 5
now b is equal to 2 now if i do a percentage symbol equal to 2 i mean b it
should give me it will assign the uh it will take the modulus on both sides and
then assign it to the left and operand now let's see what's in a as you can see it it did uh a divided by two the
modulus symbol is basically the remainder of the division between two objects so in this case it will divide a
by b and then give me the remainder and then put the remainder back in a and as you can see the remainder of 5 divided
by 2 is 1 and we get that over here similarly we can also do exponential so
if i have a is equal to say 5 b is equal to 2 and i want to raise a
by if i wanted to raise the value of a by the value of b and then store that back in a this is how i would do it
so it should be 5 to the power 2 which is 25 as you can see here so this is assignment operations so finally we move
on to uh two special sets of operators one is the identity set identity operators and
the other is the membership operators let's look at the identity operators so when we talk about identity operators
what we when what we mean is the is and the is not operator so what the is operator does is it checks whether two
operands uh have the same location in the memory essentially this does not mean that it does not check for whether
two objects have the same value and this is very important so let's look at this if a is equal to 1001
and b is equal to 1000 plus one all right if i did a is equal to this is an
equality check are they the same values true now if i say a is b let's see what
happens as you can see it's false this is because this object and this object
are not the same and this is what the is operation does uh we can confirm this by checking the id of a the id of a gives
us some value like this and the id of b gives us as you can see a different
value so the two objects are not located in the same place in the memory as we have seen using the id function and that
is what we check uh through the is operator and the is not is essentially just the opposite of that so so that is
the identity operator now the membership operator is used for checking whether something is present in a sequence or
not so let's create a sequence i will create a list to show in this example my list is one two
and three basically simple list with three integer objects one two and three i will check whether
now say 2 in a so is 2 in a if it is it will give me true as you can see is 5 in
a it should give me false because 5 is not an a and the a not in operator is just the opposite of that it checks the
other condition essentially so this is the membership operators in python in this video we will be looking at the
math module in python and we will look at some of the math functions that are associated with this module in python so
starting off what is this math module well uh the python map module is an important library or a feature that is
uh designed to deal with mathematical operations this math module is part of the
basic python installation so you don't have to install this separately to use this math module all you have to
do is import this module and this is how you would do it you just do import
math and this will import your math module for you to use in your programming and in this in the course of
this video i will be showing you certain concepts surrounding the math module such as what are the constants that come
with the math module some of the arithmetic functions the logarithmic functions um power functions and even
trigonometric functions that we can do using this math model and the function inside the math module so starting off
let's uh look at some of the constants that are part of this so as you can see the standard constants are available uh
in this module are pi there is tau there is euler's number nan which is a special
it's a it's a programming specific concept and infinity so let's look at this one by one so
starting off our first constant is pi um pi is as you know in maths it's the
ratio of the of a circle's circumference to its diameter and pi is an irrational
number you know the value of pi is 3.14 something since it's an irrational
number it does not we cannot define it in terms of a specific fraction but it
can be approximated to the fraction 22 by 7. so how do we access this
pi constant is as simple as this once you have imported maths uh the maths module all you have to do is do match.pi
and it will give you the value as you can see so as you can see the value returned to us is a float this is
important to note and the number of number of decimal digits uh the number
of digits after the decimal point that we can see here are 15 and this is like a by default uh thing for python that if
you call the pi constant it will give you the value of pi correct up to 15 decimal points so an example of where we
can use this thing is say we have the radius of a circle three it can be in
any units three meters or whatever you want um and you want to find out its say circumference so as we know the
circumference of a circle is two pi r so if i had to find the
circumference of a circle in my in my code for some application with the radius 3 or all i would have to do is
use the formula 2 pi r and to call the value 2 pi r instead of specifically
writing 3.14 or something i can just use this function math dot pi over here and
then i can enter the r as you can see it will return me the radius as you can see so moving on uh
the next constant that we will talk about is tau tau is similar to pi in fact tau is the ratio of a circle
circumference to its radius pi is the ratio of a circle's circumference to its diameter and tau is the ratio of a
circle's circumference to its radius so important to note this difference so because of this definition tau is always
two times the value of pi this is by definition and much like pi if you call the tau
constant in you from the math module it will also return you a float number and
to find that this is the function that we use or this is the syntax so as you can see this is this is actually 2 times
the value of pi 6.283 and even this is returned correct up to 15
places to the right of the decimal point and this is by default uh next constant is the euler's number uh the euler's
number is a it's one of the most widespread constants used in the world of sci uh in the scientific community in
mathematical community you will be using the euler's number probably a lot as a if if
you move into data science or ai or something like that so what is the euler's number it is
it is the base of the natural logarithm if you know what the natural algorithm is it is
used to calculate rates of growth or rates of decay and as with numbers or
constants like pi and tau even the euler's number is an irrational number with infinite decimal places uh the
value of the euler's number uh in short it's denoted by the small letter e
so this value of e is are usually approximated to around 2.718 so how do we call this
constant is simply as math dot e this is how we do it so you get this value again this is also a float and
it's correct up to 15 decimal places so the next concept that we will be talking about is infinity now infinity is a it's
more of a mathematical concept and this is very important to note because infinity doesn't is not really a number
there is no number called infinity it is it is used to define something that is infinitely large or infinitely small so
positive infinity something that is higher than any known number to us
and negative infinity is lower than any known number to us um so this is the concept of infinity and how do we call
this uh function well so let's see what happens when we call the math function
math constant infinity so this is how we do it and as you can see it will return us this
it might look like a string to you but this is actually a special type in python um which is not a string this is
also a float it's a type of a float in fact this uh infinity value it's it's a
it's like a special data type it's a special data type that you can you can consider as an equivalent to a
float but um it's not it's not a typical float that we know like you know 3.14 or
2.71 the value of mathematics will give us inf and this is this inf is actually not
a string so we can we can confirm that over here as you can see when i do it typed when i check the type you see it's
actually a float in fact this was recently added in python 3.5 um a special type known as the math dot inf
um it returns this inf data type which is the equivalent wave float
so this is this is how we use infinity if you wanted to get the value of say minus infinity all you
would have to do is math dot inf with a minus sign preceding this constant and
you will get minus iron f now let's check if the concepts or the properties of
infinity are maintained you know like every a positive infinity is greater than any
number that we know and negative infinity is greater than any number that we know so let's just confirm this um so
i will take math throat in and i will do a check is this greater than say some really
large number something that comes off the top of my head immediately okay so let's see if it's if this is true then
this is conceptually correct and as you can see it is true in fact i can change this number to anything as large as i
want this will be true because infinity is true is larger than any number that we know and similarly if i did minus math dot in
inf uh and i checked some very small number you know a very very small negative number so just consider some
minus uh 10 to the power something right this should also be true uh sorry it should be a smaller sign symbol this
should also be true because i'm checking minus infinity it's smaller than any node number to us and it is true as you
can see so uh it's very uh also if you did uh if you did something like so
let's say if we do let's add something to this you know it's a number so we should be able to do arithmetic on this let's actually see
what happens when i add say 10 to positive infinity it actually gives us the same value back infinity because uh
intuitively we know that infinity plus anything is still going to be infinity right and this is exactly what python
does for us even if we add a number to this the math dot inf or the infinity constant in python it will still give us
uh the same value the same data type of inf or infinity similarly if we subtracted something from the negative
of max dot inf you know um say minus say again let's say minus 100 so if we
subtract something from minus infinity we're technically still minus infinity itself so this will again give us my s
and minus inf as you can see and this is absolutely what we need and this is a very very interesting feature in python
finally the last constant that we will discuss is the nan or the not a number constant so this is
not really a mathematical constant uh there is no constant in maths called not
a number this is a computer science related concept that it's it's used to
is used to denote invalid inputs or in it's used to indicate
a certain places where say a variable that should have a number um it's been corrupted for
whatever reason and it it now has a text or a symbol and our code throws an error
then in these in these cases where python expects a number from us or from
your code and it does not get it it will throw you a nan value and this is usually used in cases
where you have errors in your code so again just to check like what this this
constant i like how to call it this is how you actually do it math.nan and it will give you a data type called nan
also much like the infinity constant let's see what's the type of this um this constant again might look like a
string to you but of course this is not a string this is a numerical concept and as you can see
it's still a float so this is like um it's another special uh data type that
was created for specifically this case where uh it's some it's the equivalent of a float but um it's not really the
typical float that we are that we associate with so this was a constants
in the math module so our next topic will be arithmetic functions that we can do in the
using the math module so some of the common arithmetic functions that are available to us are factorials the
ceiling operation floor operation there's permutations there's combinations you can find the greatest
common divisor or the gcd and the lcm or the least common multiple and you can truncate numbers so let's look at them
one by one so starting off with the factorial operation the factor of operation is done using the factorial
function as you can see here actually defined like this math dot factorial all right so now what we pass in between the
parenthesis will be uh what we calculate the factorial for uh as you know
factorial is so factorial is always for a positive integer and the factorial for
say a number 10 would mean 10 times 9 times 8 times 7 so on until the number
1. obviously factors are only defined for positive integers uh it is not defined for uh negative values or it's
uh and it's also not defined for decimal values so let's see let's look at an example so as
we know um so let's say we pass math dot factorial for six and let's see
what's the value so this is exactly what we expect so we expect the value of six times five times
four times three times two uh that is actually seven twenty let's see what happens when we pass zero
this should give us 1 since we know 0 factorial is 1. now let's see an error case where we pass say minus 5.
as you can see this will throw us an error because factors are not defined for negative numbers now moving on let's
uh so the next function that we'll talk about is the ceiling function so the ceiling function is defined using math
dot see seal as you see here so again we pass the number that we want the ceiling for
in between the parenthesis so what is the searing function it gives you the largest uh sorry excuse me it gives you
the smallest number that is greater than or equal to what we pass
over here so for an example if i gave you 6.6 and i asked you okay what is the
ceiling function for 6.6 it should give you 7 because 7 is the largest integra
in integral value that is greater than 6.6 or equal to it obviously if you give
the ceiling function for an integer it will give you the integer itself so let's look at an example 7.8 so this
should give me the value 8 as you can see here let's look at another negative number so minus 12.3 uh an integer that
is greater than minus 12.3 uh is minus 12 the smallest integer that is greater than minus 12.3 and this should give you
12 as you can minus 12 as you can see here a similar function is the floor function
which is defined like this again the floor function what it does it gives you the greatest number that is
smaller than whatever value we pass between the parenthesis so if i gave it 2.3 it
should give me the value 2. again if we pass integers it will uh just give us the integer
itself again just to reiterate this uh ceiling and floor functions uh they give
you int in integer values so the floor function will give you the largest
integer that is smaller than what we pass over here so let's look at 6.7 so the largest integer that is smaller than
6.7 is 6 and as you can see this is our answer over here uh the next function
that we will look at is the truncate function the truncate function is defined using this truncate is very similar to what we
have seen this is how we define the truncate function it is very similar to the ceiling and floor
in the truncate function what we do is we pass a decimal value a float number
to the between between the parentheses and what we get back is the number
without the decimal component so only the integral component so if i gave it 7.8 for example it will give me only the
seventh part it will return me only the seventh part and it will chop away the 0.8 part um if i give it minus 12.3 uh
it will chop away the 0.3 part and give me only minus 12 back so let's look at an example 8.9 it should give me only 8
as you can see here see i did minus 8 or minus six point
nine this will give me minus six so you can think of truncate function as
it does the floor function for positive values and it does the ceiling function
for negative values because it rounds down and rounds up respectively for positive and negative values so now
let's look at the next set of arithmetic functions um let's move on to permutations permutations are defined
using this as you know so in between the parentheses i have to pass two values n and k so i have to pass n n and a k the
k has to be less than or equal to n because the permutation as you know is uh the number of ways in which we can
permute from n objects k tire k different objects so what this mathematically what this is
is permutation of n and k is n factorial divided by n minus k factorial so if i
pass say 10 and 6 it will give me the permutation of 10 and 6. so let's look
at what's the value as you can see it's a very large value 15 151 200. similarly there is a
combination function and this is a combination the permutations are used a lot in probability so if you're going to
move into that sphere which you will encounter a lot in machine learning ai you will be using
these functions quite a bit um so the combination function again you pass an n and a k again the n should be greater
than or equal to this k what this evaluates is n factorial divided by n minus k factorial times k factorial so
again this is a mathematical concept so let's look at the permutation sorry the combination of 10 and 6 so as you can
see it gives me 210 which is the combination of 10 seconds in the arithmetic function section um our gcd
and lcm as we know gcd is the greatest common divisor lcm is least common multiple so as of the newest version of
python in three point python 3.9 the math module gets these two new functions that were very lately added actually um
since i i cannot show you that because i don't have the absolute latest version of python on my system but using the
math dot gcd function this is the function and in between this we would what we would do if we had the latest
version is we would pass two numbers or as many numbers in fact and what this function would do is find the common
divisor amongst them so if i gave these say for example if i gave these numbers it would give me the value 10. similarly
the lcm function again added in the python 3.9 finds the common multiple
amongst whatever we pass over here so if i passed say 20 and 30 this will give me
uh the value of 60 which is the lcm of 20 and 30. so again these are uh it's uh
something neat that if you say you have python 3.9 or if you have python 3.9 or after that
you will have access to these functions as well if you when you import the math module so that was for the arithmetic uh
functions let's move on to the next section which are power and log logarithmic functions so let's start off
with the power function um there are two there are uh multiple ways you know you
can actually do a power function in math in python so you can do something like
this which is the equivalent of 2 to the power 3 or you can use the inbuilt
module math and you can use the pow or the power function which is this
is how you do it and if i had to do same 2 to the power 3 i would just pass 2 and 3 as arguments like this and it should
give me the value as you can see 8 over here what if so there's actually one more function which is simply the pow function and
this is not part of the math module it's a function not part of the math model but it's still part of the
base python you use this as well and you can do the same thing vow 2 and 3 it should give you the value 8 again the
you know you might ask what's the difference between these two functions well it's not much for at least in a beginner's standpoint it's not that much
uh just note that the math dot power function is slightly computationally faster than the simple
power function so yeah moving on the next topic would be the next function
that we'll discuss is the exponential function which is defined like this again exponential function is again e to
the power something so if i did exponential of 3 this would give me e to the power 3. as
you can see oh of course i did not define the module beforehand so math.exp
now when i do this it should it will give me some value which is basically euler's number or e to the power 3. so
this was the exponential function and let's look at an example so we will look at the example of rate of dk and we will
use the uh this function in that example so the exponential rate of decay
for is used to calculate the amount of radioactive elements that is present in a substance after a certain amount of
time so the the the the the expression is uh something like the initial amount of radioactive
elements that were present right at the beginning times the exponent of minus 693 times t
t for time divided by the time period the half lifetime so let's just write it down to make it
simple so again as you can see the uh so this will give me the
remaining amount of radioactive elements right so let's uh let's write down remaining let's assign this to a
variable remaining so the initial again um initial is the initial amount of
radioactive elements so let's give it some value say 100 um the time let's
assume it's 10 years and let's say the half-life half-life
is around i don't know let's give some value say 3 or something again this is
the details are not important so this will uh i'm using the math dot exponential function over here as you
can see and for these values uh now when i check what's the value of remaining after i calculate it it's something
so this is it's basically what this tells me is that i started off with 100 units of some radioactive element
and in 10 years this is what is left so yeah so this is how we would use say the
exponential functions in a particular example of ours so next the next
type of again functions are logarithmic functions so let's look at some of the logarithmic
functions that are part of the math module so basic log function would be written like this math.log in between
this i would pass the number that i want the log for by default if i just pass one number it will it will calculate the
log of 8 to the base of e as we know e is the euler's number so let's see what
it does in this case it gives me some value what if i wanted to specify a particular base well i would pass a
secure argument in this case i want to find the log of 8 to the base 2 this should be the value 3 as you can see
over here there are two specific functions that are also provided in this math module
that is log2 uh what this will do is again it will again have to just pass one argument and this will automatically
find the value of the log of 8 to the base 2 as you can see here similarly there is a math dot log 10
function if i give if i did this i will find the value of something here to the base 10 as you can
see so this was logarithmic functions then you have the finally you have the square root function so how would we use
the math uh the square root function is math dot sqrt again we pass the what we want over here
if we want the square root of say 49 this should give me the value 7 as
you can see finally we move on to the final set of functions that we can do using this math module they are
trigonometric functions and they are hyperbolic functions so uh let's start off with some of the
trigonometric functions as we know we can do sine we can do cosine and tan
uh some of the basic functions the way we would do it is math dot sign
in between this what we this is to calculate the sign of a particular angle and this angle must be passed in
radians this is very important to note we do not pass it in degrees but in radians so if i say past
sine of 3.14 as we know 3.14 is an approximation of the value pi uh my sine pi is uh
supposed to be uh in fact it's supposed to be zero so let's see we get something close to zero again since this is an
approximation it won't give us the exact value uh similarly we can use math dot
cos to find the value of a particular angle um if you want to find
if you want to find the value of the uh sorry the cost of a particular angle we can use the tan function in case
we wanted to find the tan similarly uh we have the next set for arc sine and the arc cosines of
the certain of angles so to use to find the arc sine for example we would use a
dot sine i mean sorry a sine uh for r cosine we would use this and for r10 we
would use this the next set would be hyperbolic functions again hyperbolic functions are
basically the sine and the cosine and the time calculated not circles but on hyperbolas
again the details don't have to be you don't have to know the details you just should you should know that if you wanted to
say for example find out the uh hyperbolic sign of an a of an angle we
would use math dot sine h and we would pass what we wanted between this similarly if we wanted to find the
cosine it would be cos h uh tan it would be tan h and if we wanted to find the inverse
of the hyperbolic inverse what we would do is what we would do is use a so we would
use a tan h if we wanted to find the hyperbolic inverse of sine we would use a sine h and
similarly for cos it would be cos a cos h in this video we will learn about conditional statements
and we will learn about how do we create these control structures where we have these conditional
statements uh we will learn about the keywords that we use in python to create a conditional statement block the if
keyword the lf keyword and the else keyword we will also learn about indentation and its importance in python
so let's get started so the basic uh syntax if you will for a if statement in
python consists of the keyword if followed by an expression as you can see
from this pictorial if if there's an if statement there is a expression
there is this block of code which if you can actually see is slightly indented to
the rest of the code and then we have the rest of the rest of our code after that so what we're
looking at is this so this is our if statement block now let's let's break this down so what
is this expression that we are speaking of uh an expression in this context is a boolean expression which evaluates to a
true or false statement so when we are speaking about the if statement we have
an expression and if this expression evaluates to true then we execute
everything below the if statement otherwise we skip that portion as you can see if the statement is true we
execute this statement or these statement blocks otherwise if it's false we move on to
the next the next statement block or the beginning of a new statement so let's
look at an example to further understand this let's take this if statement over here as you can see in this if statement
i have this expression 50 greater than 30 so what python is going to do now is
it's going to check whether 50 is greater than 30 and it's going to check in a boolean context if this is true
then we can move on to the next portion which is this but if it is false then we will skip this so let's see what this
what happens over here so since we know that 50 is indeed greater than 30 this is a true expression we move on to this
block of code which is saying that print 50 is indeed a larger number than 30. so let's see if this actually gets printed
so as you can see we get this uh the result which is this is a true statement and we get our print statement getting
executed what if we give a false expression over here so let's look at
what happens if i gave a false expression now i'm checking if 50 is less than 30 which is a false statement
so if it's a false statement we do not move on to this portion of our if statement block and we we directly in
fact we directly skip so if i have to execute this you will see nothing gets executed in fact my print statement is
just not executed because we never entered this because our expression over here was indeed false so yeah this is
how a basic if statement block looks like in python and this is how the
how we move on to how we check for the true the truth truthfulness or the falseness of a
particular expression in the if statement so moving on let's move on to the topic of indentation in um in python so as you
can see this uh this if statement is an example of a control structure so without moving
without defining what a construal control structure is in detail control structures consist of
these conditionals or loops or iterations if you will
so all of these control structures involve heavy indentation so what does
an indentation mean well what if i gave you an example say i gave you some
variable called age and i wrote 20 over here now if i gave you an if statement
saying if age is greater than 10 now it's very important to note that when
i'm defining an if statement i need this colon otherwise this if statement is not defined so this colon is important uh
anyways so now i'm checking this expression if age is greater than 10. now what is this what happens if age is
greater than 10 now what if i want python to do something only if age is greater than 10 well how do i tell
python that there is a piece of code or a section of code that i want executed only if this condition is met
well this is where indentation comes into play so if i want say if i want this line
this person is an adult again this is some random line where i'm assuming age is pertaining to this adult all right or
this person so if i have uh this variable age where i write this number
20 which denotes the age of some person and i'm doing a check if age is greater than 10. actually let's be specific here
well the adult age for most people is 18 in most countries so let's see if age is greater than 18. now if i'm doing this
check uh i want to print this statement only if this person is a person's age is
above 20 above 18. so how do i tell python that i only want
this statement to be executed only during this if this condition is met well this is where
indentation comes into play as you can see exactly as you can see uh this part this portion of the code is slightly
indented compared to the if statement so when this condition is met then only do
we move on to this if this condition is not met we move on to whatever the next section of code will be like whatever
whatever code that we have after this if statement so let's see so this since this condition is actually met as you
can see this print statement is actually executed so this is the importance of indentation now we will see uh in as we
move as we learn more about if statements and else statements and lf statements how indentation plays a key
role in defining what we want as an output when a certain condition is met all right so for now it's very important
to understand that this is how indentation is used in python in other languages we might use uh we probably
don't use indentation in fact popular language the c language uh does not use indentation at all but some languages
and python in probably the trademark language for indentation and programming
so you might say that so different people have different opinions on an indentation the general
consensus is that indentation helps make the code look very presentable and very readable and this actually is one of the
facets of python programming is the indentation and the easy readability of it anyways moving on so what if we have
um multiple conditions in our code or if in our if statement block that we want
to see so let's create this list or let's actually just copy this example that i have written over here as
you can see what i am doing in this piece of code is i have a list x where i
have this integer 50 i have two strings cat and apple now i want to check a
bunch of things so i want to check if 60 is an x and i also want to check if the string cat is an x
and i want a final sort of like if none of these conditions are met i want something to happen so how do we do that
well we start off our state our if statement block with the standard if keyword all right now if we have
one more condition that we want met then we can use the l if which is kind of a short form for else if
so we use the l if keyword so it so what this python what python reads is it checks this
condition then it will check this condition and then finally we have this else keyword and else is the keyword
used in our block to tell python that if none of our earlier expressions have
been true then do uh what is in the uh that is within the else uh keyword that
is indented within the s keyword so again we don't pass an expression for else because else is uh only we only
reach this l as statement in case all of the other earlier conditions have not been met or have
come to be false and not true so let's look at uh this particular code example so we have a list of 50 cat and apple
and i'm my first expression that i'm checking is is 60 in x so this is how we check
actually so if 60 and x should be read as is 60 in the list x so is this 16
elix list x well actually no we don't have the object 60 so this part is not executed we move on to the next
condition is the string cat in x well actually it is uh the string cat is
indeed in x so we move on to this statement block which is within the
condition that is met which is print cat is in list x and you will see that none
of the other statement blocks will be executed because we have met our condition over here so if i execute this
as you can see that the print statement cat is in list x is what is actually executed and we do not
execute this obviously because it is false and we do not even check or we did not even move on to the statement
because well we have a condition met over here so it's a one thing that is important to note is that we can use as
many elif statements to check for as many conditions that we we want to check for
but it's very important that we only use and if we are using that we only use one
else statement and only at the end of our block okay so moving on now i'm going to show you a very neat example
about how python actually does its uh these these condition checkings so it's very important to note that once a
condition is met none of the other conditions are even checked for so
we do not even consider the next statements and we directly leave this if statement block so let's look at this
example over here now in this example that i have over here is where i've stored the string cat index now i have
three um i have three conditions that i'm checking i'm checking is 50 greater than 60 i am checking if the value of x
is indeed cat and i'm checking i'm some random expression 1 divided by 0 this is not even a check this is literally just
checking if one divided by zero is true or false and as we know we cannot divide
anything by zero so let's see what happens when i execute this statement now typically if i wrote
one divided by zero python will throw me an error because 1 cannot be divided by 0 that is an error error in a statement
so let's see what happens when i do this actually as you can see i have a statement being printed but i have no
error even though i gave it wrong i gave an error statement in 1 divided by 0 well now you might ask why is that so
well it's simply because i have actually never reached this condition i have not even
python is not bothered looking at this because if you actually see there is a condition previous to this
over here which is met and which is true so we move on to this block we execute this block and we forget about the rest
of the code so we don't actually get to uh this erroneous statement which is an interesting thing and which is an
example that i have shown uh to show you that once a condition is met in an if statement block we do not look at any of
the further conditions that are being checked okay so finally um i have one uh
one small topic that i would like to share with you is the conditional expressions or the python's ternary
operator now this is slightly different to the if statement that we have talked
about up until now in the sense that it is not a control structure so what this actually is is
more of an operator that defines some expression so let's see what i'm trying to say over here so as you can see over
here highlighted is the syntax for what i'm trying to talk about this ternary operator so let's look at
this example and let's see what i'm trying to do over here so i have this variable age all right and this age is
26. now x now just just read this statement x is equal to adult if age is
greater than 18 else child now i could have done an elaborate control structure with an if statement then an indentation
within that if statement and then um i could have written else and then another indentation and i would have written
another statement over there but instead of that i have used this operator to assign a particular value to the
variable x and this what value i'm assigning to x depends on if this condition is true or false so
as you can see the condition says is age 18 greater than 18 so if this is true then
i assign this particular string if it is false then i go to the else statement and i assign this so since age 26 is
greater than 18 i should assign the string adult to x and as you can see if i execute this and check what is an x
you can see adult is indeed an x so this is a very neat a very needable readable and a very um
it it's a it's probably a more it's it's a better looking way uh to perform simple else uh some simple if and else
statements where you don't want to create a whole um if stay if if else statement control structure block so
yeah this was the ternary operator finally we let's uh we we make a short note on the path statement uh in python
so the path statement or the pass keyword is a a place where it is a placeholder of
sorts so what if i had an if statement and i'm writing a piece of code but i don't know what to do with this if
statement so if if a statement is correct if a statement is true um but i don't know what to do if this statement
was true how do i tell python well let's just keep it a hold for now and i might
put something into this block later in the future well i would use the pass statement so if i had this uh say the
sum condition again so i'm checking age is greater than 18 but i don't know what to do with this i would just simply use
this pass statement and uh this basically does nothing uh it it's a way to it's it's like a way to create a
placeholder where maybe in the future i might have i might write some sort of a say a print statement or some sort of a
different function or something else within this indentation so but in the meantime like currently i don't have
anything to place over here so i just leave it with a pass statement so this is a way where you can use a pass statement
in um if an else statement or infinite control structures in this video we will
be i will introduce you to the concept of iterations in python and we will be speaking in specific about the
indefinite iteration in python otherwise known as the while loop so let's look at what an iteration means an iteration is
uh executing the same block of code over and over potentially many times a programming structure that implements an
iteration is called a loop now in programming we have two types of iterations definite and indefinite iterations and in this example we will
be speaking about indefinite iterations in definite iterations in python is the
while loop where we use the while keyword to define an indefinite iteration so let's look at the basic
syntax as you can see this is the basic syntax where we have the while keyword followed by an expression and again the
colon and below that is something indented again we encounter indentations
just like in fl statements a set of statements where what happens here is following the while
keyword we have this expression where this expression is evaluated in a boolean context again we check if this
expression evaluates true or false and if it is true we execute all the statements or the
statement block that is indented below this file statement this is another example of control structure much like
uh infinite statement blocks where we use a lot of indentation so let's look at a basic example now of while loop so
let's copy this example and let's see what this does so i have a variable n where i am assigning it a value 0. this
is called an initializing process and it's very important to note that most while loops consist of an expression
which contains a variable a control variable uh which
is usually initialized prior to starting the loop and then this control variable is typically very modified somewhere within
the main loop body so in this case my control variable is n and i am initializing it by assigning it the
value 0 so let's uh move into the loop now so the loop has this wire keyword as
you can see followed by a an expression n lesser than or equal to
5. now what this is is an expression which is going to check if it's true or false is n lesser than or equal to 5 and
as long as this expression is true we will continue doing whatever is indented
below this y statement and what is below this while statement is a print statement first of all which says value
of n is and it basically prints the value of n in that particular iteration and as you can see at this compound
assignment where we add the value of n by 1 and we assign it back to n so what
this is uh let's see what this does actually let's execute this and see what this does uh important to note the value
of n again is initialized at zero so this while loop will keep going on until the value of n remains lesser than or
equal to 5. so as you can see i have the execution of this particular block of code or this while
loop where i get the multiple different iterations of this print statement that you can see here
the first iteration it says value of n is zero then it's the value of n is one what i'm doing is i am writing i am
assign i'm writing uh the value of n multiple times uh and each time the value of n is written over here based on
what iteration it is so what is happening actually is that initially the value of n is 0 and i
print the statement value of n is 0. now i add the value of what is in n by 1. so now
what is the value of n so again we do this check so after this first iteration we come back like once this whole
block of code is executed we again come back to this expression and we again check if this statement is true so now
that the value of n is actually one this statement is still true so again we execute this and that you can see over
here value of n is one now again we add the value of n by one and again we go back here once this uh this block is
executed and we check if this statement is true again and as you can see the value of n when it's 2 is still
making sure that this expression is true and this keeps happening until the value of n is greater than 5. so once the
value of n becomes 6 this condition is no longer met and finally we do not
execute the statement because this expression evaluates to false and we do not do this anymore and we finally leave
our while loop so let's check what the value of n is just to confirm this as you can see the value of n is indeed 6
and that is why we have left this while loop over here so this is an example of a basic while loop where we check for
this uh an expression if it evaluates to true we evaluate everything within it once this is done we go back and we
evaluate this expression again if it is again true we again go back into whatever is indented within it and we
keep doing this until the expression gives us false and interestingly we don't we don't necessarily have to
define these control variables always we can actually use uh iterables and we will learn about iterables actually in a
future video but we can use iterables and an example of an iterable is
the list so let's look at this list and let's look at this whole block all right so i created this list a which contains
five objects one two three four and five all integer objects and i have another variable a x where i store the integer
one now i'm this while statement now it might look confusing now it says it says
while a now what is a well a is not uh your typical expression where you're
making sure if some condition is being met or not but this the way you read this is while a exists so in the context
of a list as long as a which is a list contains objects within it a is true if
it does not have any objects within it a is false so while a basically what it means is while a has objects within it
and if it does have objects within it or as long as it does we continue executing whatever is indented within this while
statement and this y statement is a print statement again we do like we we have this value x where we
um we're doing this this we're printing this is iteration number and we pass x so the first iteration
obviously pass x is equal to one and then we add x by one and then the second iteration should pass this iteration
number two and then so on and finally we have another statement within this block called the a called the pop statement
where we're popping the elements of a now as if you would have seen the list the video and list the pop statement
removes the right most value from a list so if i do a dot pop initially it will remove five from this
list and i will have the rest of them again if i do pop it will remove four from this list and then you will have the rest of these so let's actually see
we'll actually check what's left in this list each time we do this pop statement so that i'll also print the list
a each uh during each iteration and let's see what happens over here as you can see what is happening out here is
while a or while a has elements we are going to continue doing this while statement whatever is within it so in
the first iteration obviously we have all of it and it is iteration number one and as you can see the list contains everything
then i pop it then iteration number two it again has elements but it has lost its most rightmost element and this
keeps on happening until the list finally has no elements left and once element or events the list has no
elements left we this expression while a evaluates to false and we do not execute
this anymore and we leave the while loop and again let's check what is in a a should have no elements as you can see
it's an empty list when i check what's in a it's an empty list and that is why while a returned near false and we did
not print any further so this is an example of using a while statement using lists and of course
the next topic would be discussing nested while loops and this is a broad topic what i mean by
this is that when when i'm saying nested while loops i'm actually talking about nested control structures so we can have
while loops within while loops not only that we can have if an else statements within while loops we can have while
loops within if and else statements and we can have if and l statements within
if and l statements so if you think of all of these loops uh and we will even
speak about for loops in the in the in in another video for loops again a type
of control structure so all of these are control structures while loops are control structures for loops are control structures if and l statements or
control structures all of these are control structures and nesting can happen within them and it does not
matter which is the like the parent of the nest and then the child or the nest we can have a while loop within an infinite
statement you can have for loops within a while loop all of this is valid in python and uh it's one of the one of the
great features of python that is very flexible in this way so let's look at an example where i have a while loop within
another while loop so i'm copying this piece of code where i have this list one two three four five and another list
first and second now my first while loop i print i print what is popped from a so
i take a then i pop the zeroth index so basically from the left hand side and i
print what is that all right and then i have another while loop where i have this list b and i'm doing the same thing
but this while loop is within the first while loop and let's see what happens out here so as you can see my first
my first iteration of this parent while loop causes me to pop what is the first element which is one then i do these
while loops and this is completely executed and only then do i go back to this first one and then i come back and
do all of this again then i go back to this one and then i come back and do all of this again and that's why you can see this repetition so i have this first
iteration and then i do the second while loop then i have the second iteration and then i do the second while loop and i keep doing this
and this is an example of a nested while loop okay so our next topic in this
section this video would be break and continue statements now break in continue statements are
ways to abruptly end iterations uh in in a particular loop you can use break in
continuous statements not only in while loop but you can use it in also in for loops so let's look at how we use it in
while loops and let's look at what we mean by breaking continuous statements first of all well the break statement
terminates the loop entirely so once the break statement is found the the complete while loop that we are
using is completely terminated and the continuous statement on the other hand terminates only the current loop
iteration and it goes back to the beginning or the expression and it
checks whether uh the expression or the uh the controlling expression is again re-evaluated and it is checked whether
uh the loop will execute again or terminate this pictorial that you can see here actually emphasizes or it shows
the difference between break and continue so i have this while loop and i have an expression all right i have a
bunch of statements and i have a break command over here and have a continue command over here so if i encounter the
break command it will not execute any of this in fact it will not execute this while statement at all and it will move
on to the next piece of code that we have but a continuous statement if a continuous statement is encountered in a
while loop will not completely break away but it will not uh it will not execute the the rest of the statements
in that iteration only these two but it will go back here it will check this expression again and again we will do
this all over again so this is this small uh difference between the break and continue statements but both are
used to abruptly end an iteration in a loop so let's look at an example of how we use the break statement so i will use
this example where i have again i have initialized some controlling variable n to 0
my first loop will check whether n is less than equal to 5. if this is true then i will print this statement then i
will what i'm doing over here is i am incrementing it by one now in my previous my earlier example using a
similar uh using the similar example uh i had no like this this part was not
there so what you got was i was printing the value of n so it was printing as like value of n is one i mean zero and
then one and then two and then three four and five but over here i've included a small i've nested an if
statement and within that i put a break statement and this if statement is checking if if n is equal to equal to 2.
so once n is 2 i move on to this and i do the break statement so let's see what happens now as you can see once
so when i have executed this i don't get the whole value of n is 0 and then 1 and then two three four five i o i stop at
one and that is because once n is equal to two i actually do not execute this uh
while loop again i do not go back and execute print value of n is two now in
fact i break from this whole while loop and my while loop terminates right then and there and that's why you only get
these two iterations value of n is zero and then value of n is one okay so now i'm going to show you a neat example of
what happens or what is the difference between a break and a continuous statement okay so let's uh go back to
our initial example where we're printing this value of n is 0 1 2 3 4 and so on but i've added one more statement where
i print hello at each iteration so let's see what happens when i do this as you can see it will print hello after each
of whatever i was doing already now let's introduce our break statement first of all so when i do break well
let's go back to this if statement if if we check this condition then we break
let's see what happens now as you can see something interesting has happened where we have this first iteration
completely being executed but the second iteration kind of stops where there's no hello and that is because we have broken
from this while loop before the second iterations hello was printed let's see the difference between a break and
continue now so now i have this continue statement instead of a break let's see what happens here as you can see it
seems familiar to our first example where we did not have any break or continue but there is a small difference
that i want you to catch and that is very important about this continue statement so as you can see the first
iteration has value of n is 0 and then hello and value of n is 1 but there is
no hello and this is because and this is because once this condition is actually
met we do not move on to this statement but we go back to this expression and we
will evaluate this expression and then once we evaluate this expression again and it's found to be correct we do
everything the same again where we print hello but except for that one step where this if statement was met and we did
continue and this following statement was not executed and that happens only for one iteration and that is when n is
equal to equal to two and as you can see that is what happens over here in one of the iterations we may say hello and that
is the difference of the continue statement between uh there is a difference of the continue statement with the break statement this video will
be an extension to that topic where we will be looking at three examples where we are using while loops along with
other stuff like say if and if statements so our first example will be where we calculate the factorial of a
number in this example as you can see here we are first going to ask the user to enter a particular number for us now
this number is supposed to be an integer once we have this integer we store it to
a variable called number now we have this you can say this variable called fac which does one and
you we will see how we are using it later now we know that the factorial of
zero is one that's how it's just defined so we have an if statement checking
whether our entered number is 0 and if it is 0 we say that the result is 1 or the
factorial is 1. however if we enter a number that is greater than 0 we must calculate the factorial
for this number and that is what we are going to do in this else statement block over here now in this else statement
block we have a while loop in this while loop the condition is checking while
number is greater than or equal to 1 so as long as this condition is true everything within that while loop will
be executed so as long as number is greater than equal to one we are going to execute these two lines now what do
these two lines do let us see so the first line takes the variable fac where we had the number one stored and we're
going to store fac times number into it number being the number that we have inputted so in case for example we still
we entered eight then what this will do this line will do is one into eight and it will store that back into fac now
once that is done we move on to the next line where we are decrementing the number variable by one so if we have
stored eight or we have entered eight into our input it will become seven now as we know 7 is still greater than equal
to 1 so this condition is still being met and then we do this process again where we are going to multiply fac this
time f ac stores the value 8 and we multiply it times the new number which is seven now so we do eight into seven
and then again we decrement this uh also once we do eight into seven we store it back into fac and we keep doing this
where we keep multiplying eight times seven and then we decrement the number variable uh by 1 and then we check this
condition again so what ends up happening is we are going to keep doing 8 into 7 into 6 into 5 into 4 into 3
into 2 into 1 and once we are at 1 again when we do this document operation the
number variable will store the value 0 and then this condition will no longer be met so number will be 0 and this
condition will be false and we can move out of this while loop then finally we store the result into a variable called
result which stores the result of 8 into 7 into 6 into 5 into 4 into 3 into 2
into 1. this is of course if we did enter 8 when we were asked to give an
input so let's see this um in real time once we execute this so i'm executing
this the first thing it asked me is to enter a number so let's say i enter my number eight as i was speaking about
eight all right now that i've entered eight as you can see the result that it gives me is factorial of eight is four
zero three two zero which is correct and you can check this for yourself where it will show you um eight times seven or
eight factorial is basically this this number okay so now in our next example
we will be looking at how we can generate fibonacci numbers for this example we will be using bunch of if and
else if statements along with a while loop so let's look at this piece of code
where we are actually doing this so as you can see the first part of the code is basically an input statement asking
us how many fibonacci numbers we would like to generate and then the user would be asked to give an input which is
stored as an end into a variable count now in this uh if statement the first
if statement checks whether what we have entered is 0 in which case we just store
an empty array in the variable called fib next if our entered integer is 1 we just store the
value 1 in this array called fib if our entered number is 2 we store 1 and 1 in
the array fib all of these are different sets of fibonacci sequences this
obviously an empty an empty array shows that well there is no numbers to be generated in this
sequence if we have one we just print the first number of the fibonacci sequence which is one itself if it is
two we print the first two numbers which is one and one now the actual
calculations happen when we say we want a fibonacci sequence for more than two
numbers now in that case we move on to this block in this statement block we
initialize the fib variable with the first two fibonacci numbers one and one and we store in this very in this array
now we are going to do a while loop within this and in this while loop we are going to keep executing the
statement block as long as this condition is met or this condition is true and what this condition is is it's
checking this variable i which we have initialized as 1 over here and we're going to check whether that is lesser
than count -1 count being the number that we have been asked to input if the statement is true and as long as the
statement is true we will be executing the statement block which is basically
us appending this expression into the array fib now what this expression is is
basically it's going to keep adding uh each subsequent numbers and we're going
to store each subsequent numbers back into the array fib so in this case if you see the
what the first step will do is it will take the value at the first position of
the array film and it will add it to the value at the zeroth position of the array fib and both of these values since
they are one and one when we add them we get two and we append that to fib so now
our fib will look like one comma one comma two then we increment this by one and what we do is we
do the same process again so in the next step what would be what we would do is we would do two plus one so we would get
three now this would keep going on until this condition is met or basically until
uh the numbers that we actually want to generate in our sequence so let's like let's let's uh execute this and let's
see an example of what happens so it asks me how many fibonacci numbers i would like to generate and i will say i
want the first let's say six fibonacci numbers so i execute this as you can see
this gives me the first six numbers in the sequence which is one and one and then two which is basically one plus one
and then three which is one plus two and then five which is two plus three eight which is 3 plus 5. so if we wanted more
numbers we would just enter over here like say if we wanted the first 10 numbers it would give us
the first 10 numbers in the sequence as you can see here now in our next example what we are going to do is we're going
to write a program which takes two digits that represent the dimensions of
an array so for example if we want a three by three array we will enter three comma three and we are going to generate
a two dimensional array in which each of the elements of the array are basically
the row times the column position of that particular element and what i mean by this is say we have a position i
comma j on the array the value of the element at that position would be i
times j so for example if i'm looking at something at the third row and the fifth
column or say the third row and the third column for example the value of the element would be three times three
and if i'm looking at something at the second row and the fourth column i am going to do two times four so let's uh
let's see how we can do this using code so if you look to the right over here i have a piece of code where i'm going to
in where it asks me to input two numbers two integers to represent the dimensions
of my uh example my sample array now once we have done this we are going to
store these uh these dimensions in the
inputs uh in in a variable called input string so obviously when we enter say 5
comma 5 that will be stored as an in in this particular string or this variable
what we want is we want five say we entered five comma five we want five as a separate integer and the
other five as another separate integer and that is what we do in this particular statement where we're going to split up our input string
based on the comma separator and we're going to store the first part of that string into the zeroth position of
dimensions which is an array and the next dimension in the first position in
this particular array now we are going to store the number of rows
as row number and that is the zeroth position of this array and we are going to store the number of columns as the
first position of dimensions or whatever we've mentioned in the input so now we
we have this um our results array called multilist which is basically what what
our final array is going to look like and we're going to store into multi-list and in this example we will be using for
loops to do this or to create this particular array so as you can see here our first
uh we have initialized our multi-list saying that we're going to have
only zeros in our sample array so initially once we have initialized this array all multi lists will contain is a
say for example we have inputted a five by five array it will have basically a 5x5 array with all elements as 0 and
that's what this line does once we have done this we are going to move on to the for loop portion where we are actually
going to create our array that we want so as you can see we are our first for
loop is going to say for row in range row number so obviously uh range will
generate a an iterator which can be iterated over um and since it says range row number
and say our the number of rows that we entered were five what it's going to do is it's going to create an iterator
containing the value 0 1 2 3 and 4. so for row and range it will basically
basically row will take the value 0 1 2 3 and 4. and a similar thing is going to happen in this nested for loop which is
within this where we're going to again uh create a an iterator using this range function and for the column number once
we have this we're going to do the simple process of multiplying the uh the value of the
element based on its position so if it's at the position three comma four we're going to store the value three times
four into that particular position of the array and we're going to do this for every position which is what happens in
these two for loops we're going to first go by each row and then within that we're going to check each column and
we're going to perform these calculations and finally we print our result so let's look at an example now
i'm going to say i want a 3 by let's say a two by four matrix so let's see what
the results will be when i give this as uh so what i'm saying is i want two rows and four columns now as you can see here
it might not be very clear to you right now but what you can see here is this is the first row and this is the second row
and each row contains four columns so these are the this is the my final array
that i get so what you can see here is this is the zeroth position and the uh or you can say this is the first row
first column first row second column and uh since python is zero based so this is actually the zeroth row and this is the
first row so as you can see uh this this value basically is zero times one this value is zero times two zero times three
zero times four and over here it is one times zero one times one one times two
one times three so similarly if i did for example a five by five matrix what
you will get is five rows now five rows and five columns and for example like
this particular value is uh one two three or zero one two three so zero one
two three and the first column so this is three times one um if i took this value this is like the fourth row for
example fourth row times the um zero one two three third column so this would be
four times three which is twelve so and uh each value of this has been generated in the similar process so this is an
example of how we can use for loops for a particular exercise that i have shown you right now in this video we
will be covering the topic of definite iterations uh using for loops in python so starting off we know that there are
two types of iterations in programming are definitely indefinite we have already covered indefinite iterations in
the form of while loops definite iterations on the other hand are done using the keyword for
and the basic syntax or the standard syntax for a basic for loop in python is as you can see over here we have this
four keyword we have some variable we have the in keyword and we have this iterable and
we of course define this control structure with the colon and then indented we have this statement block so
once this for loop has started we execute all of these uh statements within the statement block as part of
the follow-up iteration so yeah let's uh now let's to understand like how for loops work uh exactly let's uh look at
the concept or meaning behind what we call iterables and iterators so so think
of it in a stepwise manner all right so we in python we have different objects that can be used as iterables and an
iterable is basically some object that uh it's it's a collection of other objects so you know think of your
lists uh think of dictionaries and sets so all of these are essentially collections of objects
so once we have these collection of objects we can create an iterator out of it
how do we do that is we use the iter function so for example if i passed this list a if i pass this list a through the
iter function and i store it in some variable iter underscore a and i see what is iter underscore a it
is actually a list iterator at some random memory location which we don't really care about similarly if i gave a
tuple and i did the same thing i will create a tuple iterator and in the left if you can see over here i've done the
exact same uh functions with sets and dictionaries as well so i'm creating
iterators out of these iterables so as to speak now what is an iterator well an iterator
is an object that yields values successively so
if my list contained five values or five objects an iterator of this list will
yield these values one after the other and that is kind of how or that is the
basis for which we do we create loops let's see what we exactly mean using this uh
using another function that we call the next function so the next function keeps moving from object to object within an
iterator so since i've created this list iterator let's just do it once again so as you can see i've created this listed
iterator iter underscore a now with this item underscore a what i'm going to do is i'm going to use this next function
what next function does is starting from the leftmost object within this iterator
i will keep yielding or keep producing the values so let's let's just see what happens when i do next either when i do
next for this particular variable it gives me this object first now let's see what happens when i do it again
now it gives me the object second what if i did it again it gives me third now if i kept doing this it will keep giving
me the different objects that were initially stored in a that is first and then second third fourth and fifth one after the other so let's actually
perform that now i get fourth now i get fifth now a natural question is now that i've exhausted all of these values what
will happen if i perform the next function again well let's see what happens i get a
an error or and this error is the stop iteration function error which basically is telling me
look you have exhausted all of the objects that were initially present in this list a and you
cannot you cannot keep doing the next in the next function anymore you cannot go you keep going further so yeah so this
is uh what the next function does when it comes to the concept of iterators all right so now
we've learned two things what is an iterator and what is the how do we create an iterator out of different
collections of objects like a list or a tuple and we've also learned how to use the next function now let's uh move or
let's come back to our for loop that we started off this video with so our for
loop again let's consider our for loop over here as you can see some for loop with
objects again one two three four and five all right this is a list now i'm going to do for x in a print x and let's
try to see what happens when we do this okay as you can see when i have executed
this it gives me one two three four and five so i have first of all let's look at this for loop i in this for loop i
define a new variable x and then i say for x in a print x and what's happening
well in each iteration i am printing whatever the value of x is at present so in the first iteration it
is the first object one in the second iteration it is the second object two then three four five and then finally uh
on its own like uh this for loop knows that okay now once i have exhausted all
of the objects within my iterator i can stop doing this for loop and i can move on with the rest of the code all right
so think of it like a three-step process uh a for loop in python the first step
is it calls an iter function to obtain an iterator for whatever we pass over here this
iterable second step it calls the next function repeatedly in each iteration
all right to keep getting the next item from the iterator so it gets one then it calls next then it gets two then it
calls next and it gets three and then four and then five and so on and then finally the third step is the termination step is when after we do the
final next where we get this error as you can see the stop iteration error or exception finally this tells
the for loop function or the for loop that um okay we have reached the end of our definite iteration or the end of our
definite for loop and this is where we must terminate our loop and then continue with the rest of the code all
right so this is how a for loop works in python now it's very important to note that whatever we have discussed when it
came to while loops such as nesting of while loops and nesting of other control structures is also applicable in the
case of for loops so if i had a for loop within another for loop that is perfectly fine if i had a vial within a
for loop that is perfectly fine so all of these are valid statement blocks that we can do
and again for loop is another control structure and so we must follow the concept of
indentation when it comes to writing our statement blocks within a for loop okay
so now i'm going to speak about in specific i'm going to speak about the
this uh something called the range function that is uh quite you could say it's used definitely it's
used in other areas of programming but it's widely used in python uh i mean
i mean the for loop in python now what i mean by this is that um
range this range function is very important for the for loop and we will see why okay so let's look at um one of
the examples of using the range function so what does a range function do is if i give range 5 let's see what it does it
gives me range 0 to 5. what this basically tells me is that this will create an iterator that contains
integers from 0 to 5 so it will contain the object 0 1 2 3 4 and 5 and we can
use this as an iterator so let's let's look at this i have range 5 let's store this in x okay now let's do a type just
to see what happens when we do type x it should give me the type of range as you can see and this is the type of an
iterator in python now let's see what happens when i do for i in x
print i okay let's see what happens as you can see it prints the number zero one two three four an important caveat
when it comes to the range function is when we say range 5 it creates an iterator from 0 to 5 but it contains the
objects 0 1 2 3 and 4 only it does not contain the object 5 itself okay this is
something that is very important too so uh once again i created uh i use this
range function to create an iterator from iterator of five objects from zero to
four zero one two three and four uh i use that in my for loop and that's what
that is what you are seeing here now let's use this range function in the context of something else for example
let's see so i had my earlier list a right look at my list a here
so you can see list a contains these one two three four five five objects okay let's see what length of a is length of
a is five okay uh let's use the range function on top of the length of this
list a and this is uh like i can't show you an example right now without any context but this uh this form of using a
for loop is used is widely used in uh python programming you will use it so
much in data science you will use so much in machine learning and ai i cannot tell you uh this is so this is a very
important like sort of uh for loop expression so you have four let's say i
in range len a let's see what's going on here first i
create first i do length of a that gives me five then i do range of five that
creates an iterator between zero and four right when you do range five it gives you an iterator of zero one two
three and four as we saw earlier and this is what we're doing over here we have created an iterator out of the
length of a list now when i do print i it should give me again one two three four zero one two
three four of course so as you can see here it will give me zero one two three four and this is a very neat way of
using the range function on top of the length of a particular collection of objects in this case we're using the
list a this is something that you will use a lot so i i would recommend that you get used to this form of creating a
for loop as well using the range function also of course um there are uh
the you can use break and continue statements as you have in the case of while loops uh exactly this it works
exactly the same in the case of for loops wherein the break statement will abruptly stop the for loop completely
and we will move on to the next piece of code whereas the continue statement will break that particular iteration and then
we will resume with the next iteration so yeah that was break in continue statements and for loops finally i would
like to show you something about how to use dictionaries as an iterator or as an iterable when it comes to for
loops so let's create our dictionary let's go we have a dictionary already here in fact create this dictionary
again restore it in a okay so i created this dictionary a all right so i have dictionary a uh what i'm going to do is
i'm going to pass it through the iterator function as you can see and now i'm going to just for the sake of
showing you it will show i'll show you that it is actually an iterator of type of a specific dict key iterator type all
right so now let's uh let's do something on this so as you can see in the dictionary i
have the key first that has the value one i have the key second that has the value two i have the key third that has
a value three and then fourth for four fifth for five now a good question would be when i do
iteration or when i do a for loop on top of this a well what is it going to pick up is it going to pick up first uh is it
going to pick up the keys like these or is it going to pick up the values or is it going to go one by one key and then
value and then key in the subsequent value uh let's see what actually happens let's do 4 i in uh iter underscore a
print i let's see what what is the iterations happening upon using this so
as you can see we're using the keys so by default when we do this when we perform when we create an iterator out
of a dictionary we use only the keys as our iterator elements or at iterator values
but of course like if you wanted to use values all you would have to do is pass a dot values
over here and if you remember from a dictionary video this uh a dot values gives us a a list of
or it by it gives us the essentially a list of the values in our dictionary so when we
pass this to the iterator uh iter function and we create an iterator out of it let's see what happens over here
now let's see what is it underscore a you can actually see it's now the dict value iterator at a particular memory
location so it's not the dict key as we saw earlier it's a dict value iterator
so now that we have this dictionary value iterator now let's print what are our iterator elements and as you can see
now we are printing values and not um the keys so this is how to these this is
basically two different ways of iterating through a dictionary one through keys and one through values in
this video we will be doing a small exercise on if statements now in the
previous video you might have already seen some of the basic concepts surrounding if statements however in
this video just to drive home the point or the purpose of an if statement we
will be doing a small exercise so let's first revise some of the concepts of an if statement so basic if statement can
be something like this we have a small condition where we're checking if a variable x is greater than
5 or not and if it is greater than x we print a statement over here so if this condition is met we print this statement
else we move to this statement block now our variable x has the value 5. now
since x is not greater than 5 what this will do is it will check the statement and since this will be false we skip the
statement block and move on to this statement so as you can see here similarly we can do something
where we are checking multiple statements we use the l if statement in such a case so
now in this block we are checking in one of the one of the conditions we're checking is if x is equal to 5 or if x
is greater than 5 and then finally if both of these conditions are not met we say else and we print whatever or we do
whatever is in this particular statement block which is a simple print statement so as you can see x is indeed good is
equal to five so this is the block that will get executed as you can see here
now another example are nested if statements so nested if else statements are if statements within if else
statements so let's look at an example as you can see here we have a string stored in a variable called orange
quality and the string is fresh now we have an integer or a float in this case
4.0 stored in orange price now our first statement is checking whether orange
quality the variable orange quality is it equal to the string fresh now within
that if the statement or if this condition is met we do another check where we're checking what is the price
is it lesser than 5 if it is we do this block else we execute this block finally
if our initial statement our initial condition is not met we move on to this else block now when i execute this what
should happen is i will enter this block because this is true and finally i will
enter this block because this condition is also true so i should have this printed i will buy five dozens as you
can see here now let's move on to our main exercise for this video so this was all just a revision now we're gonna use
some or all of these concepts in a sample project or a sample exercise
to for your further practice so in this exercise what we're going to do is we're going to request the user to
enter a number between 1 and 20 and our our code is going to check whether this
number entered is an even number or an odd number so as you can see there are
two sets of checks that we're going to do in this code the first check is going to be whether the number that is entered
is between 1 and 20 or not and if it is not we have to say it's an invalid number but if it is entered between 1
and 20 we have to move on to the further checks which is whether it is an even or an odd number so let's see how we do
that so in this piece of code what we start with is a print statement saying please enter a number between 1 and 20
and then we add an input command this input command will open a box where we can enter whatever number that we want
to enter now we use this in keyword to make sure that whatever we have entered into the
input box is stored as a int data type in the enter num variable
once we do that our first if statement is going to check whether the entered number is greater than or equal to 1 or
less than equal to 20. sorry and less than equal to 20. so both of these conditions have to be met if this
condition is true then we have a valid input and this statement is printed that we have entered a valid number and then
we move on to the rest of the statement block within this if statement which is another set of if and else if statements
if our number is not between 120 we move to this block and this block prints that we have entered an invalid number now
once we have say entered a valid number we move on to this block this is in
if else if elif statement block now what this block is checking is whether the entered
number is an even number or not now as we know an even number is divisible by 2 and leaves the remainder 0 when divided
by 2. so this is what this check is doing if this check is true that means our number is even and we get printed
that our number is even the other other check or the other uh if statement is
checking whether it's an odd number and that means when we divide by two we should get the remainder one as you can
see here and we get printed your number is odd so let's execute this and see what happens when we enter a number now
it's asking me to enter a number let's say i enter 17. now that i have entered 17 as you can
see it's a valid number that i have entered and the code is telling me that my number is indeed odd let's look at
some other what if i entered something else here let's say if i enter 16 now since it's an even number as you can see
16 is also a valid number as it's between 1 and 20 and my number is even and the code checks for that let's see
if i what happens when i enter an invalid number let's say 25 now will i enter 25 as you can see it says i have
entered an invalid number and in this case what has happened is this condition itself is not met and i have moved on to
the statement block so to give you a breakdown as to how our code has executed this let me show you an example
for the number say nine when i enter nine the first check that happens of
course is this check whether it's a valid number or not and since it is between 1 and 20 we move on to this
block and in this block is checking whether our number is divisible by 2 or not and since it is not it will remain
it will leave a remainder 1 and we execute this block it says our print our number is odd as you can see here in
this video we are going to learn about the topic called file handling now file handling is basically needed because so
most of the times when we're handling large and different types of data in python or in general we cannot store
everything into a variable and we will have to use files now there are two types of files that we are going to deal
with they are binary and text files so binary files are some of the files that we most of the files that we commonly
encounter like document files image files video files etc now all binary
files are encoded in a particular format and they cannot be read by a normal text editor and we would be needing certain
specific softwares for specific files text files on the other hand do not have any specific encoding and they can be
opened in the normal text editor itself and they are like xml css html files and so on now there
are four main operations that we can do on by in python on files they are open read
write and close um there are certain other operations as well though like rename delete so some of the most basic
operation that we can do is obviously creating and opening a file and the syntax is as you can see here where we
store where we use the open command and we give a file name and we give a mode
and we store that in a particular variable now a mode is basically telling python how to handle
this opening so we can have a read-only mode which is done by this letter r a write only mode which is done by letter
w and for there are a bunch of other modes such as read or write mode which is done by r plus and we are going to
see them as we encounter them now the it's important to note that what i just mentioned is for text files if we are
going to do for binary files we're going to do this file handling then we would be using the
letter b in front of whatever we were using in the case of text files so if we were doing a read-only mode for opening
a binary file um we would be using rb and if we were doing read and write mode
read or write only mode for a binary file we would be using rb plus so basically just adding the b in the
case of binary files let's look at a basic example when we want to open a particular file we are going to like in
this example i'm going to open some file called filehandling.txt in a read and write mode read or write mode and i'm
going to store it in fo so this is as simple as it gets similarly if i wanted to do it for the binary file since i'm
using a binary file i will use the letter b as well in the mode and that's how you do it here now let's look at
different ways in which we can read from a file and there are three commands that we can use we can use the read command
followed by optional number of characters we can use the read line command followed by an option number of characters and the read
lines command so this optional number of characters is denoted by n over here um
and basically telling us how many characters we want to print so let's look at a simple example of
where i'm going to print something called so i'm going to take this and i'm going to do a print on top of this so i have
done first i've opened it and i've stored it in my file and then i'm going to do a a method or a function called read and
i'm going to say like in this example just read the whole thing so as you can see my file that i have opened has all
of these lines this is like the whole file basically but now what if i wanted to open only the first five characters
of this file which is basically this well in that case let's open this once again now let's do the same read command
except we will give the character number which is five as you can see it's only printed five now let's do a print read
command and uh try to read the whole thing again and you will notice something very interesting now when i do
the read command you can see it's kind of picked up from where we left off you know from our previous command and that
is the nature of how um python handles files so if i wanted to again take the
cursor back in such an example i will have to open this again and then i use this read command once
again to get back to where i started from as you can see here now another command that we can use is the read line
command so let's uh once again open this over here and now we're going to use the
read line command over here so what redline command is going to do is going to each time we use
this command it's going to go one by one and read each particular line from this file so in first case it will take
artificial intelligence then data science big data and so on so as you can see if i execute this it first takes
artificial intelligence now if i did this command again it will say data science next time if i
do it it should say big data as you can see here okay so this is the readline
command now within the read line command also we can enter uh characters and that will tell us basically um that we want
these number of characters from the next line so if i want the first six characters of the next line i will say
six i will enter six here and it will give me the first six characters of this particular line which is the next line that is to come as you can see here now
another way in which we can print whatever is there in our file line
by line is by using a for loop so again i'm going to open this file i'm going to store it here
now i'm going to use a for loop saying that well for line in my file and what this does is basically at each each
iteration it's going to take each line and store it in this variable that we end over here which is called line
itself and we're going to print that at the end of the loop what we'll have is all of the lines have been printed one
by one and another thing that we can do right now is um say we want to read a particular line see i wanted you to read
the fifth line of my file i can use this technique where
i just say okay i'm going to store 5 in this variable called line number and i have this
another variable called current line which i'm going to initialize with 1 and i'm going to any i'm going to what i'm
going to do is i'm going to do the same loop where i'm going to say 4 line in my line but i'm going to add a
condition saying that only if current line when it's equal to line number am i going to print the line and then i'm
going to break out of this whole thing and at end of each loop i'm going to say current line is
going to be incremented by one until basically these two variables are equal so when i do this i get my result which
is machine learning which is the fifth line of um my which is the fifth line of
uh whatever file i had now we're going to move on to the topic of um image file
handling so we we saw how we handled and we we saw certain operations around
text files and text files obviously something that we're going to use a lot but we are also going to be using files
such as images a lot and let's uh look at certain examples in certain
use cases around image file handling so my first step is going to be importing a
bunch of modules and packages now the details of these modules and these packages are not important as of right
now because they will be covered in a future video but just keep a note of some of these packages such as um they
say numpy and image the image package so once i've done this let's
move on to my example so what i'm going to do is i'm going to store certain file locations in two variables so it's
basically two strings uh i've attached the uh this prefix r to say that this is
a read-only uh sort of a prefix so the next topic that we're going to be handling is image file handling now we
have already seen many examples pertaining to text files so text files are obviously something that we're going
to be using a lot but image file handling is something very important as well and we're going to see certain
operations that we can do around image file handling so starting off i'm going to import a bunch of
packages and modules what these packages exactly are and what these modules exactly are are right now not of that
important of not not that important to you right now but it's something that will be covered in a future or in future
videos it's important to just keep note of what these are such as numpy and image so
once i've done that what i'm going to store is i'm going to store two particular file locations into variables
location one and location two and i've prefixed them with r just to say that these are raw strings so once i've done
that i'm going to use the image from the image package i'm going to say open and i'm going to say open from this
particular location in this particular location and i'm going to store these image images in im1 and im2 over here
very similar to a normal text file opening now once we have done this we can access certain properties of this
image using say format which tells us the format of the file
it attributes the it identifies the source of an image and if the image is not right from a file it is set to none
we can also see the size of the file using the size attribute and we can see the mode which basically defines the
number and names of the bands in the image and also contains the pixel type and depth certain common modes are like
l for luminescence rgb for true color images and cmyk for pre-press images so
let's look at them so when i access this you can see my first file is of jpeg of this size and an rgb format
image and my second image is another jpeg slightly bigger image and again rgb
now we can also of course display these images and to do that we can use the plt um
again plts the is supposed to stand for a matte plot lip dot pipe plot it's a
particular for a particular package that again you don't need to know the details of right now but this is how we
would um do this so i'm going to use a bunch of um commands
and methods such as figure and subplot and then i am sure so once i have done this as you can see both of my images
with this being im1 this being im2 have been produced on the screen as you can see i can also use display this display
function followed by the name of the file and this will simply display my image as you can see here now
i can obviously save a particular image using the save function which is
as simple as doing this so i'm going to save the image as i am underscore save dot jpg over here
now if i wanted to crop an image i can do that as well so i initially i stored the dimensions that i want cropped in
the form of a tuple as you can see here and i'm going to pass that tuple to the crop function and i'm going to apply
that on top of im1 and i'm going to store that to region once i've done that as you can see so basically what i've
done is i've cropped this image based on whatever passed here and i've stored it into region and now if i wanted to see
what was actually in that crop i can just do the i am show function and i am
going to pass the particular cropped image which is denoted by region as you can see here and you can see my cropped
image is basically a certain a left portion of this whole image has been cropped out and i have produced it over
here now i can also use the copy function using it's a simple basically copy base you use the copy function and
it copies an image onto another variable that you have assigned and when i use the i am show function i'm going to show
you the copied image which is basically the same now we can do the transpose operation as well so let's see some of
the let's see what we've done here so in this transpose opposite operation so in this uh basically i've done a bunch of
operations such as rotating by 90 degrees rotating by 180 rotating by 7
270 and finally once i'm done with all of these multiple operations i am going to show you the final output which is
basically a certain transposed image like this which is basically the result of whatever i have done before this so
this is it for this video on file handling i have shown you two slightly
more comprehensive examples on text files and even certain examples on image files
however we can use file handling and different libraries pertaining to file handling for
audio files and even for like stuff like pdf files and uh this is like this is
just only the beginning and i'm sure you will encounter a lot of different use cases different examples as you continue
learning python programming this video is going to be the first of a part of a series on
object oriented programming so to start off with let's try to understand and get an introduction into what is object
oriented programming well as the name suggests object oriented programming is all about creating objects an object is
a group of interrelated variables and functions variables can be referred to as the properties of the object whereas
the functions can be referred to as the behavior of an object so if we were to treat say for example a car as an object
its properties would be its color its model its price and its brand whereas
its behavior or functions for that matter would be like accelerating gear
change breaking similarly if i give you an example of a dog as an object we could consider the properties of the dog
as its weight or its name its breed its color whereas its functions could be say
barking playing eating walking etc objects provide a better and a clear
structure for a program now lets move on to what is a class and an instance now a
class is like a blueprint or a template of certain functions and entities whereas an instance is a particular
realization of a class classes are used to create user-defined data structures
and define certain functions called methods within the class whereas instances are realizations of these
classes and when we are speaking of classes and instances classes don't contain any real data they are just
merely templates instances on the other hand contain real data to think of an example of the difference between a
class and an instance think of a class like a empty form or a questionnaire now
an empty form of a questionnaire does not have any information but it does have a template to it it tells you to
fill in certain information and based on who is filling in the information that information or the data on a particular
form will be different so an instance is like a filled out form with its own uh
unique set of information that is one way of treating or understanding what is a class and an instance now for our first
example on classes i will be taking you through a class where i've defined based
on the circle object so this class is going to define basically information about your general circle
such as its radius and this area so let's go through it now obviously to define a class we need a keyword well in
the case of classes we use the class keyword followed by a name for that class so in this case my name is circle
now after the colon every every information that is part of the class
has to be obviously indented as is typical for python now you can see over here a bunch of def keywords followed by
sir something that you might not be familiar with and i will try to get you through this so if you see here you have
a def keyword followed by init and this init is prefixed by a double underscore and it's
suffixed by a double underscore and you can see the same thing for str and repr well this double underscore is called a
dunder and any method these are of course methods this is a method this is a method this is a method this is a
method now any method that is prefixed and suffixed by double underscores are called dunder methods um these under
methods are or can be thought of like predefined or built in methods for
any class that you define so these we have like three dunder methods over here and we have one user defined method that
we will get to so this first method that you see here is the init method or the initialization method and this is
invoked or called whenever we create an instance of this class circle and what
we do here is basically we pass when we create this instant circle uh we
are what what happens is that we are we get an option to pass an a value for
a what is this uh keyword or variable radius so if i pass so you will see me
uh later on creating an instance where um i will be passing a value and that value is basically stored as the radius
and by default the radius that will be passed whenever we create an instance for this class is one um the str method
is basically used to return a descriptive string for the the instance of um class um repr is not something
that you have to bother with right now and uh now get area is something that you should follow because if you see
here i have not used any double underscores so this is a user user defined method um user defined
methods are it's a method that we define and these are like tasks that we define
on our own so in my user defined method called get area i will be returning the area of the circle based on the radius
that i passed to it now if you notice here the before every um in every method
i have the self keyword before any other attribute so like this herself this herself even the
get area herself now what this means um self is like an optional keyword that is
used to improve readability of a program first of all and it's also the function of the self keyword is basically um
telling python that well any of the methods that we are invoking in this
class or the instance of this class has to refer to attributes and variables within that instance of that class so if
i'm going to use get area function i am going to get values and attribute values and
variable values based on only the current instance of that particular class self is obviously
optional we don't really need it but basically the first attribute of any method is
is basically the is basically what the mel is is the instance that um the
method is invoked upon so if i say self i'm telling this particular function that okay all
the value that you're going to get for performing whatever task you want is going to be found in that particular
instance where you have been invoked itself now don't worry if all this is very confusing um this might be in the
beginning but just try to understand that this is something that we do for good practice and you will understand
when 20 yourself or when not to yourself as you learn about object oriented programming so if you see here my get
area function is supposed to return the value radius times radius self dot
radius is basically telling um whatever value i've passed for radius for that particular instance you can read this as
radius times radius times pi as well so obviously this is pi r squared which is
the area of a particular circle now let me show you an example where i am going to perform some of these functions so if
you see this first line i have created an instance of the class circle where i've passed 2.1 for the radius of the
circle so now the value of the variable radius in this particular instance is going to be stored as 2.1 and this
particular instance is going to be stored in the variable c1 now the print c1 function invokes the str self-defined
or predefined function now if you remember str was it's basically used to return a particular string that
describes like what the class will do and this is something that we define on our own in our example str will return
the uh the string saying this is a circle with radius off and then it will return the radius that we passed so in
this case it should say this is the circle of radius 2.1 as you can see over here so if i execute this you can notice
this line this is a circle with radius 2.1 and this is invoked by the print function the print basically invokes the
dunder str function which does all of this now in the next line we say print
c1 dot get area so this is going to print the value of the what what gets returned when we invoke
the method get area for this particular instance c1 so obviously in this particular instance our radius is 2.1 so
the get area function should do pi times 2.1 square and the value is as you can
see here is some 13.85 so that is the area that we got now if we want to print
a particular radius um we just say print c1.radius so this will print the value
of what is what is stored in radius for the particular instance c1 now you might notice me using a dot whenever it comes
to defining a certain function or a keyword well anytime that we want to invoke or use a method of a particular
class we have to use the dot keyword so we use the instance name c1 dot followed
by whatever method that we want to use so if we want to use the getarea function we say c1.getarea if you want
to find out what is there in the radius key radius variable of a particular instance we say c1 dot radius now before
we move on let's talk about some of the naming conventions class names are initial capitalized so if our class name
is for example um like for example if it's camel case well
each word that is part of this class has its first letter capitalized variables
and method names are in lower class so if my class was called circle we say
class circle with c being in capital now moving on let's talk about how we
initialize or define instance variables now instance variables are declared within the init method if you remember
from the earlier example of circle init is a dunder method it's followed and it's preceded by double underscore as
you can see here now if you see in this particular case i have again used the self keyword
and as i mentioned earlier the self keyword is the first parameter of all member methods um and it this basically
binds that particular method to the particular instance itself during invocation so every time a new circle
object is created the dot init function sets the initial state of the object by assigning the values of the object's
properties so the init function basically initializes each and every new instance of um whatever of our class so
we can give in at any number of parameters but the first parameter must always be a variable called self now
when a new class instance is created the instance is automatically passed to the self parameter in init so that new
attributes can be defined on the object inside the init method the self.radius basically means that we want the value
of radius based on the current instance itself so as you can see radius defines
an instance variable radius and we're going to use the particular instance and its value of for radius in our variable
radius now instance uh the i mean the init function is not a constructor but it is an initializer to create instance
variables the init function also will never return a value and it is optional and can be omitted if there are no
instance variables now let's move on to um class variables so now as we
mentioned earlier all the attributes that are created inside the init function are instance specific
attributes and the instance attributes are obviously specific to a particular instance of the class for example all
dog objects now if we have a class called dog then all dog objects have a name and age but the values for the name
and age will vary depending on which dog we are talking talking about or basically which instance of the dog are
we talking about now class attributes are attributes that have the same value for all class instances and we define a
class attribute by assigning a value value to a variable outside of the init
function so if you look at this example over here we have created another class called circle and we have this
initializer again where we have a class specific variable called radius which whose value will change depending on
whatever we pass for that particular instance however if you look before the initial the init
init function or the initializer function if you see here we have another variable called shape object which
stores the string circle and this variable is going to be the same and constant for every instance of
the class circle and unlike the variable radius we will not have
different values depending on a particular instance okay now let's talk about instantiating an object and let's
see what happens when we create two different instances of the same class so as you can see here i've created an
instance c1 for class circle and i'm going to check its id well if you see the id is something like this now if i
created another instance over here called c2 and if i check its id well it's something different now so if you
see each instance basically has a different memory location in our memory
and each instance is this is how each instance is different each time we create it and they are created in
different memory locations finally before we conclude this topic on um the introduction into oop let's talk about
class methods instance methods and static methods now class methods are um
usually declared are actually declared with the at class method operator or decorator as
you can see here it accepts the class as its first argument so in this case i am going to say i'm going to define a class
called my class i'm going to use this at class method decorator to say that whatever follows here is going to be a
class method and i've defined a class method called hello that takes in a um that uses again self and a name
attribute so what this does is it prints um whatever i have passed to it in the
form of hello from self.name now what this this is going to do is basically it's going to give out a
string saying hello from name of is called the string name my class with a
comma and then whatever we passed initially which was rakesh next is then instance methods and these are the most
common types of methods these are invoked by an instance object so we have to create an instance to actually use an
instance method and it takes the instance or the keyword itself as its first argument so if i say class dot
class if i define a class myclass in this example and i'm going to define another function called hello as you can see i have not
used any decorator like at uh class method so this is going to be an instance method and it's going to be
invoked by the particular instance so in this case it's going to print hello from and it's going to basically say the name
of the class again so i create my instance called my instance1 and it's an instance of this class and then i'm
going to invoke the instance method by using this.operator and the instance name and the result will be basically
this string over here as you can see now finally we have another type of method called the static method which is
declared using the add static method decorator so a static method does not know its class and is just attached to
the class for convenience it does not depend on the state of the object and could be from a separate function of a
module a static method can be invoked via a class object or an instance object
so if you look at this example over here i have defined a static method i've defined hello and it basically says
print hello world so it's going to basically just print this so if you can see here i've created my instance and
i'm going to say dot hello it should basically pre-print print hello world that's all in this video we will
continue the discussion on oop with inheritance inheritance is used to describe the relationship between two
classes wherein one class takes the methods and properties from another class in this relationship we have
something called the base class or the parent class from which we will derive all our sum of the properties and
methods and the class which actually derives these properties and methods is
known as the derived class so you can think of the derived class as a specialized version of a base class to
explain what inheritance is in a basic way i will show you an example where i'm creating a cylinder
class which is going to be a subclass of the circle class that you might have encountered in the earlier video on op
so what we're going to do is create a cylinder class that is a subclass of circle where we're going to get the attributes radius and get area from
circle class and we're going to add the attributes height and get volume to the cylinder so right off the start you can
see we have our class circle that you might have seen in the earlier video so this class circle has the familiar
initialization where we are supposed to enter a value for a radius that gets stored in self.radius now we also have a
description string which basically is a dunder method that returns a string when
we invoke the print command on a particular instance and we have the get area method as well now if we move on to
the cylinder class you can see that i'm defining this class with the class keyword with the cylinder name but you
can see that i have added a parenthesis and within it i have mentioned the name of the superclass that i want the
cylinder class to be a subclass of so this is how we actually define a subclass in the most basic way you enter
the name that you want and you enter the name of the superclass that you want the subclass to be if a subclass of in
parenthesis right after the name now next if you move on to the dunder initialization
the initialization is very familiar familiar except now we have another attribute for height which has a default
value of 1 just like the radius so this basically means that we have an option of entering two different attributes for
our cylinder instances now if you see here there's a line which says super dot init now this is like um this is a
command which we use to invoke the super classes initializer so any time we
create an instance for cylinder we also want an initialization for the circle
method as well as a part of our cylinder instance next you can see that um much
like how we stored self uh i mean the radius attribute in self dot radius we're also storing the height attribute
in self.height now even this uh cylinder class has an str method to return a particular string if
we use this print function and finally we get on to a more a new method that we have defined only
for the cylinder class called get volume now if you see the get volume it returns as basically the volume of
the cylinder that is being described in the particular instance for which we enter the height and the radius so if
you can see here what we basically added extra is an a height attribute and
another method called get volume and the other parts of the circle superclass such as radius and
get area are also going to be a part of cylinder even though you do not explicitly see them anywhere here and we
will see how in uh in the form of an example that's coming up so let me just execute these classes now that that's
done i'm going to create an instance for cylinder i'm going to store it in cy1
and i'm going to pass 1.1 for the radius and 2.2 for the height and once that is done let's just print um to invoke the
hdr method and as you can see the sdi method basically tells us the information that is a cylinder with radius 1.1 and height 2.2 so now let's
print what is the value we get when we use the get area method now it's important to note get area was not
explicitly defined in the cylinder subclass but it's a method that is a part of the circle superclass and we can
see that we can actually access methods that are part of the super class simply by accessing any other method so if you use
the dot get area you can see that we get a value for the area of the cylinder so this basic this area is basically the
area of the circle face of the cylinder uh the top or the bottom now let's use now let's invoke uh the subclass
specific method which is the get volume method in a similar manner as you can see just by
doing invoking this method we get the volume as well now if we want to see
what is the radius and the height we can just do a simple print statement followed by cy1 dot radius c11.height
and it gives us both of these values as you can see here now over here what i'm going to do is create another instance
of cylinder but i'm not going to pass anything for radius or height so basically it's going to take the default
values for radius and height which was one and one respectively so once i print um this is this statement is basically
going to print the str method or whatever we stored in the str which is basically the description of the object
followed by what is its radius and height this method will give us the area and this method will give us the volume
so once i execute this as you can see here this is what we get and this is what we expect as well so now in this
example what i'm going to show you is uh now i'm going to go back and i am going to create another instance for circle
now this is the superclass of course and i'm going to give it and since the superclass has only one option uh one
attribute that we can enter which is for the radius so i pass 3.3 and i'm gonna print what what happens when i just
print uh this instance it's going to basically give us whatever was a part of the str method after that i'm going to
print is instance this is basically a check on whether c1 is an instance of
this class circle and x i'm going to check if c1 is an instance of its subclass cylinder now when i execute
this you can see that well this is what we uh this is the str method that gets printed but if you see here um you can
see that it says c1 is indeed a an instance of circle when it says true over here but when we look at the next
line is c1 in instance of cylinder it says false and this is obviously because um a superclass object is never
an instance of a subclass object well as whereas vice versa it would be true now in the next part of this video what
we're going to do is look at the different types of inheritances in python so there are basically five types
of inheritance in python there is the single inheritance there's multiple inheritance multi-level inheritance
hierarchical hierarchical and hybrid inheritance so we will go one by one and
see each of these examples starting off we have the single inheritance this is simply where we have one base class and
one derived class from that base class so this is a simple single inheritance and in this example
you can see i have a class called country where i have a method that i've defined called show country which is
basically going to say print this is india it's basically going to print this every time we invoke this show country
method then we have a class called state which derives uh from the
superclass called country where we have a method called show state which is going to say print this state every time
so you can see i created an instance of the class state and through that instance i can access the
super class and the subclass methods over here next we have the multi-level uh sorry multiple inheritance and this
is when a derived class contains more than one base class so let's look at an example to understand this so if you can
see here i have a class called student with the two methods defined called method one and method two in method one
we can pass uh two attributes sn sno or i think is this this is supposed to be
like uh an id i guess like sn number and we have s name so this is basically two
attributes we can pass that are probably descriptors for a student and
in the next method you have basically two print statements which says student number and then they will print the
student number and it will also print the student name next we have a class called marks this is also
so these these two classes are basically what our super classes are going to be and we're going to derive a third class from these two so this second class is a
class called marks and we have two methods again one method is called set marks which has um the option of putting
in two attributes m one and m two both are representative of the two marks and we store them in self dot mark one self
talk mark two the second method is uh put marks which is uh going to print the marks namely mark 1 and then it's going
to tell us how much marks are there in the first subject for example and another print statement doing the same
thing for the second subject or mark 2. finally we have a third class called a result which
derives from two classes marks and student as you can see here in my parenthesis i've passed in marks and
student both are super classes and our class result is going to derive from both of them this is an example of
multiple inheritance and within this class result i have uh two methods uh specific to this derived class called
calc uh wherein i'm going to basically calculate the two the total marks of um
uh the the total marks which is basically the addition of mark one plus mark 2 and i'm then i'm going to have
any other method called put total which is going to print me what is the total so if you can see here i have created an
instance of this derived class called a result and i'm storing it in r then i'm going to access method one which is
obviously a method from the first superclass called student um and i'm going to store okay so this is a name is
i guess lucky and here's 60 marks secondly then i'm going to do our set marks which is the method from the
second super class which is going to set the marks uh respectively so you have lucky student and his id is 60 and he
has got 50 and 60 marks respectively in say the first two subjects and
finally i'm going to access the derived class method called calc so this is going to do the sum uh finally i'm going
to also do our method 2 which is going to print our student number and
student name next we're going to have put marks which is going to tell us the what are the individual marks uh for
mark one and mark two and then finally we're going to print the total marks with the put total so once i execute
this you can see here it says student number 60 student name lucky marks one is 50 as i had written here marks 260 as
i passed here and then total is 110 which is basically 50 plus 60. and the next type of inheritance is called
multi-level inheritance now multi-level inheritance can be assumed as where you take a superclass let's call it a and
you derive a class b from that class a now what if we derived a class c from b
and we kept doing this so until say our class e now each of these steps is uh in
its own an inheritance but this whole relationship can be described as a multi-level inheritance so let's take an
example again so i've this this time i've defined a class called student where i have defined two methods called
set stud and put stud or you can call it set student and put student in my first
method i have options of adding two attributes again this is the student number this is the student name in my
second method i am going to print what is the student number and what is the student name finally uh so sorry next we
have another class called marks which derives from the first class called student this has two
methods called set marks where i'm going to again get the option of adding two integers for m1 and m2
which is going to represent mark 1 and mark 2 and finally i have put marks the method which is going to print mark 1
and mark 2. um finally i have another class called result and this if you see
this derives from marks now if you see this relationship you'll notice result derives from marks whereas marks itself
derives from student and this is an example of multi-level hierarchy and uh even as a part of this third class we
have its own methods called calc and put total calc will calculate the total as we had
seen earlier and put total will basically print that total and we're going to do a very similar operation we're going to create an instance of
this third class result and store it in r then we're going to do basically we're going to set
the student details his student number and his name we're going to give him his marks 50 and 60.
we're going to calculate what are the total we're going to say okay now put the details of um what is the student's
number and name we're going to also store enter i mean display his marks mark 1 and mark 2 and finally we're
going to display the total marks so let's execute this and if you see it's basically the similar operation that we
did earlier but the only difference is in the earlier example our our third class result was derived from
marx and student together so this was an example of multiple inheritance whereas in this example the result class derives
from marx and marx itself derives from students so this is an example of multi-level inheritance finally we have
um sorry not finally penultimately we have um as our fourth example of inheritance called a hierarchical
inheritance a pardon my mispronunciation it's hierarchical inheritance so in this
case a base class basically will contain more than one derived class so let's see a look at an example of what we mean
here so i have a class called one where i have defined a method called display where what i'm going to do is i'm going
to store self.x is equal to 1000 and self.y is equal to 2000. then what i'm going to do is i'm going to print a
statement saying this is the method in class 1. and i'm going to say after that i'm going to print another statement saying value of x is a self.x
which is going to be 1000 uh then i'm gonna have another print statement saying value of y is self dot y which is
going to be two thousand finally uh i mean next i have another class called two this this is going to derive from
class one as you can see here and in this class two i have defined another method called add and in this method add
what i'm going to do is i'm going to first print a statement saying this is the method in class 2 and then i'm going to actually print the result of x plus y
which is 1 000 2000. finally i have another class called three and this is
also deriving from one so if you notice we have one parent class called one and from this one parent class we're going
to derive two different subclasses called two and three so this is an example of hierarchical inheritance now
in this class 3 what i've done is i've defined a multiplication method what i'm going to do is print first of all i'm
going to print this when i invoke this method that this is the method in class 3 finally i'm going to say i'm going to
print the result of x times y which is one thousand times two thousand so if
you see i am going to create an instance of two and i'm going to create an instance of three and i'm going to store them in t1 and d2 now since uh t2 i mean
t1 is an instance of two so i can access its methods add and i can access this methods display so i'm going to use
t1.display and even in 2 t2 i mean since it's a class
it's an instance of class 3 and this also derives from class 1 i can also access its method display but now i
cannot access add but i can access multiply so if you see here i access add through t1 instance since add is a part
of class 2 whereas multiply is a method in class 3 so i access it in
its respective instance which is t2 so if you see here now once i execute this what you will get is basically um the
results so first of all it will basically display the method from class 1 which is a display method it
will display the values of x and y and since i've done this twice from two different instances uh it will basically
show a repetition over here finally i've done the addition and since this is a method in class two it is going to say
as much that is the method in class two and then it's going to say x plus y is three thousand and now multiply is a method in the third class so it's going
to say this is a method in class 3 and it's going to tell me what is the multiplication result finally we have
what is called hybrid inheritance and this is a combination of multiple plus multi-level inheritance that you saw
earlier so let's again understand this through this example so we have a class called student where we have a method called
set student again two attributes we can pass here for student number and student name next
we have a another method part of the class student called put student so this will print us the student number and
student name next we have a class called marks and this marks inherits from
student so we have a method in class marks called cell set marks where we can pass two
attributes for mark 1 and mark 2 respectively and as we have seen earlier we also have a put marks which will
display the marks for marks 1 and marks 2. we have a class called practical this
spectacle is basically a another super class if you see here since this does not derive from anything it is super
class on its own and what it does is it it has two methods get practical
and we can pass an attribute for p1 here and we store that in self.p1 and then we have
an attribute for put practical which will print us the practical mark whatever we passed for
this attribute in p1 finally if you see we have a class called result now in this result we have we are going to
derive from marks and practical but if you notice here marks itself is a
subclass of student so this is an example of multi-level inheritance whereas since result derived from marx
and practical both it is also an example of multiple inheritance so if you see notice here this is an example of
multiple and multiple level inheritance which is basically what we call hybrid inheritance and as we had seen earlier
this result class will have a calc method to um do a total of the marks um
in this case mark 1 plus mark 2 plus the practical mark b1 and we have a put
total method which is basically going to print us the total so now we're going to create an instance of this result and
through this instance of result we're going to first invoke the parent class method called set student which is the
the second level parent basically the student the student class set student method so we're going to set
student here we're going to say 60 is a student id and name is ash then we have set marks which is again the the second
level parent which is a student class where we set the marks finally we access this get practical now if you notice get
practical is part of the practical uh super class so in this we store the third subject or the the
practical marks hundred then we calculate the total and we put uh first the student details then we put the
individual marks then we put the practical marks and finally we enter what is the total so let's execute this
and if you notice you will see here student number is 60 student name and all the basically whatever details we
wanted um is shown over here in this video we will continue our discussion on object oriented programming with the
topic of polymorphism now the term polymorphism in oop refers to the ability of an object to adapt the code
to the type of data it is processing polymorphism is one of the key concepts of python and it is also a built-in
feature of python an example to get us started on polymorphism would be how we use the plus operator we use the plus
operator not only for arithmetic additions but we also use the plus operator for stuff like string
concatenations or joining two lists together this example where we're able to use the plus operator for different
different operations is an example of polymorphism to show you what i mean i have basically done a simple addition
operation here where i'm adding two variables number one and number two when i do it on integers it basically adds
one plus two now when i use it on two strings str1 and str2 which contains python and programming two separate
strings and when i use the plus operator on these you can see what it does here it forms um one string containing both
of these individual strings so this is basically the plus operator showing polymorphism and is one of the simplest
occurrences and yet most common occurrences of polymorphism in python
another example of polymorphism would be through the lens function the lens function in python is something that we
use a lot and over multiple data types depending on the data type that we use the length function for we get a
different value or a different sort of information from the length function now if you see here from this
diagram when we use the length function on a string it gives us the length of the string when we use the length
function on a list it gives us the number of items whereas if we use the length function on a dictionary it gives
us the number of keys so this is well another example of how we have polymorphism in a function now what
we're going to do is look at the different techniques through which we can enable polymorphisms in our code our
first example that we are going to look at is through method overloading now method overloading in its traditional
sense where we can have a method with the same name more than one method with the same name in the same class is
not exactly possible in python so if we have multiple methods with the same name in a class in python which may differ in
in types and number of arguments are not allowed and not supported in python in fact if we did something like this where
we created a method with um different uh with different say types and number and
arguments but having the same name um in the same class then what python will do is it will only recognize the the last
defined method and it will not recognize any of the earlier methods
with the same name but we can simulate polymorphism through method overloading by using default arguments in a method
now for example what i'm going to show you here is an example where i have a method called sum now by default uh it
has three attributes that you can pass through this method a does not have a
default value b does not have a default value but if you notice c has a default value 0. so this is a simple example
where i'm going to show you that the sum method is going to be used in two different cases
in one case we're going to simply add two digits uh i mean two numbers and in
another case we're going to use the sum method to add three different numbers so we have this class overload demo within
it a method sum and i have three attributes a and b are
have uh are supposed to be given by the user since they don't have a since they do not have any default values whereas c
has a default value of zero so if you see here in my first case i have uh i first of all created a an instance
called over uh an instance called od for the class overload demo and i have what
i'm going to do is i'm going to store the value of the sum of 7 and 8 in the variable sum now if you see here i have
not passed a third argument so what this method is going to do is it's going to take the value of c as zero by default
so it's basically going to do uh seven plus eight and it's going to give us the sum for seven plus eight and in the next
instance i'm going to give three arguments seven eight and nine so now c will be replaced by nine instead of zero
and then i'm going to get the sum of seven eight and nine so in this this is a not a very used uh not a very commonly
used thing uh but it's basically a method just to show you that we can actually simulate method overloading in
python by using default arguments so i've basically shown you how the same
how the same method sum has been used to do the addition of two digits and then
in another instance is doing the addition of three digits it might look very similar but you'll basically notice that by having
this third attribute c i have a default value of zero i have induced some form
of polymorphism through method overloading now the next way that we can induce polymorphism is through
inheritance which is called method overriding as well now method overriding gives us the ability to change the way
or the change the implementation of a method in a child class which is defined already
in one of its superclasses now if there is a method in a superclass the method having the same name and same number of
arguments in a child class then the child class method is going to override the method in the parent class
so what we do is when a method is called with the parent class object the method
of the parent class will be executed whereas if we call the method using the child class object the method of the
child class will be executed executed and it will override the method in the parent class so the appropriate overhead
in method is called uh is called based on the object type which is an example of polymorphism so let's look at an
example to understand this so we have a class called person and we have defined what we're going to define the
initializer is two attributes which we have to pass called name and age and we're going to store them in self.name and self.h now we have a user defined
method called displaydata where we are going to print if this display data has been called through the parent called
person if it's going to be called through the parent class object then we're going to print in parent class
display method and then we're going to print the name and age that we have entered now we have another
class called employee which is going to be a derived class 1 person so it's going to um so it's also going to have
an initializer and this constructor will basically um what what this initializer
will have is it'll have an uh constructor for the superclass where we're going to do this uh the same
initialization that we do in the super class but we're also going to store another attribute called id in
self.employeeid and if you see here we also have another method called displaydata which is the same named
method from person but now if you see in display data i have every i have all the
same almost the same information i'm going to print the name i'm going to print the age but if you see the first statement i'm going to say if i'm going
to call this method from the employee object then i'm going to say in child
class display data method instead of in parent class display data method to say that basically i'm invoking this method
from the child class object and i'm also going to print on top of the whatever i'm printing before i'm also going to
print the employee id so if you see here i have created an object called person
which is an object of the class person with the information of name john and age 40 and
then i'm going to display this now next i'm going to create an object called emp which is the child class employee object
which is going to uh now have the same information of john for the name and age 40 but now is going to have an employee
id and then i'm going to store this in amp and i'm going to display the data for this child class object and we will
see the difference in how the display data is differing from the earlier earlier case so when i execute this you
see the in the first case it says in parent class display data method so this display data has been called through the
parent class object and i'm only going to show the information of name and age whereas when i invoke this method from
the employee class object it's going to say it's going to specifically say that it's a in child class display method and
then i'm going to say the name is and also the employee id over here so this is the difference between how display
data has been used in its parent and its child class and this is basically the example of method overriding now our
next example of polymorphism is going to be through operator overloading an operator overloading is
the ability to overload the operator to provide extra functionality in additional to its real or core operation
and operator overloading is also an example of polymorphism as the same operator can perform different actions
the earlier example of where we use the plus operator for different operations is an example of operator overloading
polymorphism now when um when when is operator overloading required well
anytime you want an operator to perform a different function for you in your custom objects you would basically do
operator overloading now an example of this would be what i'm going to show you below so if you see this class called
point it has an initializer where i'm going to store two attributes x and y in sub dot x and y and septa uh instep.x
and self.y now i'm going to create one object called p1 where i'm going to create point one and two so you can
think of this object as basically like a coordinate x coordinate one y coordinate two this is one point and another point
called uh x coordinate three x one four i'm gonna call that p two now i want to print p one plus p two all right now if
i try to execute this you will notice an error it says unsupported operand types for plus point and point this basically
means that plus does not know what to do when it's given an object of this type it has no idea what to do whereas what
we wanted to do is add the the the x coordinate from this point and the x coordinate from this point so we wanted
to do one plus three and we also wanted to do this y coordinate plus this y coordinate or two plus four and then we
want to print basically like something like four comma six or the addition of the two points
or the the vector addition of these two points so this is what we want this plus operator to do but the python does not
have any inbuilt feature for the plus operator and we are going to have to basically do some operator overloading
to create a polymorphism on this so let's see how we can do that so to do that first of all we have to understand
that all operators in python have internally defined methods to provide functionality for these operators the
operator or the special method to provide functionality for the plus operator in python is the add method and
whenever the plus operator is used we are basically internally internally invoking the add method so uh these
these sort of internal methods that provide functionality for the operators are part of a big a bigger class of
methods known as magic methods and these magic methods are automatically invoked whenever its corresponding operators are
used so we want to change the or the operation for the plus operator in this example we are
going to have to use the the add method in this case and since it's a magic method uh magic methods are also
are basically what we saw earlier in the in the form of dunder methods so magic methods are going to be invoked using a
double underscore uh a prefix and suffix to it so similarly to how we defined an
init of an init method or an hdr method we are going to also invoke the add method using the same double underscore
before and after its name so now let's see how we're going to do this so if you see this class i have now my class point
and i have the same initializer when i'm going to store x and y now i am going to
define on this this add magic method i am going to override the the normal functionality of
plus and i'm going to give it a very specific function where i'm going to say um for two two different objects you're
going to add its the first part the first part or its so called x coordinate with the other x
coordinate and it the y coordinate with the other y coordinate and you need to return return this to me in the form of
a similar object so now when i pass one and two and three and four it should return me four and six as you can see
here i have basically done what i wanted to do by operator overloading i have
changed or i have overloaded this add this plus operator using this add magic
method and i have created a new functionality for this add function for these two points one and two three and
four now i'm able to add one comma two three comma four in the way i want it to so now that you saw how we did operator
overloading i'm just going to show you a list of similar magic methods for different operators that we are familiar
with so the plus operator already we've seen has the add method then we have the minus operator with the sub method and
similarly we have for all of these operations such as multiplication division we have its respective magic methods these magic methods are again
prefixed with two underscores and suffix with two underscores and they are basically they are also called uh
dunder's in python so this is how we would do operator overloading in python for whatever operator we want similarly
we can do this for like comparison operators and for unary operators as well so look at this example now where
i'm going to overload the multiplication or the asterisk operator so i've again
defined a point i mean a class called point i'm going to define an initializer but i'm going to store some attribute x
and self.x now what i'm going to do is i'm going to overload the multiplication operator where i'm going to basically
allow the uh this asterix operator to multiply two objects uh from like for
example 12 and five usually i can just do a normal 12 times five but in this case my object is slightly different my
12 is being passed through an object of a class called point and five as well in
another uh instance of the same class now when i want to multiply these class
instances like the the multiplication operator does not perceive these class instances to be integer so by default it
would not be able to multiply what we want to multiply but when we define um
or we overload the multiplication operator within our class it's now able to understand what to do um using the
attributes of these classes in its respective uh class instances so it's able to say okay so i want this
attribute from this particular instance p1 12 and i'm going to multiply it with the attribute 5 from instance p2
whenever i say p1 times p2 or p2 p1 astrix p2 so when i execute it it will give me 12 times 5. similarly i can also
do this for the greater than operator over here so i have a class called person where i'm going to define an initializer where i'm going to pass name
and salary and store them in sub.name server.salary the gt method is basically the greater than
method magic method and it's going to uh we're going to use this to overload the
greater than operator and now again using this greater than operator i'm able to basically say object one greater
than object two and i'm basically able to check through this and if object one is greater than object two it will
basically tell us if it is true or false or uh basically whatever like we want to know so basically the print statement
will check for object one dot name and it will say earns more than object two dot name if in case object one is indeed
greater than object two so when i execute this you can see here my first information says john has is earning 4
500 some units natasha is earning 6000 of some units so it will say uh john
earns more than natasha well it's false because object one is not greater than object two so
since 4500 is not actually greater than 6000 and this is the check that i'm doing by overloading the gt operator
over here where i'm so where i'm returning the boolean value of uh what is greater self.salary or other dot
salary self being the first object in any comparison so in the if
i'm basically any comparison if i'm doing say if i'm doing 5 greater than 5 greater than 6 so what the gt will do is
this will be the self object and this will be the other object so this is what i'm doing over here i'm checking self.salary with other dot salary in in
the form of these objects and it's basically the same same way that we we are able to do five plus five through
these class instance objects that you saw earlier or 12 times five that you saw earlier so this is
all examples of operator overloading in python in this video we will be taking a brief introduction into what is a
function so a function in python is a group of related statements that performs a specific task or tasks now
functions help break our program into smaller and modular pieces of code and it's very good and very
convenient to use functions to make our code organized and manageable especially as our overall program grows
larger it also helps us to avoid repetition and makes the code reusable so let's look at the basic way of
defining a function so this is a basic function that i'm calling fun
underscored name all right now the rest of the function or whatever the task is going to be performed by
this function will be my written over here within indent of course as a standard when it comes to python so i'm
going to define this one something in triple uh double quotes so don't worry about what this is right now
this is a doc string don't worry about what this means and i'll explain it to you just in
a short bit all right now now the rest of the statement the rest of it will obviously be what this function
will do let's include a simple print statement all right that's uh done here let's call this
so of course now once you define the statement function to call the function you just have to use its name like this
this is how you call a function so as you can see when i call this function it should print the statement hello now
let's go let's uh look at some of the uh like what happened over here so we've used the keyword def to define a
function we give it a unique name which makes it uh which with which we uniquely
identify this function and also once we've done this we
we can give it we can give this function a particular header it's called a docstring so what this
docstring is basically something that we include in triple quotes over here just after the def keyword and um this is like a brief
we can use this to give a brief uh and give brief information into whatever
function is doing so we can say this is this function performs addition this performs um
subtraction or whatever like some basic information as to what our function does so we can use a dog string for that um
of course this is an optional thing this does not have to be we don't have to include this as well all right but for
the sake of this let's just keep it here after that of course rest of the function uh will contain whatever tasks
we want to do with it and that will be indented finally we can also include a return keyword and what the return keyword does
is at any point you find the return keyword in a function you immediately leave the
function you go back to where this function was called okay so now let's see
now there's also one more important component of defining a function and that's parameter now if you noticed over
here within these parentheses i did not include anything this is like an empty parenthesis opening and closing what if
i said a if i included some a and b over here so what this means is whenever i call this function i need to pass two
parameters a and b these can be like strings or numbers or whatever um but now it becomes almost mandatory that i
pass these two things for my function to uh to work so let's define a function
where i'm going to add a and b so instead of this print statement let's do this i create a variable c and in that
i'm storing a plus b all right and then i return c so you can use a return and
you can you you can return certain like variables along with the return statement so i'm saying not only return
from this function but also give an output or return an output called c which is the addition of a and b now how
do we use this well now instead of just calling the function like this i'm going to add better i'm going to include
parameters so i'm saying pass 2 and 3 to function name where 2 will take the place of a and 3 will take the place of
b all right what will happen now is addition will take place and we will get return the result so let's see what
happens now as you can see two plus three and i got the written the addition of two plus three and it returned me
five so yeah this was like a basic uh usage of a function and parameters so
of course uh we can if you want to know like what a what the doc string of a particular function does
or or cells uh you can use this uh particular you can use this like
statement so let's say if so uh it's very important to like just keep a note
in your uh while you're going through this so while you're learning that uh whenever we use some sort of a function which has double
uh underscore right this is like a built in a built-in command provided by python
um within the python library itself so these are like built-in commands to check certain details so i want to check
what is the docs string and this is how i do it so let's do print let's print what is the docs string over here this
is a dock string so this is basically what i wrote over here i can change this to this like this does
addition for example all right now this will say this does addition when i execute this line so this is the way to
check what is a dog string anyways so now that you have seen a basic basic function or two basic functions
that i defined for you and how we use them what a parameter is let's look at another concept that we call scope and
lifetime of variables so scope of variable is the portion of the program
where the variable is recognized all right now a parameter and a variable that are
defined inside a function are not visible from outside the function this is a very key thing so if we define
something within the function we can only use it within this function and we cannot like we cannot use it once the
function has already been executed so as to speak um these variables and these parameters uh
have what we call as local scope since they are only um recognized within a particular function now the lifetime of
a variable is the period throughout which the variable exists in the memory itself and it's very important to note
that lifetime of variables that are defined inside a function um are as long
as the function executes um once we return from a function
whatever we have defined within it are destroyed so when we use a function it
will not remember the values of a variable from a previous iteration of a
function call so let's uh try to understand this example or this concept using certain examples so
out here i have defined a function where i'm going to create a variable my underscore var my variable and i am
going to store the value 10 in this and then i'm going to print so whenever i call this function i will always create
this variable i will store 10 and i will print the value of this all right now what i'm going to do is i'm not only
going to create this myvar inside this function i'm also going to create a variable outside so you see there now
you might be confused as to okay how is the behavior going to be because outside the function i have created my var with
a value 20 but inside the function i will always define my virus 10 okay now
i'm going to print so my first what i'm going to first do is i'm going to execute this function that i created
initially where i store the value of 10 in my bar and then i'm going to pray and print the value of my wire that was
present outside the function let's see what happens you can see two different things happening so when i execute this
function it prints the value inside the function as 10 but when i print the next line which says
ok now get the value of my var it actually prints a value of 20. and this is a very key concept because
what's happening here is when i initially call my function within this function it creates a variable called
myvar and it prints the value as 10 and the moment my function has been executed it destroys this variable and
the variable which contain the value 10 is of course now destroyed and all we have is the my wire that contains 20
from the outside and when we print that we get its respective value as 20. so you can also think of it like this the
my wire that is present inside this function is different to the mywad that we create outside so the scope of the
mywire within this function is local only to this function and once the function is executed that variable is
destroyed all right now let's look at a another case or the other side of this
case where um say we're dealing with variables that have a global scope how do we deal with them so let's create a
variable called mywear all right and i say i stored 100 in this all right now
if i define a function i've stored my let's say i define a function define underscore say again same name where
what i'm going to do in this is i am going to print the value of whatever is
there in my where okay so let's do print um value of
variable is value stored in variable is okay that's
my where so let's see what happens when we do this let's call this function underscore name see what happens here so
as you can see the value i stored a value of 100 in y where and i've called it inside the function and this is
because since i've defined it outside i can use it inside as well now what if i try to change the value of
this variable inside the function though so let's see if i did this and now if i try to print
let's see do is this allowed no it's not allowed in fact i get an error it says local variable myvar reference
before assignment and without going too much into detail what it's saying is that the variable
inside over here is still local to this function and i have not defined this myware as a global variable so i cannot
make changes to it within this function right now and uh to change that i can use the global keyword what if i did
global over here so if i did global and now if i said okay global mywear and i
declare this variable as a global variable now if i do this now if i do the same incrementation now let's see
what happens when i'm trying to do this you see i get the value 101 it's exactly what i wanted and that is because i've
defined my variable to be a global variable within this function so i can in fact make changes to it within this
function so this is how we use the global keyword and global variable also just to make a quick note um there
are three types of functions uh the three types of categories in which we can divide functions first one being
built-in functions these are the ones that are built into the standard library of python the other is user defined
function that is the ones which we define ourselves and the third type is called anonymous functions they're also
known as lambda functions and this is something that we're going to cover in a separate video now let's talk about the
arguments that we pass in python so there are four types of arguments that python user defined functions can take
first one being default other one is required then there is keyword and then there is variable number of arguments so
the default argument is when say um if i define the function where underscore
sorry fun underscore name and i'm saying a comma b right but what if um the user
has not um like say i i want a default value of a and b each time when i use
this function so in the case where if say i don't pass a value for a and b like this will always be used so i can
just say a is equal to 2 by default and b is equal to 3 by default and then within this function i will say c is
equal to a plus b and then return c so i do this and if i say found
underscore name and in case i don't pass any arguments here let's see what happens by default i get the answer 5
because by default a is 2 and b is 3 but this is not fixed and i can always change this by passing my own values
here 5 and 6 and in this case i should get 11 as you can see here now the next type is required arguments and when we
are defining a required argument we just simply do not use the equal to sign for the parameters over here and this
basically um it makes it so that now anytime we call this function we have to
pass something over here now if i try to pass like this i won't get a oops yeah i
won't get a default value then that's because um that's because well there's no default
value and it needs an a and b so i have to pass it a three and say four now it should give me seven as you can see the
next type of argument that we'll be talking about are the variable number of arguments so let's look at an example
here so what i'm doing in this particular example is i'm defining a function called my sum where i'm passing
some parameter called my integers and i'm doing something out here and what this does is um it will take the values
of a particular like collection of objects and that's called my integers and each value i'm going to keep adding
it to each other and i'm going to result a particular sum i'm just going to resolve the sum of whatever is there so
in this case what happens is i'm creating a list one two and three which contains one two and three and then i'm going to print
the summation of whatever is there so it should give me six now the problem in this case is that each time when i'm
going to perform this function i have to create a separate list where i'm going to store these objects but what if i
didn't i do not know like what exactly i'm going to pass here what if i don't know if it's going to be a list of
objects or like what is it going to be exactly well in that case i can use a variable uh variable uh key variable
number of arguments so it's like a variable keyword argument so what we use here is um
a specific way of passing keywords and we do it like this so i say
define my under underscore name and i use an asterisk now i give it any name
this can be args this can be integers it doesn't really matter what this is but it's just this is the key the asterisk
here and this tells us that whatever we pass here is now if we're supposed to create an iterable out of this and then
we can perform whatever task we want so let's just uh since i have already created one here let's see how i'm going
to use it in this case so as you can see i'm doing uh i'm creating a particular
variable argument function over here and i'm doing the same task i'm just going to keep performing edit uh i'm going to
add whatever i pass over here but now when i'm calling this function i don't need to create a separate list as i did
over here i'm just passing all the numbers that i want to in the form of like it's pretty much like a tuple so
i'm just passing these numbers here and what this function is going to do is is going to create an iterable out of this
and then we're going to iterate over it as you can see that's happening over here and i can keep uh i don't need i i
can just keep like so since i've done it for 1 2 3 and 7 the summation should be 13 in this case
i can add another number here just explicitly just like this and you can see the value will change and that's
because this is a variable uh this is a variable argument uh method of uh
perform creating a function now the fourth type of function arguments is the
variable keyword uh argument so let's look at what is the keyword argument now so i have defined a
function here called the concatenate function and let's see what i'm going to do with this so in this i have passed a
keyword argument i've said that okay this is going to be a keyword argument function and what i'm going to do in
this is i'm going to create a blank string and what i'm going to do is i'm going to add
or i'm going to concatenate certain strings that i'm going to pass to this function so i
in this example i have passed python and is and cool and an exclamation mark all
separate strings and what i'm going to do in this function is i'm going to join them together um and i'm going to create
one whole string out of it let's see what's the result python is cool so this is so of course like uh if i had to add
some something else like python is say cool and say i just wanted to say hello
and say one more string i can add i can add it just like this i don't have to like define a fixed number of arguments
i can pass any number of arguments i want and this works exactly the same as variable and
only differences instead of positional arguments we're using keyword arguments over here hello bye like this doesn't
really make sense but just to show you as you can see so this is how we use keyword arguments in this video we will
be learning about exceptions exceptions uh errors that are raised during the
execution of a program when an error occurs python generates this exception that can be handled uh which
avoids our program from crashing python has many built-in exceptions however we can create many uh
defined errors or exceptions as well to catch whatever errors we're looking for in our program so when an error occurs
python interpreter raises an exception and stops the current process and it passes it to a calling process
until the exception is handled and if this is not handled the program will crash some of the
built-in exceptions are like io error in the case when a file cannot be opened or
import error python cannot find the particular module being imported and there are so many similar uh so many
exceptions that are built in python for the appropriate cases now before we move on and see how we raise these exceptions
um let's look at the difference between an exception and a syntax error so for that i will be using an example where i
will be dividing something by the number zero of course this is not possible so let's see how python handles this
particular problem well it raises something that it raises what we call a zero division error and this is an
exception that is built in in python whenever we try to divide something by zero now let's look at the difference between this exception and a syntax
error so this is the same statement except i'm going to add this extra bracket which does not make sense
syntactically in this now if i try to execute this as you can see we get a different type of error known as the
syntax error and it says unmatched closing bracket so this is what a syntax
error looks like like an extra bracket or a comma that basically makes the line unreadable
to the interpreter in the first place so the the interpreter doesn't even get to the point where it needs to figure out
uh that there's something being divided by zero it doesn't even get to that point because it finds this extra
bracket and it cannot execute this line at all so that is like the difference between an
exception and a syntax error all right now for our first case of how we raise or how we handle exceptions let's look
at the keyword raise so for this example what i will be doing is i'm going to
take this variable x all right and i'm going to store a value 10 and what i'm going to do is i'm going to check for a
condition if x is greater than 5 then i'm going to raise this exception using the raised keyword like this and in case
this condition is met if x is actually greater than 5 i want this particular message to play out in my
exception so let's see what happens when i execute this as you can see the exception is raised because x is indeed
greater than 5 its value is 10 and the mirror message says so that x should not exceed 5 the value of x was 10. so this
is an example of how we can raise an exception and as you can see when a condition was met the program comes to a
halt and an exception was raised now let's look at another type of handling exception where we use the assert
statement so when we use the raise command we waited until an error occurred and our program crashed midway
right what if we want to check if a condition is met and if this condition is met then then the program can
continue but if the condition turns out to be false then we want a particular error namely the assertion error
exception to be thrown to us so we can use the assert command in such a case so in our example we will be checking um
whether the system that we are working on is actually linux or windows 32 so let's see first of all let's import a
library called sys this is the it's a library which where we can access system information one of the modules and that
is uh one of the functions and that is the platform it basically tells us what system are we working on so we're
working on a win32 system okay so um let's now let's use the assert keyword
all right now we're going to check if linux is what we are working on and in case it is not then we want an error
message and this will be the error the error will obviously be an assertion error because we are using the assert
keyword so this is uh how we use the assert statement and if we execute this as you
can see we get the assertion error because systor platform contains win32 and not linux and so we got this
assertion error so if we change this to check for windows system we won't have any error when we execute this as you
can see so this is the example where we use the assert statement another way of handling exceptions is by
using the try and accept block so this is probably one of the most common ways of handling exceptions in python
where we use a try keyword and an accept keyword now within the try keyword as you can
see here we have a chunk of code which we're going to check and if everything is fine in the try keyword then this is
perfect so we don't need to move on to what we call the accept part of the try and accept block but if say there
was an error in the try block then we move on to the accept block where we're
going to run the part of the code in the case we find an error in the try block so first we check
the part of the code that is under the try block and if if there is an error we move on to the accept block and we run
that part of the code over there and where we and in the except block where we that is where we handle our whatever
error that might get thrown our way in the try block okay let's look at an example at how to uh use this technique
so i have a basic function out here all right it's defining a function called linux interaction what this is uh
basically doing is that when i call this function i want to do an assert check i'm going to check if linux is the
system i'm working on and if it is not then i want this error to be thrown okay and
so yeah let's see what happens in the case and if if this search statement is actually passed then we will move on to
the statement so you could look at it like this if whenever i mean when i call this function it will first check for
this search statement in case something wrong happens and we get an assert error then we do not move on to this line so
we only get this printed but if this assert statement passes then we move on to this line and we get print doing
something okay so let's see now i'm going to call this function out here let's see what happens here as you can
see i get an assertion error because obviously this is a window system and not a linux system and i get this
message okay now let's see what happens when we use it in a try and accept block all right so now i have a try block over
here in which i am going to try the same this function linux underscore interaction if in case i find an error i
immediately jump from the try block into the accept block now you see the slight difference in how we handle this like
what happens so as you can see when we use the function explicitly we directly went to what we call an assertion error
but when we use a try and accept block we will not use the assertion error because we are leaving the try block
immediately and we are going to go into the accept block where the only thing we're doing is printing the statement as
you can see we are not on linux found some error okay now what if we wanted to catch the error within uh this function
itself which was the assertion error and we can do that explicit layer like this so now what i'm doing is i'm going to
try all right and it's going to catch an error in this slide so now in the accept block i'm going to say the assertion
error that we found in this function in the try block we're going to use that in our accept block so as you can see we're
going to print that assertion error it will basically print this statement function can only run on linux systems as you can see here function can only
run on linux systems function can only run on linux systems and the next part of the thing was the linux
interaction function was not executed okay so this is um a very this is like
um this is a key there's a key something very important happening here when we use this assert statement the whole
program is actually getting executed right but when we're using the try and accept block we are immediately jumping
on like the moment we catch an error we are immediately jumping onto the accept statement and uh however and all the
handling of the exception is done in the accept block and not in the try block anymore so we do uh think of it like
this that the try block is only to check if a particular piece of code is uh like does it have any errors or not and in
case it does then every uh like all the handling that we do is uh in the accept
block of this particular statement now let's look at another example in this example i'm going to try opening a
particular file now this file does not exist so i will be i will get a file not found error and this is a built-in
exception and i'm going to catch that and i'm going to print that error over here in the accept block all right so as
you can see file not found and whatever like error i have i printed over here all right so this is another like this
is a file not found error that we are going to that we we caught in our try
block and we're handling it in the except block now let's use let's combine both of the examples where we use this
linux interaction and we also try to open a particular file and we try to do
both things in the try block and since both of these contain errors let's see what happens when we try to what happens
when we have like multiple errors in a try block so as you can see in my try block i'm not only doing this linux
interaction i'm also trying to open a particular file that does not exist obviously so now you might think will i
get two exceptions well let's see what happens when we try to uh execute this so uh it's important to note that in our
accept we have an except for uh catching a file not found error and we also have
an except for finding the assertion error that that is part of this linux interaction function so so
since both of these are erroneous statements or they will throw exceptions so now the question is
will we get both of these except blocks or will we get both of these exceptions will we get only one of them that we get
the first one so let's see what happens so as you can see my error statement is
is very much like the assertion error that i had that we had done as part of this linux underscore interaction
function function can only run on linux systems the linux function was not executed as you can see that that is the
one that has been caught and for some reason the file not found error has not been caught and this is because this is
a very important feature of the try block the moment we find the first error in our try block we immediately leave
and we do not execute any of the further statements and we jump into the exceptions and we handle it using the
accept blocks so the moment an error was found in this function we did not execute this part of the statement and
we directly jumped into the respective exception that was the assertion error exception so this is a key takeaway so
some of the some of the other key takeaways when it comes to exceptions is a try clause is executed up until the
point where the first exception is encountered and in the accept clause or the exception handler we determine how
the program responds to this exception we can have multiple exceptions and we can differentiate how the program uh
responds to each of these and it's also very important to not use uh accept clause on its own it's very important
not to use a bear accept clause now finally before we conclude this topic of exceptions let's look at the else and
the finally clause so the else clause is used when we want to execute a
particular piece of code in the case where we have no exceptions or no errors found so let's look at this just like we
have the linux interaction function i'm going to define a win under underscore interaction and this is going to check
whether our system is windows or not in case it is not then we get this error message all right and in case it is a
windows of uh in the window system we print this in the case of when we call this function so let's again use our try
and accept statement only in this case we will be using an extra else clause so
we first try this function in case there's an error we catch it as an assertion error and we print that error
but if there is no exception then we move on to the else statement and we print this so as you can see our
we have actually moved on to the else statement and we print this line executing the else clause and that is because we have found no exceptions over
here so again it's key to remember that the else clause is used whenever we want to execute a particular statement in the
case where we do not find any exceptions in the try block the finally clause is
used when we want to execute something regardless of
whether we have an error or an exception or not so no matter if an exception happens i mean is raised or if it's not
raised we want this finally block to always get executed and let's look at
how it's let's look at an example of it being used so i have this block where i'm doing a lot of things the first
thing that i'm doing is i'm going to check for this linux interaction function which is going to check of course whether it's a linear system or
not this is i'm doing the try block now if i catch an error i want to be i want to handle it by simply printing the
error over here and in the event that uh there is no error then i will move on to the else statement and i will try uh
this particular block of my statement which is again that when i'm trying to read a particular file that does not
exist and it's very uh it's very important that you note that within the else block
i have another try and accept block and this is perfectly legal and is perfectly valid in our program we can do this so
think of it like this i'm first trying this if i have an error then i do this and i don't
execute this but if i don't have an error then i execute this whole statement which contains its own try and
accept block all right but regardless of whether i get an error here or not i will always execute this portion of my
statement or under the finally clause let's execute this as you can see of course the error is raised in this try
this try block so we move on to the exception and that is what is printed over here and after the exception is
done we move on to the finally we of course skip this else block because the exception was actually raised so after
that is done we move on to the finally block where we print this particular statement well that was it
for an introduction into exceptions in python i hope you learned something from this and um of course this is just the
beginning exceptions are something that you will be that you would probably encounter a lot especially when you're
beginning and it's something that you will learn to extensively work with and that will also help you improve in your
programming in this video we will be covering the topic of iterators now an iterator in python is an object that
contains a countable number of values or it's a larger object that contains a countable number of sub-objects an
iterator is an object that can be iterated upon and what that means is we can traverse from each value and we can
manipulate or perform certain functions or operations and tasks using each of the
sub objects or values within this larger collection called iterator now
when we're looking at it technically an iterator is an object which implements the iterator protocol in python which
consists of the methods eter and the method next so to begin with let's look at a simple iterator we're going to see
the example of a list where we're going to traverse through the objects of a list using the for loop
so we have objects one two three four and i'm going to print each of these values one by one as you can see here
similarly we can also do the same thing for another iterable known as the string where we can go character by character
again using the for loop as you can see here another example of an iterable in python is
the dictionary so let's say i have a dictionary where i have two values two key value pairs uh key x which contains
the value 1 and key y which corresponds to the value 2. now when i'm going to do a for loop through this by default i
will be traversing through the keys x and y as you can see over here and of course
the other types of weight troubles in python are like sets and tuples as well all right now let's look at um
what this iterating protocol is in python so first of all we take an iterable it's an object that contains uh
it's a collection of objects that contain sub-objects and when we use the eater function it creates an iterator
out of it so we can one by one we can traverse through each of the objects and we can
manipulate each of the objects that is contained in this and anytime we want to
move to the next object we use the next function and when we have finally completed all of the or we've
manipulated or traversed through each of the sub objects we encountered the stop iteration exception which tells us okay
there are no more objects to be manipulated or iterated upon so and as an example i
will create a list where i will store the values some simple values integers one two
three four one three four five okay um i'm going to create an iterator out of this where i will use the iter function
and i'm going to say this is let's say this is called my my editor okay
and i'm going to use iter function as i had mentioned and i'm going to pass my list in this
now if you see what is my iter it should say it should be a list iterator at a particular memory location
now let's use the next function to keep going through whatever is there in this
so of course the first object should be one as you can see now when i look at the next it should be
three then i should get four and now i should get five as i use the next uh successively now since i've reached the
last of my objects in this collection now the next time i use this next function i should get a stop
stop iteration exception that is raised as you can see here so this is the basic
iteration protocol in python now you might have uh already gone through the
for loop video and in that i have spoken in quite a bit of detail as to how a for loop performs this um this iterator
protocol and how it creates an iterative iterable object out of say a list or a
tuple and how we how it internally performs the next function and it um breaks out of the for loop once it
encounters the stop iteration exception so um for loops are like they're very very
similar to your standard iterator and they use pretty much the same protocol for its functioning now um let's do a
basic comparison of what is a a basic comparison between a generator and an
iterator in python so in generator we use a function we use like we define it
using the def keyword and we define it under one function to create a generator whereas in the case of iterators we use
two separate functions the iter function and the next function the generator makes use of the yield keyword whereas the python iterator does
not in generators we save the states of the local variables each time we use the yield keyword and we pause the loop
temporarily whereas in iterators we do not make use of any local variables all we need is an iterable like a list
to iterate upon we may use any number of yield statements in generators and we do not
use yield statements any educators generators are not memory efficient whereas iterators are very memory
efficient so this is like basic comparison between generators and iterators in this video we will be
covering the topic of modules in python now a module in python to put it simply is basically a python file that has
functions and classes written into it and is saved with the dot py extension to specify that it is indeed a python
file a python program can use one or more modules and modules can have one or more functions they basically help us
organize our code and instead of having one like one long python file we can have several files for several modules
now my modular programming is the process of breaking a large a large event or task into smaller and
more manageable subtasks and we call these sub tasks basically modules now individual modules can be grouped
together like building blocks to create a larger optic application there are several advantages to modulizing code in
a large application and we will be going through them right now so first of all there is simplicity because instead of
focusing on a big big problem a big task we can break down the problem into smaller smaller portions or modules now
maintainability of code is much better through modules because they are designed to create these sort of
boundaries or clear demarcations between different problem domains um there is usability
usability uh in the sense that once we create a module we can use it in different parts of the code or even
different different applications itself there is also scoping and what this means is modules typically define a
separate namespace and this helps us avoid collisions between identifiers in
different areas of a program functions modules and packages are basically all constructs in python that promote code
module modularization you might have already come across a gotten an intro into functions in this
video we will be going through modules in another video we will also cover the topic of packages to import a module we
use the import keyword and in this example what i'm going to show you is a simple function or a simple operation of
importing the os module this is short for operating system and as the name suggests we can perform
system tasks through the functions and methods that are part of this os module so simply executing the statement will
import this module onto our program for us to use now if we wanted to see all the functions that are present in a
module what we have to do is use the dir function so if we print the dir os
function it will print us basically a directory of all the functions that are present in the os module as you can see
here that like all of these are basically uh names to different functions that are part of the os module
finally moving on another function commonly used with modules is the get cwd function and what this does is it
will give us the current working uh directory that we are working upon right now so if i execute this it will tell me
what is the directory that i am currently working upon right now as you can see seed notebook dir slash 10. if
we wanted to see all the files in a particular directory what we can do is use the list dir function followed by
giving a path by default if we do not enter a path inside the parenthesis it will basically give us all the files in
the current working directory which in our case is temp so if i were to execute this it gives basically gives me a list
of all the files that are presently uh there in the directory that i am currently working upon now a basic step
is um creating a python module the simplest way to create a python module is basically creating a python script
with whatever functions and tasks that we want and methods that we want inside uh whatever module and saving it with a
dot py extension um so in in my example what i'm going to do is i have already
created a script in notepad and i've stored it with a dot py extension that contains these four functions add
subtract product and division um i have basically copied i basically use this code and
i've stored it in a dot py script and i'm going to be using this as my uh as
as a test module for this particular example now how do we import a module now once that i have created a script uh
in my example will be called mycalc.py and we've stated stored in our directory
to import the module all we have to do is use the import statement so if i had to import my calc all i have to do is
say import my underscore calc and now my calc has been imported
so we can use the import statement or if we want to import something particular from mycalc we can do from my calc
import uh now we can whatever like for example if we wanted the add uh the add
function we can basically just say only add or if we wanted add and subtract we can say add and subtract for example so
this is basically by using from we can say that we want something from something but only parts of it we don't
want everything we can also use from mycalc import and we can say asterix to
basically say uh import everything that exists in my calc right now so this is another way of
importing something from a module now to access contents in a module we have to use the dot operator and i will show you
how right now so what i'm going to do is in my example i'm going to import my calc as calc so now what this is this is
the original folder or the original module but i'm going to give it a shorthand name so that i can easily use
it in my code and i don't have to type out my underscore calc every time so now i'm going to import this as calc so
anytime i have to refer to a particular method or function inside this script or this module i will just use this uh this
placeholder this variable name so now i have two variables a and b and i'm storing 20 and 30 on them so my first
funk what i'm going to do is basically four operations i'm going to print the addition of a and b then the subtraction
multiplication and the division of these two numbers and each time to do this operation i am going to use the add
function that is present in the my calc module so to do that i have already imported my characters calc all i'm
going to do now is invoke these functions using the dot operator that we're already familiar with so i'm going
to say calc.add and then i'm going to pass these two arguments or these two variables to say that i want to add these two and similarly i'm going to do
it for subtraction multiplication and division as you can see these are the results of my tasks
now if i had to do a directory uh operation on the module calc it will basically give me a bunch of inbuilt or
dunder methods that are already a part of any python script by default such as
built-ins so if i execute this just to show you what happens when i use the dir function it will basically give me all
the functions that are part of this python script so these double underscores that you see are basically
uh denoting uh magic methods or dunder methods and these are like inbuilt methods as a part of the script and if
you see here add division prod and sub these are the methods that we have defined earlier on in our script
ourselves now to go slightly deeper or in more detail into what happens when we do a module search um let's let's
actually look at what happens so what happens is when for example we execute the statement import mycalc as calc as
we did over here so the first the steps that actually take place are the interpreter executes the above statement
and it searches for this python script in a list of directories assembled from these following sources that you see
here so it takes the directory from which the input script was run or the current directory if the interpreter is
being run interactively which is the case right now uh secondly it will list all the directories contained in the
python path environment that you set up uh that you can set up or you can change later on as well and this format for
python path is os dependent of course but it should mimic the path environment variable that we see in
windows systems then the other source or the other directories is basically an installation dependent list of
categories configured at the time python is installed now the resulting search path that is accessible in the python
variable system.path um this is basically obtained from a module named sys so if i imported the sys and edit
sys.path now these are all the directories that we are going to look for when we want to search for any
particular module so if i am doing uh import my kayak or import os it's not only going to look at the current
directory that i am working on it's also going to look at all of these directories that have been set up as
you could say directories or paths in the system.path in this video we will be
covering the topic of packages now what if we developed a very large application in python that
contains many different modules and we have so many different modules that have similar names and functionalities and
they're all kept in like or dumped in the same location that it becomes very difficult to track these modules what if
there was a way to organize and access these in a much simpler and more organized manner well packages allow us
to do just that packages are a hierarchical structuring of the module name space using dot notation and this
is the same dot notation that we use when we want to access methods or functions that are part of other classes
or modules so let's try to uh let's look at certain examples to understand what we mean so i have a directory called pkg
this can be basically treated as what we call a package now in our package we have two modules mod one dot py and mod
two dot p by and what we're going to store in mod 1 and mod 2 dot p y are the follows so i'm going to define a
function called foo and i'm going to print this particular statement mod 1 and then i'm going to basically say foo
and then i'm going to say in class 4 i'm going to have an empty pass command similarly i'm
going to define a function called bar in mod 2 dot py where i'm going to print this statement so basically mod 1 dot py
has a simple function where i'm going to print this statement and mod 2 dot py has a simple function then i'm going to
print this statement um and i'm going to store them in mod 1 and mod 2 dot py respectively and these two modules i'm
going to store in the directory pkg in my local folder now i've already done this so we can already get uh to working
with this now if i wanted to access these particular modules from the pkg folder i can simply use the import
command and use the dot notation so i can say pkg.mod1 so this will inward
this will import the mod1 module from pkg folder similarly i can do the same thing for
the mod 2 uh module from the pkg folder in the same line so now that it's been imported just simply execute this and
this imports whatever you needed now if we wanted to perform a function that was a part of
mod1 or py we can just extend the dot notation and use the function as over
here as you can see it performs this print command whatever it was supposed to do similarly i can invoke the
function that was part of the mod 2 module by extending the dot notation to it in
the same way now another way that i can invoke i can import a package is by directly
importing the package itself by using import pkg and uh not accessing any of
the specific modules within it now let's see what happens when we do this so just for this example what i'm going to do is
i'm going to restart the kernel so that the pkg modules that were already imported get
cleaned away so we see what happens when we execute this on its own now if you see i haven't imported this now let's
see if i can access my mod 1 and mod 2. now if you see here it's throwing me an error and this is
because using simply using the import command on a particular package only
imports um you could say the package namespace but it does not actually import any of the modules and files that
were part of this package so if i wanted mod 1 from this package i would have to actually say import pkg.mod1 directly
and i cannot simply say import pkg and python will not import everything that is part of a package on its own i have
to specify it myself specifically now i'm going to create and i'm going to i mean i'm going to show
you another type of importing from a package using the star operator so i have this package pkg once again now i'm
going to store um three i mean four different modules within this package
mod one one one dot p by mod two two two dot py and i've already done this so you don't need to bother about
seeing me doing it right now because i've already created these files and what i've done is within mod111.py i've
defined i've written this statement and i've stored it in the python script similarly i've created another python script
script called mod 222.py and i have basically written this in the code and
i've similarly done this for mod 333 dot py and i've done another for mod 4 dot py now once i have done this i've stored
these python scripts into my uh into my package or pkg
package so now what i'm going to do is i'm going to create i'm going to execute this command if you see this from pkg
dot mod 333 import start so once i execute this now i'm going to say print
directory and print directory basically will tell me all the functions that exist in my current directory if you see
here there's this bias function that was a part of mod 333 module now if i change
this and if i imported mod 111 and if i did the same thing you will see foo has now been
added as a part of this direction directory and these are all functions that were part of these different
modules where i am importing from and that is what the star function does what the star function will do is it will
basically tell python okay so the statement is sync from pkg.mod111 so it's saying that
okay look into this directory or this uh package and find this module and in this
module import everything that exists inside it up until this point so this is another
another way of basically importing files or functions from a particular package and a particular specific module
within that package so yeah this was a very brief video on packages in python the conclusion being that packages are
basically a an organized way of storing many different modules that we might
have created in a very large application and these modules can be accessed using
the familiar dot notation that we have used in other examples such as methods when we were working with classes and
objects in this video we will be taking an introduction into the concept of generators so python provides a
generator which is like a function where we can create our own iterator in
a generator function we use the yield statement instead of the return statement that we use for standard
functions so let's look at a simple generator first of all so out here i have defined
a generator called my generator where i'm doing uh like there are three uh
like three functions or three tasks that i'm doing uh first one is when i'm printing the
first item and i'm yielding a value 10 then i'm printing second item yielding 20 then i'm printing last item using 30.
so let's see how do we use this now since we know my generator is the function it uses the yield keyword
every time we use the next keyword we will keep getting what is next in this function so let's store
the generator in my gen
so now we have stored the iterator in this function variable called gen or gen now
let's see when we do next and we use gen what happens so the first
task is performed or the first iteration is performed where we get this the first yield command is done
all right let's see what happens when we do next again next gen
now as you can see we get second item and we get 20. let's do it for the next let's do it
once more since there is one more task there's one more iterable inside you can see this now a valid question is
what will happen if we do next gen again since there is nothing after this well let's see what happens
we should get an error as you can see stop iteration error this is another built-in
exception that happens when we have like reached the last
object of an iterable so we get a stop iteration error
so now a key difference between a generator and a function is that when we execute a
function the moment we hit the return statement in a function or when we execute a function like whatever
variables that were stored inside are lost and they are destroyed unless they were defined as global
and the function is completely done executing and we leave the function completely whereas when it comes to a
generator when we hit the yield function we don't actually completely leave this function so the first time the yield is
found we get 10 but the generator remembers its position inside this function
so the next time we use the next we actually move on to the next iterable and then we move on to the next iterable
so you can think of a generator as it sort of has memory if that makes sense
it's a way to like create iterables in python or create iterators in python
so to understand a what the difference between the yield command and the return commanders let's take the same function
all right and let's put a return over here after this particular
the second yield okay let's do the same thing we say gen is equal to
my generator and let's start uh yeah let's start
doing next gen and seeing what is there so the first deal will be standard first item 10
the next one is again is going to say second item and then 20 but now if you notice there was a return i put over
here so technically when i did the second next it's not only yielded 20 but it's also
executed this return function or this return statement so let's see what happens if i do next again
as you see i have gotten the stop iteration seemingly earlier than i did before and that's because i have used
the return function and return statement and what that's done is that um
if we've completely left this function so as to speak and there is nothing next so as to speak so we get
these top iteration and that's uh the difference between yield and return
now in the next example i'm going to show you how we use a generator function in place of the for loop or for a for
loop so let's take this whatever over here and i have defined a function called get sequence up to x
and what this will do is basically it will keep printing the printing numbers up until uh whatever we have
entered in place of x over here so if i said say sequence is equal to
that's uh copy this all right and say i want um i want
sequentially i want every number up until 10 but not including 10 of course because python starts with 0 right
so let's do this and now let's see so the first number will
yield zero and now if i did this again
it should give me one two and i can keep going
until i will stop at the value 9 as you can see here
so 8 9 now i should get the stop iteration error because that we have reached the
end of our iteration so this is a way of using generator functions for for loops
so another neat example where we're going to use a generator is
in the case of fibonacci numbers so let's use it let's uh see how we can generate a
fibonacci series using um generator so i've defined a fibonacci function called
fibonacci where i'm passing max so max is basically the max value that i want um
like up until where i want the sequence right so uh this is basically the code which will
give return me the subsequent values of my fibonacci sequence so
let's um pass this to fib and see i want all the fibonacci numbers
until 10 so and i will pass 10 over here let's see what happens when we do next
fib well it should start with zero then when we
do this again we get one then we do zero plus one it should be one
next number should be one plus one which is 2 then we should have 2 plus 1 3
and then 3 plus 2 5 then 3 plus 5 should be 8. now 8 plus 5 is 13 and since 13 is
greater than what we passed for our max value here now when we try this we should get the stop iteration error as
you can see in this video we will be learning about the concept of list comprehension
now list comprehension is it's a neat way of creating a new list based on
values that are already there in an existing list so you can think of it like
creating a new list using a much shorter and cleaner syntax compared to what you might traditionally
be thinking so let's go through some examples and through those examples we will see how
list comprehension makes creating these new this much simpler much easier for us
so in our first example we will be creating a new list which will contain fruits that contain
the letter a in their name so we already have a list of fruits over here as you can see
it has apple it has banana cherry kiwi and mango now we want to create a new list which has only the fruits that have
the letter a inside them so apple would be one of them banana would be one of them and mango would be one of them so
traditionally if you look at this piece of code this would do what we want to do but
this contains a few extra lines but yeah it does it does do what we want to do now what if there was
a way of doing the same thing by just writing one simple line of code and that exists as you can see here
so i take the same list now
this is where you need to follow so now my new list is equal to so i'm creating a list over here as you can see now
within this list you have this line this is what we call a list comprehension so as you can see it says each fruit
for each fruit in fruits if now it's checking for the letter or the
character a inside each fruit and what this each fruit is
that we're checking each object in this list one by one so first
in the first iteration each fruit will contain the string apple then in the next iteration it will contain banana
and in each each iteration we are going to check if it contains the character a and if it
does then we store that each fruit in the new list as you can see here
so if i execute this line you see my my result is the same i have my whatever i wanted and this was a much
cleaner way of writing or creating this new list let's look at some other examples now
so my next example what i'm going to do is i am going to iterate through a string so i have a string it can be
anything in this case i am using a string called human all right so i have a string called
human right now i want to store each character of this string into a list that we call h underscore letters
so if i use the for loop this is how we would do it if i execute this as you can see the list contains h and then u m a
and then n now what if i wanted to do the same thing but by using list comprehension
so what i would do is let's create a list over here let's underscore
letters and um so as we know let's com so a list
comprehension will uh it's it's a so you just basically need one line in this case it'll just be like this
now this is my string now let's see when i check what's in
edge letters let's see what is the output so as you can see i have the output as uh what i
needed so this is a much cleaner way let's go through some more examples now now we can do more list comprehensions
um we can even use so we have already seen uh one case where we checked for the
character a we've seen a case where we uh went through where we we did a sort
of a loop through a string we can also use this comprehensions in conditionals
so let's uh look at an example where we use the this comprehension with an if statement
so what if i wanted to store say the first 10 even numbers so this would so this is
an example that i'll be using so in my list i want to store the first 10 even numbers so this would
be a way to do it so i have in range 20 so what this is
going to do is x is going to take the value of 1 2 3 4 and so on until ninety
eight actually take it from zero one two three four until nineteen so when we do range twenty we're creating an iterate
in iterable where uh we're going to look through our iterate through the
value of zero to nineteen so if i if i do this and this what this
statement does is basically it checks if it's divisible by 2. so
if this is equal to equal to 0 that means we have an even number and if this condition is met if this
condition is met that means we store uh the x into our number list so let's see what happens when we execute this
it should contain uh 0 2 4 6 until 18 so this is the first and even numbers as you can see
so this is a neat way of using if statement we can also use an if else statement
so what if i i'm checking um each okay so i'm going to create another list
and in this list i'm going to basically see if um each of my uh num numbers are the even
or odd the first let's say 10 natural numbers so let's write this statement down
so i want it to be even in case
the i that i'm checking i being every number between so like say the first 10 natural numbers as
i said let's check if if it is divisible by 2.
well if it divides by 2 of course it's going to be even right else we say that it is odd
and then we check for i in say the first let's say the first 20
okay so now when we do this let me check oh we check what's in the list so as you
can see the list contains like even or even orders basically saying the number zero is even then the number 1 is odd
then number 2 is even and so on and so forth so this is a an example where we
used the list comprehension with fs statements so another neat thing that we can do
with the list comprehensions is that we can use it along with functions so let's look at
this function in this example we have a function called double x where we define this double x
this double function to take an input to take an argument x and what we return is the square of the argument so
let's use this in our lifts this comprehension so what we do over here is that we are
we're checking what we're doing is for every x within range 10 so we're taking the
value of 0 1 2 3 until 9 and we're passing it to this function double x
and we're going to get the square of them and we're going to store that in a in a list as you can see here let's call this
list uh x i just call this list uh it's called y so now let's see what's in y
when we check uh it should be 0 1 4 9 and so on so
wait this let's check again does this square no this is actually 2 times so let's make it square
as you can see so you can see 0 1 4 9
for the first 10 numbers 10 natural numbers now what i've shown you is obviously list
comprehension but we can also do set and dictionary comprehensions in fact set
comprehensions work exactly the same way as list comprehensions the only difference is the
set comprehension will make sure that there are no duplicates inside the set so you can't have like duplicate items
uh which you can in the case of list comprehensions so let's uh let's say let's take a look at an example so
here in this example what we're doing is we're going to check so we have this string that we're storing in the
variable text and the string is something like live finds away so
whatever this is now what we're going to do is we're going to uh iterate through this string uh character
by character and we're going to check if uh there are we're going to check for wobbles essentially so
uh we're going to see if the character a e i o or u is present in the string and
if it is we will pass it into our set now if you if you look you will find there are multiple i's right and there
are multiple a's as well so if we did this through a list comprehension each time that we
found find a vowel it would be added to our list but since this is a set and sets do not allow duplicates so you will
only have one copy or one particular object for each of the vowels so
of course now uh set comprehension is defined using curly braces so let's keep that in mind so now if i check what's in
this i will see a e i and u even though there are multiple a's or multiple e's
or i's and u's since this is a set we don't have duplicate copies of any copies of any of these
so this was just a small example for uh showing you set comprehensions similarly we can do the same thing uh this this
comprehension uh for dictionaries and they will call the discrete dictionary comprehensions the only thing that we
have to worry about when it comes to dictionary comprehensions is that we have to define a key when it comes to
this so let's let's look at an example in this what we're doing is
again dictionary comprehensions are also defined using curly braces just like sets except uh in this case
we will define a key and that separates it from a set comprehension so in this case what we're doing is that
i'm checking i'm going through the a list of numbers from 0 to 9 right this is what the range 10 function does
and what i'm going to do is i'm going to create a key which is going
to be like 0 1 2 3 and the value of each key would be its square as you can see
here i'm doing i times i or just to
make a little more clearer as you can see i'm doing i squared over here for every value from zero to nine
so what i should get is like a dictionary where the first key is zero
and the value of that key should be zero as well because zero square is zero then for one it will be 1
and then for 2 4 and then 3 9 4 16. so let's see what happens as you can see here
this is the the result that i wanted so just to summarize let's go through
some key points uh to remember when it comes to list comprehensions
so it's obviously an elegant way to define and create lists based on existing lists
it's more compact and faster than normal functions and loops but we should also keep in mind that we shouldn't write
like very complicated list comprehensions because the idea of a list comprehension is to
be user friendly and also it's important to note that every list comprehension
can be written in the form of a loop but uh every loop cannot be written in the form of a list comprehension and
that is a probably a very key point to remember in this video we will be learning about
the concept of regular expressions now a regular expression is simply a sequence of characters that defines a
search pattern for example if you see this example here you can see a symbol called the carrot followed by p
and then five periods then an n and a dollar sign and what this regex pattern does is it's
searching for a seven letter string that starts with p ends with n and has five characters in between
let's look at this example now this is a regex pattern that is looking for a five character string that starts
with a ends with s and has three characters in between now if we had to match this with this
string with these strings as in as i or test strings the first one would not
match because it's a three letter string and we're looking for a five character string the second one would match because it's
a five character string that ends with an s starts with an a and has three characters in between this will not
match because whatever pattern would do is it would find the first s and it would find that it the string
itself starts with an a and it would say okay there are only two characters between this first s and this a and it would assume that this
is actually just a four character string to actually identify two consecutive s's we would
have to do something special and what we would have to do is what we will see later on so again this is the same
example since this is case insensitive capital a uh is perfectly fine when we're searching for this and it will
also match this is this is obviously two words and it's not a five character string so this will not
be a match now the regex pattern or the regular expression module in python can be
imported using this statement import rd now once we've done this we can actually use the our regular
expression tools and methods to do uh pattern recognition character recognitions and to identify different
sequence of characters in our strings let's try to understand a bit more in
depth about regular expressions now so what you're seeing here is one variable called pattern which stores
something that looks like a regex and another variable that stores our test string called abyss
now what we're going to do is we're going to use the match method of this module re and we're going to check
whether this pattern um or whatever we are trying to search using this regex is in fact does it
match with our test string and what we're trying to look for is if you see here very similar to what i just showed
you a five character string that starts with a and ends with s so if you see our test string it indeed
is a match and when we use this uh this command we should get a perfect match
so we should be basically it should say that search is successful if i execute this and this is what it does
now if i change the test string to this now you will see that now this is no longer what we're looking for a five
character string with uh a and starting with a and ending with s and you will see that the search will be
unsuccessful as you can see here now let's try to understand what exactly do we mean by uh when we
use these different certain these special symbols like for example this carrot or this dollar symbol um these
are by the way known as meta characters and now we're going to look into all the or most of the different meta characters
that are used in regex so to put it simply meta characters are simply characters that are interpreted
in a special way by the regex search engine now here's a list of meta characters
let's go through them one by one now the square brackets square bracket simply specify the set of characters
that we wish to match so we want to match some combination of a b and c it can be
one a two a's three b's four c's we are not looking at a specific pattern we just want to know if a b and c exists in
any form in our string so if we used it on a the string a simply we would find
one match because the letter a is found here ac would match twice because we have a and c
present here in this string hey jude we will have no matches because a b and c none of them are found here and in this
weird string we will have actually one two three four and five matches so we would have
five matches for this uh this bigger string because we have five instances of a b or c
now let's use re.match to do to actually search for this and to see
if we have our particular whatever patterns that we're looking for now in this input string this is just some
example string i'm going to test this i'm going to match whether my pattern that
any of a b and c is it actually found in this so let's see what happens when i use re dot match for this
so this is the format uh the syntax is simply the regex pattern and then comma whatever test string that we have
so let's see what object gets created when we try to do this as you can see it's none even though you
might be wondering like i can see an a over here i can see a c over here re.match actually gives us the result
none now if i try to do it on this test string
which is slightly different instead of the film titanic was at least 1998 what i'm saying here is all film titanic was
at least in 1998 now let's see if the r match works or not
as you can see it actually does return when i execute this it returns us an object called id.match object with a
span01 the span01 is basically telling us that we have found a match between
the zeroth and the first character which is basically this character a which is what it has found and it's saying that
the match is indeed the character a uh from amongst these options so what this is basically telling us and
uh what this means actually is that the re.match method will only find matches
if they occur at the start of the string being searched once there is a space in in our bigger string it will not search
for whatever comes after it so what happened in the first instance was it was actually only searching for
matches in this particular word in my largest string and since it found no match it basically gave us the result
none which was not the case in the second example because it found a match immediately in the first letter a
now if we want to actually check the whole thing what we would be using is the re.search
as you can see here the re.search method will actually check the whole string and
it will return us the first instance where it finds a match now let's see this is the test string now and we're
searching again for our uh we're searching for a b and c any any of these
in our test string but we're going to use re.search and not match so now if you see it returns us when i execute
this it returns us a match object again but this time it's saying the span of nine and ten now the spine panel nine
and ten actually exists over here this is the ninth character and a itself is the tenth character over here so what
this basically is telling us that the tenth character is where we found a match which was the letter a which was the
first instance of either a or b or c in this whole string and this is basically
how re.search works it will not only search the beginning of the string but it will search the whole string and
return us the first instance or wherever we find now what if we wanted to find out all the instances wherever a b and c
were found and not just the first instance well in that case we would be using the method find all over here so
when we use find all it will actually return us each and every case where it found a b or c and uh you might not it
won't tell you the exact position but it will tell you like um so if i execute this you can see it gives us a a
list with a c a and a and what this basically means is it was looking for the characters a or b or c and it found
a first and hence this for the first item in the list and then it found a c and then it found two is successfully so
this is exact this is actually how find all works where it will actually find all the instances of our regex pattern
now that you've seen how the square brackets work and how the re dot search and re dot uh match and re.find all
methods work now we're going to go through all the other meta characters that we saw above so the period now
period matches any single character except the new line new line is basically slash n or a break now if you
look at this picture what it's going to do is um
this expression basically saying that uh do we have um two characters like sets
of two characters in our string so this is a single character string and obviously a single character string
is not a double character string and this expression this double dot is basically asking us do we have two
characters present in our string so if i had to match it with this a it will obviously be a no match because a
is one character if we checked it with ac it is a match because a and c are two characters a c and d will also give us
only one match because it will find a c and then it will leave d as a single character but when we check a c d and e
or this string in particular it will find two matches because it will consider a and c as one of the matches
and d and e as one of the matches so below is basically what we're doing basically the same thing we're just
using rd dot search for each of these different examples so if i if you see when i use find all
on acde and when i'm searching for a two character match you will see that it will return me ac and de as you can see
here and similarly for something like this it will return me again whatever like two character patterns it
finds successively so the next symbol the next meta character is the carrot symbol that you've seen earlier then the carrick
symbol is basically used to check if a string starts with a certain character so if you look at these two this picture
if you have two two expressions that we're going to check over here one is the one is checking if a
is the beginning of a string and the other one will check if a is the beginning of the string but is it
followed by b or not so when we check this what you can see is the first string will be a match
because it's the only the character a and it will match here as well because this string starts with a but it will
not match here because the string starts with b now if i look at this particular expression you can see that
um this is going to search for if the string starts with a and is followed by a b so it will match in this case
because it does start with a and is followed by a b but it will not match in this case even though it starts with an a because it's not followed by a b
so out here is basically us using the ie.search to basically find these patterns
the next symbol that we will come across is the dollar symbol so the dollar symbol that you can see here is used to
check if a string ends with a certain character and we've already seen how this is used in one of the uh one of the
earlier examples so this is going to check basically if so this expression will check if the
string ends with a so this this string is basically the character a so it will match this also ends with a so it will
match and this particular string does not end with a so it will not match and we are going to do that using the re dot
search over here so as you can see it finds a match in the first character itself here in
this case it finds a match in the last character but in cab there is no match so it returns us a none another example
is of the meta characters is star so this is the symbol for star and uh this what
the star basically is used is for checking if there are zero or more occurrences of the pattern to the left
of it so now if you see here what this will check for is is there any form of
m and a that occurs before n and it's very important to note that
the n has to follow the a in this case so let's look at these examples and what will happen so if i checked it with m
and n this is actually a match because n is followed by zero occurrences of m
and a which is if it might seem a little weird but it is technically the truth because
uh the the star symbol checks for not doesn't check for the existence it just
checks for if n occurs it must occur after an a
or the a should not be there itself in this particular string so as you can see here the n occurs after an m and it's
fine because there is no a now you will see when it will not work so m a and n is obviously fine m a
m triple a n is also fine because n follows an a and there's an m here this however main will not match now why
even though we have m and a and we have an n you see the n is immediately followed by an i
is n follows an i immediately or the n is preceded by an i immediately and this
is a no match because our the strict condition in the search is that n
must uh proceed in a if the a exists again in women it will match because n
follows an a over here we're just going to use the id dot search for these examples that we saw over here in terms
of code using the re dot search as you can see here finally we have the next meta character which is the plus
symbol yes so the plus symbol matches one or more occurrences of the pattern
left to it now this is very similar to what we saw earlier in terms of the star
except now in the plus the key difference is we're looking for one or more occurrences instead of
zero or more occurrences that we were looking for in the case of star so when we say one or more occurrences
now we need what is there to the left of the plus sign a zero uh no occurrence of it
will not be allowed or will not cause a match so let's see now what we're going to do here we're going to use the same
expression except we're going to replace the star with the plus sign so now what we're going to say is okay we need m and
a at least one occurrence followed by an n the all of these conditions have to be met so again if you took the first
example m and n this time it will be a no match because there is no occurrence of an a over here for preceding the n so
it's a no match m a and n is a match because well this is per this is perfectly fine m triple a and n is also
perfectly fine but if you look at m a i and n much like earlier the n is uh preceded by an i and not an a so
there is no match and again women is perfectly fine and we basically execute the same thing through the search
function in this piece of code the next meta character is the question mark the question mark symbol matches 0 or 1
occurrences of the pattern to the left of it so let's see what this does so now
we saw the star the star which was zero or more occurrences of the pattern to the left of it we saw the plus which is one or
more occurrences of the pattern to the left of it now we will see the question mark which is zero or one only zero or
only one and not zero or more or one or more which was the previous cases only zero and one or one occurrences of the
pattern to the left of it again we're going to see the same expression except we're going to replace the meta character with the question mark so now
let's see what what happens when we match so if you see here m and n is a match because there is zero occurrence
of a and one occurrence of m preceding n so this is fine this is also fine because there is one a
occurrence of a and m and then it is followed by an n this will not be fine because now we
have three occurrences of a which is followed by an n we're only looking for zero or one
this again main will be a no match for the same reasons that we have already gone through and women will be a match
again for the same reasons and we'll read through the same things using the search function in this piece of code the next meta character is the
braces character now the braces character is interesting because what we're going to do is we're going to see
if there are so uh that is the typical syntax for the braces is n a brace followed by some
integer n comma integer m and then closed braces so what this means is we're looking for at least n and at most
m repetitions of the pattern left of the braces let's see through an example
if you see this expression we're looking for at least two and at most three occurrences of this
the character a in our test strings so let's see what happens in the first case we have no matches in this case because
this part of the string contains only one a and even this part of the string only contains one a we're looking for at
least two and at most three this part will contain one match the second the second example because the
second part of the string actually contains two a's for one uh two uh repetitions of
ace con consecutively but this uh in the end and in the third example you can see both the strings
actually contain matches so we get two matches because as you can see here there's two a's here followed by three
a's here now when we look at this particular string let's look at what happens now so what we're going to find is that this
thing is perfectly fine so we have two occurrences of a but now we have four occurrences of a but what the search
engine is going to recognize is this first three is and is going to see okay so there are three occurrences of a and
i already have a match it's not going to consider this fourth a and the search it will just look at the first three and say okay there are
three a's and my my match is fine so again there are two matches in this case again we're going to use the search
function initially and you can see each in each of the cases there is a match except for the first case which is this
case now let's see the find all option and see what happens when we do the same thing using find all
so when we use find all it basically gives us each of the instances where the match has occurred in each of these lists
now let's try to use a slightly more complicated example where we combine different let's say different meta
characters and we create a a more sophisticated expression that we want to search in our test strings so if you
look at this expression what we're looking for is 0-9 now a dash symbol is
valid in python using regex because what this basically tells it is that it's looking for either 0 1 2 three four so
on until nine basically any of the digits you're looking for any of the digits from zero to nine
and we're going to uh check if at least two and at most four occurrences of digits if they are there or not in our
particular code so let's see what are the matches that happens when we use it on test strings so if you use it on this
string you can see it will find one match this basically this particular part of the string where it says one two
three so this is uh three occurrences of digits so it's fine now when we look at this whole string 12
and whatever this is you will see this will not find a match here this obviously will not because these are characters but if you look at
over this part it will find matches in terms of the first four and then seven
and three the next two one and two again there are no matches because there's only single occurrences of digits we're looking for it at at
least two and at most four so if i use the find all you will see like what all it will
return so for the first test string what is going to return me is it's going to
return me 1 2 and 3 as you can see here but now if you look at this test string it's going to return me 12 it's going to
return me 3 4 5 and 6 is going to return me 3 4 1 and two but not seven because we're looking for at least two and then
it's going to return me four five six and seven followed by eight and eight as you can see in this list over here
now if we use curly braces with only one digit it's basically telling the search engine that we want exactly so many
repetitions of the preceding uh whatever kind of expression that we have so when we do this example for uh for
example we're basically saying that we want x followed by a dash and the dash has to
occur at least three times in our particular expression and then it should be followed by an x again which
will not match in this case because there are only two dashes and it will match in this case because there are exactly three dashes and it will again
not not match in this case because there are four dashes as you can see here none followed by an
object match followed by none next we move on to the alternation
um the alternation meta character and as the word suggests is basically looking for some alternate
form of a and b so a should be followed by a b and uh basically this pattern has to
keep going on so in the first string over here this pattern will not match in the second string over here
we will have a match because we at least find an a even though there is no b but this is to consider match because we did
find an a at least over here we'll have uh three matches because we have a followed by a b followed by an a again
so uh if we did a reg expression for this we would basically find these many matches for each of these examples
the next meta character is the group now a parenthesis is basically used to group sub patterns so let's look at an example
to understand what we mean now if you look at this complicated expression what this means is that i want some form of x
and z the x and z have to occur together but before that what i want is some form
of a following b following c some sort of alternation between a b and c
so this part as you can see here is kept in a parenthesis because i want this whole condition to basically occur
before i find in x and z so let's look at what happens here in the first case we don't have a match
because uh the this basically this parenthesis condition is not being met the x and z
is preceded by a space or basically the a and b is preceded is followed by a space so if the space
didn't occur we would actually find a match as you can see in the next example here you can see a and b occur basically
this uh initial condition is met followed by x and z so there is a one match so it's fine for us now if you
look at this slightly more a trickier one what you can see is we have two
matches in this case first in a followed by x and z and then we have c a and b now
this is perfectly fine because we we are looking for a b followed by an x and z we're looking for
either of these things we're looking for some form of alternation of these things followed by an x and z and we can get
that over here we get b followed by an x and z so you'll get two matches in this case now let's go through the concept of
grouping constructs now that you've seen many meta characters you've seen how parenthesis works let's look at grouping constructs so grouping constructs break
up a regex in python into sub expressions or groups and this serves two purposes one is a grouping part
which basically says that a group represents a single syntactic entity and any additional meta characters apply to
the entire group as a unit and then there is a capturing part which basically tells us that some grouping
constructs also capture the portion of the search string that matches the sub expression in the group you can retrieve
captured matches later through several different mechanisms so let's look at basically what we mean by this example
over here so if you see this this expression has a plus sign so we're looking for
as you know a plus looks for one or more occurrence so this will basically check for one or more occurrence of the
character r only because there's no parenthesis as in this example so this plus is
next to an r and it's going to check for basically whether one or more currents of r
happens preceding b and a but if we actually put b a and r in a parent thesis followed by
plus it will actually check for the entire string bar and it will check one or more occurrences of bar together so
if you look at these two examples when we use this uh on these examples you can see that these are fine like these
matches are fine but if i used this parenthesis then these would be the
acceptable matches and like ba triple r would not be a match if i use parenthesis
as you can see here so this is how grouping constructs work and how parenthesis work
so let's look at some other examples so what this will do is f o o has to be
optionally followed by bar and bar must exist together
and this is because we have a question mark here this question mark symbol tells us
that there should be zero or one occurrences similarly this particular complicated expression is checking for one or more
occurrences of whatever we saw earlier basically this whole thing is followed by a plus so we're looking
for this whole sequence for one or more occurrences of it cow is simply just cow
we're looking for this pattern and this is going to check for zero or one occurrence of c or w
because of the existence of the question mark for uh preceded by the parenthesis
in this video we're going to continue our discussion on regular expressions now that you know the basics of regular
expressions let's continue our discussion with special sequences now in an earlier
video on strings you might have encountered what is an escape sequence and how we use the backslash character
to generate these escape sequences and an escape sequence is basically if you remember
something that we use to either give certain special meaning to characters that are otherwise ordinary
or it is used to remove the special meaning that are inherently present in certain characters that we call meta
characters so let's look at what special sequences are in relation to regular
expressions so the first one we're going to look at is the backslash capital a which is used
to match if specified characters are at the present are present at the start of a string so out here if you can see we
are checking if the word d is present in these two strings so we
would get a match in the first case over here because this starts with the word the but in the second case we won't get
a match and this is how we're going to check it for the same thing using the find all function
so if you see in the first case it gives us it returns us an object because we do
find d in the beginning of the string in the second case we get us empties list because this string does not start with
the word t now the next one that we'll look at is backslash b small b now this is used to match if
specified characters at the beginning or at the end of a word so when you use backslash small b
and then you follow it up with whatever you're looking for it would look for the that particular those particular
characters or that pattern if it exists in the beginning of a word in a string
so if you look at the first example it starts with f double o and in the second example you see this portion of the
string or this word is actually also starting with f double o so it will also match
however in this string which is very similar to the second one we don't have a space between a and f
and it's basically one word so this does not start with f double o but it actually starts with afo and it won't
match as you can see here now similarly if we wanted to check if something exists in the back of a string
at the end of a string we type what we want to search for first and then we follow it with a backslash small b and
then if you see here it will match in this first case it will match in the second case because this part of the
string ends with f double o but it will not match in this case because well we removed the space so now this whole
thing becomes a the string that we're looking for and it does not end with fw anymore and this is
basically us just checking in through the find all function now the next sk the next special
sequence that we will be looking at is the slash capital b which is basically the opposite of what we just saw this
matches only if the specified characters are not at the beginning or the end of a word so if you see here this is checking
if f double o is not at the beginning of these strings so in this case there will be a no match in this case also it will
be a no match in this third case there will be a match similarly if we wanted to see if something does not end with a
particular string we would type that whatever pattern we're looking for followed by a backslash capital b
and then we can use the find all function to generate us lists wherever we find such objects
find such matches in our particular test strings like we have done over here so the next one that we're going to look at
is the backslash small d and this matches any decimal digit which is equivalent to doing a square brackets
0-9 as you've seen you must have seen earlier so if we did a square bracket 0-9 and if we did a search or a find all
or a match it would look for any of the digits between 0 and 9. so a similar thing can be done using a special
sequence backslash small d so as you can see there will be three matches in this case because one two and three digits
exist whereas in this case uh for the word python there will be no matches so these are certain examples where we
are doing the same thing using the backslash d now we have another one which is the backslash capital d and this is just
basically the opposite it matches for any non-decimal digits it's also equivalent to typing a caret inside
square brackets with 0-9 which if you remember from the previous video is basically asking us to check for
anything that is not the digit zero to nine so this is basically we're going to check
in these two strings if there is no digits and no non-decimal digits so if you see here we will we will find three
matches a b and the uh double double inverted commas and in the second string
we will find no matches because this is fully just digits next we have backslash
small s now this matches where a string contains any white space character so this is equal to doing a
check for all of these so this is like backslash small t is a check for tab
space backslash small n is a check for break line and then backslash r black slash f backslash b uh are their own uh
checks for uh different sorts of white space characters that you can see by just looking it up honestly but yeah so
if you simply do a backslash s it would actually be the equivalent of searching for any of these
white space white space characters that we generate so if you see here when we do a
backslash s on this string you can see that there is one space over here so it
will match it will give us one match because there is one white space which is just the normal space here and in the
second example there is no match because there is no white space here similarly slash capital s now as you
might have noticed is basically checking for a string which does not matches in a string wherever there is no white space
characters so it's basically the same as doing carrot slash t slash n slash r slash f slash v in a square brackets so
this is basically a simpler way of doing uh the same thing using square brackets and a carrot symbol so if you see this
expression backslash capital s now we're looking at uh a space b so over here if
you see it will match for all the non spaces so it's going to match for a and b so we're going to get two matches here
whereas an empty string does not contain well it does not contain any non-white space character since an empty string is
basically a white space character on its own so this would be this will give us a no match so the next special sequence
that we're going to look at is the backslash small w this matches any alphanumeric character
which is the equivalent of doing a to z in small and then capital a to z and zero to nine for and also an underscore
check in square brackets it's important to note that the underscore is considered an alpha minor
character hence why we include it over here but yeah this is this uh backslash w uh small w which basically checks for
uh any alphanumeric character and matches it in a string so if you see in this first case um it will find three
matches at one two and also at the letter c these others are not alphanumeric characters uh whereas in
this string none of these are alphanumeric characters so we will get no match again much like the other examples there is a capital there's a
backslash capital w which will check for any non-alphanumeric character and it's the equivalent of doing whatever we did
before in uh in the square brackets just with a preceded by a carrot sign so if you see
here we have the string where we have a bunch of characters well yeah only one of them this uh percentage symbol is a
non-alphanumeric character so we will get one match over here but in this case in the string python we will get no
matches because they are all alphanumeric characters which is doing the same thing here with a bunch of different examples using the find all
function now the backslash capital z matches if the specified characters are at the end of a string now don't confuse
this with backslash small b plus the backslash small b checks for a string and it checks each
and every word in the string individually and checks if so if any of the words ends with a particular thing
or or starts with a particular thing but it checks each word individually but in this case the backslash capital z will
check the string only and not each word so if you see the difference here in an um when you use capital backslash
capital z um it will match in this first example but it won't match for the next two but if you used a
backslash small b over here it would actually match not only the first example here but it will also match in
the second example because it would check this word individually and it will find out that yeah there is a match here as well so it would actually match in
the second example as well in this video we will be covering the topic of closures now before we
understand what a closure is we have to understand what is a nested function and non-local variables now a function which
is inside another function is known as a nested function nested functions are able to access
variables of the enclosing scope so if i define this function called outer function where i pass some
argument called text and i store that in a variable called text again and if i create a function within this call in a
function and i want to print whatever the variable is in text when i execute this
it will be able to access this variable because it's within the enclosing scope so if i set outer function hey this gets
stored in the variable text and then the inner function will print that variable which is basically the string here
as you can see here now inner function can easily be
accessed inside the outer function body but not outside of its body so here our inner function is treated as a nested
function which uses text this this variable text as the non-local variable now a closure is a function
object that remembers values in enclosing scopes even if they are not present in memory it is a record that
stores a function together with an environment it's a mapping basically that associates each free variable of
the function which are basically variables that are used locally but are defined in an enclosing scope
with the value or reference to which the name was bound when the closure was created a closure which is uh which
unlike a plane function allows the function to access those captured variables through the closures copies of
their values or references even when the function is invoked outside the scope so let's look at an example to emphasize on
what what was just said so again i've created i've defined this function out a function where i'm doing the same thing
now i've defined the same inner function where i'm going to print the same thing now it's very important that when i
return over here what i'm going to return is inner function but it's not going to be a function call this is
important to create a closure so we return in our function but with without
using the call as we do over here and what this return will do is basically to create the enclosure sorry
the closure um where the inner function will remember the values of the variables
stored in the enclosing scope so now i'm going to store this outer function in an object called my in
a variable called my function now when i call this my function um you can see there there'll be two things that are
happening here so once i've defined this and i've executed this what happens out here is this function
has already executed and then i'm storing edit to this but because i've done return inner
function without parent thesis i've created a closure basically and this closure allows the inner function to
remember the values that were stored in text at any point and at every point even after the
execution of this one time so when i execute this again for the second time over here it will remember the value
that was stored in the variable text which is hey which was which was given over here that's why you see when i execute it for
the second time over here the first time being in this line when i'm storing it in my function when i execute in the
second time again it would give me the result of hey as you can see the closures have to
invoke functions outside the scope the function error function has a scope only inside the outer function but with the user closures we can extend its scope to
invoke a function outside the scope so now let's look at this code so this code
don't worry about what's going on here just know that what we are doing here is we have two functions which we defined
called add x and y which will return x plus y and the subtract function which will subtract x and y
so now we're going to execute these once we're going to execute the add over here and add logger and we're going to
execute the subtract function and we're going to store it in sub logger so technically we have already executed these two
functions but now uh since i've created an x an enclosure
basically uh if you see here this is the enclosure that i have created now what happens is
when i access this function from outside its initial scope which is basically over
here this was the initial scope when i access it outside you will see that it is it still has access to these
variables x and y so if you see here i i first of all i've allowed this uh this
the enclosing function to accept uh arguments of any numbers so uh i can pass xy i can pass x y z also
but if you see here i i only have a thing for x and y so
when i want to access any value of x and y even after the execution of this code initially
i have access to these variables x and y and that is because i've created a closure out of
that so if you see if i do add logger 3 and 3 over here i'm able to get the result 6. if i do add logger 4 and 5 i'm
able to get the result 9. similarly for subtraction logger 10 and 5 i will get 5 here and 20 and 10 i'll get 10 here and
i can keep doing this i can keep saying add logger in fact if i say 4 and 7 so if i executed this
and now i'm going to say let's say for example add logger if i set four and seven here
so this still has access to my variables x and y because i've created the closure and it should give me 11. similarly if i
did sub logger say 30 and 15 it should give me 15 because 30 minus 15. so let's
say 30 minus 16 right so it should give me 14 because again i have created the closure and it has access to these
variables already in this video we will be learning about the concept of lambda functions now a lambda function in
python is an anonymous function without a name we usually use lambda functions whenever
we want to create a a function type object for for a short period of time a lambda function is
defined using the lambda keyword like a normal function is defined using the def
keyword we define a lambda function using the lambda keyword also the lambda function can take any number of
arguments but it can only accept one expression as a part of it so think of a lambda function like um a sort of a a
temporary function object that you create whenever you want to perform a particular task or object but you don't
want to give it a name or you don't want to define a full a full-blown function and give it a name letter
so over here i'm going to give you an example of a lambda function let's say that this lambda function takes in
let's call it x and so you define the function let's call it x let's call it a lambda function using
this keyword now we won't say two parameters right we're saying say a and b or two
arguments a and b so we're gonna pass two arguments a and b whenever we call use this function and we're gonna
perform some sort of an expression now let's write down a simple arithmetic expression for this once you've defined
your arguments just use the colon now over here we have our expression so let's call it a plus b
so now we've created a lambda function called x where we will pass two arguments and the
result will be the expression a plus b a plus a and b being the arguments we pass
so now let's print the result of let's say we pass one and three so now
we should get the result four right because a plus b is equal to four so we've passed a as one b is three now
let's execute this as you can see the result is four similarly you can pass any number of arguments so you want to
call some function x may say lambda function maybe say
a b and c this time and we want to do the product of these three arguments
so now when we do uh when we check the result let's say we're doing the product of two four and six
so this should be 48 and when you execute this
you get 48 as you can see here so these are two simple examples of a lambda function
now i could have done this in a different way where i could have defined some function x
and over here i defined that it takes in three parameters and then you can define
some say return the function basically returns you a product b product c but
many a times you don't need to define a full function called x you don't you don't want to
assign some function with this name you just want to create a temporary or a
short time anonymous function with some name just to perform a simple expression and in that case we can use lambda
functions uh that's an example by the way you can use lambda functions in multiple places so let's uh move on now
now for the sake of this video what i'm going to do is i'm going to show you how
the sorted function works and we're going to learn how the lambda function uses this sorted function how they work
together so this will give you a clearer understanding of how we use the lambda function in our code so to start off
sorted function returns a sorted list from the items in an interval so you can have a bunch of for example numbers and
the sorted function by default will give you will return you the list of numbers in
an ascending order of course you can also um using a parameter called reverse you can you can you can return a list of
numbers in the descending order um you can also do this for strings uh i mean characters so if you give it a bunch of
characters say a e f g in the in the alphabet it
will give you if you use a sorted function it will give you the characters it will return it in an ascending or
descending order depending on the parameter you give so basically this uh the sorted function the syntax is uh you
use the keyword sorted then you pass the iterable which is basically some some list or some
tuple then you give it a key so this key sometimes we don't need to give by default if the iterable is does not
contain um multiple uh multiple items per object for like if it's not a tuple of multiple
objects um if it's not a list of tuples for example you don't need to give it a key if it's a simple list of numbers you
don't necessarily need to give a key if you want to sort it but yeah a key is basically the parameter which we use to
tell the sorted function that we want to sort based on something which is going to be the key in this case finally the
third parameter is reverse which basically just tells us that if you want to sort in the default ascending order
or if we say reverse true then we will sort in the descending order now let's look at some examples so i have this
list over here and i'm going to print this list
so this list is obviously a bunch of vowels e a u o i and this is not in the
ascending order of the the alphabet right like you we know it as a e i o u if i print the sorted form
of this list it should give me a e i o u a list with a e i o in the ascending order
sorry yeah so now as you can see um it's given me this list as you can
see here similarly if um i gave it a string a string as you know is an
iterable it's a collection of characters so if i use a sorted function on this interestingly it will give me a list of
these um individual characters like p y d h o and n
but in the order that we want it to be in which is the ascending order of course
so if i print this you can see it returns me the list with each character in the order that we wanted it to be in
now you might notice why does p come before h that's because this is in uppercase so what this does is first it
sorts all the uppercase characters since there's only one so it just places in
the first object of this list and then it sorts all the lowercase characters that you
see here so yeah moving on now now what if we wanted to say sort this in descending order so
we have this list and now we want to sort this in a descending order so in
that case we have to give the parameter reverse and we have to assign the value true
so once we do this now when we execute this you can see we have the return as
the same list but in the opposite order so that's how the reverse parameter works now let's uh try to understand how
we use the key function or the key parameter in the sorted function now of course if you if we want to sort
something based on some key that we want to define we use the key parameter so let's take
an example now so in this example what we have done is i've defined this function
called take second so what this does is it it simply it takes the second element of a list of
tuples so what is this list of tuples well this random you can see this random this is a list of tuples so this is one
tuple this is the next tuple and what i'm going to do is in this example i'm going to create a key out of every
second element in each tuple so i'm going to create a key out of 20 40 10 and 13 and based on
these in an ascending order i will sort this whole list so my what my result
should be is that since the smallest of the uh every second object in these
tuples is 10 so this will be my first object in the my sorted list then it should be the one with 13 because this
is the next highest number so then this will be the next object similarly this will be the next object then this will
be the whole next object so you see i'm using every second element of the tuple as my key and for that to create a key
basically um i'm creating this function which will basically return every um
it will iterate through all of these and return each of the second elements so
let's actually uh let's actually do this now so what i have here is
i am going to create a sorted list which is going to use a sorted function on this iterable which is a bunch which is
a list of tuples it's called random now my key is going to be take second so
this sorted function is actually very dynamic in the sense um i don't i don't exactly have to create a list directly
each of these objects present in the tuples i just have to define if i can even pass a function
in the parameter for key and it will apply this function on the interval that
we pass over here which is random namely and it will use this function to generate keys uh generate a key out of
each second element and based on that it will do the sorted it will perform the sorted function so now
if i check what's my sorted list
you will see that as i had mentioned now it's using
the second object so the second uh each each second object of the tuple as the key so since 10 is the smallest this
whole object is the first object then 13 so we have this object here and then so
on and so forth so this is how we have used a key to do the sorting function a key that we've defined on our on our own
now similarly we can use multiple keys as well so just to quickly go over through this we have this
some some list where a bunch of names a bunch of tuples you can see right tuples
with three objects each within it each first one is always a string denoting
someone's name some student's name um the second is the marks out of hundred
and the third is their age so what we have here is what we want to do
is we want to sort this these tuples in the order of first marks and in case
the marks are clashing or they are the same basically we will sort by the age so what we want
to do is we want to first sort by these marks as you can see here but in case they clash for example like say this 75
and 75 they're the same marks in that case we want to sort it by the age which is 12 and 20 which is different so in
this case we're going to use two keys one for the first key will be given the highest priority and then if there is a
clash then we use the second key so how do we do this now let's define some function like uh
how we defined this take second function here this will be our function that we will pass to the key this function
basically what it does is it gives us who has the highest marks now since we are creating and since the key works in
an ascending order so um the smallest object in a key is the first object that
gets returned right so what we're going to do is we're going to return the error which is basically the difference between um 100 which is the total marks
and the marks that student gets so this is how we obtain a ascending order in our
list which is what we which which basically is what we want because we want um the highest marks to be first
so we do 100 minus item one item one is basically the first object or whatever iterable we pass in this case it would
be the the first objects of each tuple which is the marks secondly we bond age
age is the item 2 which is yeah each second object of each tuple now
what we return in this function is uh like this is going to be our key now a
list of errors and the list of age error being the marks error the difference between 100 and the marks you obtain so
now what it's going to do is it's going to take the marks as the first key and the age as the second key when we pass
this to a sorting function so if you skip this you don't have to look at this but if you look at this now
we have the sorted list which is going to be the result of the sorted function on top of what we pass which is the
participant list now we're going to use the key we're going to use the key as the sorter function so we're going to
use this order function as a key and when we print if you see
we get let me just execute all of this
so if you see here in this section what you can see is we have the highest marks first then the
second and the third but if you see here there's a clash this guy and this guy have the same mark 75. so now what we
want to do is the guy who at the younger age should be in the first in the object so that is how this has happened because
we've passed two keys error and the age so when the clash in error key happened we went to the h key and then we did
ascending order on that and then finally the rest of the objects that you can see here so now that we have seen how the
sorted function works now let's look at how the lambda function works using this sorted function which was the main goal
of this video right so let's see so it now some of you might have figured out where this lambda function will be
used right so whenever we were using the key in the sorted function we had to define a
function and then we would pass that function as the key so as some of you may have figured this out
what we're going to do using the lambda function is we're going to skip that process of defining a function with a
new name and all that and we're going to pass a lambda function or going to use a lambda function
as the key so let's see how we do it so initially what we've done is we've created this list this list is a list of
dictionaries that you can see so this first object is a dictionary second object to the dictionary each dictionary
contains two keys um the name and the age and the values are something like nandini the values for age is like 20 20
and 19 so we have three dictionaries in a list so what we're going to do
is we want to print what we what we want to do with this we want to print
the these objects or these dictionaries in an ascending order of age so we want
obviously we want this to be first and then this and this because 19 is smaller
than 20. so let's see how we do this so if you go here
what we're going to do is we're going to print the sorted the sorted function or the uh the result of the sorted function
being applied on this list so this is our iterable now if you see here in the
key the key parameter we don't we don't predefine a function and pass it over
here instead we use the lambda and this lambda function is defined in such a way
so we say lambda it will take one argument i and then it will return basically the
age index for some i and this i is we're going to presume an i to be some sort of an
iterable which has an index called age and which is uh which is the case in our case right we have a bunch of
dictionaries where there is a key in each of these dictionaries called age so we're going to use that and now you're
going to ask like what is i well when we use the lambda function in the sorted function this i will basically be each
object that we get when we iterate upon this list so we're going to iterate first on this so it's going to take this
dictionary and it's going to search for the age then it's going to take this it's going to search for the age then it's going to take this and it's going
to search for the age and each of the time it will pull out what is the value for each of these age keywords or these
age indexes or h keys and out of these objects so 20 20 and 19 or these values
we're going to create a key with which we're going to sort each object in this whole list okay so this is how the
lambda function will work here so let's do it so as you can see our sorted list now contains this object
first because a19 is smallest h and then this and this now you might see that
there are two 20s so how do we control which one comes first well by default it
will um that it will just uh give us the result in the way we passed it in the original
list so since nandini came before manjit in the result also nandini will come before manjeet but what if we wanted to
sort it even more what if we want to sort it in such a way that first we go by age and the second key will tell us
that if there is a clash in ages we have to go alphabetically by the name so in this case we will create a second key
and how we do that well if you go to this step over here what we're doing is we're doing the same sorted function but now
the lambda will again take one parameter which is i which is going to be each itera which which is going to be each
object in this uh iterable list and we're going to take two keys so the first key will be the h key
and the second key will be the name so it will first sort on age and then on name so now if you see um the result
should be that manjit will come before nandini even though the ages are 20 because m comes before n in the alphabet
as you can see this is the result now if we wanted to do the same thing but uh in a descending order all we have
to do is after this key parameter we have to give another parameter called reverse
and we have to give it true so if we did this now you see this this uh or if we do it on this one
to be more clear now if i execute this basically this
whole uh whatever result we get will be backwards now
oh wait i did not enter it in the sorted function so this should come within the sorted
function over here
so now if we execute this you will see nandhani comes first manjit comes second and then
nickel comes third because we've done the reverse i will use the reverse keyword as true reverse
parameter is true in this video we will be covering the topics of map filter and reduce functions in python now python
provides several functions that enable functional approach to programming and since functional programming is all
about expressions some of these expression oriented functions of python are lambda functions list comprehensions map
filter map filter and reduce now we've already covered the topic of lambda and list comprehensions
now let's cover the topics of map filter and reduce so to start off let's look at the map function the map function takes in two
attributes a function and a sequence um a function is basically some defined some user defined function
or any function a sequence is basically an iterable object like a list or a tuple for
example or a bunch of lists and tuples as well so let's look at an example so
one of the most common operations that we do with something like a list is doing an operation on each of the
elements in the list and then outputting a new list with the the values as whatever we have
modified to the original items of the uh list so we do what if we did the square of
all of these items in this list and we you want to create a list based on that so we can basically iterate through it
and we can do a square function and then append those values to a new list called squared and when we do this
for example over here you can see when we print squared
we should get the list of whatever square values we have for the original list but this is uh
slightly a bit tedious and what if we had a method that or a what if we had a technique
wherein we could basically pass a function that we have
that we want to do and a sequence on which we want to apply this and we pass it to a function and this function
basically takes care of applying whatever operations we want to do on each element of a sequence so as
this is where the map function comes in use so let's look at how we use the map function over here
so if you look at this i've defined a square function so the square function basically returns uh
takes an argument x and it returns the square of it and i have a map function which takes the square
function as one of the arguments and uh the i the list or an iterable as the
second argument so this map function creates a map object if you see here so let's just
do it one by one so i'm creating my list and i'm going to create my function called square
and i'm going to send this to the map function so i'm sending this
the first argument as the function that i want to do and the second argument as the list that i want to apply it on now
let's list out all the items that are in this map object if you see it creates me a list with
basically the squared items and this is exactly what we needed and another way of doing the same thing would be just
going through a for loop in each of the map objects and printing each which would give me the same results so if you
see here i found a very neat way of passing a function and an iterable and
using the map function to apply each operation that is part of the function or applying the function on each item in
the iterable so as you've seen we basically passed in a user defined function and we applied
it to each item in the list then the map calls the square function on each list item and collects all the return values
into a new list and because map expects a function to be passed in it also happens to be one of the places where
lambda functions are appearing a lot so let's look at the
an example where we do the same operation using a lambda function so if you see here i have a lambda function
where i'm passing it as the function argument and what this lambda function takes is
some variable x or some argument x it does its square and it returns that x and this x is basically going to come
from each element that is present in this list called items and when we list down these you will see it basically
does the same thing for us it creates us list with squared items now we can also pass instead of passing
an interval itself we can actually pass a sequence of functions and use the
lambda function to perform a sequence of functions on particular items so let's look at a new example a
slightly different one so we're going to use a numpy module for this don't worry we're just using it to use the square
root function that is present in the numpy power module um we will be learning about number in a later section
so um we're going to import this first and now i'm going to define three functions for square cube and square root
so once i've defined these basically they're returning the square the cube root uh the cube and the square root of
some integer x and now i'm going to create a list of these functions that you've just seen um
and we're going to use a for loop and we're going to iterate through a range from zero to
four so and we're going to pass this and we're going to say that we want to
apply some some function we want to apply some function x and we want to return that
using the snapdraft function now what values this x will take is based on whatever functions we've stored in this
variable called fu ncs or funcs and in fu ncs we have a bunch of functions
called square cube and square root that we have defined earlier so what we're going to do is we're going to apply each of these functions to r and r will take
the value 0 to 4 and now let's see when we print this what values we get so if you see here we get a list of
square root squares cubes and square roots for integers 0 1 2
3 and 4. so this is another way of using the map function and lambda functions
together to apply multiple different operations to a bunch of intervals
now for our next example what we're going to do is we're going to create a function that basically
what it does is it creates the upper case of some string that we passed to it right so that's what we've done here in
this function called two upper case so we've let's define this function now we have a print function basically which is
going to print each object in a particular um it's going to prevent each element of a particular object and it's
going to at the end of it and the end of printing we're going to give a small space for printing a new line basically
so let's create this also this print iterator object now what we're going to do is we're going to pass a string with
the letters a b and c to this function and we're going to map and we're going to apply the upper case function to this
string now if you remember string is also an iterable where it's a sequence
of one character strings so this whole string is basically a sequence of one character string a one character string
b and c so we're going to so we can pass a string as a as an iterable
to the map function because it will apply the operations on each of these characters so let's see what happens when we do the upper case function uh we
apply the upper case function using the map using mapping to the string a b and c
so if you see it's created me a list with capital a capital b and capital c as we had expected because we have
applied the list function to the map object now in the next step what we're going to do
is we're going to do a very similar thing we're just going to instead of simply mapping and creating a list out
of it we're going to store the map object in a variable called map iterator we're going to print
what type of object it is and then we're going to print out each of the elements using the print iterator function that we defined here
so let's do this now if you see the class the type of object is of class map
and the objects elements inside the object are a b and c moving on let's uh
let's look at now an example where we're going to pass multiple arguments um so instead of one iterable we're going to
pass multiple iterables now and we're going to apply some sort of an operation so if you see here what we have done is
we've created two uh two two sequences one is a list of some numbers and
another is a tuple of some numbers so just to show you let me first copy this here um yeah so if you see here i have a
list and a tuple and i'm passing both of these if you see to this map function and before that i have defined a lambda
function as the operation that i'm going to apply and what this does is it takes two arguments x and y and it returns the
product of both of these uh where does it get x and y from so the x it gets from this uh
this sequence which is a list and it takes y from this sequence which is a tuple so what it's going to do is going
to take x as 1 and then y is 5 in the first step and it's going to return the product as five then the next step is
going to take 2 as x and then y as 6 and it's going to return the product of that and we're going to get 12 and so on
we're going to get 21 and then 32 um when we and this is these values are going to be stored in the map iterator
which is a map type object and when we use the print iterator function it's basically going to print out whatever
results we got through this mapping so let's execute this and as you can see this is a result we got 5 12 21 and 32 which is what we
wanted so the next part the next function that we're going to discuss is the filter function now now a filter
function is basically again it takes two two arguments a function and a sequence and a function
basically tests if each element of a sequence is true or not now a sequence the sequence
um so this filter function will basically take two arguments so one is the function and this function is
basically going to test if each element of a sequence is true or not and it's going to take another argument called sequence and uh this argument sequence
is the list or the tuple or basically any sequence and or iterable that needs
to be filtered and it can be as i mentioned it can be sets list tuples or containers of more iterators
and what this function will return is an iterator that is already filtered um so let's look at an example now so we have
this list r which you've generated which is basically numbers from minus five to four so if i
create this list here you can see it will create a list of minus five to four now if i wanted to extract only the values
that are lesser than zero well i can use a for loop and use a if condition to check this right so if i did this over
here you can see it gives me it returns me some list called result which contains
only the values lesser than zero which is basically checked through this condition what if there was a
neat or a more convenient or a more organized approach to doing the same thing instead of creating a loop
ourselves what if we defined a function where we are going to do the test or we are going to create the condition and we
are going to pass this to a particular function and then apply that particular operation on
every object of some sequence well just like mapping we have a filter function to do this and in this example what
we're going to use is the lambda function which takes an argument x and it checks for some condition x lesser
than zero and where it's going to get the x from is some sequence r which which in our case is the numbers
from minus five to four and the filter will basically create a filter object type which contains uh only the objects
from r that meet this condition that is x is lesser than zero and when we use
the list operation on top of it you will see it creates it results in a list with
the values that have met my condition so for a second example what we're going to do is we're going to create
a list which contains a bunch of letters and we're going to only extract the vowels from
these bunch of letters so let's look at what we have here we have some letters d a t j k o p l and we only want the
vowels from this so we want to filter only the vowels so we can use that using the filter function by first of all defining a function that returns true if
a check is met that um one of er the letter matches one of these letters in this list called
letters and if it doesn't it returns false so this is our condition that we've created
once we create this condition uh this function that checks this we can pass this function and the sequence into the
filter function and then we can list out whatever we get so you can see our filtered list contains only a and o
which is basically the only vowels that are present in our original list finally we have the reduce function
this reduced function is basically a func tools it's in the functo's module of python 3.0 and what the reduce
function does is it applies a function of two arguments cumulatively to the elements of an interval and it
optionally it starts with an initial argument and it returns a single result so let's first import this function
and once we've imported it let's use it in this example that we have here so in this example what we're going to do is
we have some lists called numbers right what if we wanted to take care to get the sum of each element in this list
well we can iterate over it and store it in some variable called total in each step right this is what we would typically do and
in this step what you can see is the loop basically iterates over every valuable in numbers and accumulates them
in total the final result is the sum of all the values which is the value of 10 over here in this example the variable
total is what we call an accumulator and we can apply the reduce function to do the same
task so how do we do it let's first of all create a function called my add where we're going to take two variables
uh two arguments and we're going to return the sum of it okay so let's uh define this function and
now we have we have a list called numbers right which contains one two three and four now let's do reduce my
add to numbers now when i do this when i use this function what it will do is it will
apply the function of my ad it will take basically each and every element
in a sequence so it will take one and two then add them together and then it will create basically what it will do is
it will take one and two add them together then we'll have three so it'll take three and then the next element which is three again so it'll create the
sum which is six and then it will take six and then it will take the value four and it will give us the result ten so
this is how the reduce function would work so this is how it will give us a result of 10 as you can see here i've simply used
i've passed this function where i've defined that i want two arguments to be passed to a function and
then the return should be basically the sum and then i've passed a whole list of like four numbers and i've used the reduce function to basically do this
process for four numbers in a step-by-step manner by taking two at a time subsequently and my result is as
you can see is correct as you can see here so let's use the lambda function now to do the same topic just do the same task
so what i'm doing now is i'm going to define a lambda function and that's the function i'm going to pass to this
reduce so when i pass this lambda function which basically takes two two arguments x and y and it's going to
return the sum of that as x plus y now where it's going to get x and y from is in a very in a very neat
manner so it will take first the first two elements one and two it will then do the sum and we get three then it will
take that same three and then take the next object which is three again and then give us six then it will take six
and then the next element which is four and then give us ten and then the reduce function will output the the the single
result which is ten to us as you can see here in this video we will be covering a sort
of a project side type of scenario which is basically going to be a problem case for you and it's going to be slightly
slightly difficult slightly tricky but what we're going to do is we're going to tackle a particular problem and we're
going to what i'm going to do is also um show you a solution to that problem
so let's start with this so this question that we have is we have this program
that we have to write where we compute the frequency of words that exist in
some input okay the program should output after sorting the key alpha numerically now this input
can be any it's basically a block of text right so in our example we have
for example if this was our input right uh what we want to see is an output which is basically saying that the word
python has appeared say well in this example it's appeared five times and then the word read has appeared one time
and so on and so forth like for each of these words we want to see um how many times have they appeared in this
particular block of text so let's look at a particular example now
where we have done this so let's um let's see here so first of all i'm going to create a
dictionary so why am i creating a dictionary is because i'm going to use each unique word as a key and the number
of times they have appeared in a block of text as the value to that key so
i'm going to use a sample string which is basically this long string that you can see here which is
stored in line so this large chunk of text is what we're going to be analyzing so how are we going to do this it's
pretty simple so we have this now what we want to do is um when we find what we one way of
tackling this problem that we're going to do here is we want to um check word by word first of all we
want to see if it's a unique word and if this word is before i encountered it for the first time then we need to store a new key in
our dictionary called frequent table or frequency table and if it has already if there is a key already with that
particular name then we just want to increment the count or the value by one so let's see how we do this over here
so if you can see in my this the solution is as simple as this but if you see what's happening it's basically what
what it's doing is we're splitting up this string using the split function what this will
do is it will split up the string at every white space so it will take this
as one part and take this part as another part it will create an iterable with each word as the um each iterable
object in that container so it's going to be a list of words like python is one so on and so forth and
we're going to go one by one so we're going to say forward in line dot split now if this word is if it exists in
frequency table as a key then what we're going to do is we're just going to increase the count of uh the
value of that key by one but if it does not exist then we're going to actually create a key
with the word as that unique word and we're going to create its value um initialize its value to one
so when we execute this now if we want to once you've done this we can
sort it by the count of the words so what we're going to do is we're going to create a another tuple called 40 tuples
where we're going to use the lambda function out here to sort the dictionary in terms of its
values so what we're going to do is we're going to take the key the key being the lambda item item
with index one index one is basically the value um so a a particular key has a value so the word python
appears so many times the word say scientist appears so many times so we're going to check which words have
the highest number of occurrences and we're going to sort it in a descending order so that that is basically what the
reverse is equal to true does so when we're going to sort this when we're going to use a sorted function when we
say reverse true it tells the sorting function to sort this dictionary this dictionary
frequency table uh in terms of value by the the descending order so whichever
word appears highest that would be the first word in our sorted tuple so that's what we do in this line and
once we execute this we're also going to print so if you see the result of this
activity that we've done you can see that the word machine appears six times
learning appears six times then python appears 510 and so on and so forth so we've created a sorted tuple where the
first object will be tuple we've created a list of sorted tuples where the first object of the tube each tuple is the
unique word the second one is the number of times it has appeared in this particular example or this particular
string so yeah this was the first basic project that we have tackled in this you might have seen some examples of how we
do list operations and how we use the lambda function in sorting the
dictionary by the values of the key in this video we will continue with what we started in
terms of our project number one or what we're going to do is um we're going to tackle another slightly complicated
um a question or a situation we're going to try to arrive at a
solution so in this what we have is some sort of a robot a moving robot which
moves on a cartesian plane a two coordinate plane is going to move in terms of up down left and right okay
and each each time it moves up or down or left or right it takes a certain number of steps in that direction um
integral steps of course so what we need to do is uh from a starting position whatever its starting position is which
we are going to take as 0 comma 0 in this example we are going to make it move to a
particular location with the commands up down left and right followed by certain steps
and we're going to uh ask what we're going to do is we're going to calculate the distance between these two points um
and we're going to calculate different types of distances so you might be introduced to new concepts um your
distance concepts in this video as well so what we're going to be using for distance calculation is the minkowski
distance and that is we're going to take so the minkowski distance between two variables is basically the absolute
difference between these two uh variables are these two points and we take it to the power of something so if
we want to say uh calculate the minkowski distance with in terms of the quadratic mean cause the distance with
basically p2 so we are going to do x i minus y i absolute difference to the power 2 and then we're going to take the
second root of it after summing each and every point so when we take p is equal to 2 we we say the minkowski distance
behaves like the euclidean distance so this is probably one of the most common distances uh in case you've done basic
cartesian geometry when you're asked to find the distance between two points on a plane um we can also take the absolute
distance where we take p is equal to one so in this case we're just basically summing the absolute distances between each point no
roots no powers nothing basically p is equal to one and we call that the manhattan distance so we're going to take p is equal to one two and three in
each case and we're going to find the distance between two points uh based on these
measures so this is just a visual representation this is basically the euclidean the
distance basically the estimate of the value between these two points if um
since this is a two coordinate system whereas the manhattan distance would be the absolute distance in terms of
if we go up and then we go right between these two like save this first and this was another point so yeah let's move on
to the problem in this particular example we're going to start from the starting position 0 and 0 on a on a
graph and we are going to give the commands of up 5 down 3 left 3 and right 2. so first of all what we want to do is
we initialize the starting position as 0 and 0 and we also just for the sake of this example we initialize the end
position as 0 and 0. so what we're going to do first of all is
let's execute this much now we have this list list of tuples um it's we're going
to call this actions and this is the actions that we're performing so the this the each tuple contains an
action and the number of steps in that direction so it contains four actions up
by five steps down by three steps left by three steps right by two steps so now we're going to iterate over this each
tuple and we're going to get the direction first of all in this line
um for each step and we're going to calculate the number of steps it takes so for each action
it's going to first tell um it's going to check what is the direction which is done by this line
and we're going to find out the number of steps in that direction which is stored in this line so
once you've gotten this for each action we have to uh update the end position right
so what happens is if you go up by a particular direction so you are
basically changing the y y axis right the uh the y axis so we're going to change end position and the first index
which is basically this part of the end position coordinate point so we're going to say
if it's moving by up then we're going to uh update by adding
the y-axis by the number of steps so um and and if the direction was down
we're going to do the same thing for the y-axis but we're going to decrement it similarly if we move left or right we're
moving the x-axis right so we take end position in the first index so we take the x-axis and if you're
moving left it's a negative uh it's a decrement and if you're moving right it's an increment so
if there's any other like action like any other action for example that was
given here we say pass so basically the only valid actions that we can pass is um up down
left and right otherwise we we um just skip that particular action so this is what the this particular loop will do it
will update our final position so once we've done this uh if we if i
execute this what will get stored in the end position is basically my end position so
now that i have my starting position and my end position um just to show you what the end position will look like right now
let's just do this so if you see here after i've moved up by five steps down by
three steps left by three steps and then right by two steps my final end position is minus one and two um my start
position on the other hand was
as you remember it should be zero and zero it is zero and zero so now we're going to find the distance between zero and
zero and minus one and two so we're going to first of all create a function called minkowski distance which which
does a basic function of just calculate the uh the difference between the
what do you say the end position x coordinate and the n position y coordinate times uh or to the
power of a root and uh we're basically going to do this operation that you saw here we're going to do this
and we're going to use this root variable to
specify to like p is equal to one two or three like what p value we want to take for this minkowski distance so once
we've done this what this function will do is basically store uh this much and it will wait for us to uh it will
basically wait for us to give us a root so when we give root one it will create these it will check the distance between
the end and starting points um with the p value of one if we give it two it will calculate euclidean distance with p
value 2 similarly for 3 and we can calculate for any roots so we're going to calculate for 1 2 and 3 roots
and we're going to see what values we get in each case so when root is equal to 1 i print a
statement saying minkowski distance with root 1 is something and then root 2 is something root 3 something let's see
what results we get so if you see here the minkowski distance with root 1 is actually 1.0 but
the euclidean distance between these two points is 2.23 whereas the um
the cubic minkowski distance with basically the with root 3 is 1.91 so you
see these three different uh distance measures for the same distance between two points so in this video you
basically so in this basically by doing this activity you might must have you will learn how to um
basically how to iterate through loops um and perform these uh distance calculations which you'll find pretty
handy in many activities related to data science and machine learning in this
video we will be continuing tackling different problems and problem cases in terms of a project
called project 3 where we're going to be using regular expressions to validate whether certain passwords that
have been entered or do they match certain criterias or not so let's look into
our particular question we have a website that requires users to input username and password to register now we
have to write a program to check the validity of passwords input by the users now the criterias that the passwords
have to follow are that there's at least one letter between a and z and one number between 0 and 9. the third criteria is that there's at
least one letter between capital a and capital z so this first and third point basically is saying that there should be
one lowercase letter and there should be one uppercase letter now there should be at least one character from dollar sign
hash or the at symbol um it should have a minimum length of 6 and the maximum
length of 12. so when we whatever passwords that we enter into our
example they must be comma separated so if we're going to have an input they're going to ask us for an input where we're
going to have to input the different passwords in a comma separated way so let's look let's look at
how do we tackle this so for my example i'm going to use these examples in terms of these are my
password examples if you're going to check if these are valid passwords or not so let's copy this first of all
and now let's import the re this import rd is basically the regular expression module
now in this step is going to ask us to input the passwords as you can see here so i will just control v so since this
is comma separated what it will do is it will split up each of these by the comma and it will store them in a
list so it will take this as one password this has another password this has another password and this has
another password once i press enter now if i want to check what's in list i
mean what's in items what i can do is just check over here what's in items
it's a list of whatever password i had entered each object is separately treated now in this list
now i'm going to create a an empty list called value first of all once i've done that i'm going to move on to the next
step so once i've created my list called value what i'm going to do is now i'm
going to search and i'm going to check for each condition using regular expressions for whatever criteria that
we have initially so if you see here what i'm going to do is first iterate by each item in this to
check for each password now my first check will be a basic check for the length of the password if it's
lesser than 6 or greater than 12 then our basically our password is illegal so
we can't be using this and we will just continue and we won't check for anything else but if it is within 6 and 12 the
length 6 and 12 then we can continue with our check so we can do we'll do an statement for pass which
basically moves on to this next block now once you've done this
what we will do is this this first statement what this is going to do is it's going to do an re
dot search an re dot search as you know is going to look for at least one instance of
a letter occurring between a and z so this ire.search followed by this now this is the regular
expression that we have passed and what this tells us is basically the square in the square brackets we're looking for
anything between a and z in terms of small letters so if this condition is not met then again we
continue and we leave this particular search because one of our criterias is not met
all right but if it is met then this if not statement will not uh like we we won't enter this block and we can move
on to the next check so now now we move to l if not now again we're using if not statement so this is
basically checking for uh a negative case so anytime one of these cases have been met it basically means
that our password has been invalid because these conditions are not being met so we're trying to eliminate all
conditions all of these conditions so that we get a valid password so again we move on to the next statement which is
basically going to do the search for numbers once again if we find a case
a password without any numbers we continue and we don't um
check this password no more because we already know it's a it's a an illegal password now next check will be for
capital letters a to z and the next check again will be for these particular symbols the dollar the
hash and the at one of these three symbols uh we're going to search for a white space character so if we actually do
find a white space character in our password that's an illegal password and we're not going to continue checking for those
cases so so this is basically all our cases lowercase letters
numbers capital letters these one of these three symbols and the existence of
a white space so once we've done all these checks if none of these have been passed we move on to this else statement
where we just pass and what we can do is we append the value p to the the list
called value so basically what happens is just to go through it again
if this condition is not met and this condition is not met this is not met this is not met this is not met and if
this is also not met then we're fine so basically as long as we have small letters as long as we have a number as
long as we have a capital letter as long as we have one of these three symbols and as long as we don't have
any uh white space characters we can append e to this otherwise it will
continue and it will break out of this for loop completely that's what the continued thing the continue statement at the end of each of these blocks
checks um anytime this condition is met this if not condition is met then we
break through we break through this whole for loop and we don't append p to the value but uh if we actually get to
this stage then what we can do is simply append uh p to value now finally what we are going to do is
we are going to print out all the valid passwords so just by a quick look you can see here this is a valid password
right so let's execute this and let's see uh what we get if you see here we only get
one valid password and let's look at why some of these did not turn out to be valid so if you look here all of the
conditions are met it has a capital letter it has a small letter it has at least one number and it has one of the
symbols either dollar sign or the hash sign or the add sign in this case we have two white spaces one over here and
one over here so this is an illegal password similarly in this case also we have an illegal password because it
begins with a space in this case it's the same thing we begin with a space and also it does not
have any of those symbols that we were looking for the dollar or the hash or the at so again so these three are
illegal passwords and they do not get appended to value however this does get appended to value and that's why we get
the result for only one password which is the only legal password welcome to web scraping with python my name is
richard kirchner with the simplylearn team certainly there are many reasons to be able to go online and scrape
different websites they range everything from pulling out different links to pulling data off of websites as a
data scientist you might need to get some information off a website that doesn't have a direct api to pull that
information and in python we have a wonderful tool when you talk python and utah web scraping we're talking
beautiful suit which is a package you add into your python that you're running and we can come over here to the website
www.crummy.com software slash beautiful soup you can actually read a little bit about it
currently beautiful soup 4 is the current version if you don't remember the full website for it you can always
do what i do which is go over and do a search for beautiful soup official site it almost always comes up right at the
top and you click on there and it'll take you to the crummy.com software site for beautiful soup now we're going to
use our whatever python interface you want ide i'm going to use jupiter lab
which is built on jupiter notebook through anaconda so when i open up my anaconda navigator you'll see that i
have my different tools available again you might be using a different editor and that's okay you might be in pycharm
or something like that we don't need to do this and jupiter lab is jupiter notebook with
added tabs and some added features it's basically in beta testing so it's got a few little glitches when you're saving
things and moving between projects but for the most part it's a great upgrade to the jupiter notebook and you can use
them together so you don't have to i mean it's built on jupiter notebooks anything you do in jupyter notebook you can open up in jupiter lab and the first
thing we need to do is we need to go ahead in this case i'm going under my environments since it partitions the environments out and i'm going to open
up a terminal window we have to install some packages in here to work with now there's a lot of choices on this i
because of the simplicity we'll be using conda install now you can use pip install for the same thing and we're
going to install our beautiful soup four and you have to type out the whole thing beautiful soup for and use a pip install
if you're using a different environment and i am using python version 3.6 although according to beautiful soup
they also work on 3 7 all the way from 27 through olive 3x now according to the
beautiful soup website the beautiful soup 4 works on anything you can install on anything from python 27 all the way
through any of the python 3 versions now this just happens to be python 36 because i do there's a lot of other
packages that don't work on three seven yet and we'll go ahead and run this install on here and let it go through its environmental setup and of course
with conda it goes in there and finds all the dependencies pip doesn't do as much as far as finding dependencies but
you know exactly what's on there with pip so if you're doing a huge distribution you probably want to use your pip install so you can track what's
going on there with the conda i like to just let it take over since this isn't a major distributed
package going out another quick note between pip and conda is that if you start on a project in one of these
environments and you're using pip in there stick with pip if you're using conda stick with conda they track the
packages and you can run into some issues where they're not tracking the same packages and something gets overwritten so it's important to stay
very consistent with your install on your environments and we'll also need to go ahead and install our numpy
environment and our pandas on here so go ahead and do that if you haven't added those packages in go ahead and install
those into your environment that you're working in and of course pandas is just simply uh
install pandas and let's just install a couple more packages in this case let's get our install our map plot library
because we're going to plot at the end since we're going to be collecting data and for this project that will be all the packages we'll need so we can go and
close out of our installer or whatever setup you have and we'll go back to home and we'll just launch our jupyter lab
and that will open up in our browser window now if you're coming from jupiter notebooks and first time in lab we can
go ahead and just create our first notebook python3 you can also do it under a file launcher and you'll see new
notebook it automatically opens up and we just click right on there it'll pop open on the left and i'll right click
this and we'll rename this we'll rename it just beautiful and it is a i i in b
file on there so that should look familiar because that's the jupyter notebook file this is a new one now i have more tabs in the past i usually hid
this on the other computer all my notes for the lesson today but this is my notes going down and we'll go ahead and
just start going through this and see what it looks like to do a data poll from front to end and see how that works
as a data scientist pulling that information in from the website and the first thing i want to do is i want to go ahead and close this side window that
way it looks get the nice full screen and we can also up the size a little bit one of the wonderful things about
working in a browser window just do that control plus thing the packages we talked about is pandas so we imported
our pandas if you haven't already that's our data frame if you haven't done our pandas tutorial definitely worthy of the
time to go through there and understand pandas because it's such a powerful tool this basically turns your data into a
spreadsheet data frame our numpy is our number array uh so it kind of works with
pandas very closely as far as manipulating data in arrays matplot we want to go ahead and bring that in our
plt so that we can plot the data at the end and this line right here that says matplot library inline is for the
jupyter notebook specifically it tells it to print that on this page a lot of the newer versions don't actually
require to have that line they'll still print it on the page but you should still include that if you're in the jupiter lab setup and then we have our
url library.request we're going to import url open for opening up the website and then we have our bs4 that's
your beautiful soup four we're going to import beautiful soup and then our last one is our re that is for manipulating
our regular expressions so we get to that part of importing our data we have to do a lot of reformatting so it's
something we can use and the re is one of those tools we'll go ahead and run this and just bring all that in so this
is all imported all these packages are now into our web scraping program we're going to run now if we're going to dive
in and pull data we should have a nice website to pull from and let's go ahead and we'll use the
upper timing.com results for the 2018 martin luther king race and if we take
this you can actually just take this where did we get this from well you can go in here and find the website you're
going to scrape from and you'll see right here it says you just copy that link right in there that http and this
is a website that we're looking at you can see right here all the information that we're looking at let's say we wanted to run some statistics on this it
sure would be nice to be able to pull it off of here and if they don't have a direct api that means we need to pull it
from their website some of these will have a download although if you've ever done a we have a download click and
maybe you're paging through a hundred websites in one case i was uh polling all the different united states bills
that are passed to track who voted on them for a project and you can imagine that there's you know hundreds and
hundreds of those thousands of these documents that they voted on who voted on it goes through the senate goes back
to the congress so i opened up a website pull all the links off of there that match a certain criteria and we'll look
at that in just a minute how we go through the html and then i had to reformat them or i could hand download
each one one at a time which would just be a nightmare so it's nice to automate it in this case we're going to be pulling up this chart we want to figure
out how to pull this chart off of this website and so we go back into our jupiter notebook i've got my url just
our name for it and it's just a string that's all this is nothing fancy there you'll notice that on the slashes we now
have forward forward slash you can do a single forward and http is a double forward this is just how you have to
switch it to match setup in there and then it's going to go ahead and use the html equals url open url and that's from
our url library request so it's opening a link to that website or at least pointing to it and if we run this this
just sets it up so this is all set up and then once we've done our setup let's go ahead and create an object called
soup this will be and if you remember up here here's our beautiful soup that we imported from the bs4 and this is the
package that we're working with and so we're going to do our beautiful soup on here and on this we need to go ahead and
send it our html so it knows what it's opening and then the second part is we
have to tell it how the format is coming in and the most common one for your html polls is an lxml
setup and so almost all of them you'll end up using the lxml there's a few other options and because this is so
common uh in the newer versions a lot of times they just leave it out just because it's already on the default
we'll go ahead and leave it in here just to remind us that it's there we'll go ahead and run that and on the newer versions uh they actually default it to
the xml setup in the html we'll just leave it out and call it html so it's just gonna pull from this url and when
we run that on here we've now created an object soup that has pulled the website into it so soup contains the information
along with information on that website and what's going on so let's just go over what we did real quick before we
start digging into the actual soup before we start scooping out stuff we imported our different
modules that we're going to use with our package specifically the beautiful soup we did install the beautiful soup if you
remember correctly you have to call it beautiful soup 4 specifically so it knows what you're bringing in and this
line right here is very key from bs4 because that's how it installs the module we're importing our beautiful
soup and then we found our url in this case we're going to go pull information from the martin luther king dream run
and then we set our html to our url open url and you can see right here we
imported that so here's our url.request import url open so we're requesting a
connection and once we send that connection into the beautiful soup it creates an object called soup and then this one of course we chose soup just
because it goes with beautiful soup i guess we could have chosen beautiful and now we can start extracting information
from our website because we pulled it down onto our computer under soup now we can start by looking at the title of the
website soup dot title and if we print title dot text you'll see this a lot in
beautiful suit because title contains all kinds of information and if we want just the text from that title you add
the dot text on the end and you can see right here we have our 2018 mlk dream
run 5k race results if you look at the tab that's the actual title up here uh 2018 mlk dream run 5k race that's what
the title is on the website and then you might be curious what's in title what's the whole title that it's storing up
there well let's go ahead and print it out here's print title and print title.txt and we run that you can see it
has the html tags title on it and then the forward slash title to end it and so we're really just pulling off this piece
of the html code and then we look at the text inside that particular part of the
html and earlier i mentioned links what if you want to get all the links off this page well that would be fun uh we
could do soup dot and we'll do find underscore all put this in bracket and
then quotation marks we're going to put a a is the key find and you'll start seeing a div
and all the different options you have for finding these entities in a website and then let's go ahead and just print our links and you can see here that it
now shows all the different links in here that are marked by eggs we did a find all a and then we can also because
this is a little bit hard to pull off the h reference so we can also add in our find all fine tune that in this case
the h reference equals true we'll actually filter that out and then finally we might do a four link in links
and we can simply do something like this for each link we want to actually find the h reference because we know there's
an h reference in it and if i run this you can see it just comes through and prints them out one at a time some of these are really useful so you might be
looking for something that has https in it and you know that's a link running to something else or you might be looking
for the mail to tags you know that's all the mail addresses but either way you can easily find all the links in your
html document that you're paging through and of course any packages that have evolved over time
you can also do link dot get h reference which should do the same thing as our
other format and you can see it certainly does we get the same printout up here in this particular case we
really want to get the data off the page uh so let's go ahead and do that let's see what that looks like and in data
let's call it all rows there we go equals and then we have our soup dot find underscore all there's our brackets
and then if we're looking for each row in a database you'll remember your html code we're looking for the tag tr so we
want to find all tr and we can take this and let's go ahead and just take all our rows and do a print all rows and about
this time you're going to guess that we're going to get a huge amount of information just dumped onto our page
and sure enough we do if you look at this it just kind of goes on forever but this is an array each row is considered
an array so because of that we can do something simply as putting brackets and just print the first let's do the first
five rows so uh from beginning to five and you can see here's our first five
rows on here i sometimes like to just do let's just do row zero and we see that row zero is finishers finishers 191 and
just out of curiosity what's if that's zero what's row one male okay so we're starting to see titles going across here
so if we come up here and we do rows we did what up to 10. let's just take a look and see what 10 does again and just
take a look at that information that comes across place bib name gender age city state chip chip
pace gender and so on so it comes all the way down here we kind of have an ending right here and then we have one
and then we actually it looks like we start to have information so we have our one or one 1191 max randolph that must
be the name male 29 and so on you start seeing how the information starts getting displayed going down so the next
thing we want to do with this i'll go back up here and just edit the space we're in so it starts to make a little
bit more sense keep it all together and so we want to do for each row in all rows we're looking at what information
are we looking at well we have our th up here that's a header our td down here
which looks like the individual information and we really are looking for the actual data so we're looking for td
tags in the rows and we can do that because when you remember when it stores the row it also stores the tags
underneath that so all rows have all the different tags in it and you can see right here as you print each one of those out and so we look at each row we
can create another variable we'll call it row list and we'll set this equal to in this case row because we've already
pulled all the rows out of soup so now we want to find for each row and in there we want to find our td and if we
go ahead and just print i'm going to do it if you notice i changed the indent so i'm just going to print row list what
this does is the last value to go into row list our last row is going to print now and of course make sure you have an
underscore instead of a period when you're typing so row dot find underscore all td and if we print the last row you
can see i have all the data coming across here we have our 191 our 1216
zuma ochoa i hope i said that right female i believe that's age 40 and so on
and then we can take our row list and there's a lot of things we can do with the row list what we'll do for let's do
object or let's just do cell in row list and so we're going to look at each cell
because this is if you look at this they have commas separated between the different objects and then we're going to go ahead and print cell dot text
let's just take a look and see what that looks like and we can see here for each row we get 191 there's our 191 there's
our 12 16 12 16 a individual who's in the race and so
forth all the way down for those different settings let's go ahead and create a new variable up here uh we'll
call this all let's just call it data we'll keep it simple uh so here's our data and then we have our row we take
our row we break it up into individual cells so we'll call this data row and we'll set this empty to an
empty row and we're going to take our cells tab this we know that each cell
generates a text and so what we want to do is i want to take my data row let's just replace that let's take our data
row and let's append our cell dot text so i'm going to add the each row is
going to be a row of the different text on here and then once i create each row i want my data which is going to be
everything to append each row and here's our data row and then if we go ahead and come down here and let's just print data
now if we were lurking with large data we'd be very careful about just throwing all our date on the page but you can see
here we throw the date on the page and we get uh finishers 199 male 78 female 113 one and so on and if you look at
this this is the headers on the file we have finishers male females just like some general
statistics on the first one and then we have actually uh an empty data set and then we have our
data that continues which actually the actual information we're looking for so we have one 1191 max randolph mill 29
washington dc runtime uh one of 78 and so on on here so we could really quickly
get rid of that number of different ways to do that one of them is just to do we're going to set if we do data 2 on we
should get rid of everything but we want to keep randolph so make sure randolph is in there oh we lost randolph let's try one on there we go there's max
randolph on there uh so we can just simply do redo our date on here and we can do data probably want to do it in
all rows from one on but i'm just going to do my data equals data one on down
here and there's reasons to split it this way in data science sometimes you don't want to touch the original data in
case you need it in case we do need the first row so we'll put it down here and maybe we'll just call this titles titles
equals data of zero and so we could do something here where we print we'll print up our titles and we'll print our
data in this case instead of one on let's go minus two let's look at the last two rows of
data so here we have our titles and for some reason just put in finishers of 191
as expecting a little bit more up there and we have our last couple people and they look like the data on these looks just fine on here turns out this is just
some generic statistics up here so we'll get rid of titles completely it doesn't really do us any good but we know that
data comes in here and we can look at our data and look at the very end of the data to the minus two to the end and we
can see it pulls the data in pretty good we don't have anything too funky in here we're looking at it looks pretty clean
now you got to be a little careful because at some point we might have to come back here and clean up the data if we get an error for running a data
analysis we might find out there's some unusual characters or something is missed in the data itself and you also
notice that everything is a string so when we're bringing it in we might have to do some conversions to test it out
and convert them to whatever kind of data format we're working with so at this time we want to go ahead and bring
in our pandas um and let's go ahead and call this idea for data frame we'll set
it equal to and if you remember correctly we imported pandas as pd and that's standard you'll see that in most
code examples where they call the import pandas as pd and it is capital d
capital f for data frame and we're just going to bring in our data that's what we called it on here and let's uh take
this and we'll print now when you're working with data frames you're usually talking large amounts of data and so you
almost never want to print the whole data frame out we're going to go ahead and do that anyway just so we can see
what that looks like and you can see in here brings in our data frame coming in here we just have a mess of information
this is our data let's go ahead and print df and see what that looks like in the data frame and this is nice because
it organizes it into a very easy to read table and we have they set the label 0 1
2 3 4 5 6 and so on and then we have each row we have mel
78 going across when we get all the way down here we'll see max randall about
number three and the first thing this does is this flags me that i brought in a bunch of information up here that we
really didn't want it's from three on that we want and we can clean this up in one of two ways we
can try to clean it up under the data or we can clean it up under the data frame depending on what it is we're trying to
do and so to fix this i want to go ahead and just change it up here in the actual data pull in we don't
need that information so i'll rerun it reload our data from foreon and then when i run this we see we have max
randolph is right at the top of the list like he should be and we have all the data going down now with the data frame
remember i said we don't usually print the whole data frame we'll go ahead and do df.head and this prints the first
five rows and you can see that we have 13 columns here's max randall all the way to theo kinmin and i usually also
print df tail and the reason i like to do these particular two setups i'm going to
change it just to two rows because you can do that you can put as many rows as you want is this good to look at the first part and the end because those are
usually where you have extra data brought in uh something's messed up and you can also see that we have 190 rows
in here and it comes in with our zuma lisha and they're both on here on the list so now we have a nice data frame
columns and rows we can easily look at it we can see the setup on here and we can look at the names and everything now
at some point you might be looking at these individual columns and find different information that needs to be
re-edited if you can you try to do it with the whole column under pandas you
can up in the upper part of the code where you went from cell to cell or row to row you could look at individual cells maybe find a marker in that cell
that's something specific like remove all colons or semicolons or something and there are brackets there's a lot of
options in there but you'll find that this one actually comes in pretty clean on here all the way down and the next thing we really want to do is we want to
look at the headers i don't know about you but doesn't make any sense to me when i have column one i don't know what
1191 is or 1080 need name kaiser runner i'm guessing that's column two is names
third one looks like male or female probably age but i don't want to guess i
want this to bring in my column so i know exactly what i'm looking at so how can we make beautiful soup do that for
us well let's take our column headers we're going to set that equal to our soup find underscore all and then we're
going to look for our headers our th files and since we're in jupiter lab in this case jupiter notebook i can just
type out column headers if it's the last variable i have listed it will automatically print it so it's kind of a
shorthand and we can see right here we have place i'm guessing that's bib name
gender age city state chip time chip pace and so on so we have all our headers right there i shouldn't have to
type them all in and we'll go ahead and do it before we'll go ahead and do a header list equals our empty array and
then we can do for a column in column headers and we can take our header list
and just append and what do we want we want the text from the column so we'll just do column.text and then if we come
down here and we print our header list let's see what that looks like if we did it right we should
get a nice list of all the different column headings we want so we have place bib name and so on and then pandas just
because pandas is so cool we can simply do df columns equals our header from our
header list we simply said df column set to df headers and then if i print df.head we'll take a look at that and
we'll see right here it has nicely placed our values on here place bib name gender age and so on so very quickly
we've created this nice data frame we have the data displayed in nice rows and columns and easy to read and then as a
data scientist the first thing we want to know is the info what is in these columns and rows and headers and you see
right here they all come up with non-null object there's a big flag so if i want to do anything with this these
are all coming through as strings or an object i usually mean strings in this case that they're a string variable and
we have you can quickly read through this 191 entries date columns total 14
columns there's a total of 14 columns in the data and it shows you all the different names and what type of column
they are and it's probably good also to look at the shape of the data df.shape we'll go ahead and just run that you see
it's 191 by 14 14 columns 191 entries this is more like a we look at a numpy
array 191 by 14 for the shape and remember this is a variable so if i put
it on if it's a last variable or last value in the set of cells jupiter
automatically prints it out so if you're in a different ide you want to go ahead and use the print statement on here
then one of the things you'd want to also go through we'll create a second one df2 equals df dot drop in a now the
axis is automatically equal to zero so a lot of times you'll see something like axes equal zero comma how equals any
axis equals zero is default that means we're looking at going down the rows you
could look at the column going across let's remove the how any that's just going to confuse you the axis is is
whether you're going down the columns or if you're looking at a row by row by row by row or you could be looking at it by
column by column by column this would drop any column and it would drop off the n a in any column and how equals and
we want any i always confuse all in any they both start with a all means that all of them have to be non-value where
any means that any of them can be there to drop it so this would drop any column
with a null value in it but we want 0 and it'll drop any value with a null value and then because 0 is always the
default we'll just leave it out and then it's curious as to what the shape is now
did we lose anything was there any null values in our df2 that we dropped from the df and we'll go ahead and run that
and we see 191 and 14. so we didn't really drop anything but it's always good to check there's other ways you can
also do are there let's see any n a's you can detect n a's in here no values
infinite values that's another one you got to watch out for we're working with data that we're going to do something with here in a minute so you've got to
be a little careful also in the convergence are you going to convert something where people typed in weird
characters to describe the data a certain way so now we've got to this point where we have all our different
columns we have our different data and at this point maybe you're asking or maybe the shareholder the company is
asking hey can we look at the based on the chip time here's our chip
time can we plot that versus gender how does gender versus chip time compare and
so we can do that we can take that and the first thing we look at is we say hey well chip time came in as a string and
that's going to be an issue now there's a number of ways you can change this one of them is we could go all the way back up here where we created the data and
find a way to tag it and say hey whenever this cell text maybe instead of appending this i notice that any time
there's two colons in it that's probably a time signature and let's uh convert all the time signatures to date time
filled or whatever a lot of times you don't get that you don't get that option and that's always a question in bringing
in data whether you convert the data coming in at the beginning or do you wait till you have it open it up and
then convert it when you go to use it we're going to go ahead and convert it after we got it into our data frame so
we have our df2 here we've dropped all of our n a's we dropped our we have a shape in fact let's do this since
there's no difference between df and df2 well we'll just go ahead and use df2 so let's go ahead and take our df2 and we
want to take those that specific field and convert it into some kind of
numerical value we can use and let's add another column a lot of times this is something you want to do is where you
want to go ahead and keep all the original columns and just add a new column in there and this new column is
going to be based on the if remember correctly we had chip time that's what we're going to look at okay we want chip
time versus gender if we go into our pandas we find out we have pandas 2
delta and this is actually time delta and then we just want to take our df2
and we're going to use the chip time column so this is going to say hey let's look at let's convert everything in df2
chip time into a time delta format that's the data type we're going to put it as let me go ahead and just run this
and if we go in here and we do info df2 and we'll keep our we're going to look
at this particular column but we want to keep it as a data frame uh so this is a list of all the columns we want to look
at we'll just do that info on here and run that and we do an info on that you can see it's now a
time delta 64 nanoseconds uh well we really don't want nanoseconds we
actually probably want to do it in minutes uh so let's take a look at that and let's take this whole thing tf2
let's just set the df2 we have our df2 this is a column we're working with here
and we can use the as type property in pandas and so we can set this equal to
df2 we'll take our same column in here and we'll set it as type time delta seconds so it's still a delta
time here so if i run this you'll see that it still comes up as where is it hopefully it turns it into a float so
we're now at a float 64 so it's the number of seconds in that delta time and then finally uh we want to go ahead and
turn that from seconds to say minutes and you know there's 60 seconds and minutes and so now we divide by 60 we
still have a float we have our info that shows us it's a float and then we can go ahead and just do a print df2 and let's
just keep it small we don't want to look at all our data we just want to do the head of it and we run this and you can see right here where we go to it'll be
the last one here's our chip time in minutes a lot of times uh just to make life easy for viewing since we're only
looking at this particular element we can do chip time in minutes and now we just see that oops we take off we'll go
ahead and take off our info done with that and we'll run this and you can see we have our minutes 16.8 minutes 17.51
minutes and so on it's a float number now keep in mind this is 0.8 that's not a 16 minutes and 80 seconds that they
can always throw you if you're going through so many numbers you forget so important to remember that and we're also going to look at the other one
we're looking at is what gender you want to look at gender to chip time in minutes and so we can see
here under the head we get male male male and a number of different setups and let's switch this to tail real quick
and just look at the end of it and here we have female female male female female so we have two different genders and we
have our chip time in minutes and if you remember we brought in our plt if you haven't used the plot library the
matplot library you have a drawing place you're putting stuff on so we have our plt we're going to do a bar graph and we
just want to simply use our df2 gender and df2
chip time in minutes so that's going to plot the two bars and to make it pretty we'll go ahead and give it the x label
gender the y label chip time minutes and that simply is remember it always plots x in the plots y we have our gender our
chip time give it a nice title uh comparison of average minutes run by male and female uh and if we go ahead
and run this with the correct titles in here and everything matches you'll get a nice graph we can see here the
comparison of average minutes run by male and female here's our chip time in minutes the men seem to be slackers in
this particular case and it's actually uh there's a number of studies that show that women team tend to have as far as
doing cross-country there's a lot of women who have a longer endurance than men so it's not too surprising uh we can
see here the average chip time around 70 and for women over 100 minutes and then
another really cool thing we can do is we can describe the data so df2.describe this again is a pandas
function just like info is and we're going to include uh np number the numpy number and if we run that you'll see
here comes up and says chip time in minutes a count it gives you the average or the mean standard deviation the
minimum the maximum all the different descriptive information you're going to want from your data set on there and
just because there's all kinds of fun ways let's do a box plot to display your
information uh we can do a box plot where the column equals chip time in minutes and let's go ahead and run that
keep mistaking my chip time in minutes you can see it puts out a nice box plot showing you the information we have our
different values and floaters this is always interesting because this is a nice way of seeing where we have these uh floaters one up here and there's two
up above and of course here they're a nice spread on the box plot and we can also modify this a little bit and we can
add in by equals gender and then we'll give it we'll just give it a blank title i don't know why we're giving a blank
title uh we'll just add a y plot y label on there for run time and if we run this you can see here box plot grouped by
gender chip time in minutes and now we have our female and male two different areas and you can see how they vary you
have your two different uh your outlier up here and you can also see how there's such an overlap between the two
different values so if i was looking at this i'd be like wow you know i really could not draw a conclusive thing on
this saying that women's run time was more in general because they overlapped too much that would be one of the
conclusions i'd have to come up with done here and then we get to maybe the partners come in from the company and
say hey we'd like to know the age versus chip time in minutes that'd be something worth knowing on the statistics on this
and the first thought is we can simply plot it and we can do this we can actually plot the scatter plot chip time
versus df2 of h there's our xy coordinates but if you remember from df2
when we did the info let's go way back up here we're looking at a data object
as far as our chip time on this and our h now we converted the chip time but we
also need to convert the age and if we do it right here we just plot it and it'll actually let us plot it it
shouldn't it should give us an error but it does let us plot it you'll see the ages come up a mess over here because
they're converting it to weird float numbers and all kinds of things so we want to do is we want to take our age
and we'll just call this ah underscore i so we're going to take our age and we're going to create another column for df2
age underscore i and the i is just going to stand for integers our own choice of values there is a number of ways to do
this but we're going to do pandas 2 merrick is the best way in pandas and
the reason we're doing this is that numeric creates a float value so right off the bat we want all our stuff
converted it converts it to the least common denominator so if they're all integers already you'll get integers as you can see from here it's doing some
kind of conversion that converts it to a float value the other thing that numeric does is if there is a null value or they
put in like a blank line or a dash to represent no information it'll convert
it to a null so it goes from like a string to a null versus just having some kind of
made up number that python somehow created for the graph we have below and then we want to add our df2h because
that's what we're converting to numeric and then we want to coerce it and there's a couple different options on
this like you can have it where it just doesn't process it in pandas but coerce means that if it gets a weird value that
is a null value now and since we're dealing with errors this is what happens when you get an error converting it we
want to coerce it there we go and put the end bracket on there and then finally we want to go and round this off
so i'll put brackets around all the way around it and this rounds off everything in this series so we've done here is
i've taken df2h which is a d type object which in this case is mostly strings
with a couple of blank ones in there and we're going to convert it to a numeric which will automatically go to float and
then we're going to take wherever there's an error wherever it says hey this doesn't convert and usually that's a blank screen like i said i've worked
with so many databases where they someone puts down none someone types in space sometimes in a dash to mean none
and you get this really weird conversion coming up this covers all of that in pandas so it's really a nice way of just
coercing it and saying hey if we don't have a number in there let's make it a null value and then we're going to round it off and then finally let's go ahead
and take our df2 here's our df2 and let's drop those null values drop in a
and we want how how equals any so that means if there's any null values in the
data set now you can this might get you in trouble because you might have null values in a different column and so you
might lose data that way at this point we could also do like certain parts of like drop
just certain columns with null values there's all kinds of other options in here what we're just going to do how we're going to just drop any and we want
to do it in line equals true so that means it's going to reassign it to
df2 so df2 now has a rounded out so it's rounded to the integer we didn't do any
places the age and it's going to be age i and then we've dropped all our null values that way we're not going to get
any errors when we try to plot a null value and it also makes sure that data by deleting out the rows because that's
what this does it automatically does axis0 which is your rows axes one is your column by doing this it
automatically removes all the rows with null values so it just cleans out the rows and then when we go ahead and plot
this we see we have a nice clean data and we have age all the way up to 70 so we have our chip time set and then our
age going across and it makes a nice plot that you can easily show for display and for the the and you can
easily show that to your shareholders or whatever group you're working on it makes a really nice and quick easy display in this session we will discuss
the top tips and tricks in python that you can use to solve your problems first let's understand what python really is
so python is a high level open source programming language developed in 1989 by guido van rosso
it has simple easy to use syntax python can run on different platforms such as windows linux and unix
it has a large collection of libraries and can be integrated with other programming languages such as c c plus
and java companies use python for web development software development statistical
analysis machine learning and deep learning
python trips and tricks will help you optimize the code and reduce your time and effort while writing codes for
solving problems these tips and tricks are usually short snippets of python code with simple
illustrations to tell you how you can perform a complex task easily
it can also serve as examples that allow you to dive deep into understanding and exploring how each concept works and
where it can be used
so in this video we'll be covering the tips and tricks based on python lists tuples sets and dictionaries we'll also
see how to effectively use loops iterators and collections in python
so let me take you to my jupyter notebook where i'll show you the different tips and tricks
so here is my jupyter notebook so let's begin with our first trick
if you want to initialize a list or a tuple filled with repetitive strings or numbers written in the form of a string
we can do that using the multiplication operator so let me show you
so first i'll declare a list suppose a is equal to within square brackets i'll
declare a string suppose india and now
if i use the multiplication operator and suppose i say 10
then i'll print a so this will print india 10 times
if i hit shift enter it will run that cell you can see we have printed india
10 times similarly let's add another element to our list
or another item to our list so india and then we have
france i'll use the multiplication operator and
apply 10 so let me print my list again
if i hit shift enter you can see india and france have been printed 10 times
also you can use an integer as a string
and print as many times as you want suppose i am printing 20 five times
i'll use the print statement
you can see we have printed 20 five times but
if i pass an integer as my first operand it will result in the product of the two numbers so for example if i use c
equal to 20 into 5 and if i print c
it will give me the product of 20 and 5 that is 100
next let's see how we can reverse the elements in a list for that we'll use the list slicing method
let me first show you how you can reverse a string
i'll declare my list as list 1 is equal to
and inside this list i'll pass in a few country names such as
india then we have usa
let's say we have france and then
germany and finally we have spain
now if you want to reverse the order of this list you can use the slicing method inside
the print statement so i'll write print and i'll pass in my list that is list 1
and i'll use double colon followed by -1
so this will read my list from the end so if i hit shift enter you can see we
have reversed our original list so now spain comes first then germany france usn india
likewise you can also reverse a list of numbers so
let's reverse a list of numbers
suppose this time i'll use list 2 is equal to
i'll pass in few integers say 100 200 300
and 400 now if i print
my list two using colon colon minus one
it will reverse list two you can see we have reversed our original list two so now four hundred
comes first then three 300 200 and 100 now let me tell you how you can print
the elements in a list in any order that you prefer suppose i have a list that has values
like 1 comma 2 3 and 4
then i'll print this list
after that i'll use four variables
such as e comma b comma c comma d and assign it to our list
after that let me go ahead and print any order that i want for example i use
b comma a comma d comma c and hit
shift enter you can see we have printed our list in the order that we wanted
so basically what this cell does is we have assigned
the value 1 from list to a 2 to b 3 to c and 4 to d
and we are printing in an order b a d c so this is the result you can see
now suppose you want to print in some other order like say i want
c first then i want b a
and then d so this is the output
up next we will discuss list comprehensions in python so list comprehension is an
effective way to define and create new lists based on existing lists so suppose you want to extract and
separate all the letters from the word simply learn and add letters as items of
a list ideally you would use a for loop to do this task so let's see how you can perform this
task using a for loop i'll assign an empty list say letters
is equal to i'll use square brackets to assign my empty list
then and declare a for loop suppose for i in
i'll pass in my string that is simply learn
and i'll append the letters
using the append function
now let me go ahead and print the letters
if i hit shift enter you can see this will print all individual letters
present in the word simply learn but the same job
you can do it easily with the help of list comprehensions so let me show you how to do that
first i'll declare a variable say letters is equal to inside square brackets i'll
write i for i in my string
simply learn
then i'll just print the letters
you can see we have extracted all the letters from the word simply learn so this is how we use list comprehension
now similarly if you were to find the square of numbers you would like to create a user
defined function or use a for loop to do it so let me show you how you can proceed
so before to define a function so first i'll import
the math module present in python and then let's say i am defining a
function called square and i'll pass in a parameter as a
then i'll write e is equal to i'll use the power function
so i'll first give in my module name that is math and use the power function that is pow
and i'll pass in my parameter that is a and since we want to find the square
i'll given 2 and i'll return my parameter that is a
if i hit shift enter now we have successfully run our user defined function
now let me call that function if i write
square of a it has given me one by default
now suppose i want to find the square of integer five
you can see it has given us the square of 5 that is 25
now to find the square of a number you can also create an empty list and use a for loop to iterate through a sequence
of numbers and append the square of numbers to that empty list so let me show you how you can do with
this process suppose i declare an empty list called squares
i'll pass in my empty list and then i'll use a for loop say for example for
i in range i'll give 10 as my range
and then i'll append my square value so i'll
pass in my empty list that is squares dot append
so i'll use squares dot append and pass i into i
and then i'll just call my empty list squares
if i hit shift enter you can see from 0 to 9 that is a range of 10 values
it has printed all the squares of those integers
now these two methods that we just discussed need at least three to four lines of code but by using a list
comprehension you can find the square of numbers in just a single line of code
so let's use a list comprehension to find square of 5 whole numbers between 0 and 20 having an interval of 4. so i'll
use squares is equal to
i'll say x double multiplication operator
into 2 for x in
say range i'll pass in my range that is from 0 to
20 with an interval of 4. now i'll
print squares if i hit shift enter you can see it has printed the square of
values so first the number is 0 so 0 square is 0 then the number was 4 so 4 square is 16 8
square is 64 then 12 square is 144 and then 16 square
is 256. moving ahead
in the next trick i'll show you how you can keep track of the index positions and the items in a
list so for that we will use the enumerate function to print the item values along
with the index positions so let's say i have a list
that has items say 310
294 i'm taking random integers 450 and say 243
and now if i use a print statement suppose
i'll write using the enumerate function
then i'll use a for loop say for example for index
comma element in
enumerate i'll pass in my list that is list underscore items
after that i'll use a print statement
i'll pass in index and then i'll give
a list and that will have my index
followed by the value
i'll use another comma and pass in the element
now if i hit shift enter you can see we have printed the index position as
well as the item value so at index 0 we have 310 at index 1 we have 294
similarly for index 2 and 3.
now moving ahead let us understand how we can convert to less into a dictionary so a dictionary
as you must be aware comes with a key value pair you can use the dictionary method and
pass the zip function with our list as parameters
so let me define our two lists say item number and names so i'll use
item number and give him some random whole numbers
102 410 and let's say 321
and i'll use my second list that is names and let's say this list has
some string values like phone next is laptop
and then we have say tablet
now i'll
assign a variable say item dictionary
is equal to i'll use the dict function and then pass in zip
and i'll pass in my parameters item number and names
finally i'll print my newly created dictionary that is item
dictionary now let me run it
so you can see we have a dictionary created out of the list so our keys are 102 410 and 321 and the
item values are phone laptop and tablet
now you can check that in the following way so i'll pass in my dictionary
and then i'll use the keys function to get the keys from the dictionary so you
see we have all the keys printed similarly if you want to print the
values from the dictionary i'll use the values function
so that will print all the values you can see we have phone laptop and tablet
now we look at how you can find the common elements in two list so let me declare my first list as list
underscore a that will be equal to davis
then let's say we have keren then we have
john we have frank next and then let's see we have another
person say steve and let me declare my list
b so list underscore b is equal to i'll take kerin
next we have davis then suppose we have
jack up next we have
george and then say we have steve again
now to find the common elements i'll use variable let's say common
and i'll again use a list comprehension say a
for a in list a
then use for b in list
b then i'll use an if clause so if a
equals to equals to b then i'll
print the common variable if i run this you can see we have the
common elements printed from both the list a and b so davis kerin and steve are present in
both list a and b next let's see how you can remove the duplicate items in a list
such problems you would often come across while doing data analytics so the idea is very simple just need to convert
the items in a list into a set so that will remove all the duplicate items in a list
so suppose i have a list of numbers let me take random whole numbers 20
22 24 so 26
then we have 28 repeated twice and then again suppose we have 20
and we have 22 and let's say we have 30.
now let me go ahead and print my list
so i'll say original list
equals to and then i'll pass in my
list that is list numbers after that
i'll convert my list that is list numbers into a set
so i'll first use the list function and then inside of that i'll pass in my set function and then declare
my list that is list numbers
finally i'll print my new list so i'll type
list after removing duplicates
that will be equal to i'll give a comma and then pass in my
variable that is list numbers if i run it
you can see our original list has all the elements that has duplicate values and the final list the output you can
see we have only the unique elements printed moving on
now let's have a look at how you can merge two dictionaries so there are two methods to do this
before that let's see how the code would have looked like had you merged the dictionaries using python 2 version or
python 3.4 version and below so let's see i have two dictionaries say
team a i'll use curly braces to declare my
dictionary i'll give my key as one and i'll take davis
i'll give my second key and see i have
andrew in my team and then let's say i have my
third key and let's see i have kerin
similarly let me declare my team b dictionary
i'll take the next key as 4
and the next person would be say john
and then i'll use my fifth key
we have angela and let's see i have my final member in
the team the sixth member who is suzanne
now if you do it in python 2 or python 3.4 version and below i have to define a
function so let me say define merge underscore
teams which will be my function name and i'll pass in two parameters say
dict 1 and dict 2
then i have dict 3 indict 3
i'll use the copy method so i'll use dict
1 dot copy
then let me go ahead and use my
dict 3 dot update
i'll pass in my dict 2 and then
see i'll return my dict
3 finally i'll print it so i'll use
merge underscore teams then pass in my two parameters as team a
comma team b if i run it oops there is a mistake i
have made so this should be dict 2 actually
so let me run it once again you can see we have merged both our dictionaries
now you can see it has around six to seven lines of code or even more
now if you want to do this task using python 3.5 version and above you can use the update method so let's see how we
can do i have say a is equal to
i'll pass in my dictionary as
a has value of 1 say b has a value of
2 let's say b also has a value of 1
and my second dictionary would have key b again
and it has a value of 2 and key c
will have a value of 1. now if i write a dot
update b and if i print a let me run it you can see we have merged
both the dictionaries here now there's one more method which you can use
let me show you so i'll copy paste my team a and team b again
and then let's say i'll declare another variable called
final team that will be equal to i'll use curly braces and then say
i'll give 2 star and then team e comma
2 stars again and then team b
then i'll print my final team if i run it you can see we
have merged both are t m and b and this is our final team that has six elements
now before moving to the next trick if you have enjoyed watching this video so far then please consider subscribing to
our youtube channel and hit the bell icon to never miss an update also if you want to get the source file
i am using in this live session then please mention your email ids in the chat section we'll share the source code
with you over email now let's move on similar to a list comprehension we can
also create a dictionary comprehension let me show you the trick
suppose i want to find the square of numbers so i'll pass in my variable that
is square and i'll use my dictionary comprehension
say x comma x star star 2 this will find the square of
a number for x in range
say 5 so i want the square of the first 5 numbers then let me just
call it you can see it has printed
a dictionary that has the square of numbers from 0 to 4 that is 5 numbers so
0 square is 0 1 square is 1 2 square is 4 3 square is 9 and 4 square is 16.
now let's see the trick to check if all the elements in a sequence are true or false based on a condition
you can do this with the help of all function all function in python returns true if all the items in an iterable are
true otherwise it returns false so i'll directly use my all function
so i'll say all now let's see i'll use a variable a
percentage 2 if it's equal to equal to 0
and i'll say for a in range
between 0 to 10 with an interval of 2 if i run it
it gives me true because i have defined my range from 0 to 10 and an interval of 2 so the
numbers will range from 0 2 4 6 8 and so on
so all these numbers are divisible by 2 and the remainder is 0 so it gives us true
now if i change the third parameter in my range function see i'll make it
3 and i run it it gives me false
up next we look at a common programming question that you often get to see in any interview or programming test
that is swapping two numbers let's see the trick to swap two numbers in a single line of code
so i'll declare two numbers see x and y
let's say we have xs10 and ys20 i'll use a print statement
say before swap give a comma and i'll declare my
variables x comma y now to swap two variables i can simply use x comma y equal to
[Music] y comma x and then i'll again use a print
statement say after swap and i'll write x
equal to say
x and y
will have the variable y if i run it
you see before swap x had 10 and 20 and after swap you can see we have
x as 20 and y is 10. so we have swapped the values of the two variables successfully
now moving on the next trick i am going to show is how you can concatenate a list
containing strings so we'll use the join function for this
let's see i have a list characters and it has a list of strings
say p comma y comma
t comma h comma o
and we have the final string that is n now if you were to concatenate all the
list elements i'll declare a variable called word and
double quotation marks and then i'll use the dot operator and
join function i'll pass in my list that is
character then i'll print my variable
bird below you can see the resultant output so we have successfully combined or
concatenated each element or item in the list character so we have python printed
now let me show you how you can find the most frequently occurring values in a list
so i'll declare a list called test and suppose it has some random whole
number c one comma two comma three four
two comma two then we have three comma one comma four comma four comma four
i'll use print statement and pass in my max function
then i'll convert the list into a set
give a comma and then i'll use key is equal to
test dot count so what it basically does is it will first
count the number of times each element is occurring and then
find the maximum value out of it if i hit shift enter you can see it has
given me 4 which means the item 4 has occurred the most number
of times in my list you can see we have four four times
moving forward the next step is how you can use the if else statement using
ternary operators ternary operators are commonly known as conditional expressions in python these
operators evaluate something based on a condition being true or false
so i have my two variables a comma b and it has values
10 and 20 respectively now if i
use a print statement say both a and
b are equal
if a equals to equals to b
else a is
greater than b if
a greater than b
else b is greater
than a so first i am evaluating this condition
if a is equal to equal to b then will print both a and b are equal
else if a is greater than b will print a is greater than b if both the conditions are false we'll
print b is greater than a so let me run this
we have the output b is greater than a because our b value is 20 and a is 10 so b is
greater than a now let me create a numpy array and find the cumulative sum in a sequence of
numbers for this you can use the cumsum function first i have to import my numpy library
so i'll write import numpy as np
then i'll declare a variable say res which is for result
i'll use a list function and then pass in my sum function
and let's say i'll give a range of 10 finally i'll print the result
if i run this you can see we have calculated the cumulative sum of the
numbers ranging from 0 to 9 so the first element is 0 then the next
element is 1 so 0 plus 1 is 1 the next element is 2 so 1 plus 2 is 3
then 3 plus 3 is 6 6 plus 4 is 10 10 plus 5 is 15 and so on
let's now understand how you can use iter tools in python iter tool is a module in python that
implements a number of iterator building blocks it provides several functions that work
on iterators to produce complex iterators we will see an example to find the list
of matches to be played between the teams in a league here we consider each team will play against all the other
teams in the league so to use the item tools i'll first import it so i'll write import
iter tools and then let me go ahead and declare a
list say football underscore clubs
let me take a few club names say manchester
united then we have
real madrid i'm taking the top clubs from europe
the next club we have is say arsenal followed by
chelsea then we have say liverpool
and finally we have barcelona
then i'll use my list function and
use another function that is present inside the item tools library that is
combination so it will give me all the possible combinations
i'll pass in my list name that is football underscore clubs
and i'll give another parameter that is r equal to 2. if i run it
you have all the matches that would be played in this league as i mentioned each team will play
against all the other teams
now we will see the trick to print the total permutations in a given set of numbers using the item tool and its
functions now to do this i'll use a for loop so i'll use for
p in iter tools
dot i'll use permutations function so
permutations and then let's see i'll pass in my list that has values 1 comma 2 comma 3
and 4. i'll print it
i'll use print then i'll use the
join function convert it into a string
for x in p
if i run it you can see below we have all the permutations listed
up next let me tell you how you can print all the false values present in a list
now to do this we can use the filter false function present in the item tools module
so i'll use list and then
use my item tools dot
filter false function i'll pass in
bool as my data type let's say we have a list containing none
then we have false we have 1 comma 0 comma
10. if i run it it will print all the false values
present in the list so we have none false and zero so if you have liked watching this video
so far then please subscribe to our youtube channel and hit the bell icon to stay updated with all the trending technologies
also if you want to get the source file that i am using in this live session then please mention your email ids in
the chat section our team will share the source code with you over email again if you have any questions related
to the tips and tricks we have discussed so far then please put your queries in the chat section our team will answer it in the
chat up next let me show you the trick to perform
certain mathematical operations inside a list containing pairs of tuples first we look at how to add elements in
a list of tuples so for that i'll import my iter tools
you can skip this step because we have already imported a writer tools module and then i'll import
operator we have
a list of tuples say a2 comma 5.
then we have 10 comma 4 we have
another pair says 60 comma 3. now i'll use
list function and inside of it i'll use my item tools module
so i'll write iter tools dot star map function
and i'll use my operator
and add comma i'll pass in my list that is a
now if i run it we have the addition of the pairs of
tuples present in the list so first pair is 2 comma 5 so the addition
is 7 then 10 plus 4 is 14 and 60 plus 3 is 63.
similarly you can also multiply the pairs of tuples in a list
and just copy paste this code and here instead of add i'll use
mul to multiply if i run it we have the output below
so 2 into 5 is 10 then the product of 10 and 4 is 40 and 60 and 3 is 180
now let us explore a bit about the collections module in python so the collections module implements
specialized container data types containing alternatives to python's general purpose built-in containers such
as list tuple dictionaries and set i'll show you how to change the order of
the keys inserted in a dictionary using the ordered dict function
so first i need to import the ordered dict function from the collections module
so i'll write from collections
import ordered dict function
then i'll say d is equal to
ordered predict dot
i'll use the from keys
and let's say i have my key as e b c d e
then i'll use another function called move
to end and let's say i want to move my key b to
the end then
i'll use inverted commas and pass in my join function
and inside that i'll say d dot keys
if i run it you can see we have shifted the key b to the end
now if you want to move the key b to the beginning you can do something like this
so let me copy the last two lines of code from the above cell
i'll paste it now here i can give another
parameter that is last and i'll say false
if i run this can see we have the key b in the
beginning now now the final trick i am going to show you is how to perform mathematical
operations using a lambda function in python so lambda is an anonymous function that
does not have a name it can have any number of arguments but only one expression
the expression is evaluated and the result is returned so let's see how to add and subtract
numbers in one line of code using the lambda function so first i'll declare a variable say
function is equal to and i'll assign a dictionary
i'll pass in my sum and then
use the lambda function i'll pass in variables x comma y
and i'll add x plus y similarly
i'll now subtract
i'll use the lambda function again pass in my variables x comma y
and i'll write x minus y
now let me run it so if you want to find the sum of two
numbers so i have to call this first so i'll use func
and using square brackets i'll give my sum and then pass in my values say 10 comma
3 this will add 10 plus 3 and return the result as 13 similarly
if you want to subtract two numbers i'll just write
subtract here instead of sum
and it will return the result that is 10 minus 3 that which is seven
i think with that we have covered all the important tips and tricks that you should know in python welcome to python
interview questions certainly the questions we're going to ask in here are very general with a few
specifics towards data science since that's the main direction that python's going in and you'd want to expand your
questions for your interview depending on the domain that you're using the python in specifically let's dive in and
get started with some python interview questions number one what is the difference between shallow copy and deep
copy and you can see with shallow copy we have object one which has child one child two child three and so on and
object two which has child one child two child three a deep copy creates a different object and populates it with
the child objects of the original object therefore changes in the original object is not reflected in the copy copy.deep
copy creates a deep copy shallow copy creates a different object and populates
it with the references of the child objects within the original object therefore changes in the original object
is reflected in the copy copy.copy creates a shallow copy and you can look
at this if we make a change to child one it's only a pointer so if you make it in object one and change to child one and
object one it will also make that change in object two number two how is multi-threading achieved in python oh
this is a good one with multi-processing and multi-threading this question is actually asking you do you know the difference between multi-processing and
multi-threading and how multi-threading works multi-threading usually implies that multiple threads are executed
concurrently the python global interpreter lock doesn't allow more than one thread to hold the python
interpreter at that particular point of time so multi-threading in python is achieved through context switching it's
very different than multi-processing which actually opens up multiple processes across multiple threads so
multi-threading discuss the django architecture so the django architecture
and the first thing to know is that the django is a web service way to build your web pages basically and so we look
at the architecture you can see here we have a nice model drawn out where the user initiates the django which
initiates the url which indicates the view what they're going to view and you have your model and your template so the
model of data whatever data model you're pulling goes into the template and then goes back up the pipeline to the user
and the important thing to note is there's a template the front end of the web page this is what they're going to see there's a model the back end where
the data is stored so you can keep the template and the looks and everything looks the same but you can swap out the
underlying formation that goes into that template then you have your view which interacts with the model and template
and maps it to the url and then the django serves the page to the user so
your django grabs it and says okay thank you for the url and here you go user what advantage does numpy array have
over a nested list so numpy's a module you import almost always see numpy
import numpy as np numpy is written in c such that all is complexities are backed into a simple to
use module lists on the other hand are dynamically typed therefore python must
check the data type of each element every time it uses it this make numbi arrays much faster than lists i would
also add in that numpy has a lot of additional functionality that you don't have in lists there's a lot of things
you can automate in the numpy quick flip over to our jupyter notebook any ide will work if you're going to do a set of
interview questions taking a quick look at code is always important we have our import numpy as np we'll go and import
time here's our list list sub for iron range of 100 and what we're doing is we're going to time it so we're going to
create a list then we're going to create a numpy zeros array and you can see here look how quick you can create this numpy
zeros array here we are appending one zero at a time for a regular python list and here we are with numpy they're all
zeros and they're all of type integer i believe it's either float or integer on this i'd have to actually do a type on
it and then so if we take in and we create a tl1 time equals time and then we do for i and range of 100 for j and
range of 100 l of i j equals l of i j plus 5. so we're just doing a simple
calculation on our array and sub arrays this is an array of rays and we'll do the same thing with tl2 tl2 time.time
tl1 so here we have our final time on that and then we'll do this with an array array op and this is what i really
love a equals a plus 10 and then you can just print it right out so you can see right here with a numpy array i'm doing
the same thing if i run this our time is significantly different here we have
0.09 and 0.003 so you can see that the time drops significantly when you're running this
on a numpy array versus a list array also important to note these times aren't going to be they'll change each
time i run it depending on what i have running in the background so there we go number five what is pickling and
unpickling amazes me how many times i pickle and unpickle something converting a python object hierarchy to a byte
stream is called pickling pickling is also referred to as serialization unpickling converting a byte stream to a
python object hierarchy is also called unpickling unpickling is also referred to as deserialization so if you just
created a neural network model you can now save that model to your hard drive
pickle it and then you can unpickle it to bring it back into another software program or to use at a later time how is
memory managed in python number six python has a private heap space where it stores all the objects the python memory
manager manages various aspects of this heap like sharing caching segmentation and allocation the user has no control
over the heap only the python interpreter has the access you have a nice little diagram here here's your
program there's your interpreter we have our heap memory management on the garbage collector going off of there
number seven are arguments in python pass by value or by reference arguments
are passed in python by reference this means that any change made within a function is reflected on the original
object so you can see here def function of l l of 0 equals 3 l equals one two
three four function l print l and you're gonna get three two three four because
we passed l in there so it's a pointer here we have def function l l equals
three two three four l equals one two three four function of l print l because
in this function i have assigned instead of operating on a piece of l the list
i've consigned a whole new value to that list or l it then at that point will create a new object so if i make changes
to the object it's going to change it in the outside the definition if i use a
variable and i cited a completely new value like l equals three two three four that will not show up when you're
outside the function number eight how would you generate random numbers in
python to generate random numbers in python you must first import the random module the random function generates a
random float value between zero and one the random range function generates a
random number within a given range and you can see here one is the lower end
tens the upper end and step two so it would be one three five and so on as far
as the options in the random generation number nine what does the double forward
slash operator do in python the forward slash operator performs division and
returns the quotient in float for example 5 over 2 returns 2.5 to do a
double forward slash operator on the other hand returns the quotient an integer for example 5 double slash
returns 2. 5 divided by 2 and you drop the 0.5 number ten what does the is
operator do the is operator compares the id of the two objects and you can see in
here where list one equals brackets round one two three list one equals list
two equals true and you have the double equals in python of course and you can do list 1 is list 2 where list 2 equals
1 2 3 is false list 2 is not the brackets 1 2 3. it equals it but it's
not the brackets and if we do list 3 equals list one then list one is list
three equals true number eleven what is the purpose of pass statement the pass statement is used when there's a
syntactic but not an operational requirement for example the program below prints a string ignoring the
spaces and so here we have variable equals simply learn we've added two spaces in it for i and variable so it
goes through each eye if i equals space do nothing else print i and then we'll
have the end equals bracket bracket and they'll print out simply learn now of course you would probably write this if
i does not equal blank space print but this would be another way you could do that if you need a placeholder for that
first logical set or that first area you can also do a function like this you could do function whatever your def
function name brackets colon pass so it goes into the function and does nothing
but it's a placeholder number 12 how will you check all the characters in a string are alphanumeric python has an
inbuilt method is all number which returns true if all characters in the string are alphanumeric and so you can
see here abcd123 is all number output equals true and the
second line a b c d the at symbol 1 2 3 the pound symbol is all nume output
equals false so really you just want to know about is all new all numerical alpha numerical number 12 how will you
check if all characters in a string are alphanumeric so here we go if you know is all number which returns
that the characters in the string are alphanumeric one can also use regex instead and so we have boolean rematch
what's important about this is to note your capital a dash to capital z a lower
cost to z 0 to 9 means that that array includes all of those the way they have
it written out plus a dollar sign and then we have what we're comparing it to the string we're comparing to the
abcd123 and so we can do an re.match and if it matches if all these things if all
the different entities in that array matches the first one we get an output true and if not an output false number
13 how will you merge elements in a sequence sequence there are three types of
sequences in python there's lists tuples and strings python acoustics makes this
easy if we have a list one and list two and list one is uh square brackets one comma two comma three list two is four
five and six we can simply do list one plus list two and our output is one two three four five six if we have tuples
your tuple is the curved brackets designates it and again just add them together same thing with strings we have
simply learn s1 plus s2 equals simply learn number 14 how will you remove all
leading white space in a string python provides the inbuilt function l strip to
remove all leading access from a string and you can see here spacebase base python.l strip leading strip python and
you can also do strip which release leading and ending of course there's also the ending set number 15 how will
you replace all occurrences of a stub string with a new string the replace function can be used with strings for
replacing a substring with a given string syntax string dot replace old comma new come account replace returns a
new string without modifying the original string hey john how are you john question mark replace john with
capital j-o-h-n one and then you can see right here hey john how are you and since we designated with the one just
says we're only going to replace one of these 16 what is the difference between dell and remove brackets on lists dell
for delete dell removes all elements of a list within a given range syntax dell
list start to end remove remove brackets removes the first occurrence of a
particular character syntax list remove element and we see a nice example over here if we delete the list one to three
it will delete the first in this case b one two it doesn't do three remember that one two so we'll delete b and c and
you end up with a d where if we do remove b from the list and we have an a b b d it's only gonna remove the first b
number seventeen how to display the contents of text file in reverse order
open the file using the open function store the contents of the file into a list reverse the contents of the list
run a for loop to iterate through the list number 18 differential between append
and extend append adds an element to the end of the list you can see right here
we have a list one two three four and we append four we end up with an output one two three four and extend adds an
element from an interval to the end of the list and we have here list equals one two three list dot extend four five
six output is one two three four five six so if you wanna append an array to
the end of another array you want to use the extend number 19 what's the output
of the below code justify your answer this is a great interview question because these are the kind of things
that come up when you're proofing code def add to list value and list so we have value in and a list in or list
equals an empty in this case an empty list list data pin value return list list one equals add to list one list two
equals add to list one two three empty bracket list three equals add to list a and then
we want to print them list one equals and you can see the formatting we have our placeholder list one list two and
list three so when it prints list one we get one comma a and what you want to notice here is that list 1 and list 3
are equal why are they equal well when we passed the information to the add to
list we passed value without passing the list equals brackets without passing a second value what this means is that
list as we have it if you don't have a list it'll start off with empty list
which we append the one to the second one list two we appended a value to an
empty list so it's only going to be one two three it doesn't matter what the list was before we've already assigned
an empty list and then list three here's the tricky one we're adding a to the
list but because we didn't designate the list list is a shared value in other
words it doesn't reset it and we end up with list one equals list three one comma a default this is created only
once during the function and not during its call number 20 what is the difference between a list and a tuple
lists are mutable while tuples are immutable and you can see an example down here where i have list equals one
two three square brackets denoted it's a list list of two equals four and i printed out i now have one two four if i
do the same thing with the tuple i get an error because you can't change the tuple one two three into one two four
you have to completely reassign tuple to a new value what is doc string in python
dot strings are used in providing documentation to various python modules classes functions and methods and so you
can see here we have def for a function add a b and this is a doc string we have
the triple brackets on there you can add carriage return in that so that you can go multiple lines and it says this
function adds two numbers and then sum a b return sum and so we have down here
two different ways of accessing this function output accessing docstring method one this function adds two
numbers accessing docstring method two help on function add in model main this
function adds two numbers and so you can see the code down here has two very different in values the second one is
basically a help menu there's our help menu number 22 how do you use print
without the new line the solution to this depends on the python version you are using in python version 2 you can do
print hi and then you add a comma afterwards print how are you and you have hi how are you in version three
print hi comma end equals and it'll add a space on the end there you can put
different characters in there but you just want to put a space to put a space on the end print how are you and now we get hi how are you number 23 how do you
use the split function in python the split function splits a string into a number of strings based on a specific
delimiter so we have string split delimiter comma max the maximum number of splits the character based on which
the string is to split by default is space so here we have an example we have a variable red blue green orange and we
want to split it by commas and we only want to do the first two so if we print the list now you'll find it has red blue
and only spread it split it the first two times and it gets to the third one and just groups them all together green and orange if you leave the two off
you'll split the whole thing number 24 is python object oriented or functional
programming python follows object oriented paradigm and you should really know in depth what they mean by
object-oriented paradigm if you're doing any interview for scripting languages python allows the creation of objects
and is manipulation through specific methods it supports most of the features of oops which has inheritance on a
polymorphism so you have an object and you can inherit all the traits of that object and then add new traits in or
alter some of those traits that's what object oriented means python follows functional programming paradigm
functions may be used as first class object python supports lambda functions which are characteristic of functional
paradigm so you can set a variable to a function as opposed to setting it to an object number 25 write a function
prototype that takes variable number of arguments here we have def function name list so we could have in this case
whatever the list is def function the asterisk denotes so we're going to take multiple arguments of a variable and we
can do for i and var print i so if you send function of one you'll end up with
a one function one two five six i'll actually print those out one at a time the first one just prints out a one
because it only sent one variable the second one will print one another line twenty five and the line six number
twenty six what is asterisks args and asterix korgs args used in function
prototype to accept varying number of arguments it's an iterable object def
function arcs and you can imagine it's just a basic list so if i send add the
numbers a comma b or a comma b comma c it doesn't really matter it will have
that number of objects in it whatever i send to it and there's other uses for it but that's very basic korg's i can
actually tell it what i want to send so using a function prototype and to accept
varying number of keyworded arguments it's in both are iterable objects so you can go through them one at a time and
the def function chords you can now set like color equals red units equal to so
you'll see that especially in machine learning there's a lot of like they'll have inline equals true that kind of
thing number 27 in python functions are first class objects what do you
understand from this this means i could return a function from another function i could create a
function and treat it just like an object i can assign it to a variable i can pass them as arguments to other
functions number 28 what is the output of print name underscore underscore name
and justify your answer the double underscore name double underscore is a special variable that holds the name of
the current module program execution starts from main or a code with zero
indentation thus double underscore name double underscore name has a value double underscore main double underscore
in the above case if the file is imported from another module then double underscore name underscore double
underscore holds the name of this module number 29 what is a numpy array and we
briefly touched numpy array compared to a list early in processing speed now let's go ahead and look at some of the
more specifics a numpy array is a grid of values all of the same type so if
they're either all float all integer all string and is indexed by a tuple of non-negative integers the number of
dimensions is the rank of the array and the shape of an array is a tuple of integers giving the size of the ray
along each dimension number 30 what is the difference between matrices and arrays a matrix comes from linear
algebra and is a two-dimensional representation of data it comes with a powerful set of mathematical operations
that allow you to manipulate the data in interesting ways now arrays an array is
a sequence of objects of similar data type an array within another array forms a matrix like we said here
two-dimensional so if you have an array of three by four that would be a matrix number 31 how to get indexes of n
maximum values in a numpy array of course the first thing to do is to import your numpy as np you don't
necessarily have to use mp but that is the most standard use of numpy we create our array equals an np.array of one two
three four five and then if we want to get our indexes of n at maximum values in a numpy array we can do
one way to do it is to take our array sort it then do minus in colon that
means we're going to do once you've sorted it you can do minus in n would
equal then the number of entities so it's not the actual letter n colon and really this is about understanding this
notation that we can sort it so it goes from lowest to biggest then we can get the top values for n indexes and then we
have our final set of brackets with the minus one on there number 32 how would you obtain the resulting set from the
train set and the test set from below and let's go ahead and look at the two different variables we have train set
equals an array of one two three test set equals a numpy of ray of arrays we
have 0 1 2 1 2 3. what's important here is that one it's a numpy so that leaves
a out and then we're stuck with three other options and i'm going to say the d is out none of these and let's look at
np.concatenate versus np.vstack concatenate would put one set
after the other so you would end up with probably give you an error because one set is one two three and then we're
going to concatenate array 0 1 2 and 1 array 1 2 3 the array of arrays onto the
end of that what we really want to do is stack and by the way you can actually switch there's variables you can put into concatenate obviously they can
change this so you could use the concatenate with a lot of fudging around but really we're looking for is v stack
v stands for vertical versus the hdac which is horizontal and if we do a v stack we can simply do train set comma
test set and stack them together and so we have c resulting set equals np.v
stack train stack test set both option a and b would do horizontal stacking but
we would like to have the vertical stacking option she does this again you could add the axes in and use the
concatenate to stack it the correct way number 33 how would you import a decision tree classifier in sk learn we
have sklearn.decision tree import decision tree classifier from sklearn ensemble
import decision tree classifier and we look at these and they're all import decision tree classifier that actually
last part happens to be correct and it's really just a vocabulary knowing where is the decision tree classifier stored
what module is that a part of and it is of course part of the sklearn.tree number c number 34. you have uploaded
the data set in csv format on google spreadsheet and shared it publicly how
can you access this in python what's important here is to know that we can read stuff with pandas so we don't show
it here but you can there's actually a number of ways to do this what's important here is to know a couple things one we have our link generated
from the google docs and spreadsheets and then we can do a string i o dot
string i o request get link dot content so there's our source and then finally
we know that pandas can read a csv there's obviously many ways to read a csv but data equals pd.read underscore
csv source number 35 what is the difference between the two data series
given below below we have df name and df location colon comma brackets around
asterisks around name comma where and then we have df equals pd data frame
aabb xxuu comma 21 165033 columns equal name and age so let's take
a look and see what they're looking at we have just glancing at the questions they want to know is it the original
data frame or is it the copy of the data frame and you can see here that one is
view of the original data frame and two is a copy of the original data frame two is a view of the original data frame and
one is a copy of the original data frame both are copies both are views and if you're working with pandas you know that
unless you specifically in certain things tell it to do it in line and a lot of functions don't allow you that
you're always taking a slice and it is always a copy so c both are copies of
the original data frame number 36 you get the following error while trying to read a file temp dot csv using pandas
which of the following could correct it so here's our error trace back most recent call last file input line 1 and
module unicode encode error ascii codex can't encode character oh i hate it when
that one comes up and we have four different entries we'll go ahead and just pretend the d doesn't exist unless
we really can't fit it into one of the other answers and the first one is pd read csv has our file compression equals
gzip well gzip is just an unzipping and you actually get a zip error on there the second one is dialect equals string
again not an encoding or coding setup and then we have encoding equals utf-8
well that would be the encoding error switching it from the character code there's utf-8 there is unicode that's
the most common two that goes between so really this is about understanding the difference between a utf-8 coding and a
unicode and the error that comes up quite regularly with that number c encoding should be utf-8 number 37 how
to set a line with any plot given below so looking at this we have import
matplot library pi plot as plt and you should know your way around this how to do a plot in there plt.plot plt.plot1234
plot equals show and so this is a little bit of a vocabulary test the vocabulary is it width equals three line width
equals three lw equals three or something else and the vocabulary word that we're looking for is lw equals
three which stands for line width in pi plot library pi plot number 38 how would
you reset the index of a data frame to a given list so this is a vocabulary
challenge and understanding what re-indexing is re-indexing as we have the different values here we have the
first one which is reset the index well we're not really resetting the index re-index number b means we are double
checking our indexes to the column and to the main index and so the values match correctly where reindex like now
brings in a new index outside of our data frame to a given list so this is coming from external and thus the
vocabulary word like is our keyword that is external and we have a data friend to a given list number 39 how can you copy
objects in python the functions used to copy objects in python we have copy copy
for shallow copying and copy deep copying for deep copy number 40 what is
the difference between range and x range functions in python well this is a good
one we have matrixes and arrays with a matrix the range returns a python list object x range returns an x range object
and with arrays an x-ray returns an x-range object x range creates values as you need them through yielding the key
here is that x range returns the values as you need them so it actually
processes it post like if you have for x or for a variable in x range it is
processing them as you need them zero to nine it doesn't create an array zero to nine it just hands you zero then one two
three four one at a time number 41 how can you check whether a panda's data frame is empty or not the tribute
df.empty is used to check whether a panda's data frame is empty or not and so you can simply create a we have down
here importer pandas is pd we create our panda's data frame equal to an empty array and is df dot empty comes out as
true one of the catches you got to remember with these vocabularies is with empty along with some other pandas set
up whether you need the brackets or not at the end number 42 write the code to sort an array in numpy by the n minus
one column this can be achieved using arg sort function let's take an array x
then to sort the n minus one column the code will be x to x to colon n minus two dot args sort so
let's see what that code looks like we import numpy as np we'll create our array our numpy array which is uh one two
three zero five two two three four so we have three different entities with three
different columns in there and we go x of x and so we take x of
all the rows first entity well in this case it's actually the second one because it's zero one two dot arg sort so that would
be the second entity or minus two would also be the same you could also do instead of one you could also do minus
two there instead of the one arg sort and then we get an output of the array one two three zero five two two three
four number 43 how to create a series from a list numpy array and dictionary
so we'll go ahead and input import our numpy our pandas and have my list and you can see here we have my list equals
list of a b c d e f g over all the way through so my list now makes a list of that for
array we have np.a range to 26 my dictionary will create a dictionary with
a zip my list my arguments so i'll just use the numpy array we just created with my array to go into
the dictionary and the solution is simple with the pd.series my list pd.series myarray
pd.seriesmydictionary so it's all about knowing the dot capital s-e-r-i-e-s don't forget that capitalization number
44 how to get the items not common to both series a and series b and you can
see here we have instead of series a and b we have series one and two and we have one two three four five four five six
seven eight the solution is we take a panda series we have a series u equals a
panda series np union one dimension series one series two so we can now make a union of them we now have series one
panda series with an intersection and then we can remove one from the other
series u is series u dot is in series one so if the union is not in the
intersection then you know it's a unique value a little bit of logic going on there playing with three different terms
to get the answer we want 45 how to keep only the top two most frequent values as
it is and replace everything else as other in a series so again we're working
with pandas because if we're talking series and data frames that means we're working with pandas so we're going to
import pandas as pd we'll go ahead and create our panda series we're going to do that by creating a numpy random
random state 100 so 100 in the numpy one and then we have our panda series you
can see here we're a random integer numpy random to a random integer 1 comma 5 by 12. and so the solution for this is
we go ahead and we've created a pd dot remember the capital s series solution we're going to print the top two
frequencies and that is our series dot value counts and then we take series
values count dot index of up to two so we're going to take everything up to two and then we'll do the series is in so if
it's not in the first two then it's going to equal other and this would be something you'd want to write down on
paper if you're if it looks confusing take a moment pause the video write this down and see if you can
figure out how the logic came together and try to throw yourself a couple other little logic puzzles like this number 46
how to find the positions of numbers that are multiples of 3 from a series
and in here we're actually going to use a numpy to solve it the first part series lets you know it's going to be a
panda series and if we come down here we have np.arghware so this is a vocabulary
question series with remember the percentile 3 is a remainder so if the
remainder equals 0 then we're going to generate that string where the object divided by 3 equals 0 has no remainder
so then we know it's a multiple of three number 47 how to compute the euclidean distance between two series and this
one's really cool because we have our panda series p and q and what i like about this one is they give us two
solutions you can go with and really you should kind of know both the first one would be yes you know what the euclidean
distance is and that is we can take the first series minus the second series squared and then sum them up and then we
do the square root which is the same as taking the power to 0.5 doing the power to 0.5 is easier than doing the square
root so a lot of times you'll see that as a switch but you could have also done the square root and used the math in there so there's solution one you should
know your euclidean distance and then solution two is the numpy solution so we have np dot
lin-alg dot norm that's how we're gonna compute our euclidean distance
p minus q very elegant and very straightforward and easy to compute number 48 how to reverse the rows of
data frame so here we have our data frame we're going to create a numpy array by 25 reshape it five minus one
and this creates a 25 by 25 data frame and so our solution is to do the dfi
location and this is just understanding how steps work the steps you have your
colon colon minus 1 so we're taking all the rows all the columns minus one so
we're stepping minus one going the reverse direction and then we're just going to use across all the different columns on there let me say that again
the first colon is going to be your row starting row stopping row step minus one
that's all this is about is that step minus one comma and then all the columns forty-nine if you split your data into
train test splits is it possible to over fit your model and the answer is yes is
definitely possible one common beginner mistake is retuning a model or training
new models with different parameters after seeing his performance on the test set my favorite example of this is you
have your script put together and you keep hitting the re-run button until you
get the answer you want not taking the answer it first gave you or running it over an array recording all the answers
to see how they vary number 50 which python library is built on top of map matplot library and pandas
to ease data plotting the answer this is seaborn seaborn is a data visualization
library in python that provides a high level interface for drawing statistical information informative graphs so thank
you all for watching this session on python developer full course i hope this video was useful and informative if you
have any questions then please feel free to put them in the comments section our team will help you solve your queries
stay safe and keep learning
you
what's going on guys assalamualaikum welcome to live what a cartoon welcome to amigos code and in this video
i'm going to teach you about python in this full course i'm going to make sure that at the end
you are so comfortable with this popular programming language if you're new to my channel
go ahead and subscribe and also give me a thumbs up so i can keep on recording these courses for you so
in this course i'm going to take you through the beginning level of python and make sure that you understand key
concepts so python is very popular and you can do a lot of good things with it
whether you are interested in machine learning data science ai building websites building back-end
services and a bunch more so i hope you are excited and without further ado let's go ahead
and learn about this awesome programming language
right before we kick off this course i want to make sure that you are part of the amigos code community
i'm going to leave the link in the description of this video so you can join the private facebook group as well as
discord and that way if you are faced with any issues or or literally any question that you might
have you can ask them on the group and the group will help you so the group is almost
10 000 members right now and it's growing and you should be part of it also make sure that you practice as i
teach right so when i teach make sure you practice if you want to take this course on your own
pace go ahead and enroll for free on my website where you can skip the videos one by one
without further ado let's go ahead and kick off this course
the first thing that we need to do in order to use python is to install it in our machine so
navigate to python.org and in this page right here you can see that
we've got the downloads link so go ahead and click on downloads
and right here because i'm on a mac i can see the download link for mac os but if you are
on windows simply click on windows or linux you can simply
use this the version specific for your operating system which is cool also right here you can see that these
are the active releases so the active release right now so the
latest one is 3.8 right here and if i show you so 2.7
has reached end of life so you shouldn't really be using this version right here and
if i scroll down you can see that we can have um you know specific release versions
right but usually just go ahead and download the latest version which has support until
2024 so right here see that the latest version as i speak is 3.8.5
you might watch this video later and if you haven't if there is a new version everything
that i'm going to teach you in this course will work with the version that you will install
so let me go ahead and simply download python there we go let's finish
now let me open up the downloads folder and in here you can see that i've got python
so let me simply click on it and let me just collapse this so the
installation process for both windows and mac os is really straightforward
you just simply have to press continue and then agree and then install
so before i actually press or actually put my password if you are on windows
make sure to tick the box that says add python to the path right so that's
really important so that you can use python from your terminal so on the mac it does it for me so right
here let me put my password install just give you a second and there
we go so we've successfully installed python next let's go ahead and install a
program that will allow us to write python code
right for this course we're going to download and install pycharm which is an ide ie
integrated development environment and what it does it allows you to write python code so it
gives you all the tools necessary for you to write code in python i've got a
full course teaching you this amazing ide so if there is things that you are not
sure or you think that there are so many things going on don't you worry because i've got you
covered i've got a full course just on pycharm and
i want to make sure that at the end of this course oh actually at the end of both these courses right so
learning python and then pycharm you have the tools ready there for you so you can start
exploring all the areas without further ado let's go ahead and download and install pycharm
when it comes to python there are two text editors which are the most popular one so
you've got vs code which is amazing but there is a product from jetbrains
called pycharm and this is by far the best ide for python developers
so go ahead and install pycharm because it's amazing and i always
recommend jetbrains product because the integration that they give you it's amazing right
so what pycharm really does for you it's like a text editor but with a bunch
of features that allows you to be more productive so with vs code you
actually need to install a bunch of plugins to get the best out of it but with pycharm everything is
out of the box so let's go ahead and download pycharm and in here you can see the version for let
me just zoom this so you can see a version for both or actually mac linux and windows so go ahead and
download the one for your operating system and also you can see that there are two versions so
you've got a professional which comes with extra features for web development
including html javascript and sql support but for most of the time the community
edition is more than enough so go ahead and download the community edition which is free and you don't have to pay
anything so i'm just going to allow just give it a second
all right so that's done let me open up the downloads folder and right here you can see that we have
the pie charm community so let's go ahead and double click on that
and then in here the installation process it's very simple so simply drag and drop
this into applications and there we go now let me simply search for pycharm
and then open it up open right here simply say
do no import settings if this is the first time that you are installing pycharm
and then right here so if you've never used pycharm go ahead and stick with these key
mappings you can also choose the actual ui theme so if you want light or dark so i'm
going to go with dark and what i'm going to do is simply skip remaining and set
defaults and there we go we successfully installed pycharm next let's go ahead
and write our very first python program
to create our very first program let's go ahead and create a new
project and right here you can give it a name as well as the actual location where the
project is stored so for my example i'm going to simply name this as
my and then python and then app and then you see right here
where it says base interpreter you can see that we have python 3.8 so
this is the version that we've just downloaded so if i click on this drop down you can see all the
different versions of python that i have but let's go ahead and stick with the latest one
and basically what an interpreter is it's a program that executes your python
code that's literally what it is and then right here you see that we have this checkbox create main dot py
welcome script basically if it sticked and tick it because i want to show you
everything from scratch go ahead and take the box if it is ticked and then
simply create and there you have it so inside of this
folder right here so my python app go ahead and open it up and inside what
we're going to do is create a new file so right click new and then
file and right here the name the name of the file simply call it as main and then
dot and then right here make sure that you type py so this is the file extension so the same with for
example javascript or java or golang you have for example
go for golang java for java and then dot js
for javascript with python is the same so dot py so right here let me simply
press enter and there we go so what i'm going to do is press command
and then one and you can see the keyboard shortcut that i've used down below so right here again command and n1 and
you can see the keyboard shortcut down here so let's go ahead now and write our very
first python program go ahead and type print and you can see
that pycharm is giving me auto completion there so inside of this print block go ahead
and simply add double quotes and right here simply say hello
and then me equals code and you can even add your name so now let me simply press enter
so i've got a new line and to execute this program simply right click
and then you can see so right here let me do it again so right click in here and you can see
that we have run and then main so this main right here is the name of our file so main dot py
you don't see the actual extension but it runs the main file so let's go ahead and simply
run and right here you can see that we have the low amigos
code right here if i was for example to change this to hello and then mariam
and then run you can see that we have mariam so there you have it this
is your very first python program
right let me first teach you a very important concept which you need to understand and that is
variables so to understand variables just think about
a box right so variable is a box right and with this box right here your
variable you have to give it a name right so let's say that we have this box right here and we name
it x for example now inside of this box right here the cool thing is that we can store
values inside right so just to illustrate so right here i've
got my pink phone and by the way don't laugh at me but inside i can store this phone right
here inside so now my variable x that we initially called x has the value of my phone right so my
phone is inside of the variable right i can close the box and this is my variable now right
now if you want to access my phone i can access through the actual name x similarly we can store
um so we're going to cover about objects what what this really means but
we can store for example so right here um i've got you can see uh it says keep calm and
bismillah but for example i could take all of those letters right and put them inside of this box right
and i'll close it and let's say that i've taken all of that and i put inside of this box right um you know for example this could
be for example your name right which is inside of this box which is your variable right so this is a
sequence of characters you can also store numbers right if you wish so primitives ie
one two three or decimal numbers for example the number of pi 3.14 um literally
anything that you want you can store within variables so throughout this course
you're going to learn about you know different data types so with variables right i've showed you
that you can store a phone you can store a sequence of characters so those are the different data types by
the different things that you can store inside of the variables but in this course we're going to create
lots of variables and by the end of it you should be really comfortable working with variables but next let's go ahead and
create our very first variables
right let's learn how to create variables with python so a variable it's a
placeholder it's a placeholder where you can store values so here let's
have this variable right here called name and in here we're going to have this
name called jamila so this variable so the name of its um it's actually name
right and then it holds the value jamila and this is a sequence of characters
right so j a m i l and then a now let's define another variable so age
equals 2 and then let's say 20. so now we have two variables so this
variable age contains a number so with variables when you define
variables you can store literally anything that you want right
when i say anything you can store numbers you can store lists that you will learn
later but for example you can have numbers and then here this is a list so
here i can store more than um two numbers right so you can see that
this is a list of numbers you can have sets you can have custom objects anything that you can
think of in the real world you can model in code and then store that
in variables right so variable so variables are placeholders that allows you to store
values when working with variables this is something that you have to be aware of so here
you see that we have age and i can say h equals two and then
pretty much just a string right so h equals to sad so here now what i've done is
i've reused the same name but then i did put something else
inside and in this case is a sequence of characters so you're going to learn about data
types and how to avoid this but for example if i say
this will be an integer which is a whole number you can see that now pycharm is telling
me that expected type ain't got str instead which is a string
data types and you'll learn more about data types in a second so let me just delete this because i
don't want to confuse you so just remember that if you have a variable like this you can
do it if you want a decimal number so here i'm going to say pi equals to
3.14 and this is a decimal value here
right so you see that we have a whole number decimals lists
this is a sequence of characters or strings this is how they are known as strings
and yeah so this is variables now one little trick that you can do is the
following you see here where we have name and age we can actually combine
all of these into one single line so i can say name and then age
oops comma age and then here i'm going to say comma and
then 20. so this is the same as this but in one line if you want it
right so this first name is assigned to this value so jamila and then the
second variable name is assigned to 20. finally let's delete
this variable right here h because we already defined it here
just like that and let's print all of these values so print and then
name print age print
pie and finally print numbers to run this i can right click
run main or click the play button and if you don't
see the play button is because so right here let me just go to edit configurations
and i'm going to delete this python and then main and then apply ok and you can see that
it's no longer there right so what we need to do is simply right click and then run and now the play button
comes right here so here you can see now the results from our variables so jamila 20
3.14 so that's pi and then our list and this is how to create variables in
python so throughout this course we're going to create lots of variables and you'll become really comfortable
working with variables
when it comes to naming variables with python you've got couple of choices if you have a single
world like name as we had before so here let's say james
so this is the variable name if we have full and then name so this is two words
we can do the following so if i type full name equals two and then j and then james
so you can see that this is the actual full name right you can use camel case right so this is
the first word is all case and then the beginning of the
second word you start with a upper case so this is common case or you can have
it like this so full underscore and then name so all lower case
so these are the conventions when it comes to python now obviously try not to use for example
names with for example ampersand so this will not work or names
with dollar sign um or names with comma for example right
or dot in it so they will not work right you can also have for
example um let's say age or upper case you can do it right so this is usually when
you want to define a a value that does never change like a constant
age is not constant because age is a value that keeps on going up and up
and up right so a constant would be something like the value of pi right so this this value does not change
so 3.14 but usually speaking for single words you'd start with lowercase
so never with for example name like that don't do this right don't do it it's not
the pattern so always start with lowercase if you have a second word
either use underscore or camel case right so common case here would be for
example like that so there you have it if you have any questions on naming variables
please do let me know otherwise let's carry on
when you define a variable you need to specify the value that goes inside of that
variable now that value has a data type so let me go ahead and simply say brand
equals two and then amigos and then code and right here h equals two and then
two and right here numbers equals two and for now simply add these
square brackets and i'm going to show you exactly what this means in a second but for now
i just want to show you the actual data types so go ahead now and print and then
type and then within parentheses and then pass brand let's also duplicate this so i'm
going to press command d a couple of times and right here i'm going to pass h and then right here i'm going to pass
numbers so let me actually delete that space there and in here you see that we have three
variables and we want to find out their data type so let's simply run it
and check this out so in here you can see that we have class and then str so
str simply stands for string and then we have class and then int for
integer so this is the actual whole number that i've mentioned and then in here for numbers you can see
that the data type is list so let me actually give you another example
so in here i simply have the value of pi equals two three oops three
point one four and let's also print the actual type of pie so let me
duplicate that and then in here pi just like that
run it and in here you can see that
the data type for pi is float so float simply means that it's a decimal
number right so anything that has a decimal number so in here three point
it's a decimal number whereas age is a whole number and a whole number
simply means that it's an integer so there you have it obviously you do have
some other data types such as dictionaries sets and so on but i'm going to show you
later in this course how to work with those so one final data type i want to show you
is so right here let's say is and then adult
and then equals to true so capital t and then r u e and
let's now also print the actual data type so in here is adult
and then run it and you can see that the data type for
this is actually bull so a bull or boolean represents true or false
so the the only available boolean values that we have with python is simply true
or false right so oops there we go so this is false
when working with python you will hear people saying that python is a dynamically typed
language and what that means the data type of any variable or
function is checked at runtime so here you saw that we had the brand so
here amigos code right so this so the data type for this is actually a
string now unlike languages such as java
right you would have for example the same is brand equals to an enemy course code
so here the differences is that with java and don't worry about this
this is java and if you want to and if you want to learn more about java i've got full course on java just
on java just like this one but here the key thing to know is that you have
to specify the data type here right whereas in python
it is optional you literally don't have to right the only thing that you need to
do is say brand just like that and then you say right so now this is my content
now if you want to be explicit when defining your variables i.e saying that this
is a string you can do it right you can do it so you can say
column so after the name of the variable and then the data type so str and you've
learned about data types the same with booleans so if i say is
and then adult equals two and then let's say false
so here if you want to be clear about it you can say dot and then boo so this is
a boolean right and this helps all the developers looking at your code knowing that this
is actually a string the data type of this is a string however you won't see many people doing
this with python right because python the reason why python is is simple and easy to
learn is because it removes all of these keywords that other languages have right so for
example if you have a method you just say def and you learn more about methods and
then hello and this is your method right so here i can say return
and don't worry about this for now you'll learn all of this so return and then hello right
so here you can see that the method is very straightforward this method is really easy to learn in
java for example you would need to do something like this you need to say public
and then string and then hello the bracket the and then the curly
brackets and then return and then hello right
just like that and here so you can see that this is much easier literally it's
much easier for beginners and to express whatever you want to do
right so this is why python is very attractive and has gained a lot of popularity for
its simplicity so in this function as well and let me just comment this you can have a
reference so in this function if you want to say that this function returns an a string you can say
here you can say that this will return an str just like that and it's a bit different
with functions but this is how you say that this function will return a string because here there's no way for
me to know whether this returns a string or or an integer because here i could say
for example one right and you can see that you know there's nothing stopping me of doing that however
if i now say here for example that this returns an int right you can see that this is actually
complaining so it's saying expected int go string instead now i just have to change this to uh
one right so this is the correct return type for this method right here but usually
you will see a lot of code without these types because you know the less you
write the better and and when python came out it didn't have these concepts of actually specified of
actually specifying the types so this is something to bear in mind when you work with python
and know that python is a dynamically typed language which means that the data type is only
checked at runtime and not compile time so you can see the way that we can
enforce the data type is by saying right so this variable has to be a string
or a boolean for example but in this course we're not going to worry too much about this
so specifying the data type for each variable that we create because it's not something that you'll
see quite often
we can have comments that describes what the piece of code or functionality is all
about so to have a comment is very straightforward add the pound sign right here and then here i'm going
to say i am a comment
there we go so this line right here won't be executed so right here this is
just a comment if i run the program we should see hello and nothing else so if i was to comment
out this line right here guess what's going to happen so because this is a comment if i run it
you can see that we have no output so comments are used for documenting your code
so right here let me simply go back so we have two types of comments we have
single line comments or we have multi-line comments so there are two ways that you can do
multi-line so for example here if i want to have another comment so a second
and then comment or if you want to have a third comment
you can also have a third comment and by the way i'm simply pressing so if i delete that i'm simply pressing command
and then forward slash and you can see that i do get this found sign right here so
in here third and then comment right so i can do this or
i can remove all of this and press the following so i'm going to press
quotes three times so one two three and then inside i can have my comments
so right here i don't need the pound sign anymore
oops just like that and now this is actually a multi-line
comment right here so if i was to run this program you can see that we only
have hello and if i move so in here if i move
print inside you can see that this becomes part of the comment and if i run it you can see that we get
nothing on the console so this is all about comments
let's learn about this awesome data type which allows us to store sequence of characters so you've seen
that we can have for example brand equals two and then within quotes so right here i
can see amigos code and now this variable right here brand
has this text so this text right here is a string so it's a sequence of
characters with strings we can enclose them with double quotes or single quotes just like this
now the cool thing about the strings is that they are very useful if you want
to store literally any text right so imagine you you have a program
and you want to store some text that you can then perform some actions upon so right here let me
go ahead and simply say print and then brand and if i run the program
you see that we have amigos code right here now what is interesting is that with
any given string right here i can say dot and then right here you can see that
we have a bunch of methods right here right so in here let's say that we want to
uppercase every single um character in this string right here if i run
this program you can see that now everything is uppercase so right here
have a look this now is all uppercase so these
methods right here that help us to work with strings so right here i can
also say for example replace and then a well actually this has to be within
quotes so capital a with and then lowercase a just like that
so if i run this you can see that now i've only replaced the first a right
there right so now it's lowercase but let's say for example you want to replace with let's say 33
run it and you can see that this now has been replaced so this is strings in a nutshell and let
me also show you another method so let's say that if for example you want to find out
so right here let me actually comment this for you so if you want to find out the actual
length right so how many characters that this string right here brand has simply
type uh let me actually show you a nice trick so simply type brand and then dot and then len so if i press
enter you can see that pycharm is doing its trick so basically we have to start with len and then
surround with parentheses on both sides and there you have it so if i run this
you can see that there are 10 characters or 10 letters inside of this brand right
here another thing that you can also do with strings is you can compare them so if i
simply say print and then right here say brand and then
equals and then in here i'm going to teach you more about
this what it means later but basically this is saying that i want to check whether the brand is
equal to and then amigos and then code and if i run this
you can see that we get false right it's not the case but if i change this to uppercase and
then run it you can see that now it is true so you also have not equal so not and then
equal run it you can see that it is false because they are equal
and if i change this so this is now so here you can see that they're not
equal because this brand right here starts with uppercase a
and this one starts with lowercase a so if i run this this is true right so they are not
equal finally let me show you one really nice thing and that is if you want to find out
whether this string right here so the brand so let's say that we want to find out
whether the word code is in and then brand
just like that right so we want to find out whether the word code is in the brand so if i
run this you see that it is true right so
if i say uh not and then in so that's the reverse run it and you
can see that it returns false because it is inside right and the and the result of
this is a boolean right so boolean can take only true or false as you saw previously
with data types so there you have it this is pretty much strings in a
nutshell next let me go ahead and show you some more examples on strings
still on strings let's create a variable called comment equals two
and right here let's say that we have you know some comments right so here
and now let's say that we want to for example have another line so you can see that
i've just pressed enter and we have this backslash there and if i press enter you can see that
i'm getting backslash and basically this is now my string right
so if i pretty much just say print and then comment and then run this
you can see that we get this comma right here but this is actually everything in one line and
basically um it's not it's not really what i want right so what i really want
is to have things lined by a line right so if i collapse this so what we can do is
in cases where you need to have you know for example long strings you can simply get rid of all of this
and then type double quotes and then double quotes and then double quotes so now you can
see that we have three on each side and then press enter and now in between you can write
whatever you want so here so that's my comment one more
and basically you get the chest so if i run this you can see that now
check this out so the output so right here let me show you so this is exactly what i wanted right
so this is really nice with python and many other languages are
actually lacking this feature let me collapse this and what i want to show you is
let's actually say uh something here so let's say hello and then
uh this is like an email right so let's let's let's simply say um let's change this to an email in fact
so email and then email here right and then here type these curly brackets
and then comma and then how are you
and then maybe it was oops it was nice and then talking
to you something like that right now let's create a variable here
so let's simply say name equals to
and then jamila and now what we want to do is actually pass the name so this name
and fill the gaps in here so this is what this um question mark allows us to do so here i
can simply now say email and then dot and then format and then pass name
there we go and if i run this
you can see that we have hello and then jamila right so basically we've just fill in the gaps and you can have as many of
these as you want and this is really nice when you want to when you have
a long string and then you want to format the actual output so another way that you can do
this is with so in here so what i'm going to do is simply remove the format
just like that and simply type f at the beginning of your string
just like that and you can see that now the ide is telling us that we need to
pass something in here so now we can actually pass the name directly and you can see that this is
much neater so if i run the program
you can see that we get the exact same result right and even here you can also have so let
me actually say for example age something like that right so and then we can have
the actual h in here so we can actually pass a value inside and for example if you want
to compute something let's say four plus four you can even do it in there right
so if i run this you can see that we get 8 in there so there you have it so i just
wanted to cover these two things with strings because i feel like it's very useful and you'll end up using them a lot if
you have any questions on the strings please do let me know otherwise let's move on
all right so we've had a great introduction about python and you've seen variables and strings
and before we move further what i want to talk to you is some of the rules that you need to be
aware when working with python and the first one is indentation
just like that add a comment in there so basically with python
python is very very different from languages such as java golang
javascript so on and so forth so right here let me actually go ahead and create a variable so i'm
going to say name equals two and i can put this a bit bigger so name equals two
and then let's simply say maria and right here if i want to have for example
surname right so sir name equals two and then double quotes and then
jamila and basically if i want to do this right here this is not allowed
this is all this is not allowed because with python things have to be indented
so here there is no need for us to actually put this um how many spaces is one two three
four right so four spaces and then start the actual variable so we can't really do this with
python with javascript we could definitely do it but right here you can see that we
have an expected indent so basically this has to be like this
in line so when would you indent things so let me actually give you a very good
example so here let me go ahead and cut this and for now type
def my and then function and you haven't learned about this so
don't worry i'm just teaching you about indentation so right here
have column and now press enter and now i can paste
my two variables right here and you can see that this now works so this is the perfect
time to indent things because this is a function right here and everything that falls under this
function should be indented so right here if i want to put it in the same level as the depth
right here you can see that this does not work so literally you have to indent things
in python right here you can see that it's indented and also you can see that my id is
complaining about this function name right here so you can see that it says function name should be
lowercase so right here what i'm going to do is type my and then function add an
underscore there so this is the actual convention right here
so another thing that i want to talk to you about is so right here i want to talk to you
about is reserved and then keywords so what reserved
keywords are are keywords that are specifically for the programming language for example def
right here so i'm not allowed to use def anywhere so for example if i want to
say you know name equals to and then death i can do it because this
is a reserved keyword or for example and or is
these oops these are reserved keywords so i can only use them to construct my
code so right here what i'm going to do is actually delete this and at the very top
type import and this is a reserved keyword and they
simply import keyword so what this gives us so what this gives us
so this import and then keyword we can simply now say print and then type keyword and then dot
and then kw and then list so in here before i run this you can see
that we have these quickly brackets so basically it says that we need to reformat the
file so right here let's format the file and it simply adds the correct spacing
in between so if i put this smaller so you can see that now things are formatted properly
now let me go ahead and run this program and you can see that this gives us
a list and you can see that all of these are the reserved keywords so async
wait break class continue you've seen death else except for from
import so in here import lambda not so on and so forth so these are the
reserved keywords which are specifically for using when writing your python code so you can
only use them for constructing your code and nothing else and finally what i want to show you is
with python right here you see that in languages for example such as
java or javascript you need to end every single statement with a
semi column for example here right so javascript is is actually optional but
with java for example you need to have a semicolon after every single statement so right
here and also right here but with python there is no such thing so right here we use
no semicolons also you can see that for example for this function right here
instead of curly brackets in between so many languages use it so including
javascript java go c-sharp this is how they define functions right
and basically this is not a valid syntax with python because with python
we use indentation right here so we use indentation and this is how we tell that this block
of code right so name and surname belongs to this function right here so it's
enclosed within this function so there we go this is pretty much
everything about the python syntax indentation and reserve
keywords
let's learn about operators so operators in python are a construct that allows us to
manipulate a value of an operand so right here let's consider the
following example so right here type result equals two and then right here
i'm gonna say one and then plus and then two so in
this example right here and if i put it bigger just like that so 1
and 2 are the operands and the plus sign is the operator so
we've got arithmetic operators we've got logical operators we've got comparison
operators and others so in here what we're going to do is actually say print and then result
and then run the program you can see that we have 1 plus 2 is 3. so what i'm going to do is
actually inline this so you can see the keyboard shortcut down below
so control plus a and then n so here let me actually duplicate this
and let me close that so let's learn about the arithmetic operators
so here we have if you want to multiply numbers together you can add a star so right here
so two times two and you can also divide so two divided by
two and we have the famous modular so oops it's not that one is this one
right here right so let's say nine mod two for example right so how many times two goes into
nine so two goes into nine four times and then we have one number left which
is the result so right here let's simply run this and you can see now we have three
four right so one plus two three two times 2 4
and then 10 divided by 5 or actually by 2 my bad is 5.0
and then right here the modulus right here so if i was to for example change 9 mod
3 so 3 goes into 9 3 times and the remainder
right that's what the mod or the modulus is is the remainder right so there is no
remainder so if i run you can see that it is zero one more example so ten so
three goes into ten three times right and then we have one left
so run it if i also change for example seven so how many times seven
goes into ten just one time how many remainder three if i
run it you can see that we have three and i almost forgot so the last one that i
want to teach you is the power so right here let me duplicate this
so you saw that multiplication it's one star but we also have two stars so let me in
fact put this right next to it just there and then press star and then star
right so let me put simply 2 so right here what this is saying
is 2 power 2 right so if i run this
you can see that 2 power 2 is 4 and if i change this to 2
power and then 5 right so 2 times 2 times 2 times 2 times 2
so basically um let me just add a comment here and then times two so basically five
times right so if i run this you can see that we have 32 so
there you have it this is about python arithmetic operators next lesson about the comparison
operators
with python we have comparison operators and what they allows us to do is to compare values and return
true or false so in here let's go ahead and simply say print and then what we're going to do
is say 10 and i'm going to compare 10 with something right so let's simply
say 10 and 5 for example right now in between i can
add these comparison operators so this one right here is simply greater so
this is saying is 10 greater than 5 is 10 bigger than 5 right so if i run
the program you can see that yes of course 10 is
bigger than 5. i can duplicate this and i'm going to show you exactly all the comparison
operators so if i collapse that so now we can say is 10 greater or equal
there we go so is 10 greater or equal to 5 of course it is right
but if i change this to 10 for example and then run it you can see that this is
true but if i say it's 10 greater than 10 of course it's not right
we get false there so let me actually now put the equal back and let me show you
the rest so in here we have the um less sign which is the reverse right
so less and we also have the not and then equal
and finally we have the equal right so is 10 equal to 10
of course it is so if i run this
you can see that we get a bunch of booleans right true right so let's start from the
top so 10 is greater than 5 true 10 is greater or equal to 10 of course
it is it's 10 less oh actually i should have removed the equal there
right so it's 10 less than 10 that should give us false so if i run it again you can see that we have
false in here so this is the output and then 10 less or equal to 10 yes
and then 10 not equal to 10 you can see that it is false and then
in here 10 equals to 10 of course it is true so there you have it these are the
comparison operators that you have within python next let me go ahead and teach you about logical operators
now that you know how to work with comparison operators let me teach you about logical operators in python
so let me actually remove all of this here and if i put this a little bit bigger so
you can see probably so what do logical operators allows us to do is to combine
multiple expressions so in here you saw that 10 right so if i run this
10 is greater than 5 right but i can also use the logical operators
so in here i'm going to add a second parenthesis so a set of parentheses
and now i can also say and right and let me just make this a tiny
smaller and then within parentheses again i can say that let's simply say one
right is greater than three right so this is the logical
operator so it pretty much allows us to combine one or more expressions so if i run this you can see that it is
false and this is because when you use the and operator
every single expression has to evaluate to true right so this has to be true this
also has to be true right so now if i was to reverse this right and say that one
is less than three now we should get true so everything
will be true right here so obviously i can combine so i can even say and so in here i can say
and and then let's simply use strings so you can even combine strings
here so a and then equals 2 and then a right so
let me put this on a new line just like that right so you find in this
there you have it so just like this right so now if i run this
you can see that we get true but now if i change a to for example c so the whole thing
is evaluated to false so this is and and i can even drop these parentheses if
i wanted so this simply allows me to group them together right so this is one expression another
expression and then this is another expression so the other logical
expression that you have that is available to us is the or so basically oops
so basically or means that at least one expression has to be true for the
for everything to be true so in here i can say or instead of and and then
or in here as well right so here now check this out if i
run this this entire thing will be true but now if for example i say that 10
is less than 5 and then 1 is greater so it's greater than 3
which is not the case or a is equal to lowercase c so in this case
this is false right so this is false this is false and this is also false
which means that everything will be false but now if i for example say that a is equal to
a now basically we only need one
one expression to be true for the entire thing so right here you can see that now we have
true the last logical expression that i'm going to show you is the not
so not simply allows you and actually just before i move on so here you can
see that we have or but basically you can combine all of these expressions right or with and
and you can use them throughout your code so you don't have to specifically just use
and you can also use both so the last one i want to show you is the following so let me simply say
that in here i have a so let's have a or let's simply have um
james and then equals two and then maria
right so in here if i print this you can see that it's false right
because these two strings they are not the same right and right here what we're going to do is
actually say not so here i can surround everything with a
not and basically what not does it reverses this expression right here so now this
will be true because i've said maria is not oh actually james is not equal to maria so if i run this
you can see that it is true so this is everything about the
logical operators and obviously you'll see exactly how everything will fit together in a
second if you have any questions drop me a message otherwise let's move on
right the last operator i want to teach you is the assignment operator so you've seen this but i didn't explain
exactly what it meant but the assignment operator allows us to assign
values to variables so you've seen that we had for example brand equals two and then amigos oops
amigos code right so in here this right here so the equal is the
assignment operator because we are assigning a new value oh actually
we are assigning a value to this variable right here now i could
also go ahead and simply say brand equals to right here
and then something else right let's simply say nike for example so now if i print brand
you'll see that we get the latest value which is assigned right so
initially it was amigos code but then we change it to nike so let me teach you about another
assignment operator which is going to be useful to you so number equals to zero
so i can say that number is plus and then equal to
one if i print the value or actually if i print number
run this you can see that we have one so what this assignment operator is
doing it's simply taking the initial value so number and then adding one
right so plus equals is the same as so if i simply add a common here so
actually let me just grab this pound sign so if i add a comment here so this
is the same as saying number equals to number and then plus and then one is the exact
same thing right so in fact if i remove this just like that
and then run it you can see that we get one right if i change to 10
we get 10. if i change the original value to let's say 14 we should get 14 now
right so instead you use this assignment operator which is much
shorter in here so just like that in here you can also
say that instead of a plus you can say minus you can also say times right so
4 and then times so you take the value and then you times it by 3 is 12
you can even divide as well so division just like that and then by
2 right so if i run this we get 2.0
if you if you want to power the number you simply say star star and then equal and then two
if i run this you can see that four power two is sixteen i can change this
to three there we go sixty four so these are some of the assignment
operators that you will end up using most of the time i'm going to leave
some more links around these operators so that you can go and learn more about
them but this is pretty much everything you need to know about these operators
when you start writing applications with python you most likely will be performing
lots of decision based on certain conditions and this is when if statements come into
play so if statements they are very easy to use and basically it allows you to perform
or actually execute a piece of code when a certain condition is met or not
so in here let's say that we have a variable and then we're going to have this
variable to be 15 right here right so this will be the variable 15.
now what we want to do is actually print to the console whether the number is positive or
negative so to do that we can use the if statement so we're going to say if
and then number is greater than zero and you've learned
about comparison operators so this is why i was saying to you that everything will come into play now remember
when we've learned about indentation right so now i can add a column
and then enter so this now so this block right here everything that we type from this
indentation right here belongs to this if statement right here print
and we're going to say number and then pass number
is and then positive just like that so let me just
put this smaller just like this so you see everything right so now let me add
a space there and let me save this right so now if i run this
program you can see that we have number is positive right so number is positive
so if i change this to let's say zero right
you can see now we get nothing because we said if number is greater than zero
right but the number is not greater than zero right it's actually zero
so in that case we're going to skip everything within this uh block right
here right so what we can do is say right so if it's not equal well
actually if it's not positive right so we want to say else
so we're going to print and then let's actually print the exact same
thing here and or actually in fact let's just have this
so f and let me just remove this number here so it's shorter right
so here i'm going to say number
is and then negative just like that so if i now run the program
oh i didn't want that for sure i wanted this so if i run it you can see
that zero is negative well actually zero is not negative right so and i'm going to show you
exactly in a second but for example if we have um minus one
you can see that minus one is negative if we have 2 2 is positive
so you can see how if statements work now if we go and say that 0
right so let's simply say 0 right here we're getting zero is negative so let's actually use
another keyword that we can use with if statements so in here i'm going to
say that if the number is greater than zero we're going to print this
and then in here i'm going to say l and then if right so this is another
condition that we're going to check so if number equals to 0
right i want to say print and then f and then the actual number
is and then zero or actually zero is zero but you get the idea right so
now if i run the program you can see that zero is zero right and let's actually
change the message here so we're going to say that it's simply zero right so let's
just print the number right so there we go zero so this
is pretty much everything about if statements so in here you've learned about comparison operators
and in here you remember right so remember that this is a block right this is a block we can actually
combine with logical operators so we can even say for example here i could say not
right i could say not and now everything flips everything flips around right so if i
run this you'll see that right so basically if i say that now this is actually 10
and before remember that 10 was positive if i run it you can see that it says now 10 is
negative and that's because we've just flipped the actual condition right and you can also have
ands so on and so forth this is how you use if statements for making decisions
let me just emphasize something with if statements so you saw that if
you want to use if statements it's not necessarily that you must have
for example alif and then else is not necessary it's not because you saw that if i
remove this and then run it you can see that we have 10 is positive
right and i can even say now here so i can say print so right after it
and then hello i can even say that and you can see that we have 10 it's positive and then
10 is positive and then hello right because so in here we've reached
this branch and then right this is true we're going to print this and then we're going to carry on our code
right so this gets printed so in here you saw that the
l if right allows you to perform extra conditions extra checking
right if the number is equal to zero print number right and then you have the else
so the else is the last option if none of the above
is met and one thing to bear in mind is that you can have as many lifts you want so in here
oops let me just grab this again just like that and then put it here you can have as
many of these right so oops just like that right and just bear in
mind that you can only have one if and then you can have as many alifs and then you can only have one
else right which is the last thing if none of the above is met in here
so this is so i just wanted to point this out because you know sometimes you might end up doing things like this
where the first condition isn't met then you have this the second one the third one and then
you have the fifth one and you know the last resource is else when
none of the above is met then you want to perform something else this is all for if statements next let
me teach you ternary if statements which are really awesome
right let me teach you about the ternary if statement so you saw that we can have
if number is greater than zero we can say that the number
so we can say print and then positive and then if it's not the case we can
have else and then print um zero or
negative right so in here you see that we have four lines
of code right four lines of code for whether the number is positive and if it's positive
we perform uh line four otherwise we say zero or
negative right so what the ternary if statement allows us to do
it's simply to have everything in one line so let me actually show you so in here
say message just like that and now i'm going to say
equals 2 and then check this out i'm going to say positive
and then if and then i'm going to have my condition here so number
there we go and then else
and then this so zero or negative
just like that and basically if i make this smaller you can see that
we actually collapsed everything into one single line which is really cool right so this is the power
of ternary if statements and to be fair you should really be using them
only like only if you have one if and then else right as soon as you have
l if as you saw before so l so here l if you should
you should you should you can do it with these ones right so basically you can have another uh if in
here right so you can have another condition but it becomes just you know too much you
should really be using them for cases where you only have one if and then else and that's it right so now
i can say print and then message if i run this
you can see that we have positive and if i change this to let's say -1
run it zero or negative this is how you use tenerife statements
with python
so you've seen that i showed you this example where i simply say type
and then in here we had this curly brackets right here
actually a square brackets right so if i run this code
you can see that we have list right so this is actually a list so what
a list is is the following right here what i want to do first is collapse this
so we have this variable right here called number equals to one right let's have number
two and then equal to two we can also have
number and then three
equals to three right and you get the gist right but so what we can do
instead is to collapse all of these three variables into the
following i'm going to say numbers so this is the name of the variable and now i'm going to have these square
brackets and now i can go ahead and simply say one two three and
let's simply put four in there right and basically now i can get rid of
everything so now this is my list that contains all of those numbers and if you want you
can even have um you know anything inside here right so for example if you
want a letter a inside or if you want another list right you can definitely
have it right but it's a bit awkward to have a list with different data types inside right
so for now just let's just keep it simple and have for example minus one
and then in here let's have zero right so what i want to teach you with lists
first is how they work so in here you see that we
have one two three four five six elements so the way that you access
an element within the list is as follows so if i say print
and then numbers right so let's just run this you can see that
we have our list right but let's say that i want to grab
only this number here so number one so the way we do it is by placing these
square brackets and then we pass an index so this is the actual index right so index
zero so in many languages including python when you work with lists this first
element is the index 0 this number 2 is index 1
this is index 2 index 3 index 4 and index 5.
so now if i run it you can see that we only have 1 right so if i do index five
you can see that it's zero so you know i can even change this to uh minus
or actually minus 20 for example run it you can see that it is minus 20. so this is something to bear
in mind right and if we try to access so let's try to access index 6 and we
know that this is index 5 and it's the last element right so this will actually
throw an error so if i run it you can see that we have list index out of range
and you can see the index error right here so something to bear in mind when you
work with lists so as i said you can pretty much just have a list of anything
right so here let's simply say that we want another list here and
let's have for example um a and then b inside or actually
just b like that right so now this is index and then six or actually six if i run
this you can see that now we have another list a and b and right here we can even say now right
give me the first index and this will give us a right so if we want
index 1 that's b and index 2 that that's not existing
and we get an error again but you really wouldn't have um you know
a list with different data types right so for example you can see why you would have a list
inside of lists for numbers maybe you want to you know build like um a matrix for example and you can do it
with lists within lists so there you have it this is the
introduction on lists next let me show you some of some of the available methods that
are available within lists
right so let's learn about some of the useful methods within lists so in here
let's take this numbers list right here and at the end simply
say dot right so in here this gives you again a bunch of methods or
functions that you can use on the actual underlying list so for example
if you want to sort your list you can simply say dot and then sort so if i run this
we get none and this is because this actually doesn't return a list right so what we need to do is
simply say num oh actually um print and then numbers here
so if i run this now you can see that the lace is actually sorted so here we
started with minus 20 or actually we ended up with minus 20 at the end and now we start with minus 20 1 1
2 and then 3 4. so now it's sorted if you want for example the reverse and
let me comment this out for you so you can say numbers dot and then reverse
there we go if i run it you can see that now it's the actual reverse right so
21 and then four three two one so basically we've just reversed the order
of our list if you want to append to the list you can simply say
numbers dot and then append so here we're simply adding
let's say 1 000 right so we're just adding a number to our list there we go there
we go if you want to find out the number of elements inside of the list you can use
len right so i can say print and then len and then numbers
and if i run it there we go and you can see that we have
seven items inside of the list we can also
remove every single item inside of this list so if i comment this and if i say
numbers dot and then clear and then run you can see that now
we don't have anything right so we've just cleared our list and finally what i want to teach you is
if i run this again so you see that we have the list let's say that we want to find out if
right so we want to find out if um any given number is within the
the actual list so for that we can say numbers or actually we can say the
number that we want so for example 5 and then in numbers
if i run this we get false i can say five and then
not in numbers and of course it is true right so if i oops
if i say that we know that we have minus 20 there so minus 20 oops no minus 10 minus 20
inside of numbers run it and you can see that we get true so there you have it these are some
of the common methods that you have within lists
if you want to for example delete a number right so for you
to delete a number so let me actually comment this oops just comment this and then print
and then numbers right so if i run this so let's say that we want to delete
this number right here right so number one so we can say so in here we can say
numbers dot and then remove in here so we want to remove
one and run it you can see that one is now gone so if we want to remove -20
oops minus 20 you can see that minus 20 is gone right so
if we have so in here if we have two ones right so two ones and then
if i say remove one in here run it you can see that
it only removes the first instance right so it only removes the first
instance that it finds we can also remove with pop so
in here i can say pop and there we go so pop removes
the last element so in here you saw that we had 20 right so this is the actual
top of the stack um and pop simply removes this one and then goes from the top you
can think of of it being like this is this is the actual bottom of of the list right and this is the top
so pop starts from the top of the list and then it goes and then removes right so if i say pop two times
should remove minus one as well so if i run it there we go you see that we removed
minus one so i just wanted to show you um
how to delete because it's something that you will do quite often another way that you can
delete is if you say for example so here let me add a space
you can say so del and then numbers and then in here we can
simply pass the actual index so run you can see oh actually we are
popping uh the other two numbers right but if i comment this for now you can see that
we had two ones so here two ones and let me just remove this one here
so right here if i run it we should see two right so we've removed um
the first element if you want to remove two instead so two is at position or actually
at index one run it you can see that two is now gone you can also delete
by a range so let's say that you want to delete everything from everything starting from
zero so index zero all the way to indexed three you can do that and right here let
me just show you so we're going to remove 0 1 2
and 3 and we're going to be only left with minus 1 and minus 20. so if we run this
there we go so actually we have four so yeah basically it's actually going
um so three is actually uh exclusive right so it doesn't remove
this one right so it just removes these three actually it's not index based right it's
from zero all the way to three and three is actually exclusive so if you want to remove let's say all
the way to six run it you see that everything is gone
let's try seven and basically it's not it's not giving us an error um
as you saw with accessing the index 7 because it's not is not there but here we get an empty
list so there you have it these are some of the ways that you can remove items from
any given list
now let me teach you about sets so with lists you saw that we had this
variable right here numbers and inside we can literally just put anything that
we want right you can put numbers you can push strings you can put lists within lists so on and so forth right you can put the
entire world inside if you wanted to so sets
is somewhat similar to a list but the difference here is that with
sets duplicates are not allowed so let me actually show this to you so in here i'm going to
start just have a numbers and then list i'm going to call it list
and here let some let's have a numbers and then set so the difference here is that which
sets you have these curly brackets instead of square brackets so here if i have one
and then one so let's print and then number list
and then let's also do the actual uh setups just like that
number set and then run this you can see that we have one
one but inside of our set duplicates are not allowed
duplicates are not allowed so something to bear in mind is if you
don't want if is if you don't want duplicates use a set otherwise use a list
and what sets gives us so sets they pretty much you know the
methods are lists give us is you know set also give
us so if you want to clear you can say for example uh clear you have pop you can see the
length there as well you can add you can remove so here remove
and basically it's the exact same thing as we've done with lists and
also in here so you can see that we have numbers but this
works the same way for example if you have um well actually let me not change that
one right so for example here let's have a letter
or actually letters there we go set and then here
if i have a and then a
and then b and then c and let's have let's just have one more
c we should just get a b c right and
we should actually print and then letter set so if we run this you can see that we
have uh b a c actually so and this is actually this brings me to
to the point that so in here right so you saw that we have a a b c
c right and this was the actual order that we added them right the difference between sets and
lists is that with sets the order is not guaranteed so here if you were to expect
for example when you retrieve the elements right so the actual set
the same order it's not going to happen right so orders so sets are unordered so if i run again
perhaps we should see a different order there we go so now it's actually a b c if i run again
you can see that we have bca right so keep in mind those two
so no duplicates in order is not allowed and also the actual syntax is different
how you create the actual set and lists so which sets is
curly brackets and with lists is square brackets lists you can have duplicates and the
order is guaranteed
let me teach you about set union set intersection and set difference
so to illustrate this purpose let's have letter and then a or actually letters
and then a equals two and in here let's have a
and then b and then c and let's also have d right so d
so let's now have a second set so let's simply say letters and then b
oops b now let's print union so what union means
and in fact this second set let's simply have a b c d
and then e and then f right so what set union means it means that
we can take letters a and we can say union and then
letters oops and then b so if i run this the
output is basically the union right so it's just it's just everything combined right so a
f e d b and c right so it's literally everything and remember the
order is not guaranteed right so that's the actual union so union just
takes everything from both sets and then puts it inside of another set
so here let's actually have union so equals 2 and then letters a
and then letters and then b right and now i can print the
actual union next let's learn about the actual
intersection so intersection is is very interesting so here i want to say enter
and then section equals 2 and then letters a and then to use
intersection you simply have this ampersand this ampere sign and then letters
and then b right so this now is the actual intersection so what i'm going to do actually um
f and then format this so i'm going to say union and then here
that will be union just like that right and let's have f there as well and then
enter and then section and let's have intersection
and let's have a equal there and equal here
so and actually this should be within quotes and there
we go so if i run this so for the intersection and this should also be quotes here
there you have it so if i run this you can see that the union is everything but the
intersection we have an empty set right and this is because
in here so there is nothing that intersects between these two sets so if
i was to have for example a in here
and then run it you can see that now we get a inside so basically it's whatever
happens in both sets or actually whatever occurs in both set in both sets
so a is in letters a and also in letters b so if i was to have
d in here so d just like that run it you can see that
it happens in both sets the final one is the actual difference
so let's go ahead and say print
and then actually let's create a variable first so difference equals two
and then letters a and then the difference you simply use a
minus so minus and then letters and then b right and the difference is so
right here let me expand this so the difference is oh actually the difference so this sign
right means right so everything which is in in set um so
this set right here so everything which is in letters a but not in
letters b right so here we have a b in both sets but c d
right there actually um b and c my bad so b and c they are
not in letters b so right here if i say print and then difference
and let me actually have the exact same thing here just like this and if i run
you can see there you go we have c and b right so this is the actual difference
and here it's very important right so if you flip this around so b so let us be
minus and then let us a this will be a different result so if i run it you
can see that now it's f and e so there you have it this is how oh actually
this should be difference here so this is just a string right the friends
so there you have it this is pretty much everything about the set union
intersection and difference if you have any questions drop me a message otherwise let's move
on
let's learn about this data structure called dictionaries with python
so dictionaries allows us to store key value pairs so in here
let me go ahead and say that this is a variable called person equals two
and then the dictionary works as follows so here this is the actual
opening curly brackets and then close curly brackets and inside you have
what it's known as keys right so here let me simply say name and then here
you can specify the actual value right so let me actually move that space
there so here this is jamal and i'm going to have a comma there
age and then jamal's age is 20 and i forgot all them there
so this is a dictionary and i mean then this here and let's also say that this
has an address just like that and then here us right
at usa there you go so this is our dictionary and in here so this is the
actual key and this is the value so key
value it's a key value pair data structure now if i want to get
values or actually print and let me put this smaller so you can
see a little bit better so in here i'm going to say person
and then if i want to get for example name right so this is how i do it if i run it
you can see that i do get jamal right but if the key so this is the actual key
and i'm getting the actual value so if the if the key doesn't exist
you can see that we get an error saying that key error and then name so that key is
not present so if i want h for example simply type age
run it 20 and finally address and then run
it you can see that we have usa so maps are really helpful when you have
for example structured the structured data like this where you need to have a key and then a
value now with keys right with keys they have to be unique right you can't
do this for example um name and a name right you you can't right so you can see that even pycharm
is telling me dictionary contains duplicate keys name so the keys they must be unique
so let me just put that back and let me actually now show you some methods right so
with dictionaries i can say actually let me just put everything
there so we want the actual name we want age as well right so with
dictionaries we can say print and then let's say person
dot and in here the same methods that you saw with lists
and sets they are available but here for example you can see that we
can get the keys so if i run this so here look at the keys
right so these are the keys name age and address we can also get all the values so i've
just pressed command d and then values and now we get the actual values so
in here you can see that we have jamal 20 usa and the keys above if you want to clear
so right here so if you wanted to clear for example person dot and then clear
and basically now if i print and then person right here you can see that it's empty
right we've just cleared everything so let's actually not do that and
one thing that you might want to do is actually update the value right so let's say that we want to
update the actual age so before i print person
and then dot and you can also say get right and we want to get age
so there and basically this actually is a no another way of getting so let me see
print so you can see so you can do it this way right here oops
this way or this way so i kind of prefer it this way here because it's
the syntax is better so if i run it you can see that we have 20 in here
right so what i wanted to show you actually was so if i want to
update age right so i can simply say that right so i can say that oops
oh my god account type today so in here i'm going to remove that print
statement there and i'm going to say equals to 100 hooray now if i run this
check this out so in here age was 20 and then we
updated age to 100 so there you have it this is how to work
with dictionaries so dictionaries is very powerful and you will end up using them quite a
lot this is all for now if you have any questions please drop me a message but this is
the most common data structures that you're going to be using with python and i'm going to drop some links on some
other data structures which you will find them useful as well catch me on the next one
now is the perfect time to learn the concept of loops so loops
in python allows us to iterate through sets lists or pretty much
dictionaries or any data structure available so let's create this list right here so
list well actually let's simply say names equals to ahmed
and then anna and james
and let's also have jamila for example right
so this is our list let me put this on a new line right so this is our list of four names
so you saw that if for example i want to grab print and then names
oops names and then names zero
and if i do one two and then three so right here
you can see that i do have the name so ahmed and james and jamila right but this is me
going out and actually printing line by line so what loops allows us to do is to
actually loop through the list and then have access to
each individual item so the first way of using loops is using the
four and then here i'm gonna say name in and then names
and then add the column right there very important and also the
indentation is very important right so right here add
just press tab and then you get that indentation now here print
and then the actual name if i run this
you can see that we do get the exact same output but now we are actually looping through our
list right here so this is loops in action so there you have it this is how you
loop through your lists using for loop so this construct right
here so this is actually called for loop so here let me add a comment so
four and then loop and right here you see that we have
um a list but this could also be a set right this will also work
and then run it and there you go you can see that we get the exact same output so next let me show you how to
loop through dictionaries
right so you saw that we had this dictionary called person and it has the key name
value jamal age 20 address usa so in order for us to
loop through this dictionary we can use the following construct so it's exact same way that we've done
with lists but we get an additional information so here four and then key
and then in and then person and then print and then the actual key
so if we run it you see that we are getting the actual key so name
agent address now what we can do is the following so here i'm going to
say f and then double quotes and here i'm going to
pass the actual key and then i'm going to say key
and then column and then value column oops column
and then inside i'm going to say person and then get the actual key
so here i'm just passing the key inside right now if i run this you can see that we
have key name value jamal key age value 20 and then key address value
usa so this is one way of looping or we can do something better so
here what we're going to do is actually comment this oops i didn't want to do that so i'm going to comment this
and what we're going to do is the following let's simply say 4 and then key
and let's also get the value in and then person dot and then
values and then don't forget the actual column and
make sure you indent with tab now let me actually take this print
statement and put it there and comment and i need to indent this and right here
remove that and this actually is the value right value
and there we go so if i run it and we get an error so too many values and actually this is
meant to be items right so my bad so items in there so for key value in
person the items and then run it and you can see that we get the
exact same result so let me actually show you what items contains so values and you've seen this right so
print and then person though and then items
so if i run it you see that this is the actual items right so this is an array of key value pairs
right and then we are simply looping through it and then getting the key and the
value instead of doing it this way where we actually
had access to the key only and then we said person in here so person and then we
pass the key which is how you access the value for any given key
so this is pretty much how to loop through dictionaries if you have any
questions drop me a message otherwise let's move on
all right i thought it would be nice for you to have a go at this exercise so given a list
of numbers right so let's say that we have some numbers here
just like this and you can put any numbers that you want right so given
a list of numbers try and sum up all the numbers inside of
this list right here right so you need a variable to store the result and then
you need to loop and then perform the actual addition right so give that a go and
i'm going to give you the solution in the next video
all right let me give you the solution for this exercise so what we need first is to have a
variable and we're going to call this variable as result in here
equals two and initially will be zero now we need to loop through this
list right here so numbers four and then number in
and then numbers column and then on the new line say result
and then plus equal right and then number
so number right so remember that this assignment operator is the same as
saying number or actually a result
plus and then number is the exact same thing right so what i'm doing is simply collapsing
it into plus and then equal
and then number and finally print the actual result
so i'm going to say f and then result equals 2 and then result
so let's run this and you can see that result is 31.
so this was an exercise on looping just to make sure that you understand how it works
and do a bit of logic so that you can practice your python skills if you have
any questions for this exercise please do let me know otherwise let's carry on
right let me teach you about the while loop so while loop works a little bit
different than the for loop and basically it loops while a condition is true so
let's start with this example right here let's say that
we have the actual number and then equals to zero right here so we're going to say
while and then here so the same with if statement we have to pass a condition
so here we're going to say while the number is less than 10
right and then add the column we're going to do something so
for now let's print so this is what we want to do so we want to print the actual number so if i run
this you should see that we have zero zero zero you know it's just
basically it's just printing zero right because the number zero is less than ten
in here therefore we're going to keep on printing the number so what we're gonna
do here is the following so we're going to say number and then plus equal
and then one so each time that we go through the loop we're going to increment the actual
number so if i run this you can see that now we get
zero through nine right as soon as the um the number is
bigger than 10 we skip out of the loop and this is the
power of the loop so we can also here have else so this is another construct with
with while loop and then print and oops i didn't want to do that
sorry and here else in while and then
loop and then if i run it you can see that so basically this is
the actual end right so when it reaches the end so when this condition is no longer true we have
the else block which then we can say anything and in fact let's just say that um while
loop ended just like that and if i run it
you can see that we have while loop ended and basically the while loop is very simple
um and yet very powerful and basically just allows you to keep on looping while
a condition is true as soon as it's false we skip out of the loop we
if you have the else we execute the else and then it just breaks out of the loop
so there you have it this is all about while loops
let me teach you about two keywords that you're going to be using with both for loops and while loops
and they are the break and continue keyword so what i'm going to do here is remove
this elf statement there and right here what we're going to do is the following
we're going to say that if and then number so still inside if the
number is less or actually if the number is equal to five we want to do something
right so for now let's simply say print
and then number is and then five and then hooray
right i just want you to see first the example so let's run the program and you can see
that we have hooray number is five right so if it is equal to 5 we have
number equals to 5. so now let me collapse this and what i'm going to do
is remove this print statement there and i'm going to print number
so in here so number and i'm going to say if the number
is equal to 5 what we want to do is to break so we want to break
out of this loop right here so check this out if i run it
you can see that we have one two three four five and then as soon as the number is
equal to 5 we break out of the loop so this is one way that if you don't
want to finish the execution of any loop both while and four loops you can break
out of the loop the other keyword so let me actually comment this
so let me comment this and the other keyword is the continue and in here what we're
going to do is the following so i only want to print the number here
right if it's bigger than 5. so i'm going to say if the number is
less than 5 if the number is less than five and e
and here i wanna increment the number so right so if the number is less than five we're going to continue
so what this does is it goes through the loop
and it checks right is the number less than five yes therefore i'm not going to carry on
from this point onwards so i'm not going to print the number and then go back
to the beginning then 2 is 2 less than 5 yes continue so it just
goes back and then checks it right as soon as number is bigger than 5 then
it prints the actual number so if i run it you can see that
we actually get 5 6 7 8 9 10 right which is
exactly what we wanted so these two words break and continue you
can use them with four loops right so it's not just wall but it is with four loops right so let
me just give you an example so here if you have a list so
let's say 4 and then n in and
this will be 1 2 3 and then 4 5
and i want to say if and then n is less
than 5. right we're going to continue and then here
we're going to print so basically the exact same thing we're going to print n so if i run you can see that we get the
exact same output here right so
in fact let me just remove actually comment this while loop here and then run the program
and there we go so if the number is less than five
we continue basically i need more numbers here right so six and then seven so
just like that run it and you can see it prints from five 6 7 and i can also say if the number
is equal to 5 we want to break out of the loop which means that
it will print 1 2 3 and 4. so if i run it
you can see that we have one two three and four so this is everything you need to
know about the break and continue keywords
in this section let's learn about python functions so a function is a group of
statements to perform a specific task previously you saw that we had this
keyword right here so death and this is the actual way to create functions so
let's say that we want to have a function that greets someone
and to create a function is as follows type def and you've seen this before and here
let's give it a name so we need to name this function so here we're going to say greet and then add
parenthesis and i'm going to explain what this means in a second and then
here column and then indentation so remember
this is actually tab right and now inside is any logic that i want
this function to perform right so in our case let's simply say that we
want to print and then
hello and then how are you just like that right
so now what we can do is use this
function right here and the way that we call the function or the way that we
invoke the function is simply by saying greet and oops
and you see that if i say just greet
python doesn't know anything about this right and when you invoke so when you want to
invoke the function right you add the parenthesis now here i can
run the program and you can see that we have hello r u
so most of your code will rely on having functions and then
inside of the function you will have lots of uh logic right and i'm going to show
you exactly more examples in a second so
this is an introduction on functions
right so you know how to create a function so this is the actual name and then inside
you can have a series of statements right and the way you invoke the function is by simply saying
greet so the name of the function and then parenthesis so now let me teach you about arguments
so with functions you can have arguments so in here let's say that we want this
function to take name so we're going to take a name right so here we're going to take
a name and then we're going to say hello and let's use f and then here let's pass the actual
name so now you can see that this function is actually complaining because
we need to pass an argument into it so here what we can do now for example
jamila and we can have the same function invoked twice
but with a different name so here let's simply say alex and now if i run the function
you can see that we have two statements and here it says hello jamila how are
you hello alex how are you so these are the actual arguments that we
are passing into the function and this is the actual parameter now you can have
more than one so here for example if you want to have name and then um
for example age and right here let's have for example we're going to say
i know your and then age equals h here
and then here let's remove this
and if we run this you can see that we have an error and it
says that missing one requirement and then argument h so we need to pass h
so here at 12 and then 22 run and you can see that
basically now we have this function that we can reuse again and again and again right so
let's say that for example you have you want to have a default value
for this parameter right here so h so what you can do is simply say h
equals and then 2 minus 1. so now check this out if i run this
you can see that this still works but now i can remove for example the actual age
from jamila run it and you can see that it works and it takes the actual default value
now we know that no one has an age of minus -1 so what we can do is
we're going to say if and then age is less
than zero right we want to do something right
but what i really want here is to revert this so i'm going to say not and then age less than zero so if
it's not less than zero i'm going to print i know your age or you can even reverse right you can
say if age is bigger or equal to zero
you know it's really up to you so now if i run it you can see that for jamila it says
hello to miller our u and then for alex it says hello alex how are you
and then i know your age 22. so this is how you use
parameters and then arguments so this is arguments so this is the actual value that you
pass into your functions
let's write a function that prints first whether you are an adult or not
so here let's say death and then is and then adult and then here we're going
to take age and we're going to say if age
and then greater or equal to 16
we're going to print and then adult and then else we're going to print
not yet an adult and then just a sad face there right and let's add a happy face so
now let's invoke the function i'm going to say is adult
and then pass let's say 10 if i run this you can see that we have
not yet an adult and then we have a sad face if i pass let's say 45
hooray it's an alloy now what i really want is just a function that tells that tells
me whether i'm an adult or not right and i don't want this print
line so with functions what we can do is to return a value from it
right so here we can say for example we can say return
and then true oops capital t and then true otherwise we're going to
return and then false so
now check this out if i run we get nothing and this is because right this is
because this now has a value which can be true or false so
that means that we can store this into a result variable and we can print
now the result so if i run it you can see that it is
true and if i put for example 10
you can see that now it's false so with functions you can return literally
anything right so this so this can be you know a string or you can return a
list or a number whatever you want right in our case we're just returning
um this boolean right here true or false now because this returns a boolean
value we can remove all of this and then simply say return
just like that and then remove the semi column and this is the exact same thing
so now if i run it you can see it's false and if i say 80 whoops
you can see that we get true so this is functions and return statements
so in here let me just tell you or actually prove it to you that we can return something right so let's say that we
want to have a function that takes m or f and then returns male or female so death
convert and then gender and here we're going to take gender and the default will be
unknown and add the column there and now i'm going to say if gender
dot and then lower so we want to lower case the actual input that comes in equals two
and then m or actually m or instead let's just uppercase right so
upper so if this is the case we're going to return
and then mail and then alif gender dot and then
upper equals to and then f return
and then female and i forgot the actual column there
and now i want to say else we're going to return gender
just like that so now if i invoke the function
so i'm going to say print because this returns the actual gender and now i can say
convert gender i'm going to pass f i'm going to pass m
i'm also going to pass the lowercase version so there lowercase version for
m and then let's pass hello
and actually let's say that here so we are missing the actual column so
here i want to say f and then gender
and then pass gender is unknown and now if i run the program
you can see that we have so here female female male male and we pass hello
and then we say gender hello is unknown so this is how you return
values from functions
right now that you know about how to work with functions to be honest we've been using lots of
functions throughout this course so remember when we had lists and sets we said
dot on any list and check this out you saw pop sort count extend
uh all of these methods right so these are actually built in the language right
so this is what python provides you out of the box which means that you don't have for example to
implement the reverse method right if you want to reverse a list you don't have to do it because
it's already provided the same with strings so if i have a string and then
say dot on it you can see that we can uppercase we can lower start with we can capitalize we can
center and code find formats and all of these methods
so these methods are actually built into the language to help you
and the same with other programming languages right so they give you the necessary tools
to build programs so within your methods you'll end up
using built-in methods so these are actually built in methods and the ones that we define
ourselves so when we say death so this is actually our the ones that we define and with our
methods we can define any logic that we want so i just wanted to show you that we've been using
methods throughout this course but those methods were provided by
python and with python we have this important keyword so import and
you've seen import so what this allows us to do is to import
modules within python so here for example i can import the math
module and inside of this math module so if i say print for example
i'm going to say math and then check this out dot and now i do have available
methods and values so here you can see that this is a value so pi if i run the program there we go so this
is the actual value of pi if i dot and then
let's have a look at a different method so here is square root so let's
try and see if 16 is a square root and this actually gives us the square root of 16.
so if i say 25 and the square root of 25 is 5 so 25 oops
can't type today so 25 and you can see that it is 5. so this is the import statement as well
and you can basically just use modules that are built in within
python or your own modules or external modules that other people have written and
if you want to use their code you simply import the module and then use it now
with imports so there are two ways that you can import so here you see that is square root so i can say from
and then math import and then is square root
so this is a different way instead of bringing the entire module you can just bring is square root
just like that if i run it you can see that we get the exact same
output so this is everything about functions
and using the import statement to import existing modules that gives you the
flexibility of using existing code written by other people or from yourself or
code that comes with python so in our case we have is square root
now is the perfect time to teach you about modules so you saw that we learned about the
import statement here right and the import statement allows you to
import existing code right so we can import built-in code provided
by the python library or we can import external modules
that contain code that other people have written and i'm going to show you this later in this course so
in this video what i want to show you is how to create your own file which then you can import and
use it so what we're going to do here is the following open up the project tab so i've just
pressed command and then one and inside let's create a new
file and here type cal and then creator dot and then py
right so you can create a file like that or you can create a python file here
there we go and then put the name and you don't need the actual py there
so now we have this calculated py so in here what i'm going to do is the
following i'm going to have two functions so let's have a function so
say def and then add and let me put this a little bit bigger
right so add and this will take n one
and then n two and it will return
and 1 plus n2 let's have another function
so here so we're going to have oops just like that let's have four
right so here this will be subtract and then minus and then divide
and then this will be division and then multiply
right so what we can do with this calculator.py and let me just put bigger so you can
see what we've done right so we've got a function that adds subtract
and then divide and then multiply and i've got typo there so multiply just
like that right so we've got these four functions now what we can do is actually go to
main.py and then say import and then calculator
so we actually importing our own module right so the way you saw that we
had import and then math right so this is provided by python so we didn't have to write any of this
but here we are importing our own code so you you can share functionality throughout your
application by creating reusable code so now we can say here so let's say print
and we're going to say calculator dot and then we've got our functions here so
divide multiply subtract and add so let's pass two or actually two
and then two and let's say add divide oh actually we already
have that so multiply and then subtract and if i put this larger so you can see
there you go so now so now i can run this
and you can see that we have the results right here right so 2 divided by two is one
and then let's actually say two multiplied by four is
is eight it should be eight but we have an issue here so we have six here and then subtract so two
take away two is zero so let's fix the actual calculator so here let's go to calculator.py
and then fair enough so here where we said multiply this should be a star just like
that if i go back and then run the program again and now we get the correct answer so 2
times 4 is 8 right here now the last thing that you saw is we
can change this import statement a little bit so we can say from and then calculator
import and then divide we can also duplicate this we can say
import add and then multiply and then the final one will subtract
right so the reason why you would do this is for example if i only need
the divide method i can remove all of that and then just have it like
this right so now i'm not bringing the entire functionality so all of these methods into this
main.py file so this is how you create modules and
import them if you have any questions do let me know otherwise let's move on
right let's learn about classes so classes is a concept which is really important
that you understand so what a class is and literally this is across every
single programming language so what a class is is a blueprint for
creating anything that you can think of literally anything in the real world
that you can think of you can represent in code and what class is it's just a blueprint
that allows you to create um objects right so class is the
blueprint and then from the blueprint you can create objects so one or many objects right
so just let's just take this example right here so again my pink phone don't laugh uh so right here so
in order for us to create this phone right here so this iphone right we have a blueprint
and a blueprint is the specification of how this phone is created right so
um you know this could be in the factory where they have already the template where they can say
right so now give me you know a thousand of these similar phones right here right
or you can say right so instead of being pink give me a black phone or a red phone so on and so forth
right so with classes what we do is we specify the attributes so
attributes are anything that um resembles the phone right for
example here um the color for example the color right is an attribute of this phone is
pink the brand is an attribute apple uh whether it has
touch id right so that's um another attribute the price
right how much does it cost that's an attribute right and then you have behaviors so
attributes and behavior so behaviors are what this phone right or what the actual
um object can do right so for example here
we can unlock so this is one behavior right so we've just unlocked the phone or we can make a phone call and this is
another behavior right so with classes you can literally model anything that
you want and this is uh the the and this is the world of object oriented programming right
involves you creating a bunch of classes and then connect them together so
i hope you understood what classes are so classes are a blueprint for you to create anything
that you want for example i've got this lens right here so again
i can't create a blueprint so a class that tells me how to create many of these lenses right um
so you've got classes the blueprint and then you've got the object so the object is the real thing right
it's a real thing if i had a second iphone these these would be two different objects
right or for example right here so this is one object and this is another
object right so these are two different things and how we create them is by using
classes so i hope you understood this example and without further ado
let me go ahead and show you how to create classes with python
alright so let's define our blueprint to create as many phones that we want so let's go
ahead and say class so this is how we create class in python and we have to give it a name so we're
going to say phone and column here now let's define some attributes
simply say def and then underscore underscore init and
in here so this in it is how you create these phones
so this is the actual constructor so inside we want to pass the brand
and price and you'll see this in a second how it works so now say self dot
and then brand equals to brand
and let's say self dot price
equals two and then price so now we have two properties
so brand and price let's define one behavior for this phone
so here let's have a behavior so here we're going to say call and we always take
self in here so this refers to the current instance of the current class
let's say that we want to print for now and then i'm going to say f
and then pause and then say phone calling and let's pass
well actually let's go back and then brand or actually self we need to say self and
then brand to refer to the current instance is calling and then
dot dot um in fact let's let's just give one more argument here so let's say
phone and then number and then here phone
and then number so let me just make this a bit smaller so you can see
everything so we have and this should be actually just like
that so this is the convention you saw that pycharm was yelling at me
so now we have this blueprint which allows us to create many phones
so let's create the actual phone so this is the instance right for
our phone so in fact let me just kill this space here and
now to create a phone we can say iphone equals to and then phone
and inside we're gonna pass the brand and the price so this is iphone and then
7 plus so this is my phone and the price we can pass a price so
here let's say that this phone is like 300 pounds and there you have it now we have
a phone let's create another phone so here this will be for example sam
sung and then s i think is s20 and then this is like
you know 1400 right which is really expensive so now we need to actually um rename
this so this actually is samsung so the name of the variable just like
this and this is the actual iphone let's now print the values so i want to print
iphone so i just want to see something here first and i'm also going to print samsung so in here
right so this iphone this is now the actual object so remember a class is just a
blueprint for creating objects right so it's just a class it's
just a template and now in here we are creating the iphone so this is the actual thing the
actual physical not physical but the real thing the actual object and then here we also have
the samsung right so we are creating multiple phones from the same template
and this is what a class is if i run this
you see that we get main and then phone and this is object and then this is the
actual address in memory and this is not pleasant right so
you know when you print an object you sometimes want to actually get the
actual string representation of the object and i'm going to show you this in a second
so here we can go and say dot and then brand and we can say
dot and then price so let's just let's just do it for iphone now if i run
it you can see that we have iphone 7 plus and 300 that's the price
we have one behavior so price actually print and then iphone or we don't have to
print because um in here it does a print so here let's say iphone dot
and then call and we want to call this phone number so 999 and then if i run it
you can see iphone 7 plus is calling 999 let me just take all of this
and then do a print and that will be blank so here let's
change this from iphone to samsung run and you can see that oops let's
change the name here the number actually just any number run it and you can see that we have samsung s20
1400 the price and then samsung and i've got type 1 samsung so sam
and then sung just like that and run it again and there you have it so this is an
introduction on classes and objects so just to recap a class is just a
blueprint and in here oops let me just kill so in here so
this method so def init is this so this is the actual init
and here you see that we pass the brand and the price and this is why we pass brand and price
in here right and then we're saying self dot brand equals to the brand so self refers to
the current instance of the current class and
if i remove for example the init method you see that i i no longer can do this
so i can't do it so all i have to do now is just remove um this right and now i've got a phone
which tells me nothing so this is what constructors are so let me just go back and then we have
one behavior which simply call right so the call behavior
simulates the phone calling a number and then here we have the actual objects
right so iphone and samsung so these are the individual objects so these are
two separate things so this is everything about classes and objects
if you have any questions please do let me know otherwise let me show you how to print objects
properly right so you saw that we tried to
print so in here let's print and then iphone and in fact let's just
move everything right so we try to print
iphone and also samsung if i run it we get this nonsense right
here so object add and some random numbers so what we're going to do instead is inside of our class
we can override the tostring method so this works the same with other
languages so here what i'm going to do is use pycharm to help me with this so i'm
going to press ctrl and then enter and then override methods
or actually you can press command o so let's press command o instead and you
can see that we can override a bunch of methods so we have equals we have str
we have format reduce data and what not um so if i type in it so you see that we
have actually we don't have in it here but i thought we had in it so in here what i want is to override
this method right here so sdr so press ok and
now what i'm going to do is remove this and i'm going to
return oh actually it's actually returning already so f and then i'm going to say
brand and then self dot brand and then price equals 2
and then self dot price just like that and now if i run the program when we
print these two objects check this out so now you can see that we have the
string representation for our object so usually
you'd have for example brand equals two and then a comma something like that or even a
new line if you want it so this is how you add a new line so if i print
um basically i remove that space there so there you have it so
you can see that we have brand and then iphone 7 price 300
brand samsung and then price 1400 so this is
how you override the string method so obviously um you can override any
uh many other methods for different purposes which i'm gonna leave some links that
you can read about but in here so let me just remove the def uh init function and if i press
command o you can see that we have the init so before we didn't have because
we already had the method but here i can simply just do it like that right
it's a bit different but we can just just remove this and then change it the way that we had
it so let me actually put it back just like that and there you have it so this is how to
override the str method within python and one thing that maybe
you haven't you haven't noticed or if you have noticed is this arrow
right so this arrow right here so what this error means it simply means that this
method returns the string data type in here so i can
even remove this and this is absolutely fine but if i want to be more precise i can say right
so this method returns an sdr or for example if this method was to return
an integer you could say an integer but here now you can see that this is complaining
because it says expected type int and got str so let's
remove this or you can leave it if you want and it's really up to you and this is pretty
much everything catch me on the next one
with python we can work with dates and it's very straightforward and
something that you will end up having to use every now and then if you want to store
for example dates or date of births or anything which is date related so to work with dates
we have to import the datetime module so you saw how to import
before so simply type import and then let's say date and then time so
now i can say print and let's say date
time dot and in here we have uh the ability of for example
getting the actual date time so daytime gives us an object so you can see the
value is an object and in here we can say dot and then
now if i run this you can see that this is the current
date and time if you only need to grab the
actual date i can duplicate this and then say date instead of date time and then now
run it and we get an error and this is because date doesn't have um now
method right so here and instead it has today so my bad there
if i run it you can see that this is today's date so 2020 september
the 27th if i want if i only need time i can
duplicate this date time and it's pretty much the same as the
other one so now and then dot and then time if i run it
you can see that we also get the actual time in here so this is how you work with dates
let me now show you that instead of having for example date time and then daytime day
day time and end date let's improve this a little bit so we're going to say from
right so we want to um say from and then date time we want to
import date time and we also want to import date
just like that and now we can drop this date time dot and then
um date time and then basically we can drop oops we can drop this
right so here we can drop that and we can drop that as well and we can drop this as well so this
looks much neater if i run it you can see that we get this output so date time
here we get the actual date only and then we can also get the time
in here so let me see whether we have the date so here yes we also have the date in here so we could actually get
the date like this um but if for example you want to
get the year right you can only get the year if
you want if you want to get the month and finally if you want to get the
actual day you can do it so if i run it check this out
so we have the time the year month and then this is the actual day
right and this is how you work with dates next let me show you how to format dates
with python
right so you saw how to work with dates in the previous video so if i run this i want to show you
something so here you can see that we have 20 20 and then the ninth and then 27th
so sometimes this is not the actual format that we want so maybe we want the format of this date
to be the 27th of september and then 2020. so let's learn how to
format our date i'm going to leave this first print statement here for now
so so we can compare things but the way we format dates is as follows
i'm going to extract this to a variable and i'm going to say now and i'm going
to print now so basically this is the same thing so if i run it you can see that we have the actual date
as well as the time but what we can do is say now dot and then
str f and then time and here we're gonna pass a string so
this is how we want to format things so here go ahead and say percent and then d
and then space percent and then m space percent and then capital y
and let's also format the time so here percent and then hour so capital hour and then
percent m capital m actually and then percent
oops percent capital s so this returns the formatted
date and i can say print on it just like that and if i run it
check this out so now we have things a bit different so we have now the 27th of september so
we reverse things and then the date and check the time as well so 0 0
and then 18 and then this is this is the actual seconds so i can do this actually so i can do a
forward slash here if i want forward slash and then column
and then column oops and then column here run it
and this is our format today if you want for example dash so many
systems work with dashes and there you have it
another way to format is so let me duplicate this if you want the month right so instead
of being a number but you want the actual month you can say b and then
run this so here we have september right so here this is the number but by
just saying percent and then uppercase b we get the name of the month
and if you just want an abbreviation so let me just duplicate this just simply
say lowercase b and then run and check this out you have
27th of sep instead of september and then you have the the actual um
time and this is how we go about formatting dates so obviously
we've done with date time but you could do it with the actual date so for the date let's
say date dot today dot and then strf and let's just grab
this here so it's the exact same thing so here and then we can say print
and and that so let me actually put it right at the end
so i'm gonna cut that and then put it here
and run it and check this out it's the exact same thing if you want
uppercase b there for the month so duplicate and then
instead of m uppercase b run it is the exact same thing this is how you
go about formatting dates
let's learn how to work with files in python so to create a file it's
very straightforward and easy simply type f and this is the actual name of
the file so in fact let's just say file and then open
and then here you can see that we can pass the file and then mode buffering encoding so
on so here what we're going to do is the following so we're going to say dot forward slash so in the
present directory we want to create a file called data dot c s
oops csv and then next what we need to specify is the
actual mode so the mode is whether we want to
write to the file we want to open a file for reading or we want to append to a file
so if you want to write to a file you simply say w so this will create a
file if it doesn't exist if i open up the project tab so in here
i'm going to press command in one and let's run this
you can see that we have date and it's not date that i wanted was data so let's just delete this file
there we go if i run it again you can see that we have a data.csv
so now inside this is empty so for now let me ignore the extension
but you can see that we've created a file so how do we
open the file for reading and writing in here let's change this to
r and then plus so this is how we open the file for read and write if you just
want to read you say r but now i want to open for
reading and writing so i can now use the file so here file dot
and then right and you can see that we can add um actually we can write a line
or we can write lines for now let's go ahead and write a line
and this will be id comma name and then email
if i now run the program you can see that if i open up the
data.csv check this out we have id name and email
and one thing that we need to do here is to close the file so anytime that you work
with files and you perform any operations on them you need to close the file so file and then dot and then close
this is how you work with files so in here let me go ahead and
have for example id one name jamila and then
jamila at gmail.com let's have another one so here
alex and then alex and then id will be 2. if i run
go back to data.csv you can see that we have everything in
one line but really what i want is a new line after each one so here i'm going to add a
forward slash and then n for new line grab that and put it here and the same
here if i run it go back to data.csv
and you can see that we have our csv file in here which is really cool and you saw
that every time that we run this we pretty much just override the file
with the new contents so if you want to append to the file you say a
just like that and now this will append so if i add for example
if i duplicate that i just want to comment this and then say three and then here samir
and then samir gmail.com run it and check this out
we have appended to the file but if i remove the a and then say
right and then plus and if i uncomment everything
and then run we've just override the file with new contents so
let me actually just put a note here so you know exactly so in here we have
w for writing and then a for appending and then r for
reading and then r plus for reading and then writing and depending
on the flag that you pass in here is the mode that you will operate on the
file next let me show you how to read from our file
now that we've written some contents to the file let's read it so to read let's use
the our flag so we just want to read the file
and let me just delete all of that and in fact let me show you that if we try
to write you can see that we have an error right so the flag is actually
there to do its job so we can only read now so if i remove all of this
and then i can say print and file dot
and then read so this will actually read the entire file
so there you go so this is the entire file if you want so if i comment this
so if you want to so file dot and then read so you can read
a line so here you can see that we've read the entire
file but you can also read line by line and to do it is really straightforward so if
i comment that out you can say four and then line in and then simply say file and here
print line if i run it you can see that we read
line by line and what reading is line by line gives you the
ability to is to take the line and then you know if you want to turn the line into an object
or do anything with it you can do it and if i show you so
let me just comment that out we can say file dot and then lines
so here read lines right and then run this this actually gives us
nothing but if we print and run it this gives us a list
with each line so you can see that this is line one line two and line three
and finally line four so there you have it this is how you
read from a file next let me show you a syntax which is
the preferred way when it comes to writing and reading from files
so another way that we can work with files is to use the with syntax so what the within
syntax gives us it gives us the flexibility of removing this file.close so we don't
have to remember to close the file when we open it
and the syntax is as follows so let's remove this from here and the way we work with
the with keyword and file is by saying with and then open the actual file
so in here we have data.csv in the mode
for now let's just say r because we just want to read and then as file so this is the actual
name and now we can perform everything that we want so here
we can just read the file as we did before and for now let's just say print and then
file dot and then read we just want to read the entire file run it and you can see that we get the
exact same output and the benefit here is that we don't have to say
file dot and then close this is automatically done for us now one thing that i want to
show you is if for example we say data so we know that this file doesn't
exist so if i run this you can see that we have an error right
so data dot csv no such file or directory so what we're going to do
instead is the following so we're going to check first if the file
exists and to do that we need so if i remove this we need to import
os path so i'm going to say import and then os dot and then path
so with this we can check whether the file exists or not so
let's say that here we have file and then name
equals two and in fact let's just have file name equals to dot and then data csv
and what we're gonna do is say os path dot and then file
actually is file and then pass file name and this returns a boolean
so if so if the file exists what we're going
to do is open here so let's indent this and let's pass the
file name in here file name and there we go
else so else we're going to print
that file and then file name
does not exist and now if we
say for example gibberish here we know that this file doesn't exist let's run it you can see that we have
file and then the file name does not exist however if we change this to data.csv
and we know that this exists let's run it
and actually i've said data.csv.csv so my back there run it and you can see
that we have the contents of the file so this is a better way of you working with files because
you want to check whether the file exists or not so i think we can even remove the dot
forward slash there so let's just try this and yes everything works the same
so there you have it this is how you read write and you've you've seen the
actual flags if you want to append to a file and using the always path to check
whether the file exists before opening the file if you have any questions on this section
drop me a message otherwise let's move
on in this section let's learn how to use python to fetch
data from the internet so right here i mean google.com and i want to show you
how to use python to retrieve this page right here so let me go back
to pycharm and in here we're going to say from and then url lib
import and then if i press ctrl and then space you can see that we have
couple options and the one that i want is request now what we can do is say
request dot url open and we're going to pass the actual
url so http and column for slash www.google.com
and there we go so now we can extract this to wave variables i'm going to
press option command v and now we have the url open
here so what i'm going to do is actually name this to r for request
now i can perform a print so let me print the actual request
and if i run this you can see that we have an object so here this is a response
right so we got a response back so with this response we can say dot
and then get and then code and invoke the method there run it
and you can see that we get 200 status code which means that the request was fine
and we can read the actual data so to read the data i'm going to print and then in here i'm
going to say dot and then read and then invoke the function
and if i execute the program check this out you can see that we
actually have the website so we've opened up
google.com with python you can see that this is a long string which contains some html
and javascript so there you have it this is how you can read
from the internet using python and you can see that this was you know in about four lines of code we
can read from the internet which is really awesome next let me show you how to to make an
api call and work with json objects
all right open up google and type jokes so jokes and then
api so in here go to this very first link so github.com
official joke api and what we want in here is to get a
random joke so here you can see that we can get 10 random jokes
or just one random joke so i'm going to grab this link right here and open up a new
tab and then paste that in and you can see that we have
some data back so this is a json object if i go back to that url
and grab this one or actually it's it's the same but random 10 so here at the end simply say
random 10
and you can see that now we get an array of objects containing jokes
so let's grab this url and use python to fetch these
jokes right here so let me just go back to this one joke first so i want you to see
so here you can see that we have the id type setup
and then the punch line here so let's open up pycharm
and in here let's just modify this a little bit so let's have the url
in here equals two and then last url for 10
jokes and then here let's pause the url just like that
now if we run the program you can see that we get an error and the
reason why we are getting an error is because of ssl certificate so what we need to do is just remove the
s so here instead of https simply say http and run
and there you have it so you can see that we have the actual jokes so here we have 10 jokes so
oops so here you see that this is an array and then we have 10 objects inside so let's
take this data and then use python to load the actual json
so i'm going to collapse this and what we need is to import and then json
and then json there we go and now
we can say json dot loads oops loads
just like that and we're going to grab the read so here i'm going to put this into a
variable so json or actually content
or let me simply say data so data and then paste that in and now we want
to load the actual data just like that so if i now extract this to a variable
i've got the json data and let's print
json data so json data so i want you to see things step by step
if i run this you can see that this is our json have a
look so what we're going to do is the following so we're going to loop through right so we're going to
loop through this json data and then pull out the setup
and the punch line so let's do the following so what we're going to
do is so remember how to loop through lists so let's say 4
and then and then j for json in json data and
now we have access to the actual json so this is the individual json
so here we can get the following so we can get the general so let's have a variable called
j nero equals to j and we're going to grab the
setup oh actually so here setup so it's not general so it's set up
my bad so setup there and we're going to grab the setup
and here let's grab the punch line so here you can see punch line so let's
just grab the punch line equals to j
and then punch line just like that and let's for now let's just print to
the console but if you wanted to turn this into an object you could definitely do it right so you could have a class
and in fact let's just do it so let's just do this so what we're going to do here is the following so we're going to
create class so let's create a class in here
so class this will be joke
just like this and remember we want to have the init so overwrite
methods init and in here what we're going to do is say
that we want to pass the setup and then punchline just like that
self dot and then punch oh actually setup equals two and
then setup and we want self dot and then punch line
oops just like that equals two and then punchline right and this is
our class so now what we can do is say joke equals two
and then joke and what we're going to do is pause the setup and punchline
and in here let's have a list so let's say
jokes equals to an empty list for now and we're going to
append so let's append i should actually just say jokes dot
and then append and then joke and you can see that we are building a
little program here so now we finished and in here
they should be within quotes just like that and now let me just
say print so we're going to print
so let's for now print jokes and then dot len
so jokes dot and then len just like that if i run the program you can see that we
have 10 in here but now check this out if we
loop so let's actually loop through our jokes that we go back so in fact what i'm going to do is
override the str so string so we're going to override the string
so here press command o and then str
there we there we have it and we're going to return so here this will be
the setup and then self dot setup
and then punchline and then self dot punch line there we have it
now i can go back and we can loop so let's loop so four
and then joke in and then jokes
we're going to print and then joke so
let's just have f got and this will be within curly brackets
and then close it here and then say jokes
now let's run it and check this out so you can see that
we have a bunch of jokes so uh this was the status code 200 this was
the json we got 10 jokes and you can see all the jokes so set up
do you want to hear my pizza joke punch line never mind it's too cheesy
i don't know if this was if this is funny to you but yeah so these are like very dry
jokes which they actually become funny uh so yeah this is pretty much
how you go about using the request so from url lib
as well as the json to read json objects so now you know how to perform
http requests
all right let me teach you about the package manager for python so pip is the package manager for
installing python packages remember i said that with python we can import existing code
that other people have written and pip allows us to download those packages and make it
available to us so in here you can see so i'm going to leave the
link in the section of this video so you can follow along and you can see that installation guide
should be very straightforward and basically when we installed python remember that i
said you should add python to the path right so when you do that everything
comes bundled up and if you have any issues you can refer to this page how to install pip
so once we have that out of the way we can go back to pycharm and in here so this is the
example where we downloaded jokes and you'll see where we heading to with this um little application
but in here go ahead and open up the terminal so in here you can see the terminal
and type pip and then three so this is to make sure that we have pip
installed so pip3 is because is what comes with python 3.8 so the
latest version that we have installed right so in here you can see that we have a bunch of commands
so the command that we want is install so install to install
packages and then you can uninstall packages and you can also list packages so
you can see that you know the commands you can even show information about package um you can verify so on and so forth
and in here you saw that we imported request from url lib now
the most popular package for performing http requests is this one right here
called requests so let's install requests and then use it
instead of the request that comes with python so open up the terminal
and in here i'm going to clear the screen so i just press ctrl l or you can simply type clear
right so if you want to learn more about how to use the time you know go ahead and check my course where i
teach the terminal and vim fundamentals so this is really important for you to
be able to use your terminals it's an essential skill like you should have right as a beginner you
should know how to work with the terminal so here let's type pip and then three
install and then requests
so requests so in here you can see that this is what we're doing right so we are
installing requests so this is the name of the module if i press enter
you can see that we have a bunch of things and everything was successfully
installed now that we have requests installed what we're going to do is use requests so let me collapse this
and we can say here import and then requests so you can see that we
have requests here and with requests the way that we perform the
request is as follows so let me actually show in the docs so you can see here you say requests
and then dot get so we want to get from a url so let's do that so in here what we're
going to do is right here we're going to say requests dot and then get and then pass
the url and what we get back is a response
so now that we have the response let me show you so in here
we have the response content and you can see it's simply.text so
what we're going to do is we're going to replace the data with response
dot and then text right here and i can remove
the request with this package right here so let's delete
this import and then you see that we no longer have to do this so let's just get rid of that
and let me put it a bit smaller and you can see that we have an error here so
the way that we do get the actual um code is by saying
response dot and then status code there we go and to be honest
this is everything right everything should work as before and let me just add some
spaces here and in fact we can even collapse this so let's take response here we're going to cut this and this will go
here we don't need this data anymore and let me add some spaces here now if i
run the program everything should work as before so here if i run the program
you can see that we still have our jokes right so remember status code 200
got 10 jokes this is the setup and then we have the punch line here
right so there you have it we've learned how to use pip we installed a module and we are
using it right so with python there are tons of these modules that you can reuse next let me go ahead and show
you something really cool that we can do with python and that is we're going to take our
jokes so we're going to take our jokes and transform this from text to speech
with python there is this library called pi text to speech that allows us
to convert text to speech and it's really really cool so
the installation process is very simple so you say pip install and then pi and then tts
so python text to speech and then this is like a version
and they give us some usages here so we can change the voice we can
increase the rate the volume so on and so forth so let me go ahead and show you how
to use this so let's open up pycharm and let's open terminal
and we're going to say pip and then three install and then
pi text to and then speech so tts
so pi tts and then x and then three install
and then enter just give it a second so it's
downloading
and that's done so let's now hide this and to import
the module you say import and then pi text to speech three
so now we have the module here so what i'm going to do first is the following
so in here you see that we have the jokes
and then we loop through the jokes here right so what i'm going to do is after we loop so after we loop through the
jokes i'm going to say pi or actually pi text to speech
dot and then we can say speak now i'm going to pass a text and i'm
gonna say amigos and then code so if i run this
and you can see that it said amigos code and you can even change the voice if you wanted to now i'm going to take
this line and then indent it because what i want to print is the actual joke
so here instead of amigos code we're going to say joke dot and then set up
and then by and then tts x3 dot and then
speak and then joke dot and then punchline so here
let's uh say here we want to speak the actual setup so setup
and let's take this line and then say
the joke oh actually the punch line right the punch line
and then if i now run this
center what did the great do when he got stepped on
the punk line he let out a little wine
set up did you hear about the kidnapping at school
the punk line it's okay he woke up
so you can see that it's reading which side of the chicken has more feathers is reading all ten jokes
the outside and then the next one there we go
what's forrest gump's facebook password the punk line
one forest one these jokes are really dry by the way let me just stop this and there you have
it so obviously just through an error there because i've just stopped it you can see keyboard interrupted but this is pretty
much how you turn text into speech with python this is really really awesome
and as i said so in here you can change the voice if you want so
here you can go and experiment with some other usages but here for example you
can change the volume here's how to change the voice so you're going to change the voice to female
you can do it right here and you can even save the voice to a file so you can even so
you can imagine that for example you might even take a pdf file you can convert the entire
pdf to voice and then you pretty much don't have to buy audiobooks anymore so
i hope you enjoyed this video if you have any questions on what we've done in this section please do let me know
otherwise catch me on the next one
i'm super happy that you made this far so in this course we've covered the
foundations of python which means that now you can go and explore different areas whether you want to
learn machine learning data science ai building websites
building restful apis full stack applications you can go and explore those areas
because now you've got the foundations of python so if you're new to my channel go ahead and subscribe and also give me a
thumbs up so i can keep on recording these videos and comment down below literally comment
down below and let me know what you thought about this video if you're not part of the amigos code community
go ahead and join i would love you to have you there and this is all for now i'll catch you on
the next one
you
hey guys welcome to this session by intellipad so this is a python full
course tutorial so in this session we'll be learning about python and as you know python is the most popular language
among programming beginners so this tutorial will be a lot helpful for you also guys before moving on with this
session please subscribe to our channel so that you don't miss our upcoming videos now let's take a quick glance at
the agenda we'll start off with the introduction to python and then we'll move ahead to python variables and
tokens once that is done we'll be looking into python data types after that we'll move on to the conditional
and looping statements in python once we finish that we'll move on to
functions in python and also file handling in python once that is done the final thing would be python arrays
after that we'll look into the top interview questions which is asked in in an interview for a python developer or
python roles and finally we'll end it with a quiz also guys if you're looking for an
end-to-end training on python we do provide that and you can check those details in the description
now let's begin the session so what is python well ladies and gentlemen you need to understand that python is uh you
know a very nice programming language to work with at the basic level and if you're thinking okay so what is it used
for well what is python exactly and all of these questions flooding your mind right now well let me answer that python
is basically an object-oriented language where you know all the data is considered to be individual objects and
worked with it so that is what object-oriented basically means and it's a high-level programming language where you know we don't use very complex
syntax to work with it is easily understandable and provides you know very high readability as well so by high
readability what do we mean well high readability make sure that even a non-programmer or a beginner can
basically understand a lot of code when looking through a python code well it's as simple as that and python is
primarily used for web development application development and much much more we know how much you guys are
excited for web development we know how much you guys are excited for understanding data science understanding
artificial intelligence deep learning machine learning everything in u.s might already know that python is used for all
of these applications right and that there's a reason for that basically python is known to be the world's number
one programming language in fact java actually had this bragging right of being called the world's number one
programming language and then python came in and pretty much from then on it has remained on the top spot since then
so the next question you might have is is python a new language is it an old language because you know if we do have
very experienced developers among us who've been working with java all their life c plus plus c sharp or anything
even wonder is python a new language well not exactly because python has been in existence since the 1980s you know
it's pretty much close to 40 years now python is almost a 40 year old language ladies and gentlemen and the most
important thing you need to understand that it gained a lot of momentum it gained it gained huge popularity in the
beginning of the 21st century and basically since then as i just mentioned in the previous slide it has been rising
and rising and here's the person who created python his name is eurova and rossum and he's an amazing developer you
can check out more about him after the session of course and then coming to some quick python facts that you might
know or not know well guys do let me know if you know any of these let's consider firefox you know firefox has
over 230 000 lines of code which basically calls to the working of firefox and it's all
written in python how amazing is that 230 000 lines of code of python for
firefox ladies and gentlemen and then coming to microsoft microsoft of course uh you know they have their own ide they
call it as the visual studio code and this is basically used to promote uh worldwide python development as well and
you can get uh you know pretty much free versions of this and python is open source if you've been wondering so
python is again python has been used by the community developed by the community and implemented very well by the
community as well and then coming to netflix did you know that netflix actually makes a lot of use of python
especially in the field of data science well everything from automatic image recognition it might be a recommendation
for all the tv shows in the movies we can watch on netflix and much much more but do understand that netflix uses a
lot of python and then coming to uber uber i'm pretty sure everyone knows about it and they actually make use of
jupiter notebooks and they make use of ipython to basically share and store all the data with respect to the driver
client interaction and all the ratings and all of that and much much more as you can see on your screen some
beautiful usage of python right here well on that note let's come to the topic of why one should learn python
well the first point that i would actually tell you guys of why you should consider learning python is how simple
it is and how beautiful the readability is so what do i mean well here's a simple java code which basically prints
the statement hello world you know we've all been in our first stages of programming where the first piece of
code we might have printed very well might be the hello world program right so here is how you would do it in java
okay so how do we do it in python well look at how elegant how beautiful and
how simple it looks ladies and gentlemen and i'm pretty sure if you had to write code and if you had to start out with if
you're a beginner you would prefer python for this you know there are no semicolons it is very much readable and
even even if you do not know a programming language you can understand that uh print hello world pretty much you know probably equivalence to putting
putting out an output which gives out hello world you know you can at least take a guess and understand but then as soon as you look at the java account you
might be taken aback you may be like whoa what's happening right and this is one of the most beautiful reasons why i
personally prefer python and why we have thousands and thousands of developers who actually prefer python as well
coming to the next point i believe it's convenience because again of course this point applies to multiple programming
language out there but the specialty of python is that you know since it's basically platform independent you can
run it on windows you can run it on a mac os platform you know basically apple's operating system and you can use
any of your favorite operating systems you know in fact if you want to run python on a playstation well you can do
that as well ladies and gentlemen yes on your playstation windows mac os playstation and many many other
operating systems for that note as well so this you know makes it very convenient for the developers for the people who prefer windows and of course
for the population who prefer mac os to everything else so understanding this point is very vital at this stage and
next is pretty much cross language operations what do i mean by cross-language operations coming to
cross language dynamics you need to understand that python can talk and work well with all of the languages that
already exist see for example there are languages uh you know from c java c plus plus we have javascript your language
such as rust we have dotnet and we have all of these languages platforms firmware libraries whatever you want to
call it and basically python brings all of this together and if you are an expert in javascript and you know you're
trying to implement javascript using python yes you can do that can you run some java code using python of course
and can you go on to use.net alongside python of course well as you can see where this trend is heading well it is
the number one language of choice for a reason and i believe this is one of those reasons so what do you guys think
head to the comment section and let me know so on that note let us quickly walk you through the procedure of how you can
install python on windows case it's a very simple and a straightforward process now i've broken it down to a
couple of steps and let's go with it together right so step one says go to python.org and head to the downloads page and let's do that side by side guys
so let me head to the python websites it's python.org for the people who are wondering uh i'll just go to download
here you can direct directly click on the link there as well since we're looking for windows python pretty much
detects that as for windows so we already are at the page where we hit the download so this pretty much forms our
second step as well so let me quickly uh you know save it on the desktop it's about 25 mb if i think yeah it's about
25.2 megabytes this will take a couple of seconds to uh download and uh in the meantime let's quickly check out what
are the next steps in our powerpoint slide guys so uh step two is again click on the download which we just did and guys as of this video being made python
3.8.0 is the latest a stable version out there so that brings us to step three guys step three will pretty much be
opening the installer and we should be presented with the screen so let's quickly wait for the download to complete and then we're going to open up
the installation box hey guys uh that took about a minute to install and we're presented with this screen which is the
installation screen just before you hit uh install now you can pretty much choose to customize the installation and
uh you know install it at a place of your desire uh make sure you just click this uh button which says add python 3.8
to path well what it basically does is it sets your environment variables and it sets the path variable to python so
as soon as you hit python in your command line you can just start using python directly guys so that's what it
does and it would be recommended that you do this even if you would not do this there would be no problem there are other ways to launch python and to use
it but if you are a beginner if you just want to hit python and then start up with coding you can pretty much hit the python to path guys and you just hit uh
install now and this will ask me for my admin password because we have to
install it as an administrator so let me quickly type in my administrator password and we can work with it guys
and i just entered my password so pretty much uh it should take about uh i say around two or three minutes to get the
entire setup process done ops in the meantime let's check out what's step four again step four is check the last option to add it to the path and install
and step five uh is the important step guys so we need to verify that our installation has been successful so for
that to occur we need to make sure our setup completes so let's just wait a minute and then we can go ahead with the setup guys
so guys now the uh setup is successful let me quickly open up command prompt to verify that it has been installed
correctly guys so if i go ahead and type in python there then pretty much python console is ready for us uh so let's type
in a sample code hello world
and as soon as i go ahead and run this we have the output guys so pretty much well as of this moment python 3.8.0 is
the official stable release of python and that's what we've been using guys so we can check out another uh code snippet
as well guys so let me do a equal to one be equal to two
c equal to three so much more right up so let us uh create a new variable d and
then probably add a and uh b to it so let me just quickly do this
we can print d well d is three let's uh multiply in
what let's let's create another variable call it e multiply uh
d and c let us print e guys i'm just doing this
to just show you that everything is working fine so three multiplied with three is three and so much more to just
get out of the console you will have to type quit uh followed by parentheses and you're out of there guys so this is as
simple as installing python on your windows guys and we just verified it using a simple piece of code as well
guys but python has another thing called as idle guys so idle is this uh pretty much interactive python console that you
can go about using and the shell is actually ready so we can go about uh typing again
hello learners and done so the python 3.8.0 works
perfectly on the idle shell as well so this is another way or to just verify the installation guys so coming back to
the presentation step seven is again an optional step but you will get there uh
very soon in case even if you're a beginner or an advanced learner guys so install the uh libraries that you pretty
much want there are many libraries that python supports and the most popular ones are tensorflow numpy skype sky kit
learn pandas matplotlib keras pytorch light gbm and so much more well these are machine learning deep learning
oriented libraries that are present on your screen but then the next step of installing python is to pretty much install all of the packages and
libraries that you want to go or work with further on guys now we have python
variables so this is the first thing that we are going to learn about when it comes to python so what are variables let's take
a look at a variable is simply a container it contains some value in
memory a variable points to a memory location where the value that you want to store
is stored so in python the data types will be identified according to the data we provide and i'll show you what that
means in a moment a variable should start with a letter or an underscore and cannot start with numbers so there are
two ways of assigning a variable you can assign a single value and you can assign a multiple value so before we begin let
me just show you what you can do and how you can execute some python now since i'm showing you some really common tasks
i'll be doing it in the shell now shell is not the way to write code when you're writing code for large
applications but when you're trying out small things and you're trying to understand how these things work what it
will be the output of one command or the other command shell is a great environment to work in so i'll show you
how i do it so i go to the start button i type python and it opens python 3.7 so
i open this and it's here so now let me just show you what i mean so the first
bit of code that i would like you to write is you should let me just uh
make a change to this so that you can see it properly so the font size i'm going to increase
it to 28 so that you could see it properly and click ok hopefully it's visible
so what i'm going to do now is now i can type any code that i want to
write so i will type p-r-i-n-t print print is a function that will take in
something that i want to print on the console the function always gets called with
these parentheses opening and closing and two ports inside it we're going to
write hello world hopefully you're writing it with me and once you're done with this press
enter and as you can see it got printed on the screen now why did we have to put quotations here why did we have to put
the curly parenthesis there we'll discuss all of that in a future video but note that
you've written your first line of python code and it was really easy you only needed to write one line of code and it
did something so many languages required to line like 15 or 16 lines of code
for it to just print something on the console but here we were able to do it with just one line this is one of the major advantages of using python
now we come to data types so as we have already discussed in python variables the data type will be identified
according to the data that we provide okay guys a quick info if you're looking for an end-to-end python certification
training we at intellipaat provide that and you can check those details in the description now without any delays let's
continue with this session so what exactly is a data type well data type is basically something that allows us to
understand what kind of data are we storing in a variable let's say that i want to create a variable named name
and i want to store some name let's say the name is john now i want to check what data type it is
to press type name so it's a class of type string so it's a
string a string is nothing but just some characters strung along so it could be a
sentence paragraph basically any text that you need to store you store it in a string if you want to store it one
continuous long line of text you do it using string now that is done there are
many other kinds of data types as well let's say that you want to store a whole number a number which has no fractional
point you use integer for that to give an example let's say num is equals to 1
as you can see one has no fractional part width it's a whole number and i press enter and if i look at the type of
num i get integer so integers store numbers with no fractional part on the
other hand if i want to store some fractional part let's say 1.5 and i check the type of num now it will
be changed from integer to float float is something that stores fractional parts so if you wanted to
store the value of pi you would store it in the type float now you don't have to define what kind of type you will be
using because python takes care of it for you this is what is known as duct type duct typing basically means that python
takes a look at the class and performs the functions accordingly so if you take a look at the value that you are
pointing to and it will take a look at it and understand that okay it's a number which is floating point so we can just
use it uh so we can just assign a float class to it now the main question is why
do we need to use different kinds of data types well there are many reasons the first and the form and the most
important reason would be that types are important for us to distinguish between different kinds of data so we can for
instance add two numbers so one plus one will give us two if the computer does not know what kind
of data it is and it tries to add it it will have no idea how to perform it so let's say that i gave it instead of one
plus one i gave it b plus c
so what do you think will happen in this scenario if you want to take a guess pause the video for a moment think
what's going to happen and then resume it so what's going to happen is it's going to concatenate this tree as you can see
it just took b and added the next string to it i could even make it a little bigger b
let me just do it this way bsda and css and as you can see that it added
it to the uh it added those two three listings together now if this was not a
not string and if i were to use a number again what do you think will happen
we get an error so this is where we use it because adding a string and a number
let's say that you were giving an exam and they say add a plus 15 that would make no sense and the computer will have
no idea how to process it it won't have an any understanding of whether it should add two numbers whether it should
convert it to string whether it should do something else so for computer to be able to comprehend the kind of data that
you're giving it data types are used and there are many other reasons behind it as well another reason being determining
the size of the variable so if you have a string you the size of the string is determined by the number of
characters it holds if i have a string called abcd
it will have four bytes it will be occupying four bytes on the other hand if i have a number it will be occupying
two bytes and four bytes depending on the kind of com interpreter you have in the language of the environment you have
so this also allows for computer to understand how much memory to allocate for a specific variable this is why we
use variables like this so hopefully it's clear to you so let's move on so now we'll take a look at how to assign
values to a variable i've already given you a little test of how that happens
but let's take a look at this so we can assign a single value or we could
assign multiple values so let's take a look at how that works let's say that i want to assign as we've
already i've already showed you how i do that but let's just do it again
let's say that i want the age i want to store someone's age let's say
they are of age 25 i present this is assigning a single value to a variable
so i'm assigning 25 to each if i were to type name comma h n equals 25 this is going
to show me an error because it does not know how to unpack this value this is just one value and i'm expecting two
values now if i were to move ahead instead of doing this
as we've already seen the naming conventions are also there so you can't name a variable with that begins with a
number so if i wanted to name something underscore name
that would work just fine as you can see this is fine but if i were to start with anything other than underscore that's a
dollar name or if i even if i were to start with the name with a an integer number
this is also going to cause an error so anything other than a character which is anything from a to z whether it's small
or big and anything that is not underscore is going to cause an error so
always make sure that you're assigning the variable names correctly another thing that you can do is naming
a variable the variable cannot start with the number but it can end with the number so if i were to say name one
this will work just fine and if i were to say name dollar this is going to cause an
error because uh dollar already holds a value in python language so it's a token which
we'll discuss in a later video so make sure that you are naming it correctly and always make sure that you're naming
your variables in a way that helps you understand what exactly is it that you're trying to write you can start it
with two underscores as well that will work is fine no matter how many underscores you are passing it it's going to work just fine so these are the
variables that we have declared so far and we have assigned a single value to it now let's take a look at how to
assign multiple values so assigning multiple values is also quite simple as you can see here if you
want to assign one value to a multiple variables we can do what being done in the first line which is a equals to b
equals to c equals to 10 that means set all the variables on the left hand side
which is a b and c to 10. on the other hand if you want to do it you could do it otherwise as well so we could assign
multiple values using the comma operator so i'll show you how that works in a moment let's just see how that works if
i were to go a call a equals b equals
c equals 15 and if i were to print a it's 15 b is 15
c is 15. now if i want to change it i want to assign 10 15 and 20 to all of them
instead of doing the equal sign what i do is i use commas and i tell it okay
a comma b comma c now i want 10 assigned to a comma 15 assigned to b
and 20 assigned to c i press enter a b c
so i have to make sure that i'm using the correct ordering order matters here if i were to use a b and c uh if i were
to use b c and a then b will be assigned 10 c will be assigned 15 and a will be
assigned 20. so make sure that the order matches with the values that you're providing it
now let's take a look at python tokens all right so now let's take a look at operators so operators are just special
symbols that are used to carry out arithmetic and logical operations in python there are several kinds of
operators so we have all of them listed down here so the first kind is arithmetic then
there's assignment operator thus comparison operator logical operator bitwise operator identity operators and
membership operators and we'll take a look at them one by one so let's move on and see what are
arithmetic operators well as the name suggests we use arithmetic operators to perform
arithmetic operations or mathematical operations things like addition subtraction multiplication division modulus and
exponentiation so addition basically adds two numbers so we can add six plus five in which
plus is the operator and six and five are the operands similarly we can subtract we can
multiply two numbers we can divide two numbers modulus operators is used to
give us the uh remainder so if i were to go 7 modulo 2 it will give me 1 because
when we divide 2 7 by 2 we get a remainder of 1 and similarly exponentiation is used to
raise a number to a specific part so for instance if i were to uh type 7
then 2 times the multiplication symbol which is the asterisk and then i type 2 that means that we are multiplying 7 by
itself two times so that's what these operators are for these are very easy to understand these are just basic
mathematical operators and they are more very commonly used in python then comes assignment operators so
assignment operators as the name suggests assigns a value to variable so let's say i have a variable x and i
want to assign the value 10 to it i want it to hold the value 10 so i could just type x is equals to 10
which is what is shown here now there are some extensions to the simple assignment operator which is the equals
operator you can add a plus right in front of it and what it will do is it
will add more it will add the number that is on the left hand side of the operator to the
right hand side of the operator to give an example as you can see we have plus equals just the operator
and we type x equals to x plus 2 let's suppose that before we execute this this was already executed
the x is equals to 10 uh statement was executed and x contained the value 10
after i run this code what will happen it is is we'll take a look at the number
that x holds which is 10 and it will add 2 to it so it will become 12. now it's
following the same logic we have minus equals so the minus equals operator is going to do the same thing but instead
of adding 2 it is going to remove the number that's on the right hand side so x equals x minus 29
will subtract 29 from the already existing number in x and assign that new
value to x similarly there's multiply equals that's divide equals and there's
or equals so this is basically a binary operator or and bitwise operator and we'll take a look at that in a moment
and then there's comparison operators so comparison operators as the name suggests are used to compare two values
let's say that i have two values that have been entered by the user and i want to check there i want to compare the
values in them so this is where this comes into play now let's say that you have a login form and the user enters
the registration name the registration number then they enter their password
and just to make sure that they have entered the correct password you have a confirmed password field as well so when you're validating the form you need to
check whether or not password in the password field and the confirm password field are equal to each other so this is
where the double equals come into play now the reason why we have two equals and not one is because one equals is
used as assignment operator the operand on the left hand side gets assigned the value on the right hand side here we are
comparing the two values so operands on both the sides will be compared to each other then just the opposite of it would
be the not equal operator the not equal operator is used to check whether or not
uh an operator or an operand is not equal to something so if i were to go
and check whether 1 is not equal to 2 since 1 is not equal to 2 it will return true
similarly we have less than we have greater than we have less than equal to and we have greater than equal to and
their names are quite easy to understand as well they check whether or not one value is less than the other value or
not or whether it's greater than or not then there's logical operators so logical operators are used to combine
conditional statements so if i want to check whether or not some condition is true and the other condition is true as
well then i use and it will return true if both the statements are true similarly
there is an or statement or statements are used to check whether or not something is true or not let me just
show you one example so if i were to use python
i'm going to show you some python code here so let's say x is equal to 15
and y is equal to 16. now if i want to check whether x is
equal to equal to 15 and y is not equal to 16 so what i can do is i can just
check s is equal to equal to 15 it returns true y is
not equal to 16 and it returns false now if i want to check if both of these conditions are
true so then i can just type and y is not equal to 16 and i present
and it returns false because one of those conditions is false so that is the
problem because y is equal to 60. now if i this
then it will return true so i'm checking whether x is equal to 15 and y is equals
to 16. if i were to change the value of x to let's say 14 and check this
condition again i'll return false now the or operator is actually a little different
if i were to use instead of and i use or what will happen is it will check whether x is equals to 15 which is
clearly false here and it will check y is equal to 16 if either one of those statements evaluate to true it will
return true so since y is equal to 16 we are getting true but if i were to
check if y is not equal to 16. since both the statements are false it'll written false
so basically what we're taking a look at is if we want to check whether all the statements are true then we use the and
operator if you want to check just one statement is true out of all the statements that we have provided then we
use the or operator and the not operator is used to simply revert the statement
so if i were to check 10 is
not 10. then it's not 10 it's going to return
first because 10 is 10 but if i were to check 10 is not 11
then it returns true so i'm just checking for the uh opposite operator and that's going to work
okay guys a quick info if you're looking for an end-to-end python certification training we at intellipad provide that
and you can check those details in the description now without any delays let's continue with this session
now let's move ahead and then comes bitwise operator so bitwise operators are a bit difficult to
understand so let me just explain using notepad so underneath the hood inside any
computer programming language numbers are represented or any value is represented using binary
so binary is basically just some combination of zeros and one so
when you hear something like integers can hold 32 bits basically what it means that it has 32 0 32 positions that can
be filled with either 0 or 1 and any value that we see on the screen is due
to some combination of 0 and 1 on in those 32 positions to give you an example let's say that i have a four bit
number four bit number means four binary digits number found by four
binary digits so i will have this
will be zero since all the four numbers are zero now what we're doing is
i want to check uh if in case you don't know anything about binary numbers i can give you a really quick refresher here
uh each position is represented by one two four and also so there so
four eight four two so what happens is if each position
let's say so these are the positions that we have we have 4 3 2 1
so if any of these numbers is turned to be 1 then that number is raised to
the power of two let me give an example if let's say this was one and this was one if this was the binary
number that we had which was zero one zero one so the way we do this is we
take a look at it and we go 2 raised
to the power of 4 and you multiplied by the binary digit that's there which is 0
and we do the same thing for all of so if you have if i was to do the same
thing to all of them let's just do this
now we will go 2 raised to the power 3 and the number at the third digit position is 1
and 2 raised to the power of 2 and the number should be 0
and 2 raised to the power 1 uh 2 raised to the power 0
this would be that this would be zeroth position in first position so all we have to do is just do
one three two one and zero that will work so this should be three
this should be 2 should be 1
it should be 0 and we multiply it by 1. so as you can see the number at the 0th digit is 1 so
we multiply it here by 1. then at the first position is zero second position it's
one in the third position zero so what it what ends up happening is we end up creating the sequence in which we go two
to the power of three is eight multiplied by 0 plus 2 to the power of 2 which is 4 multiplied by 1 is 1
then we go 2 to the power of 1 which is 2 multiplied by 0 and we got 2 to the power of 0 which is
1 multiplied by 1. and this ends up giving us 0 plus 4
plus 0 plus 1
and we get 5. so this might seem a bit complicated but that's how the numbers are calculated
underneath the hood you can take a look at some binary refresher that will take you look at what it means
now because we only have four places to put zeros and one since we have four digits we could go from a number that
has all zeros to all one and everything in between this could end up in numbers ranging
from 0 to 16 so if we have four binary digits then we
can make numbers we can represent numbers in binary format ranging from 0 to 16.
anything above that we've run out of space we can't do anything about that 0 to 50. so that's how we will do it and
anything in between any configuration like 1 0 0 0 can also represent some number
between 0 and 16. now we come to bitwise operators so what
they do is they instead of operating on the numbers that we see they operate on their binary forms so let me give an
example we have an and operator so what and does is
if i were to give you 0 and 0 it will return 0
similarly 0 and 1
will return 0 1 and 0 will return 0
and 1 and 1 will return one so what it does is very
much like the and operator that we had taken a look at previously in the logical operators section it takes a
look at all the operands in this case we have two operands because it's a binary operator and we take a look at the left
of operand and the right operand and if both of them are one then we get one if
either one of them or both of them are zero then we get zero so this is what it looks like similarly
for r what we end up doing is just as we did in the logical operator
just one of them need to be true so zero could be considered false and one could be considered true and then we'll get
the value so since both of them are false we could both of them are zero we get zero
one we get one for you the second and the third one and all of them we get one
so as you can see this is what the operators do the binary and binary or
operators xor is a bit special so xor is used for exclusive or that
means both of them should not be same either one of them has to be one but if both of them are one or both of them are
zero then the value that is returned should be zero
these are exclusively used in the building of logical gates and all that but they are also used very much in
programming and there are some very nifty tricks that you can do with binary operators that could allow you to create
more efficient programs so do take a look at them so these are all the operators that we have studied so far let's take a look at left shift and
right shift so what left shift does is let's say that i have a number like this
and i want to shift it by two so this number represents one now what i do is
i want to shift i go left shift two this basically means that whatever
number we have shift it to the left by one so what happens is it will
shift all of these zeros by one and pad the left part with zero basically move
it to the left hand side by the positions that i have so since i have given two it will do it twice
so as you can see first one was at the zeroth position then it was shifted two times so now it's one and two in the
second position and from one we have come
to four right so that's that's how this works so
this is what the operator left sheet operator does it takes the binary format and shifts it by two now on the other
hand we also have right shaped operators and it does exactly the same thing but it does it in reverse so if i were to
give it this and just change the left shift to operator to the right shift operator it
will give me back the original result it will give me back zero zero zero one because it will shift these two to the
left there are nothing there so it's removed and add two zeros at the begin and we
get this we remove this and we get this so this is what the binary operators do
binary operators work on the binary format they shift it to the left they shift it to the right and at the very
end let me show you what the not operator does because this is very uh something that's not shown very
accurately not operators turn the number from uh turn all the bits from one to zero and
zero to one so if i were to give it zero zero zero one and if i were to use the not operator right in front of it
what will happen is it will take a look at all the binary digits and it will flip them so if it's 0 it's converted to
1 again it's 0 convert to 1 0 convert to 1 and 1 then convert it to 0. so
essentially we're just converting the numbers now when you do use it make sure that you understand how the signs work
so in binary format all the numbers that are stored in the negative numbers there is a few nifty things that go on in the
background so make sure that you understand how the signs work and when you shift the numbers and their binary
representation will flip so all the numbers that are 0 will convert to 1 and all the numbers that are 1 will be
converted to 0. so that's how the binary operators work they're very easy to understand once you understand the
basics of how binary works underneath the hood and you can do some pretty powerful and pretty efficient things
underneath the hood when you understand the binary digits work so let's move on
and then we have identity operator so what identity operator does is it's used to check the whether the object that we
have is the same or not let me give an example so if i were to open python
uh and i want to use the id method and i want to pass it a number one
you see this long numbers long number this is what's called the id of the
object since python is an object oriented language numbers are represented as a object of integer class
so if i were to type try to figure out what the type is
of one i'll get class of integer so if i would and similarly if i were to
check type of two i get this and if i were to get the id of 2 it's this as you can see
these two numbers the id of 2 and id of 1 are not similar similarly when you
create your own classes you create your own objects they have their own ids as well this is used to differentiate
between two objects that have almost the same structure but still there are two separate objects so if i have two
different kinds of uh strings or two different kinds of numbers let's say i have one 11 and i check the id of this
it's this and this is this so as you can see both of them have 11 and they though they
don't have the same id because strings are immutable so as you can see these have the same numbers
one eight one eight seven five two and same so these are used uh to check whether the id of two objects is same or not so
if i were to check with the is and is not operator if i were to check one is
one since both of them have the same id illusion true but if i were to check one
is one it will return false so this is this is what happens with
this if i were to check one is not string one then it's true
so that's how it works and this could also be applied to objects when you're learning object oriented programming you
can create your own objects and then you can take a look at that and then comes the membership operator now this is also
very quite uh useful and i think python has it in many other languages don't so
it's an operator that allows us to check whether or not a number is in a sequence or an object
so to give you an example uh let's say that i have a list of numbers so i have one
two three four okay i have one two three and four
and then numbers so i have four numbers
in a list now if i want to check whether a you number let's say entered by the user is present in this list or not then
i can simply instead of just going through each running a loop and then going to looking
at each number going is one equal to the number that the user entered is 2 equal to is 3 equal to 4 equal to that number
i could just make python do it easily by typing four in nums let's say the user entered the
number four and you and it returns true because four is present
if i were to check eight in nums it will return false because eight is not present in the stream but if i were
to add it
and then take a look at nums and now if i check if it is in the nums
it is so that's what the membership operator does if you want to check whether something is not present in nums
i can just do this and neutral and false and if i were to go and remove
dot pop so 8 is removed
if we take a look at nums now and if i check whether 8 is not in nums it is written true so that's how that works so
membership operators are judging you to check whether or not something is present inside a container or inside a
group of sequence that we have and with that we have come to the end of operator section and we'll move on to
data types in python so python tokens in python every logical
line of code is broken down into components these components are called tokens
so there are many test tokens the normal types of tokens that we discuss
are keywords identifiers literals and operators
so everything that you write in python is a token of one kind or the other
let's take a look at them one by one so keywords what are keywords well in
python keywords are special reserved words they hold special meaning so these words are something that you cannot use
to define a variable so they convey a special meaning to the compiler or the
interpreter when the compiler or the interpreter takes a look at this word they'll understand that it has to
perform certain action it has to allocate memory it has to create something on the call stack it has to do
something in the background instead of just treating it as a normal variable now each keyword has a special meaning
and a specific operation so we'll take a look at them one by one we'll come across many keywords we'll take a look
at them what they mean one by one we should never use keyword as a variable
that because that's going to cause a lot of problems when we run into a later related code and we'll understand what
that means in a moment as well so these are some of the keywords that python uses so as and continue break
except dell len from import pass lambda there are many
many others and these all hold special meaning and as you get deeper and deeper understanding of what python has to
offer and how you can use python to create your own applications you'll understand where these keywords are used
the main point that you should understand is you should never use them as a as a variable name so again let me show
you an example let's say i open the python console now if i want to type
ret is equal to 7 this works just fine
but if i want to type return return that's a special keyword and
we'll take a look at what that means in a moment but if i were to assign it to 7 i will get an invalid syntax error
mainly because return is already a keyword if i were to type return one again that would work just
fine but make sure if you try to use some keyword for this this is going to cause the problem now now that that is
done let's take a look at something else so these are the keywords but uh
there are other two consistent called identifiers so an identifier is mainly a name
that is given to something in python that we can give that allows us to
identify it later on so these could be names given to variable names given to a
function a class or an object in case you are not familiar with function or class or object you are familiar with
variables because this is what we just discussed but functions classes objects everything
else will be discussed later on so don't worry about if you don't understand it as of now you'll get to understand it
throughout the runtime of this presentation so there are certain rules that we need to follow
when we're naming an identifier the first thing is no special character except underscore can be used as an
identifier so we can't use a special character to be an identified a variable name or
anything similarly keywords are not something that you can use in place of an identifier so as we already saw we
can't use return we can't use four there are many other keywords that you cannot use as variable names as something that
you can use as an identifier then python is case sensitive so that a variable
which is named v a r with v capitalized and a variable named v a r with every
characters in small less lower case these are two different identifiers so if i were to type v a r with v
capitalized equals to seven and type small v small n small r equals to seven
in five equals to eight and if i were to print the values both they will get different values so these are two
different things in uh when python interpreter takes a look at it it will assign two different buckets for them
then the the first character of an identifier can be an alphabet or an underscore but not a digit so as we have
already seen that we can use any alphabet as the starting character of our identifier
variable name on the other hand we can use underscore as well but we cannot use a number a
digit is not something that we can use so that's you can use it afterwards it
could be the second or the last character or anything in between but can't be the first one so let's take a
look at them if i were to open the python console we have several ways of doing it in python uh a variable is also
an identifier so let me just show you the casing pro so variable 7
if i were to name it with a capitalized v it's a 7 and if i were to name all of them
capitalize with 7. so
let me just change it now it's 7 it's 71 and it's 72.
so if i were to print var with everything in lower case
it's seven if i were to print it with v capitalized it's 71.
if i were to print it all capitalized it's 72 so all of them hold different values and the last thing is we cannot
start it with a number so let's say 1 var equals to 7 we'll get a syntaxes
but if i were to do it v 1 a r this is just fine it will work
v one a r and it works just fine now we come to literals so
literals are just raw data that is given to a variable so literals can be of many
types string literals numerical literals boolean literals special literals and
we'll take a look at them one by one so as you can see we can have several kinds
of literal this is some code that's been written to you written for you and we'll take a look at string literals first so
found by enclosing a text with quotes both single quotes or double quotes can
be used so this is some code that you can take a look at and you can type it in your own console you can type it in
any other kind of environment in which you can run python code i will expect you to run it in console because
that's where you get the most immediate feedback but it's your choice to run it in any other environment if you're
comfortable with it so let me just show you what we can do here so i open this and as i've already discussed we need to
enclose our text within codes to tell the python interpreter that it's a string let's try
it so if i were to give path is a variable and i want to assign a
string literal to it i can type a sample path
press enter and it works this is simple
if i were to type single quotes this wouldn't make much difference it's going
to be just the same it's going to work just fine now the reason why we have single and double quotes for this it's
mainly because in c and c plus plus and j and many other languages like java
single quotes were used for handling a single character not a string but a
single character so a single character would be something like a that's a single character a string with
lengths of ones is something that's called a single character now the way it worked in java and c and c plus plus was
that if you were to attach multiple characters one after the other so let's say a b c d
and then you were to do it that way then that would be a string and for that you can't use single quotes you have to use
double quotes i'm simplifying things a lot because there's a lot undergoing like the null pointer and all but you
don't need to worry about that just need to understand why there's two codes and why there's one quote and that's the
thing i'm trying to get across so if a person shifts from a switch of a person's shift from c plus or java to
python they will be expected to use or they will think
they'll be using a single quotation mark for a single character and that would work and for that to work they have
created uh for they have allowed for us to use both single quotations and double
quotations there's also one thing that you could do you could use three single quotes as well so if i were to
write a really really really long line of code instead or a really really long
line of string i could just start it with three quotes i press enter as you can see the prompt instead of it being
three arrows pointing left it's now become three dots now you can type anything let's say
that i'm typing this i press enter it's still allowing me to type i type this let's say that you're
typing a paragraph or a note or some or an email or something like this i can do it this way
now let's say that this is everything that i wanted to type including the enter character now if i want to end it
again i type three single quotations press enter i get back the prompt with
three uh arrows pointing left i type in the word line press enter and as
you can see i get everything this backslash n characters is something that is used to determine a
new line so if i were to print it using the print stamping function that
we have already discussed press line as you can see it presses it
starts here enters or creates a new line prints everything wherever the backslash
n character comes in then at the end it again uh starts a new line and then ends it
there so the backslash n character is a special character that tells you that there is a new line here so you don't have to worry about that as of now but
just understand that that's how we do it it's not just strings though there are many other different kinds of literals
as well there are numeric literals as well and numeric literals allow us to
use use variables that can store numbers now we can have positive and
negative whole numbers with no fractional part as integers as we have already discussed we could have real
numbers real numbers are numbers with fractional part using the float variable and we could have
long log is also something that could be used to store uh values but the
important thing is that it could store a much larger value than integer so as you can see in the description it says an
unlimited string of integers followed by uppercase l or lowercase f and i'll show you what that means in a moment and then
it's also something that you could do you could store some complex numbers so
numbers with real and imaginary parts now if you have worked with uh if you worked with mathematics if you worked
with the real and complex numbers that you understand what i'm talking about if you not work with it that's totally fine
it's not something that's used very often it's only used in special cases where you need to display complex
numbers so in our case let's just take a look at this we have a positive and negative numbers so we can store that in
integer as well let's say that i want to store negative 77 i can store it in number
or positive 77 i can store it in number and the type of number will still be a class of integer
right but if i were to attach
capitalized l here that would cause an error oh because it's new version so nevermind so
if that was the case then i could do that but it's not
yeah so as you can see it's working fine now if i were to do a lot of other
things like floating point numbers 1.56 and if i were to get the type of it
and press enter this would give me a class of float so float as we have already discussed is
something that is used to store floating point numbers or fractional numbers or real numbers
however you want to call it so that's how we stored that number now there are many differences between how
these are stored in in underneath the hood they are stored
using binary binary format and we don't need to get into that
but the thing that we need to understand is that when we're using a binary format underneath the hood python takes a look
at the data type and then decides how it wants to set the binary format of that
number so that's why we do it that way now there are many other ways you could do it and
may you could use many other many other tricks as well to store other kinds of
numbers convert float to integer can divide two numbers and make it convert to float or anything else that's also
doable but it's it's mostly that you're supposed to do it uh easily that's there
make sure that you're in the easiest option make sure make sure you're choosing an option that works for you
in person the value of an integer is not restricted by the number of bits so it can expand to the limit of available
memory and no special arrangement is required for storing large numbers now
that is mainly because in python you don't need to uh as i've already told
you it's a high level language it's not a low level language so you don't have to worry about
changing the types or the uh available bit size of a number
when the number becomes large python will do it for you automatically it will take a look at the number it will take a
look at whether or not it's exceeding the current memory bounce and it'll assign a larger memory bound for it so
that you could add more numbers to it unless and until it reaches to a point where it's uh overriding the available
memory that then there's no memory to store the number and cause an error and no special arrangement is required
for storing large numbers python again does it for you so you can just follow on uh working on your application instead
of working with the nitty gritty details of how things work underneath the hood this is why i told you you don't need to
worry about the binary arrangement underneath the hood python will do it for you then comes boolean
so booleans uh evaluate to true or false true and false are basically a human
construct so let me just show you what that mean if i want to check something let's say
that there's a user and i'm building an application and i ask him to enter a password
he says the password is abcd he's creating his account he says abcd
then it comes to confirm password and he writes abcd again now i want to check whether or not
password and confirm password contain the same number so i press password
equals to equals to confirm password i press enter and i get a
boolean value of true so this is what allows me to understand how to move forward if it returns true
then i can basically move ahead and tell the user okay everything worked perfectly i'm going to store it in the
database and do whatever i want with it on the other hand if it had returned false let's say the confirm password was
abcd1 the user mistyped it and now i check whether or not they are
equal i get false so this is what boolean values are you can assign them yourself so let's say b o l
equals to true make sure that you understand that the first letter is capitalized so a
smaller letter t r u e will not work since python is case sensitive so if i were to type
that's true and i can also assign false to it
press enter and this works as well so this is how that works
now that boolean is uh understood let's move ahead and see what other things that we have for us
so we have special literals these special literals are something that we
can use for ourselves so these special literals in python are called none
which means that the variable is yet to be initialized so if you're coming from
other languages there's concept called null n-u-l-l so that's basically what
python uses but instead of null we use none so let's give let me give an example
again let's say that the user is entering something the confirm password
and the confirm password field has been left blank so instead of writing something inside
it he chose to wrote nothing and they submitted i will get a none value here that means
absence of a value that the user has not provided a value so that could that basically means that if i
print confirm password now i will get nothing because nothing is there it contains no value it's empty think of it
as a box that contains nothing as of now and when the user does enter something that box will contain that value
so that's what none is used for it's used to define absence of value not an empty string not any other kind of
string not zero not anything else but in absence of value
and the type of none is none type in case you were wondering and now we have operators
so let's take a look at some data types in python so data types and pythons could be divided into two parts
immutable and mutable so immutable data types are data types
that cannot change on the other hand mutable are data trends the data types that could have their values changed so
for instance string numbers and tuples will have some value assigned to them
and then when we want to change them instead of adding something to it it will create a new data type for that it
will create a new value for that variable to hold on the other hand in mutable we have lists
dictionaries sets and then lists we have several types of generic list of tuples
and all we'll take a look at them one by one so let's take a look at them so we have numbers so a number is
basically as we've already discussed data types such as integer float and complex data types they come in numbers so as you can
see a whole number with no decimal point is integer a fractional number a number
that has one or more decimal one or more numbers after the decimal point uh is
floating point number and a complex number is a number with real and imaginary parts so
again complex numbers are not that prevalent mostly we use integers and floats complex number have some use case
but not a lot then comes strings so a string is basically a lot of characters that are
enclosed within either a single or double quotes and they are used to store text so a
string literal could look like this as we've already seen so there are some operations that are being performed on
string and we'll take a look at them now so if i were to open my python prompt let me just define a string
so s d r i n g equals to hopefully you can see this and if i type a b c d e f g h
press enter this is a string now if i want to take a look at the length of the string how many characters are there in
this enclosed within the double quotes i will type length string
and i have eight characters one two three four five six seven eight
so that's correct now let's say that i want only the first four characters this is what is known as
slicing this could be done with a string or with any other character as well
firstly let me show you what happens if i do this i get a
this is what is known as indexing into a string basically what i'm doing is i'm
saying in the string variable whatever data it holds i want the data that is stored within
the first position and in string everything starts with the position starts from zero
so zero is the first position one is the second position and by that logic since there are eight variables seven will be
the last position i press seven and i get h if i try to go outside these pumps let's say i press 9
i get index out of range basically uh there is nothing after the position 7
everything outside that is not accessible by python we have not assigned any memory to it so that's
illegal for us to do and that's why we get an index error as you can see here
index error mainly because we are using this and this is what is known as an index something that is
enclosed after a variable named enclosed within two brackets
so now that we know how to access a single variable a single character in a string
let's say that i want the first four characters first four as an a b c d so
i start from zero and i want everything before the fourth character before the
fourth character why well because uh zero
one two and three are the first four characters because it starts from zero so we have
zero one two three which are first four characters so how do i get
all of them at once let's say there are 15 and i want 0 to 14. so what i can do is i can type 0 after that i type a
colon and i type 4 this means get me everything from the beginning of the string and write before the 4th cap
so the 4th character is e and before that is d i want everything from a till
d press enter and i get a sub string of it which is a b c d
so this is what uh slicing a string looks like this is what's known as a slice operator now you can do it every
other way as well it's not necessarily that you start with zero you can start with three to four which will give you i
think just one character which is d now another thing if i were to leave
this off what do you think will happen pause the video and try to think about it but
if i were to do it now it starts from zero so it defaults to zero
if i were to start it with the number that this it will give me an empty string but it makes no sense
so that's how you do that and finally if i were to leave four off
since we know what happens here i think we can probably guess what's going to happen here i'm gonna press enter and
you can see what happens what happens is we take everything from five till the end so we have the fifth character or
this the sixth character in this which is on the fifth index is uh let me just
print the string again let's go number correctly so it's this so this is 0 this is 1
this is 2 this is 3 this is 4 and this is 5. i want everything from the fifth
character till the last character so this is what that means and finally
i can use negative indexing here as well so i want everything from the beginning
till the last removing the last one character if i were to remove the last two
characters i can do this and this works just fine as well so that's how slicing works another
operation we can perform is replace something in this so let's say string dot
replace if i were to show you the example here as you can see it says replace e d with e
and it will do that here but let me just show you replace
f with g i press enter it returns another
string to me which is a b c d e g g h now if i were to take a look at the
string variable that contained our value it has
the same data so when we perform this replace operation
what we're actually doing is we're saying give me another string the in which you have replaced all the
f's with g's this is especially useful if you're trying to remove some content out of a
long line of text so let's say that you have 17 lines of text in which you want to remove all the let's say you want to
remove all the vowels for some reason you could just uh run this and
see if there is any a e i o or u and just remove that that
will work just fine as well so now that we're done with string now we're done with data type string
let's move ahead now comes tuples tuples are a sequence of immutable
python objects so what does that mean well uh let's say that you want to store
the number of or the name of weeks or in string format
in a variable so we have uh monday tuesday wednesday thursday friday saturday sunday seven days in a
week and all of them need to be stored in a single variable now there are many ways
to do it one important thing that you need to notice here is that this data is not
going to change ever there is no at no no time in future are you going to go
that we need to add another day to the week that doesn't seem very feasible so
because it's not going to change we are going to use an immutable data structure or an immutable type which means adding
something to it is going to be uh it's not going to be something that's allowed so let's say that i want
weeks now i want to store everything in one i could certainly create variables that
say sun which will contain sunday and similarly month tuesday
wednesday thursday friday saturday that's certainly doable but again it runs into the same problem let's say
that we had 14 things that we need to store let's say that we had 100 things that we needed to store and we needed to
access them using one variable that would be very difficult to remember the variable names of 100 different kind of
variables it would be better if you could store them just in one variable and then access them using the position
syntax that we had discussed earlier in string like this one so this is where tuples come into play so let's say
weeks and i enclose it in brackets but that's not really necessary
but i i would do that here now let me just type in
sunday and you could type it with me monday
tuesday wednesday
thursday make sure that you're separating them with commas
and typing the space after commas to make it more readable that's not really necessary friday and finally
saturday press enter i press weeks and this is what we get if i want
to take a look at the type of this type
it's tuple so uh now i said i used commas here and that's not
really necessary if i were to use this this would also work the way python identifies that this
is a tuple that we want to uh add something to the data is by taking a look at this comma so it takes a look at
this line it says okay weeks need to be assigned somewhere some value it takes a look at sunday it says okay one string
and that's comma that means other values are also going to be assigned and this is a tuple even if i had not put the
parenthesis before and after and opening parenthesis and closing parenthesis to enclose this list it would work just
fine now one thing that i would like to show you is if i were to go
weeks zero i get sunday weeks six should give me saturday right but if
i were to assign some other value to it let's say any gibberish value i press enter and it
gives me another tuple object does not support item assignment now this is one of the major advantages
of using immutable object it does not let anything uh in the data that you have already entered to be
manipulated so if you have entered a list of something that you know is not going to ever change then tuples are the
best option for so this is why we use tuples so now let's take a look at something else
we have lists dictionaries and sets so lists are very
much same to um tuples one major difference is that you
can make changes in a list so if you have dynamic data that changes rapidly
then you can use a list for that instead of creating youtubers for every change that has occurred let me show you an
example let's say that instead of weeks i wanted to store let's say that i
wanted to tour salaries of people right i can store salaries of three people
let's say that it's uh stored in thousands so ten means ten thousand fifteen thousand
twenty thousand press enter and now if i were to take a look at salaries
press enter i have three salaries if i were to take a look at the type of
salaries i would get list it's not a tuple it's a list that means that if i want to if i
want to change the salary of a person because it does happen that a person gets promoted they get an increment or
whatever happens they say that the person at the index 0
is now going to get a salary of 18 000 and now it does not throw any error
because i am using a list and i can store any kind of data it's still a list
and if i were to print it now it's 18. another cool trick that i can show you is that instead of this
doing it like this let me just assign 10 to it and let's say that the thing that i want to do is i want to
instead of assigning a new salary i want to add 8 000 to the guys first
to the person's current salary now there are many ways to do it first way to do it would be
uh salaries of
0 equals to salaries of 0 plus 10 so what happens here is i take a look at i want to assign the value at index 0 to
be the current salary of the person and add 10 more to it let's add 8 more to it to
add consistency so as you can see this is what it looks like and now if i were to look at it it
works just like that but as you can see the typing this is quite long it's a bit repetitive
so you get if you've already taken a look at the operator's slide that we have taken that we have
we have gone through one operator there was plus it now what
will happen is it will add 8 to the already existing salary of the
person at index 0 which is 18 so 18 plus 8 would give you 30 26 and that's what
we've got so you can do it this way you can add remove you can add data to it as well
so i could go salaries dot append append will allow me to add a new salary to up
for a person so let's say that it's 28. i press enter now instead of three it
contains four salaries append is not something that you could do on a tuple so that's how you do it
and another thing is that instead of storing all everything as
an integer value you can store data of any type let's say that i want to store 1
k and i want to store a floating point value as well this is also doable so i
can type mixed equals to this this is one of the advantages of using python many languages don't allow for
this kind of inter mixing of data when just trying to store it in an array or in a list
so you can take a look at that now if i were to type next i get this i can store any other kind of data i can
even store another list inside a list so if i wanted to store another list
155 comma b i'm just adding some gibberish value just to show you this is doable i can
add another tuple to it this time i need to put uh called this
parenthesis so to describe i'm adding a tuple 88 77 and it's done now if i take a look at
mixed i have this if i want to take a look at mixed of
four right it's tuple and i can take a look at the type of the tuple
so to see if it's a tuple or not and it's a tube and if i were to take a look at the type
of something at index 3 it would be a list so you can nest any kind of thing but just don't go too crazy with it that
could cause a problem you would not be able to comprehend the data that you have if you go extremely uh benign on it
then we have dictionaries in other languages they are called hash maps or hash tables so
a major advantage of using a dictionary over a list is firstly it allows you to
create a key value pair so again let me just show you so if i want
to associate a person's name to the person's salary instead of doing a list which
could only be accessed using a numeric index like 0 1 2 3
what i can do is i can create again salaries equal to and i can create a dictionary
like this add two curly braces inside it add the key which would be the person's
name let's say john and end the quotation
and now the person whose name is john gets 15 000 let's say that there's another woman
who's named jane she gets 14 000.
let's say that there's another woman named another man that's named johnny
and he gets 5000 press enter and now if i were to
print salaries it will display the key value page if i were to take a look at the type
it will give me a class of dictionary so that's all good but one thing that it
allows me to do now is i can access it using the person's name so let's say that i have salaries
i want to get the salary of jane
i press enter i get 14 that means jane earns 14 000. let's say that instead of jane i want
john as you can see john gets 15 000 and if i were to use a name that doesn't
exist i'm going to get an error this is called a key error this key does not exist now a way to come across this or
come over this is instead of indexing directly you can use get so i want
salary of john but if it's not available give me 15. so i am getting 15 because that's the
salary of john and if let's say that i were to use some other key that is non-existent the
person named john asd is not available in our in our dictionary so if i press
enter i'll get 18 which is the default value i could set it to anything i could even set it to zero so now if i i try to
access a person whose name is not in available in our dictionary i'm going to get zero so that's one of the major advantages
another is really fast so even if you have like 10 000 records the way hashtable works or the dictionaries work
underneath the hood is instead of it going through all the 10 000 names and finding the name that you want it to
find it does some clever tricks and makes it really really fast this is why if you are doing something that requires
really fast access to some data and you can give some unique key for that data to be accessed then definitely use
dictionaries instead of using lists because in lists you would have to you could in list do something like this
store a list of list in which the first thing is the person's name
second thing is the person's seller i could do it here as well first thing is the person's name jane
and the salary of jane is let's say 80 okay
now if i wanted to i could define a function that could find this or do a lot of
things but the important thing to understand is if it was let's say 10 000 records and i wanted to find a person's
name named let's say that a person's name was not john or jane i wanted to find a person
whose name is at the end of this list let's say i don't know where the name is let's say that the person's name is
andy so we go through the entire list searching for the first element and checking if that's first element is
andy and if it is handy then we print the salary if not then we print zero now for that we have to take a look at
all the ten thousand elements in dictionary what we do is we can just give the name and dictionaries we'll do
some clever tricks behind the scene that you don't need to worry about and it will instantly find it for you so always
use a dictionary when you have large sets of data and you want to constantly find things in it if you want to just
store some data and you know you can access it using numerical indexes and the data keeps changing then
use lists because in tuples you can't change the data so if i have some
let's say i have 0 and i want the person with the employee id of 0 to have salary
or something then i could press 0. here it's not going to work because i've reassigned it to a dictionary so i'm
getting a key error but you can understand my point on the other hand let's say that i have a data set which does not change and i
want to access it using numerical indexes then tuples come into play and you used to use
and finally we get two sets sets are by far one of the most
underused data sets and you need to understand why we use sets so sets are again unordered collection of immutable
data which has no duplicate elements so what does that mean let me show you
i can create a set by the way uh the way i am showing you how to create dictionaries and all that's not really
necessary let's say that i want to create my sample dictionary
i can just use the keyword dict function and it will work just fine now it's an
empty dictionary and i can add data to it another thing you can add data using dictionary and typing in the name and
then assigning a value this will work just fine now the thing you need to understand is uh similarly you could use
instead of this you could use
this will create a tuple and l
list will create a list now i want to create a set so let's say that i name it s
now i can do it this way
but i won't be able to add anything because this will be taken a look at as a
dictionary so the best way to do it is use the keyword set or the function set
and now if i take a look at s it's a set so what is a set uh set if you have worked with
mathematics and you have worked with the band diagrams and everything like that you you quite understandable of what set
is already a set is basically something that contains a lot of values but it does not contain duplicate values
and it allows you to check whether or not something it contains a value or not in constant time so let me give an
example i think s dot add one would work now if i take a look at s it has one
if i were to add two it contains two
now if i were to add two again it instead of containing two elements named two it contains one
element which is two with the value of two now if i want to check whether or not something exist in a set let's say
one in s and it will show you this is the in operator or the membership operator that
we have already taken a look at and if i want to take a look at whether two uh whether
let's say i want to check whether five exist or three exist it's going to be false so why are we doing this
well one thing that you can take a look at here is that it again since if we are using set it is
extremely fast for us to perform this operation let's say that there were a million records in this and i wanted
to check whether something exist in it or not the first intuition that comes into our mind is to take a look at everything
that is inside the set all the 1 million things and compare it with the data that we want to find if it's not there then
we return false if it is there if it's found and uh while we're taking a look at all the one million one million data
points then we return true now again that is fine but if it's one million records then it takes a lot of
time and let's say that you had to do it consider constantly let's say that you have to check whether or not something exists in those 100 records 10 000 times
20 000 times that's a lot of computation so again sets do some really complicated
mathematical things underneath the hood to basically just check whether or not something exists inside it
in real time that's why it doesn't contain any duplicate values in this as well and so i can do one in
as well if i were to assign a list of one comma two to it and then instead of one in s i
can type one in l and that will return true as well the difference here is that it takes a look at all the elements one
two and whatever finds if something exists in it or not whether whereas in set it's extremely fast so if
you have some data that you want to keep track of and want to check whether or not another value exists or you want to
deduplicate the data you can do that as well so you set when you want to check memberships really fast you can perform
the uh union intersection and all that and that's very easy to do with sets as well
so now let's take a look at how to deal with sets and how to deal with different data types i'll show you some
hands-on to further strengthen your knowledge of data types so let's take a look at the setup that we're working
with so we'll be taking a look at data types we'll be taking a look at lists sets uh
dictionaries and tuples the things that we have already discussed but instead of typing into the python console that we
had done earlier let me show you how this was the console that we had typed
code into now for typing out single lines and executing them this console is actually very good
but let me just exit out of it when you want to type in a lot of code and you want to open the file open a code file
and execute it and run all that i would recommend that you use visual studio code so let me show you what it is
let me just open a new window to a new window
and here type in vs code press enter
and open this once you've done that you can download
it for windows or for any other operating system that you have after you have downloaded it you can install it like any other
software that you install but after doing that just right click on the folder that you want to open it into
type and press the open with code forms it will open with this code board
so it's done and as you can see there are no files as of now in this folder the folders name
is hands-on in which we'll be performing the hands-on let me create a file called app dot py
py is the extension the python extension press enter now just to make it clear
you don't have to use vs4 if you don't want to you can use notepad for this as well
just go to the folder create a file named app.py and right and click on edit it
will open uh it in notepad and you can make the changes there as well there's virtually no difference now what we need
to do is i open this and let me just make some changes i'll
increase the font size so that you can see a little better so it's a loading extensions and while
it's doing that open the command pro to do that just go into the address bar
delete everything type cmd press enter the reason why we do it this way is
because we want to open this command window in this folder so that the files
that we create the app.py file i want to run it using the python command if you have installed python then it's already
available for you so you can do it this way now if i open this
as you can see i can type in a lot of things so let me just
increase the font size i think it's now i'm going to type some python code hopefully it's visible to you all
so in visual studio code you can write code and the reason why i'm choosing this is because it shows you some syntax
highlighting shows you if you've written something wrong it autoformats the code for you does a lot of things for you
right out of the gate so to perform this what i'll do is the first thing we'll have to do is we have to use lists
so let's say that i create a list named nums equal to
and the numbers that i want to insert in it are 1 2 3 4. so the first task i want to do is i want
to print it so i print nums save the file when you save it this icon
changes from a filled circle to closing uh to an x
now that that is done open the command prompt and type
p y t h o n python and the name of the file which is app.py
again i press enter and it's there let me just uh increase the font size here as well so that is easier for you to see
let's say it's 28 that's easier to see yeah so again python space and the name of
the file which is app.py in our case and one thing that you should notice is
that app.py is in the folder in which the command prompt is open let's see
user my username desktop and in the desktop we have a hands-on folder inside which
we have created the app dot python this is why this is working another thing you can do is you can press this command but
it would work sometimes and sometimes it won't work so i don't like doing it that way and it gives you this line of code
as well which is fine but we're doing the same thing we are typing the part we are typing python and the name of the
file you can do it either way that you want now that that is done
let me just add a comment so a comment is basically something that you add in a code so that you can explain your code
but now if i type anything here this code will not be executed by interpreter it's just for the reader of the code so
any person who's reading the code can take a look at the comment and understand so i'll type
declare array and print declare list and print
right if i run this again it's not going to make any difference because it's a comment
now that that is done let me show you how you can add something to the list so you get the
append method in the append method i can type in a number uh it could be of anything it doesn't
need to be a number it could be a string it could be an object as well i'll type in a number let's say that i want to add 5 to it i
save it i print it again
run it and i think i've run into an error yeah i want to print
nums sorry and as you can see now nums has five in it i can do a lot of things in it as well
instead of that i could use the pop method pop method removes the last element if i
don't pass in an index so if i were to store the value what it does is that it
removes the value and returns it to so that i can also take a look at what was removed
and now if i print nums
run this this is the number i added 5 to it it's this remove the remove the element at
the end which was 5 and now i print it it's 4 again but a cool thing that we can do is
instead of not specifying the index we can actually specify what is the index of the element that you want to
return so if i want to remove something at the beginning of the list i type in 0 this would remove one from it so if i
run this again instead of five we'll see one remote so one is removed and now it's two three four five
so again you can do a lot of things with it uh one of the things was this now let me show you something that's uh
really interesting so if i want to print all of them what i do is
i use the for loop and we'll discuss this in a later slide but just to give an example of where looping is useful
if i have 10 000 elements instead of accessing them one by one and writing things like
print num zero and then i keep going on like print num
one num two num three so we print all the four numbers what i can do is
i can just print a loop and tell it that i want to print everything inside
the list so everything in this list i want to do something with it and what i want to do will be indented here do
you notice that i put a tab after this or which studio code does it for me this is what's called
indentation this is what differ tells python what is the code that i want to execute in a particular block
so if i type print text and if i do this as you can see it's printed two three
four all of them in a new line for me so this is what the loop looks like now if i had not done it this way if i had done
it this way then python would have no idea whether or not i want to include this line in the loop whether this should be executed in the loop or not or
to give you another example now i want to print done done will be printed at the end of
the file so if i run this it's printing done after each execution but if i uninvent
it if i push it to the left side i run it again and now it's printing done
afterwards the python looks at it goes okay everything that's underneath this uh for loop that's indented one point to
the right is going to be something that needs to be executed with within this loop and this is how python and reads
your file and understand what is the code that i need to perform and how so make sure that you understand the indentation
now that we have looped over this as well let me show you something about
tuples so instead of one two three four five
if i remove the parenthesis what do you think will happen
presenter so it prints everything but it immediately gives me an error that there's no way to add something to a
tuple if you remember we have already discussed that tuples are not something that you can add something to they're
immutable so that's why we do this so instead of appending i don't think we can remove things as well i press enter
and pop is also not available but you can print them you can loop over them
just as we did earlier as you can see one two three four one two three four done it's completely to it
now let's move on to dictionaries let me type this
t i c d i o n dictionary or let's say i'll call it cell
i'll define a dictionary the way i did previously jane 15
john 20 i need to add it as a strict
now that that is done if i print it let me just remove this
it's this i want to add something to the list or to the dictionary i can just do it this
way i want to add andy to the list and he earns 25k
now if i were to print this
let me just yeah now we're getting andy here as well
as you can see jane john andy so this is working if i want to delete
something from the list let's say that andy i don't want to print i don't want andy in this listing i use the dell
keyword inside i just type in cell of
andy i run this again and andy is removed so that is fine that's how you remove an
element from a list or a dictionary other operations we have already performed one thing that we haven't performed is looping over this so let me
just show you for item in
and here things get a bit complicated so instead of just sal i have to type
items if i just want to loop over the keys i can type style dot keys
and if i print item what do you think will be printed
so uh pause the video if you want to think about it and then answer but what will be printed are the keys so the keys
are jane and john remember uh a dictionary the key value pair
these are the keys these are the values so jane earns 15 john earns 20.
so we type it we printed the keys now if you don't want to print the keys let's
say we want to print the values i do that now i can only print the values but let's say that i want both of
them items and i want key as well as
well now i can print key comma
and as you can see i'm printing jane space 15 which is the key comma value so
we're getting the data that we want now another thing that we can do is we can
print jame
in cell print it and we get true
it's the same operation it's a membership operation but if i were to type in dsf i'm going to get false
so again this is what it means and now let's take a look at a set
so let's say s create effect uh another thing you can do is you can
use this symbol but instead of typing a key value you just type in the
keys so if i print the type of s
and i run this it's a set now so if i want to keep it empty then it would become a dictionary because by the
this is this is what the default python behavior is so this is what it looks like we have a
set for us now if i want to add something to the side i just use the add method i want to
add one and i will do it two i want to add three
and now if i were to print s
it's one two three so this works fine but if i want to loop over it for
x in s let me just
print x as you can see we get all the numbers in it and if i were to print
the same thing that we did earlier one in s i'll get true
and if i were to print uh 4ns i get false
so this is what this looks like this is what our code looks like this is how it works so hopefully that was informative
now let's move ahead and see what else can we learn about python so now let's take a look at comprehensions
comprehensions are quite an interesting feature in python they're very easy to use they're very
informative and they're uh quite fun to work with so let's see what they mean as of now we know how to
create a list i asked you to create a list and let's say that i tell you that hey i want you to create a list and in
that list i want you to enter number from one to five what are you going to do then unless you have not one from
five let's say that i say i want you to enter in a list i want you to create a list and add a number from let's say
one to ten but it could be anything it's it doesn't even have to be one to ten it could be any arbitrary number now the
robot doing that well we know we can do it using loops and that's how many languages ask you to
do it so i'll create a list which is empty and for
let me show you how to loop to a certain extent i want to loop for x in
range which is a function that allows us to loop over a particular range i want to loop from 0
to 10 so it will look from 0 1 2 3 4 5 6 7 8 till 9 not 10 because the end is
exclusive so always remember that and now if i do l dot append
x and finally you can print x
not x l so uh if i were to clear the screen and type in this as you can see we get zero
one two three four five six seven eight nine now this is fine
but a major problem that you can see with this is the fact that we have to
write a lot of code wouldn't it be nice if we could just uh compress this all into a single uh compress
all of this into a single line of code because we are just instructing the computer to add
something to a list right so this is possible using comprehensions i define
an empty list i tell it add x to the list now python is waiting for me to define what x is so i'll go for x
in range zero to nine and that's it now this is something that
many other languages don't provide you to do python is quite easy to use so you can do that
here we only get zero to eight mainly because it has to be 10
like we did earlier and this works now this is just list comprehension but i can perform many
other kinds of comprehensions so list is this let's say that i want to perform a tuple
comprehension so for this i have to use parentheses
and let's say that i want to perform a set comprehension and a dictionary comprehension all the data types that we
have discussed so far could be okay all the containers that we have discussed so far for the data types could be used to
perform comprehensions as we are about to do now comprehensions are quite easy to understand once you get through the
basics so let's see uh let me just print all of them one by one
so we will print the tuples then we will print the set and then we
will print the dictionary so let me just show you
um this is what tuple comprehension looks like what will it be for set
just changing it to parenthesis will work now for dictionary we need a key value
pair so let's say that we want to store key as the current number which is the number from 0 to 9 and the value as the
square of the number which is number divided by itself so this is what it looks like now
for a number to be key value where i want to define the key press colon and then define the value
which is x multiplied by x now if i were to print it
as you can see we get this we get a generator object and we get this and we get this so this is what it looks like now
generator objects are quite easy to understand you can just let me type in comma press enter and this is where you will
get right now error so don't do it this way but you could use tuple
and now you press enter and you get a tube out of it so this is one of the problems when it comes to tuple
comprehensions that you can't just use it this way right but
this is what comprehensions look like they're quite easy for you to create once you understand how to create them
and it's very easy for you to understand how to write code like this and it's just allows you to write such a code or
code that's easy to understand now that that is done let's see what else we have to do so now let's take a look at conditional
statements so a conditional statement is basically a statement that allows you to change
the flow of execution or the path of execution when a provided condition
evaluates to either a boolean value of true or false so suppose that we had some way of
figuring out whether or not you're sick or you're healthy so what happens is let's say that you want to make a
decision first thing is we ask you are you sick so let's say that you are sick then we
would advise you to go to the doctor but let's say that you are not sick that means the condition whether you are sick
or not evaluates to false and then you can go out and play football do whatever you want this is
where conditional statements come into play and we encounter conditional statements every day during our lifetime we have
encountered conditional statements i think you probably encountered conditional statements today as well
waking up uh when you're waking up you decide whether or not to sleep for an extra five minutes uh whether or not you
are late for a meeting whether or not to take a cab or a taxi or a walk to the place that you work whether or not to
eat at one place these are the kind of situations that allow us think of conditional statements in a more
rational way so this is what it looks like we have many ways of doing this one is the if
else statements so we the statement looks like this we have the if keyword
inside that keyword that's a condition if that condition evaluates to true then
statements one and everything before the else statement gets executed but if say
the condition is false then everything underneath the else statement will get executed we'll
look into it in more details when we are performing the hands-on but right now just understand if the condition is true
then statements one is going to execute and if condition is false we'll execute the else statement which is the
statements too now there are many ways you can construct an if statement depending on the logic that
you're trying to build you can construct a nested if else statement you can construct if else and
else if statements you can construct a lot of different kinds of equal statements so you're not limited to just use if and
then else and then your uh conditional statement ends you can use if if this
not true then if this is true then if this is true then if this is true then you can take a look at a lot of
conditions that way or you can nest them one inside the other that would work just fine as well
so now let's take a look at some conditional statements again we have the same setup we have an
app dot py file py is the extension for the python executables or the python
scripts that we write so to write it let's first take a look at conditional statements so there are a
few keywords that we use in conditional statements keywords like if
else and l if which is short for else if
so let's take a look at this so let me define a number named x and
it's equal to 20. now if i check if x is less than 20
then i will print
x is less than 20.
else and now else
print x is
not thus or you could say x is
greater than so now this is a statement but it's a
little incorrect i mean it's not incorrect in the way the syntax is structured so if i write this
it says x is greater than 20 and we know that's not true because x is not greater
than 20 it's actually equal to 20. this is where the else if statement comes in so we can add multiple conditions and
attach code to it that will execute when one of the conditions satisfied so if i type l if
x is equal to equal to 20 and remember to put 2 equals mainly because we're not
assigning a value we're trying to check whether or not a condition is correct print
x is equal
to 20 parenthesis again is correct this is where if l if and else come into play if
for condition and a conditional statement will always start with if not with alif and neither
will it start with the rams then we'll check okay if this is not true else if this is true then do this and if this is
true then do this make sure that you understand that only one of these statements will get executed so in no
condition will it happen that this will also get executed and this will also get executed
so if i were to do x is less than and if i run this it's still going to
execute the first statement which is x is less than 20 even though the second statement is also true
so make sure that you understand that and now let's take a look at nested elsif
so so this is what it looks like again i
could have made the same mistake i could just put equal and that would have caused the issue now
nested else basically means an if statement and i want to check if x
let's say x is less than 20 and is less than 15 as well
and i put it
so i will print something out there as well x is less than
15 and i can type in else
i can write some code x is
greater than 15 and finally else
x is greater than
20 so if i run this x is less than 10 20 and x is less than 15 which is true
now if i were to give it a value something between 20 15 and 20 x is less than 20 but it's greater than 15. so
what's going on here let's take a look at the path of execution we take a look at we assign a value of 17 to x we check
this condition we check if x is less than 20 it is less than 20 we go down we print x is less than 20 we go down we
check x's if it's less than 15 it's also true so we go down and we print this
we'll we skip over these statements because one of the conditions has evaluated to true we go down here and
since that condition is also available to true it's fine but now if i type x is
equal to 21 what do you think will happen just one statement gets printed because
it comes here sees if x is less than 20 well x is not less than 20 so it just
skips over everything inside if and moves to else and prints that and it's done so this is where nesting and nested
if statements and else if statements come into play you can nest it uh really
deeply but your code becomes really difficult to read if you can do it you can do it like this as well if x is
greater than uh 15 or something like this and then again underneath that you
can type another if but it makes your code really difficult to read so make sure that you understand the trade-offs when you're using if and else if
statements now let's take a look at looping statements so a loop is a process in
which we have a list of statements that execute repeatedly until it satisfies a
condition so let's say that i want to print something 50 times instead of me having
to write it one time and then copy and paste it 50 times what i can do is i can
instruct my python program to repeat something or repeat printing something
50 times and that way when the condition the condition that is satisfied is that it has this statement been printed 50
times if it has then we print that if not if it hasn't been satisfied then we
keep on looping and keep performing the task that is inside the loop and
if we have satisfied the condition then we exit out of the loop and move on to the next statements
so there are many kinds of looping constructs the first thing is we have a
for loop so a for loop basically allows us to write code in which we can
basically iterate over a lot of things so this is what the flowchart looks like
we take a look at the variable and we check is there a variable in the list and if it does not have any
variable that are remained to be performed the task on then we perform the rest of the code
else we perform the statements we move on we perform the statements we move on and we keep doing that over and over and
over again this is where the looping statement comes comes into play so then we and we'll have an example of
this when we're performing the hands-on so don't worry if you don't understand it as of now then comes the while statement so the
while condition is something that is also used in loops but the fundamental difference is while
loop is used to loop over a bunch of statements in which what we're trying to see if if a
particular condition is true or not instead of looping over a particular uh list of things we can just use a while
loop and loop over uh some things under a specific condition is true
so here what we're doing is we're setting a variable a to 1 then we're checking whether a is less than 5 so 1
is less than 5 we print 1 we add 2 to a so a is 1 and 1 plus 2
equals 3 so now a is equals to 3 is 3 less than 5 no it's not so the condition evaluates to false and we
print it so we print 3 we add 2 to it 3 plus 5 3 plus 2 is equals to 5. so a is
now containing the value 5 we check whether 5 is less than 5 that's obviously not true is equals to 5 so we
end the loop and since there are no other statements left to be executed we exit the program
now when we're looping there are certain keywords that help us in the loop these are break
and continue so what do they mean well the break keyword allows us to end
the loop prematurely so let's say that i have a list of names let's say that i have a list of name
from uh let's a list that contains alphabets from a to c what i want to do is i want to print
everything in the list but if anything if the character in the list is
d then i want to stop the loop i want it to not continue any further i want to
just uh exit out of the loop anything after that is not going to be printed so this is what a break statement comes in
and it's coupled with an if statement and we'll take a look at this in an example when we're performing the
hands-on but now just understand that if you want to if you have a condition in which you want to exit a loop abruptly
or prematurely before the loop has actually ended then you can use the break statement the continue statement
on the other hand does something quite similar so you can take a look at the brake flow
chart as well if you are uh unfamiliar with what it's doing basically we check a condition can we check the brake
condition if the brake condition is true then we break it and loop exit the loop
if the brake condition is not true then we continue with the loop as long as possible again this is a bit
esoteric so i'll explain it in the hands on when we're performing it with the code then comes what we'll try to do
which is looping and using continue so continue does something similar to break
but instead of breaking the entire loop what we do is we skip over that loop so let's say that
i am again doing the same thing a list containing all the alphabets from a to z i want to print it they are ordered in
any way that you like what we're doing is we're taking a look at the alphabets and we're printing it on the screen but
if the alphabet is d then we don't want to print it we don't want to perform anything that's being done to other
alphabets so what we do is we take a look at it we see okay
if the current character is d then we use the continue keyword and we skip
over the rest of the statements that are used to execute the loop and we just
move over to the next next character so that's what continue does
and now we'll take a look at the hands-on in which we'll be performing uh tasks using all the keywords that we
have discussed as of now let's take a look at some loops so again we are in our app.py file and
i'll write some code for you to run to understand loops so we'll take a look at for loop and value the first thing i'd
like you to see is we're going to be printing a number from 1 to 10 so let me
just show you so this is a classic example of loop for x in range range is a pretty common
function used in python if you've never used it get i i would suggest getting comfortable with it
it basically means i'll explain the code in a moment so what we're doing here is we're
instructing python that hey i want to loop over something every time the loop uh iterates i want the value to be
stored in x and what i want is the range to be going from 0 to 10 minus 1 which is 9 always
remember range is exclusive of the end so if i want to type 11 that will go from 0 to 10 so that is done now what
happens is when i print x what it will do is it will start ranging from 0 so it takes a look
at zero prints zero goes one increments it by one goes to one prints one two
three four five six seven eight and it goes to nine prints nine and then it is out of range
so it stops abruptly so let's see if i were to run this as you can see it's printing but let me
show you a trick uh when you're printing something type the end
equals comma right so in space so now if i print this instead of each
thing being printed on its own line what's happening is it's going to print it uh with a comma and a space between the
next element as you can see that's the reason why this is there's a comma and then space here as well
so that is done and so this is how you loop over a range
but let's say i don't want to loop over a range let's say that i want to loop over a list of numbers so again nums
equals one two three four five right or
if you remember with comprehensions x
for x in range
0 to 10 now we have all the numbers that we had earlier and
this is what it looks like i run this again okay for oh
for x in range and now it's doing the same thing so we have
numbers here and for each number we are looping over that now that that is done one thing i can
show you is after looping we can take a look at some of the statements that we had learned earlier so break and
continue so let's say that i only want to print till four let's say that this is a shuffled list
and i want to break the loop and not print 4 so if x is equal to equals to 4 then
break else will print
x so i do this 0 1 2 3 it encounters 4 and since the condition is satisfied
executes the break statement gets out of it and the program is not ended yet if i
want to type something below it i can type like this done and it prints it there what's happening
here is i have uh just as soon as i encounter the number four i just quit
the loop so everything that's after four it's not being executed in the loop if i change
break to continue notice what happens so we have zero one two three
four is skipped then we have five six seven eight nine so what happens it takes a look takes a look at the number
it's four and we continue we say we don't want to print four we move ahead
so this is this is something that can be helpful let's say that you're trying to print something out of a list and you
don't want to print the name of people whose salary is less than let's say 40k
so what you can do if first let's say that for each x
0 index is x dot salary is less than 40 then continue so this
would have the same effect as it did earlier this is what it means
so this is where we move on to the while loop so let me just define a number is
equal to 10 and instead of 4 we'll use a while loop
while a is not equal to 0
print a and then a minus equals 1
so if i run this it prints numbers from 10 to 1
in reverse order so what do you think is happening here so basically i have
defined a variable named a and i'm checking whether or not it's equal to 0 if it's not equal to 0 then
perform this task one thing that you need to make sure is if you're trying to check whether something is equal to something and if
it's not then you need to manipulate it inside the loop if i don't do this then this will run forever as you can see
it's keeping is going to keep printing on 10. i've interrupted it using ctrl c i don't want it to run forever
so if i do this then it understand how to do this but it will take a look at the number it's 10 print 10
and in decrement 1 it becomes 9 9 is not equal to 0 9 go ahead remove 1
8 not equal to zero printed seven and this is how we go till zero we print uh one
then we in decrement one which becomes zero and we take a look at this so we go
okay is one equal to 0 equals to 0 that is true so we
this statement evaluates to false which is not equal to 0. so what is happening is we are printing the things until this
statement becomes true and when a becomes 0 this statement this statement becomes false and we move out
so as long as this evaluates to true our loop is going to continue while or another way of reading is while
this is true keep executing whatever we are executing so that's a while loop now
why use while loop over for loop there can be many scenarios where you want to use for loops i like using for loops
mainly when mainly when as you can see if i can
travel back in time yeah so mainly i like using for loops when i
have a list of values something that i can easily access in a loop like this
this doing this with while loop would be a little difficult let me show you how so i would need to have in index
start it with 0 and check while
index is not equal to the length of nums minus 1
that is one way to do it or you can check if while index is less than nums value
minus i will print nums the values are at index
and i will index plus equals 1 if i run this again
it will do the same thing but i had to write a lot more code and i have to keep track of this index variable
uh similarly uh python's for loop does all of this behind the scenes for us so we don't have to manage these external
variables and all that for for us there's advantages to this but if you want to
make if you want to have access to the index variable then you can use a while loop or you can lose a clever for loop as
well but for most scenarios when you have a list of values that you can iterate over using for loop is better and when you
have working with a specific condition then using a while loop is better so it's completely up to you it's your
choice whatever feels the right tool for you you can use that but i would certainly recommend using
for loops for iterable statements right now let's take a look at functions
in python so functions are one of the most fundamental things that you need to
understand when you're learning any programming language they allow you to encapsulate code and then you reuse it
in many other parts we'll take a look at what that means and how you can accomplish things with functions but the
first thing that you need to understand is that it's a very very very important topic and you need to get a really good
grasp of how functions work before you can move ahead and discuss other things and learn other
things in python so make sure that you pay attention and understand it thoroughly so a function is a block of code that is
organized in such a way that it's reusable set of instructions and
can be used to perform some related set of actions so it's used to organize a real reusable
set of instructions that are used to perform some related actions so we'll take a look at what that means
basically it means that we wrap up some piece of code that is entirely used to
perform one thing and that is then used that wrapped up piece of code is then
given a name which is the name of the function and then we use that name instead of copying and pasting the entire code again we'll take a look at
what that means and how to accomplish this if you don't understand it as of now don't worry so there are two kinds of functions in
python the first is a user defined function which is the something which is something that we create as developers
as programmers and then there are some functions that are built into python so you don't have to
create their implementation yourself python will have already done it for you
so the user defined functions as i've already told you are created by users this is what the syntax looks like
we use the def keyword def is a shorthand for define
we give the function name we accept some arguments these arguments are basically values or things
that our function will perform some actions on and then we do some
calculations or any other kind of tasks that we wish to perform and finally and
this is not a necessary statement but if you want to return something you can do that returning something basically means
the this would be the result of the function now sometimes your function may not have any result to perform if that's
the case then you don't return anything you just omit the return statement completely now give an example there's a function
right beneath it that says def add is the name of the function we pass in two
parameters a and b we create a sum which is equals to a plus b so anything that
we have a plus b and we return the sum now to be quite honest this is a very
trivial example but to understand how functions work we need to move our way up from really
simple to complicated examples now there are many uh built-in functions
as well these functions have already been written by the developer of the python language and they have created
these functions for us to use so some of them are the we have an abs function
which is used to store the absolute value of a number so if you have a number that is negative
that is negative 17.4 then if you perform use the abs function
on that you will get 17.4 absolute basically means it converts negative to positive or
in other terms you can get an absolute value where you perform some mathematical operations on it
then you get all and returns true if all items in an iterable
object are true so if i have a list of state a list and although everything
inside that list is true then it will return true if any one of them is false then it returns false then we have any
then we have ascii then we have bin which is used to take it look at the binary version we have bool we have many
other functions min max whatsoever so you can use them if you wish to if you are trying to perform some tasks make
sure that there is a instead of writing your own function make sure that there is a function available for you
then there's lambda functions now this is a concept that gets overlooked quite often but lambda functions are very
powerful so lambda functions are basically anonymous functions that have no name
and it contains a single expression a single line of code is there in a lambda
function so these are used to pass some task that we want to perform
in a function let me give you an example so this is how lambda functions can
drastically improve the a code so let's say that i want to
create a function in the way that i have done as of now so
i want to create a function called multiply so i can do it using multiply def
multiply x comma y and then i return x multiplied by y but if i since you can
see it's a very simple pro simple line of code i can simply just do r will be the
variable that will be pointing to the lambda lambda will accept x and y as parameters and will return x multiplied
by y now to call the lambda all i have to do is use the r which is the name of the lambda and i put parenthesis in
outside and inside the parenthesis i pass in the two statements if i don't put a parenthesis then it would simply
be a variable that holds something i'm not calling the function i'm not executing the code that's inside it
so i pre pass into ln3 and i get 36. now another thing that lambda does really
well is that it allows you to remember some things so let's say that i have created a function called
def my function i pass in a number named n this number now will be remembered by
the lambda that i have created inside that function forever so if i return a lambda in which i i will accept another
parameter called a and what it will do is it will take that number and add n to it
this way i can create multiple functions that do the same task but where the value of n is different
and this is very trivial example but i'm very mundane but you can think how far
you can take it there are many great python programmers who use lambdas in very clever way
to write code that's very readable quite simple quite easy to understand once you understand what lambdas are and it's
quite uh quite comprehensive take a look at a function that's so simple to understand so take a look at that as
well now let's take a look at some functions and we'll implement some functions inside again we have the same setup here we'll
define the function so let's say that i have some task that i want to perform okay and it has several steps and all of
these steps will need to be performed regardless of whether where i execute the task this example will also show you
the importance of functions so let's say that the i want to
let's say i want to download file okay
and url now i'm not going to actually download the file but i'll just print the steps so
establish connection
then these are the typical connection steps you need to perform when you're trying to download a file from the internet open the connection
download data
close connection so now if i want to download anything any
file let me just uh
print the url or another thing i'd like to show you is
that you can add strings or concatenate strings so this way
so if i do this then it will print establish space connection space and then add
whatever url is right at the end of it open connection
and let me print the url download data and close connection
all right so if i were to call this function download file and let's say that the url
is ftp colon for slash over slash
www.abc.org
now if i were to run this let me just run this here it's going to perform these tasks
but the major advantage of using a function is now if i want to perform the same task over some other place i can
copy and paste it into different files and it will do the same thing over and over again so if i were to print this as
you can see it's done everything for me let's say that i want to change the uh
url df i j
k and if i run this it's downloaded it for all different purposes
but now let's that i want to change something in this step uh before after downloading it i want to
log it to the login to some place let's say i want to make sure that this is recorded in a
database that i had downloaded this file so log to
db and this is the url i downloaded it from now if i run this as you can see this
change let me just
so i've added two lines so this is what it looks like now it looks a bit clear let me clear the screen and run this
again so that you can see and it's downloaded it but as you can see that this step is now added to all
three of the files this is the advantage of using a function so whenever you want to make a
change to some particular step some particular well defined process you can just make a
change in one place and everywhere that process is being performed those changes will be reflected there so if i had to
add something else to the download file procedure this will be executed by all
the functions or all the files that are calling the download file function that i have just described so that's one
advantage and now let's take a look at returning some data right so let's say x comma y
i get in two data and i perform some task now i want to return
x multiplied by y let me call it again this is a very trivial example
multiply right and if i want to multiply two numbers
multiply you multiply x
and y now x and y are going to be numbers so let's say 15
and make 10 comma 15. now if i were to run this
150 would be the expected answer uh if i were to run 25
250 would be expected answer so we have gotten both of them but one thing to notice is that it's a really simple
function so defining it like this is going to take a lot of time and it's really unnecessary
so one way you can change it is you can write it like this let me just show you the code that was
earlier there and i am just going to change it to multiply equals to
a lambda
that will take in x and y and return x
multiplied by 5 run this again and this is performing the same tasks that we had performed
earlier and it's printing the same thing that we had printed earlier so there's no change
of functionality but we've changed the implementation so what is the advantage now this
function i can send as an argument to any other function this is where it gets a little uh difficult to understand so
let's say that i want to print
let's say that i want to oh yeah one thing i can do is def
create multiply and it will and give me x and y will be
given to me on the time of execution so now what i can do
i can return a lambda
that will take y as a function and it will return x multiplied by y
so let me just delete this now this works
and now i will create multiply
create multiply time and now
i will just pass passing 15 and 25 i run this and i get the same answer now
as i've already told you that this is a function that you can pass into another function let's
create another function named execute takes in a function
and takes in an argument and all it does
is that return calling that function with that argument
so x execute
15 would be the other argument and f sorry
multiply
multiply and we want to take
the cubed i run this again it's doing the same thing but it's doing it for me now i can
make changes to it i can basically log the calls to a console
called f with
and okay i've gotten an error
yeah i need to convert it to string
now it works so it called f with 15 and it called f with 25 so i can log this to
a database to make sure that it's being executed correctly and so on so there are multiple things that you can do and
lambdas are actually very powerful but this is how you get started with it hopefully this was informative and let's
move on to the next now let's take a look at arrays in python so in python arrays are basically
lists arrays are used to store multiple values in a single variable as we've already
taken a look at tuples and lists and dictionaries and sets we'll be taking a look at a lot more in a future video but
uh arrays are basic programming constructs in python you have uh arrays
in the form of lists so you don't call them arrays you call them lists which sounds more
more readable and more intuitive so python does not have a built-in support for arrays but python lists can
be used instead so you can instead of creating three variables to store all the three strings as we have done in
the code listed below like this we can do it in an array and we can just use them
ourselves so there are many operations that you can perform in an array and we'll take a look at all of them one by
one first is we can access an element in an array so accessing an element basically means
we'll be accessing it using its position in the array so if it's at the first position we use
the zeroth index zero is the the index is the number inside the parenthesis after the array
name similarly if it's the second then we use one because it's indexed from zero and if it's we use an
index that's not present then we get an error index index range error i think it's called
then that's modifying the element now if you're using a tuple that's not possible but in lists it's completely possible so
instead of doing something else you could just modify the element using the same thing that we did previously you
can take a look at the length of the array length basically means how many elements are there in the array we can
loop over an array and perform tasks the way we want to we can add an element to an array using the append
method that would add an element at the end of the array we can remove an element from a given position so we
could go cars which is the name of the red dot pop one this will remove the
second element in the array if i were to not give an argument then it will remove the last element automatically instead
of passing in one if i had passed nothing then it would just remove bmw from the cards array then we have
removing specific elements so if i have a specific element that i want to remove i can use the remove method on the
others and we'll take a look at all of them then there's python classes and
objects so classes and objects are quite interesting they're very easy to understand they're quite interesting to
use interesting to see interesting to build applications out of they are the fundamental building blocks of
object-oriented programming and we'll take a look at that in a later module but here you need to understand what classes and objects are so a class is
basically a container or a blueprint that defines what an object should look like and the object is basically the
in-memory representation of a class so since python is in object oriented programming language almost everything
in python is an object and it has properties and it has methods so class
is like a blueprint for creating an object so in the example as we see we have given a class created a class you
said in whenever you create an object of a class this should have a property named x and the value of that property
should be five now this is a very very high level overview of classes and objects we'll go into much more detail
in a later video but here you need to understand that the classes and objects are
how they are related classes are the definition objects are the concrete implementations objects are what you use
in the real world classes are what define what your objects structure should be
and then we come to file handling so what is file handling let's take a look
at that the file handling is one of the most important app aspects of any application that you use
it's used to permanently store data on a disk or a network location or anywhere
they will need file handling if we have to read or write from the files python provides
a really easy way for us to read and write to files so there are many file operations that you can perform some of the most
important ones are opening a file reading a file writing a file or creating a file and deleting a file
so to open a file the syntax is quite simple you use the open method it takes in two parameters first parameter is the
path two of file and the second parameter is the mode so the mode basically is a single uh a string that
can that is either r a w x or something like this if you pass in r as the mode the file
is opened in the read mode that basically means that all i want to do in this file is i want to read from the
file i don't want to make any changes i just want to read the data the a mode makes it append this means that
anything that's existing in the file don't overwrite it just add data at the
end of it then there's w which stands for write this opens the file
and creates it if it doesn't exist and it overwrites any data that's already existing so that's the difference
between writing and appending a pending adds data to the end of the already existing content in the file writing
will overwrite everything then that's x which basically just creates the specified file and it will return an
error if the file already exists with the same name we can read the file using the read
method this will read the entire all the lines from the file into and show us that
we can also specify how many lines we want to read and if you want to read it line by line
then we can basically just loop over it and we'll take a look at all of that in the hands-on
then to write an existing file we must add a parameter to the open function now
a would be as i've already told you to append a file append items to a file and w would be to write
contents to the file right then there is delete
okay so x is used to create a file if it doesn't already exist and if it does already exist then it will return an
error and finally we come to delete so deleting is basically allowing you to
remove a file or delete a file that already exists you can do it using the os module you can write os dot remove
give it the path of the file it'll check if the file exists and if it does it will be removed from the disk
so now finally let's take a look at the hands-on of file handling we'll take a look at what it means and how you can
perform hands or how you can perform file handling in python as of now we only have a app.py file in
our hands-on folder so let's first try and creating a file
so i will create f as the file handler using the open function i will
write in the file name let's say it's sample.txt and i want to create it so i will use
the x flag and i will close it closing the file is important because all the changes that have been
made so far are made uh in in in memory buffer so when we use f.close all those
changes get written to the file so make sure that you close the file so that the changes that you made to the
file gets persisted let me remove that run this and now if i take a look at it
as you can see sample.txt is already created but if i run it again i will run
into an error that says file exists which means that the file that i wanted to create is already there
so now that we have done that let's try some other tricks now
the problem is whenever i open i use the open keyword it's obvious that i want to close it as well so instead of me having
to write f equals to this and then write everything and then close it i can wrap everything inside a with keyword so with
open file and i want to write something to it as f now anything that i write within this
block and it's indented that would mean that i want to after this block i want to end
or close the file so instead of me having to manually write f dot close this will be done automatically form so
let me just do this now let's just f dot right and what i want to write is
sample line save it run it
it's done by open sorry ctrl v
open it and it's sample line written to it but let me just add a back lesson and then
right number line again see what happens when i do this
i run this again and i open it
but enter sample line and then enter the new line but
if i were to then write something else or if i were to run the same code again this would cause
i mean it won't be the appropriate thing that i want to do so if i do this again it's got the same thing
and it again it's got the same thing so instead of this being added to the end of the file what's happening is the file
is being opened everything inside it is being removed and then this this is being added to it
but what i can do is if i remove this
it put it back in and i type a now if i run this once
and if i open sample.txt it's there as you can see i have added a new line
and here and then removed let me just remove it completely
run it again open sample.txt there's a new line run it again another
line and if i keep running this multiple times as you can see
multiple times the line has been added at the end of the file so that's what the append method does
now if i were to just read from it so
for l in f dot red lines
and all i want to do is print l
as you can see it's printing the thing that i want to print if i were to just
remove the backlash and from my side this will print each line with the backslash n so this is what it looks
like so we are able to read from the file we are able to write to the file and we are able to do a lot of things
so with that in mind our files file handling is done obviously there's a lot
more that you can do with the file handling things but they should get you help you get started it's very easy in
python as i've already told you use the with keyword to avoid having to write after close on every file handle that
you've opened if you don't use the with statement then make sure that you're closing the file before ending the
script or your changes will not get written to the file that you're trying to write it to so let's see what else
you have to do all right guys so now we'll take a look at object oriented programming or oop in
python so let's take a look at the agenda we'll begin by understanding what is object oriented programming and we'll get an
introduction to what it is then we'll take a look at a real-world example of object-oriented programming
then we'll move on to object-oriented programming concepts the fundamental concepts like classes and objects then
we learn about inheritance then we learn about encapsulation we'll learn about polymorphism and then we'll
move on to learn about modules standard library in python we'll learn how to install packages that you might
need to use and finally we'll learn about exception handling which is one of the most important concepts in the
entire of python it allows you to write code in a way that manages errors on runtime
so we'll take a look at all of that so let's move it let's take an introduction to object
oriented program so object-oriented programming is a programming paradigm where you can use a real-world entity
which is called an object so object-oriented programming is basically about mapping a real world object in our
code so let us consider an example let's say that we have an object for parrot
now a parrot has certain attributes and certain behaviors attributes are basically data about
the parrot that we are interested in so data such as name age color and this
data can be arbitrarily selected only the data that you need about the parrot needs to be in the object so there might
be other data about the parrot that you might not need so the data suggests the species of the parrot and so on if you
don't need that you don't need to include that and then there's behavior so singing dancing or any other kind of
behavior that a parrot might have could be attributed there a behavior is basically a thing that the object
performs or some tasks some process that the object referring to the pair it performs
so let's take a look at an introduction to object oriented program and now we'll be taking a look at basic principles of
object-oriented programming so some of the basic principles are polymorphism classes inheritance encapsulation
classes and object let's have a real-world example of object-oriented program
so as a human being we can be classified into a male and a
female and these are the common functions between men and women they can speak they can hear they can walk they
can see so now if we consider a human being as a class so a class is basically a
description of what an object should be like think of it as a blueprint of the house that describes what the house
should look like how wide should a room be what should be the dimensions of a room how many rooms how are they connected
with each other that's what a class is it's like a blueprint that objects are created from
so every human being has certain body parts nose hands legs heart eyes and so on and
may they have some common functions as well they can walk they can listen they can speak they can see they can smell
so these common features are called attributes so
attributes are basically data about the person so as you can see the person's name age and all that could be
considered an attribute on the other hand they could have certain behaviors as well we'll take a look at that as well
so male and female are inherited class from human being so a human being is supposed to have certain features
that is these features are inherited and the specific things that make them
different are then overwritten let's give an example let's say that there's a person who's a male
and the name is victor and the age is 24. now we can have an object of the
class male and we can have attributes such as name and age associated with it
so class is just a logical definition objects are the physical in-memory representation of that physical
existence then you don't need to know the detail about how you walk how you talk how you
listen and so on these decisions are hidden and encapsulated encapsulated basically means that they are not
visible to the person and they are bounded together with the data that they operated so
for walking you need two legs for hearing you need ears for seeing you need eyes and all of that is
encapsulated or grouped inside a single entity or a single object
now on the other hand the the class of a woman a woman can be a wife a mother or
a teacher or any other profession that they can espouse and at the same time
having uh being able to perform so many tasks at the same time this is what is called polymorphism
so let's take a look at classes and objects we'll take a look at other concepts such as encapsulation polymorphism more detail in later slides
so what are objects and classes well class is like a blueprint of a house an object is the uh actual house
that has been built from that blueprint so or you can think of a class as a
definition of what a house should be like and then the object is basically a
concrete implementation of that house or of the blueprint so object is the basic unit of object
oriented programming it should be clear by the name object-oriented programming that objects are the basic unit
now an object represents a particular instance of a class there can be more than one instance of
an object so uh for instance if you have class you can have seven objects of the same class there can be multiple
instances and all of those instances are called an object now each instance of an object can hold its own relevant data so
if you have seven houses and they can all hold data about the color of the walls they can all be different
so that's what the difference between classes and objects are and we'll discuss more of it when we are performing the hands-on and
understanding the code but as not that's what this is now objects with similar properties and methods are grouped together to form a
class so this is what our object classes and objects are so how to create a class in python in
python the class i think we use the class keyword we then give the name of the class and then we just underneath
that we define the variables and all that for in an indented code block and the
attributes are the variables and the behavior is the function so let's move ahead and see what all of
these mean now after that if you want to create an object we can just call the class like a
function and it will return an object to us and there are a lot of more in intricacies in that which we'll discuss
in the hands-on but as of now you need to understand that this is for this piece now here object one is an object of the
class with the name of class name so how to access class members is one of
the most important concepts so you can create an object and using the
simple class and then uh right after the class you can put parentheses like you're calling a function it will return
an object to you and in that object you can use the name of the last member which you want to use so as we know that
we had created a variable named variable inside a class name so after that we create an object we use
the object name we use the dot operator which gives us access to the members of
the object and then we click on that and we create i was just created and that way we have
several objects here now we print them and this is what it looks like and now let's move ahead and see what this
means so there's another thing called the init method this is one of the several magic
methods that are present in python and we'll discuss those as well the underscore underscore init
underscore underscore method this is also called a magic dunder method because it's got two underscores right
at the beginning and right at the end this is a special syntax for special methods that are supposed to perform
special tasks so to give you an example we have an underscore underscore init method this is also called a constructor
method this is a method that gets called uh the first time when the object is
created so when you create an object out of a class this will get called automatically so as you can see we have
defined a class we have defined an underscore underscore unit underscore underscore method this is also called the constructor method that takes in a
certain parameters self is the object that will be created and returned
so if you want to make some changes to the current object you can do it here such as attaching some properties so we
are adding some name branch and here to the current object we print a student
object is created and then we send it back to the user so when we create an object these things get set to the
object and then that object is returned and assigned to ob1 and then we use the print details method in which we pass in
self which is uh the uh object current reference to the current object and then we print the name as you
can see this is what it looks like so here are some tests for you so create two vehicles
called car 1 and car 2. we can set car 1 to be right convertible worth 70 000
with the name of ferrari we get car 2 to be blue it should be a blue van named
jeep and worth 15 thousand dollars how do you do that well we create a class
the vehicle after that we define the name and kind that by default and we set the color there we get the description
defined there as well and then we return the description so now our code will go there you know we will create
new classes and we'll we'll create objects and we'll print them so how do you create an object and how do
you set these objects and how do you do that that's with the vehicles you will have to perform that and in the
hands-on let's see how to do this simple task so
to give you an example of how things are working we have an app.py file
which is inside a folder and i'll be running command prompt here
and now what i have to do is i'll show you what classes and objects are like
let me create a class the name dog and if i were to create
and underscore underscore init method
and what i'll do is i'll accept the name for a dot
self dot name people's name that's it
deaf i'll create two behaviors so a dog can
talk and the voice that a dog makes is boo
and i think i'll have to expect a self parameter always remember when you're defining the method in class the first
parameter needs to be this self parameter and this is injected by default so you don't have to uh pass in
the any current objects or anything like that and this will be done for you by the python interpreter so let me just
correct this and then i'll create another web function called
print name again this will need a self parameter
and what i'll do is i'll use the print method and i'll get self dot
now let me just show you a trick so we know how to concatenate strings let's see how to interpolate string
interpolation basically means we create a string will leave some places there to be filled with data later and that will
be filled by python we provide the data so let me show you so i say my name
is and i put this two curly braces so i
open a curly brace i close the curly brace and now i use the dot format method
and i pass in self totally what will happen is python will look at the string it will go my name is then it will take
a look at these curly braces and understand that i want to provide some data to be replaced to for this curly
braces to be replaced with and in the dot format method i pass in the data which is self.name
so now let's call the function so let me just create a dog
which is the class that i had just created this will require a name i'll call it
charlie i think i ran it by mistake so the name of the dog is charlie and
now i can call the actions so if i call dot
talk will print book and if i type doc dot
print name save it and now if i run it using this
i can just type in python
h2n and the name of the file is after ui i press enter and as you can see i print
wolf and my name is charlie now another thing that you need to notice here is that this method has a special meaning
here so this is this gets called automatically whenever i create an object so if i were
to create another object let me just print something here just to make print
object with name
created now i use the format method again
and in that method i'll pass in the name this is done and now
this dog was created i create another dog
let me call this bruno and
and put and now
charlie will talk then
bruno will talk then
you know speak its name and well charlie will speak its name
now that that is done watch what happens when i run the code so object with name charlie gets created
object with name bruno gets created so as we have created charlie first and bruno's later on
this is this function gets called for charlie this function gets called for grown up you create both the functions
then we print the then talk is the method that gets called and
first charlie stops then bruno talks and then it asks them to print their name so bruno prints their name and then
charlie prints its name so this is what it does but another thing that i'd like to show
you is if i
print it so if i were to print char
now these are objects these are not string so if i print both of them what do you
think will happen and we get the name of the class and
this is the class of dog and we get the ids so that's not very helpful
what if i wanted to print whenever i print charlie or bruno as objects i want to print their name right
so what i can do is since we're in a class and we have magic methods i like
i'll show you one more it's called str and what i'll have to do i'll return
some string here all i have to do is return self dot name
and then this and as you can see now instead of printing that long string of
name and class name and all that it's going to print the name of the
dog or the object of the name of the name attribute of the object so this is what it looks like there are
many other major magic methods and i encourage you to check them out on the documentation page but as of now i would
definitely suggest that you read more about it this is what it means hopefully
the topics that i want you to get away with is the constructor method how to create a class how to create an object
how to call methods on those objects now these two objects instead they don't uh have the same uh they point
they have the same structure but the data in them is different so the name uh the attribute name is different for both
of them this is why when when we call the print name method bruno prints bruno and charlie prince charlie so make sure
that you understand that as well it's a difficult concept when you're starting out with programming to get around but once you get the hang of it it's very
easy so with that in mind let's move on to the next topic all right so now let's take a look at
inheritance python so inheritance is basically acquiring properties or behaviors of another class
the class that is being inherited from is called the parent class and the class which is inheriting things is called the
child class there are many other terminologies we will take a look at them one by one so to give you an
example uh you would have inherited a few qualities from your parents and they would have inherited certain qualities
from your grandparents and that they this would have kept going on uh however long your family chain is now in a
family tree traits such as hair color eyesight and anything other than that gets passed
down from generation to generation so this is what inheritance means there are many different kinds of
inheritance in python and we'll take a look at them one by one but for context these are the five types of inheritance we have single inheritance multiple
inheritance multi-level inheritance hierarchical inheritance and hybrid inheritance so let's take a look at them
one by one so single class inheritance basically means that there's one parent class there's one child class and we
inherit from the parent class and the child class and the child classes the
class that inherits from the parent class so here's an example let's say that we have a class of fruit and then we have a
class of citrus so the class citrus inherits from the class root and as you can see the syntax is quite easy to
understand we create a class using the class keyword we give the class a name and right after the name we put the
class that we want to inherit from in parenthesis after doing that inheritance is complete and then we can perform
other tasks as well so now let's check look at multiple inheritance so a class can inheritance
from multiple classes now this is not possible in many other languages this is java but you can in cpr in other
languages such as c plus plus and even in python you can inherit from multiple classes just be very careful by
inheriting from multiple classes could cause a lot of issues if you're not careful so make sure that you understand
that so we have a class a and we have a class b and we want to inherit from both of them so to do that we can simply
instead of just passing in one class of name in the parenthesis like we did earlier we can pass it multiple classes
name and separate it by comma so that's how that's how you can hear it from multiple classes
then there's multi-level inheritance so multi-level inheritance is just single inheritance repeated multiple times or
repeated in different combinations of classes so let's say that i have a grandparent class then a parent class
and then a child class the grandparent class carriage inherited by the parent class and then the parent class gets
inherited by the child class that's how the relationship goes just one class at each level is inheriting one other class
this is what multi-level inheritance means so this is an example let's say that i have a class a and a class b and i
inherit from class a to class b and i inherit from class b to class c this is
multi-level inheritance and then comes and then comes hierarchical inheritance
so in this one uh single class is being inherited by multiple classes so it's just for
clarification your parents have certain qualities that get inherited by you and your siblings
your brothers and your sisters this is a hierarchical inheritance and your grandparents had certain
features that get inherited by your parents and their siblings so your father your uncle and everyone had
inherited the behaviors the mannerisms all uh certain other qualities like hair
color or eyesight from your grandfather so that's all that and finally we have uh let's take a look
at the code first so we have a class a and then we this gets inherited by both class b and class c
and finally we have a hybrid inheritance hybrid inheritance is basically a
combination of any two kinds of inheritance that we had seen earlier so if in the example we have hierarchical
inheritance between classes a and classes b c and d and then we have multiple inheritance in
class e and class b and d so this is how hybrid inheritance force
this is the code that explains the relationship that we had in the previous example or somewhat the relationship
that we had seen in the previous example class b and c are inheriting from class a that's a hybrid inheritance and class
d inhabited from class bhg that's a multiple inheritance so inheritance when you're working with
inheritance there's a function called super so what does that do so let's say that i have a parent class of vehicle
and a child class of two wheels what i do here is that i use the super function and then i after calling the
super function i can access any property or method on the super class so if i want to call the method from the super
class i use the super function superclass is the class that i am inheriting from the parent class so i call that and then i call this start
function on it when i print i have two wheels and then i print i call the stock method there
so when we come to inheritance there are certain concepts like overloading and overriding so overloading and overriding
separate concepts let's take a look at them one by one overloading is basically one function
with different parameters so we overload the function so that we can understand what kind of behavior we
want depending on the number of parameters the function will get called so in the add function if i type in three integer it will call the second
function and if i call pass in two integers it will call it the first function
so there's another way of overloading a function instead of creating multiple functions with different parameters what you can do is you can
uh act on the function parameters based on the data type and the size of
the data so that's how you can do that this is what's happening here with checking if it's an integer or string if it's an
integer then the beginning result the result that we're about to return should be zero which is an integer so that we
when we add numbers to it we don't end up affecting the result on the other hand we can assign an empty
string to it if it's an instance of string and then we perform the concatenation operator again and again
and again or add additional operation and then finally we just return the result now we come to overriding so overriding
basically means changing the functionality of a function that we had inherited from a superclass so let's say
that i have a class called a it has many functions one of them is say hi so it says i am in a i create another class
called b inherits from class a but i want to change the implementation of the say high function so i do that by
defining another function with the same name and the same parameters and then i print a change the implementation and
now when i call this save say hi function the b classes version of say high will get caught
so let's take a look at some examples here's the code and we'll take a look at multiple
forms of inheritance overloading and overriding the first thing is i'll create
a class named base let me give you a more intuitive example let's say that i have a class named
person a person has several attributes i will create a init function
okay now here i will firstly the person is always going to have
a name let's just keep it simple and keep it at that so i will
tell dot name because the name that is faster so this
object will now have a property named name which will be set equal to the name that the function that the user passes
and now left stay named
which takes in send and all i will do is i will
print self. and we are done now let's create another class
now a person could be a lot of things so let's say that
engineer and i will inherit from
person now def
self dot p r o f f-e-s-s-i-o-n equals to
engineer and finally i can create another function say
question that will take in the self parameter and we will print
self dot profession and that's that's basically what we're trying to do and now
i can create another class with a similar structure
and here this will be a doctor
so let me first
complete the implementation with the doctor now one thing that i'd like to show you
is this is single inheritance right one class is inheriting from one
class and now if i create an engineer so
and if i print
dot say name so obviously i had to i had not to pass a
name as of now and this is going to cause some issues i wanted to figure out why if i run this let me just put on
this as you can see i've gotten an issue it says engineer has no attribute name can
you figure out why that is let me tell you why that is if you want to take some time and figure it out
pause the video and think about it and if you uh if you'd like to know how why this is happening i'll tell you
so with the engineering let me pass in a name first so let's say the name of the engineer is
john the reason why is i'm setting the name but this constructor function is not
getting called so i'm not setting the name property here all i have to do to solve this
is use the super function that we have already described and using the super function i am going
to call the underscore underscore init method inside it all i have to do
is i have to pass them now that that is done if i use the function now
and i'm calling the person's name john so this is working and we are working for a fine as of now
now if i want to use instead of this what do you say
profession and i'm printing the profession of the
person which is this now the problem that i'm getting here is that i'm printing the return value which is
nothing so if i do this then it works
the name if i remove this and i run this again it works
so as you can see that this is what it means now if i were to do this again and if i were
to change it from engineer to doctor i'll show you certain example of where inheritance is so useful
so i'll pass in the name doctor and if i were to create a doctor
doctor i have to change this here as well
and let me just name dr jane and in your same image and you see
profession and now i'll do the same thing but instead of it being an engineer
i will
doc now if i run this as you can see john is an engineer jane
is a doctor so this is working now the major advantage of engine inheritance is
that it allows us to remove code duplication so instead of us having to
copy this code into multiple implementations of things that require this we can just
reference it here we are saying anything that's in person you can use so now we are using this so if i were to
change the implementation instead of it being
just printing the name my name is
right and now if i were to print this as you can see the implementation is changed in both of them imagine this is
a large system and i have a lot of code so instead of me having to then run through all the professions that i have
and changing this in copying and pasting it in every file i can just change it here and this change will be reflected
in all the files so that's the major advantage of inheritance it allows us to remove code that needs to be copied
multiple times and we can safely change the implementation and the other functions will uh work exactly the way
they are supposed so that's that was
multiple inheritance but let's say i have wanted a multi-level inheritance so how what how
i will go about doing that so let me just remove all this
let me create a class this is going to be a really generic example class a
and i will create init
pass in the self and print just me like instead of printing let me
just pass this keyword is used when i want to tell python that there's nothing no implementation here if i leave it
open then i'll get some error as you can see i'm getting an error here expected an indented block of python so i'll just
put in paths here because i have nothing to tell right now
then b and finally class c will inherit from both a
and b right and now all i have to do uh if i want to i can basically add a
few other things so i can create a function named
or another thing i could do is say
name i could do that as well but i think the most important part here is let me just
print and i have to pass in self here even though i'm not going to be using self
print now i can copy and paste the same thing
and this
copy and paste it here
okay now all i have to do is i have to create an object let's say i call it obj and i create
c now if i were to print
dot print a again i'm making the same mistake
print b i'm going to say
from a from b from c so these methods get inherited in this class this is multiple inheritance and there's hybrid
inheritance and then hierarchical inheritance i don't i need to go into any details of that basically this would
be just be inheriting from a and c also inheriting from a
and then would that would be it so hopefully this was useful and now let's take a look at overriding and
overloading let's say i have two functions let me create a class called
base class has nothing to inherit from def add it takes two functions a and b
and it will return a plus b right
now let's say that i have another function def add it takes a
b c and it also takes in the parameter itself
and it will return a plus b plus c
yeah indeed it properly yeah and now if i were to print
let me just create an object
and here i can call
oops sorry used to be an equal
so add and i pass in two numbers two comma three and another thing i can do is i can call
two comma three comma four now if i call the functions i have two functions with the same uh
that is missing one position requirement for c a comma b comma c okay
i think it should work for some reason it's not we'll take a look at that
okay if i were to pass in five
okay so we can have multiple functions let me
just remove it out of the class so we don't have to deal with multiple functions
okay this is this will work just fine
oh yes self is also next to beautiful because we are outside trust
so we can add multiple functions uh in python i think we need we need to
yeah this is how this is this would work let me just clear the screen and
yeah so this could work just fine if i if i have uh overridden the functions but you could have multiple this is what
overriding would look like in a function let me just show you what overwriting would you think i have a
base class and then let's say i have a
derived class that will take a base class
and here what i have to do is i will use the add function again but a comma b
but what it will do is instead of just adding a and b it will also add 1 to it
so for also i need to use the self keyword
now if i want to create this
derive the derive
and now what i can do is
print base dot add
one comma two and derive dot one comma two
comma three or i could just add one comma two is
fine as you can see uh it's giving me different results based on the
implementation that i have but let's talk about overloading so i want to
create a function that handles multiple multiple things what i can do
is instead of doing it this way i can
start argues so this is what it what it will do is whatever however many uh arguments i
pass let me just go over
even if i were to pass in three arguments four arguments five arguments it will perform the same task so now if i take a look at
if length of args
is equal equal to two then return
r sub 0 plus x of 1
if it's not the case then result equals to zero
and for x in
args result plus equals x
and then we return the result so
i can pass in multiple arguments just make sure that you're putting a comma before them and if i run this now
i have to syntax this effect i need to put this and now it will work yeah
so this is what overloading means so i have created multiple implementations based on the number of arguments that
have been passed to me i can create uh functions as well so i can create add two and here i'll add two functions
and all that so that's how overloading and overriding works so hopefully that's clear now let's move
on to the next one the next topic is encapsulation in python
let's take a look at that encapsulation is basically abstraction plus data hiding
abstraction is showing essential features and hiding non-essential features to the user so uh depending on
how your application is set up let's say that you have uh an application that
manages the payroll of of a company now since it's managing the payroll of a company the user does not need to know
what kind of database it uses what kind of file system it's using what kind of language or what kind of drivers it's
using the background background that's all things that you have to do so you can abstract those details out of the
program and just focus on the ui and all that so that's what abstraction means just showing the essential features and
hiding the known essential features for you to deal with so this is what it means so while writing an email you
don't know how this things are actually happening in the back end this is one example of abstraction as well so when
you're writing an email on gmail when you send the email you don't know how the things are being put into an http
request how they're being transferred from other email servers and how the email reaches to the person
so encapsulation deals on on the concept of public and private so
public basically means a function that anybody could access so so far we have created only public functions private
functions are functions that other people are not supposed to access you can access them uh under very strict and
uh rigorous circumstances but it's generally discouraged so if you want to access something then you can use update
software then you can use a syntax that we're showing down so let's say that we have a class named car it has an init
method and in that we have an update software method it's a private method the way we know it's a private method is
that it's been preceded by two underscores so whenever we start a function name with two
underscores that means that it's a private method so we create an update software method we create a drive method
and then we call the update software method i create an object called red car i call the drive method since it's
public but if i want to call the private method this is how i do it like underscore the class name and then two
underscores and the function now again this is not something that you should do it's generally discouraged to call
private methods on your own so if possible don't do it on your own but if you have to then this is one way you can
do it so you can change the value of private variable using a setter method as well
so let's say that i have a private function called private variable called max speed let's say i'm defining a
creating a car game in that there's a max speed function so instead of me having to reach into the function and
then exposing the max speed variable what you can do is you can call it a max speed
function set max speed function and pass in the maximum speed that you want so using the red car dot underscore
underscore max speed will not change the private variable because it's private but you can use a setter method to do
that for you now let's take a look at a hands-on to understand how that works so
let's say that let's say that i have um
let's say that i have a function called some let's have a class called some
class and here i have a function let's call it
public i'll print
like function and now i can create a private function always remember underscore underscore
means private private
this takes in no functions so i will just print
private function now
i think i'm getting some error mainly because this is supposed to be a class
and they need to accept a self parameter
and now if i were to create an object
and now if i were to call the obj
dot public this would work
just calling the public function but now if i were to call the private function
underscore some class underscore underscore p-r-i-v-a-t-e
it's calling the private function for me so that's how this works now let me tell you how to do how to deal with the
private variables so let's say that i have
a self dot underscore underscore private equals to
uh instead of it being private let me call it b a l a n c
and set the balance to be zero so let's say that i'm creating it for
some account now i want balance to be private mainly
because let me call it
the reason why balance is private because there can be certain rules that bank has depending on how the things are
set up we might have multiple multiple rules so it could be that a balance can never be
equal to zero or it could be that a bank has that whenever you open an account of balance should be minimum of 10
so we can set it here now also when we're setting the balance there could be multiple procedures that we need to
follow that we need to log the old balance then update the new balance and then log it log that as well so these
are the kind of things that will take a look at in the set balance function
you take self we take balance and what we'll do is self dot
b underscore underscore balance equals to
all right so i need to put a comma here
all right so now instead of this i can create a
count and i can also create a get balance function so def
get balance self and what it will do is it will return
self dot underscore and scope so now all i have to do is
print obj dot get balance
i'll print it again and before that i will change the balance
set balance to be 20 now if i were to run this
what do you think will be the output
so okay i'm getting none here okay
obj is an account i call the init method
yeah self.balance is being set to 10 and then i'm passing in the balance
or i could also do it this way self dot set balance to be
10 still getting none
so we have self dot balance we have self.set balance we have an account
and we are using the obj let's just print it here
okay so we're getting the balance but we're not able to return it mainly because it's a private thing so that's
why we're not able to return the function so make sure that you you're understanding that so you can't return a
private value but you can use it under it as you can see now i have 10 and 20
let me just remove this if i were to
print get balance instead of
we're printing 20 but if i pass it here save this and run it again
as you can see the current balance is 2010 and then it gets printed to 20. so
that's how that works hopefully it's clear to you and let's move on to the next topic
all right so now let's take a look at polymorphism in python so what is polymorphism well
polymorphism basically means it's the ability of a class or an object to perform certain tasks or adapt to
perform certain tasks based on the environment so to give you a bit more context let's say
that we have functions with the same name but they behave in different ways that's polymorphism
you might also recall that this is also what's called as over riding so this is basically that
so you have different you as uh human beings we behave differently with our friends and with the elders and people
we respect so that's very akin to what polymorphism is so a single person behaves differently
at times similarly objects can be have have say the same method that performs different tasks
depending on the environment so polymorphisms with the function is quite simple as you can see here
we have a function called in the pacific in which we pass in an object of fish and the fish will swim
so we have two true fishes one is shark one is clown and both of
these fishes will sing differently that's polymorphism in a way
let's take a look at polymorphism in more detail using some code again the setup is quite the same i have an app.py
file and i'd like to show you how i'm going to do this so let me first create a class named
worker and that class will have a function or a
method rather called what that will take in a parameter of
cell and now all i'll do is i'll print
working now that that is done i'll create another function
called perform task this will again take
parameter of cell and what it will do is it
print performing
task and instead of after this i don't want there to be an
empty line so i'll change the end parameter and now i'll call the self.work
function or method so that is done now
what i'll do is i will create two classes one is the class of a delivery person so
plus delivery man
and this will inherit from the work and here what i'll do is i'll override
the work function and it will take in a parameter of cell
and all i have to do is change the print statement here
p-r-i-n-t
delivering goods similarly i'll place another class
this class will be called lumberjack
this will also do this but here the task will be different
and now it's time for us to perform the task so what we'll do
is i will create
an object of delivery man now create another
object lumberjack
sorry and now all i have to do is i have to perform the tasks
so deliveryman dot perform task
number jack dot perform task so even if the perform task function is going to do the same thing since we've
overridden the work function in both of these uh both of these classes are applicable our
code is going to perform differently so for one thing we are performing the task for billy language and for the other delivering cutting board so you can mix
and match a lot of these tasks and perform and make it to work the way you want it to work now let's move ahead and
see what else we have to do so now comes the title of modules so a
modular basically let's take a look at what modules are to put assembly a module is simply a file that contains
some python code modules can define functions classes and variables and can
also include runnable code so there are some predefined modules in python standard library that we can use for our
basic purposes and we can create our own modules so there are two keywords that you need to be aware of when you're
working with modules the first one is the from keyword the second one is the import keyword so the from keyword
allows you to specify the things that you want to import from a module and the import keyword basically just imports
one entire module into the current scope so i'll show you what that means and let's take a look at some module
code so again the setup is the same but here what i will do is i will create another file and i'll call it
utils.py here i will define two functions so
a function would be add and what will do is written
x plus y and i'll do the same thing here
but instead of adding it it will be multiplying
now that i've done this i can now use the uh previous thing so from
u t i l s is the thing and my code editor is recognizing this as well we will import
that so if i want to just import add from mutants i can do that and i'll do add
i'll just print it add 7 comma 9
now that is done if i run this again here it goes and now i have wanted to import the uh
multiply function as well you can do that
and that works as well so it's working for failure but if i wanted to import everything instead of me going to write
everything like from ins util support add multiply divide absolutely and all that i can just
import utils and now instead of add i will use
newton's dot add which i have already run and utils dot multiply
and it's working the same way so this is how modules work in python
let me just close this one out let's see what else we have to do so let's take a look at the python
standard library so python standard library is a very extensive library which offers a wide
range of facilities so it it's basically pre-bundled set of codes that python ships with so that you
don't have to write everything from scratch so the standard library contains built-in modules they provide access to
functionalities such as io which is file io or disk io or something like this and
they provide uh ability for us to take a look at data types functions uh we have modules that are already available in
the python library and there are many other modules in python standard library that allow us to perform some very
common tasks uh which we can take a building like building csv files uh taking a look at
the operating system feature so on and so forth so let's take a look at the python standard library code so
again the setup is quite the same we have the uh the standard library uh we'll be taking
a look at the python standard library essentially what we'll be doing in this one is that we will create three files
inside the data for inside a folder named data so let me just do that uh i have no folder now let me create a
folder called data inside it let's say that i will create three files
uh sample dot txt
uh data dot txt and let's create another file called
demo dot txt
now i want to take a look at all the files that are inside the data folder there are many ways to
do it but in python since it already ships with a os module that provides me with this functionality i can type port
os and now all i have to do is i will print
os dost list directory this is a function this will take in a path and the path is the
data folder if i run this as you can see it gives me all the file
names let me just clear it up
yeah this is what it looks like so there are three files in this folder and these are the name of the parts now i can take
this a lot further there are a lot of things that you can do using the os module and there are many other modules
that you can perform a lot of tasks with similarly if i wanted to just use this i could take
do it like this from os import
list directory just to revive the previous example and if i were to use it now this is what
it looks like and it works just fine so let me just remove this this works now let's take a look at what
else we get so we will be installing packages and when we are installing packages we use
let's show you we use something called pip pep is the package manager that comes with python and it allows us to
use it allows us to use code written by other developers and we will use the code written by the
developer so that we don't have to write the same solve the same problems that has already been solved by other people
so uh in this example we are installing the colorama package which we will be using in our hands on
so let's take a look at that so as of now colorama package is not installed for me to install the color
rama package i have to type in the command pip install colorama
c-o-l-o-r-a-m-a so pick install
and i press enter if i you've installed python in your system then this will work just fine and
it will take some time it will take okay so the colorama package has already been installed on my system this is why
it's saying requirement already satisfied but in case you don't have it it'll work for you now all i have to do is i have to import
some methods so um me see colorama
i will import the init method
also from term color
imp i will import colored so what i'll do is firstly i'll
initialize call the init method and now all i have to do is i have to
print something right print it firstly i'll type in
hello world
and in the here i will have to wrap it inside the colored function so that the output is
colored here i passed in the text and now i need to pass in the colors so the colors would be white and on red
so white this should be a string
and not now if i go to my stretch system type in pack pip the python app dot py
as you can see the background color is right and the foreground color is white exactly how i wanted it to be so
instead of me having to write the code to change the colors of the strings that are being returned having to deep dive
into how the terminals work and how to accomplish this task this has already been done for us we can just use the
colorama package and we can use the term color and all that so this is how that works
and hopefully that's clear you can install any package that you want to install i mean just make sure that you're understanding what is the package
you're installing is it a good package it has it been used by other users is it tested is it pure and all that
and now we come to exception handling and this is an important concept so make sure that you understand it so an
exception is basically a runtime error uh this could be caused by a lot of things that are outside your outside
your control let's say that you're building an application that works with the database now it could be that the
database for some reason is not working maybe the table is not there maybe the web server that is hosting the
database database management software is causing some issues has run into some issues and now you need to perform some
other tasks so these are runtime issues that you can ex you can basically uh
expect these things to go wrong and write code that should be performed when these things go wrong such as displaying
an error message and doing something else if you don't do it then your program will exit immediately
one of the most common uh runtime exceptions is file not found exception so exception handling is basically
writing the code to handle these exceptions to occur we
are basically expecting things to go wrong and we are writing code to handle if these things go wrong the way we want
them to go wrong so there are certain key words and you need to understand their meanings before
you jump into exception handling things like try accept finally raise cash and all that so we'll see we'll take a look
at what these mean let's take a look at trash the you can create your own exceptions
if you want to uh and raise them appropriately where you think it's appropriate but as of now what you need
to understand is that these exceptions can only you only need to create your own exceptions when the already existing
exceptions don't make sense so let's take a look at try try allows you to define a code block
that should that could potentially throw an exception so underneath that underneath the try keyword as you can
see we have indented a function named throw exception what happens in this function is that it
takes a look at the function it throws uh it might throw an exception and if it does throw an exception then we catch it
and we perform certain tasks we catch it using the except block so accept allows us to define a code block to check
whether when an exception occurs what do we do then so like here we are raising a custom exception and we are catching
expecting uh it to go wrong and raise that custom exception and in the accept block we're tired typing when a custom
exception is thrown by this code then perform this task here we're just
printing the message written to us by the custom exception and then we go to the finally block
so the finally block gets run e whether an exception is thrown or not so it let's say that you have a database
connection and you want to close it you can think of it like this even if your
throws an exception your database connection will get close no matter what so
that's why we use the finally block it's basically used to free up resources that
are not going to be used so if you opened a file or you opened a connection to a network and your code throws an
exception and it exits out prematurely then that connection remains open so the final block basically allows you to take
a look at the code and then if there are some resources that you need to free up you can free up there
and then there's the raised keyword raise allows us to create our own exception and raise them the way we want them to so this is what it means
and in this example we are creating our own exception and then we are raising these exceptions as well using the
function called today's custom exception and which in which we are basically using the raised keyword and
instantiating a new exception and now let's take a look at some code
so all we'll be doing here in is will be creating an exception throwing an exception and learning how to handle
custom exceptions as well so the first thing i'll do is i'll create a function
called throw exception i will accept a number here
and if the number is equal to equal to zero
then i will instead of throwing i'll use the rays function
and exception and here i'll pass in uh an argument that will show the message that i want
to display on the screen which would be
human 0 is
not did
else we will print
so now if i were to use the throw exception function pass in zero
and if i were to run the code
as you can see this throws an exception and this exception is causing that program to
stop abruptly so if i'm typing done here and if i run this again the last line
does not get executed our program exits here so if i want to handle this then this would work
for instance
i'm handling exception as ex
and i will print it save it run it again and now it's
working fine it's showing me that argument 0 is not accepted and we're printing the done statement
now another thing is just the else statement could be used here as
well so else statement is used when uh the code associated with the else
statement will be called when nothing well the exception is not true
so i will type in not only when the exception is not from here
the exception is being thrown so if i type in one this will work
fine so it prints one which is because we are printing it here it's not raising the exception then it goes ahead
and goes uh not thrown and then we print the done statement so it's working fine
now let me show you what the final statement would do and if i were to type
sorry and now if i were to type this as you
can see it prints done but if i want to pass in 0 and press this as
you can see this is still printing that so this is used to run code whenever we
need to make sure that a co piece of code is being run even when things are not working up so even if there was some
reason because of which our code would exit abruptly because an exception was not handled finally class would run
completely fine so now that that is done let me show you how to create your own
custom exception so let me just create a class called my
exception it takes an exception
now i will have to in it
now as you can see i am inheriting the exception class so i would use the super method
here i would have to pass in the current class
self object and i have to call the init method here
on an issue that i can see is i need to pass itself and now here i'll pass in
uh in the init method at least in the current exception class i don't have to pass in anything and now
i need to just set the self args
here it's a tuple so all i have to do here is just
paste my section
save it and now if i were to create
my exception yes my expression
as you can see i'm getting it here but i'm getting it in the way of a tuple so everything is
this way but as you can see i can just change it by typing a comma
now i'm getting my exception and rest my so this is working now if i were to try it out
and in the accept top all i will do
it in the accept block i will have to specify the kind of exception that i'm expecting so
my exception as ex and i will print x
so we've done this and it's working fine we can mix and match a lot of things like else and finally and all that but
here it's working fine so let's move on and see what else we have to do
web scraping is a term which is used to describe the use of a program or an algorithm to extract and process large
amount of data from the web whether you are a data scientist or an engineer or anybody who wants to analyze
large amount of data sets then the ability to scrape data from the web is a useful skill that you should have
let's say you find data from the web and there is no direct way to download it then web scraping using python is a
skill which you can use to extract the data into a useful form so that it can be
imported for further analysis so what is web scraping well web scraping also known as screen scraping
web data extraction web harvesting etc is basically a technique which is used to extract large amount of data from the
websites these data are mostly unstructured in nature and once extracted you can transform it to a
structured data and save it to a local file in your computer or to a database in a tabular or a spreadsheet format the
data displayed by most of the website can only be viewed using a web browser and most often they do not offer the
functionality to save a copy of this data for personal use only option then you have is to manually
copy and paste the data which is a very tedious job and can take many hours or sometimes days to complete now using web
scraping you can automate this process so instead of manually copying the data from the website
the web scraping algorithm will perform the same task within a fraction of time so this was about what is web scraping
let's move ahead now next we have is web scraping or web crawling the same thing well there is a
very subtle difference between web scraping and web crawling moreover web scraping and web crawling are
interrelated the words web scraping and web crawling may look similar and many people use this word very frequently but
both have lots of differences between them in simple terms web crawling is the process of repetitively finding and
fetching hyperlinks starting from a list of starting urls broadly speaking web
crawling is a process of locating information on world wide web indexing all the words in a document adding them
to a database then following all hyperlinks and indexes and even adding that information to the database
major search engines like yahoo google bing etc all have such a program which
is also known as a web spider or a bot but when you see on the other hand web
scraping is a process of automatically requesting a web document and collecting information from it strictly speaking to
do web scraping you have to do some degree of web crawling to move around the websites web crawling is generally
what major search engine do for searching any kind of information web scraping is essentially targeted at
specific websites for a specific data for example stock market data business
leads or supply product scraping anything like that but an important
thing to know is that web scraper can do things a web crawler wouldn't do for
example it doesn't obey the robot.txt i'll tell you in detail what exactly it
is later in this session but now just understand that they doesn't obey robot.txt it is a file which tells that
what you can crawl and what you cannot so web scraper does not obey that robots.txt file don't worry later on
we'll read about it in detail next is submit forms with data or execute javascript or transforming the data into
required form and format or even saving the extracted data into database so
these are the things a web scraper can do but a web crawler cannot i hope you guys are clear with the difference
so moving on ahead let's learn about some of the use cases of web scraping or
under what business scenario you could use web scraping so on number one we have
tracking competitive pricing well web scraping helps in extracting products or service price of the competitors to stay
ahead of the cut throat competition next is sentiment analysis
well sentiment analysis is analyzing the reaction or response of a customer or a
consumer using web scraping it can be easily traced by extracting ratings reviews and
feedbacks on forums as well as e-commerce websites next we have market research when you
are planning for a product or a service launch then you can use web scraping to study the market in advance and it can
help you out for the product campaigns launch next is industry scrutinization
most of the time you and your business would demand to know that who all are present in terms of market player so in
this case again web scraping can surely help a big time next is content aggregation well if you want to gather
information from multiple documents or web server for further processing then what you can do then you can just web
scrape the data then you can just process the unstructured data and convert it into a organized structured
data and it can be further used as a real-time information next is monitoring brand value you can
make future decisions easily and very accurately by analyzing the brand value
on scrape filter data related to your brand along with some positive and negative keywords next we have is the
lead generation well you can use the scrap data to identify who to target in a company for your outbound sale
campaign you can even use it to locate possible leads in your target market or identify right contacts within each one
well this was some of the business application of web scraping well if you research out there you will find out any
number of other business application for web scraping now since that you know you are fetching data from a different
website so now that you have seen various uh business use cases of web scraping and you know that what you do
in web scraping is you fetch the data from other website so question might arise in your mind
like is web scraping or web crawling a legal thing to do well the answer is maybe crawling means fetching content
from the web pages in an automated manner rather than to manually opening each page in your browser the calls made
by the browser agent the target server that hosts the web page is quite similar to the way the bot hits a page to grab
its content so now the question arises why is crawling a taboo among those who only
have learned to use the dom well it's mostly because it's quite often used against the website policies
and breaks the ground rule of crawling so here are some thumb rules that you must follow if you want your bot to
behave humanly the first one being robots.txt will beat a commercial or a
non-commercial indian american or any website one of the easiest way to find out which websites allow scraping and
which doesn't is simply by checking their robots.txt file you can do it by appending forward slash robots.txt
at the end of the website url you wish to scrape for example what if i want to
check the robot.txt file for amazon.com so i'll just write www.amazon.combots.txt
so as you can see here it gave me a list of allowed and disallowed link which can be crawled you can consider this as a
filter consent form that you should abide by if you want to crawl that site tells you what urls you can and what you
cannot crawl this is really bot specific even google's bot cannot crawl a blog
page unless the site is worried about the page seo next is the public content
will crawl only public content keeping copyright policies in mind if you are crawling a site only to reproduce the
same content on a new site of yours then good luck with that you can easily do that it's a very legal thing and no one
is gonna pose you or sue you for that next is terms of use check the website's terms of use and
make sure all's well between them and you you should definitely read the terms and condition of a website you want to
scrape if the data is under creative commons you should definitely read the terms and
condition of a website you want to scrape and check if the data is under the creative commons that you can use it
commercially so basically if terms and conditions states that scraping is illegal then you shouldn't scrape that
website next is authentication based websites well some sites need authentication
before you could access their content and mostly they would discourage crawling because they only want real
human beings to get logged in next is crawl delay robots.txt
also lists delay to be maintained between consecutive crawls to ensure you are not hitting their servers too hard
if you overload them with requests chances are that your ips will be blocked let me tell you about an ongoing
case between linkedin versus hiq in august 2017 linkedin blocked hiq from
accessing its data available in public linkedin profiles of registered users so what these hiq guys were doing they were
just extracting information from linkedin all the public information all your public profiles which are being
extracted by hiq so what linkedin did it blocked the company from accessing its data hiq took
linkedin to the court and the case is still ongoing the case hinges on the question of who owns a piece of data and
the circumstances under which the information can be viewed as residing in the public domain accessed by all and
the appeals code judges may rule that linkedin owns exclusive right to the data which would not have been compiled
without the entrepreneur talents of the linkedin founders conversely the judges may conclude that since linkedin users
set their profiles to public placing them in full view of search engine and general web surfers they are giving
companies like hiq free reign to view and use the data as they see fit so it's
a knife edge decision with strong arguments on both sides either ruling could have profound implication for how
people like you and me interact with the data in your daily lives so this was a story of how hiq breached the policy of
linkedin by web scraping their data so as you know that for this tutorial
i'll be scraping using python so what are the basic python libraries that i'll be using for web scraping
well the first one is the request which is used for fetching urls it defines the
functions in class to help with the basic url actions like digestion authentication redirection
cookies etc next is the beautiful soup well it is an incredible tool for
pulling out information from a web page you can use it to extract tables lists paragraph and you can also put filters
to extract information from web pages beautiful soup does not fetch the web page for us that's why i'm using the
combination of both request as well as the beautiful soup library python has several other options
for html scrapping in addition to beautiful soup like mechanized scrape marks scrapey etc don't worry
we'll discuss about them in our next tutorial for this tutorial we'll be just focusing on beautiful soup and requests
so let's move on well why performing web scraping you will have to deal with html tags
thus it's very important that you must have a good understanding of them if you already know the basic of html
it's good but for those who don't i'll try to cover the basic for you guys in just two minutes
here's a basic html code the first line exclamation mark doctype html
it indicates that this particular html file is written in html5 so basically
all the html5 documents must start with it next is the html tag all the html
documents are contained between an opening and a closing html tag next we have is the opening body tag
well this is the visible part of html document like whatever you see on the web page is mentioned inside the body
tag next is the body tag well it is the visible part of html
document like whatever you see on a web page is enclosed between a body tag next we have is the h1 tag well html headings
are defined with the h1 to x6 stack there are six different types of heading which are defined as h1 h2 s3 h4 h5 and
h6 for example h1 is the main heading then h2 is a subheading and so on
after headings comes the paragraph for paragraph we have a p tag over here this tag is used to define a paragraph
there's the ending body tag and the ending html tag let's move ahead next we have is the table tag don't get
confused with this style thing the main tag over here is table the style is just one of the attribute of a table
like it's telling that the width of the table should be 100 we represent the row as tr tag and the
rows are divided into data using the td tag for example i mentioned a name over here like james
james is a data of a row it's a cell fine we add another data to same row
james smith another data to the same like 45 so first name last name and h
are being added to same row tier now again what if i want to add elements to my next row so again i'll define another
row tr then again i'll write first name last name and the age and
then again close the dr tag or the rota these are some of the basics see what we
have next next we have up here is the a tag well a tag is used for hyperlinking text with
some websites for example this is my entire tab what we have up here is a href equals
www.intellipad.com so this is the tag and what is my text that has to be hyperlinked to this
website it's visit to learn then we close the tag so this entire thing is known as element
a hrdf part is the opening tag or the atar and inside that we have attribute name
as href and attribute value as www.intellibatt.com moving ahead we have the enclosed
tag content to visit to learn more which will be hyperlinked to triple w dot intellipaat dot
and finally we have a slash a as the closing tag so this was all about the basic html tags which i'll be using in
this session if you want to learn more about html tags in detail you will find multiple online sources freely available
for you you can just learn about html in detail from those websites or content first of
all let's begin by understanding what web scrapping is so suppose you have a website or you have a
link for a website which is containing some information that's getting updated regularly and you wish
to store that information either locally or in a database or anywhere or you wish to access that information and then
perform some manipulation on it now usually and before web scrapping you should
usually check if that website has an open api to provide that data so that you can just request the data
using a url and however sometimes these websites either don't have a web api or don't have the
data that you want in the form of a web appear so in that case what you do is you pass the entire
html content of their website as a string and then
extract information from it that you need you can then store it or manipulate it however you wish to and that's what's
known as web scrap now python has built uh has a lot of
packages for web scrapping so one of the packages that we can use
is called beautiful soup it's now in its fourth version so i believe beautiful
soup 4.4 is the current version and another one is scrappy
now scrappy is less for web scraping more for building web spiders or web crawlers
now these you can these this is this could be considered an entire framework in itself as it allows you to create two
spiders by inheriting classes and then telling it how to parse it as you can see in the example right here
and this could be useful when you're creating a web crawler and you wish to
crawl multiple pages but if you wish to crawl a single page if you wish to crawl
create a web scrapper for just getting information from a single page that's being run
i think executed several times a day such as is a stock market website for example
that's getting updated hourly so you can use beautiful soup in my opinion now scrappy is also very good but it's
it's more powerful than beautiful soup in the sense that it is used to create web spiders or web scrappers or web
crawlers particularly for them so if you wish to learn scrappy it's the documentation
page that you need to go to there are several tutorials on its documentation page there are examples so on and so
forth in this session we'll be looking at beautiful because it's very easy to get started with and it's quite easy to
use as well so now let us take a look at what can we do with beautiful
so with beautiful soup we can if we have an html page offline stored we can
either parse that or we can parse an html page from a website now parsing an html page from a web
address that needs you to get the string content of the html page so for
instance as you can see this is the string content of the html page this will be
returned as a string then you can parse it and then you can use it with beautiful soup so before we get started
with beautiful soup one thing that you need to understand is that you need to install
all the dependencies in your project now i'll be using pip and that's p-i-p-e-n-v
to create an environment and then install all the packages that i need uh
have any of your work with pip and viewer if you have then you can message in the chat box
no okay so let me give you a brief introduction of what pip env is why do
we use it and how do we use it so basically suppose you are creating a
project in python using external libraries like a beautiful soup there
are many others like pandas numpy django django rest framework all of these
packages are available inside python inside the python they are
not available inside the python standard library so you need to download them from the internet and then
use them now you can download them but it could be the case that these packages
have dependencies themselves that is they require certain packages to be downloaded as well and those packages
require certain packages to download themselves and then those packages might even have versions so for instance let's say
django your project only works on django 2.1 and there were some changes in django
2.2 which you cannot support at as of this moment now let's say that another person or
maybe you yourself wishes to work with django 2.3 to create a new website
now you would either have to uninstall django 2.1 and then install django 2.3
or you would have to create a new environment and install this install the django version that you
wish to use in that so this is where tip and b comes in so what it does is it creates a virtual
environment all the packages that you install in this environment can only be used in this when you enter this
environment so think of it as a container or a virtualized environment for you to
install your python packages so for instance let's say that i wish to
first of all you need to create an environment open and for that you can type pip and start or click and shell or
whatever i usually start type pip and shell
and then you press enter and it says here creating a virtual
environment now this is important because everything that we install in this virtual
environment will only be able to use in this environment we won't be able to use it outside this environment
so it's creating a virtual environment getting all the files required for it before paid bank there used to be
virtual env so now we have different virtual env is
what is used underneath pip env but prepared me env could be thought of as an abstraction now you can see creating
pip file this file contains all the all the packages that your project might
so as you can see we have created a pip env and an environment and as you can see this is the
from where you have to run this command because that's saying uh not recognizing this command okay okay
so first of all everything so if you wish to run this command first you need to install ppnp so in your pc or in your
mac or whatever you have type pip install
pip enb i'm sorry install yeah
and when you press enter
yeah mine is already installed so it's not going to say that but you can install it
is it installing oh it's struck at 65 percent yeah it's doing something yeah yeah but it will
install it'll take some time but it'll install and then you can use the command ppm okay
another i have a question over here so we generally use pip install till now
we have installed so many libraries even circuit learn as the tensorflows so we
have used pic installed tensor flow so what's the difference between pip install tensorflow and pip
okay so the difference between them is that if i wish to use tensorflow version 2.1 for one project
and tensorflow version 2.3 for another project with pip i cannot do that because
in pip packages are installed globally so for instance let's say that i've been using for a project beautiful
soup version 3 and now suddenly i have a new project and i wish to use beautiful
soup number four version four so because of having different versions we need to
either uninstall beautiful soup version three and then install beautiful 0.04 in that case the previous project that we
just created with beautiful super potency which was running with stop working so so to avoid this problem and install
these packages for project basis so for instance i wish to use beautiful super supervision for for this
project so when i install it using pip env only
only this project will be able to use that version so for instance let me show you first
let me enter the environment so as you can see it didn't create
another environment because it had already created one and it shows here that's the name of that's the label of the environment or
unique identifier now if i install pip e and v
install b e a u t i f u l s o u p four
beautiful soup four and then i press enter now it'll start installing
it's installed and now it's locking which is checking uh all the files and it's done now as if i can show you just
one thing this is a ctrl o
yeah yeah pip file so as you can see it's showing the
version of python that i'm using it's showing the version of it's showing that i'm using beautiful soup and since
i didn't specify any version it's going to install the latest version which is this star
so now if i wish to take this project with me on any other computer and use it all i have to do is install tip enb on
that computer and run fifth env space install it'll create the same environment that i have right now with
same packages that i have and according to this like a beautiful soup the latest version and it'll use python 3.7
and it'll start working on its own if i didn't do this then the problem would be that the another pc might not
have the same versions of all the dependencies that i might have so they might have beautiful superzoom
three version two maybe they do not have it maybe they have a different version of python so on and so forth so you can
think of it as an as a way of creating an environment or you can think of it as a way of
creating a container in which your project can be developed so i hope that clears it up
just thank you sure so okay now that we have installed
the beautiful soup library another thing that we need to worry about is parsers so
parsers are basically how your beautiful soup library or parsers is basically you can think of
it as a package used by the beautiful soup library to look at the html content
and then create an html tree out of it or pass it or understand the structure of the html page so
whenever you go to an html page in chrome or whatever browser what you can do is right click click on inspect
and as you can see this tree like structure this is how html usually works it is a tree of nodes nested into one
another in a hierarchy so to understand how these relationships and parts all of
this we use parsers now beautiful soup supports many parcels
uh i think it's documentation page has yeah here it is so it's supposed to html
dot parser which is python's inbuilt to the library so you don't have to install anything if you wish to use the html
parser that is in built-in python um you can also use lxml html parser
which we'll be using in this tutorial because it's very fast and very lenient now when i say lenient it means that if
the html content that we're getting is not properly formatted that is some of the tags have been
opened but not close so it's not completely valid html there are some bugs or errors in it yeah the lxml
parser will try to rectify those mistakes and present the tree as it is instead of throwing an error and saying
that html is not well formatted because the html content that we're getting may very well be out of our hands because
we'll be getting it from the internet there's also html5 lib and lxml xml
parser now the reason why you why we won't be using html5 flip also although
it's very useful is because it could be very slow as you can see here
and so this could be a problem on the other hand lxml xml parser is used to pass xml right now we'll be
passing html and it's very fast and lenient python's inbuilt html parser is
also very good however i'll suggest that you use lxml whenever you can
because well first of all it's quite fast and the speed is of the importance when we're building a project
and it's very lenient so it can rectify some of the mistakes that we get so that's very useful
so first thing that we need to do is install the lxml parser and i'll install
another package called requests this is a package that is used to send requests to a
website or a web server and get the response in as a string or however you wish to get it so what i'll be doing is
firstly installing e and v and you can install multiple package in
packages in the same command so i wish to install lxml and q u e s t s requests with n s
so don't forget the s because it might install under package name request now when i press
enter so lxml is installed requests it now
installing this is also installed and now it's locking locking basically means checking if the dependencies are
fulfilled and then creating a hash out of it and then locking it it's all it also creates a
pip env.log file as you can see it's mentioned right here
and this is what contains the current version of our ppnb file
how it works of all the things that vpn we need to create dependencies so
locking is a process it might take some time because we've installed two packages at once
so after it finishes locking we can start
let me know that uh why we use web escaper web scrapper okay fine so many websites
they contain some information that we might need in a project so for instance let's say you're creating a project or
predicting the stock market tomorrow now for that you need some data so you can get the data from an api here
that is called a web api many stock market websites do provide web apis which basically are a
you can think of them as url url endpoints which you can send a request to and get the data in a format
that you wish to get they get it like json or xml however you might come
across a situation where the data that you want from the website that you want it from
does not have the web api that you can request the data from
in that case you usually use a web scrapper now a web scrapper is
basically just a python program that gets all the data from the
website and then parses it and allows you to extract information from that
webpage so for instance let's say that i wish to take the title from this website now i
can if it has an api i can request that api to provide the title or what i can do
more generally is just to create a web api just to create a web scrapper get
the information of the html page that is returned when i hit this website and then pass it and
then just extract this information then i can do whatever i wish you did which is basically save it in a csv file
text file database manipulate it or do whatever i wish to do with it so for instance to continue with the
stock market example let's say there's a website that maintain that updates the stock market
information per second so it's instantaneous and you wish to get that information from that website
so what you can do is you can create a script
api for that so you can go direct over it means uh website over there and you can collect your data what you want yeah
you can write a python code that code will get information from that website or the web
page and then extract the information that you need okay okay okay we got it thank you
welcome um this is sanji so my question is
for example uh the website which you are showing on screen right now
so when i we're reading your screen content or maybe a website content if i
only what do we do so for instance you wish to just read
this content am i right yes yeah
so basically what you do is just as we'll be doing in this session is you
create you install the beautiful soup library then you write the code to get this
entire html content this is loading yeah after that you parse it which is not really difficult
to do because it allows you to do it very easily and then you traverse down the html tree so for instance
this html this chinese content is inside a class
of simple inside a ul element ul stands for unordered list you can think of it
as a list with bullet points so in a list with a class attribute of
simple so we just tell the beautiful soup library that okay there is a list on this page with a class of simple i
want you to extract all the information from it and you do that and then you can do whatever you want to do with it
now you can do it with any of the web pages and it doesn't really have to be an ordered list you can do it with
images you can do it with videos you can do it do it with paragraphs you can do it with whatever you should as i'll show
you uh in this session so uh sorry again having a question so for example
if i'm if i'm reading a html content or any other website and it is all showing as a text or some
graphical uh images so yes how do i know come to know that there are some kind of tables
or maybe reports are attached along with that but i need to
extract the data from that sure so the first thing is when you are thinking of scrapping a website
the first thing that you need to do is you need to go to that website and look at its html content to figure out
how to get the information that you need because they haven't provided a web api it's not just as simple as just
taking taking a web url sending a request and getting the response so you
have to do a bit of a research in that department so you go to the website let's say for instance i this is the
first time i'm visiting this documentation website and i decide that i want to extract this information as
you suggested then i look at the html content of this page like this now you whatever content
that you wish to extract there because of the developer tools in chrome or any other tools what you can do is you can
click on this button which says select an element in the page to inspect it
and then go to the content that you wish to extract so i wish to extract
these yeah so i wish to extract these chinese links
so what i can do is just simply look okay so i wish to extract these links
they are inside a an or inside an unordered list with a class simple
inside them there is a list item inside them there is a a link
and i wish to extract the text of those links now you can do you can do it this
way and it's usually a better idea to be very precise about which what you wish to
extract so if you just said that i wish to extract an unordered list that would create a problem because
there may be another unordered list on the on the web page and you will have to then pass a lot of content just to get
these three information so be very precise and look at the content of the website before scrapping it that way you
can understand how you need to begin scrapping it what are the what are the elements that you need to
understand what are the what are what are the classes that we need to reference in order to get the
data that we wished does that answer your question
yes and will you be showing us a code or maybe a
hint of that the ones i choose which content i want to read
i can target my python program to read from that link
yeah so for this session i'll be showing you some of the code so that you can extract information from a website so
you don't have to worry about that this session i'll show you okay
okay so this is what we have right now and let's begin with our session today
okay so for this session because we need to get some information from a
html page what i have for you is
yeah so an html page
here it is so this is the html page that we'll be scrapping you can think of it as a
you can think of it as a blog so i'm sure you guys have visited several
blogs so this is one of the blogs it contains posts each post will have a title
that will have a link to a full on blog post and this is the summary of the title so
when you click on the link it will create it will go to a new the entire blog post so
for that first thing i need to do is i'll need to run a server now it's
perfectly all right if you don't have a server you can use any other any other website or anything that you
wish to i'm creating a server because it makes it easy for us to send the request get the information from the request
pass it and then use it now if i don't have a server then i'll have to open this html file in python which isn't
always the case that you can do it because if it's a website that you don't own so you don't have the html content
you need to get it from the website so for that i'll be using something called light server
so it's checking the version of the light server that i have yeah it's working so the light server is
working and this is the server that i have now if you don't have light server
installed what you can do is first install node.js
this is node.js you can go there and always remember to download the lts
version lts stands for long term i think long term service
so you can download it and install it it's installed like any other package
that you can found online and then you just write npm
install dash g that g stands for global so it will install it uh on your pc so
that any project can use it l-i-t-e f-e-r-v-r i already have it
installed so i won't be running this command and so yeah so now what i'll be doing is i'll start
the light server in the current directory make sure that you are in the current directory mine is
in the d drive web scrapping directory so i do it and because the name of the
html file is index.html i get this so this is the content that i'll get now
what i'll be doing in this session is i'll be getting this content parsing it
and then getting the information about the title the summary and the link of this title
so this is article1.html and article 2.html and so on and so forth
and after getting the content i'll store all of this in a csv file because usually when you are doing web scrapping
you are getting the information from the web server uh in an html format passing it and then
storing it in some of the in some form or the other so like a csv
file an excel sheet a database a small sqlite database
or a json format any way you wish to do it so
let's begin so the first thing that i wish for you to understand is that you need to have
installed all the packages that i mentioned so these were
beautiful soup for requests
and alex server so after installing these packages
what you can do is i have this html file because i wish
to show you how to pass an xml html file and many websites online either
don't allow for their web website or web page to be crawled or
scrapped in a way so though one question here this node.js package do you need to
install in the same directory or it can be installed in a default program files directory default program files
directory you can install it anywhere you wish to there is no no problem so uh sunil has asked where can i get the html
file so for this session i've created this html file myself if you wish to allow the trader to upload it in git so
that you can get it but you don't necessarily need this html file you can use any html file that you can get the
point that i'm trying to get across in this video is how you can use uh
beautiful soup and parsers and all of that to scrap any website so because i'm using my own created html file i'll show
you how to use this but you can use it with any website provided that they give you permission to scrape
it now scraping is a you can say it's a difficult thing
because when you scrape a website usually those websites don't allow users
to scrape their website so the if you have uh like seen the structure of an html page you would have
seen seen the structure of a directory that contains the html pages for a
website they have a robots.txt file this file contains a list of
the files and folders that the website owner or the create owner of the server does not wish the
crawler to crawl now if you are creating a if you are creating a web crawler then this might be a concern but since you
are creating a web scrapper you don't need to do that another thing is that
when you create a web scrapper what you do is you send a request to the web server now this
means certain uh certain certain load on the bandwidth of that
web server so whenever you're scraping a website do make sure that either you have the
permission to scrape that website or you're not doing anything labor intensive on that
website so that it could essentially bring that website to a hall most of the time it's fine but many a
times there could even be legal actions because the website could get done it could be your fault
so when you're scraping a website always make sure that that you are not doing something very
intensive that ends up hanging the hanging website and like creating multiple instances of your
scraper and then scraping the website or another thing that you need to worry about is that the that you're not
scraping something that the person does not want you to split so just make sure that you're not doing
that and another thing when just scraping it do make sure that the information that you're scraping could not be get gotten from an api because it
if it can be then it's actually very easy to just get the information by
requesting it from a url instead of scraping an entire web page or website so
i needed uh sorry um so uh when i say that if i'm reading a
website or if i'm scrapping a website how do i know that whether i have
uh permissions to uh scrap the data from that website or not
yeah many websites actually uh so you can look at their robots.txt file many
websites do provide that so if you're creating a crawler using scrappy or creating a parser what you can do is you
look at the robots.txt file this is one of the most uh easiest things to do if
you're looking at the robot.txt file and they have mentioned the name of the html file that you are going to scrap and
they have mentioned that they do not wish for this file to be scrapped or crawled or whatever then what you can do is you can just not
do that because that would be against the wishes of the creator of the website or the maintainer
so don't do that and uh yeah that's the first way to do
it and secondly like i said if you are using a web crawler yeah
sorry where can i check that so in a website when you're crawling it
you can request it so for instance usually it's in the root of the directory so if you wish to you can just
robots.txt right now it's showing you what are the robots to txt file and how to use it so
let's say that there is a robots.txt file rob or ts.txt
this if it's in the root of the directory then you can just replace the localhost 3000 with the name of the website so for
instance www
robots.txt so you can get it this way our website doesn't have it because it's just a local website and only i'll be
doing it so you don't have to worry about that here this is exactly the reason why i'm using asl creative
website for demonstration instead of going on a website that i do not have any
uh permission to access so this scrapping activity you can do
both on response page as well as request page or only the response with the output data
so uh you can do it with uh so there's no request and response as
per because when you are sending the request you are getting the response as an html page so this is the data that
you will be getting as a string and this is the data that will be using like passing it so you get it as a
response from the website yeah okay
okay so i mean the reason why i was asking
there are situations where you submit the form data to the server to get response
okay so so the first thing is the form data has nothing to do with crap and scrapping can only be done with the
information that's being shown on a website so for instance yeah so form data you can submit it as a
user but for that you will have to log into the website then file in the information that click submit now if you wish to automate this process this could
be done using other packages like selenium and other automated automation packages are available for scrapping what we do is
you we take a look at the website we look at the content that's already present there then we send a request get
the response as the html page is string representation and then we pass it and then extract the
information so forms don't really fit into this equation if you want to create a a script or a program that submits a
form automatically for you for that you can use selenium and other web automation libraries but beautiful soup
is not really for that okay okay
so let's begin with the scraping the website so the first thing what you do is you create a new python file
uh i'm going to call it scrape dot py py is the python extension
and now i'll be importing
so from bs4 which is the name of the
package what is this editor you are using uh i'm
using visual studio code vs code so okay yeah you can use it it's very good
actually so i i suggest that you if you are doing something important you can use visual studio code this is the
information about the what about the editor
using spider spider and um
yeah spider and um
yeah so they are also very good so you can use them as well but they are more suited for data science and data
analysis purposes here we are just extracting the information and then storing it in a csv file so i'll be
using the visual studio code and i'm also using an extension in the visual studio code language called python so python
extension this is why i'm getting this these code completion hints
okay so after doing that which id do you use
visual studio code visual studio is a cool blonde ide visual studio code is like 24 to 30 megabytes and it's very
small and it's quite useful visual studio is more useful when you're developing an entire application using c
sharp or any other microsoft technologies okay okay so if you if you're interested in
using this you can download it free from microsoft's website virtual studio code is the name
thanks okay so this is uh so we'll be create this is
the class that we've imported beautiful soup from the package bs4 now we'll create a new instance of the
beautiful soup class so you can name it anything you want i'll be naming it soup
now you beautiful soup now as you can see it has two uh arguments that i need to pass in
it markup which is basically the string representation of our html page so
for that i'll use the requests library that we have installed
after that req requests dot get
and inside the get i'll paste in
the web address so it's http colon slash
localhost 3000 and
when i get it i want the text from text basically means just give me the string representation of the entire html page
so just give give it to me as a string and now i need to pass
the xm the the parser's name so i need to pass
llxml so you can use lxml if you are using any
other parser you need to look up the parameter that you need to pass inside the beautiful soup library
documentation page you can go i think it's somewhere down here
it'll show you how to use any other parser so i'm using lxml
so this is how you use it if you wish to use the built-in html5 html parser inside python you need to
pass this parameter for xml you need to pass this and for html5 please you need to pass this that is after installing
html5 if you are wishing to use this built-in html parser you don't need to install anything however it could be
slower than lxml so after doing that let me just
print so
let's see what this gives us so
let's run this py and the name of the file is scrape dot so scrape dot now if you are using
uh linux or macintosh you need to type pids210 entirely but on windows after i think
python version 3.4 or 3.6 you can type just py and it will run
so i can do this and this is the entire string representation of the website now one thing that you need
to notice is that it's not formatted very nicely so it's very hard to read so you don't know where the body starts
where the body ends and what are all the tags that are inside the body type so
for that what you can do is there's a method called pretty fine
so after using pretty fire what you can do is scrape and as you can see it's formatted nicely
now we can see where each stack starts where each stack ends it's indented nicely
now after this since we don't need this and
now what you do is you go to the website and you look at the structure of the html page so as to figure out how to
extract the information that you wish to extract so what i want to do is what uh what i always do
is usually i take the information from one of the one of if i'm
if i wish to get information from multiple sites so for instance let's say that i wish to get the information
from like for instance i wish to get information from multiple
uh html tags so here we have multiple posts and i need to get extract
information of all the posts what you can do is you can firstly just get the information from one post
which i have here extract the summary the title and the
link and then you can just replace that one with multiple
so what i'll do here is this first i'll show you how to extract information from a single
uh blog post or article so if i wish to get the title
and the summary and the link of the first blog post for the latest blog post if it's ordered ascendingly
then what i can do is i can just type p-o-s-t-s or you can also type arctic
a-r-t-i-c-l-e-s is equals to soup dot find now we'll be using find
and not find all find and find all are a little different
so i'll be using find find all will return all the instances of this so i want
a div now how do i know i want a div is when we look at the html content i want
this entire post this is a div with a class of post
now so if i wish to use it what i do is i pass in i want the information inside a div tag
the first step tag that you find that has the class and we'll be using
a keyworded argument named class underscore the reason we are not using class is because class is already a
keyword so then we can name the class which is i think post
let me check it post yeah and then print
article
so if i run this again now you can see we have extracted just
the latest post it is the latest post because we're getting the first blog post title and it's appearing at the top of the page
now let's see what the information that we need to extract is
uh yeah so the first thing we wish is
the title of the blog post second thing would be
the summary and third thing would be the link so
the link is basically this right now i don't have an html page for
article one and article two because they won't be necessary here so okay let's look at the information that we wish to
extract so the title is inside an h3 with the title
with the class title inside that there is an a tag
that has the uh the text as the title that we wish to
extract so to use that we need to do
is did e title is equals to
article dot now you can access them as properties on an object so what we know
want is to use the articles h3 h3
with the a a which is the link so we want to
so we want to extract information from the posts h3s link so we can do this using
article which is the entire post then h3
which is the heading and inside that we have a title we have a link with the text that
we wish to extract so we go dot a and we wish to extract the text we don't wish to get the all the
information about the tag so we type text and let me just print it to see if it's
working correctly whenever you're working with a data like this you should always make
sure that you're getting the correct data so
so blog post one title so we're getting the information exactly the information that
we wished now what we need is the summary
so the summary we can get the same way just look at the html type content so it's in the summary that we want is
inside ap tag inside the post p is p stands for paragraph
so very similar just go to article dot p dot don't forget to use the text
attribute this is the text that we have blog post one summary
and i think this is the one that will be getting if it's a
summary and let's try it again
create.py blog post one summary so we're getting the information that we
need now we need the link now link is a little different because
uh let me show you link is requested so the link is
very much we get the link very much the same way that we got the title but here we don't wish to get the text we get we
wish to get the value of the href attribute hdf stands for hyperlink reference
so it gives us this we should have slash article underscore1.html
but to get that we don't use the text property we use the href attribute for
that we go article dot h3 dot
and now we want the href attribute so we access it like we are accessing a key in a dictionary
now let's print that and see if i'm getting it
so slash article one dot html so we are getting the id link as well
now what we want is we want this
information title summary and link for all the posts so remember like i said that we first
get the information for one post and then we create the html file so that we can get
we create the python code that we can get this information for all the articles that we need
so for that what we can do is we can use if just a quick info guys intellipaat does provide end-to-end certification
training on python so if you are interested you can check out the course details given in the description below
now let's get back to the session now for example when i'm reading that
link uh i found that within that link uh there is some like uh
values uh or maybe a data set is there or a
yeah so how do i uh read that data so uh
like inside the link there is data so for instance when you click the link it opens another page and the data is on
that path is that what you see yes now for example this uh will give me
uh some kind of rows and columns yeah gives me some kind of data uh at
that website i want to get the data from there
so you wish to get the data so for instance you are are you asking that if i have a
table of data on a website how do i extract information from that table if
if i'm understanding this correctly yes yes yeah so it's basically the same process
i mean exactly the same so let me show you okay
index system so the tables are created using i think the table tag
then you create the table row
with the table data and the name of the table data could be anything like this in full
data now usually when you are using a web scrapper you look at the website and
most probably when you're looking at a website they have some classes on those table data and table rows and tables so
that they can apply some css styling to it now we can use this let's say the name of the the class is
data similarly i create another row
and the class is data sample data let's see if it's showing up on the
website so this is the table that you were talking about now if i wish to get the data
what i can do is i can just tell let me just show you here
okay so i can just say soup dot
find a tag that is table data
with the class name as that's the classical game data yeah
so this is the data that we'll get and i want the text attribute of it
let me see if it's
so we are getting the data for a single row now let's say that there are
what uh three rows
and i wish to get data from all the three rows so
what i can do like we were going to do in the in the
demo which we'll do but for now let's address the query that you raised so for
data in soup dot find and instead of find we do find all
that we can get all the tags that have that are of td
or which is this with a class of data so we get all these three
and then what i do is i just print data dot text
so as you can see i've extracted the information from the table so you can do this with any of the websites
the the first thing that you need to do is you need to take a look at the html content to figure out how you are going
to tackle this problem now it could be the case that they do not have this class in that case what you can do is
just take the information from all the table data elements there are only three
and you can just use that but in a large website they usually do have a class activity so you can use that
you got it got it thanks and uh now for example uh when i'm
this is like i'm simply read a for loop and read all the table content
i want to uh save it in like a csv file yes
yeah i'll be showing you that okay so the
thing that we're going to do is get information from all the posts so for that what we need to do is we need to
first find all so here we are using soup dot find
what i can do is i can just click save it here
okay and okay so
for article in soup dot find all after we find all the div
items with the class post
this is what we have
and indent it properly
yes so now let me just print it to show you if it's working correctly so we'll be printing the
title the summary
and the link i think it's called yeah
and as you can see we're getting the information that we need from all the posts so there are
six blog posts we're getting the title then we're getting the summary
and then we're getting the links so it's working correctly now the final thing that we need to do
is we need to store it in a csv file now thankfully for us python has a built-in
library or scraping for sorry for dealing with csv files
so what we can do right now is as you can see there is no csv file
here right now so we'll have to create one as well so we can first
import csv this is a built-in python package so you don't need to install it
now what what you do is you create a csv file
so i think you do it with what csv underscore file equals to open
the name of the file would be will be storing it in a file called data.csv now you can name it anything you wish to
i want to call it data.csv and the second thing will pass is the mode now we wish to write to this csv file so if
you wish to write to a csv file use the w flag if you want to read you don't
either you don't pass anything or you can pass the r flag will be passing the w time which means you wish to
read the data sorry write the data after opening the file we need to pass
it to the csv dot
writer and we type the csv underscore file
now we can yeah
or we can type it name it right and let me write down so
this is what we're doing now you could if you wish to do it this way by just
doing it this way however there is a slight benefit of doing it by creating a
variable that stores the file handler and then we pass it past the handler to the csv writer i'll show you the benefit
in a minute so this is what we're getting right now now when we are writing to a csv file we
write it in terms of rules so first thing we need to do is we need to
write the headers headers are basically you can think of them as the title so
at the top of the csv file we'll have three data columns which will show tell us the
data that everything inside that column store so let's go let's write
this is the method that we'll be using and this takes in an iterable so you can pass it
anything that we can loop over i'll be passing it a list of items so
we will be storing the title the summary
and the links so this is done now all i need to do
is create a row and then type it
so row and then row is equal to the
title summary and the link
now after writing the rows what we need to do is we need to close the file it's
always important to close an open resource because this could result in memory link if you don't close it
so this is why when i said that there is a certain benefit of storing the name of the file or the file pointer or file
handler whatever you call them in a in a variable and then using it later so
we'll close the file and that way the information that we wish to write to the file gets stored now let me run this
again hope i haven't made any mistakes so far and it works
and this is the csv file assuming all the data is written into it and it is now one thing that you are
noticing is there's a line break or an empty line in all of these
[Music] between all of these titles so let's just look at the file
yeah so we as you can see that is when you're writing it to a csc file it's uh
leading to an empty file so the reason for that is
whenever we're writing inside a csv file we can just instruct it to not insta
create a new line so here you go it means that for a new line you don't put
anything so because we are writing using the writer this also enters uh creates a
new line and this also creates a new line so this that's why so for that after doing that we go
py scrap dot py so it works and
now if you look at the file yeah so it's working correctly so this
this is the blog post this is the summary and these are the links now
one thing that you're noticing is that the links are not properly formatted so we are only getting the end of the link
we're not getting the entire website like localhost 3000 colon 3000 slash link the link that we can just
click and go to the website so to fix that we'll write some code but why we're getting that is because also
so usually links are not written as absolute links they are written as relatively so a relative link is
basically link of the current site and append that link that we have so we
have article dot article underscore one dot html and we're appending it to localhost colon 3000
but in the html tag we're only get given slash article so if you wish to get the entire link
which is this what we can do is we can again to write some code
so this is basically just some normal string concatenation
we get this is the link now
this is where we wish to insert the link then we use the string.format method
that is built into python and
then always remember to close the csv file because if you don't close it you might get a permission error
as you can see here permission error because the file is open we are not allowed to edit it
so yeah i don't wish to save it after i've closed it i run this again
it works perfectly and now if i open it
and as you can see we are getting the link as we want it so now if i wish to i can just click on
it unable to open because yeah okay so you can't open the link from excel but
you can open it i think from a from visual studio let me see if i can
do it yeah so here's the entire link now another problem is that they're
adding two slashes i i made some mistake in the code let me just rectify that
so yeah and
now let's scrape it again don't save it
is create a py and
and there it is so the links are perfectly aligned
they are yeah so it's working as we expect it to work
so i hope that covers it uh is there any question
so i needed in the beginning of this session or maybe before creating that uh scrap file
uh you have shown us to uh like installing the light server so what
is the use of that uh if i'm writing a python program and running on a different machine
yes so light server okay so this is the html page that i have i created it it's
called index.html now if i wish to open it i can open it like this this will just open it on my local webpage but
since i wanted to show you how to get the information from a website now for that you need to send a request to a web
server so this is why i'm using light server light server is nothing but just a dummy
offline server it's a server that's your running that you're running on your own pc this is why we're getting the web
address as localhost and report is 3000 so if i want to not do that and if i were
to use like the html page that i have created
so for that i'll need to instead of using the request page i can just open it
give it the file name index.html
and i think i think this is how it works i'm not exactly sure i'll see ey
okay so oh yeah data.csv is open let's close it don't save
ui and it works so the reason why i used light server is because i wanted to show
you how to get the information from a website but since i created the web page on my local machine i needed to serve it
using a server a local server if you will so this is exactly why i use light server if you don't wish to use light
server and experimented on your own web pages that you have created and have it with you you can just use the code that
i just drew instead of using the requests library all you can do is just open the file
inside the beautiful soup and then type in the name index.html or whatever
the name of the file that you are using provided that they are both in the same folder the scripting file as well as the
html5 and then you can just parse it as normal now i'm
using the request library so that i can show you how to get the information from the server please paste the code in the
chat box so do you wish me for me to paste the entire code
if you want i can paste the entire code here so this is the entire code
so i pasted the entire code and let me just paste the one with the sorry
with the yeah this one also
okay so i pasted the one with the request library and also the one with the html page i think this should help
you uh you can use the request library as well as the normal
page now you can use light server if you wish to and if you're using light server you can use the request library if
you're not using the light server and you're using a local html page then you can open it inside the beautiful suit
and lastly if you are using it on any other website do make sure that they have not asked you to not do that
because that could be difficult for them to maintain the server
and it could also have legal repercussions so is there any other question
so the quick question is for example i'm reading a file or maybe a website called
discoverychannel.com sure now uh do i need to install light
server or no you don't need to you do not need to install light server light server is just for serving the web
page locally so if you are getting the information from an or website that's online like you said
discoverychannel.com that case you do not need light server at all what you need to do is you just
need to type in the name of the website here so in our case because i'm using light server i have localhost colon 3000
now since you said you have discoverychannel.com i say this dash
[Music] channel dot com and then you edit the code as per the
structure of the html page that you get and the information that you need and after that you just run the code and it
will work perfectly without any light server requirement the reason i use light server is only because i
needed to show you how to use the requests library to get information from a website and i think
yeah that's it uh any other question okay
i have a question i have a question over here so for a production use means let's suppose in a
production um i want let's i want to scrap a website of my competitor
and they're here they have multiple pages definitely like like amazon so i need to go to every
page of my return and get the price so that i can list my price just comparing
with him or doing any data science so for that do i need to give all the url
one by one by one by one and but how i do it recursively in multiple pages because
yeah sure so there are multiple ways of doing it um as far as i'm aware amazon i think
provides an api i'm not sure you can look it up but even if it doesn't but there are multiple ways of doing it one
way you can do it is just scrape the entire website for links store all the links in a csv file and then use a a
python script to take links from that csv file and then script and script that website another way you can do it
instead instead of storing it inside a inside a
what should i say yeah inside a csv file what you can do
is use it inside uh use it recursively so for instance uh
let's say that you find a link on the website so what you do is you go to that link and scrap
scrape that website so instead of uh so instead of just scraping the website
that you have right now just the first link that you see you open a request to that website web link here
and then start scraping that but you do need to be aware of the fact that when you are scraping the website you
need to take a look at the structure of the website and then use it so for this this
website that we have we know the structure we know that okay the the information we need is inside idiom
class with inside a div tag with a class post inside an h3 and inside that there is an
a tag with the text as the information that we need now if you're just recursively going
through any links then you may not know the structure of the page and your code will throw errors so to avoid doing that
just make sure that you know the structure of the page and you can do it either recursively you can store it inside a
csv file and then use it that way or i think the better way of doing it would
be using scrap because it allows you to create a web crawler which does the exact same thing that you are asking now
scrappy is a much more full-fledged framework so if you wish to use it you should go through the tutorials as i'm
showing right now it shows you the how to create a scrappy project which is here how to create a spider how to run
your spider and the spider is exactly what you are asking asking about it is scrapes entire
website also make sure that amazon.com or any other website that you are scraping doesn't
prohibits you from scraping the website so look at their user i think they have a user's license
or something so that will also contain that information and robots.txt file is also there so you can use either one
so i'd suggest that you use the scrappy for uh creating crawlers and going through
multiple links or you can use the technique that i just told you about getting uh all the
links storing in the them in a csv file and then one by one scraping all of the links either way the information that you get
will be there but just make sure that the website that you're crawling is not prohibited and the structure of this
table is known okay so we are saying the structure needs to be known before right
yeah is is there any um intelligent algorithm like we have
learned so many data science that can help us predicting that in any case that i don't have to know because if i want
to scrap a whole amazing website it is very difficult for me to get every webpage remember which where they have a
tag and then code for the very lengthy code so do we have any algorithm for the same that we do when
yeah yeah so not that i'm aware of but uh one thing that's uh i think helpful
here is that when you are if you're trying to scrape amazon just scraping it for the information about
the prices of the of that just trying to scrape it for the prices of the items that they're selling now
when you look at amazon.com it let me show you amazon
now one thing is let's say that i wish to look at all the shoes
here's the shoes under 4.99 i get this website and now if i wish to
get the price of all the shoes i can just take the link that i have here
inspect this this is inside a span with the price of a price that a desk price just four so i
can scrape this website or if i have all the links for all the shoes i can just open them and price
will always be inside a link with the span inside span with the idea
price block auto price so what you can do is you can just get the link of all the website
look at the id or the class that you wish to get the information from
and then just use it that way so just take a look at instead of
instead of getting a div with the class first what we want is we want a span with either a class of a size medium a
color if price buys price block buying price string or a with a with an id or price block
out our price and that way you can get the information of all the pages now as for the
algorithm i i don't think i'm aware of any of such intelligent algorithms that can just
assume the structure of the page and extract the information that you wanted to extract you could probably use a
regular expression or stuff like that but it would be very difficult and regular expressions are very computationally expensive
so either you can create a web crawler or you can use the already known
structure of the website and then get the information so so for web crawler also
we need to give the structure right we need a structure before it connects foreigners do is that they can
recursively look at the other links that you provide them as well so this is why web crawlers are like
the all the foreign that it can get that it needs from the website so for instance there are meta tags there are a
title tag body tag and if it finds those tags it will store the information about the stack inside it's uh
inside its database and then recursively look at all the links that that website has to get a better idea of what this
website is all about so that is what a crawler or spider or
a scrawler or a crawler or spider is now scraper is basically that we just
created just a look at the look at a single website get the information from that website and that's it you can
create a spider out of that beautiful soup library but it would be more difficult so i'd suggest you use scrappy
for creating a crawler but if it's just one webpage that you need to get information from then you can use
beautiful soup okay one last question can we pass the username and password as well with
request if the site is
yeah yeah so this is i think a question similar to the forms question that we got earlier so username and password if
you need to pass in then i would suggest that you should use
uh what should i say a selenium selenium is a web web automation tool so it will
open the browser enter the username and password that you x tell you to enter and then click the button and then login
now usually the information that you wish to get is gotten through either an api or
through a website if the information that you need to get is behind a login screen then it's
i think it's safe to assume that the creator of the website doesn't wish for you to get the information
because if it were a public information like the one that we just use like blog posts and stuff like that so you can
easily crawl that but if it were it's not public information it's information private to a specific user even if it's
you then i don't think they allow crawling for that so getting information from by for
putting in username and password is not really something that you do with the subscriber you just look at a public webpage that's
available without providing any information and then you just get that if you wish to get information from yeah
so you mean to say if i need to scruff facebook and with my login user id and password that should not be also allowed
because that is yes that's that's actually not allowed that's not very much yeah that's not
allowed you can't do that uh you can maybe write a script that
uses selenium to open the browser on your behalf and then enter the username and password and then you can look at it
inside the selenium uh selenium instance but web scrapping is not really about that
so i don't think you can do that a little bit question so for example if i'm like
crawling through like a particular website for example um
amazon if it allows me to get the data for example
there are there might be a multiple pages or multiple links with the product name of cpu puma
and i want to know that within the price range for today
deals uh within the price range of say 2 000 to 5000 what all
uh categories of shoes are available uh with the brand name humor
how do i uh write a code for that or what are the steps to
get the data sure okay so one thing uh i as far as i can understand you are saying that you
need to filter the data and then get the data uh for that uh filter so for
instance you're saying i'm you view my shoes correct it's like a product name puma and yeah i want to
know what all brand category or the name of the shoes with the puma brand which is
available between 2000 to 5000 today and i want to extract the data for that
so one thing you can do is firstly you can go to the amazon website yourself then i search for puma shoes like i have
done i hope you can see on the screen so after that what you can do is you are
looking for something within the price range that you want so you can filter it according to that let's say that i want
a shoe with a size 4 okay now this url is what you need
if i type this url here i'll get exactly the same thing that i wanted to get previously so you can
scrape it by getting first of all this url then looking at the structure now on this page you will only get
the shoes which are which are labeled as puma shoes with the the price range that you
either the price range i've chosen the size as the filtering factor so the size 4 and the name puma you will
get that and from there you can begin scrapping by looking at the structure of the html page so i want to get
information about all the yeah so this is i can just
look at this yeah uh s expand x corner this is the class you can just look at the structure of the page and extract
the information about the price range or the current deal that's going on or whatever so in the current trend we have
the price a dash price dash so what you need to do is you need to
first go to the page enter the filtering information go to the
copy the website's address this website address contains only the name and
information about the products which are inside the filtering criteria that you provided and then you can scrape this
this web address so that way you can do it
got it thank you yeah sure any other questions
of the entire website for example i mean all the pages are organized under a website with different
navigation path right so at the website level if you want to capture all the details
yes we have an api so uh maybe so this is also crawling
recursively so let's say that you go to amazon as well so usually all the links
that you need to use are on the front page of let's say amazon or
any other so for instance if i want to these are all the this is the navigation that you wish to
uh get the information from so you can again like i said just sorry
you can again just look at the html
content that's all the class all the html
tags with the class of each menu and inside them we have
all of the information that you need so you can do it that way now if you are asking me that is there any other way
that we can just know the structure of the entire website some uh like for instance how many web pages are there
what are the folders inside which folder what html page is there and we need to scrap all of them this is
what web crawlers are for now you can use the crawlers as well uh also some of the websites do provide uh information
about the structure of the website uh i in the about section sometimes it is sometimes it's a file that they have so
you can do it that way as well however if you wish to scrape the entire website and not just information from one
webpage i'd suggest you use scrappy for that to create a spider and then crawl the entire website with all the links
that you can get or if you're using beautiful soup just get all the links that you can that are of this website's
domain so all the links that start with amazon.com scrapping amazon and then scrap all those websites
so all those web pages sorry and that way you can do it as well
there is no i don't think there's an api that allows you to do it uh
just to type the name of the website and will get you all the file structure there may be one i haven't used one so
far okay okay any other question
uh the question here is do we need to extract the data one by one for each item so yes you do need to extract the
information like we have done here the the the best way to do it as far as i
can tell you is just to extract the information about one item first and then
do it for all the items present on the page because the items have similar structure we can just use the same code
and that way we get the information so for instance we needed to get information about all the posts
that we so we loop over all the posts and then get information about all of them one by one and then store it inside
the csv file so yes that reminds me to ask you one more
question that whenever like we gone through a particular structure of a website i
need to create that many variable to read the data and export it to my csv
file in the similar manner so i can use it is that yeah correct yeah so uh okay
okay so uh yes so you do need so for instance let's say that whenever you're scraping a
website you are usually scraping it to get the information about a particular thing so a website isn't as far as i can
tell not extremely huge so for instance even on an amazon
webpage there are only going to be 10 items 15 20 100 so what you can do is you need information
about the price so you need information about price so all you need to do is just go soup dot find
on uh span with the class uh with the class r
price this will get you the price of all the items on that page and then you just need to get the price of
item that item
dot txt and that way you just need to create one variable to get the information about
all the all the elements on the page now as far as your question about to
do i need to get the information about all the or do we need to store information about all the variables uh
yes you need to store information of all the things that you need inside the variable now if you don't need to don't
wish to store all the information you can just write it directly but even for that you need to create a
row and all so i would suggest that when you're scraping a website try to scrape small
portion of it or portion that repeats itself so for instance in our website there are
what six posts we are scraping just one post and this post structure is repeating itself if for instance there
were like a million posts i won't have to change my code in any way shape or form it will work just fine the just the
csv file would be a bit longer so if you wish to do it that way i would suggest that just look at the repeating
element get the information that you need about one element and then just run it in
inside a for loop or a while loop or whatever loop you wish to choose and then write it inside that
and one other question we have is that if we have wikipedia there is no data in
there only article then how do we do that okay so let's go for a wikipedia article by
wikipedia so the information that you are asking for is that if we have a entire block of
text then how do we extract information from that so wikipedia does actually have an html
structure so if you look into it let's say for instance i wish to extract just the history portion of it or just the
headlines of all the all the portions of this article so i
think all of them have mw headline uh yeah
so this also has a mw headline as the class so you just get all the titles of the mw headline uh
what i'm saying here is that even if the page looks like it's an entire block of text and it doesn't have a html
structure there will be some now if you wish to just extract this paragraph
from the entire html from this entire block of text you can use um there are several ways you can
use a regular expression which is used to extract a pattern a text matching a pattern inside an
entire block of text or what you can do is you can just take this information
split it uh using the slash n so which means that you want to
create a list of all these paragraphs and then just take the last item of the paragraph provided that the contents
structure has not changed and the last paragraph is what you want and you can do it that way as well so if you're
using it on wikipedia or anything like that you can just use it can we do vice versa for example if i'm
developing my own website and i have like 10 000 records which is there uh to upload on
that website so unlike that i'm reading from a website i can
simply write to that website so that it goes uploaded in one go and
i can have all the data available on my website okay so uh as far as i can understand
you are saying that if you have a website that you need to enter some information inside a form let's say that you have a website and a csv file the
csv file contains all the information about employees and there is a form on the
website that you need to insert all the information into can we use the web scrapping for that is that
the question correct okay so again like i said the web scrapping is
not really for that for that you need to use something called selenium that's elena um
so this is browser automation you can use selenium there's also a selenium package for python so if you're
quite good with python or like using python you can just use selenium for that now you can just
tell it to do it what you want it to do so for instance you give it the url of the website tell it okay there's
a form inside the website uh i wish for you to enter
get the record from the csv file enter the name of the employee and whatever it
is according to the information that you get from the csa file and then press the submit button and then wait for 10 minutes then do it again then do it
again then do it again now you can do it this way selenium is built exactly for that as you can see we have one for
python as well so selenium is built exactly for that but web scrapping is not about web scripting
is about getting the information from the web page a public webpage not about
sending information to our webpage so we work with responses not with requests this is why we're using the request library
to get the response from this website convert it to text and then beautiful soup can
use it so if you if you plan to use it to submit information to a form i'll
suggest that you use selenium i think we do have i think courses on selenium as
well so if you're interested in that then maybe you should refer those but the web scrapping is not really about that
i just saw one question how to deploy this thing in in production means you have written this code locally and i
want to deploy it maybe automate it may be running after each one day or something anything so how to deploy this
thing in production so okay so the first thing that you need to understand that this is not a
production ready code okay this works fine but if you are scraping a big website i suggest that you use object
oriented program that way you can create a class that will have methods that will allow you to scrape websites now after
that you have run the made the production ready code and you showed that it's going to work fine
then what you can do is either deploy it on a linux linux virtual machine online
like using a using azure amazon web services or any other
pc if you want to run it on other pcs if you want to run it on your pc then you need to keep your pc running for the
entire day or for forever since it's a production server but if you wish to run it on
any other website uh you can use linux you can use uh windows or any other
web servers web server operating system and then put this file of yours which is crap dot
py or whatever you call it uh depends on you and then put it inside that virtual
machine and inside that virtual machine you just uh you can try uh there's there are python extensions that allow you to
schedule the execution of the script or also i think in linux there's something called cron
jobs c-r-o-n-j-o-b-s so cron jobs are built exactly for that
they schedule a command or script on your server to run automatically at a specified time
so for instance let's say that you have a web scraper you wish to run it every
hour and put the information inside a csv file so you can just
paste this scrape dot py file or any of the files that you have you can just create
put it inside a linux server that is maintained by azure or amazon web services or any other service provider
that doesn't really matter just make sure that it's running all day and then schedule a chronzo now scheduling the
crown job is out of the scope for this session but you can look it up it's fairly easy just opening the crown tab
and adding some file items it works that so just schedule a cron job to run this
file every one hour or however so you wish to choose and then do it that way
you can do you can probably do it that way also so so we can't install this in
the windows machine means let's say that we can yes we can install it we can in
windows i think there's something else or many cloud providers like azure to provide you with facilities to run
scripts regularly so maybe you can use that but for windows i'm not really aware if there's a command that allows
you to schedule a running of a command or maybe you guys might yeah
okay fine got it thank you thanks a lot also i think maybe there is a you can
write a python script which is running in the background continuously and then every hour it's running that script so
you can run it that way as well but i don't think there's a command inside the windows operating system like there is
in linux which allows you to run a job or a script within a specified interview repeatedly
can we uh obtain this uh code i mean we have discovered code in the model building
just like i am going to create a model machine learning right
yeah so yes you this code can be uh put in any of the
more models if you wish to but i think the way it works is that you first get the information from the
website uh you can store like for instance we got from the website and we've stored it
inside the csv file and then we use that file that information that you've gotten from the web scrapping for training your
models so you can or if you wish to you can just get the entire information and not store
it and just use it directly but i would suggest that you store it inside a csv file because that way you will know what
information you use to train your model so you can do it if you wish to
just get the information from the website and then store it in and then start using it without storing it inside a csv file and start using it to train
your model but it would be better in my opinion to just use it to store the information inside a csv file and then
use that csv file to train them
so let's start off linear regression recap with this example so this is lauren she's looking for a property to
buy but she's confused how to start so she goes to one of her friend josh and
asks him if he could help her to find a property with bigger garden area for xbox our guy josh on the right agrees to
help her to find a property but he himself doesn't know how so what he do he goes to another friend
of him explains him the whole situation and ask him if he can do anything about it he immediately says yes and start
doing some calculations then he says to josh that spending xbox can get her a
property of area y now josh is confused and asks him how did he find out the friend goes like
simple linear regression now let's see how exactly he used simple linear regression to solve his issue
so here are our dependent variable and independent variable property size being the dependent variable and money being
the independent variable what this guy want to do he want to find out a relation between the property size and
money so it's like if you want a house of bigger area or bigger property size then you have to spend more money so
both of them are directly proportional right so in this case we'll get a positive linear regression line right
that is spending more money will get her a bigger property okay in other case
but again our next scenario is she wants a bigger garden area right
so imagine the scenario keeping the property area constant the house area is inversely proportional to the garden
area it's like if you want to increase the garden area so you have to reduce
the house area so take it like this suppose you have already fixed the property and you want to construct a
house with a garden in it but now your demand is you want to have a bigger garden area so if the size of the
property is fixed and if you increase the size of the garden then obviously you have to reduce the size of your
house right so in this case if you try to plot a regression line you'd get a negative regression line right
bigger garden area means smaller house right now let's take an example to see how
exactly did he predict the value of the house so in order to find the regulation line
what he did he took the historical data of property area sold in the particular price okay and he plotted it on the
graph so this was the plotted point of property area sold and passed for a
particular price okay now what he did he draw a regression line now to find out
what property area she can buy with xbox he plots x on the independent variable
scale and project it to the regression line and then against that point there
he has the area y this is the area y so this is how he predicted lauren can buy
y area of property in xbox all right now let's see what he can and what he
cannot say from this so he can say that if lauren spends x amount of money she can buy a property
area of why but what he cannot say is will the property would have a good
neighborhood or not or will the location be noiseless suburb or a bustling city right so these are the
question which even he cannot answer using this graph so the questions like will the property
will have a good neighborhood or will it rain tomorrow or not or is
this male a spam or not all these kind of problem fall under a particular category known as classification
problems in machine learning now with linear regression algorithm we could not answer these problem so that is where
logistic regression comes into picture now let us see where this logistic regression algorithm that we just talked
about lies in the machine learning algorithm tree so in machine learning we use two
traditional learning techniques to build a predictive model supervised learning and unsupervised
learning again look at the supervised learning there are two categories regression and classification right in
regression we have linear regression and in classification we have logistic regression and svm so today's topic of
discussion is logistic regression which comes under the category of classification okay so now that we have
got a little bit idea about logistic regression let's go a little bit deeper and discuss about what exactly is logistic
regulation and why do we use it so what is logistic regression well
logistic regulation is a statistical classification model that deals with categorical dependent variable again you
must be wondering what are these categorical dependent variable well these are some of the discrete variables
that have two or more categories without having any kind of natural order for example temperature area or gender okay
so you can say that logistic regression is generally used where the dependent variable is binary or where the
dependent variable is binary that is only two outcomes are possible either yes no true false one zero etc right
and also remember a fact that you can use both continuous and discrete input data with logistic regression so before
moving ahead let's look at the graph see there are two variables one is independent and other is dependent can
you figure out which one is dependent and which one is independent so before moving ahead let's take a look
at this graph so before moving ahead let's look at this graph
so over here we have two different variables our studying and probability of passing
exam can you figure out which one of them is dependent and which one of them is independent
so if you have guessed that ours are studying is your independent variable and probability of passing the exam is
dependent variable then i'd say that you are 100 correct so now that you know
what exactly is logistic regression let's move ahead and see why do we use logistic regression well
logistic regression can be used as a tool for applied statistics and discrete data analysis why because it gets the
output in the form of probabilities which help us to easily classify the given data okay so this is why we are
using logistic regression so now that we have successfully established the basic of logistic
regression by understanding what and why of it let's go ahead and see how logistic regression can be applied for
classifying data with the help of an example so here we are using an example of spam
email classifier we need to build a predictive model that would classify whether a male is spam or not
so let's look at the approach that we are going to take while building this model first we'll try to understand the
variable that on the basis of which we are classifying the mail next we will plot the label data once we
are done with plotting the label data we'll draw the regression curve and finally we'll try to find out the best fitted curve using maximum likelihood
estimator all right so let's get started so step one is defining the variable so
let's start off by understanding what is independent variable in our case so in our case the independent variable is
count of spam words well here are some examples of commonly used spam words word like buy get paid
guaranteed winner unlimited etc okay so these are the kind of words which when
found in the mail the mail is treated as spam if the number of these kinds of words are more in a mail then that mail
would definitely be a spam mail okay just for a better representation let me put them in a bag of spam boards
let's put the bag so there's a bag of spam words let's put
all the boards in them one by one buy get paid guarantee veno and unlimited okay now what about
our dependent variable well our dependent variable is going to be the probability of male being a spam if the
probability is one that means the male is spam if it's zero means it's not a
spam mail well in general the mail with less number of words from the list of spam words will be treated as a spam
mail with five or more spam words in a mail would be treated as a spam mail but there can be cases where you might find
males with less spam words being spam also you might find cases where males
with more number of spam words is not a spam mail so here our aim is to build a
predictive model to classify the mail with minimum error okay
let's see what is our next step so our next step is plotting the label data let's say this is a set of data that
we'll be using to build the model this is a very small data set but just remember that whenever you are using
logistic regression make sure that you are using a large amount of data logic regression works pretty well with large
amount of data it doesn't work that good with small amount of data okay here just for the purpose of understanding we are
using small data set all right so we have two variables number of spam words and the probability of male being spam
against each male okay next as a step three will draw the drag
dash in line so next what we'll do we'll plot our data set on x-axis and y-axis
with independent variable on the x-axis and dependent variable on the y-axis so
number of spam words in a mail is a independent variable right and the probability of that particular mail
being a spam or not a spam is a dependent variable it depends on the number of spam words in a mail right so
let's plot these words one by one so first we have is one word and the probability of this male being a spam is
zero so it will be plotted up here so next we have is five spam words in a male and the probability of that male
being a spam is one so it will be plotted somewhere here next is 3 spam word is a spam mail so it will be
plotted again here two words it's not a spam mail so i'll be plotting up here
seven words again a spam mail up here four words not a spam mail here nine
words it's a spam eight spam words okay it's not a spam so
once we are done with the plotting this is how our plotted data would look like now let's say that we have a new mail
and now we want to figure out whether it's a spam or not so before moving ahead let me just tell you in real world
scenario to perform logistic regression you need a large amount of data set and also you might find many cases where a
spam mail might contain only two words whereas spam mail might contain only two
spam words or also it might be possible that you get a mail where you are having more than five spam words and even in
that case your mail is not a spam okay so here we are building a predictive model with primary aim to reduce the
error okay now let's say we have a new male up here now we need to figure out whether this male is spam or not
but how do we do that well first of all we need to plot a regression curve which would fit the
best and that curve would be our logistic regression curve but now the question comes how to find
out which is the best regression curve okay well this will contain three steps
well the first step is to convert the y-axis from the scale of probability confined between 0 and 1 to a scale of
log odds then drawing a random regression line out of the data that we already have
then with the help of sigmoid function we'll convert the log odds to the probability of male being spam we'll
plot each male on the base of their new probability values and this will form our regression curve then finally from
this plot we'll find out the log likelihood values of each male now from this plot we'll find out the
log likelihood values of each male
the individual likelihood at last we'll find the log of likelihood that would be our log likelihood of the regression
curve now the question comes what are these terms such as log odds or log likelihood means so before moving ahead
let's discuss that so what does log of odds mean let us
explore this with the help of an example so before we proceed any further let me just clarify you one thing this
probability and odd these are not the same thing let me explain you this with an example suppose this guy he goes to
fishing five times a week so out of five times he catches a fish two times and he
failed to catch three times okay so now in this case what is the probability and odd for getting a fish
for dinner so let's first calculate probability so probability is chances for divide by total chances so chances
for catching a fish so what is the probability of catching a fish that is how many times he caught a fish that is
two divided by total chance he had to catch the fish so that was five right so
here probability of getting a fish for the dinner is two by five okay next
comes the odd chances for divided by chances against that is the ratio of how
many times he caught the fish divided by how many time he failed to catch a fish okay so he caught the fish for two times
and he failed in catching the fish for three times so the odd for getting a fish for dinner is two by three okay
so now that we know odds now let's see what log of odds and log odd ratio are
are the same let's find out for your information log odds is also called as logit function okay so in our previous
example where the fisherman was catching a fish let's add another factor to his fishing let's add a factor as weather so
then we can recreate the entire scenario as he was successful two times on a rainy day but on a sunny day he was
successful for three times now the odds of catching fish on a sunny day is how
much it's two by three right and the odds of catching on a rainy day is 3x2
right as it's already mentioned that on a sunny day he catches three times so he's successful for three times and he
failed for two times so let's see he was successful three times on a rainy day and two times on a sunny day so odds for
catching a fish on a sunny day is two by three that is he's successful two times on a sunny day and he failed for three
times in a week so odd for catching fish on a sunny day is two by three similarly
odd for catching fish on a rainy day is three by two and now log of odds of catching a fish on a sunny day is just
log value of two by three and similarly log of odds of rainy day is log of three
by two now log of odds ratio is nothing but the log of odds on a rainy day
divided by odds on a sunny day okay next is log of odds ratio so log odds ratio
is nothing but the ratio of log of the odds on a sunny day to log of the odds on a rainy day that is log of 2 by 3 by
3 by 2 which is nothing but log of 0.44 so here we can say that odds and odd
ratio are both different now let us go back to this step so now
that we have understanding of log odds so we are ready to perform this step okay so let's see how we converted the
zero one axis to minus infinity to plus infinity axis
so here we'll be converting the probability scale to scale of log odds okay so for the log odds we have a
formula as log of probability of spam divided by 1 minus probability of spam
so here the probability of a male being a spam is 1 okay so we get the value of log odds as log of 1 divided by 1 minus
1 that is log of 1 by 0 it's positive infinity how we got that so log of 1 by
0 is nothing but log of 1 minus log of 0 and log of 0 up here is minus infinity
so minus of minus infinity is what plus infinity how log of 0 up here is minus
infinity let's see so in general logarithm so we have log 0 with base b
equals c so if you convert it into exponential form we get 0 equal b to the power c right so if the value of b is
less than 1 so the value of c has to be extremely small or closer to minus infinity for this equation to be true
okay and we'll get a positive infinity in the case where b is greater than 1 or
our base is greater than 1 okay so coming back up here so here log of 1 by 0 is nothing but log of 1 minus log of 0
and we got the result as positive infinity as log of 0 up here is minus of
infinity and minus of minus infinity is what plus infinity how we got the value of plus infinity let's see so log 0 with
base b equals c if we convert this into exponential form we get something like this 0 equal b to the power c right so
for the equation 1 to be true if the value of b or the base is less than one
then in that case the value of c will be positive infinity okay for example 0.1
to the power 1000 would be smaller than 0.1 to the power 100 right so more the
value of c up here more closer will the number get to 0 right and in next case
if the value of b is greater than 1 so for this we have to make the value of c closest to minus infinity why for
example we have 10 to the power minus 1 okay or 10 to the power minus 10 which
is more smaller 10 to the power minus 10 right so which is much smaller or closer to zero 10 to the power minus 10 right
so that's why we have to keep the value of c as less as we can so here if the
value of b is greater than 1 the value of c would have to be close to minus infinity in order to make the equation
true so in this case log of 1 by 0 by default we have base as 10 okay so
that's why we took the value of c as minus infinity so minus and minus of
infinity is plus of infinity so that's why we got the plus infinity up here i hope this thing is clear to you
how we got the value of log odds as plus infinity so we'll plot this up as plus infinity
log odds now next let's find the log odds of non-spam mail so here we have the
formula as log of probability of a male not being a spam divided by 1 minus
probability of male not being a spam so log of 0 divided by 1 minus 0 so we have
log of 0 by 1 which is log 0 minus log 1 which tends to minus infinity
okay similar concept now we have our data up here so first we'll assume one regression line so now
we have our data up here so first we'll assume one regression line then we'll project our data onto the
regression line okay now let's just go back to the step where with the help of sigmoid function
will convert the log odds to the probability of male being spam okay but
what does this sigmoid function mean so sigmoid function is the standard logistic function the logistic function
is defined as l multiplied by e to the power k times of k minus k dot upon 1 plus e to the power
k times of x minus x naught so here l is the curve's maximum value k is the
steepness of the curve x naught minus x as the value of sigmoid point okay so
here the sigmoid function e to the power x divided by one plus e to the power x here k equal one and x naught equals
zero and l equal one so this mathematical sigmoid function
from s shaped curve which is confined between 0 and 1. let's try to understand how logistic function works with the
help of an example so let's say we have a set of unspecified data and on these data we
need to apply a sigmoid function so let's see what a sigmoid function can do by visualizing this graph so let's
say we have a unspecified data and on these data we need to apply sigmoid function so plot this data
and find out the respective y for this point
okay so what a sigmoid function is doing it can be visualized from this graph right so you are giving some values on
your x-axis and using sigmoid function you can predict its probability on the y axis right so this is the reason why
sigmoid function is very useful while solving the classification problem it takes any real valued number and maps
onto a value between zero and one okay well now that we have an idea of how
sigmoid function works let us move ahead with our spam email classifier so we are ready to perform this step
that is converting the log odds graph into a sigmoid function graph now we have to find out the best mle
okay our best maximum likelihood estimator so we are going to replace the log out
value of each male to get the probability of each male being a spam so we have the formula up here probability
equal e to the power log odds divided by 1 plus e to the power log odds so one by
one will place the log odds of each male into this formula and calculate the probability for each male okay for
example i have this mail which after projecting into the regression line gives us logout value of minus of 3.2
okay so what we'll do up here we'll calculate the probability using the value of minus 3.2 we'll place the value
minus 3.2 in our formula e to the power log of minus of 3.2 divided by 1 plus e
to the power log of minus of 3.2 so from here we'll get the probability as 0.03
so plot it accordingly onto the new graph between probability of male being spam versus spam word count so on the
basis of probability a male would lie somewhere near to zero so according to the prediction this male is not a spam
meal again for another meal which is projecting on a regression line this gives us a logout value of 5.6 so when
we put the value of 5.6 in the formula we get the probability as 0.99 so the
probability of this male being a spam is 0.99 so again we put this into this
graph similarly one by one will calculate for each one of them for this male after
projecting onto the regression line we get the log odds value as minus of 4.5 so minus of 4.5 and put into the formula
we get the probability as 0.01 so the prediction of this male is not a spam
male which is same as action right so again we plot this male onto a graph all
right so similarly you can repeat this step for the rest of the email as well
and finally we got the s curve up here so there's our regression curve but you must be wondering is this the best
fitted curve or how do we find out whether it's best or not well this is when the concept of maximum likelihood
comes into picture so now that we have regression curve let's find out the likelihood of this
curve so first find out the individual likelihood of each male again you must be thinking how do we get the likelihood
value well likelihood of each meal is nothing but the probability value of each meal being spam so likelihood of
first meal being spam is 0.01 likelihood of second wheel being spam again 0.01
similarly third 0.03 for 0.05 and so on till 8th male being 0.99 okay
so once you get the individual likelihood of each male multiply them to find out the likelihood of the entire
curve okay then calculate the log of likelihood for
calculating the log of likelihood you can just take the log of the previous result okay you can just take the log of
previous multiplied result here we are adding all the logs because log of a
multiplied by b equal log of a plus log of b okay so we got the value of log
likelihood of this curve as minus of 0.084
now let us rotate this line to find out the best fitted regression line so we got the log likelihood of this
curve as minus of 0.084 now let us rotate this line to find out
the best fitted regression line again we calculate the individual log
likelihood of each male for this one let's say we got log likelihood which is
shown on your screen so final value we got up as minus of 0.207
so we got the value as minus of 0.207 so now if we compare the log likelihood
values for these two regression line we'll see that line a has bigger value of log likelihood than line b right as
line a has log likelihood value of minus of 0.084
so the log likelihood value for line a is minus of 0.084
whereas for line b is minus of 0.207 so minus of 0.084 is bigger than 0.207
right so therefore we can say that line a has better likelihood value than line b
now again we'll rotate the line we'll keep on rotating the line until we
get the maximum value of log likelihood and then finally we'll choose a line
which is having the maximum log likelihood and that line would be the best fitted regression line so i hope
the concept of logistic regression is clear to you guys so for now this was all about the theoretical and
mathematical concept of logistic regression so the confusion matrix shows the ways
in which your classification model is confused when it makes predictions it is basically a summary of prediction result
on a classification problem the main key to a confusion matrix is summarize the count value of correct and incorrect
prediction so the image shown on your screen represents a confusion matrix let's see what exactly does it mean but
before that let me just tell you how to create a confusion matrix this would make things more clear for you so let's
see how so for creating a confusion matrix you'd be needing a test data set or a validation data set with expected
outcome values then make a prediction for each row in your test data set then from the expected outcome and prediction
count the number of correct prediction for each class and the number of incorrect prediction for each class
organized by that class that was predicted okay let's see what exactly does it mean so here's an example we
have some expected output and a predicted output for that so from here you can see that all the red color
results are the incorrect predicted values and the green ones are the correct one so in total we have seven
correct protection out of ten okay so from here you can say that the accuracy of your model is 70 percent now here men
classified as men are three one two and three and women classified as women are
four one two three and four and now men classified as women men as women one and
men as women two okay so two and women classified as men one now if you create
a confusion matrix out of it you'll get something like this men classified as men three men classified as women one
woman classified as men too and women classified as women is four so from here
you can say that total actual men three plus two is five total actual women one
plus four again five and total correct values men classified as men and women
classified as women that is three plus four it's seven so from here you can see that there are more errors while
predicting men as women rather than predicting women as men okay so this was about how you can calculate a confusion
matrix now let's come back and see how to interpret a given confusion matrix
this is the sample of a confusion matrix so here we have created a confusion matrix for a fire alarm so this
represents a actual alarm this represents no actual alarm here predicted fired positive and here
predicted far as negative so if the alarm goes on in case of fire so it's a
true positive event the alarm goes on and there is no fire so it's a false
negative event there is no alarm in case of fire so it's a false negative even
and there is no alarm and there is no fire then that means it's a true negative event okay so let me just
explain you this example this should make things more clear to you so actual alarm and predicted fire so total true
positive events we have 40 and total false negative event we have 10. so from here you can say that total number of
times the alarm rang was 40 plus 10 that is 50 okay here we have false positive
event as 5 and true negative event as 95 so the total number of times the alarm
did not rank was 5 plus 95 that is 100 and this one is the predicted fire or
not so true positive plus false positive that is 40 plus 5 how many times the
machine positively predicted the fire so that is 40 plus 5 45 and how many times
the machine was not able to predict the fire that is 10 plus 95 that is 105 and
total number of events that is 50 plus 100 or 45 plus 105 is 150 so we have
mentioned n equal 150 up here that is total number of events okay so this is
how you integrate a confusion matrix so let's move ahead so now let me just show you in my
jupyter notebook how you can create a confusion matrix let me just open my jupyter notebook
so there's my jupyter notebook and what we are going to do is
create a confusion matrix in python
so the very first thing that i'll be doing up here is importing the required libraries so from sk learn
dot metrics so i'll be importing confusion matrix
next let's create some expected value let's say expected equal so let's add some values
in it like 1 1 0 1 0
0 1 0 0 and 0. now this is my expected value
now let's create some predicted values for that so predicted equals
first it's predicting correct next let's say 0 0 1 0 0 1
0 1 so this is a predicted value now let's
calculate the confusion matrix so let's say results equal
confusion underscore matrix inside this will pass our expected and
predicted value expected comma predicted and print the result
that's it let's execute it so here you got the result as 4 2 and 1 3 so what
does it mean so first we have is 4 so 0 predicted as 0 is 4 times 1 two three
and four so zero predicted as one is two times zero predicted as
one one zero predicted as one two okay next is one predicted as zero so one
predicted as zero is just once here okay and next is one predicted as one that is
three times one predicted as one one two and three so this is a confusion matrix
and what we can say from here so total number of correct prediction made by machine is four plus three that has zero
classified as zero and one classified as one okay and total number of incorrect prediction is two plus one that is three
so we have seven correct prediction and three incorrect prediction okay and the total number of times the machine
predicted the value to be zero is four plus two that is six times and total number of times the machine predicted
the value to be as one was four times okay so from here we can say that our machine predicts the result seven times
correct and three times wrong so the accuracy of our machine is seventy percent so this was all about how you
can create a confusion matrix in python a demo with logistic regression with the
help of psychic learn package and we're going to build this logistic regression algorithm on top of the heart disease
data set so let's quickly go to jupiter notebook and start with our demo right so this is jupiter notebook guys and our
first task would be to load up the heart disease data set and for that purpose we would have to import the pandas package
so i'll just type in import pandas as pd and i'll use this read underscore csv method from the pandas package so i'll
type in pd.readcsv and i'll pass in the name of the data set which is basically hard.csv
and i'll store this in this dataset object now let me have a glance at the first few records of this data set
so this is a data set which comprises of all of these columns and we're going to build the logistic regression algorithm
on top of this column over here which is basically target so target would be our dependent variable and the rest of the
columns would be the independent variables right and this target basically means that so you have one and
zero values over here the one value means that the person or the patient has the heart disease and zero basically
means that the patient does not have heart disease right now let me also have a glance the shape of this data set so
i'll just type in print dataset.shape and this gives me a value of 303 and 13.
so 303 means that there are 303 records in this data set and 13 columns now let
me actually have a glance at the value counts of this target column so this value counts basically tells me the
frequency of these two values so i have these two values in this column which is basically 1 and 0. so there are 165
records where the value is 1 and there are 138 records where the value is 0. so
this basically means that in this data set there are 165 patients who actually
have the heart disease and 138 patients who do not have the heart disease now i'll go ahead and actually visualize
this so i'll load up the matplotlib package and c bond packages and i will pass in this target column on to the x
axis and the data is our dataset which is basically this heart disease data set and what i'm doing is basically building
a histogram and i'll plot this up over here right so this is the bar plot for
the value of zero and this is the bar plot for the value of one and this basically tells us the same thing so 165
is the value of the number of patients who actually have the heart disease so this basically is for all of those
patients who do not have the heart disease all right now let me go ahead and divide the data set into features
and label sets so i'm storing all of the features into this x object so all of these 12 columns would be my features
and this target column would be my label or would be my dependent variable all right and this is how i'm going to
divide the data set so i'm going to extract all of the columns except the last column and store it in this x
object and similarly i'll only take the last column and store it in this y object right now let me have a glance at
this individual independent variable and target variable so x dot head gives me all of the independent variables and y
dot head gives me the target right so now that we have our independent variables in the dependent variable let
me go ahead and divide this data set into training and testing set and for that purpose i'd have to load up the
train test split method from sklearn.model selection and over here i'm showing the test size to be equal to
0.2 so this means that 20 of the records are in the test set and the rest 80
percent records are in the training set right i'll click on run again now we have divided the data set into training
and testing sets now finally it's time to build the model and for that purpose i'll be importing logistic regression
from sklearn.linear model and i'm going to create an instance of this so i'll just use this method logistic regression
and i'll name that instance to be log model and i'm going to fit this model on top of the train set so i'm basically
passing x strain and y train as the parameters right i'll click on run right
so we have successfully built the model on top of the train set now we're going to go ahead and predict the values on
top of the test set so i'll type in log model dot predict and i'll pass in x
test as the parameter and i'll store the result in white bread so we have also predicted the values now
it's time to calculate the accuracy so i will type log model dot score and i'll
pass in x test and y test so i want to calculate the accuracy for the prediction on top of the test set right
so the accuracy comes out to be 73 which is actually not that bad and let me actually also build the confusion matrix
so confusion metrics would give me a table of values which actually comprises of the correctly predicted values and
misclassified values so i'd have to import confusion metrics from sklearn.metrics and again i'll just pass
in y test and wipe red as the parameters inside this function and i'll print this out
right so this left diagonal which you see this left diagonal actually represents all of those values which
have been correctly classified and this right diagonal represents all of those values which have been misclassified and
if you want to get the accuracy all you have to do is add up 20 plus 25 and
divide it with all of the values and you'll get the same accuracy so let me actually add up a new cell over here and
calculate the accuracy from this confusion matrix so i have to divide this left diagonal with all of the
values so that would be 20 plus 25 divided by
20 plus 25 plus 10 plus 6 and this gives
me a value of 73.77 which is the same as i got over here so
the accuracy is 73 right so we have built the confusion matrix now i'll also go ahead and build
the roc curve so the roc curve it sort of gives me the right trade-off between the true positive rate and the false
positive rate so let me go ahead and plot this and this is what we get over here so on the y-axis we have the true
positive rate and on the x-axis we have the false positive rate and basically you can understand this plot this week
so the closer this curve is to this top right corner over here the better the model that is this curve needs to cover
greater area and this what you see red line so this basically represents a classifier which would give you around
50 accuracy and your model would be as better as it is far away from this red
line that is this blue line has to be towards the top left corner right and
this is how we can implement logistic regression model with the help of sklearn
consider yourself to be data scientist at a prestigious telecom company and the name of that company is neo and they are
facing a major problem and that basically is their customers are churning out to other competitors now
you as a data scientist at that particular company have to make sure to
stop this churning out and also to find out the reasons why customers are turning out to other companies right so
this is the problem statement and what you're basically going to do is a bit of data manipulation data visualization
operations and then you will go ahead and build the ml algorithms on top of this data set you'll start off with the
linear regression algorithm and then you'll build the logistic regression decision free and random forest algorithms
all right and i will be working with this customer churn dataset so this is our data set
which comprises of all of these columns so we've got customer id gender senior citizen partner dependents and so on
right so um yeah so this is our first task data
manipulation and uh do this let's go ahead and actually import all of our
libraries so i'll just type in import pandas as pd
and then i'll also load the numpy library so i'll type in import numpy as np
i'd also need the matplotlib library so i'll type in from
matplotlib import y plot as plt
so these are all of my required libraries i'll just wait till these libraries are loaded right this is done
i'll also go ahead and load up my customer churn data frame and i'll store it into an object and name that object
to be equal to customer churn i'll just use um
dd dot read underscore csv and inside this i will given the name of
the data frame which is customerchurn.csv
right so i have successfully loaded the file and i've stored it into a new object and also i've named that new
object to be equal to customer shown now i'll go ahead and have a glance at
the head of this so customer churn dot head
and this is the data set on which we'll be implementing all of the operations so this is just the unique customer id this
column gender tells us about the gender of the customer whether the customer is male or female the senior citizen column
tells us whether the customer is a senior citizen or not so if it's zero then the customer is not a senior citizen if it's one then the customer is
a senior and then this tells us if the customer has a partner or not this tells if the customer has dependence or not this is
the tenure of the customer in months right so one month 34 months two months and so on this tells us if the customer
has phone service or not does the customer have multiple lines and this is the type of internet service used and
then whether the customer has online security whether he has device protection tech support streaming tv
streaming movies and so on and then this column is for contract so this just tells you the contract type of the
customer so the contract type of the customer could either be month to month one year or two year and uh there's a
type of billing whether it is paperless or not after this we have the type of payment
method so the type of payment method could be these electronic check mail check bank transfer and so on
and then these are the monthly charges and uh total charges included by the customer
right so now let's start off with our data manipulation tasks so this is our very
simple task we just have to extract some individual columns from the entire data frame we'll have to extract
the fifth column and store it in customer five so let me do that i'll type in the name
of the data frame first which is customer shown and i would use dot i lock
i would need all of the rows and i would need the fifth column since the indexing starts from zero so zero one two three
and four right so this would be my fifth column over here and i will store this in
let's say c underscore five and i'll have a glance at the head of
this c underscore phi dot head
right so we have successfully extracted the fifth column from this entire data frame and this is the head of it
similarly we'd have to extract the 15th column and store it in customer 15
right so if it's the 15th column then the index number would be 14 because
again the indexing starts from zero right i'll store this in c underscore 15
and i'll also make this to be c underscore 15. i'll click on run right so this is the
streaming movies column and i get the same thing over here this is column number 15 and i've extracted only this
particular column from all from the entire data frame all right this was a basic extraction of
columns from the entire data frame after that we'd have to do um
data extraction on the base of a condition we'll have to extract all the male senior citizens whose payment
method is electronic check right so there are three conditions over here the first condition is the gender
of the customer needs to be male second condition is senior citizen the value of senior citizen needs to be equal to one
and the third condition is the payment method needs to be equal to electronic check so i'll given all of these three
conditions over here i'll start off by giving the first condition stimulation
i'll type in gender and the gender needs to be equal to male
right i'll cut this and piece this inside this of this i'll use the and operator and then given the
second condition so the second condition would go something like this customer churn
after this we'd have to set the senior citizen value
right so senior citizen this needs to be equal to one
and then i'll go ahead and given the third condition so over here the third condition this is
for the payment method column so the payment method needs to be equal
to electronic check
all right so i have all of my three conditions over here
i'll just paste the cell below now what i'll do is i will copy
all of these three conditions and i will paste them inside this
and i will store it into a new object and name that object to be
see random right now i will print the head of this
c random dot head so we see that
this so if you have a glance of this gender column and you'll notice that all of the values are male similarly if you
have a glance at the senior citizen column then all of these values are one similarly i'll go to the payment method
column then you'll notice that all of these values are electronic check so i've given three conditions over here
and all of these conditions have been satisfied so um
next up we have to extract all of those customers whose tenure is greater than 70 or their monthly charges is greater than
100 okay again we'll do the same thing
customer churn 10 yard needs to be greater than 70.
i'll put this up inside this now what you need to notice over here is
we are using the or operator so this it's either the first condition or the second condition right so if one of
these conditions is true then we'll get that particular record
so again customer shown and this time that's the monthly charges
so the monthly charges have to be greater than 100 these are the two conditions so
either the tenure of the customer needs to be greater than 70 months or the monthly charges of the customer
needs to be greater than 100 again i'll insert a cell below
and all i'll do is cut this and paste it inside this
right and i will store this in again
see random now let me again print the head of the c
random dot head right now i'll head on to the tenure
column now you see that none of the tenure or none of the values of the tenure over here is greater than 70
but if i go to the monthly charges column then you'll notice that the monthly charges are greater than hundred
so it's either or so one of these conditions has to be true and in this case we see that the second condition is
true over here right so if either of the condition is true then we'll get that entire record
of this we'd have to extract all those customers whose contract is of two years payment method is mail check and value
of chonus yes all right
i'll again copy this piece this over here
let me delete this from this right so we have these conditions over here so we'll have to extract those
customers by contractors of two years payment method is mail check and shown is equal to yes
so let me put in all of these conditions over here first is contract
and this needs to be equal to two years so let me just
check how is it contract as of two year right
two space here after that it's the second condition and
over here the payment method needs to be equal to main check
again i'll put in the double equal to operator and i'll given the value and the value
is equal to mail check and then i'll give him the final
condition over here so custom option and this time
the churn needs to be equal to
yes right so i've given all of these three conditions and i've separated them using
the and operator again i will store this in c underscore
random let me print this out see underscore
random so we see that there are just three records so there are just three customers who satisfy all of these three
conditions so uh let me have a look at the contract of this right so
is of two years for all of these three customers next is the payment method and again payment method is mail check and churn
all of these values are yes right so out of all of those 7000 rows
only there are three rows which satisfy these three conditions
next this is a question on random sampling so we just have to extract 333
random records from the entire data frame and to do this we'll be using the sample
function so i'll type in customer churn and i'll use the sample method over here
and inside this what i'll do is i'll give the value of the number of records i would sample
so i want 333 records i'll store this in c underscore 333
let me print out the head of it
right so now what i'll do is so whenever i run this every time i'll get a different sample of 333 records
i'll run this i'll run this again right so if you have a glance over here so all of these values should be changing the
customer ids would be changing the indexes would be changing right so keep a glance or have a glance at
these uh row ids indexes over here right so again if you have a glance with this
the row ids are changing so this is random sampling i'm randomly sampling 333 records from this entire data frame
over here and i'm doing that with the help of the sample method
right and then this is the final operation when it comes to data manipulation so i'd have to get the
count of different levels from the churn column so if i want to get the count of
the different levels present in a categorical column i have the value counts
method so first i'll given the name of the data frame which is customer shown after that
i'll given the name of the column which is churn and then i'll just type in
value counts right so this is it so
let me just wait till i get the result right so we see that
no so the number of customers will not be churning out as 5174
and the number of customers who will be churning out is 1869. so you can do the same thing for other
categorical columns as well so let's say if i want to get from the count values or the number of counts of
different levels for let's say the contract column i'll just change the name of the column
over here so i'll put it to be equal to contract right so there are 3875
customers whose contract type is of month to month there are 1695 customers whose contractors of two years and there
are 1473 customers whose contract is of one year right so these were some basic
data manipulation operations after that we'll head on to data visualization
all right so here we'll have to create a simple bar plot for the internet service column
and yeah we have to set the x-axis label to categories of internet service y-axis
label 2 count of categories the title of the plot distribution of internet service and the
color of the bars need to be equal to orange right so i'll just type in plt dot bar over
here now i'll insert another cell over here now what i'll actually do
is um so this basically takes in two parameters first so the first parameter
is the names of all of the parts and the second parameter is the values for those
bars right so the names of the bars would be coming from the internet
service column so internet service and i actually want the value counts of this
value counts and from this i don't want the values i just need the keys
and again i'll have to convert them into a list so i'll use
p list over here i'll click on run let's see what do we get right so these are the three levels
present in the internet service column so from this internet service column
what i've done is i've used the value counts method so this value counts method has two things keys and values
now i don't want the values as such i just want the keys and i'll take these keys and i'll convert these keys into a
list right so this is the list of the names present in this internet service
column now i'll cut this and paste it over here
and this would be my first parameter and my second parameter would be all of
the values and if i want all of the values i'll just remove the method keys from there right so this over here would
give me all of the values present with respect to this internet service column
right so fiber optic or in other words the number of customers whose internet services fiber optic is 3096 number of
customers whose internet services dsl is 2421 and number of customers who don't avail
the internet service are 1520 seconds right now again
i'll cut this and i'll paste it over here now let me print this out so this is my
basic r plot over here right so this is my bar plot on the x axis i
have the names representing these bars over here right so this bar is for all of the customers whose internet service
is fiber optic this is for those customers whose internet services dsl and this is for those customers who are
not availing the internet service and these are their accounts over here present on the y-axis
now that to do some other things over here i had to change the color of the bars
so the color of the bars was supposed to be set to orange and for this i have the
color parameter and i'll just set it to be equal to orange i'll run this again
right so you have successfully changed the color of these bars over here now i'd have to set the x-axis label and
the y-axis label so i'll just type in plt dot x label
and the x label needs to be equal to
categories of internet service let me type that down categories of
internet service after that i would need the
i need to put in the label for the y-axis so this would be blt dot y label and
i'll just put it to be equal to count and then finally i'd have to given the
title so plt dot title and i'll set the title over here
and the title needs to be equal to distribution of internet service let me type that out
distribution of internet service alfred run right so this is our final
bar plot which gives us the distribution of internet servers and the x axis label
s categories of internet service and the y axis label discount right so this is how we can create a
simple bar plot and you know all of this so these are the basic steps behind uh you know before you go ahead and build
all of your machine learning algorithms so the pre-processing the data pre-processing part is always the main
part of your data science life cycle so this is where you properly comprehend your data set this is where you
understand the structure of the dataset you understand the correlation between all of the columns you know the
correlation between the dependent variable and the independent variable so by manipulating the data set and
visualizing the structure of the data set is where you understand all the patterns in the data set and you get
insights from the data set right so next up we have to build a
histogram for the tenure column so again it'll be your similar operation
plt.hist and i'd have to build a histogram for the tenure columns will be customer
shown then tenure and i'd have to set the number of bins to be equal to 30
and i'd have to set the color to be equal to green so i'll just type in
color equals green over here
so this is our histogram and this gives us the distribution of the tenure of the
customers so um yeah so if you look at it closely so
this is basically the count over here right so there are um yep so there are around
800 odd customers whose tenure is not even one month so they are churning out
before they even complete one month and again there's a huge pico here so there are around more than 600 customers whose
tenure is uh 17 months or more than 70 months and then rest is pretty much the
same right so the average customer yeah so
this is the normal range of the customer so it's between 200 to 400 and the average tenure of the customer you can
say would be somewhere between 20 months to 50 months or 60 months right and this is where you have the peak so you have
the peak at the starting and you have the peak at the ending again let's go ahead and add the title
so i'll be just plt dot title over here
and the title of the plot needs to be equal to distribution of tenure i'll do that
all right so i have created this plot and this is the title of the plot which is distribution of tenure
so we've made a bar block we made a histogram now you guys also need to understand the difference between a bar
plot and a histogram so a bar plot is normally used for all of the categorical
columns so whenever you want to understand the distribution of categorical columns that is when you
will go with a bar plot and when you want to understand the distribution of a continuous numerical column that is when
you'll go with a histogram right so um next up we'd have to create a scatter
plot between monthly charges and tenure so tenure is on x-axis and the monthly
charges is on y-axis so plt dot
scatter x-axis would be tenured so customer shown
tenure and then i'll sit in the column for the y-axis this will be customer shown and this
will be equal to monthly charges let me just run this right so this is
what we get over here now let me also set in the labels for this so plt dot
x label and this would be equal to tenure let me type in tenure over here
similarly i'll also set the y label over here
so this will be plt dot y label and this would be equal to monthly charges
right so now we also get the corresponding x and y axis labels after this i'll also go ahead and set
the title so it'll be blt dot title
and this would be monthly charges versus 10 yard
monthly charges versus tenure right so this is our final
scatter plot where we have the x-axis and y-axis labels and this is the title which is monthly charges versus tenure
right and finally we have to also build a box
plot between the tenure column and the contract column so um tenure needs to be on the y axis
and contract needs to be on the x axis
for this i'll just type in customer tune dot box plot
and um so now i'll send this to be equal to
customer shown contract
and after this i have the column to be equal to
customer shown and this needs to be equal to [Music] 10 yar
let's see what is the error over here columns not found so let me actually remove this from over
here and let's see what happens
all right so now we get the result so we had actually given the name of the data frame initially itself so it was
customer churn dot box plot and now all you have to do is assign the
contract on the x-axis so now when i said buy equals to contract what is happening is i'll have one box plot each
for the different levels of the contract column so i have one box plot for the month to
month level i have another box plot for the one year level and another box plot for the two-year level and over here the
y-axis this is being determined by the ten-year column right so this over here zero to seventy this is the tenure of
the customer and what we understand from this box plot over here is so if the
contract of the customer is of two years then most probably the median tenure of the customer is very high
so if the contract of the customer is of two years then his tenure or median tenure would
be around 65 months similarly if the contract of the customer is one year
then the median tenure of the customer would be around 45 months and then if
the contract of the customer is month to month then the median tenure of the customer would be around 15 odd months
all right so um these were all of the examples of visualization now it's
finally time to head on to machine learning right so this was your data pre-processing part
where you had understood the structure of the data you had
learned how to extract individual columns and after that you learned how to visualize the data and get some
interesting insights from the structure of the data we'll start off with our first machine
learning algorithm which would be linear regression over here and uh linear regression as you already know so over
here though a dependent variable would be a numerical column and you're basically trying to understand how does
one variable change with respect to another variable and over here we have to build a simple linear model where our
dependent variable is monthly charges and the independent variable is equal to
tenure right so or in other words we are basically trying to understand how does
monthly charges vary with respect to and your so monthly charges dependent
variable tenure is the independent variable and these are all of the subsets when it
comes to this linear model so we'll start off by dividing the data set into 1730 split
and then we'll build the model on the train set break the values on the test set after that we'd have to find out the
root mean square error and um yeah we'll have to print out that root
mean square error so let me go ahead and import the linear
regression model from sk learn so i'll type in from sk learn
import linear model after this i'll type in from sk learn
dot linear model import i need linear regression
right so these are my two basic libraries so i needed linear model i needed linear regression now i
would also require the train test split so i'll type in from sklearn dot model
selection import train test split right so
the strain test split method would help me to divide my data set into training and testing sets
so now it's time to divide my data into training and testing sets so before that i'd have to
get my target and the features or in other words i have to separate my dependent variable and the
independent variable so monthly charges is the dependent variable
so what i'll do is y equals and i'll extract only
the monthly charges column
and i will store it in a new variable and name that variable to be
equal to y similarly i'll
only extract the tenure column
right so i'm extracting the monthly charges column and i'm storing it into a new object naming the object to be equal
to y similarly i'm extracting only the tenure column and i'm storing that column new x
rn columns customer churn
what seems to be the problem over here monthly charges
let me put it to be capital c over here right
now let me print out the head of these two y dot head
and x dot head right so these are the values from
monthly charges column and these are the values from the tenure column now let me go ahead and
divide these two into training and testing sets so i'll use in train test split
i'll pass in x as the first parameter so um all the features would be uh which
are stored in x go as the first parameter after that i'd have to give in the target labels and the target labels
are which are basically my monthly charges which are stored in y
and then finally i'd have to give in the test size so let me check what was the test size
so the test size was supposed to be 0.70
and then i'll also set a random state so if i want to use these values again i can just set the random state to be
equal to the same value which i'm giving over here this is smallest over here right so this
test size 0.70 basically means that 30 of the records would uh go into the
testing set oh this has to be 0.30 sorry for that yeah so
30 of the records would go into the test set and seventy percent the rest seventy percent of the records would go into the
training set now i'll be getting four results over here and those four results are extreme
x extreme y train next test and widest these are actually the labels which we conventionally use i'll explain what
these are exactly extreme y train
and then we have um systems this would actually be x test first extreme
extras y train and y test
so over here x strain represents all of of the you know um all of those
values of your features which are present in the training set
x test represents all of the features which are present in the test set
y train represents all of the dependent values which are present in
the train set and y test represents all of the dependent values which are present in the test set
and whenever we are building a model we'll build that model on top of the train set right so we'll build the model
on top of extreme and y train let me also show you the shape of all of these
so like strain dot shape let me do the same for the rest
extreme dot sheep i'll make this to be y train i'll make this to be
x test and i'll make this to be whitest
right so um x strain y train so the training set has um
these many records and the testing set has these many records over here right so these are all of the features which
are present in the training set and these are all of the features which are
present in the so these are all the features of your dependent variables and these are all the features of the independent
variables and these are all of the um target values when it comes to the test
set and these are all of the target values when it comes to the of you when it comes to your dependent variables
all right now that we have extreme y tree x test and y beast
let's go ahead and build the model on top of the training data
now i will go ahead and create and so normally your training data would be
bigger because um so let's say your splits are either 70 30 65 30 or 80 20
because the more data you give for training that is better but then again you can't give out your entire data for
the training set right so the purpose of training your model is to make sure that
your model learns the underlying patterns of that data and once the learning is done you'd have
to also test how well the learning is done right and to test you'd also need a
sample space for that test set so or consider the simple case so let's say you're giving an exam
and but for that exam let's see if you got 100 exercises so your syllabus comprised
of all of the 100 exercises and you'd have to learn all of those 100 exercises but when it comes to your test it will
have only 10 exercises from all of those 100 exercises right so the training needs to be done but
then again the test space it needs to be completely new which is not learned by
the model or you know during the training phase right that is why the training set has to be completely
different in the test it has to be completely different and this the division of training and testing set is done to make sure that
overfitting doesn't happen and when overfitting happens the problem is this model will perform well on this
particular data set but when a new data set comes in it'll miserably feel right so this is the reason why we
divide the data into training and testing set right so now let me go ahead and create
an instance of the linear regression model and i'll name that to be regressive
so i've created an instance of linear regression over here and i'll go ahead and
fit the model on top of the training set so it'll be
xtreme and y train
right so i fit the model on top of the training set now it's time to break the values
so it'll be regressor dot predict and i'll be predicting the values on top of the x test
and i will store this in let's say y print
now i've fit the model on top of the training set and i've also predicted the values on top of the test set now i'd
have to know how well the prediction has been done and for this when it comes to linear regression we have something
known as the root mean square error so the lower the value of root mean square error the better your model
and uh again we have an inbuilt method to calculate the root mean square error so i just have to
import sklearn dot metrics and from sklearn dot metrics i'd be
importing square error now after this so mean squared error
what we actually want is root mean squared error so i would need the np dot square root
and let me use the mean squared error and this takes in two parameters first
parameter comprised of the actual values which are present in whitest and second parameter are the predicted
values which are present in white red so i will
cut this and let me use this to be
in this over here right so we get a root mean squared error value of 29.39
right so now let's see if we build some other model with some other
independent variables now we'll go ahead and build the model and we'll also predict the values now after
breaking the values we'll also have to calculate mean square error so this root mean square error is actually relative
so let's see if there is some other model let's say model 2 and the root mean square error of that model 2 is
let's say 39 then this model would be better in the second model similarly if there's let's
say model 3 whose root mean square error is 19 then that model 3 would be better
than this model which you've built over here so here we are predicting the monthly charges values that is exactly
right so let me actually show you that so let's see i'll put in y print and
let's say i'll have a glance for the first five values right so these are the monthly charges predicted
let me also show you y test
five right so um these are the actual values
and these are the predicted values over here right so this is not exactly dependent
on the churn of the customer so what we're doing is we are building an entire data science life
cycle process so over here we are trying to understand the relationship between
the tenure of the customer and the monthly charges of the customer right
so here what we're basically trying to understand is let's see if the tenure of the customer is at around 10 months what
would be his monthly charges again if the tenure of the customer is 30 months what would be his monthly charges
similarly if the tenure of the customer is 70 months then what would be his monthly charges so this is what we are trying to understand over here
right so this time we have to build a logistic regression model where dependent
readable is shown and uh independent variables are tenure and monthly charges
again i do the same thing let me actually copy these two
so this is what we did over here radio right so this is where we went ahead and
predicted the values didn't we right so i have divided my data set into training
and testing set and over here i am fitting the model only on the train set
right so training is happening on the training side or the model is learning
from the train set and we are predicting the values on the test set so this model
this linear regression model has not yet seen all of the records present in the test
set it has only learnt from the values which are present in the training set
so um we'll go ahead and build the linear regression model now
customer shown let me also put in y i'll do the same thing
no and the logic regression model our independent variable is monthly charges
let me put monthly charges over here and the
logistic regression sorry the dependent variable is shown
so i have extracted uh or i have uh got my features and my target over here so
features are basically my monthly charges and my target is present in the churn column and i'd want to understand
if the customer would churn or not on the basis of the monthly charges of the customer
right so i've done this and the rest of the process would be the same overview
i'll go ahead and divide this data frame into train and test right so this is 65 35 ratio this time
so i'll say to be 35 so this time 34 35 of the records would be present in the
test set and the rest 65 percent of the records would be present in the train set and i am storing all of those into
extreme textures y train and white test right after this
i'd have to import the logistic regression model so from
sklearn dot linear model i'd have to import
the logistic regression model and i'd have to create an instance of this so i'll name this to be equal to log
model all right so i have created an instance of this and i'll go ahead and fit the
model on top of the training set with the entire process when it comes to implementing this is pretty much the
same right so python makes it extremely easy the sk learn library makes it extremely easy
all you have to do is take in the data find out your independent variables and your dependent variable and then go
ahead and divide those uh target and features into training and testing sit
build the model on top of the train set and then break the values on top of the test set and then you will find out the uh
metrics so for classification it's confusion matrix and your normal accuracy score
and for linear regression it's it could be either root mean square error mean square error or moving average zero
so log model dot fit and i will fit this model on top of the training cell again
so x train and y train
right so i have with the model yes we can also have multiple
independent variables so again so if we have a single independent variable then that's uh you
know that's a simple model so it comes to simple linear regression uh we have a single independent variable when it
comes to multiple linear regression you'll have a multiple independent variables right so this basically means that we
are trying to understand how does our dependent variable change with respect to multiple independent variables over
there let's again consider this equation so linear equation equation is based on
this let me actually open um notepad over here
right so y equals
let's say um x1 plus x2 plus x3 plus x4 so what
happens in a simple linear regression is you just have one independent variable which would be x1 what happens in
multiple linear regression is you have multiple independent variables which are x 2 x 3 x 4 and so on right and you're
trying to understand how does y vary with respect to all of these independent variables
that's pretty much it
right so let's proceed with this we have built the model on top of the training set now let's go ahead and uh
predict the values on top of the test set so it'll be log model dot predict
so here we change the value of x and um no we are not changing the value of x
we have multiple x values over here right so this becomes m x one plus uh
you know m2 x2 plus m3 x3 plus m4 x4 and so on
you have multiple independent variables and you are trying to understand how
does y vary with those multiple independent variables
so log model.predict and i want to predict
my values on top of the test set and i'll store the same again
white red right
so we have um predicted the values now right so when it comes to a classification model we
can use the confusion metrics right so let me import the confusion metrics so from
sklearn dot metrics i will import
the confusion metrics also the accuracy score
now let me find out both of this and i'll pass in the actual values and the predicted values
actual values are present in whitest and predicted values are present in white grid
similarly accuracy score i'll do the same thing white is then the white bread
right so this is our confusion matrix and this is the accuracy right so to get the accuracy what you'll basically do is
you'll divide the left diagonal with all of the values so left diagonal represents all of your correctly
predicted classifications so this comprises of all of your true positives right so this part over here
this is all of your true positives and this is all of your true negatives right so when you divide
this with the entire sample space that is when you will get the accuracy so let me do that so that'll be one eight
one five divided by one eight one five plus six
five one and i get the same accuracy which is 73.6
right so i get an accuracy of 73 for the model which i've built
now i have to build a multiple logic regression model for the dependent variable is the same and the independent
variables are tenure and monthly charges so now we have two independent variables
so i'll make the changes here itself right so character the question which you're asking what if we had multiple
independent variables right so over here we have two independent variables so this time the independent variables are
monthly charges and tenure and i am trying to understand whether the customer would churn or not on the basis
of these two columns which are monthly charges and tenure right so x
now would comprise of these features and y is the same and um
the ratio is 80 20. so i'll change the test size to be equal
to 20 over here i'll go ahead and fit the model that's the same again i'll trick the values is
the same right so i've built the model i predicted the values the only difference which i made over here is i have two
independent variables this time instead of a single independent variable right
writing the values after that i'll import confusion matrix and accuracy score
right now over here again i'm calculating the confusion matrix and this and this time
i get an accuracy of 77.50 right so this time it'll be
935 plus 157 divided by
935 plus 157 plus 106
plus 211 right so we get an accuracy of 77.50
so this left diagonal are all of the values which have been correctly classified and uh the sprite diagonal
represents all of those values which have been mixed which have been misclassified
so this was um logistic regression and then we've got two more
machine learning algorithms left which are decision tree and random forest
so let's spell these two right so for decision tree dependent variable is the same which is churn and
independent variable is tenure right so let me manually do this
next as customer shown and the independent variable is tenure
let me also extract the dependent variable so the dependent variable would be churn
you have to make sure that you bring the spellings correct and also you have to take care of the small caps and the capital letters over
here right now i will go ahead and
also import the decision tree classifier so from sk learn
dot tree
i'll be importing the decision tree classifier now i'll go ahead and divide this data
frame into train and test this will be the same process let me copy this
let me paste it over here so the split s8020 which is what we are
doing over here right so this is our feature this is our
target labels and we have divided the data set into training and testing set now let me go ahead and create an
instance of this decision tree classifier i'll name this instance to be
let's say my tree right and i'll go ahead and
put the model on top of the training set so my tree dot fit
this two parameters which are extreme and y train
i fit the model now it's time to break the values my tree dot predict and i'll be
predicting on top of the x test
now i'll import the metrics
right so let me calculate the confusion matrix and also the accuracy score
confusion metrics so i'll actually have to store this in a object first again
i'll be storing this into y print let me run the cell again
and this again takes in two parameters first parameter is all of the actual values which are present in whitest
and all of the predicted values which are present in white red so this is our confusion matrix now let
me calculate the accuracy which would be 965
plus 87 divided by
965 plus 87 plus 281 plus 76
right so for this decision tree model we get an accuracy of 74 percent right so
the process is entirely the same guys right what we are doing is again at the risk of being redundant so
what we are basically doing is finding out our features and target variable after that we are dividing the features
and target into training and testing split and then we'll go ahead and build the model on top of the train data and
then we'll break the values on top of the test setup once the prediction is done we'll calculate the accuracy
uh to find out how well our model has learned right so the in the entire data science
life cycle our most important part is the data processing part right so
because to the model building the
so it depends on your problem statement other thing right so let's see if your
dependence on your prop it depends on your problem statement and what exactly you're trying to find out
so let's say if your dependent variable is a continuous uh you know if it's a continuous variable if it's a continuous
numerical then you'll go with linear regression and if you want uh you know if you if
you have multiple categories right so if you have multiple categories then you'll go with either decision tree
or random forest so when it comes to logistic regression it is a binary classifier so let's say if you have just
uh two or you know two labels in your dependent variable like this case over here right so this is where you will go
with holistic regression but then again if you have multiple categories or if it's a multi-classification problem then
you'll most probably go with decision tree and random forest and again when you compare decision tree and random forest for random forest is always
better than decision tree because random forest is an ensemble model
so again through your course you would have learned that a random forest is nothing
but an ensemble of decision trees and the accuracy or the prediction given by
a random forest is better than a decision tree so that you can actually take for granted right so whatever
accuracy a decision tree gives the accuracy given by a random forest is better so just to verify that let me
actually go ahead and build a random forest model on this same data over here
right so we'll take the same x and y values
no so uh again a problem statement was different so linear regression we use to
understand how does monthly charges vary with tenure but the other algorithms
which we've built that was to understand how does churn vary with other factors
right so over there monthly charges was a numerical column but churn is a categorical column so we
can compare logistic regression and decision tree right so let's say if we compare logistic
regression and decision tree right so logistic regression gives us an
accuracy of 77 percent
yes yes right so logistic regression uh till now yes has given us the best accuracy right
right so now finally we'll also go ahead and build an ensemble model which is random
forest so let's actually compare the accuracy given by this decision tree and the random forest
so from sk learn dot
ensemble i'll import the
random forest classifier and i'll create an instance of this maybe i'll name this
as rf and i'll just create an instance
right and i'll go ahead and uh with the model on top of xtrene and y train
extreme and y tree knife with the model
now it's finally time to break the value so rf.predict
and i am predicting the values on top of the x test
let me build the confusion metrics over here
all right now let me check the accuracy so i'll just type in accuracy score and
i'll bison pass in y test and white red whitest
white red so you get an accuracy of 74.66
and it's 74.66 right so there's not much of a difference when you compare decision tree and random forest over
here right so we've got the same values right but normally in general if you're
building a random forest model so you'll either get a better accuracy or you'll get the same accuracy
right so this is your normal entire data science life cycle you'll start off with the data
pre-processing part data exploration part where you will understand the structure of the data set you will
visualize the data set and understand whatever is happening underneath it right after that
once you understand and comprehend your data properly that is when you'll go ahead and build your model
again when it comes to building your model you will sort of follow the same procedure we'll find out your
independent variables and the dependent variable then you'll go ahead and divide those two into your training and testing
set we'll build the model on top of the training set now let's actually start off by having a glance at the job trends
of different programming languages so here we are comparing python r angular
and c and it's very obvious that python is the most preferred language across various industries so you see this blue
color line over here so this blue colored line is for the python programming language and if you closely
observe this blue colored line you will observe that the popularity of python has been steadily increasing over the
years so now that we know how popular python is let's head on to our interview questions
right so this is our first question what are keywords in python so you can consider these keywords to be special
reserved words which exist for a specific purpose now you cannot use a keyword name as a variable name or an
identifier so these are some of the keywords which exist in python such as true false not continue and so on and in
total there are 33 keywords in python 3.7 now you also need to keep in mind
that these keywords are case sensitive that is if you look at the keyword true
over here then you see that t needs to be capital so our next question is what are literals in python and then we'd
have to explain about the different types of literals so literals are the constants used in python or in other
words this is the data which is stored in a variable and there are four types of literals in python so we have string
literals numeric literals boolean literals and special literals so let's look at string literals so you
can create string literals by just enclosing the text within codes so here we have created two string literals john
and james so we see that john is enclosed double quotes and james is enclosed within single quote so this is
how you can create string literals next up we have numeric literals so numeric literals comprise of all of your
digits now if your numeric literal doesn't contain any decimal then it is of the integer type and if your integer
is too long then it would be of the long type and if your literal consists of a decimal point then it would be a float
and finally we have a complex number which consists of a real part and an imaginary part
going ahead we have boolean literals so these boolean literals comprise of just true and false values they are generally
used when we are dealing with some condition whose output is either true or false
now we'll head on to special literal so python consists of this special literal called as none and it is used to specify
a field that is not created here in this example i have assigned none to the
variable while do so this variable would basically be empty so this is our third question what is our dictionary in
python and we also have to create a dictionary where the key is fruit name and there are four fruit names as values
so a dictionary is an unordered collection of elements and these elements in a dictionary are stored as
key value pairs for example here we have a dictionary with the name my dictionary
and we have three key value pairs so here our first key is one and the value
for this key is john second key is two and the value for this key is bob and then we have the final key which is
three and the value for this is alice right now let's run to jupiter notebook and create our own dictionary where the
key is fruit name and the values would be four fruit names so i'll name the dictionary as
my dictionary and we can create a dictionary with the help of these curly braces over here so i'll given the key
name which would be fruit name and after this i'd have to given values
of four fruit names so let's say my first fruit is apple and then the second
fruit is mango third fruit would be orange and the
fourth fruit would be guava now all i have to do is hit on run and
then let me print this out so i'll just type in my dictionary over here right so we have created a dictionary with the
name my dictionary where the key is fruit name and the values are apple mango orange and guava and if you want
to extract the individual key and individual values this is how we can do it now i'll type in the name of the
dictionary which is my dictionary i'll put in dot and then i'll just type in keys i'll click on run and we see that
the key for this dictionary is fruit name similarly if i want all of the values i just have to type in values
over here now let me click on run so for this dictionary the values are apple mango
orange and guava so our next question what are classes and objects in python
so simply put you can consider a class to be a blueprint and objects to be real-world entities which are defined
and created from classes for example over here you can see the actual
blueprint of a house now this blueprint can be used for the rapid creation of
unlimited number of copies so these copies of the blueprint are nothing but
your objects and here we have created three houses or in other words three
objects from the original blueprint which is our class so i'm repeating it so our class is nothing but a blueprint
and from this blueprint we'll be creating a set of objects which are our real-world entities so over here this
house number one house number two and house number three are real world entities which are nothing but objects
created from this class next we have to create a simple class with the name human which would give out the name and
age of the person so let's do this right so to create a class i'd have to use the
keyword class and then i will given the name of the class which would be human now inside this i will create two
variables so the first variable would be name and initially i'll just assign none
to it and my second variable would be h again i'll assign none to it so we have created our variables now we'd have to
get the value of name and the value of age from the user so for this i'd have
to create some definitions or methods and to create a definition i'll use def
after this i will given the name of the method which would be get name and inside this i will pass in self
right so now over here i'll just use the print function and type in
enter your name and after this i will get the name
and the self.name so basically self.name basically means that whatever value the
user enters it would be stored in this name variable of the object right
and i'll just type in input over here so this input function is used so that we can get a value from the keyboard right
so this is how we can get the name of the person now similarly let's go ahead and get the age of the person so i'll
type in def and i'll name this method to be get age again i'll pass in self
inside this right this time i'll use print and i'd
have to enter the age so enter your h
and then i'll store this in self dot age equals input again
right so we have created two get methods where we'll be getting the name and the age of the user now after this we'd have
to print out the name in the age so it'll be def and i'll create the method to be put
name again this will be self and i'll just print out the user's name
so your name is self dot
name and then similarly i'll create another method which would be put
each and i'll pass in self inside this so for this it would be print of
erhs let me again put in double quotes over here right
so your hs it would be self dot age
so we have created our class where we have two variables name and h and i've created four methods and out of those
from those two methods i'll be getting the name and age of the person and the rest of the two methods would help me to
print the name and age of the person right i'll click on run so we have created this class now once
we create our class which is basically our blueprint we'd have to create the objects from this class so let's say i
create an object and name that object to be person 1 now this would be our first
instance and i just have to call in human so i'm creating a person instance
of the human class now from this person object i will invoke the get name and get age methods
so person one dot get name let me click on run i'd have to enter
the name of the person let's say the name of the person is sam right so now it's time to get the age of
the person so i'll type in person one dot get h
i'll click on run and let's say the age of the person is 28 so now i have successfully feeded in
the name of the person and the age of the person now it's time to print out both of those so it'll be person one dot
put h and person one dot put name
so person one dot put name right
so your age is 28 and your name is sam right so we have successfully created our class which would print out the name
of the person in the age of the person right so next question what do you understand by the init method in python
and after that we have to give an example of it so you can just consider the init method to be sort of constructed in python so
it is a special method in a python class which is used to initialize the variables so now that we've understood
what init method is and what it is used for let's go ahead and work with this edit method so now here what i'm going
to do is create a student class with the init method in it so let me do that
class student and over here i'll just create the
init method and these are the parameters of this init method self so and after this it will take in the
name of the person and after name it will take in the age of the person and after this it will take in the branch of
the person right now what i have to do is just store these values inside the original
variables so that'll be self dot name equals name and then our next variable
is h so self.h equals h and then we have the final variable which is branch so it
would be self dot branch equals branch so we have created our
init method now after this wait so we actually have to put in d e f
over here because this is actually a method right so we have created our init method which is basically a constructor
and going ahead we'll just create another method which would help us to print all of these values
tiff print student
and l taken self and all i do over here is print in all
of these values so print off name
would be self dot name after this we have
h so let me change this to be age over here and this would be self dot age
after this we'll have to print in the branch so let me just
put in branch over here and this would be self dot branch right so we have created the
student class which has the constructor i'll click on run now let me create an object of the
student class i'll name the object to be student one
and let me go ahead and create an instance of this now since we have this
constructor over here so i can go ahead and initialize this student object here itself so i'll given the name of the
student so let's say the name of the student is bob after this the age of the student is 12 and then which branch is
he studying so let's see this guy is studying engineering let me just put in
engineering over here run now student one dot i will call in the print
student method over here right so we have successfully created this instance student one right so what
do you understand by inheritance in python and then we'd have to give an example of it
so inheritance refers to the property of one class acquiring the properties of
another class for example let's say you have inherited your features or properties from your parents so if you
see all this family tree over here you can understand that traits such as hair color and poor eyesight are passed from
one generation to the next generation so over here this is generation one generation two and grandparents so your
parents are inheriting their traits or their features from their grandparents and you are inheriting your traits from
your parents now let's go ahead to jupiter notebook and work with an example of inheritance so here what we
are doing is we have a base class with the name fruit and this base class is being inherited by another class citrus
now this is our base class fruit which has a constructor and this constructor
just prints out i am a fruit now after this what we are doing is we are
creating another class with the name citrus and this class inherits from the
fruit class right so if a class has to inherit another class in python we'll just give the name of the base class as
a parenthesis inside our new class now again inside the citrus class we have
created another constructor and inside the constructor of the citrus class i am
using the super method so with the help of super method i can invoke the variables and functions from my super
class right so over here i want the init method for my super class so i'll just use the super method and i'm invoking
the init method from this fruit class now apart from this edit method from the fruit class i would also print something
else so over here i am also printing i'm citrus over here right and i'll create
an instance of this class citrus and i'll store it as lemon now the result is
i'm a fruit i'm citrus so this value i'm a fruit is coming from the super class
and this value i'm citrus is coming from our new class or the child class so this
is how we can do single level inheritance in python so next so what is
numpy and how can you create a basic 1d and 2d numpy array well numpy is the
most widely used python library for linear algebra and it is used for performing mathematical and logical
operations on arrays and to import the numpy library in python you just have to
use the command import numpy so again let's head to jupyter notebook and create a 1d numpy array and a 2d numpy
array so i'll start off by typing import numpy as np
after this i'll create my 1d numpy array so a equals np dot array
now i will given a list of values so this is my 1d array e
and then let me just print it out so this is my 1d array which comprise of the values 1 2 and 3. now i'll go ahead
and create a 2d array with the name b so again the syntax would be the same np dot array
so it'll basically comprise of a list of lists so the first list would comprise of one
two and three and the second list would comprise of four five and six
let me print this out right so this is our 2d array which comprises of one two three four five and
six so this time we'd have to initialize a phi cross five numpy array comprising
of all the zeros so there's a five cross five numpy that is there need to be five rows five columns and all of the values
need to be zero and to initialize an array with all zeros we can just use np dot zeros method from the numpy library
let me just type in import numpy as np
and inside e i'll just state and b dot
zeros and i'd have to given the dimensions of this
array so the dimensions of this array are 5 cross 5 let me just print out a so we have
successfully created our phi cross 5 numpy array where all of the values are just zeros now let's say we have two
numpy arrays like this so this is our first numpy array this is our second numpy first numpy array comprise of one
two and three second number i comprise of four five and six now i'd have to add the individual elements so four plus one
needs to become five five plus two needs to become seven and six plus three needs to become 9.
again our first step would be very simple i'd have to load the numpy library import numpy as np i will go
ahead and create my first numpy array a equals and b dot array
and the values are one two and three similarly i create my second numpy array
which is b i'll change this variable to be equal to b and the values are four
five and six now to add the individual elements i'd
have to use the np dot sum method now inside this i'd have to give in my first
parameter so my first parameter would be the numpy arrays which i'd have to add so i want to add a
and b and i will set the axis to be equal to 0. so when i set the axis value to be
equal to 0 this would individually add the elements so this will do four plus one five plus two and six plus three
right and this is what we have four plus one is five five plus two is seven and six plus three is nine now let me
actually change the axis value to be one and let's see what do we get right so when i change the axis value to
be 1 then the addition happens across the row so when you do 3 plus 2 plus 1
you get 6 and when you do 6 plus 4 plus 5 you get 15. so now we have to get the n largest values from a numpy array so
this is our numpy array over here and this comprise of one of three four five six seven elements 12 43 254 5 and 68
and i'd have to get the first two largest values which over here are 100 and 68. now let's go to jupyter notebook
and let's see how can we do this right so again we'll start by importing the numpy array import numpy as np and i'll
create this array x is equal to np dot array and i'll given all of these values now to get the indices of values which
are arranged in ascending order we can use the np dot arg sort function
now what i'll do is i'll actually insert a cell below and i'll go ahead i'll do control x i'll
do control v so we have successfully created our numpy array let me just print in x over
here so this is our numpy rate now what i'll do is i'll just copy this and p dot
r sort of x and i will print it over here and let's see what do we get so what we get over here are index values
so 0 1 2. right 0 1 2 this is our lowest value and then we have 5 so element at
index number 5 0 1 2 3 4 5 right 2
5 and then we have 0 which is 12 and then we have 43 right so we basically
have the indices of the values arranged in ascending order so 2 5 12 43 54 68
and 100 so this is how it goes now if i want the indices of the first two highest values then i'll just put in
minus two colon over here and i have six and three right zero one two three four
five six so 68 is the second highest value and then we have three zero one two three right so 100 is the first
highest value now what i want to do is i want to arrange this in descending order so to arrange this in descending order
again i'll put in braces over here i'll put double colon and i'll put in -1 over
here and i have sorted the indices in descending order now if i take all of this
i'll cut this and i will paste this inside of x i'll click on run and this
is how i get the first two highest values from this numpy array so 168 are
the two highest values from this numpy array so now we have to give some examples for creating a data frame from
list and dictionary so this is a very common and easy question which is asked in most of the python interviews right
so first we'd have to go ahead and create a list and we'd have to convert that less into a data frame similarly
we'd have to create a simple dictionary and convert that dictionary into a data frame
so i'll type in import pandas as pd so i'd have to start up by importing the
pandas library now i will go ahead and create a list so i'll name this list to
be equal to l1 so l1 equals 1 comma
2 comma 3 comma 4 comma 5 so we have created our list now to convert this
list into a data frame all i have to do is use pd dot data frame function
so here we need to keep in mind that d is capital right pd dot data frame and i will pass
in l1 inside this and i will store this in let's say data
1 and i'll just print out data 1 over here so we have successfully created a data
frame from a list where the list values are one two three four and five now similarly we will create a dictionary
and create a data frame out of the dictionary so i will name this dictionary to be dt1
and the key is fruit name
and the values are apple
mango and let's say orange
after this we'd have to create our second key value pair so our second key value pair would be
count and the values would be let's say 12 24
and 36 right so we have created this dictionary now again to convert this dictionary
into a data frame we'd have to use pd dot data frame and i will pass in dt1 inside
this right so we have created this data frame where our first column is fruit name and
the second column is count and fruit name comprised of apple mango and orange and the count of the fruit just 12 24
and 36 so now we have this iris data set which comprises of all of these columns so we have separate length sepal width
petal length petal width and species now out of this we'd have to extract some
specified rows based on a condition so you'd have to extract only those records
where the sepal length value is greater than 5 and the sepal width value is
greater than 3. so i'll start off by loading the pandas library import pandas
as pd and after this to load a csv file i'd have to use the
pd.read csv function and i'll given the name of the file so
the name of the file would be iris.csv and i'll just store this in a new object
and name that object to be equal to iris now let me have a glance at the head of this data set iris dot head
so this will give me a list of the first few records right separate sepal with petal length petal width and species now
let's see how can we extract only those records where sepal length is greater than phi and sepal word is greater than
three right so i'll start off by giving the name of the data frame and i'll put
in these braces over here and i'll give in the first condition so the first condition is
again iris and from this i'd have to select only those sepal
length columns where it is greater than five so sepal dot
alien cheery h this value needs to be greater than five so i've given my first
condition after this i'll go ahead and give my second condition and this time i'd have to extract only those records
where sepal dot width let me type this out and this needs to
be greater than three now let me also put this inside these
braces over here let me cut this and let me paste it over here i'll click on run right so this is our
list of values where sepal length is greater than 5 and sepal width is greater than 3. if i scroll down you'll
see only those values where sepal length is greater than 5 when sepal width is greater than 3. so what we do is we're
given the first condition where sepal length is greater than 5 after that we'll use the and operator and then we
get the second condition which is sepal width is greater than 3. right so after this we again have this iris data frame
over here and we'd have to introduce nan values or null values in the first 10
rows of sepal width column and petal width columns so if you see this original data frame over here you see
that these two columns comprise of some values but then again we'd have to fill the first 10 rows of these two columns
with nan values so i'll start off by loading the required packages which would be pandars
and numpy so input pandas as pd and import numpy as np
after this i'll load the iris data set so iris equal to
pd dot read csv and i will
pass in the name of the data set which is iris dot csv
let me again have a glance at the head of this data set so iris.head
all right so now to introduce any values i can use the np.nan method so now what i'll do is
i'll actually create a duplicate copy of this object so iris one
and i will store this data frame into iris one
now i'll type in iris dot i lock and i
would want to make changes in the first 10 rows and the second column
and the second column right so first and rows and the second column so the index of the second column would be one and
what i'll do is i will introduce all of the nan values so np dot nan
let me put an equal to over here now let me have a glance at the head of this modified data set
so iris one dot head right so we see that this is our
original data frame and with the help of np dot nan i have introduced any values
from actually the first row so let me actually change this to be zero over here i'll click on run
so now i have any values for the first 10 records similarly i'll also go ahead and introduce any values in the petal
length column so over here i just have to change the
index of the column which would be two
let me have a glance at the head iris.head right so now we'd have to get the number
of any n values present in each column of this enhanced data frame so this is our data frame over here which comprise
of these columns so we have h bmi hyp and chl and we see that these three
columns over here comprise of any n values and we'd have to find the count of the nan values present in each of
these columns so i'll start off by loading the pandas data frame i'll type in
import pandas as pd let me just wait till the package is
loaded right so now that we've loaded the package i'd have to load the csv file which is enhanced.csv
and for this i'll be using pd dot read csv function and i'll given the name of the file
which is enhance dot csv and i'll store this in a new
object and name that object to be enhanced now if i want to get the count
of number of nan values this is what i'd have to do enhance dot so i have this
s and a function and after this i will just print it out let's see what do we
get right so we just get a bunch of true or false labels so wherever there is an
nan value present we have a true label so over here in the bmi column the first record this is an n value this again is
an nan value so wherever you see true values it basically represents all those any n values and if i want the sum of
all of these nan values i just have to type in sum and now i click on run
right so you see that each column has no nan values bmi column has nine nan
values hyp column has eight nan values and chl column has 10 nan values
now we'd have to open and read a file in python so let's see how can we do that so i
actually have this file with the name sparta and it is present in my d drive so let me actually copy the path over
here right so this is just the path which i have to copy so first open a file in python i have to
use the open function so i'll just type in f equals open and this takes in two parameters the first parameter is just
the path and after the path i'll given the name of the file which would be sparta dot txt and the second parameter
is the mode which i want to open this file so i would open this file in the read mode so again i'll just given
double quotes and i'll type in r so r basically means that i am opening this file in the read mode and i'm storing
this in this object f now let me go ahead and read this so f dot
read right so this is the sentence which was stored in this file this is para and we
have successfully read the sentence so let's head to the next question so what is the lambda function and we'd
have to create a simple lambda function to add 10 to a given number well a lambda function is an anonymous
function and it can take any number of arguments but it should have only one expression and this is the syntax of a
lambda function so you'll type in lambda and then you'll given all of your arguments after that you'll put in a
colon and then you'll give the expression so let's go ahead to jupyter notebook and create a symbol lambda
function to add 10 to a given number right so let me just type in lambda and
i'll give the name of the variable to be a i'll give a colon and all i have to do is add 10 to whatever variable is sent
into this and i am naming the function to be let's say x so this is how we can
create a simple lambda function now i'll call the function and pass in a
number so let's say i'll pass an 8 now this is returning 18. so all i'm
doing is adding 10 to the number which i'm passing into this now again let's say if i pass 5 into this i'll get 15.
similarly let's say if i pass 100 i'll get 110 so we have successfully
created a lambda function which takes in a parameter and adds 10 to the given parameter so now we'd have to create a
simple line plot like this where x and y axis values range from 0 to 10 and the
title of the plot is y versus x x label as x axis y label is y axis so simple
line plot and we can create this line plot with the help of the matplotlib package so let's quickly here onto
jupiter notebook i'll start off by loading the required packages so i would need the numpy package so i'll type in
import numpy as np and i would also need the matplotlib package so i'll type in from
matplotlib import
pie plot as plt right so now that we've loaded the
required packages let's go ahead and create a data so our x axis and y axis
values range from 0 to 10 so i will name x
and i'll get the values with the help of np dot a range
and since the values go from 0 to 10 0 10 and uh the step factor is one so let
me just print out x over here and let's see what do we get right so these are all of the values which i have over here so zero one two
three four five six seven eight nine right now similarly let me also go ahead and create the y values
it'll be the same thing over here it's just that instead of storing the values in x i'll be storing them in y so i have my x and
y values to be ready all i have to do is use these data points and create the line plot
so p lt dot plot and i'll parson
x comma y and this is my plot over here now i'll
also go ahead and add the labels for x-axis y-axis and i'll also given the title
plt dot x label so the label would be
x-axis similarly pld dot y label and the label would be y axis
for this after this i'd have to given the title so the title would be plt dot
title and x versus y
right so we have created our line plot where the label of x axis is x axis the label of y axis is y axis and the title
of the plot is x versus y so it's as simple as that guys so this is how you can create a simple line plot with the
help of the matplotlib package so now we'd have to create a simple bar plot and we have these fruits over here
represented on the x-axis so we've got apple banana and orange and we've got the cost of the fruits on the y axis so
let me start off by loading the required library from matplotlib
i'll be importing by plot as plt
after this i just have to create my data so i'll be creating a simple dictionary over here and uh
i'll name this dictionary as data i'll put in braces over here and it consists of three fruits which are apple
banana and orange so apple and cost of apple would be
let's say 50 bucks after that we have banana and the cost of banana is 20
of that we have orange and the cost of four and just 30
right so now i'll separate the keys and values from this so let me get the keys
first data dot keys and i'll get the list of this
i'll paste this inside this and let's say i'll store this in an object named
as names now let me get all of the values similarly
values and i'll be getting data dot values
so i have the names i have the values now all i have to do is make a bar plot
and to make a bar plot i'll be using plt dot bar and i'd have to pass in the names as
well as the values all right so we have successfully created a bar plot and on the x axis we
have the names and on the y axis we have the cost next question so what do you understand by a module in python
so when we write everything in a single page it becomes difficult to track and not just this let's say if you want to
make a change a certain place in the project then it would affect the entire project and may prove to be disastrous
and this is where we'll be using the concept of modules so instead of writing one big software and one page you would
have to break it down into parts so a module basically helps us to organize our python code now let's say you want
to write a program to create a calculator now instead of writing all of
the features in the same file you can create separate modules for addition
subtraction multiplication and division now if you want to perform addition you can invoke the addition module similarly
if you want to perform multiplication you can invoke the multiplication module so for every single purpose you can have
a separate module so that your work becomes easier so now we have to randomize the items of a list in place
in python so let's see we have a list which comprise of these elements so let's say the first element is mary and
then we have had a little lamp now i'd have to randomly shuffle all of these
elements inside the list and to randomize the items of a list we can use the shuffle function and the shuffle
function is part of the random library so i'll type in from random
import shuffle so i have loaded the function now let me
go ahead and create the list mary
had a little
lamp right now i will just pass in
this inside the shuffle function now let me print an x
right so this is in place shuffling inside the list right so initially the list was mary had a little lamp or the
sequence of the elements inside this list was mary had a little lamp and after passing this list inside the
shuffle function the elements changed and the sequence now is a lamb mary had little so now we'd have to write a
program to get the length of the string ophthalmology without using the len function
and to get the length of the string we can just use the for loop so what we'll do is we'll start a for loop and it will
iterate through all of the characters in this string and we'll get the count of
the number of characters present in the string so let me name the string so it is o p h d h p l m o l o g y
so let's hope this is actually the spelling of ophthalmology right now let me initialize a counter and set the
value of counter to be equal to zero after this i'll start the for loop so for i
n a what would basically happen is count
equals count plus one and finally i'll print out the value of
count so what is happening over here is initially i's value is zero and it will
loop through the all of the characters of the string which is present in a and
so let's say the loop starts over here initially i's value is zero and it'll enter o now the count increments by one
again it'll head to the next character the count again would increment by one it'll head to the next character and the count would increment by one so till the
end of the string it will keep counting the number of characters present right and we get the results so the
number of characters present and the string is 13. so now we have to replace all the odd numbers in this numpy array
to minus one right so this is our numpy array which comprise of the numbers from zero to nine and we'd have to replace
all of the odd numbers so one would become minus one three would become minus one five would become minus one so
wherever odd numbers are present all of those odd numbers would become -1 let me load the numpy library import
numpy as np after this what i have to do is create my numpy array so
a r equals np dot a range
and it will go from 0 to 10 let me just print out this numpy array
over here this is my numpy array now let me go ahead and replace all of the odd
values with -1 so what i'll do is i will basically divide each element with 2 and see what
is the remainder so arr percentage 2 and if it is equal to 1 so what i'll
do is i will divide 0 with 2 i'll check the reminder similarly i'll divide 1
with 2 and i'll check the remainder i'll divide 2 with 2 and i'll check the remainder so wherever the remainder is
equal to 1 those elements i'll be changing it to equal to minus 1 right so first i'll
divide 0 with 2 and i'll check what is the remainder and since the remainder is not equal to 1 nothing will happen after
this i'll divide 1 with 2 and i'll check the remainder so if the remainder is equal to 1 i'll replace this with minus
1. similarly over here if i divide 3 with 2 the remainder which i'll be getting is 1 and again this value would
be replaced with -1 right so the changes have been done now let me
prime this this was my original array after performing this step over here all
of the odd values have been replaced with minus one one has been replaced with minus one three with minus one five
with minus one seven with minus one and nine with minus one now we'd have to perform an operation so that we get the
common items between two numpy arrays this is our first numpy array this is our second numpy array now let's
actually check the common items so if we look closely at these two arrays we see that two and four are the only two
common items present among these two arrays and i'd want to extract these two
right so we have created our arrays over here this is the first numpy array and i'm storing it in a this is my second
numpy array and i'm storing it in b now to get the common elements i have the np dot intersect 1 d
method so np dot intersect 1d and i just have to pass in the two numpy arrays
inside this as the parameters so a comma b i'll pass in these two i'll click on run right so i've got the common
elements present in these two arrays right so we have a panda series over
here and we'd have to convert each of these elements into title case so mary had a little lamp so we see that all of
this are in small cases now i'd have to convert all of these elements into title case
so let me start off by loading the pandas library import pandas as pd
now i'll create the series pd dot series and i'll pass in the values which
are basically mary had
little lamp right so this is done and i'll store
this in let's say ser
so i have created my series i'll just print it out now right so this is my panda series now i'd have to convert all
of these elements into title case that is m needs to be capital h needs to be capital a l and l needs to be capital
right and as i've already told you we'll be using the map method which helps us to replace or substitute values or all
of the values inside a panda series so scr dot map
and now inside this i'll use a lambda function to convert all of these elements into
title case so let me type in lambda over here x colon
and i just have to convert this into title case so let me just put in title over here
now let me click on run all right so we have successfully converted all of these
elements into title case now let me store it back to cr now let me print ser over here right so
all of these elements have been converted into title case so now we have the same panda series so merely had a
little lamp now i'd have to calculate the number of characters in each word of the series so this is one two three and
four so there are four characters present in the word mary there are three characters present in the word had this
is a single character right so we'd have to find out the total number of characters present in each words or each
of these elements inside this panda series import pandas as pd
let me again create the series ser equals pd dot series and i'll given all
of the elements mary had a
little lamb so now to get the length of each of
these words present in this panda series i'll have to use the map method so scr
dot map and inside this i'll again create a new lambda function lem bda
a colon and since i have to get the length i'll use the length function and i have to get the length of each of
these elements inside a right so we see that the length of the word mary is of
four characters in hat there are three characters a is a single character and in little there are six characters and
in the word lam there are four characters time for next question so again we have this iris data frame
and we have to change the column name sepal length to s underscore length
let me load the package import pandas as pd
and i'll also load the file so pd dot read csv
and the name of the file is ios.csv and i'll store it back into
iris let me have a glance at the head of this data frame so it'll be iris
dot head so we have all of these columns over here and i'd have to change the name of
the sepal dot length column to s length so to rename the columns of a data frame
i have the pandas dot rename method so first i'd have to given the name of
the data frame which is iris and then i will invoke the rename method
now i'd have to given all of the column names which i'd want to change so i'll type in columns over here i'll create a
dictionary and my key would be the name of the column which i'd want to change
so i would want to change the name sepal length to be equal to s underscore
length so it'll be s underscore length so this is how it goes so iris dot rename and the original
column name is sepal.length and i'd have to change it to s underscore length and i'll store it in a new object and name
that object to be equal to iris one now let me just print out the head of this so iris one dot head
so now we have to build a linear regression model on top of this boston data frame where the independent
variable is this rm column over here and the dependent variable is this medv
column over here and the train and test split needs to be equal to 80 20.
so this question is basically related to machine learning with python where we are implementing a linear regression
model on top of this data set to understand how does this medv column
vary with respect to this rm column or in other words medv column is our dependent variable and rm column is our
independent variable and we are trying to understand how does medv change with respect to rm
so let me start off by loading the pandas library import pandas as pd
right now we'll go ahead and also load up our boston dataset so pd dot read
underscore csv helps me do a lot of the data set and the name of the data set is boston.csv and i'm loading this file in
this object boston and then i'll have a glance at the head of this so these are all of the columns which are present in
this data frame so i've got crimson indus cast nox rm and so on and medv is
my target and my feature is rm or in other words mdb is my dependent variable
and rm is my independent variable now i'll separate the feature and the target
all right so pd.dataframe and so from this entire boston data
frame i am selecting only the rm column and i am storing it into the x object
similarly from the entire boston data frame i am selecting only this medv
column and i am storing it into this y object so x would have the feature
values and y would have the target value so now i've extracted the feature and
the target now it's time to divide this data set into training and testing set
so the train test split needs to be 80 20 or in other words 80 percent of all
of the records would be present in the training set and 20 of all of the records would be present in the testing
set and to do this i need the train test split from sklearn dot model selection
so i'll type from scalar dot model selection import train test split and
this method takes in these parameters so first i'd have to pass in the features and then i'd have to pass in the target
so x comma y and then i'd have to given the test size so the test size is 0.20 so this again means that the test set
would comprise 20 records and the train set would compress the 80 percent of the records and the values would be stored
in extreme x test y train and y test so x train would comprise of
all of the training values or all of the training records for the features and
xtest is basically the test set for the features y train is the train set for
the target and why test is the test set for the target so we have our training and testing sets
ready let me click on run over here all right now it's finally time to build
the model on top of the train set so from sklearn.linear model i will import
the linear regression and i'll create an instance of this so i'll name that instance to be regressor and i will fit
this model on top of xtrain and white ring or in other words i am filling the model on top of the train set
right so now that we fit the model it's finally time to predict the values on top of the test set and to break the
values i'll use regressor dot predict and the parameter which i'm passing
inside this is x underscore test and i'll store this in y underscore print
now once you've predicted the values i have to find out the root mean square error
so i'll import metrics from s k learn and this is how i'll get the root mean
squared error so matrix dot mean squared error and this takes in two parameters y
test and y print so y test comprise of all of the actual values and why thread
comprise of all of the predicted values and i will pass these to inside mean
squared error now when i do this i'll get only the mean squared error but i want the root mean squared error so i'll
use np dot square root so i would also have to import the numpy library over here
i'll type in import numpy as np now i'll click on run so now we've
arrived at our final interview question and uh we have to build a decision tree classifier on top of this iris data
frame where the dependent variable is the species column and the independent variables are the rest of the columns so
separate length sepal width petal length and petal width would be the independent variables and your species column is
your dependent variable and the train test split is 70 30. so i'll start by
loading the requisite packages which are numpy and pandas so import numpy as np and import pandas as pd
then after this i'll load my data set so pd dot read underscore csv i'll pass in
the file name rs.csv and i'll store this in the iris object
and we have a glance at the head of this data set so these are all the columns present in this data frame we've got
separate length sepal width petal length petal width and the species column now out of this the species column is our
dependent variable and these four columns the numerical columns are our independent variables
so now i'll go ahead and separate the features and the target variable so these are all of my features these first
four columns so i'll just extract separate sepal with petal length and petal width from this
iris data frame and i'll store that into this x object similarly i'll extract only the species column from the entire
iris data frame and i'll store it into y object so i have my features and the target
ready now it's time to divide this entire data frame into train and test split so i'll have to import train test
split from sklearn.model selection and the stakes in these parameters first
parameter are the features second parameter is the object which comprise of the target label
and the test size is 0.30 so 30 of the records would go into the test set and the rest 70 of the records would go into
the training set and i am storing the results into x train x test y train and y test so x train is the training set
for the features x test is a test set for the features y train is the training set for the target and why test is the
test set for the target now we'll import decision tree classifier from sklearn.tree
so i will go ahead and create an instance of this decision tree classifier and i'll name that instance
to be classifier and i will fit this classifier on top of the training set so
classifier dot fit and i'll pass in x train and y drain inside this so we have
successfully fit the model on top of the train set now we'll go ahead and print
the values on top of the test set so classify dot predict so i'll show the result into y print
after this we'll calculate some metrics so we'll get the confusion metrics and we'll also get the accuracy score
right so this is my confusion matrix and this is the accuracy so the left diagonal which you see in
this confusion matrix all of these are the values which have been predicted or classified correctly
so this first row represents the species of setosa second row there's species of versicolor and the third row the species
of virginica right so you see that all of the species of setosa have been
classified correctly when it comes to versi color 16 of them have been classified correctly and two of them
have been classified incorrectly and when it comes to virginica 13 of them have been classified correctly and two
of them have been classified incorrectly so to get the accuracy we'll have to add 12 plus 16 plus 13 by all of the values
so let me just do that 12 plus 16 plus 13
divided by 12 plus 16 plus 13
plus 2 plus 2. so the accuracy is the same and it comes
out to be 91.11 by understanding what exactly a sentiment analysis then will understand
the need of it for language we'll look at some very interesting applications of sentiment analysis and finally we'll do
twitter sentiment analysis so all of the big companies out there they try to understand the sentiments of their
customers they try to analyze what are the customers talking about how are they seeing it and what do they exactly mean
by it so this is where sentiment analysis comes in so sentiment analysis is basically that particular domain
where you try to understand human emotions with a software and if these human emotions are in written form we
can go ahead and classify these sentiments to be positive negative or neutral and sentiment analysis is also
known as opinion mining because what we are basically doing is trying to figure out the opinion or the attitude of the
customer with respect to a particular product so this is basically sentiment
analysis now we'll go ahead and understand the need of sentiment analysis so today a customer plays a
very big role in the market he's responsible for making or breaking your business and if a company is able to tap
into all of the sentiments of the customer then it could be very beneficial for the company so this is
where a company can take the help of sentiment analysis and obtain useful information which can be used to
determine market strategy improve business kpis generate leads and so on
so this is basically the need of sentiment analysis so now we'll go ahead
and look at some interesting applications of sentiment analysis so sentiment analysis can be used for
review classification now there are a lot of customers who post a lot of reviews but then again how do we know
the sentiment associated behind these reviews this is where we can take the help of sentiment analysis and classify
these reviews to be positive negative or neutral another application of sentiment
analysis is product review mining so let's say there's a company which has a product a now the company wants to know
what are the features which are liked by the customer and what are the features which are disliked by the customer so
again the company can take the help of sentiment analysis and figure out what are the features like by the customer
and what are the features disliked by the customer and depending on that it can go ahead and improve this particular
product so sentiment analysis can also be used during election times let's say
there are two candidates candidate a and candidate b and with the help of sentiment analysis we can understand
which candidate is more popular in that particular area and in the past decade or so there has
been a huge increase in the online activity across the globe so every
single second people make millions of posts and this is where social media
plays a pivotal role now social media is not just any other platform people go on
to social media and express their views they talk about their likes and they talk about their dislikes and this is
where if a company is able to tap into all of these sentiments it can be very useful to it and there are a lot of
social media sites such as twitter facebook and linkedin so today we're going to do a bit of twitter sentiment
analysis right so to do sentiment analysis with twitter we actually need a developer
account so we'll go to developer.twitter.com and over here this is my profile which is already there
i'll click on apps and then go ahead and create a new application so we have this option to
create an app and if you guys want to create a new app you'd have to click on this fill up a few details and you'll
have your new app ready but then again i have already created an app with this name over here sentiment 123 demo now
let me have a glance at the details right so this is my app and it contains these keys and tokens so in our code
we'll have to use these consumer api keys and access token and access token secret so you'd have to note down these
values and then put in inside your code all right now let's go ahead and do some
sentiment analysis so first we need this to epi package which would basically act
as the api with twitter and then with the help of text blob we can understand the sentiment of different tweets so
we'll import these two first is to epi next is text block and then we'll go ahead and give the values of these four
consumer key consumer key secret access token and access token secret so you
have the same values this is the api key api secret key access token and access
token secret and i've given the same values over here after that using twy.org
handler i would have to first given the consumer key and the consumer key secret
and i'll store that in this object auth now again this object contains set
access token now i'll given the values of access token and access token secret
now finally i will send this object inside the twi dot api so this is how we
are basically establishing the connection with twitter so we have given all of these four values and we are
authenticating this api and then finally we can go ahead and give in the hashtag
for which we'd have to find the sentiment so let's say i want to find the sentiment for this word avengers so
using this object api i'll just type in api dot search and it contains the
keyword avengers and i'll store this in the object public tweets now i'll start
a for loop so i will go through all of the tweets which are stored in public
tweets and i'll start off by printing the first tweet and then i'll pass the
tweet dot text as a parameter for this text blob function and i'll store the result in this analysis object now this
analysis object helps me to find out the polarity and the subjectivity of these
tweets it has these two things one is polarity next is subjectivity so first
what we'll do is we'll just check if the sentiment analysis dot sentiment of zero
so basically this is the first element inside this list so if the value inside
this is greater than zero so we are basically checking if polarity is greater than zero then we will just
print that the sentiment of this tweet is positive on the other hand if the
polarity of the sentiment is less than zero then we'll print negative and if it
is not greater than zero if it is not less than zero then it basically means that is equal to zero so we'll just
print that the tweet is neutral now let me go ahead and run this
so these are all of the tweets which contain the keyword avengers so this is
our first tweet we see that the polarity is 0.0 subjectivity 0.0 and it is
neutral next again this is the tweet again polarity 0.0 subjectivity 0.0 and
then again it is neutral you see that for most of these polarity subjectivity are zero and it is neutral over here and
for this case over here polarity is 0.6 if the value of polarity is greater to
plus 1 then it would mean that it is highly positive similarly if the value of polarity is closer to -1 then it
would mean that the sentiment of the tweet is very negative and then what we have over here is subjectivity so
subjectivity basically tells us how subjective or how personal the tweet is
so we see this tweet that i just needed to share with everyone how herds is a truly amazing company and for this
polarity is 0.6 and subjectivity is 0.9 and then again for this statement over
here we see that polarity is 0.375 subjectivity is 4.7 and we see that it is positive and then again for this
statement over here polarity 0.0 subjectivity 0.0 and it is neutral
right guys so this is how we can do sentiment analysis in python so nlp is a
subfield of artificial intelligence where we teach computers how to understand and interpret human spoken
languages or in other words natural language so what in the world is text mining well
simply put extracting information from unstructured textual data is known as
text mining now let's say there's a 500 page thesis on some financial topic and
you come across a sentence which ends with the number 30. now you have absolutely no idea what that number
means it could be the number of days in a month the amount of dollars a stock increased over the past week or the
number of items sold in a day so this number 30 could mean anything and without proper context you wouldn't get
the right information and this is where text mining comes in so with the help of text mining we can give proper context
to the words before and after the number 30 and this would help us to find out more information now let's look at the
need of text mining so today with the advent of social media companies now access to massive behavioral data of
their customers and most of this data is present in the form of unstructured textual data but beneath this textual
data lies an enriching source of information which can help companies to boost their business and this is the
reason why text mining is being used across various industries now text mining can be divided into four
practice areas so we've got information extraction which basically deals with identification and extraction of
relevant facts and relationships from unstructured data then we have document classification and
clustering which aims at grouping and categorizing terms paragraphs or documents using classification and
clustering methods after that we have information retrieval which aims at storage and retrieval of text documents
and then we have nlp which forms the major part of text mining so here we use different computational tasks to analyze
and understand the underlying structure of the text data right now we'll dive into nlp so when
you hear the term natural language processing the first question to pop into your head would be what is a
natural language so any language that is used for communication by humans is known as
natural language so english french chinese all of these are natural languages
now since we are humans we're able to understand these languages but what about a machine how is a machine able to
comprehend all these human spoken languages well this is where nlp comes in so
natural language processing is a sub domain of artificial intelligence where we understand and interpret human
languages using a computer now let's see how is nlp used in text mining
so just think about how much text you see each day email sms web pages the
list is just endless so the help of nlp we can go through all of this text data
and use it for different purposes such as character recognition sentiment analysis and spell checking
right now we'll go ahead and install anaconda into our systems right guys so just a quick info if you are interested
in doing an end-to-end certification in nlp then intellipaat provides the natural language processing training
course so you can check out the course details in the description below so let's continue with the class
so anaconda is basically your free and open source distribution for python and
our programming languages and it is specifically designed to perform data science and machine learning
applications right so these are the four steps to work with anaconda so first we'd have to download the anaconda
installer and then we'll install anaconda then we'd have to open anaconda prompt and update anaconda right now let
me just guide you how we can do this so first we'd have to go to this website anaconda.com distribution download
section and you'd have to download the version for whichever operating system you're using so if you're using a
windows system then you'll download anaconda for windows if you're using mac then you'll download it for mac and if you're using linux then you'll download
it for linux now you've got two versions of python so python 3.7 and python 2.7 and we'll be
downloading the latest version of python which is python 3.7 so once we download this we have the setup wizard over here
so we just have to click on next and it'll take care now once the installation is done we'd have to open up the command prompt so this is what we
get when we open the anaconda prompt now inside this we have to type in conda update anaconda and we'll have the
latest version of anaconda in our system all right now let me just go ahead and show how to do it so i'll just type in
download anaconda i'll click on this link over here anaconda python r distribution
[Music] and over here i'll click on this download
so i've got different versions over here for windows mac and linux and since i'm using a windows system i'll download
anaconda for the windows system so this is the latest version of anaconda python 3.7 i just have to click on download
right so once the download is done i'll get a setup wizard and i'd have to set it up and
i'll go and click on anaconda prompt so this is my anaconda prompt over here so now that
we've successfully installed anaconda into our systems we'll go ahead and work with the os module
right so the os module it provides functionalities to perform operating system dependent operations so these
operations include creating directories creating renaming and removing files and many other tasks and these are the
different methods we've got so we've got os dot rename os dot open os dot list
directory os dot make direct os dot get current working directory and os dot fd open
now to work with the os library we'd have to launch the jupiter notebook so we can either launch the jupiter
notebook through anaconda navigator or we can launch it through the anaconda prompt so anaconda navigator basically
provides you a gui so you can either use this or the anaconda prompt now when you open the anaconda navigator you have
jupyter notebook inside this and all you have to do is click on launch now once you do that you have your jupiter
notebook right in front of you so over here you would have to click on new and open up a new python notebook now once
you do that you have a new page and over there you'll be performing different operations so your first task would be
to import the os library so you'll just type in import os now if you want to have a glance at the current working
directory all you have to do is type in os dot get current working directory and
it'll give you the current working directory and if you want to create a new folder then you'll type in os dot
makers and then you will given the path after that you will given the name of the directory which you want to create
so let's perform this so again i'll just type in anaconda prompt over here
now inside this i'll type in jupyter notepro right so now we see that we've launched
the jupyter notebook over here now i'll click on new and i'll open up a new python 3 notebook
so our first task was to import the os module so i'll type import os and i've
successfully imported this module so as i stated in the ppt the os modulus
basically used to work with different operating system applications so you can create different directories you can
open up new files you can rename files and so on so our first task over here is
to have a glance at our current working directory so i'll type in os dot get cwd
and i'll put in the parenthesis over here right so this is my current working directory c uses intellipath now i want
to make a new directory in my c drive so this would be the command for that so i'll type in os dot make
durs and over here i'd have to given the path so i'll type in c colon double slash and
i'll name the folder as let's say new folder let me click on run
right so now i've successfully created this folder now let me actually go to the c drive and see if this folder exists or not
so this is my c drive over here and i see that we have this folder with the name new folder now we'll go ahead and
perform some more operations so let's say i want to open a file which is present in my system so to do that
i've got this command os dot open and inside this i will given the path of the file and then i'll get the name of the
file of that i also have to give the extension of file right so this is a text file so i'll type in file dot text
and over here this is basically the flag so so over here i'd basically be setting what sort of operation i want to do so
oh underscore rdwr it stands for read and write so i've got different operations so i can open this file in
only either read format or write format or read write format now after that we set in another
parameter over here which is os dot o underscore create so this means that if a file with the name file.txt doesn't
exist then it'll automatically create this new file and then it'll open it up
and then we've got another operation so if i want to have a glance at all of the contents which are present in a folder
then for that the command would be os dot list and i will given the path so over here i
want to have a glance at all of the contents which are present in the d drive so i'll just given b over here so
these are all the contents which are present in the d drive right so now i'd want to open this spata.txt file using the os module so
let me do that so the command was os dot open and
inside this as we saw first we'd have to given the path so let me copy the path over here i'll
click on properties i'll copy all of this and i'll paste it over here you'd have to keep in mind
that you'd have to given double slash over here so the path over here so to separate all of these you'd have
to give in a double slash again you'll give in a double slash over here and then you will given the name of the file
so the name of the file is sparta dot txt after this i'll given the flag over here
which would be os dot o underscore lb read and write
and then i'll given the pipe operator so over here i'll just state if the file doesn't exist then i'll tell the
operating system to create it so os dot create i'll click on one
right so we have successfully opened this file now i'd want to have a glance at all of the contents which are present
in the c drive so i'll type in os dot list directory
and inside this i'd have to give in the path so i'd want to have a glance at all of the contents which are present in the
c drive right so these are all of the folders or all of the contents which are present
inside the c drive then i have a couple more commands over here so this is the command to change the working directory
so over here i am changing my working directory from d drive to my folder so i
just have to given the path for this and this is how i can change the current working directory and then we can also
change the name of a file so let's say if the name of the file was old file.txt then to rename it i'll just given new
file.txt over here so let's perform both of these operations so let me perform both of these operations over here so
i'll type in os dot ch dir and inside this i'll set the working
directory to just c drive c colon double slash
right i have changed the working directory now let me also check the current working directory now
right so now i've changed the working directory to c drive now let me go ahead and rename a file
over here so os dot i'll type in rename so over here this takes in two
parameters first is the path where the file is located and the name of the file
so i'd just rename this file over here spider
right so as we saw earlier the name of the file was spatter.txt
let me also remove this over here let me just put in a single quotation mark
now after this i'd have to rename this so i'll copy this all again and i'll paste it over here
now i'll change this to spark out new i'll click on run right so now we see that we've got a new
file over here so initially it was sparta.txt now we've changed it to spy dot new right so that was the os module
so the os module we saw how can we create new directories and how can we change the names of some files now we'll
go ahead and do some proper file handling in python so the io module is the default module
in python that is used to perform file handling operations and it contains functions that return a file object
called handle and this handle is then used to read from a file or write to a file so this is the command to create a
file object so we'll be using this function from the i o module so open and this has two parameters so this is the
first parameter file and over here we'll given the path of the file or just the name of the file after that we've got
the mode so over here this mode basically specifies the way we want to open a file so we've got these different
modes over here r r plus w and w plus so r basically stands for read-only mode
right so if we open a file in read-only mode then we can't edit it so it's only read-only mode and it starts from the
beginning of the file of that we've got r plus which stands for read and write mode so over here the file pointer again
starts at the beginning of the file and with this we can read the file as well as write something in the file then
we've got w which stands for write only mode and even this the pointer starts at
the beginning of the file and it starts to overwrite the existing file then we've got w plus which allows us to
write and as well as read now this doesn't start from the beginning but it actually starts at the end of the file
right so we can start writing from the end of the file over here so these are the different modes which we can open a
file now these are the different methods from the io module with which we can read from a file so now let's say we've
opened up a file so open and then i'll given the path and i'm opening this in read-only mode now i'll store the file
in this f1 instance over here now if i want to read the entire file i'll just
type in f1 dot read over here so this would give me the entire file over here now instead of reading the entire file
let's say if i want to read only the first line over there then what i'll do is i'll type in readline so i'm storing
this file object in this f1 instance over here of that i'll type in f1.readline and this would just give me
the first line over here so let me perform these two operations right so i'll type in
import io over here let me load this up now i'd have to open
the file so open i'll take the path so i want to open up the same file which is
sparta.txt right now i want to open this in
read-only mode so i'll type in r over here right so i've also given the board now let me click on run
right so i've created an instance of this file now let me go ahead and read the contents of this file so i'll type
in f1 dot read so these are the three lines which are
present in this file this is part this is 300 and this is intellipaa so let me just verify this
i'll open up this file right so these are three lines this is powder this is 300 and this is intellipath
now as you see all of these three lines are separated by slash n over here slash
and denotes a new line over here now instead of reading all of these three lines i want to read only the first line
from this file so the command for this would be os dot read line right so now
let me click on run right so i've just read one line from this entire file now we'll see how to
read a file line by line using for loop so again first we'd have to open up the file and save this file in an instance
so over here i'm saving this in f1 after that i'll start the for loop so over here i'll create a new variable so for
line in f1 and this line stores every line which is present in this file over
here so it'll store the first line and then we are printing the first line now once that is done we'll go back and then
print the second line and it'll go back and then print the third line right so this is what happens now after we print
all of the lines i'm just typing f1 dot close so when i type f1 dot close it'll just clear all of the buffers and close
the file so i'll just type in for line in f1
and over here i want to print f1 right
so let me start by using the for loop so i'll type in full line in f1
and i'd have to print each of the line so i'll type print line
and i'd have to close the buffer so f1 dot close
let me close this now let me click on run right so let me start off by using the
for loop over here so i'll type in for line in f1
so this is f1 and not s1 i'd have to print each of the lines so i'll type in print line and then i'd have to close
the file so i'll type in f1 dot close
right so let me run this right so i've extracted each of these lines with the help of the for loop so
we got this is powder this is 300 and this is intellipal now let's see how can we write something to a file
so to write something to a file we can use the right method so again we'd have to start off by opening the file but
this time we'll be opening this in right mode so over here i'll set mode is equal to w and while writing i also have to
set the encoding type so the encoding of this file is utf-8 and what i'll do is i'll add three new lines over here so
i'll type in this is the first line this is the second line and this is the third line and these three would be added to
this current file now instead of adding one single line let's say if i wanted to add multiple lines over here so for this
what i'd have to do is i'll create a list and inside this list i'll separate these three items with the help of
slashing so as we already know this slash in it denotes a new line right now after that we'll open the file
and over here we'll open this in the mode a plus so a plus stands for the append mode and we'll write this entire
list into the file over here now let's perform these operations right so what i'll do is i'll copy the same command
over here and paste it over here so the file would be the same and over here i'll set the mode to be
equal to w so w stands for right and after this i'd have to set the encoding
so encoding would be equal to utf-8 so i'll type in utf-8 over here and i'll
click on run right so i've successfully opened this file in write mode now i'd have to go ahead and write something
into this so i'll type in f1 dot right over here and let me write something inside this
so let me add the first line over here so the first line would be this is
one i'll click on run then i'll type let's say f1 dot
write and i'll type this as 2 i'll click on
run again then i'll type f1 dot write and i'll add the line this as
three now let me go ahead and open the file so this time i'll open the file in
read-only mode so i'll set this mode to be equal to r and i'll remove the encoding from over
here i'll click on run right now i'd have to type in f1 dot
read right so this is what i have this is one this is two and this is 3 right so i've
successfully added these three elements into my file now as you see over here my file initially had these three lines
over here this is part this is 300 and this is intellipath now when we use the right mode and we entered these three
lines this is one this is two and this is three what it did was it replaced these three lines with this and this
happened because the pointer starts at the beginning of the file and when the pointer starts at the beginning of the
file all that which was there initially that would be replaced so let me go to the file now and see how it looks like
right so i have a single line now this is one this is two and this is three because the earlier thing was replaced
now i'll go ahead and actually create a list over here so i'll name this as
l1 and i'll add some values over here so let's say the first value is a
i'll add a new line after this then the second value is b again i'll add a new line after this and then i'll add a new
value which is c after that i'll add a new line now i'll open this file in append mode so this would be the same
the mode would be a plus and i'd have to give the encoding again so encoding would be utf-8
right so this time i've opened the file in append mode now what i'll do is i will go ahead and add this so f1 dot
right lines and inside this i'll just put in l1
now i'll go ahead and open the file let's see what do we get so i'm opening the file in read mode now
now let me read what we have in this file so now i have successfully added these three characters over here a b and
c so now let me open the file right so this was the first line after that i added a b and c
all right guys now let's see how can we work with word document files so we have this library with the name
python.x and we can use this for creating and updating microsoft word documents so to install this library we
again have to go to anaconda prompt and inside anaconda prompt we'll given this command conda install hyphen c conda
forge python docx right so with the help of this command we'll be installing python docx library so once the
installation is done we'll go to either anaconda prompt or anaconda navigator and then launch the jupyter notebook so
we'll open a new notebook over here new python notebook and we'll type in import docx so here you have to keep in mind
that when importing the library you'd have to type docx and not python docx so you'll type in import docx so once you
import the library now let's see how can we create and update a word document so starting off we'd have to create an
instance of our word document so to create an instance we'll invoke the
document method so we'll type in docx dot document and we'll create an
instance of the word document so i'm naming this instance as document now once we have this instance we can add
all of the content into our word document so i'll type in document dot add heading and with the help of this i
can add a heading to my document right so over here i'm adding the heading this is a zero level heading so here zero
indicates the level of the heading right so once we add the heading now we are going ahead and adding a new paragraph
so here i am typing document.ad paragraph and i'm just writing this is a paragraph and after that if i want to
add a page break so we can use this method document.add page break so we created an instance and with the help of
that instance we added a heading and we also added a paragraph now it's time to save the document so to save the
document we'll type in document.save and inside this will given the name by which we want to save the document so
i'm saying the document as document.docx right so this is how we can create a document now let's see how can we read a
word document so to read a document we'd have to start off by importing this document method from docx and then we'll
use this document method and inside this will pass in the name of the document so we'll pass in document.docx and this is
the file which we had just created earlier and we'll save this in a new instance and name that to be doc so once
we have this instance over here we'll use the for loop and with the help of this for loop we'll print all of the
content inside this document so i'm typing in for para and doc dot paragraphs print para dot text right so
we'll take in each paragraph over here and it will print each paragraph with
the help of this for loop right now let's go to jupyter notebook and actually perform this so i'll start by importing the library which is docx so
i'll type in import docx now i'll go ahead and create an instance of this so
docx dot document and i'll name the instance as
doc so now that i have the instance i can add the content into this so i'll type
in doc dot add heading now let me add the heading so i'll just
say heading 1 over here and then i'll add a couple of paragraphs
so this time dot dot add paragraph and inside this i'll type in p1
and then i'll add another paragraph so i'll type in doc dot add paragraph again and i'll
add p2 inside this after this i'll add a page so i'll type
in doc dot add page break and i'll click on run now after the page
break i'll give another heading so doc dot add heading
and i'll give the heading as heading 2. so all of this is done now it's time to
save this document so i'd have to type in doc dot save
and i'll give the name of the file so i will save this as let's say my doc dot
doc x all right so now i have successfully saved this file now it's time to read
this document which i've just created so i'd have to import document so i'll type
in from docx i'd have to
import document all right so now that i've imported this
so i'll just given the name of the dock which i've just created so my
doc dot dot x and i will store this in a new document
again and i will name this as d1 right so now i have created a new
instance of the document which i had created earlier now i'll use the for loop so for
para in d1 dot paragraphs
and i'll just print this out so print or para dot text so now we have the content
which is present in the document over here heading one para one para two and then we added a page break after that we
have the heading two right so this is how we can work with the dot x module now let's head on to the natural
language toolkit so so nltk is one of the most widely used packages for the purpose of natural
language processing so nltk provides multiple packages to perform different operations such as tokenization pos
tagging named entity recognition and sentiment analysis right so an ltk provides very easy to work with modules
and with these modules all of your work becomes much more organized and much more easier
now again let's see how can we install the nltk package so again we'll have to go to anaconda prompt and we'll give
this command inside anaconda prompt over here so we'd have to type in conda install hyphen c anaconda nltk and this
is how we can install the nltk package right now once we install the lte library we have something known as the
nltk corpora now you must be wondering what exactly is a corpora so before understanding copra let's understand
what is corpus so a corpus is a huge collection of written texts and the
compilation of these corpuses is what is called as a corpora now nltk provides
this huge corpora for multiple purposes so it has got all of these different corpuses pertaining to different domains
and we can use it to perform various nlp tasks right now let's see how can we download this nltk corpora so once we
install nlt kit we'll have to go to jupiter notebook and then type in import nltk and then after that we just have to
type in nltk.download so this would give you a setup wizard now all you have to do is
click on download and this will install all of the corpuses which are present in nltk
so this is how you can import a corpus from an ltk plus this corpus with the title names and we are importing this
corpus so i'll just type in from nltk.corpus import names and this just has a list of
all of different words so to have a glance at all of those words i'll type in names.words
right now let me go to jupyter notebook and just show you how can we do this right now let me start off by importing
an ltk so from nlpk dot corpus
what i want is names so this is basically the name of the corpus which are importing right now
i've imported this corpus now i want to have a glance at the list of the names which are present so i'll just type in
names dot words and i'll click on one so this is the list of the names which is present
inside this corpus
so what will we be doing in this session well the first thing that we'll be doing in the session
is that uh the first thing we'll be doing on in this session is that we'll be taking
a look at the global data for the google 19 that's available it's an open source data so you can use it whenever you want
and however you want to and we'll be building a model that can tell us the number of confirmed cases and fatalities
that are expected to occur the next day and that will be done by analyzing the trend of the data that we have right now
so our model will do all of that for us uh just a quick reminder for those of you who are not comfortable with python
you can stick with me till the end of this this session and i'll guide you through some resources that can help you out
with that also yeah another thing that you need to understand is that we aren't going to be diving deep into the
mathematics of how random forest works and how that works i'll show you the general overview but it doesn't really
matter it matter whether you are very math heavy or technically person the point of this session is to show you
that even if you are not very educated in math or even if you are not very comfortable with math you can still get
around with using machine learning algorithms using data and making sense out of the data that you have
so with that in mind let's take a look at what we have next so let's take a look at the data that
we'll be using now the data as i've already told you is open source so you can use it whenever you want to but
basically we'll be using the global kovid 19 data this data contains information about countries it contains
information about regions it contains information about the population and it gives you a column named target target
basically tells us that the data we have is of either the confirmed cases or the number of fatalities so as you can see
in the screenshot that i have right below me we have cases for afghanistan and we have
certain columns that are having the values of n a n n a n stands for not in number or not
available so the problem is that
the problem is that when you have a data set there are many times when you don't
get to use the uh when you don't get to when you don't get to get the data
that's completely accurate they're going to be some missing values they're going to be some values that are out of order
and not in the correct format and there could be a lot of other things so that would be the problem so if you
want to get this data set there you can get it from kaggle and that will explain to you how there are competitions going
on on kobe 19 this data is available on kaggle right now you can take a look at the kobe 19 competition and you'll get
the data you'll get the problem statements and everything but just the data is enough for you to get started
so what is random forest random forest is the algorithm that we'll be using in this session we'll take a look at why we
are using random first in a bit but first let's understand what is random forest
so random forest is a supervised learning algorithm so for those of you who are unaware supervised learning is a
type of machine learning algorithm in which we have a lot of data and we have
the thing that we want to predict as well as the things that we want to use to make the prediction so to give you an
example if you want to make a prediction about a person's estimated salary the salary would be the
thing that you want to predict and the other things such as the person's age qualification uh the college that they
graduated from the cgpa or gpa that they had when they graduated all of these things when taken
into consideration are the things that we will be feeding our model to get the estimated salary of a person so these
are the kind of things that supervised learning helps us do it helps us firstly train our model on a labeled set of data
and then give it some data and it will predict the data that we want it to predict like the person's age salary or
whatever we want to predict so that's why we do it now random forest as the name suggests is a
is an algorithm that's also called an ensemble method basically instead of using some other
very big vague algorithm it uses decision trees but it uses them in a very uh smart view so that we can train
multiple decision trees and then we can use those multiple decisions trees that have been trained on the data that we
have and then we use that those trained decision trees to make the decision that
we want how does it make the decision let's take a look at that so let's firstly understand why we use
random forest so random forest is used to solve a wide variety of challenges random forest is
used to solve a really a large set of problems and it's mainly because it provides many
many benefits such as no overheating so our model will not be
able to memorize the entire data so overfitting basically means when you try to train a model and it essentially just
memorizes all the mappings so when it gets the training set and some of the
values matches then it will basically what what it will do is that it will
compare the values and then it just get the output which sounds the
most similar to it instead of making a calculated intelligent decision it will basically be remembering stuff mugging
up stuff and then giving you the answer which is not the way that it's supposed to be and when we over fit our models
then we get really good accuracy like 100 of accuracy many times but then the
problem is in real world it doesn't perform really well because in real world there is no it's not able to identify the pattern
that can map the data that we have to the output that we want so random forest allows us to overcome
that problem because it uses multiple decision trees and it gives us high accuracy now that depends on the data
that you have if you have a really large set of data then at high accuracy is something that you can be sure of
getting when you're using random forest or you can be quite certain that you'll be getting
a really good level of accuracy so there are many things that you need to take into account when that happens
especially the quality and the quantity of data but if everything is in the right format and it's in the right shape
then you can expect a higher accuracy from random forest and then it comes to one of the most
important aspects which it deals with missing data quite easily so as i've already told you that if you have
columns that have a lot of missing values then it's probably better not to use it but if you have columns that have
some missing values let's say that there are 10 rows of data that you have and one of the columns doesn't have data for
two of the rows so essentially you have 10 values you are supposed to have 10 values but you only have 8
decision tree could fill up these decision trees and random forests could fill up these
these data points by just figuring out what exactly is the data that we have
figuring out a trend in the data and then fill those uh missing values using that now again it's important to
understand that we don't have to go overboard with this sometimes what happens is we are missing around 50 of the data that time it's not really a
good idea to use a random forest or decision tree to predict the values that those columns should be containing
because you don't have that much of data available to train your model to begin with so it's better to drop the data or
to insert it insert the data manually like filling it all with zero or filling it all with the mean value
or doing some complicated things by separating the data points into groups and then filling the means of those
groups in those columns there are many ways of doing this but if you have some missing data random forest it's quite
easy to uh use random forest to get the data inside those columns
now how does random forest work again will not be going into the mathematical intricacies of the of the entire working
of random forest but it should give you a good understanding of how it works so basically in random forest we train
multiple decision trees and what are deficient trees we'll take a look at that in a moment but think of decision trees as flowcharts that are derived
from the data that we have so we make multiple decisions multiple true or false decisions and if we make enough
decisions and we come to the end of the tree then what we realize is that that is the answer so we use that
after training those multiple decision trees what we do is we make predictions and we use all the decision trees to
make the prediction so let's say that i have trained a decision uh tree i have trained a random forest to predict the
stock price of a particular company in the coming few days now what i will do is let's say that
there are three decision trees that are trained inside a random forest and then i will ask all the three decision trees
to make the prediction for the next couple of days let's say the next seven days
then when all three of those entries have made the decision and they have given us an output the majority decision
is what is considered to be the final decision of a random forest for instance if i have a decision tree that's
that's trying to predict the house that's trying to predict the prices of stocks then what i have to do is i have
to take into account how many decision trees have predicted a particular value and if majority of them have predicted a
particular value then that value is the one that i use so to give you an example let's take a look at this so uh suppose that i want
to create a model that predicts whether a person has a particular disease or not so it's as you can see in the image down
below we have a decision random forest it contains three decision trees and what it does is that two of those
decision trees give you the output of true that means the person does have a uh the
sad disease and one decision tree gives you the value of false that means that since the majority
of the trees are pointing towards true the decision tree the decision taken by the random forest is going to be true so
the person does have the problem that we are talking about
so let's take a look at what decision trees do so in each decision tree what we do is we try to split the data on the
basis of a particular feature so let's say that i have a data set in which i have the person's
name i have the person's age and i have the person's qualifications so
as you can see the data will be quite varied depending on the person's name age and qualification then what we will
do is we will try and find out which of the particular columns are namely name age and qualification allow us to best
separate the data into separate parts so that way we can figure out what we're trying to do
so in that case what will be and that again takes a lot of mathematical computations but you don't have to worry about that once we figure out the the
feature that we want to use and we figure out what is the value on which to separate then we do this again because
we have three features and we have multiple ways of splitting the data so we keep doing that keep doing that until we reach some sort of a conclusion and
when we do reach a conclusion then we make the predictions based on the rules or the uh or the rules that will come up
to how to separate the data let's take a look at an example a very popular example when it comes to
machine learning and any sort of machine learning or data science algorithm is the iris dataset it basically
contains some information about flowers such as the supper length petal length sample width and the petal width and we
come up with uh we try to figure out whether a particular image contains iris
satosa or virginia certusa virginica or versicolor type of
flowers these are particular groupings of flowers or particular types of laws so let's say the decision tree comes up
with this uh this kind of um formula so right at the beginning it will take a
look at the petal length and it says whether or not the petal length is less than 2.45
if it is then it's the setosa so as you can see all of the better length in the
data that we have are less than 2.45 so they are all iris satoshi but let's say that it's not it's it's
not less than 2.45 but it is less than 4.95 so if the petal length is less than
4.95 centimeters then it's versicolor and if that's not true as well then it's finally virginia so
essentially any any data point that has petal length less than 2.45 it's satosa any data
point that has the petal length between 2.45 2.46 and 4.95 it's vertical and any
data point that has the value of about four point nine five four five length it's bajillion so this is how
decision trees come into play and we use multiple decision trees to train them again and again so that's why we don't
run into the problem of overfitting because we've trained them again and again using different parameters and we've gotten decision trees that work
differently on different data so the majority decision brings in that
so with that in mind we come up to the hands-on for the global prediction
so let's take a look at the hands-on for that we have a jupiter notebook and this notebook is
taken from kaggle so we'll be explaining to you how these things work and how the person who has come up with the code
and the understanding how are they doing it so what did what we're doing here right at the
beginning is we're importing everything that we need to now it's not necessarily the
case that you need to import everything right at the top but it's really a good idea to import everything right at the
beginning because then the person who's taking a look at your entire notebook can understand what are the libraries that you have used whether they have
those libraries or not if not that they can install them and then run your google so these are the libraries that they
have used and to be quite honest they are not really uh
in the aso telen libraries many data scientists use this libraries quite frequently matplotlib pandas numpy c
bond so these are for data manipulation data extraction and
visualization plotly is an advanced visualization library and they have used the datetime library to convert the
dates into multiple formats which will be taking a look at in a moment now i've already run all the cells because the
data is quite huge and this would take a lot of time for me to run the entire data set through the entire process and
i don't want to waste your time so this is how it's happening then we have imported multiple things
from the uh scalar library we have imported the random forest regressor the reason why we're importing the random
forest regression is because it's a regression problem we're trying to predict a continuous value so the number
of people who have been found as the confirmed number of cases they could be 14 there could be 45 they
could be 60 they could be 61 so they are not something that you can either predict into true or false or one group or the
other what's happening here is this we're trying to predict a continuous value continuous numerical value and
that's why we're using random forest regressor then we have some
we have the standard scalar and label encoder to con to
resize or reshape our data into a particular standard size and to convert
categorical data into the map finally we have pipeline sensory intestine state we'll understand what that means and
we're telling matplotlib that whatever whatever visualizations it produces it needs to be displayed it needs to be
optimized to be displayed inside a jupyter notebook but with that in mind we have
data set such as train.csv and test.csc again this has been taken from kaggle so
they have provided the data set it has trained.csv and test.csv which is the training data and the testing data
so with that we firstly take a look at the training data so as
you can see we have the id which is not really useful in our scenario but it could be that it has been taken from a
database that contains the entire ids and it has been converted into a csv file as you can see most of the top
values of a country are not available and from for province state is not available this gives you an insight in
what a data scientist would have to do on a day-to-day basis which is essentially just take a look at the data
and if you're not getting or if the data that you have contains a lot of missing values then what you do
and we'll take a look at how to deal with this we have country region we have the population weight date confirmed
cases and the target value so we're taking a look at the target which specifies the target value is either the
confirmed cases or fatalities so on 23rd of january the confirmed cases and fatalities in afghanistan were
zero so there were no corona cases founded and similarly we have
the test cases and in the test data what we have is we have the entire data set
and in that data set we are missing the target value which is something that we have to predict so
that's what we're supposed to do here now we take a look at the shape a shape basically means the rows and the columns
so we have as you can see this is the number of the rows that we have which if you see is
quite large so we have nine lakh seven thousand three hundred and six rows which is a really large data set this is
why i didn't want to import the data again and run the entire jupyter notebook again for you and for
the testing we have thirty one thousand one three lakh eleven thousand six hundred and seventy and there are nine
columns in the training data and eight columns because we have to predict the ninth column
now we take a look at the number of missing values in the training data and the testing data and as you can see 83
840 which is uh quite a lot if you take a look at the data that we have so we will be taking a
look at that and we have proven state which is 4048 994 so we have quite a lot of missing
data in country and province state in both testing and training so with that in mind and by the way this is
all being done by numpy for pandas for you so pandas is the library
that we use to read the csv file then we take a look at the head of the file and it gives you this nicely formatted list
of all of this it is displayed well in your notebook and then what we do is we take a look at
how many null values are there and the sum of the number of nonverbal value columns inside it so this is what we have now what we do
is we take the id and the forecast id from that id will be taken from the training data
set and the forecast id will be taken from the testing data set and now this is just to show you how to
get the data out of a particular data frame and now finally what we do is we drop
the values or drop the columns that either have null values or are of no use to us so what we do is we remove the
country because it has a lot of null values we remove the province state it has the null run values and remove id
because it's not going to help us in any way shape or form another reason is that
uh another reason would be that someone has asked that they want me to recommend
some free courses to you uh i will be recommending free courses so if you want to learn more about that then stick with
me till the end of the presentation and i'll be showing you some resources that you can learn free and paid as well
so with that in mind let's continue so we will drop the country proven state and forecast id
because these are the incorrect values or null values and forecast id is something that we don't
really need and if we put data that is of no use to us in our training set then it could
negatively impact the performance of our model so we drop them so we are this we are telling the columns
that we wanted to drop and then the return data frame is the one with the drop column so we assign it again to our
data frames and we get the dropped columns now we try to visualize the data
so as you can see that the target values are there we have the weights we have the population as you can see it's quite
widespread so certain things such as the population of of a country or something could
could be leading up to something like this so 1.5 billion or something like this so the most populated countries
have this much population similarly you can take a look at all of the other things that we have and when we cross
these things we get this so what we're doing basically here is that we're taking a look at the population and the
target value we're taking a look at the weight and the target value and then the target value with the target value
basically shows you that we have zero orbitals now we take a look at the pair plot or
the power plot which basically takes a look at how many confirmed cases and how many fatalities we have in a trading
data set so as you can see here this is the number of that so we have a lot more confirmed cases
than we have in the uh then we have the fatalities so not a lot of people have
uh it has caused a lot of fatal deaths
for number of confirmed cases as you can see the number of confirmed cases is quite high
and with that now we take a look at the target and the population so confirmed cases and fatalities they
have quite a good amount of confirmed cases and fatalities according to the
population that of a country is there and we are using the training data again
so now we take a look at a and this is where plot link comes in matplotlib comes into play what it does
is that it creates a pie chart or a donut chart necessarily for you and it shows you the target value what the
confirmed cases and all of that so as you can see in u.s the majority of cases are in the u.s which is 53.7 percent of
our entire dataset it could be that our data set is not completely correct so it could be that there are some values
servicing maybe 46 but the majority of the data that we
have belongs to the citizens in us as you can see it's right there and again
uh you don't need to know any maps to do this you just need to understand how to write code for this we create a figure
we create a pie chart we update the traces and once you once you understand matlab if you understand how you use
these things basically we just tell it to we want the text inside our inside our pie chart
inside the pies that we have created out of the entire chart and with that we give the
uniform weight size and if the text is too large to fit then we hide it so on and so on
and then what we do is we um group the group of data by the country
region and then what happens is we take a look at the target value so after grouping it
we summit and then we take a look at the target values as you can see in afghanistan there are 16 000 15 cases
and you can take a look at any number of cases here as you want to so as you can see in us there are a lot
more people than there are in afghanistan and with that we come as you know we
have nine lakh cases uh in our data set and out of those five point seven lakhs are from the us so
with that we get the largest five values of target values so
top five mostly most affected countries are the ones that we have here
and we have the us brazil we have russia
united kingdom and spain so these are the top five countries that have been mostly affected with google 90
and this is what our data indicates and
so as someone has asked what if i have to find the data of a particular country so if you want to find the data of a
particular country then as you can see we have it here we are we're printing the target value
of all the countries if you want to find of it of a particular country then you have to type it like this
here you will have to type let's say that i want to find of india
uh just make sure that you have written the word india correctly here if the i is capitalized
from the given data that we have it seems that the first letter of the entire country is capitalized so we can
so again this is something that you will learn once you learn about matplotlib and pandas and all of these libraries i
won't be running this again because for this to run i would have to re-execute the entire python notification notebook
and that would take a lot of time so i'll just show i just showed you how to do it and you can do it on your own
with that in mind we have this and now if you want to visualize this again just three lines of code is required here so
again no mathematics was required as of now what we've done is we've created a cat plot in which we have these five
values we have the target value as the x-axis and the population is the y-axis
and this is what we have now with that we get the top five most
populated countries in the world and we have china india u.s indonesia and brazil
and these are the top five so we have the end largest uh function that's doing this for us
and now what we do is we come up to some interesting visualizations so this visualization is called tree map
it allows us to basically create a tree or a jigsaw like structure in which the
larger the value of a particular country or a particular data the more size it gains in the entire plot so as you can
see if i hover over us i get this uh interesting interesting hover menu
in which we get all the values that we want the target value the country population and many other things you go to brazil you go to russia you go to
india you will get a lot more so as you can see india is quite densely populated so it's getting all of this
then there's this this united kingdom's iran turkey and as you go down you can
take a look at other countries as well but those countries don't have that much of population so the squares are quite
small now that is done but as you can see the
uh date and time was not in the correct format so if i were to show you the date and time that we had earlier take a look
at the data that we had we had data like this which is
2020-04-27 now a problem with this is that it's it cannot be converted into a numerical form because there are dashes
in it if there are slash if there is if there's any character in it that's not number then that's a problem so to
convert it into completely numerical what we do is we use the datetime library that we
already have installed but we need to use it correctly so here's what we do right means the
tree map we get the date and we convert it into the date time format and then we convert it into years months and days
so as you can see 20 20 0 4 24 which is uh
24th april 2020 so this is how they convert it and the reason why we convert
it into this way so that it could be numerical is mainly because if you don't do it this way then you get values that
are string based or character based and machine learning models don't work on
data like that similarly as you can see we have confirmed cases we have name of the
countries and these are the things that we need to convert into not into
converting from categorical numerical categorical is thing that's not numerical for instance us brazil the
computers and the algorithms will have no understanding of what these things are these could be anything as far as they're concerned similarly confirmed
cases and fatalities they have no idea what that is so with that we create some interesting
plots these are called heat maps heat maps will show you the date and the number of cases that they got on those
dates so as you can and we have gotten just a few dates so that we can take a look at that and as you can see majority
of these are quite uh empty but china got these cases quite early on so that's why we're
getting this here and then either they didn't have the data but they had no cases so that's why we're
getting these values and we can explore more about this data later on we can explore more into the dates and what are
the missing things and all that similarly we have it here we have it here and this allows this uh
allows us to understand just how many people were coming each day so the brighter red the column the more people
change that so if it's light like green or yellow then it's not that many people as
you can see on the legend right on the left hand side here on the right hand
side here then we take a look at the uh and largest values here as well and we get
the same thing we get target values we get fatalities and as you can see china
is right here and we get the values and then we create again the heat map but
this time we create for it for a long larger date range and this is what we get so as you can see
these are the countries and again as you can see bangladesh had data till this date and
then it later on it didn't similarly for others we don't have the
exact same thing so let's take a look at now comes the time
to understand what are the columns that don't have the numerical values basically what we do is we say in the
training data set get the column names that are of type object object is anything that is not numerical so we
have country region and target and similarly in the test one we have the same thing so now it's time for us
to convert our categorical data to numerical data so we get label encoder and what it does
is that it assigns a unique value to each of the data that we have so for
instance if we had a column in which we had male and female as the only values
that it contained let's say that it's an employee one so it will assign the value of zero to male and one to female and
then whenever it sees zero in the data frame it converts into it says male in the data converts it
into zero and if it is female it converts it to one similarly we keep going on and on so we do that here and
then we get the data that we want we get the first column which is the country region and then we convert
it into uh from string then we convert it into the numerical data that we want
we do the same thing with the training data and we do the same thing again but for the other columns which is the target
column and now as you can see this is what our data looks like countries uh afghanistan
i think is given the value zero here and confirmed cases are zero and fatalities is given one so now everything as you
can see is numerical that's good now what we do is we separate our data
into text and y data so x and y basically is something that we take a look at when we're trying to
understand what is the data that we have x is x are the values that
we want to use to make the prediction y is the thing that we wanted to predict
so with that in mind we take the data and then we split it into training and testing so we already have some testing
data but what we're doing here we're trying to create a little more testing data to check on a small piece of data
first so that's what we're doing we're converting into training and testing data with uh
20 of the data set to testing and eighty percent of the data set for training yes we have nine lakh rows then it's quite
easy for us to do ten or twenty percent if we had smaller data like one lakh or fifty thousand then we would do
something like thirty percent at seventy percent or seventy five and twenty five percent now comes the interesting part
we create a machine learning pipeline or a data science fight which will describe the process so what we do we use the
standard scalar what it does is that it removes the outliers for us and it converts the data into a normal form so
that it's easier for us to crunch through the entire data set and it's easier for us to calculate the things
that we want to calculate and we'll be using the random forest regressor here so convert the data
into a standardized format and then use the regressor to create a random
forest regression tree so in the pipeline we fit the training and testing data so we get the training
data the values that we want to make the prediction and the values that are going
to be predicted and then we make the prediction on the testing data that we had already set aside
now we make the prediction and we take a look at the accuracy and we have 95 percent accuracy which is quite good if
you're quite honest any data any large sort of large data sets that you get output for and you get around 80
percent or above 80 is quite a good thing because for a machine to be able to learn all of
these patterns and then be able to predict things at anything accuracy of about 80 is quite good ours is 95.4
which is quite good and now is the test data that we had already gotten from kevin we made the predictions
we converted into a data frame using the pd.data frame format and here we have it
we add the forecast id and we get the target values so here we
have it and this is what our data frame looks like so as you can see for the first
value here we'll be getting the value of 106.6 so
and the second value will be getting 5.2 so it means that
for the first day we'll be getting 106 confirmed cases and five fatalities now these values are in
uh floating point of numbers or in decimal format and that's because we're trying to predict continuous values so you could get
decimals but we could just round them so 107 and 5 107 and 1 and
155 so these are the values that we have gotten and using these values what we
can do is now we have calculated what the training data has given us to do so we have we created a
model and now later on if we get some data then we will use that data to make the prediction we just have to pass it
to our model here instead of test we just have to pass in one value and what it will do is that it
will make the prediction and it will give us the prediction when we get the first value as the thing
that is the confirmed cases and the second value would be the fatalities
so we'll be making the progress like that now again as you've seen we didn't have to use a lot of mathematics in this
case it's mainly because that for solving normal problems you don't need a lot of accomplishments so with
that we have come to the end of the hands-on
so fraud by definition is an act of deception that is used illegally to deprive a person or an organization or
entity of money property or legal rights so if you talk about financial frauds
which are the most common type of frauds so a typical organization loses around
five percent of the yearly revenues to fraudulent cases and according to an rti
report there were around 2480 cases of frauds in 18 public sector banks which
involved around 32 000 crores and according to an rba report in 2017 and
18 a total of 911 credit card fraud cases were there which amounts to around
65 crore rupees which were illegally transferred from different bank accounts so now let's discuss some of the types
of frauds that we can encounter in our daily lives so the most common types of frauds nowadays are online frauds where
a person's account may be hacked and all his money can be transferred to different accounts illegally and the
most common types of rods nowadays are the credit card frauds where stolen credit cards and credit card numbers are
used to make illegal transactions and then we have threats and theft of
inventory when someone breaks into a bank or an atm and then we have other types of frauds where someone can steal
your idea or your professional work so now that we know what are frauds and what are the different types of rods and
how they can affect different organizations and how important it is to detect the frauds and save ourselves
from heavy losses so now we'll discuss some of the rule-based approaches or traditional approaches that are used for
detecting frauds so in the rule-based approaches the algorithms are actually written by fraud analysts and these are
based on strict rules so if there are any changes that have to be made for detecting a new type of fraud so they
are all done manually so either by making those changes in the already existing algorithms or by creating new
algorithms so in this approach whenever there is an increase in the number of customers and the data the
human effort also increases so in conclusion we can say that the rule based approaches are time consuming and
they are costly so now let's discuss some of the drawbacks of the rule-based approaches so one drawback of the
rule-based approach is that it is more likely to have false positives so this is a type of error condition where the
output of a transaction it depends upon the rules and the guidelines that we have made for the training algorithm so
if you have a fixed rule and a fixed threshold and if a transaction is rejected where it should not be rejected
so it will generate a condition of high rates of false positives so these false positive conditions actually result in
losing lot of genuine customers so a rule based approaches cannot recognize hidden patterns since all of the rules
are mentioned by the fraud analyst and it cannot also predict new types of frauds because it always abides the
rules that are mentioned by the fraud analysts and that leads us to a situation where it cannot respond to new
situations which is is not trained on or it is not explicitly programmed on so
now that brings us to our next topic that is how we can use data science to solve these problems and use data
science for fraud detection so the modern alternative is to leverage the vast amounts of big data that is
collected from different online transactions and model it in such a way that allows us to flag or predict fraud
in the future transactions so for these different data science techniques such as machine learning and deep neural
networks are the obvious solutions so here i'm going to show you an example of how machine learning techniques can be
used to identify fraud in financial transaction so machine learning is a broad field it has a large collection of
algorithms and techniques that are used in classification regression clustering or anomaly detection so two main classes
are supervised and unsupervised learning so in supervised learning it is used to predict either the values of a response
variable which is also called regression or the labels of a set of predefined categories which is also called
classification tasks so in supervised learning the algorithms learn how to predict unknown samples based on the
data of samples with noun response variables and labels so in fraud detection we are technically dealing in
the classification task so for each sample that is a transaction the predefined labels tells us whether it is
a fraud transaction or not so however there are two main problems while using supervised learning for fraud detection
the first problem is data labeling so in many cases fraud is actually difficult to identify and some cases will be
obvious the some cases will be easy to recognize with rule based techniques and they usually won't require complex
models so where it becomes interesting are the certain cases so they are hard to recognize as we don't usually know
what to look for so here we use the power of machine learning but because fraud is something that is hard to
detect so our training data sets that is collected from the past transactions are probably not classified correctly in
many of these cases so this means that the predefined labels will be wrong and some of the transactions will be wrongly
labeled so in this case our supervised machine learning algorithms won't be able to learn how to find these type of
transactions or these type of frauds in the future transactions and the next problem that we face is the unbalanced
data so an important characteristics of fraud data is that it is highly unbalanced so this means that one class
is much frequent than the other so in a fraud detection example less than one percent of the transaction will be
fraudulent so in most of the cases you will find that less than one percent of all the transactions are fraud
transactions and most of the supervised machine learning algorithms they are actually very sensitive to unbalanced
data so we have to use different techniques to balance the data before we actually use the supervised machine
learning algorithms to predict the fraud cases in the future so the next class of problems that we can solve using the
unsupervised learning so it does not require our predefined labels or response variables so it is used to
identify clusters or outliers or anomalies in the data sets so in our fraud data set
we don't trust the predicted labels to be 100 correct so hence there will be lot of incorrect labels as well but we
can assume that the fraudulent transactions will be sufficiently different from the vast majority of regular transactions so that our
supervised learning algorithms will flag them as anomalies or outliers so in supervised learning we can use the
dimensionality reduction which is also called a type of dimensionality rejection is called principal component analysis so in preparation for our
machine learning analysis dimensionality reduction techniques are very powerful tools and they are used to identify
hidden patterns in the data and whenever we have high dimensions in the data so it is better to use pca so that we can
reduce the number of features for machine learning while preserving the most important patterns of the data and
similar approaches can be used such as clustering algorithms and like a means clustering can also be used to find the
patterns in the data using number of clusters so in this video we are going to use the supervised machine learning
model on our data set so that we can predict future fraud transactions so now let's discuss some of the challenges
that we'll face while building a machine learning model on our credit card data set so various challenges arise when
building models for fraud detection so the first challenge is the unbalanced data so there are plenty of legitimate
cases but only a very few fraudulent cases so for example in a credit card
transaction typically less than 0.5 percent of the transactions are fraudulent so it might cause an
analytical technique to experience difficulties in creating an accurate model and depending on the exact
application operational efficiency may be a key requirement so the fraud detection system might only have a
limited amount of time available to reach a decision so in a credit card fraud detection setting the decision
time to let a transaction pass or not is typically less than 8 seconds and also incorrect flagging so when flagging a
particular transaction if it is if the transaction is flagged as fraudulent for a good customer so you risk losing this
customer due to the harassment caused by flagging the transaction as fraud so now let's discuss some of the techniques
that we can use to solve the first type of challenge that is unbalanced data so here you will find that most of the cases in a data set most of the
transactions will be legitimate transactions and very less transactions will be fraudulent transactions so if
you train your classifier model on this so your classifier will tend to favor the majority class that is your
legitimate transactions so which results in large classification error over the fraud cases since it has not learned
much because of the less data available to it so the classifiers actually learn better when it is
trained on a balanced distribution rather than an unbalanced data so now we'll discuss sampling methods to solve
this unbalanced data problem so we always perform the sampling methods on the training set on the not on the test
set so we'll always divide our data into two sets that is our training and testers so we'll build our model on the
training set and before building the model will balance the training set so there are model learns on the training
set and then we'll use the original test set which is the unbalanced asset to predict whether a transaction is
fraudulent or legitimate the first technique is called the random over sampling technique so in this technique
we over sample the minority class which is our fraud cases so we copy the cases that are already
present in our fraudulent cases so we'll just copy the same cases multiple times
till we reach a particular threshold or the value of the cases that we want in our data set and the other techniques
that we can use is the random under sampling so in this technique we under sample the majority class which is our
legitimate cases so we remove some of the cases that are present in our data set which are from the legitimate
transactions so we'll remove some of those cases and then we'll downgrade some of those cases till we have a data
set that has an equal distribution or an almost equal distribution of both the fraudulent and the legitimate cases or
we can do both so either we can up sample or we can down sample so now let's discuss some of the techniques
that we can use to solve the first type of challenge that is or unbalanced data so you'll find that most of the data
sets have most of the transactions as legitimate and very few transactions as fraudulent so if you train your
classifier model on this particular data set so our classifier will tend to favor the majority class that is the
legitimate cases so which results in the large classification error over the fraud cases since it has not learned
much from the fraudulent data because the data that was available to it was very few so now let us discuss some of
the techniques that we can use to solve the first type of challenge that is our unbalanced data so you will find that in
most of the data sets or legitimate cases they're outnumbered just a quick info guys if you want to become a
certified data scientist then intellipaat provides just the right course for you you can check the link in
the description box below now let's continue with the session so now let's discuss some of the techniques that we
can use to solve the first type of challenge that is our unbalanced data so you'll find that in most of the data sets most of the transactions are
legitimate transactions and there are very few transactions which are fraud transactions so if you perform a
classification model on top of this data set your classifier will tend to favor the majority class that is all
legitimate cases so which means that it will show a huge classification error over the fraud cases so classifiers
actually learn better from a balanced distribution so if you train or model on a balanced distribution it is more
likely that we have a less classification error for our fraud cases and it will be easily available to us so
now let's discuss some of the techniques that we can use to solve the first type of challenge that is our unbalanced data
so you'll find that in most of the data sets most of the transactions are actually legitimate transactions and
very less transactions are fraud transactions so if you create your machine learning model on this type of
data set your classifier will tend to favor the majority class which is your legitimate transactions and which will
result in large classification error over the fraud cases so classifiers or machine learning models they learn
better from a balanced distribution where the balance of the two classes that is legitimate and fraud can be
equal so now let's discuss some of the methods that we can use to solve the first type of challenge that is our
unbalanced data set so you'll find that most of the data sets they have large number of legitimate cases and very few
fraudulent cases since in credit card transactions less than 0.5 percent of the transactions are fraudulent so our
classifier or machine learning model will tend to favor the majority class that is on legitimate cases so which
means that it will show a large classification error over the fraud cases will not be able to identify which
case is fraud or not so a classifier is actually learn better from a balanced distribution instead of an unbalanced
data so now let us discuss different sampling methods used to balance an unbalanced data set so the first
technique is called the random over sampling so in random over sampling we increase the number of fraud
transactions in the dataset by creating duplicates of the already present fraud cases and the next technique is called
the random under sampling so in random under sampling we decrease the number of legitimate cases to get a balanced
distribution and also we can perform both random over sampling and random under sampling by increasing the number
of fraud cases and decreasing the number of legitimate cases so now this is how our data set will
look like after performing both the over sampling and the undersampling but the problem with over sampling is that it is
done by creating duplicates of the fraud cases that are already present in our dataset so that means that we will be
training our model using a lot of duplicate values which won't explain the variance in the data and the problem
with under sampling is that we end up throwing away a lot of useful data and information which is not preferred in
general so that brings us to our next sampling technique which is called the synthetic minority over sampling
technique aks mode so in this technique we over sample the fraud cases by creating synthetic fraud cases so if you
look at the scatter plot at the right hand side the green dots here represent the level legitimate cases and the red
dots here represent the fraud cases so in smode we find the k nearest neighbor of a fraud case
let's say x here and let's take the value of k as three so we'll find the three nearest neighbors of x and after
choosing the nearest neighbors we'll randomly choose one of the x's nearest neighbors let's say y here and then we
add a synthetic sample using the following method so we'll take the x and the y coordinate of both the points and
find the x and the y coordinate of a synthetic point which is given as follows so the synthetic point will lie
on the line that joins both x and y and here the number 0.3 it is a random
number between 0 and 1 so we can use different numbers between 0 and 1 so that we get different synthetic samples
that are present on the line that joins x and y and we can also repeat this step multiple times for each neighbor of x
which is a fraudulent case to get a desired value of the fraud cases in our dataset and hence will get a balanced
data set after all so now let's go to rstudio to implement credit card plot detection model using smooth so now
let's build a fraud detection model in r so first of all we will import the data set that we are going to work on so i've
stored my data set in this particular folder so once i load this data set using the read.csv function and i'll
store a data set in credit underscore card data frame so here on this line
your data set will be imported and after importing the data set we'll look at how our dataset looks like so after your
dataset is imported you can click on the dataset name in the variable explorer and once you click on the name you will
find that our dataset contains 284807 entries that is rows and around
31 columns this data set is about different transactions made by different credit card users and the first column
here you can see is the time so this is a time stamp and then we have columns from v1 to
v28 so these columns are actually the reduced versions using the dimensionality reduction so the actual
dataset contains the actual columns which the dataset does not contain so these are actually the reduced versions
using the pca so that the confidentiality of the users is maintained so these are different
features that are extracted from the actual features using the dimensionality reduction so after the 28th column or
the 29th column we have the amount column that represents the amount of transaction that was done using this
particular credit card and then the last column here you can see is the class column which contains two values that is
zero or one so zero here represents that the transaction was a legitimate transaction and one represents that the
transaction was a fraud transaction so after that let's look at the structure of the data set and see what are the
different types of variables that we have in our data set so if you'll use the if you use the structure function and write the name of your data set that
is credit card so you'll see we have around 31 variables that is columns and
most of the variables are numerical columns and the last column here you can see is class which is also an integer column but in actual it is not an
integer column it is a categorical column it has two categories that is 0 and 1 and 0 here represents the
legitimate transactions and one represents the fraud transactions so first of all we will convert our class
column to a factor column two levels that is zero and one so that we can work with our data set later on so we will
convert this to a factor column using the factor function and i'll pass the name of the variable that is credit card
dollar sign class and then we have two levels that is zero and one zero for legitimate cases and one for fraud cases
so we'll again store it in the same variable that is credit card dollar sign class so once you run this function f
and if you now look at the structure of the data set you will see now our class column is a factor column with two factors that is zero and one zero i
represents the legitimate transactions and one represents the fraud transactions so now let's look at the
summary of the data set to display the summary statistics of different columns so here you can see the last column is
class column so here around two eight four three one five entries are legitimate cases that is zero and only
492 entries are your fraud cases that is one and then we have most of the columns are integer columns with mean of zero
and the first column is our timestamp so now before moving ahead now let's check whether there are any missing values in
our data set or not so we'll use the is dot n a function to check whether there are any missing values in our data set
or not and then the sum function will count the number of missing values if there are any so once we run this function we'll see that we don't have
any missing values in the in the data set so it is okay for us to continue and work with our data set so now we have to
use the class column so first of all let's see how many fraudulent and legitimate transactions are actually
there in our data set so we'll use the we'll get the distribution of fraud and legitimate cases all hdmi transaction is
the data set we'll use the table function and inside the table function we'll write the variable that we want the distribution for so our variables or
the transactions are stored in class variable in our credit card data set so we'll use the table function to get the
distribution of different transactions so after running this command here you can clearly see that zero represents the
legitimate transactions and most of the transactions in this data set are legitimate transactions so there are
around two eight four three one five legitimate transactions and only 492 fraud transactions and if you want to
get the percentage of the transactions you can use the prop table function and
then inside the profitable function you can write the table function which will get you the distributions and the prop
table function will get you the percentages of the distribution so here you can see that 99 of the more than
99.82 percent of the transactions in this dataset are legitimate transactions and only
0.001 percent transactions are fraud transactions clearly we can see this is an imbalanced data set so now let's also
plot a pie chart to get the distributions of our legitimate and fraud cases in our data set so we'll firstly set the labels of our pie chart
so the labels are legit and fraud so we'll create a vector it contains two strings that is legit and fraud and
we'll store that in labels and after that we'll paste or we'll concatenate the percentages of your fraudulent cases
and legitimate cases with the respective labels so if you pass two vectors in the paste function so first we'll use the
paste function to concatenate two strings so we'll first vector that we have passed is the labels which contains two values
legit and fraud and then we'll pass the round function so this function will actually calculate the percentages of the distributions so we'll calculate the
percentages of the prop table that we have just seen above which will display this particular result and we'll
multiply it by 100 to get the percentage and then we'll round this percentage to two digits so we'll
only get two digits after the point so use the round function which will contain our percentages up to two digits
of decimal and then we'll have the labels which contains your two strings that is legit and frauds and we'll paste
it together and we'll store the resulting label so if you run this command and i look at the labels right now so now your labels actually look
like this we have a 99.83 percent so here we have rounded the values up to two decimals using the round function
here and the fraud cases are 0.1 percent and legit cases are 99.83
so clearly we can see there is an imbalance in our data set so let's plot a pie chart first of all to get the
distribution or display the distributions of our legitimate and fraud cases so we use the default pi function from the default r package and
we want a pie chart for the different distributions or the or the different categories of the class variable in our
credit card data set and we will use the table function to get the different distributions of the categories and our
labels will be equal to these labels and then the color of the labels will be according to the orange and the end so
the orange will represent the number of legitimate cases and that represents the number of broad cases and then this is
the title of our pi plot so title will be priced out of credit card transactions so let's run this command
to get a pi plot so this is our pie chart for our credit card transactions and here you can see most of the color
is orange it means we have around 99.83 of the legitimate transactions and only
0.17 percent are fraud transactions so now if you make a model on this
particular data so you'll get most of the accuracy so we'll first of all make a model that is no model so even if you
don't have any particular machine learning model and if you predict that every single transaction in this data
set is a legitimate transaction so you can see what kind of accuracy we'll get so first
of all we'll predict that all the transactions in this data set are legitimate transactions so we'll store
our predictions in predictions variable and will repeat integer 0 equal to the
number of rows that are present in our credit card data set so in our credit card data set we have around 284 807
rows so we'll create a vector that will contain zeros two is four eight zero seven times
so after creating a vector we'll convert this factor to a factor variable with two levels that is zero and one here zero
represents the legitimate transactions and one represents the fraud transaction so we are predicting without using any
model that all the transactions are legitimate transactions so once you run this command we'll factor out or we'll
convert this particular vector to a factor with two levels that is on legitimate transactions and fraud
transaction zero and one so after that we'll use the confusion matrix to get the accuracy for this particular
predictions or that we have done without using any particular mod so when you use the carrot package so if you have not
installed this package you can use the install dot packages command and write the name of your package to install it
and then after this after installing the package you can load the package using the library function and once you run this command your package will be loaded
and then you can use the confusion matrix function from the carrot package to get the confusion matrix and the
accuracy and if you want to know more about this particular function you can press f1 here so it will take you to the
documentation on the right hand side and then you can know more about this particular function so
in this function we will firstly pass your predictions that we have stored in predictions variable as data
and then we have our reference variable which will contains the actual classes that we have predicted so we have predicted the classes of the credit card
data set we'll pass our reference variable or the actual classes that we have predicted so once we run this
command we'll get the confusion matrix for this particular model that we have built without without using any machine
learning model so you can clearly see that we have correctly classified all the samples that were all the
transactions that were legitimate transactions but we have not classified any of the transactions that were that
was a fraudulent transaction so still we get an accuracy of 99.83 because we have flagged every
transaction as a legitimate transaction and we have not flagged all the fraud transactions as fraud transactions so
these will be our true positives and this will be your true negatives which are the correctly classified values
so our true positives are total and our true negatives are zero it means we have wrongly classified all the samples that
were fraudulent transactions your zero represents legitimate transactions and one represents your
fraud transactions so out of the fraud transactions out of all the fraud transactions we have
flagged all the transactions as legitimate transactions which are false positives so here you can clearly see
that if you only check the accuracy of the model that we build so we'll be wrong most of the times because because
their accuracy does not represent anything here our goal is to maximize the number of cases or maximize the true
negative so that we can classify most of the fraud transactions as fraud transactions so now let's move ahead and
build a model so before moving ahead we'll take a small subset of our data set so that it is computationally more
faster and later on once you have built a model on the smaller subset that you can make then you can make the model on
the whole data set which will take some time so we'll take a smaller version of the data set so that we can compute it
faster so we'll use the deployed package to get a small fraction of our whole data set that is credit card so i'll
load the deployer package first of all so after loading the deployer package i'll use the sample fraction function
sample frac function to get the fraction of our data set which will be random fraction so it will contain both zeros
and ones and i'll pass my credit card data set using the forward pipe operator which will pass my credit card data to
the sample frank function which will extract 0.1 percent that is 10 of the samples or 10 percent of the rows that
are present in our data set so right now our dataset contains 284807 so after extracting 10 percent of the
rows it will be rows 28480 we'll store the result in our credit card data frame again
and we have used the set seed function so if we run this particular code again so we'll get
the same sample again if you don't use the set state function and you run this code again and again so your sample will
be different every time so we'll run these two lines together and we'll get a sample that will be 10 of all the rows
that are present in our actual data set so now let's look at the data set uh that is a fraction and there is a subset
of our original data set so we have around twenty eight thousand four hundred and eighty one rows and all the
columns so this is a ten percent of data set and then we'll make a model on this particular data and after building a
model later on we can build the model on whole data set so now let's see what is the distribution of classes that we have
in this particular data so right now we have around 28 437 transactions as
legitimate transactions and only 44 transactions as illegitimate or fraud transactions and now let's plot a
scatter plot between the two columns that is v one and v two so we'll plot a scatter plot between the columns v one
and v two and we'll see what is the distribution of classes between these two variables so we'll use the gg
plotter function to plot a scatter plot so firstly i'll load the ggplot2 library and after loading the ggplot2 library
i'll use the ggplot function to plot a scatter plot so the g plot function is based on grammar of graphics so it has
different layers that will stack up on each other to build a final plot so our first layer is our data layer where we
passed our data frame so data frame is our credit card data frame that we have just extracted from the whole data free
and then we have our second layer as the statics layer so in the statics layer we have our variables that we want to plot
on our scatter plot so on the x x-axis we have our variable v1 and on the y-axis we have our variable v2 and we
want the color of the points of the scatter plot according to the different categories of the classes so
we'll have two categories in the classes that is zero and one so we'll have two colors two different colors for each
particular category and then to plot a scatter plot we'll add the third layer using the plus sign here so our third
layer is our geom layer in the geometry layer we'll pass our function that we want to plot scatter plot for so here we
if you want to plot a scatter plot we will pass zoom underscore point so it will plot a scatter plot for us and then
if you want to change the background of your plot so we can use the theme function so theme vw that is black and
white so it will make the background of your plot as black and white and then you can also change the
color of the point so here this will get you the basic plot that we want so if you zoom in on this plot you can
see that our this particular color represents our legitimate cases and or blue color hair represents our fraud
cases so if you want to change the background of this particular plot so you can use the theme function which will change the background to black and
white and if you want to change the color of these points to different colors so we can use the scale color
manual function and inside of that function we can declare our values so our values of the colors are dodged
bluetooth and red so now this color represents the zero that is legitimate cases and that represents the fraud
cases so now let's run the whole command and we'll get the final plot black and white background and these colors as the
color of the points so if you zoom in on this particular plot you will find that now this particular color doesn't blue 2
represents our legitimate cases and our red color represents of fraud cases so here also clearly you can see that we
have a comparatively huge number of legitimate cases and only a few fraud cases so if you train your model on this
particular data or model will not be able to learn a lot because the number of fraud cases are very less so you have
to use different techniques to balance the data set before we actually make uh build a model on this particular data so
before balancing the data set we first of all create training and test sets so we only use balancing on the training
set to train the model and we don't use balancing or the test set because that will be the original test set that we'll
predict values for so first of all we'll create training and test sets and then we'll balance the training set and train
our model and then evaluate the performance of the model using the test set so now let's build our training and test sets for the for detection model so
we'll be using the ca2s library so if you have not installed this library you can use the install dot packages and the
name of the library to install it and after installing this library you can use the library function to load the
library and after loading the library we can use the sample dot split function to
split our data set into two sets that is training and test sets so in the sample dot split function if you want to know
more about this function you can press f1 here so it will take you to the documentation on the right hand side so
now if you want to split your dataset into training and test sets so here we'll pass or column that we want to
split according to since we are going to predict whether a transaction is a fake transaction or legitimate transaction so
that column is a class column that represents zeros and ones so we'll use the class column to split our dataset
into training and test sets so i'll pass the column my class column from the credit card data set and now i'll
mention the split ratio which will represent how many rows i want in the training set and how many rows i want in
the test set so if you write split a ratio equals 0.8 so 80 of the rows that are present in your data set will be in
the train set and 20 percent of the rows that are present in your dataset will be in that test set so if you run this
particular line and will store the result in data sample once you run this line and if you look at the data sample
now so it will contain contain true and false values so here the true values will be 0.8 so 80 of the
values here will be true and 20 of the values here will be false and these number of values will be equal to the
number of rows that we have in our dataset so now we'll use this particular object to split our dataset into two
sets using the subset function so we'll use a substrate function on our credit card data set and we'll check wherever
the sample value is true we'll store all those rows in chain data so after creating this line or 80 percent of the
rows from the credit card data set will be in the train data and wherever the data sample value is false we'll store
all those rows in the test data 20 of the rows in the credit card data set will be in the test data so now let's
run all these lines together so now we have successfully created our train data and tells it so now let's click on the
train data in the variable explorer to see how many rows are there so we have around 22 785 rows in our training data that is 80
of the rows of the whole data set and then if you look at the test data so we have around
5696 rows in the test data and all the columns so we'll train our model on the train data after balancing this data and
then we'll test the performance of the model using confusion matrix or on the test data so now if you want to check
the dimensions of your training and test data you can use the dim functions which will display the dimensions so our
training data contains 22 785 rows and our test data contains
5696 rows and all the columns that is 31 columns so now before making a model we
have to balance our data set first so we'll use different techniques so the first technique that we're going to use
is called the random over sampling which means that we will increase the number of fraud cases in our data set so we'll
over sample the minority class so right now if you look at the distribution of the class variables class variable you
can see around 22 750 transactions are legitimate transactions and only 35
transactions are fraud transactions so now if you want to increase the number of fraud transactions so we'll use this
particular method so first of all we will write how many will store our number of rows in our data set or number
of legitimate transactions in our data set in n legit variable and then we'll store the number of fraction or the
amount of fraction that we want for our fraud cases so if we want our fraud cases to be 50 of the whole data set
using the random over sampling so we'll write 0.50 and we'll store the result in
new fraction legit so now this fraction will be 50 or in order final data set
after performing the random over sampling the 50 of the rows will be your legitimate transactions and 50 of the
rows will be fraud transaction now if you want to calculate how many rows should be there in our data set to
accumulate both of the legitimate and fraud transactions as 50 percent so we'll divide the number of legitimate cases by
the fraction and it will tell us how many rows we want in our data set to balance our legitimate and fraud
transactions as 50 50 percent so after dividing the number of legitimate cases by the fraction we'll get the number of
rows that we want in in our data set so if you run this function we have stored the number of rows in new and total so
if you so if you click on new one total so we'll find that we need around forty five thousand five hundred and fifty
forty five thousand five hundred rows in our data set and out of these roles fifty percent of the rows or fifty four
under fifty percent of the cases will be fraud cases and fifty percent of the cases will be legitimate cases so now to
perform random over sampling we'll use a package called rose so if you have not installed this package you can install
the package using install.packages function and then write the name of package that you want to install and
after you have installed the package you can use the library function to load the package so that you can use the functions that are included in this
package so in this package we are going to use the open.sample function which will help us to perform random over
sampling so if you want to know more about this function you can press f1 here so it will take you to the documentation of this function so in
this documentation you can see the first argument that we want is our formula argument then the formula argument we have to mention or variables that we
want to over sample so here our class variable is the variable that we want to over sample and then we have used a dot
which means the rest of the variables are independent variables and this tilde sign is used to separate our independent
and dependent variables so our class is our variable that we want to over sample or that we will predict later on and we'll
use all of the variables in our data set except the class variable which we can mention using the dot symbol here and
after the second argument is our data argument so it will require the data that we want to over sample so our data
comes from train data that we have just created above our training set and the third argument here you can see is our
method argument so if you go to the documentation you can see that we have three methods that is over under and
both so firstly we'll perform the over sampling of the minority samples so we'll use method equals over and then we
have our n argument which will be the number of rows in the new data set after the over sampling is performed so that
is equal to the number of new and total which is 45 500 rows and then we also
use the seed function so that if we run this code again so we will be getting the same sample again or the same number
of oversampled rows again and again let's run this function now to get our over sampling result so after running
this function if you want to if you just click at the variable that is has been created so here you can see we have
different attributes of this variable that is over sampling result so data is actually stored in the data attribute so
if you want to reach the data attribute you can use the oversampling data and then the data attribute and will store
the data set in over sample credit so if you store the result in over sample credit and now if you look at the
distribution of the classes that we have after random over sampling so you will find that we have 22 750 legitimate
cases and 22 750 fraud cases so now the distribution of our fraudulent and
legitimate cases are equal using the random over sampling so before moving ahead let's plot this distribution using
the same v1 and v2 columns of our overlay over sampling result so now if you click
click at the over sampling credit so this is our whole sampling credit we have 45 500 rows so let's plot a scatter
plot between v1 and v2 and see what is the distribution of classes between these two variables so we'll use the
ggplot function to plot a scatter plot again so here now our data comes from over sample credit here and then we have
the variables v1 on the x-axis and v2 on the y-axis and the color of the points will be according to the categories of
the class column that is 0 and 1 and then we'll use the geom function so if you want to plot a geom so if you want
to plot a scatter plot we'll use the geom point function and then the theme of our plot will be black and white
using the theme function and the color of the points will be dodge blue and red so if you want to change the color you can use this scale color manual function
so once you run this command you will get a scatter plot between v1 and v2 that represents your over sampled data
set that we have just created using the rows package so now if you zoom in here you will find that we have the blue
color or the dodger blue color as class 0 which is the legitimate cases and the
red will be our fraud cases so as you can see still we do not our points do not represent a lot of points compared
to the blue points so the reason is that in our random over sampling we create duplicate points so most of these points
are overlapping on each other because we involved random over sampling will just create duplicate points that are already
present in one dataset so if you want to know whether there are points overlapping on each other or not so
we'll add some jitter to these points once we add some jitter to these points so we'll see that there will be a lot of
points in this on top of each other because we have just created duplicate points using the random over sampling so
to add jitter to the points we'll use the position argument of the geom point function so if you set your position
argument to position jitter and inside the precision jitter function we can mention our width of the jitter that we
want so if you write 0.1 here so now if you run this function you'll find that there will be a lot of points that are
over plotted or stacked upon each other because we have just created duplicate points using the random over sampling so
now here you can see the points when you add some jitter you will find there are a lot of points that are stacked up on
top of each other because we have just performed the duplicate values we have just increased the number of duplicate values
using the random over sampling so now let's perform our random under sampling so in random over sampling we just train
our model and duplicate values which is not a good condition so we'll see what is random under sampling so in random
under sampling we'll reduce the number of legitimate cases we'll keep the legitimate cases equal to the number of
fraud cases so let's first of all see the distribution of our credit card data set so we have this distribution we have
around 22750 legitimate cases and only 35 for our cases in our training set so
now if you want to set the number of legitimate cases equal to the number of fraud cases so we'll use this method so
first of all we will store the number of fraud cases in and fraud and then we'll calculate the or we'll store the
fraction that we want for our fraud cases or legitimate cases so we want the
number of fraud cases equal to zero fifty percent of the whole data so we'll store that is that in and frac fraud and
then we want to calculate the number of rows that will be in your data set so that our fraud cases and legitimate cases are equal in number so we'll
divide the number of broad cases by the fraction that we want our fraud cases to be in that is 0.5 so once we divided
we'll get the total number of rows that we need in our data set to satisfy this fraction and once you run this particular command
so if you look at your new total so now we'll later we our data set will contain
70 rows and out of the 70 rows 35 rows will be number of legitimate cases and 35 rows will be number of fraud cases so
now let's use the one dot sample to create that particular data so we'll use the same one dot sample and now instead
of mentioning the method as over we'll write method as under
and then all of the arguments are same so you just have to change the method and once you run this particular
function or per particular command so now your under sampling result will be calculated
and now if you want to get to the get to the data set that is stored in under sampling results we will get the data
set attribute or the data attribute of the under sampling result and will store that in under sample credit so once you
run this line you will have your data set that is under sample credit and if you look at your data set right now so
we have around 70 rows and out of this 70 rolls 35 rows will have will have register made cases and
35 rows are fraud cases so now let's plot a scatter plot between same v1 and
v2 to see how our distribution of the points look like and the distribution of the classes look like between these two
variables v one and v two so if you plot it now so you will see that and now we have equal number of register
medications and fraud cases so in random over sampling we decrease the number of legitimate cases to a certain ratio so
that we we can we have more or we have an equal distribution of legitimate and fraud cases but the problem here is that
we end up losing a lot of data which is not preferred in a general case so now
we'll perform both the random over sampling and under sampling to see how our data actually looks like so now
we'll perform both random over sampling and under sampling so now the number of rows that we want in our dataset will be
equal to the number of rows that are present in our training set so our new dataset will also contain the same
number of rows that is two two seven eight five and now we want our fractions of the legitimate and fraud cases
equally in our dataset so out of the twenty two thousand seven eighty five rows fifty percent of the rows will be
fraud cases and fifty percent of the rows would be legitimate cases so we're not going to increase or decrease anything we're just going to resample
our dataset in such a way that 50 of the rows will be broad cases and 50 of the rows will be
legitimate cases using both random over sampling for increasing the number of the fraud cases and random under
sampling to decreasing the number of legitimate cases so after storing our fraction in the fraction fraud new
variable we'll use the same oven dot sample so now we have used the method as both so here if you want
to perform both random over sampling and under sampling you can use the method as both and then the n argument here is the
number of rows that we want in our new data set and then the p is your probability of fraction so if the method
is both here so the probability will be default by 0.5 so 50 percent of the rows will be your legitimate cases and 50 of
the rows will be broadcases and then we have used the seed function so that we get the same sample again and again if you run this code again so now if you
run this code and if you get to the data set using the data attribute of the sampling result you
will store that data set in sample credit now let's look at the data set so we have around 2785 rows and out of the
2785 rows you can see around eleven thousand four thirty rows are legitimate cases and eleven thousand three five
five rows are fraud cases so if you get the poi if you want to get the percentages of these rows so we'll get
around fifty percent of the theta are legitimate cases or legend legitimate transactions and 49.8 percent are fraud
transactions so now let's plot a scatter plot between v and v 1 and v 2 so to see
how our class distribution looks like so i've already added some jitter so that we can see the overlapping of the points
because we have performed random over sampling and unassembling both so we have reduced some number of legitimate
cases and we have increased some number of broadcasters so now they are in equal ratio but the number of fraud cases are
overlapping on each other because there are duplicates of each other and the number of legitimate cases are scattered
on hold of the plot so now let's move ahead and use the third method that we use which is called this mode which is a
synthetic minority over sampling technique which will add the synthetic samples in our data set without actually
creating duplicates of the fraud cases so to implement smart we use this library called smart family so if you
have not installed this library you can use install.packages and the name of the library to install it first and then
after installing you can use the library function to load the library to use the functions that are contained in this lab
so after loading the library if you look at the class distribution we have the same class distribution that is 22 750
are legitimate cases in our trained data and 35 are the fraud cases is not trained
so now we want to increase the number of legitimate cases or we want to add synthetic samples of the
floor fraud cases so that we have a balanced data set that we can use to train our model
so we'll start by first of all setting the number of fraud and legitimate cases and the desired percentage of the legitimate cases that we want in our
dataset so our legitimate cases are represented by n0 here so we have we have around 22 750 legitimate cases
and n1 are the broad cases so we have around 35 fraud transactions and then r0 represents the ratio that we
want in our data set after the smoke so we have we want sixty percent of our
rows should be legitimate cases and forty percent of the rows will be fraud cases
so we'll add synthetic samples in such a way that after adding the synthetic samples or data set as sixty percent of
the legitimate cases and forty percent of the fraud cases so now to get the number of times that we have to perform
smooth to get the desired number of ratio of the legitimate and fraud cases so we'll use this more function first of
all from this mode family and if you want to know more about this function you can press f1 here and you can see we
have different arguments that it's x which is our data that we want to apply smarter then we have our target value so
the vector of the target class attribute corresponding to our data set x so our x
will be our independent variables and our y will target will be our dependent variable that we are going to predict
later on and k is the number of nearest neighbors we want during the sampling and then we have our dub size so it will
be the number of times we run our smooth or number of times we want to run ours more to add different synthetic samples
so if you want to get the number of the tube size which will actually tell us how many times we have to run smooth in
order to get the desired percentage of our legitimate and fraud cases so we'll use this formula so this formula will
help us to get the number of times we have to run smooth in order to get a percentage of
synthetic cases such that our final data frame contains 60 of the legitimate cases and 40 of the fraud cases so using
this formula which contains both r 0 and 0 and n 1 uh once you run this here and
before running this we have to run these three together and after that if you run this so if you now look at the number of times we will get we have to run 432
times so after running 432 times on this mode we'll get to a value of your
variables in such a way already of the points in such a way that or 60 of the points will be flagged as legitimate
transaction and 40 percent will be for our transaction so we'll use the small function first of all and or x will be
our training data so if you look at your trained data right now so clean data first column is our time column so in we
are not going to use this particular column because we are only going to use these features v1 and v2 up to v28 so we
will be removing this particular feature from our data and then we will also remove the last column which is our target column
which is our class column 31 31st column so we'll remove these two columns and our training data will be
from amount till v1 so after declaring our training data that is our x
now we'll declare the target so our target is our class variable that we are going to predict either 0 or 1 and the
number of neighbors that we want is 5 and then the tube size is equal to the number of times so once we run this particular code so
we will get our output has smart output and if you right now if you look at this mode output
so it will have different attributes and our data is stored in our data attribute here so we'll get a data set
which is data frame from this particular attribute so we'll use this attribute data and we'll store the data set which
we have created using the smart method so once we
run this particular line and if you could now click at the credits mode we'll get the data set that has around
37 905 entries and around 30 columns so we have removed the first column and our
last column is our class column so the class column around 60 of the
class values will be 0 that is legitimate cases and 40 percent of the class values will be one which is fraud
cases so now let's change the name of this variable to class with an uppercase c so
that we can we are according to the all of the data types that we have in our or all of the data frames that we have used
till now so we'll change the first of all the name of our last column that is our 30th column
to class with an uppercase c using the call names function so after
changing the name of the class so if you want to now get the percentage of the number of legitimate and fraud cases in
our data set so we'll we can use the prop table function and then we'll pass a table function which will get the
distribution of the categories present in the class variable
so now you can clearly see that we have around 60 of the legitimate cases and 40 percent of the fraud case is represented
by one so now let's plot a scatter plot between v1 and we do and compare the
original data set with the data set that we have created using this mode so this will be our original data set
where our data comes from the training data that is without smoke and the rest of the code is same as above so this
will be our original scatter plot between v1 and v2 for the training data so now let's plot a scatter plot for the
v1 and v2 in the credits more data after we have used the credit or after we have used
this mode method on all training data so you have just have to change your credits mode the data that
you are passing towards plot function so once you run this function you will see that we have added a lot of synthetic points around
40 of the synthetic points using this mode method so now if you look at this particular data you can see the blue
points represent class 0 which is the number of fraud legitimate cases and the red points represent number of fraud
cases and you can see we have not only added a points but we have only we have added synthetic points and not the
duplicate points so these are all the synthetic points that our smooth algorithm has added
using this mode method and now after creating this particular data we'll train our model on this data and then
we'll evaluate the performance of the model on the original test data so now after making the data set
60 into 60 and 40 ratio so the 60 percent of the cases now are legitimate cases and 40 percent of
the cases are fraud cases so now let's build a decision tree on top of this data so that we can predict whether a
transaction is fraudulent or legitimate so we'll be using the r part package to
build classification and regression trees so and we'll use the r part dot plot package to plot the regression
trees or the classification trees so if you have not installed these two packages you can install using the install dot packages command and install
the packages for our part dot plot so once you have installed these packages you can load it using the library
function and once you load these packages now we'll use the r part function to make our classification and
regression tree so if you press f1 here you will get to the description of this particular or the
documentation of this particular function so the first argument here is a formula argument where we have to
mention the independent and dependent variables so now we are predicting the class variable
so the classes are independent or the dependent variable which we are going to predict and we will use all of the
variables except the class variable as independent variables so these are if
you want to write all the variables you can use the dot instead of writing every single name and then we use we use tilde
sign to separate our independent and dependent variables and then we'll pass our data that we want to train our model on so now our
data that we will train one model on is a credit smart data which is our balance data so once we run this we'll create a
tree which will predict the number the class of any particular sample based on all of
the variables so we'll store the tree in cart model variable so after building a decision
tree on this particular data so now let's plot the decision tree using the r part or plot function so we just have to
pass our model that we have built that is our card model and then we have used extra equals 0 so once we plot this
model we get a decision tree so if you don't want any extra information on the leaves
we write extra equals zero and type equals five will change the display of
these plots the shapes that we have used in this plot and two week equals 1.2 it enlarges
the text to 120 percent so the text will be enlarged by 120 percent so this is
how the decision tree that our model has built so it will use only one column in our data set that is v14
and it will use this column to classify different samples so
particular columns v fourteenth value is greater than minus two point six so that
sample will be classified or that transaction will be classified as a legitimate transaction and if it les if
it is less than minus 2.6 so that transaction will be classified as a
fraud transaction so now after building the decision tree let's now predict values on top of the test set to see how
many samples are correctly and incorrectly classified so we'll use a predict function to predict the values
on top of the test set so we'll use the first method that the first argument that our predict function takes is our
model that we have built that is our card model and if you want to know more more about this function you can press
f1 here so it will take you to this particular documentation so we'll use the cart model that is our machine
learning model that we have declared above and then the data that it wants to predict on is our test data and then we
want to predict classes so it will predict whether a class is zero that is legitimate cases legitimate case or
class one that is fraud transaction so it will predict on top of the test data and then we will compare the predictions
with the actual values of the test data that we already have with us so that we can
see what is the distribution of the correctly and incorrectly classified values so we'll store all the
predictions in predicted val variable so once we have predicted value variable if you
look at our predicted value variable looks like so here you can see the first value is four
if you go to your test data so here you can also see the first row of the test data is the fourth row of our old data
set and if you want to see what our model is predicted so for this particular
row the class value is zero and our model has also predicted zero and for this uh the second row the class value
is zero and our model has also predicted zero so if you want to know how many predictions are correct and incorrect
according to our model and the actual values so we'll build a confusion matrix to see how many predictions are correct
and incorrect so let's build the confusion matrix using the carrot package so i'll load the carrot package
and then i'll use the confusion matrix function where i'll pass the particular values first and then our actual values
that are present in our class variable in our test data so once you run this you will get the confusion matrix for
this particular model so you can see here our true positives are five six two five and
our two negatives are seven so out of nine samples that we have in our test data are seven samples
or the sam seven fraudulent cases were correctly classified by our model that we have built using the credits more
data that is after using this mode method the data that we have built if we use of build on our model on top of that
so we'll get our out of nine cases that are present in our test data or nine cases seven cases
which are fraud cases are actually classified so we'll be able to detect seven cases
out of nine cases that are present in our test data and here accuracy is insignificant but still if you want to
see the accuracy our accuracy is around 98.98 so now if you use the model if you build
at the same model without using small data or on the original trinity and let's see what is the classification
rate or how many samples are incorrectly and correctly classified so this is our decision tree
without using this more data so now our data is actually the trend data and i've
excluded the first column of my data that is our time column so we will only using the variables v1 to v28 and then
the amount column not the time column and the rest of the code is same so this is our formula which dependent variable
that is class and independent variables the rest of the variables that are present in our data so we'll use this particular function r
bar to create a classification regression tree and we'll store the modeling card model and after that i will plot the card
model so this is our model looks like this is a decision tree that our model will use to classify different samples
based on the legitimate cases in the fraud cases so now let's predict on top of the test set and see what is the
classification of the miss classification rate so we'll use the same predict method and then we'll call
the card will the predict function will mention the first argument as our model that is our card model and then we are
predicting on the test data so here also i have excluded the first column so if you want to exclude the
first column of the test data you can write this so here it will include all the rows and it will not include the
first column that is our time column of the test data so test it how it looks like so if you want to exclude this
particular column because we are not going to predict using this column so you can write -1 here and after that we
have to add type equals class so it will predict classes for each sample so it either it will be zero or one so now we
have predicted the classes of the test data using our model that was built on the original train data without using
smooth now let's look at the confusion matrix so now if you now look at the confusion matrix you can see that our
two negatives is six so out of the nine samples we are only able to classify six samples if we use
the data set that we have that is our trained data without using the smooth so now let's compare these two models
using the whole data so now instead of predicting on the test data we'll predict on whole of the data set and
that will show us how many samples will be correctly classified by a model that was built on smooth and by a model that
was built on the original data that is unbalanced data so first let's build our model that was built on the credits mode
so this will be our model that we built on the credits mode now let's predict on the whole credit card data set it will
contain all the values so we'll link exclude the first column and then we'll predict the classes and we'll store the
predictions in predictval and after storing the predictions let's see the confusion matrix so in this computer
confusion matrix out of the 44 samples that we had in our dataset 40 fraud
cases were correctly classified by using the smart data or the model that was built on this more data because our true
negatives is one so these are the sample servers that was the transactions that were actually fake
transactions one and our model is also also predicted that these transactions are fixed so out
of 44 40 transactions were actually correctly classified and now let's build the same model using the model that was
built on the train data or the original data without the balancing factor or this mode after
creating this data that is built on the original data set that is unbalanced and now let's predict on the top of the
whole data set and now if you build the confusion matrix so you will see that we have only 35 right now so we have x
using this mode we can easily detect five more samples then we can detect using the unbalanced dataset so that is
why using smooth is preferable because it balances balances that balances the data set
first and then it predicts so you can easily see we are able to classify more fraud cases using this mode which
is 40 instead of using the original data that we have which is unbalanced
okay guys a quick info if you're looking for an end-to-end python certification training we at intellipaat provide that
and you can check those details in the description okay guys we've come to the end of this session i hope this session was helpful and informative for you if
you have any queries regarding this please leave a comment below and we love to help you out thank you
what's going on guys assalamu alaikum welcome to amigos code my name is nelson and in
this course you're going to learn how to code this course wouldn't be possible without
the collaboration with intrigue quickbooks we decided to package up
this course to give you everything you need to kick off your career in technology
we know during this pandemic things have been really hard but we want to give you
the knowledge that you need to explore technology as well as programming in this course
i'm going to make sure that you understand what programming is what you can do with programming
and then we're going to learn about python so python is an easy to learn programming language
suitable for beginners and by the end of this course you will understand exactly how to work
with python you'll learn how to write some code execute some code learn about core concepts such as
classes loops variable functions and a lot more but more importantly we wanted to give
you everything you need to give you the boost right so towards the end we're going to build
together an application that can ask you a series of questions either text
or voice and then it will generate you a cv then we're going to take that cv
and we're going to build together a portfolio and this can be your starting point literally this can
be your starting point and you'll see that programming is not that difficult a lot of people think
that programming is just for people that know lots of maths or really clever people but don't you worry
i'm gonna simplify things so that you fully understand this awesome programming language if
you're new to my channel go ahead and subscribe it means a lot to me also join the private facebook group
as well as discord because the community is growing there are over 10 000 people learning
how to code and you should be part of it without further ado let's kick off this course
join me inside
right before we begin this course i just want to tell you that as you follow along i want you to
practice literally just follow through every single example
get ready get your laptop ready and let's practice practice practice
practice that's the only way that you will benefit from this course and i really want to add
value but you need to practice as i teach also join both facebook as well as
discord because the community is there to help you i don't want you to feel alone in this
journey for discord i've created a dedicated channel
for people that enroll to this course that way if you have questions
we're going to be there to answer every single question that you have but also if you live in the uk we're
going to be sending out freebies to you guys this is all i wanted to say without further ado let's kick off
this course
for this course you're going to learn about python python is a programming language
so programming language is a language that a computer can understand the same way that we have
different languages i.e spanish english french portuguese so on and so forth it's the
same way when we talk to computers so we have python as one of many programming languages
python is really suitable for beginners because it's easy to learn and in this course i
want to make sure that you fully understand this language with python you can do many things
right you can build websites you can build games you can build desktop applications web applications
if you are into machine learning if you are into data science python is the tool for you right
but don't you worry about these things too much because first let's understand how to use
this language and then you can decide which path that you want to take
so now that you know what python is let's go ahead and install python in our local machine
so i'm going to be using a my computer but this setup that we're going to go through will work for both
windows users so let's go ahead and navigate to google.com and in here and
type python so just go ahead and simply type python and you can see that we have this page
where it says welcome to python so this very first page so python.org and
in this page right here you can see that we've got the downloads link so go ahead and click on
downloads and right here because i'm on a mac i can see the download link for
mac os but if you are on windows simply click on windows or linux you can
simply use the version specific for your operating system which is cool
also right here you can see that these are the active releases so the active release right now so the
latest one is 3.8 right here and if i show you so 2.7
has reached end of life so you shouldn't really be using this version right here and
if i scroll down you can see that we can have um you know specific release versions
right but usually just go ahead and download the latest version which has support until
2024. so right here you can see that the latest version as i speak is 3.8.5
you might watch this video later and if you haven't if there is a new version everything
that i'm going to teach you in this course will work with the version that you will install so let me go ahead and simply download
python there we go let's finish now let me open up the downloads folder
and in here you can see that i've got python so let me simply click on it and let me just collapse
this so the installation process for both windows and mac os is really
straightforward you just simply have to press continue and then agree and then install
so before i actually press or actually put my password if you are on windows
make sure to tick the box that says add python to the path right so that's
really important so that you can use python from your terminal so
on the mac it does it for me so right here let me put my password install just give you a second and there
we go so we've successfully installed python next let's go ahead and install a
program that will allow us to write python code
right now that we have python installed in our machines we need a way of us writing some python
code in order for us to write python code we need to use a text
editor so the same way that if you write english or you want to write some
documents you use for example microsoft word well when it comes to programming we
have specific text editors that allows us to write code in any programming language and the text
editor that we're going to install to write some python code will be vs code so vs code is an amazing text
editor built by microsoft and is widely used in the industry let's go ahead and
install it
if you navigate to google.com and then type vs code so this first link where it says visual
studio code in here so let's click on it so in this course we're going to write
python code so we can use vs code to write python code but we can
also use vs code to write any code in the other different programming
languages so this tool is actually made by microsoft and it's
very popular so that you know now let's go ahead and download so simply click on
download and then in here you can see that we have different operating systems
so if you are on windows click windows if you are on linux click linux if you are on mac click on mac so
the installation process is very straightforward so in here
because i'm on a mac i'm going to download for mac
just give a second i'm going to allow now to download and there we go and there we have it so
i do have this visual studio code app right here so this is the actual
application itself and if you don't see this on your desktop it's because you have a
different destination when you download applications right or files most likely it will be inside of the
downloads folder now what we're going to do is we're going to take this application and then put it inside
of the applications folder and only do this step if you are on a mac computer
now let's collapse this and then let me open up the finder there we go
and i was saying so if you don't see this file inside of desktop it's most likely inside of the downloads
folder now let's open up applications so this is where we have the list of all
applications and all we got to do is just put it inside here
and there we go it's as simple as this now we can click on it
you can see that we have vs code installed
all right so what we're going to do is create our very first python project together so what we're going to
do first is create a folder in our desktop so right click and then new
folder and then name this as learning and then dash python
so this is the name of the folder now what we're going to do is inside of vs code you can see that we
have this section where it says start you can see new file open folder add workspace folder
so click on open folder and then navigate to desktop and then
select the folder that you've just created and there we go so now you can see that
this is the name of the project learning dash python so it's just the
actual folder that we have specified so here you can see that we have this
welcome tab we can close it because we don't need it and what we're going to do
here first is to install a plugin for python so vs code allows us to
install many plugins for working with various different languages so
if you want to work for example with python there is a plugin for python if you want to work with javascript
there is a plugin for javascript and for us we need a plugin that will give us a lot of features when
it comes to work with python and you'll see this in a second so in here you can see that we have
these little squares and in here we can search for a bunch of
extensions so you can see that the popular tab here we have python at the beginning so
if you don't see python just search for python and then just select the very first one
so if i select that one you can see that it has 26 million downloads
so it's quite impressive so in this page you can scroll down you can see what
this plugin is all about but you're going to learn very shortly what it has to offer
so let's install this plugin so click on install
and that's done you can see that it says this extension is enabled globally so the quick start
section here you can see that it says install the plugin and then
step three open or create a python file and start coding so let's do that so we're going to come out of
this extensions tab so click on explorer in here and
inside of learning so you can see that we have a couple of sections here but in here so learning
dash python so expand that and then you can see we have this button
where we can create a new file so click on the button and let's name this
file as my and then underscore and then app and then say
dot and then py so this is very interesting uh when you say dot
py so something is happening here so if i remove dot py you can see that
in here we have these lines right and as soon as i say dot py
check this out we have the python logo so what this is saying is that we have a
file that has the extension of python so if you want to work with
python every single file that you create has to have the dot py so the same for example
if you want to work with a different programming language let's say javascript
simply type j and then s and you can see that we have the javascript logo
if i want to work with java i can type dot and then java
you can see that the logo changes right and basically you have different extensions
so the same for example if you have worked with microsoft word for example this is the
um file extension so dot and then dock and you can see that we have the microsoft logo right there so because we
are working with python we need to say dot and then py every single file that we create has to
have the py right here so this is where we're going to have our python code
so press enter and what i'm going to do here is put this
full screen by clicking on this green button just like that and then i'm
going to press command and then plus so i want to zoom in so you can see everything what we're doing
so here you can see that vs code is telling us that linter pylint is not installed so this
these are just extra extensions so just install
and just give a second
and basically if you see any other things that needs to be installed for python just installed there are extensions so
let me close this and then close this file here
and now check this out so if i close the extension tab as well
so here now this is our file so if i close this again so i want to show you so here we have
the my underscore app app.py click on it and you can see that this
is our python file so in here we can start writing some code
and that's what we're going to do next
let's write our very first python program so what we're going to do here is the
following so inside of this my underscore app.py you can see that we have this line
number here so if i click on this file you can see that we have the cursor
so here this is where we can start writing some python commands to build any program
that we want so in here if i press enter you can see that we are getting
these line numbers right here and they represent the number of lines of codes
that you currently have so currently we have zero lines right
oh actually we have one line which is empty but let's create a python program that will print to the
console hello world so what i'm gonna do is if i first make
this bigger because i think it's best if you see it properly and in here i'm going to hide this panel right here
so click on explorer and that will hide if you need it again just click on it
and you can see that it brings it back so let's just hide that for now and in here we're going to write our
python program so let's type together so print and then open parenthesis
and then add single quotes so if you press on the single quotes that will give you two quotes
but if you have one just add another one and then end parentheses just like that
so here what we're going to do is say hello and then world so this is a very
common program for beginners right so hello world and now to run this program
let's click on this play button so this will run the python
file in the terminal so if i click on it
you can see that we have some text but if you look carefully we have hello
world and this is our very first python program so let's close this and let's change
this a little bit so before we print to the console let's type
together name and then space equals to and then type
input and then inside of this input let's
add single quotes and then what is your and then name
and then add a space at the end now this is a variable and i'm going to explain
variables in a second but this will now contain anything that we
input from the console and what we want to do is to say hello and then instead of world
we want to remove the word world and then have a space in here and then
space after this quote and then plus and then name
just like this and basically we are saying we want to print hello
plus whatever we pass to the console so let's run the program and now if you
look carefully in here we have what is your name and basically we just have to type
anything here so for my name i'm going to say nelson and make sure that instead of
nelson you have your name so here i'm going to press enter
and have a look we have hello and then nelson so if i run it again
and then let's say that the name here is maria and then enter and you can see that we
have hello and then maria so if i close this and there you have it you successfully
created your very first python program
right let's go ahead and learn about a very important concept that you need to know and that is variables
the way that i like to explain variables is by using the box analogy so
in programming you can think a variable as a box right so imagine that this is a
box and now inside of this box you can store literally anything that you want
for example you could store number four inside of this box
right now this box has the value of number four and we have to give it a name for
example we could have named this box right so the name the name
would be for example number right so when we say number we get the value that's inside
of the box right so you can store numbers but you could also store letters
right sequence of characters and you'll see this in a second so for example let's say that this is a
sequence of characters so k for example and let me just take for example b
from here right you put it inside and you can add more letters right but you'll see in a second
how all of this works right so now here so this box has
some sequence of characters right and i also have to give it a name so let's
say that for example this contains um a name right of of a
person so here i could just say that this box name is jamila for example right because it
has the value inside of jamila right so if i take this you could also
oops you could also store an emoji and by the way just give me a thumbs up if
you're enjoying this video but you could also store an emoji and literally you could store
anything i can take my phone put it inside here right it doesn't fit but you know
this variable now holds my phone and you'll see um how to to represent things in the
real world later on with python right by using classes so there we go so a a variable it's
simply a box that you can store literally anything inside and as you saw
with our example where we have name equals to input right so
name was the name of the box right and then the input was whatever the
user typed on the console was stored inside of the box and then when we
printed the name it just took the contents inside and then it just gave it to us that's
why you saw on the console the output of the name but
you'll see lots of examples throughout this course but i feel like this is the easiest way
that you're going to learn what variables are in programming let me go ahead and show you
exactly how to use them all right so let's go ahead and delete
the previous example in here and to create a variable in
python it's very straightforward so here we have to
give it a name so any variable that we want to specify has to have a name for example
in here i can say name and then equals and in here i'm going to
type single quotes on both sides and this variable will have the value of
jamila so this variable has the value of jamila
now again think of a variable as a box right so a box that has one and only one
thing inside and in our case the box has the contents of jamila
and we have named the box as name we can also create a different
variable right here let's say age so this variable h right here
equals two and then now we can say 18. so let's say that jamilah she's 18.
and we have a second box named age that has the value of 18. so remember
that i said with variables we can store anything that we want so in this case you can see that we are
storing a number so 18 this is a number
and in here so name is storing a sequence of characters and in
programming a sequence of characters is called a string
so a string so let me actually type this to you so string like this right so this is
what we represent as a sequence of characters so this is jamila and then 18
instead of number we say that this is an integer and in fact if i put my
mouse in there you can see that 18 and then column and then int int stands for
integers and integers are whole numbers now let's create another
variable so here i'm going to say pi equals two and then three point one and then
four and now this number right here is different than this one right so this
is a whole number and this is a decimal number right here and if i put the mouse there you can see
that now it says 3.14 column and then float right so these are decimals
and these right so you see that we had strings we have integers we have floats
so these are data types so they are called data types and i said
that if you have a variable so if i say a variable and then equals
so inside of any given variable you can store anything that you want and that thing
inside of your variable has a data type so you're going to learn
more about data types but i just want to show you the basics of creating variables so let me show you
another data type so for example if i say cars equals 2
and this time add square brackets on so open square brackets and then
close square brackets right and then here let's add single quotes and then type bmw
so this is one car comma and then single quotes and then here
let's say mercedes and finally let's have one more car and then this will be
wrench and then rover right so you can see now this variable right here so cars
right so if i put the cur the cursor on cars so the data type now is a
list and we're going to cover more about lists but basically lists allows you to store more than one
value and here we have bmw mercedes range rover and you can have as many
values inside so again each variable has a data type so if i put my mouse
on the name variable here you can see that this name is a str and sdr stands for
string h this is int pi this is float so floats are decimal
numbers and in cars so this one here is a list
this is how you create variables with python and obviously we can print these to the
console so type print and then name and then age we can also print pi and finally
let's print cars just like that and if we run the program
you can see that we have jamila 18 3.14 and then the list of
cars
right let's learn how to work with strings so strings are very important in
programming and you will end up using them quite a lot so in here we have a variable
name equals to jamila and let's have a second variable
say surname equals to and then smith right here so jamila
smith and what we want to do is to have a second
variable so full so we're gonna name this as full and then underscore
name equals two and we're going to name this and what we
want to do is take both name and surname and then store them inside of full name
so for this we can use the plus sign so name and then
plus and then sir name and in fact this should be first name
so first underscore and then name and in here first and the score and then
name so this refers to this variable surname refers to surname so now
let's print to the console and then within parentheses we want to say
full and then name so if i run this program
you can see that we have jamila and then smith now we actually need to have a space
here so let's do it so let's close this and in here we're going to say plus
and then add single quotes space and then plus and then
space and then surname so if i run it you can see that we have jamila and then
space and then smith so if i close this now let me show you that with
strings we can do many things with it so let's say that you want to find out
the number of characters that first name has so type print so we want to print to the
console the number of characters that this first name so jamila has so type
l e n for len and then in here add
parentheses and then inside pass first and then name we can also
print and then parentheses and then len parentheses and then
surname so if i save this and then run and you can see that
jamila has six characters and smith has five characters right so if i close this
again one other thing that i want to show you is which strings let's say that in here so jamila
right so jamila has lowercase j so if i save this and then run it you
can see that we have jamila lowercase and then smith uppercase right but we want to
have an uppercase in here so j uppercase the way we do it
is in here so with this variable right here we can say
dot and now we have a list of methods that we can use with
strings and again i'm going to cover methods later on but here you can see that for example we
have a bunch of methods so is lower is numeric is upper
join lower split title so on and so forth so
let's use this method here called capitalize and then end
this word with a set of parentheses just like that if i save this
and then run you can see that now jamila has a capital j
so just to give you one more example so let's say print in here and let's say
full and then name dot and we have a list of methods here so
let's uh say that ends with so we want to check whether this
ends with and then this string right here so let's say that ends with hello so run this
and you can see that we have false right so if i close so jamila smith
so the full name doesn't end doesn't end with hello it ends with smith and you can see that we have
true so we haven't covered this value right here so true or false but don't worry i'm going
to explain exactly what these mean in a second this is how you work with strings
obviously there are a lot more that you can do with strings but this is just a quick introduction on
how to work with strings with python
all right let's learn how to work with numbers in python we can use any of the
arithmetic operators that you are used to so plus minus division multiplication
just like that and then we have one which you might not be used to but this is
modular right so this is the modulus so you can add numbers you can subtract
you can divide numbers and multiply and use the mod or modulus function and i'm going to show
you this right now so let's say that you want to
add two numbers so let's say that you have a variable and
we're going to name this as addition equals two and then you want to add
10 and then plus and then five right so we know that 10 plus 5 is 15.
so here i can say print and then edition and
i've got typo so this should be a addition and in here addition as well and then
run the program you can see that we have 15 right here so i was actually right
so we can also subtract numbers so let's say subtract
or subtraction equals 2 10 minus and then 5
let's also do a multiplication example so
multi application equals to 10
and then times and then five so the times is just a symbol star right
and then five and let's do a division as well so division
equals to 10 divided
10 and then divided so this is a symbol and then by five now
let me print these to the console so we just had a space there print and then subtraction
multiplication and finally print and then division
so if i save this run the program you can see that we have ten plus five
is fifteen ten minus five is five ten times five is fifty and 10 divided
by 5 is 2.0 so here we get a decimal number and this is how you work
with numbers and perform arithmetic operations on them so one last one that i want to show you
is the modulus so mod i'm going to call it mod and in here equals to and then let's say
10 and then mod and then 5. so this is an interesting
one so print i'm gonna say print in here and then we want to print mod
so if i save run you can see that we have zero so let me explain this so
what this is saying is how many times five goes into ten
right so five goes into ten two times and what is the remainder so mod is
simply the remainder right so five goes into ten two times and the
remainder is zero hence the result was zero if we say for example three right so we have
three here so how many times three goes into ten well the answer is three and then we
have one number left and that number is the remainder so if i save this run it and you can see
that we have one let me give you yet another example so if we have four for example
right four goes into ten two times and then we have two as the remainder
right so four plus four is eight and then if you add two we get ten so
two is the remainder and you can see that we have 2 in here
so there you have it this is how you work with numbers and perform arithmetic
operation on them
sometimes you need to know whether an expression is either true or false and this is
when the boolean data type comes in so you saw that before
you saw this value true and you also saw false right
so you saw these two values here so true or false so these two values are used when
you want to know whether something is true or false so just to give an example
let's say that we want to print to the console we want to say whether 10
is less than 10 for example right and
remember maths so this is the uh less sign right so
the way i remember these signs is this one right here has like a l shape and it
means less basically so we want to know whether 10 is less than 10
so this will give us false in here see that the result
is false so we can also use 10 is less or equal to 10.
so this is actually true you can see that this is true so
here let's have a couple more examples so print and then let's say zero equals
so we can say two equals to check whether and two values are the same so zero is
equal to zero let's say print and then
18 greater than 5 and we can also say print
and remember our example we had jamila and then if i say
dot and remember the method that we use ends with let's check
whether jamila ends with and then have single quotes in here and then s
yep so if i take this line so i'm just gonna command c command v
so copy and paste and change that to a so if i run this
you can see that we have true true true false and then true right so
these are the expressions so 10 is less or equal to 10 it is true
zero equals to zero and let's just change this to uh one for example right
so zero equals to one this will give us false eighteen is greater than five jamila
doesn't end with s right so this gives us false
and then we have jamila ends with a of course she ends with a right here
uh well actually the name jamila ends with a so if i save this and then run it again so we
have false in here so this false here is 4 0 equals
to 1 which is false so there you have it this is how you have expressions so
these are expressions that return true or false so these values for example if i say
is and then underscore adult so i can actually store the value true
in there and then is thin ager equals to and then
false so i can store the values true or false in here right
so i can also print these and will be actually true and the value of false but these expressions they give us
this data type right here which is boolean so a boolean is a value that represents
true or false next let me go ahead and show you why we have this boolean
data type
the reason why we have this boolean data type so either true or false is because
they allow us to perform decisions when writing code so let me
go ahead and and remove all of this in here and let's just say that we want to have
is adult equals to true right so with python we have something called
if statement and what the if statement gives us
the ability to control the flow of our program so here this is how we use the
if statement so if statements they work with boolean expressions so here i'm going to say if
and then is underscore and then adult so i'm just saying if
underscore adult and then add a semicolon here
add a semicolon and then press enter so if is adult
i want to print to the console is an adult right
i want to print to the console is adult so if i run this program you can see
that we have is and then add also this is actually printing is adult if i close this
and then change this to false i want to see that if i run the program
we not printing anything to the console so let me go back and explain this so
here we are saying if and then this
variable is adult so if the value of is adult
equals to true we're going to execute this piece of code right here
otherwise if it's false we're not we're not even going to execute this piece of code here this is
what this is saying so if i change this to true this will actually be
if and then is adult so if it is true we'll print line four else
we're not printing anything right so this is why we have these boolean expressions
so just to give you another example so here instead of saying is adult
what i'm going to do is have a variable here i want to say h equals 2 and then
18 right now after is adult let's have another if statement
so i'm going to say if and then age and then greater or equal to
18 add column and then enter we're going to say print
and then inside you can say adult and i'm going to show you another
keyword so else and then column
and then print and then add these single quotes not
and adult and if i run the program you can see that we have adult right
because this expression has evaluated to true
so if this is true this will be printed and this will be skipped but if
this expression is false this line will not get executed
but the else will be so if i change this to for example 17 run
you can see that we have not an adult so this is how you work with
if statements and booleans so one thing to bear in mind here is
you see that it's very important that you indent so here you can see that
i'm pressing tab to indent this piece of code right so anything
that comes after this if statement has to be on the
same level has to be indented i.e on the same level
as print so if i do this this will not work so if i save this
and then run the program you can see that we have an error and it says indentation error
expected an indented block so you can see that it's even red now so
if i indent this i've just pressed tab and then save and now the error went away so the same
here so if i do this this is invalid so we need to indent this so
there you have it this is how you work with if statements and booleans
right now let me teach you about this data type that you've seen before called lists
so earlier in this course you saw that we had this variable called cars equal
to and then we had square brackets so this is a list that
you can store more than one value so the difference here between so for
example if i say car equals to and then b m w right so the difference between
this variable and this variable is that the data type for cars
is a list so if i put the cursor there you can see that it's a list and what this means is that
we can store more than one value whereas in in this variable which is a string i can
only store bmw right i can only store a sequence of characters so let me
delete this so here let's say that we have uh
three cars so let's say that we have a bmw and then here let's say comma
right so after a single quotes comma and then let's now say that we have a
tesla and comma and let's finally say that we
have a mercedes here right so this variable
cars is a list that has three items in it so
if i say print and then len i can say len
so for length and then i'm gonna pass cars inside and then
run you can see that we have three items in it so
with lists let's say that you want to access this first item here so
bmw the way you do it is as follows so i'm going to say print and then
cars right so if i actually save this and then run you can
see that this gives us a list but what we want is to grab just the
first element the first item in it so let's say print underneath
and then we're going to say cars and then add these square brackets
and then the way that you access this first element is by using
an index so with lists the index starts from zero
so this is position zero position one position two right
is not position one position two and position three when we work with
computers the numbering system always starts with zero so in here we want to say zero
so cars and then zero so let's grab this line let's duplicate it two times
and then here this will be one actually one and then two and then run
you can see that we have three items this was the list itself and then
position zero this was bmw position 1 tesla position
2 and then mercedes if for example you want to access so
if i say print or not even print i can just say cars and then let's try and access
position three right so we know that we don't have a position three
so zero one and then two right we don't have a position 3.
so if i save this and then run you can see that we have an error
and the error says that list index out of range
so if i was to add a second or actually another car so if i for
example say toyota just like that
and here we can now say print
there we go and there you go you can see that we don't have any more
errors and we are accessing the index number three which which
contains the value of toyota so this is an introduction to
lists in python if you have any questions please do let me know otherwise let's
move on
now is the perfect time for us to learn about about loops in python you saw that if we want
to access any item in this list right here so cars we need to say cars and then
the index so cars index 0 index 1 index 2 index 3
if we have another car we need to say print and then cars index 4
right but we can do something much better than this we can use loops so
loops allows us to write some code that will automatically loop through the list allowing us to
execute any piece of code that we want so let me delete all of this and the way
that we can use loops is as follows we can say 4 and then car in and then
cars so add semicolon here and print so inside
say print and then car so you can see that now instead of us
saying car and then index zero index one index two
index three we just saying four so this is the uh for loop
construct so we're saying four and then this here is a variable that will
point to each individual item in this list and then i'm saying
in and then cars so loop in cars basically this is what is
saying right so if i save this run the code you can see that now we
have bmw tesla mercedes and then toyota
so if i was to have another car so this time
honda and then save this run it you can see that it automatically
loops through every single item in the list now let's do something with this
car right here so let's say dot and then capitalize and then save
run it you can see that we have bmw in fact let's just say that
in here let's just say if we're going to say if and then car
equals to bmw we want to do
something so here we want to say a print and then car
dot upper so we want to fully uppercase instead of just having
the first letter in caps and then i'm going to say else so else
we want to just capitalize right so here we need to indent this because
this print statement belongs to else so here just indented like that and now
we're saying loop through cars if the car
is equal to bmw we want to uppercase everything
otherwise we just want to capitalize and capitalize just takes the first
character and then puts it in uppercase if i save this and then run
check this out we have bmw all caps tesla mercedes
toyota and honda all having the first character in uppercase so there you have it this
is how you work with loops in python so loops just allows you to loop through
any list and then you can execute any piece of code while looping through the list if you
have any questions on working with lists please do let me know otherwise
let's move on
in python we have another way of looping and that is using the while loop so the while construct
allows us to loop while a boolean expression is true as soon as it's false
then the loop terminates so to demonstrate this let's say that we have
a variable so let's say number equals 2 and then 0. so we want to
print to the console the number as long as the number is less or equal to 10.
so to do that we can say while so this is the construct so
while and then we can say number is less
or equal to 10 and then end this with column
and then enter and make sure that this is indented right so if i start typing from here
this is not valid code so we have to indent this and you see that if we press enter it
just puts us where we have to be so in here i can say print and then number
so if i save this and run this program
i just wanted to let you know that this program will run forever so check this out
i'm going to press play and you can see that this is actually
printing zeros and it's actually running right and this is because so what i need
to do is actually press ctrl c in here right so we've just
stopped so the reason why it's running or the reason why it's printing
zero all the time is because we told it to do so while zero
is less than ten so what we want to do here is say that
we want to increment the value of zero so to increment the value of zero
we can say number equals to number and then
plus and then one so what this is doing is the following
so here the number is zero right so the value of number is zero
then we print the number and then i'm saying right so number i'm
going to give the number a new value and the new value of number will be the
current value which is 0 and then plus one so zero plus one
is one then the next time that this goes around number
will be equals to number so the current value of number will be one
one plus one two and then it goes around prints two so on and so forth and then
at some point the value of number will be bigger than ten and
at that point we don't execute this loop right here
so let's save this and watch it execute if i run this you can see that
now the program run and it's finished so here you can see that we have zero
one two three four five six seven eight nine and then ten so that is the purpose of
while loops so we can loop while a certain expression is
true now i can also say in here so i can say else and then
column and then print and then i'm going to say in here while and then
loop ended and value of number is
space and then add a plus and then in here what we're going to do is say str
and then pause number so the reason why we are saying str in here so this means
string is because we want to take the number and convert the number to a
string so here we are concatenating strings and strings right so if i
concatenate a string with a number it won't work so we have to say
right take the value of number and convert it to a string
so if i save this and then run and you can see that after the execution
of our while loop it says while loop ended and value of number is 11.
so here check this out so if i put this like this so 11
is 11 less or equal to 10 no
right so 11 is greater than 10. that's why we skip out of the loop and then we print
this else statement so this is how you use the while loop in
python if you have any questions please do let me know otherwise let's move on
let us learn about functions in python a function is a piece of code
that gets executed only when you call it and the main reason for having
functions is that you don't have to repeat code
so here let's say that we have um here let's say that we have age equals 2
and then 18 and we want to say if and then age is less than 18
we want to print and then oops not an adult and then else
print and then hooray i am an adult if i run this
program you can see that we have hurray i'm an adult now let's say that we have a different
age so let's say age and then 2 equals 2 and then 17 right so now i want to do
the exact same thing for this second age so what i need to do is copy all of that
paste that in and then this will be h2 right now if i run the program
you can see that we have oops not an adult so a function allows us to bundle some
code together which then can be used multiple times so in this case what we want to do is
have a function that we can just pass age and h2 and then it will perform this logic
right here so to do that what we can do is have a function so to have a function we have to say def
so this is the definition for creating a function and now we have to give it a name and
we're going to name this as check and then age and then in here
let's for now just have these parentheses and i'm going to show you why we need these
and then column and then here let's simply print and then check
age and then function was invoked so the way that we invoke this function
right so let's actually run the program so i just want to see so here you see that nothing has changed and
this is because we haven't invoked the function so to invoke a function
we can simply say check and then underscore and then h
and now here we need to invoke it by passing these two set of parameters
this is how we actually invoke the function but still this will not work because so invoke the
check function but at this point we don't know whether the function exists because it's defined
down below so what we need to do is take this invocation here and put it after
the function is being created just like that and now if i run this
you can see that check age function was invoked so here what we're going to do
is the following we're going to remove this print and let's grab
this logic so if statement and we're going to put it inside of this
function here so put it like that and then make sure to indent this just
like that and then in here as well so now
i'm going to delete this other if statement because we don't need it and
let's now run the program i just want you to see what is happening so here it says
hooray i'm an adult right so what we want is actually
this age to be passed as an argument so here we have to say
age because he's actually reading this age right and we want this function to work with both
this age as well as this age so for that we're going to say right so here we're
going to receive age and this is called a parameter that we pass inside of the
function right so now what we need to do is actually say right so check age in here so this
one right here we can now pass any number that we want so we can pass
age and we can also say check h and then pass h and then 2
just like that so you can see that we wrote a function which we can now
reuse it and it has some logic inside so if i run this program
you can see that it still works so ray i'm an adult and then oops i'm not an adult so here
let's actually remove these two variables and if i run this you can see that age
is not defined of course right so age is not defined but now we can pass any number so let's
pass 18 let's pass 17 and
let's pass 99 for example so check age
99 and if i run this you can see that it works for any number
that we pass so there you have it this is how you create
and invoke functions in python
and just to illustrate that functions are very important in this language and you
when you start your career you will create lots of functions but python already gives us built-in
functions so here check this out so here remember
we had so here we had let's say that we have this string right here and type hello
just like that now here i can say dot and then we've used the upper right so upper
and then we have to invoke so here we're actually invoking a function so
the same way that we've created our own function so check age so this function is already given to us
by the python library so the same with capitalize and then we invoke the function just
like this you also saw starts and then with
and then starts with takes an argument here so here we have to say uh whether
it starts with or i think we you saw ends with right ends with but the other one is checking
whether it starts and this one is checking whether it ends with and then we pass an argument right
so the same way here so we invoked the function check age and then we
passed an argument in here because we defined a parameter here right so in the
function this is the parameter and then what you pass inside is the actual argument so
18 is one argument 17 is one argument 99 is another
argument and the same here with this function ends with you can pause an argument
right so if i say for example print
and we want to check whether it ends with let's say capital o
and let's duplicate this as well so we pass now o lowercase run the program
and you can see that it's false because it doesn't ends with capital o but it
does ends with lowercase o so this word here hello and that's why we have false and true
so hopefully now you know and understand how to work with functions in python
in programming we have something known as classes classes are blueprints that allows us to
model anything that we want in the real world or in software let me give you
this really simple example so you see this phone right here i can represent this
phone in code right so we can write a python code that will represent this phone right
here and to do that we have to use classes so classes when we use classes
we have two things we have properties and we also have behaviors and actually
i need the phone again so the properties of this phone for example
there would be the brand the color the price so on and so forth and then
behaviors right is what the phone can do right so this phone can take
pictures can make phone calls so on and so forth right so classes allows us to model
anything that we want in the real world and what i'm going to teach you is how to
model a person a real person by using classes right so we have properties so
the properties could be the name age ethnicity so on and so forth
and then the behaviors could be a person can talk a person can walk
a person can play football a person can play many things that person can do right so
these are the behaviors so classes are blueprints that we can use to represent anything in the real world
and they are made of two things properties and behaviors then the cool thing with classes is that
they are a blueprint right blueprint means just a template which means that then we can create multiple
objects so you'll see the term objects being used so objects is the real thing
right so the class is the blueprint and then the object is the real thing
that is made of based of the class for example we could have a class that represent a person and then
i could create one one one object which represents myself and another object that represents you
right and we can have thousands of people right thousands of people and those are the
actual things right so the the objects but don't worry i'm gonna make sure you understand it
let me go ahead and teach you right now right let's create a class that
resembles a person and then let's create two different people so here
the class is our blueprint as i've said so to create class in python simply type class and here we need to
give it a name so here type person and make sure that this p
is capital so classes the name it should always start with a capital letter
and then here column now inside what we're going to do is have a
function and this is very important right so this function is how we instantiate the actual
object right so here let's type def for a function so this is a function
and then type underscore underscore and then init and then underscore underscore
now add parenthesis and type self so self here
will refer to the current instance of the current class and you'll see this in
a second but here we want to pass two things we want to pass name when we create
a person and also age right now add semicolon
and now type self dot and then name equals to
name and probably this is the most difficult thing that you have done in this course but don't worry you will understand in a
second and also type self dot and then h equals 2 and then
h this is everything that we need for our class at
this point so this class has two properties name
and age let's now come out of the class just like that
and what we're going to do is create two people so to create a person let's say that we
want to create a person called john and then say equals and then person just like that
so person is this class here so capital p and then
parenthesis now remember because this is a function so this def init is a function and it
corresponds to this one we have to pass some arguments here we have two parameters name and age
so the name that we want to give to john is actually john just like that and then age
let's say that john's is 22 and there you have it now we have the
real object so john is an object so this is the real thing now right
so from our blueprint we created john let's also create a second person
so this will be mariam equals to person
and then the name will be mariam
and then let's say that my room she's 18. and now if i run this program
nothing happens this is because we're not doing anything with these two people right here so here
let's just print to the console print and then we want to say
john and then we want to get john's age so john dot and then h
just like that and let's actually add oh actually just here
let's say john first so john dot and then name plus
and then single quotes add a space there and in between just like that let's do the same for miriam
and here instead of john say mariam and here mariam
and there you have it so if i run this you can see that we actually get an
error can only concatenate strings not int okay cool so you've seen this
before so here what we need to do is say str so we want to convert the actual h to a
string just like this so str just like that and then
end parenthesis here and if i run this now you can see that
we have john and then 22 merriam and then 18. so
you have successfully learned how to create a class so the class is the blueprint
and then from the blueprint we can create multiple things right so here the thing that we
have created is john and this in programming is referred as an
object so we have two objects we have john and mariam so the class
is the blueprint and then these so line six is one object and line seven
is another object so here we actually just defined two properties
next let me go ahead and show you how to define behaviors with classes
right remember that before i've mentioned that classes are made up of two things they're made of
properties which we have right so name age those are two properties and also
behaviors so behaviors are the things that a particular class can do
right so properties on the other hand are simply attributes like name
age date of birth ethnicity so on and so forth so let's create
two behaviors for this class right here and then i'm going to show you how to use them so let's create
a function so a behavior is just a function so let's say death and then we need to
name it so here let's say walk and then have a set of parentheses
and then pass self so self allows us to get access to the
properties that we have so name and age so here add parentheses
and inside of this function let's type print and then parentheses and here say self
dot and then name plus and then space is walking
and then add like three dots for example let's also have another behavior so here
death and then speak and then pause self again
and then print and inside we're going to say hello
my name is nn plus and then
self dot and then name and then plus say and
i am and then plus self dot age and then plus
years and then old and this function just says hello my
name is whatever name and i am and then the actual age
and then years old and you'll see this in a second so right so now we have two behaviors
for our class so this means that now we can go ahead and right after we print
the name in here right we can say so let's do for john first so now we can
say john dot and then check this out we have
speak and walk so speak and remember this is a function and the way that we invoke
functions is by adding the set of parentheses just like that and then john
dot and then walk and let's do the same for mariam so
mariam dot and then and then speak and then invoke the function and finally
miriam dot and then work and then invoke the function again and
now we are good to go so if i run this and yet again i forgot to add the string
conversion on integer so it is fine so and in here remember we have to say str
and then the actual h there we go just like this and now let's run it
and uh check this out so here we have john and then 22 and then john
speaks so hello my name is john and i and then there's we are actually
missing a space here so i am 22 years old and then
john walks so john is walking and then we have mariam so mariam18
and these here are the actual behaviors so mariam now is speaking so hello my name
is maryam and i am 18 years old and then miriam is walking so there you
have it so let's actually fix the space so we have to add a space here
and let's have i think we can just remove this first print statement here
just like that and what i'm going to do is take miriam and i'm going to put it right
here so everything is organized just like that and let's have a
print and then just have some lines just like that now let's run it one more
time and there we go so here you can see that hello my name is john
and i'm 22 years old john is walking hello my name is miriam and i'm 18 years
old and finally maryam is working so there you have it you now know
exactly how to create classes how to define properties
and behaviors if you have any questions on classes please do let me know otherwise
let's move on
right it's time for us to put our skills into practice what we're going to do
here is to build an application that will ask us a series of questions
and upon completion when we answer the questions the application will build a
cv that we can use so this will be a really really interesting
project for us here so also we're going to incorporate the text to speech capability
where the application will talk to us or actually to you and ask you questions so this will be
really cool so go ahead and make sure that you are
comfortable with the basics if you have any questions go ahead and let us know on the group
literally let us know and we will be there to help you
without further ado let's go ahead and kick off this cv builder application
all right so let's go ahead and build this awesome cv that you can showcase as
your portfolio so for this project we need to install a
package that will let us write documents so let's go ahead and
open up the terminal so what we're going to do is navigate into view and then in here you
have terminal in here or you can also see terminal here and then you can say new terminal so
both ways do work if i press on that you can see that now we have
this terminal right so in here we can type some commands so here this might be a little bit
different than yours but whatever we're going to type it should just work if you have installed python correctly
so let's go ahead and install the package that allows us to work with documents to do that we're going to type pip
and then 3 so pip 3 is the package manager for python and basically we can download
existing packages that other developers have written and made available to anyone to
use so in our case we want to use this library to give us the ability to write documents
and instead of us writing the functionality ourselves we can just reuse some code that someone
else has already written and there are thousands of these packages that you can explore
so to install a package say pip 3 and then install
and then the name of the package is python dash and then docs just like that
and you can see that this now is going off and downloading the package so now you can see that
successfully install python docs 0.8.2 so this is the actual
version so if this command doesn't work for you for any reason try and run pip
3 install and then just docs just like that so there are two versions
but they are they're both the same package but only if the first command doesn't
work for you so now we can close this window and let's go ahead and use this library
that we've just installed so to use a library we're going to learn something new which we haven't done before
but type from and then docs and then import
document so what we're saying here is from the library that we've just installed we're going to import
this document right here and the way we use it is as follows so let's create a variable
so i'm going to say document equals to
and then document and in here we need to invoke this just like that
with set of parentheses and you've seen this before so the same that you saw before we had
mariam and then equals two and then person and then we passed name right so i think
it was mariam and then she was 18. so the exact same thing here but in here we're not passing anything
inside so now let me actually remove this and now we need to create the actual
document so type document dot and then save
and in here we need to pass a string and this will be the name of our cv
or document right so here this will be cv dot and then docs just like that
now let's go ahead and run this so click on the play button
and there we go so this has run successfully but you don't see anything so let's
close this and now open up explorer and check this out
we have our cv.docs so if you click on it you can see that
we can't really open up this because it's not supported by vs code
but we could install a plugin but what i'm going to do is actually just open it on my file system so i'm going
to close this and then in here what i'm going to do is just close this first and then i'm going to resize my window
slightly and then i'm going to open the folder and what i'm going to do
is just make this a little bit bigger so just just like that
and hopefully i can put it just like this and then let's just try and put it right here
so i don't have to keep on opening this every time so there we go just like this
and basically we have two files here so we've got the cv as well as our python file which is
the one that you see here so now if i open up this cv
and check this out we've got an empty cv so this is really cool hopefully you got
this far next let's go ahead and learn how to add text to this document
now let's learn how to add a piece of text in this document so let me close
this for now and inside of vs code what we're going to do is a bunch of
things in between the creation of document as well as the saving of document
right so we create a document we do some stuff in between and then we save so in here
let's go ahead and have a variable that will hold the name phone number
and email so let's go ahead and create a variable simply say name equals to
nelson and let's also have phone underscore and then number
equals two and this will be just zero zero zero for now right
and finally let's have email equals two and then hello at amigos
code.com so what we're gonna do is take these three variables and then add them
to our document or cv so to do that we need to say so in here
we need to say document dot and then add and then paragraph just like this
and in here what i'm going to do is press enter so this is on a new line
and what i have to do is pass the name so let's simply say for now hello i
just want you to see that if i run this you can see that worked let me just
close this and then open up the document you can see that we have hello right
here so let me just zoom this there we go so we have hello so what we
want is the actual name phone number and email so what we're going to do is remove
this string right here and we're going to say name
and then plus and then the quotes and in between let's add this pipe
plus and then phone number the same pipe
and let me just put this a bit smaller so it fits everything under one line
just like that and then another pipe in here and then finally email
cool so that's everything that we have to do so if i run the program
and it's complaining because i've missed the plus sign so here we
need to concatenate this as well and there you have it so now if i run it
you can see that it works and if i close it open up the document and you can see
that we have nelson right here zero zero and then a low amigos code
so what i want really is to take this name phone number and email
coming from the console as an input and you've seen it before so what we're going to do is instead of
nelson i'm going to say input and then here what
is your and a name question mark and
another space we're going to do the same for phone number so i'm just going to grab this
command c paste that in and the same for email but instead of
name i'm going to say phone number and then what is your email
now if i run the program check this out so at the bottom we can add our name so here i'm going to
say for example ebba and then phone number is 0 three
just a random phone number and then email will be ebba at
and then gmail.com enter and now if i open up the cv
there you go you can see that we have ebba and then the phone number so let me just zoom it so you can see everything properly
there we go so ever 033 this is the random phone number and then the actual email so there you
have it you now know how to take input and then store that in a
document so this is just the beginning of your cv but by the end of this section
will look super amazing next let's add a profile picture
alright to add a picture to your cv go ahead and grab any of the pictures
that you might have so if you don't have a picture right now what you can do is navigate to
pixels.com and then in here you can search for profile
and then picture and then you can just pretty much use one of these pictures so you can
download to your local computer and you can follow along so in my case
what i have is my profile picture here so what i'm going to do is take
this file and then put it inside of learning dash python so this is our
folder where we have our python file so now let me go back and you can see that we have the
profile picture here right so what we're going to do is let me close this document and then
this as well so just before so in here just before this name
variable what we're going to do is add the picture so to add a picture is really
straightforward so say document dot and then for paragraph remember here you
said add and then paragraph and for picture you say add
underscore and then try to guess well you've guessed it right so add and
then picture just like that and then inside we have
to pass few things one is the name of the file so in my case it's me
dot and then png so this is the file extension and you can see right here so me dot png
and if i run this you can see that we have to input the
name so let's say nelson this time and then phone number zero zero zero hello at
and then amigoscode.com enter and now
if we open up our cv right here
check this out the picture is in our document so this is really cool so one thing that we want to do is the
picture is actually too big so what we're gonna do is the following go to the top and then here say from
and then docs with x dot and then shared
import and then inches so what this will allows us to do is to
say after the file name here add a comma and then
say width equals two and then inches so this inches right
here is this one and then inside of inches oops
oh my god right so this is actually on my way so here inside of
inches we have to pass a number so in my case i'm going to pass 2.0
and let me put this on a new line so you see properly just like that
and there we go so you can see that we have the file name and then we
say width and then inches so now if i run this
let's again add the name
there we go enter and if i open up the document once more
you can see that the picture now is much smaller so there you have it our cv is now
taking shape next let's go ahead and learn how to add headings where you can have information
about yourself
all right before we add a section about yourself what i want to do is add a
comment or actually two comments so you haven't learned about comments but comments is a
way of you organizing your code so that when you look at it it's easy for you to understand so to add a
comment you need to add the pound sign here so this pound sign or hash sign right
so you can either press command and then forward slash or control forward slash if you want
windows so here you get this symbol right here and here we can say
profile and then picture so this is just we document things
and then in here we have another comment so let's have another comment and this is so we can organize
each section and then here we can have name phone
number and email details so one thing that you should know about
comments is that this doesn't have any effect when you run your code this is only for
documenting this file right here so anyone that looks at it they know that what this code is all about
so there you have it so now we have two comments here now let's go ahead and after the
paragraph let's add yet another comment and then here i'm going to say about and then me and
let's go ahead and add a heading so to add a heading say document dot
and then add and then try to guess of course you guessed it right so adding
and then in here say about and then me and this will be really straightforward
so we're going to say about underscore me equals to input
and then tell me about your
and then self and then question mark and then add a space
and what we're going to do is then add a paragraph so we're going to say document
dot add and then paragraph and then here
inside we need to pass about and then me and it's as simple as that
so you could do it this way where you store the variable name in here or we can take
this entire thing here we're going to cut it and you can remove the variable and then
just put it right inside so it is totally up to you how you prefer to do this
so there you go now let's run the program
and what's your name and the number our random number
hello at amigoscode.com
tell me about yourself i love coding
and teaching enter now let's open up the cv
and check this out so we have about me this is the heading and it's blue and
then we have some description obviously we need more information here but we'll do that in a second next let's
go ahead and add some work experiences
right let's add some work experiences so in here let me go ahead and add a
comment and i'm going to say work and then experience and what we're going to do is
the following so we want to add a heading so document dot dot
and then add heading and here will be work
and then x appearance and then we're going to add a paragraph so document dot and then add
paragraph and in here this paragraph will be a little bit
different so what we want to do is store this paragraph into a variable called p for paragraph and inside
add nothing and what we're going to do is to take few things from the
input we're going to take the company and then input enter and then company
and then space we want the start underscore and then date equals to
input and then let's say from and then date and let's change this to from date as
well from date and not data date and then here to
and then underscore date equals to input and then two
and then date and then add a space there as well here
and now what we're going to do is the following we're going to use this paragraph in
here to add a paragraph so we're going to say p dot and then add
run so this is how you add text to existing paragraphs and then here what we want to
do is to say company and then plus and then add an empty space
and you'll see this in a second and then say dot and then bold so we want this to be
in bold equals to true so you've learned about booleans and next what we want to do is to say
p dot and then add underscore run and here what we want to
add is the from and then date plus and then single quotes
and add a dash here and then plus and then two and the score
date and finally what we want is to say plus and then here say backslash and then
n so this will give us a new line and then at the end we want to say dot
and then italic equals to and then true
and you'll see this in a second so there we go finally we can capture the experience
description so x periods
and then underscore details equals 2 and then input and
inside what we're gonna do is on a new line here i'm going to say describe your
experience and then at and then plus and we have the company
and finally what we need to do is to say p dot and then add
and then run and we want to have the experience and then details and then
run and let's fill this information once more
so nelson zero zero zero and then hello
at and then amigos code.com and then i love
python so tell me by yourself i love python enter and then
enter company so here let's say amigos and then code and then from date
let's say that this is from like 2000 to 2020.
enter and then here describe your experience at amigos code teaching
people how to code enter and there we go so now let's open up the
cv and that's the previous one let me close that and check this out
so you can see that now we have in here so we have our picture this is
um name for number email about and then work experience so here
this is what we've done we've got the heading work experience and then this is the company amigos code
and then 2000 to 2020 and then this is the the this is the actual description
so you can see that the cv is actually taking shape now and one thing is
as you are doing this together with me if you feel like this title has to be
different for you by no means you are free to change because after all this is your project
so let me just go back once more and explain what we've done so i just want to show you here so
in here we've got the work experience we have the paragraph and then we capture company from date
and to date and then here you see that we have company plus and
then a space dot bold this is because of this part right here right so this is so if i
make this smaller and just put it here so this is
the company amigos code here right in bold and then space
but on the same line we want to add from date and then to date and you can see here
from date and then to date and you can see the dash there so this is the dash
and you can see the dash on the cv right and then you can see that we have this
backslash n so this backslash n gives us a new line
where we put teaching people how to code which is this part right here so
experience details and then we say p dot add run and this is why we have it on a new
line so if you have questions on any of this please do let me know
otherwise next let's learn how to keep on adding more experiences
to your cv
right so far in our cv we can only add one experience but perhaps you have
more than one experience so how do we keep on adding more experiences until we tell
the program that we are done and we don't have more experiences
well we've learned about while loops before now let's use it
so here i'm going to add another comment and i want to say more and then xp reinsers
and this should be e experiences and now i'm going to say
while and then true so here while true we're going to do something
so i'm going to say more and then experiences or actually has
and then more experiences with an e and n
equals two and then input so we're going to ask the user whether
he or she has more experiences so here let me put this on a new line
and let me just close this cv here so here i'm going to say do you have
more experiences and then question mark yes or
and then no just like that so now we have this variable
that will contain yes or no so what we want to do is to grab the response so we're going
to say if and then we want to lower
the response so we're going to say has
if and then has more experiences equals to
and then yes we want to do something in here so what we want to do
is the exact same thing that we've done in here so with work experience so grab
everything apart from the heading right so from here so this paragraph
and then scroll down all the way to more experiences and actually select
everything right so from line 28 so basically don't include the
heading right and then all the way down to where we add the details so we're
going to grab all of that so copy that and then in here paste that in and what we're going to do
is actually indent this so this has to be inside of this if statement right here
and to be honest this is everything but we have one issue here right so
currently this program will keep on asking us questions forever right but we don't
want that so what we want to do is to say right if the answer is not equal to yes we're going
to say else right if it's anything but any
anything other than yes we're going to break out of the while loop
so remember the while loop keeps on looping forever right but by saying else we're going to
come out of the loop so here while true right remember well true
keep on looping so if the answer is yes we want to ask
the same questions otherwise we want to break out of this loop so
one more thing is that in here so the user my reply yes
like that or yes like that so to make sure that the user
replies in the correct order let's take the input and then say
dot and then lower or actually lower like that and you've seen this and we
have to invoke the function and this is everything so now let's go
ahead and run the program so what's your name
and then number and then hello at gmail
at amigoscode.com and then tell about yourself
or actually tell us it should be tell us about yourself uh but it's fine so here let's say
i love coding and then enter company let's say amigos
let's say into it and then quick books
and then enter and then from date let's say since uh 26
oops so let me delete that so 20 and then 16 to
20 and then let's say 19 and then experience
social media expert
enter and then check this out now we have do you have more experiences yes or no
now let's say yes and you can see that we we have enter
company right so it's asking me the same question so here i'm going to say amigos and then code
and then from 2019 to date so we're going to say present
enter and then here enter or actually describe your experience
programmer something like that enter and again do you have more
experiences yes or no let's say no
enter and you can see that the program has finished and if i close this let's open up the cv
and check this out so here you can see that we have work experience
and then intuit quickbooks the date so from two
social media expert amigos code 2019 present and programmer so
there you have it you see that the cv is actually taking shape so let me just close this so one thing
here that i forgot was two so i think somewhere
around here so yeah so we need a space in here
and also in here so describe experience details we need a space there
so plus and then space just like that
and there you have it so congratulations you are
building an awesome cv let me show you again and hopefully this is just the beginning
next i want to give you an exercise so that you can test your knowledge
right as you can see our cv is taking shape and i think this is the perfect time to
give you an exercise to see how far you have come in this course now it's time to put
your skills into practice so go ahead and build a section
where you can showcase the list of skills so maybe one skill is enough but i don't
think one skill is enough so let's also have the while loop
and then if the user says no more skills then you exit out of it we also want it
to be a little bit different so we want to in in bullet points and you can see the code that you should be using to have it
as bullet points so just use it and try and build the
section with a list of all of your skills what i'm going to do is to try really
really hard so give it a try and then i'm going to give you the solution
in a second
the solution for the exercise that i've set up for you is as follows so we have the skills
comment right here to keep things tidy then we have the heading
and we've called skills again you can name this whatever you want and then we have the actual skill and
this comes from the input that comes from the console then we have our paragraph
and then we style it because this time we want a list bullet and then we do the same
as we did with experiences but here we ask the user has more skills and the question is do
you have more skills yes or no if the answer is yes we want to do the exact same
thing as we did in here and then finally what i've done in here
i've added a footer to our document to add a footer you need to get access to
a section right here so we're just getting access to the first section and then
we're grabbing the footer from that section and then we're in the paragraph so here
we're saying p so the paragraph that comes from the footer paragraph
and then here we're just setting the text so cv generated amigos code and into
quickbooks course project and this is the solution for the
exercise now let me go ahead and run it so you can see an action
here what's your name nelson phone number zero zero z oh actually 999
whatever and then hello at amigoscode.com
and then here i'm just going to keep things simple but what i'm going to do is in here let
me go to google.com obviously and then here we're going to
search for lauren and then ipsum
and feel free to add information but basically here we can grab some random text so let me
just agree to this and we can grab like random text that we can use
so here i'm going to grab that and then put it here enter
enter the company so here i'm going to say
into it and then quickbooks there we go and then from 2017
to 2019 and then experience and i think we are
missing a space there so the experience here let's say social
and then media and then manager enter do you have more experiences let's
say yes and then here amigos and then code
and then from date 2019 to
2020 and then let's say python developer
and then enter do you have more experiences let's just say no for now and then enter
a skill so let's say python
and then you have more skills say yes
and then here let's say marketing
do you have more skills say yes and then let's say here for example
management enter do you have more skills we're going to say
no so n and there we go so now let's check out
our cv so if i open up
there we go so you can see that our cv looks really really cool so obviously
we could have added more text in here so something like that um but obviously
you can put some real information but also you can see the skills so this is a bullet point in bullet points
and we have our footer so cv generated using amigos code and intro
quickbooks course project so there you have it you now
have a cv that you can put on your portfolio and this is just the beginning of your
journey next i want to show you one last thing which i think you're going to love it
right to install this library that can take any text and then convert it into speech let's go
ahead and open up the terminal in here so terminal or command line if you're on
windows and then new terminal and you've seen this quite a lot so this is where
all the output from our program shows up so to install the text to speech library
type pip and then three and then install pi and then t
t s x three so this means python
text to speech and then x three is the version so let's press enter
and now this goes ahead and installs the library and it's as simple as that and then to
use it let's go ahead and close this and at the top let's import
the library so type import and then pi text to speech or actually pi tts
x3 and there we go so this is pretty much everything that
we have to do now what we're going to do here is the following
right after we import let's go ahead and say pi t
ts3 and then dot and then speak so we have a speak method
and here let's have the text so within single quotes let's say
hello let's run this and see what happens
hello and you can see that it said hello so this is really really great
so let me close this and what i'm going to do here is the following i'm going to create a function
that will wrap this so we don't have to always say pi and then tts x3 so it's it's
it's just too much right so we're going to do this we're going to take this and then we're going to have a def
and then say speak and then in here we're going to take the text so
say text and then inside paste this right and instead of hello
we're going to pass the text so just like that and now it means that we can just invoke
this function right here and not having to say this pi tts x3
so right after we add our name let's say here
speak and then we want to pass hello within quotes so
hello and then plus and then name and then
plus and then how are you today with question mark
and let's run the program now and you can see that it says what is
your name so here let me say for example ebba
hello ever how are you today and you saw that it said hello eva how are you today so i'm going
to cancel out of this because i don't want to complete the cv right now
but you see that with this you know you have so many ideas right so for example
you might want to take this speak method and then for example ask for the phone
number right so let's say you say speak and then you want to take this question
and then put it here and then paste that so if i run this
once more let me say nelson oops there i wanna write in here
so let me say nelson hello nelson how are you today
what is your phone number and you can see that now i can put my
phone number right so this is really really great and for the email we're not using the
speak functionality so there you have it so i just wanted to show you this awesome
package because it's quite amazing of how much you can do with programming so
this is all for this video let me just close this and i'm gonna press ctrl nc here
to kill this program and then close this so this is all for this video if you
have any questions on this please do let me know
um but yeah so i had fun teaching you this entire project i hope
that you also had fun so i think the next thing for us now is to take
this project and then make it ready so that we can build a portfolio
and that's what we're going to do next
all right in order for us to take this project and make it available for other people to
see it and maybe they want to download and experiment as well with this
project we have to do one thing so here what i'm going to do first is to
open up terminal or command line if you want windows new terminal and i'm going to say
pip and then three uninstall
and then python dash docs
and then say y for yes and also say pip
nn3 and install and then pi and then t t
s x and then three and then enter say yes
or y actually and now try and run the program
so you can see that this is given me an error and it says module not
found right and this is because we remove the package so if you were to send this project to a
friend of yours they would need to download those two packages
manually right and what we want is to make it easy for them to install those
packages with one single command so to do that what we're going to do is to use
a file called requirements.txt and then we're going to have all of the packages that this
application needs and then we just have to run one single command to download the packages specified in
that file so open up the explorer tab and then in here let's create a new file and then here
name it as requirements dot txt and
inside of this package and let me just close this for now inside of this file we want to have the
packages that this application depends on so we depend on python oops so python
dash and then docs and then equals equals and then the version so the
version that we were using was zero point eight point and then ten and we also depend on
so and on a new line so pi t t s x and then 3
equals equals 2.90 so make sure you have the exact same
thing here as i have now let's save this file and then close
it and to test this let's again run the application and you can see that
no module name docks fine so what we're going to do is if i close the explorer tab
and then here what we're going to do is say at the bottom we're going to say pip nn3
install minus r and then requirements dot txt
now press enter and you can see that it it's using the um
it's it's used the dependencies inside of requirements.txt to go and
download the dependencies so now you can see that if you send this application to someone
else all they have to do is just run this command and then that will pull all of those libraries into the
project which then means that we can run the application so if i click on play you can see that we have
what is your name right here i'm going to say ebba
hello how are you today and what is your phone number and you can
see that it's working as before so there you have it this was pretty much the last thing that
we needed to do with this project next let's take this application and then store it
somewhere where you can showcase it as your portfolio
right i hope that you've learned a ton by doing this application so now what we're going
to do is to take whatever we've built together and you are going to create your very
first portfolio so this is when you can showcase it to employers
right when you start applying for jobs this is where you will have all of the projects that you do you
should store them where i'm about to show you it's a very popular way
of people showcasing their work and this is so important to you to give
you that boost that you need so i think you deserve it let's go ahead and create the portfolio
together
all right for building our portfolio we're going to be using this website called github.com and
basically this is a website for developers where you can work in collaboration with
other developers and you can store all of your code in this website
so go ahead and create an account and once you have an account you'll have something like this
so in here i've got a list of projects so on the left hand side and these are
called repositories right so for you you might have
zero but let's go ahead and create your first portfolio so go ahead and create a new repository
and then here the owner this will be your name and then for repository name i'm going
to say python and dash into it quick and then
books project so this could be something shorter for you but for now
this will be my name and then also what i want is this repository to be public so anyone
on the internet can access this repository so take public and then add a readme in
here so i'm going to show you this in a second go ahead and create repository
and there we go so this is our repository so it might look like this so now what we're going
to do is let's add our python files and images and everything that we have to add
so here add file upload files and then we can take all of these files
right and then just put it inside so four files we have the cv so this is
the actual cv this might be optional and then we have the python file
that contain the source code and then my picture and then requirements.txt
so now i'm going to commit the changes in here right so you can see the files
are here and i'm going to say commit the changes all right so that's done
and now you can see that we have a couple of files you can see that we have our cv this is the picture and this is the and
this is the python code so if i click on it you can see that if i zoom in you see
that this is our python code right so remember we wrote all of this together right so this is now a place where
you can showcase your work so now let me actually um
go back a little bit or zoom out a little bit and click on the project and here what
we're going to do is the following click on this pencil and we're going to
change this a little bit so this will be so let me just remove the dashes
there we go and what i'm going to do is to open up an issue so
click on issue so i'm going to press command and then a new tab or you can right click open
link in a new tab and then here new issue
and what i've done i went ahead and have a screenshot of the actual cv
here so let's take this picture and then put it inside of this comment
and all we want is just this link right here copy that close this
and now here paste that in and also we want to have some
description so here we're going to say um pound sign twice
and then installation and then here add back ticks let me just zoom this so
you can see everything so bad ticks and then python
install r requirements dot txt
remember this is how we install the dependencies listed inside of this file so here
let's say run and there we go so now if i
zoom out a little bit and then scroll down let's commit the changes
and now check this out so python into quickbooks project installation run
and then this is the command and then this is our cv so there you have it so this is really
really nice so this is your portfolio now you can see that this is amigos code
forward slash in the project name so you can take this so if i click here actually
so you can take this link and then share with someone right whether you are applying for jobs
or just showing to your friends or you can send your
username so your github username so if i click on mine amigos code so this is the list of all
the projects that i have right and if i go to repositories
you can see that the one that we've just created python into quickbooks project there you have it you now have a
portfolio well then
right it was a pleasure teaching you about python you've come a long way and i can
tell you that this is just the beginning for you so the next step for you
is to check out my other course on python where i go in much more detail
about some of the more interesting things that this language has to offer also
if you're not part of the amigos code community go ahead and join join both the private
facebook group as well as discord i would love to have you there so you can share your experience
with other people finally what i'm going to do for you is in
december i'm going to have a q a where you get to ask me any question
that you want so go ahead and fill the google form on the link down below
and i will let you know when the q a will take place it was a pleasure teaching you and i
can't wait to see how far you're going this journey

