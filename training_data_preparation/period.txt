Hi, my name is Mosh, and I'm going to be your instructor in this Python course. In this course, you're going to learn everything you need to get started programming in Python.
Python is one of the most popular programming languages, and every day people use it to do cool things like automation, they use it in AI, as well as
building applications and websites like Instagram and Dropbox. So if you're looking for a job, Python is for you. In this course I'm going to teach you everything
you need to get started with Python. We're going to talk about all the core concepts in Python, and then we're going to build three Python projects together.
Here's the first project we're going to build. We're going to learn how to create this beautiful website for an imaginary grocery store. Here on the homepage we can see all
of the products in the shop, and we also have an admin area for managing the stock. We're going to build this using a popular Python framework called Django.
Now if you have never built a website before, don't worry, I will teach you everything from scratch. You're also going to learn how to use Python in machine learning, or artificial intelligence.
So you will learn how to write a Python programming that will predict the music that people like based on their profile. Just like how YouTube
recommends videos based on the videos you have watched before. I will also show you python to automate boring repetitive tasks that waste your time.
You will write a Python program that will process thousands of spreadsheets in under a second. I've designed this Python course for anyone who wants to learn
Python. If you're a beginner, don't worry, I will hold your hand through this entire course. You're not too old or too young, and Python is super easy to learn. You can write your first
Python program in literally seconds. Plus I'm going to give you plenty of exercises to help you build your confidence writing cool Python programs.
My name is Mosh, I'm a software engineer with two decades of experience and I've taught over 3 million people how to code. I'm super excited to be teaching you
Python in this course. So I hope you stick around and learn this beautiful powerful programming language.
In this tutorial I'm going to show you how to download and install Python on your computer. So the first thing I want you to do,
is open up your browser and head over to Python .org. On this page click on downloads,
here you can see the latest version of Python currently, at the time of recording this video the latest version is python 3.7.2.
Chances are in the future, when you are watching this tutorial, there is a newer version of Python available, don't worry, all the materials you're going to learn in this course
will apply to the latest version of Python as well. So let's go ahead and download Python 3, alright now,
look at your downloads folder, here, we should have Python 3 installer simply double click that, if you're on Windows
you're going to see this check box here, add Python to python, this is really important, make sure to tick this box, otherwise you're not going to be able to
follow this tutorial. If you're on a Mac, you're going to see an installer like this, with this setup wizard we're going to install Python 3
on our computer. So simply click continue, and again, and again, and agree with the license agreement, and
install it, this is going to take a few seconds so I'm going to pause the recording.
Alright, we have successfully installed Python 3 on our computer. Let's close this. Alright, next we need to install
a code editor, we se a code editor to write our code, just like how we use Microsoft Word to write documents, we use a code editor to write
code. Now there are so many code editors out there, the one that I'm going to show you in this tutorial is PyCharm. That is one of the most popular code editors
for writing Python code. You can get it from jetbrains.com /pycharm. Now more accurately pycharm
is considered an IDE, which is short for integrated development environment. And that's basically a code editor on steroids,
it has some additional features that makes it really easy to write code. So let's go ahead and download PyCharm. Now here on the
download page, you can see two versions of PyCharm, one is the professional addition which has additional features and you have to pay for them. The other is the
community edition, that is absolutely free, and that's what we're going to use in this tutorial. So, go ahead and download this as well.
Now, once again look at your downloads folder, once again you should have pycharm so double click this, now if you're
in Windows you're going to see an installation wizard, simply click next, next, next until you install pycharm. If you're on Mac you need to drag and drop this icon
onto the applications folder, so drag and drop, alright, now let's double click this to run it,
the first time we run pycharm we're going to get this warning, because this is an application that we download from the internet. So let's go ahead and open it,
next you're going to see this dialogue box for importing some settings, leave this to do not import settings, it doesn't really matter. Okay,
On this page, select I've never used PyCharm you can see some keyword shortcuts that might be useful in the future, just accept this, and down at the bottom,
click the next button. And then next again, one more time, and then finally start using pycharm.
So here's the main page of PyCharm every time you open it, click on create new project,
this is the location for our project, let's call our project Hello World. Now before click and create, expand
this item here, make sure that base interpreter is set to Python 3. Python interpreter is basically a program
that knows how to execute Python code, it will know how to interpret or translate Python instructions into instructions a computer can understand.
Now, Mac computers, by default come with an older installation of Python, that's Python 2, it's considered legacy
which means it's no longer maintained or supported. So earlier we downloaded Python 3, make sure that this is set to Python 3, if not
from this list, select Python 3.7. Alright, now let's go ahead and create this project,
Now here right click on
Hello World folder and go to new Python file, call this file app.py.
So by convention, all Python files should have this py extension. Alright, let's go ahead,
now let's collapse this project panel by clicking here and write our first python program. Simply type print, pr
int, all in lowercase, open and close parenthesis, and inside these parenthesis, add quotations we
can either use single quotes or double quotes, now in between the codes write your name. I am Mosh Hamedani, so
here, so this is your first Python programming. With these piece of code you can print your name on the screen. Now to run this, go
on the top, under the run menu, click run, also note that there is a shortcut associated with this command, when
I program I always use shortcuts because that increases my productivity. So here on a Mac computer, the shortcut is control, option, and
R. On Windows it's different. So let's do that, now it's asking where you want to run this, click on app,
down below, you should see this little terminal window, this is a little window into our program, so here you can see our results for
output for our program. In the future as you learn more Python, you'll be able to build applications that have a graphical user interface, or gooey.
That is a little bit complicated, so for now we're going to use this little terminal window to see the results of our program. So as you can see my name is
printed here, now as you print code, this window might get in the way so always resize it or minimize itty putting this
icon here, so this was our first python program. Now if you didn't see the result I showed you in this video, use the comment box below and
tell me what error you encountered, I'll do my best to help you move forward.
In this Python tutorial, we're gong to take this program to the next level and make it more interesting. So I'm going to show you how to draw a dog hair. Now as part of
this tutorial you will learn how Python code gets executed and you will also learn about a few programming terms. So press enter, and
on line 2 write another print statement, so print, open and close parenthesis, add a quotation, now here you want to draw a dog.
So, add an o, that is the head of our dog, followed by 4 hyphens. So this is the body.
alright, now one more time another print statement with quotations, now we need to draw the legs. So add a space.
Follow it by 4 vertical bars. So, like this, so here's a little imaginary dot. Now let's
run this program and see what we get. So on the top right corner you should see this play button, click that, there you go, so we have our name and
right below that we have our imaginary dog. Now what you need to understand here, is that our python code gets executed line by line
from the top. So earlier I told you about Python interpreter that is the program that knows how to translate or interpret
our Python code into instructions that a computer can understand. So when we run this program by clicking this program here,
python interpreter starts executing or running our program line by line from the top. So first it executes line 1,
then, moves onto line 2, and so on. So this is how python programs get executed. Now let me show you something cool. Let's add
another print statement, with quotations now in between the quotations, add a star or an asterisk, like
this. Now after the quotation and before the parenthesis, add a space, once again, add an asterisk,
space, 10. What is going on here? Well, anywhere we have quotations like here or here
we're defining a string, a string is a programming term which means a series of characters so here we have a string, we also have
a string on line 3, as well as line 2 and line 1. Now here, we're multiplying the string by
number 10. So this is the multiplication operator, just like the multiplication operator we have in math. So with this piece of code we can
draw 10 asterisks on the terminal, let me show you. So let's run this program one more time, there you go. So we have 10
asterisks. Now what we have here, this piece of code here, is called an expression. An expression is a piece of
code that produces a value. So when Python interpreter tries to execute line 4, first it will evaluate
the code that we put in between parenthesis, so we could evaluate our expressions Our expression will produce 10 asterisks and then
those asterisks will be printed on the terminal. Now as an exercise you can use these print statements to draw another shape, you can draw a heart, a
ball, whatever you like. I will see you in the next tutorial. One of the questions I get a lot on my channel is
how long does it take to learn Python and become job ready? Well there is no single answer. It really depends on you and how much effort and commitment you want to put
into this. But I would say if you spend 2 hours every day consistently, after about 3 months you should be able to write
basic python programs, but quite honestly, that doesn't get you a job. In order to get a job, you need to specialize in one area,
what do you want to use python for? Do you want to build web applications or desktop applications? Or do you want to use it in machine learning and artificial intelligence?
So whatever you want to do you need to take additional courses. For example if you want to become a web developer in addition to learning
Python, you should also learn about html, some css, some JavaScript and Django which is a popular Python framework
for building web applications. Learning all these things would take you another 6 months, so in total you need 9-12 months to become
job ready. At that point you can get a junior developer job with a salary of about 50-60 thousand dollars a year. Now as you work more
as you do more Python projects, your resume starts to build and you can ask for $100,000 a year, or 120,000 dollars
a year, depending on where you are, what company, what geographical area, it really depends, there is no single answer. So are you excited to
learn Python and get started on this career path? If you are, I would encourage you to make a commitment and spend 2 hours every day practicing
python. And use the comment box below and let me know why you are learning Python, what do you want to do with it? What's your dream job? I would love to hear your story.
In this Python tutorial, you're going to learn about variables, which are one of the most fundamental
concepts in programming, they're not specific to Python, they exist in pretty much every programming language out there. We use variables
to temporarily store data in a computer's memory. Here's an example, let's type price = 10, when Python
interpreter executes this code, it will allocate some memory, then it will store the number 10 in that memory, and finally it will attach this
price label in that memory location. As a metahor imagine we have a box. In that box, we have number 10
and price is the label that we put on the box. Now we can use this label anywhere in our program to access the value that we have in that box.
This is a very simplified explanation. So now, let's print price on the terminal. Print, now this time we're not going to
add quotations, because if we put quotations here, we will see the text price on the terminal. Now the value of the price variable.
So, put it in quotations, and type price, now, let's run this program one more time, there you go. So we see 10,
on the terminal. So this is how we define variables, we start with an identifier which is the name of our variable, then,
an equal sign and finally a value. Now more accurately, when this number 10 is about to be stored in the memory, first it will
get converted to this binary for presentation. So this number 10, is in the decimal system which has all the digits from 0 to 9.
Computers don't understand all these digits, they only understand 0s and 1s. So when we store the number 10 in the computer's memory
first it will get converted to it's binary representation which will be a bunch of 0's and 1's, like 001, 001, whatever
I don't know. Then it will get stored in the computer's memory. So, let's take this program to the next level. On the second line we can
update the value of this price variable, so we can reset it to a new value like 20, now when we run our program,
we should see 20, because as I told you before Python interpreter executes our code line by line from the top. So first we set
the price to 10, then we reset it to 20, and finally we print it on the terminal, let's run the terminal, there you go, so,
we see 20 here, okay? Now these numbers that we have here are whole numbers without a decimal point.
In programming, we refer to these numbers as integers. But integer is a number without a decimal point. We can also use
numbers with a decimal point for example on line 2, we can define another variable called rating and set it to number
4.9. Now in programming, we refer to this kind of number as a floating point number of float for short. So we have integers
and floats. We can also define a variable and set it to a string, for example, name equals
Mosh, we also have another kind of value which is called boolean, which can be true or false. They are line yes and no in English.
Here is an example, I'm going to define a variable, is underline published so we use an underscore to separate
multiple words in our variables name. We set this to true, or false. These are
boolean values. now note that Python is a case sensitive language, which means it's sensitive to lower case and upper case letters.
So when defining variables we should always use lowercase letters, but here false and true are special keywords in the
language, so if we spell it with a lowercase f, Python doesn't understand it. You can see we have a red underline here, which indicates an error.
Make sure to spell this with a capital F, or if you want to set this to true, make sure the T is capital, so in this
program, you're storing simple values in our computer's memory. Simple values can be numbers, which can be integers or floats
or they can be strings or booleans. But in Python we can also store complex values like lists and values. And that's what I'm going to show you
in the future. So before going any further, I want you to do a little exercise. Imagine we're going to write a program for a hospital.
So we check on a patient named John Smith. He's 20 years old and is a new patient. I want you to define 3 variables here,
for his name, his age, and another variable for if this is a new or an existing patient. So pause the video and spend one
minute on this exercise. When you're done, come back, continue and see my solution. Alright, so here we need
three variables, the first one is the patient's name, we set that to John Smith. We can also
call this full name, these are both valid names for our variables. The second variable is for the age of our patient. So age
is 20, and finally we need a variable to tell if this is a new or existing patient. That's where we can use a boolean value.
So, we define a variable, is new and we set it to true.
So, you have learned how to print messages on the terminal window. In this tutorial, I'm going to show you how to
receive input from the user. So we're going to write a small program that asks the user's name and then we'll print a greeting message customized
for that user. So instead of print we're going to use input. Now both these input and print
are functions that are built into Python. As a metaphor think of the remote control of the TV. On this remote control we have a bunch of
buttons, these are the functions built into your tv, you can turn it on, turn it off, change the volume and so on. In Python we also have
functions for common tasks such as printing messages, receiving input, and so on. So we're going to use the input function, now whenever we
have these parenthesis, we're going to say we're calling or executing that function, it's like pressing a button on a remote control. So we're
going to call the input function and in between parenthesis we want to add a string to print something on the terminal,
what is your name? With a question mark followed by a space. You will see why in a second. So this input function
will print this message on the terminal, and then it will wait for the user to enter a value. Whatever the user enters this input function will
return. So now we can get that value and store it in the memory using a variable. So we get the result and put it in a variable called
name. Okay? Now on the second line we want to print a message like Hi John or Hi Mosh or whatever, so,
print, quotations Hi with a space, now after the quotation we want to dynamically print
what we have in the name variable. So we had a plus sign and then name. So here we have
Hi which is a string, we're concatenating or combining the string with another string, that is what we have
in the name variable. So here's another example of an expression. Remember what is an expression? It's a piece of code that
uses a value. So this expression concatenates or combines 2 strings. Let's run this program and see what happens. So run
okay, here is a question, what is your name? Mosh, now note that earlier we added a space after the question mark, we
did this, so here in the terminal window the cursor is separated from the question mark, otherwise it would be so close. So let's type
whatever here, plus enter, now we get this message, Hi, Mosh. Now here's a little exercise for you. I want you to extend this program
and ask two questions. First all the person's name and then their favorite color. And then print a message like Mosh likes
blue. So pause the video, do this exercise and then come back and continue watching.
Alright, so here's the first question right after that, all the input functions one more time, this time we're going to ask a different question.
What is your favorite color? Now, we get the new value and store it in the variable
called color, or you could call it favorite underline. color. Either works. And finally we're going to change
what we pass to the print function, so first we print the name then we concatenate this with a string, here we're going to
type likes, we also put one space before and after likes, and once again we concatenate this.
With the favorite color. So, favorite color, now let's run this program, so what is your name
Mosh enter, favorite color, blue, enter, we get this message, Mosh likes blue.
Hey guys Mosh here, I just wanted to let you know that you really don't have to memorize anything in this course because I've put together a cheat sheet
with summary notes. So you can quickly review the materials in this course. The link is below this video. So I have done my best to create
the best possible Python course on Youtube. And I really appreciate it if you support my hard work by liking this video and sharing it with
others, so they can learn as well. And be sure to subscribe to my channel, for more tutorials like this. Alright, now, let's move onto the next tutorial.
In this Python tutorial, we're going to write a program that will ask the year that we were born
in, and then it will calculate our age and print it on the terminal. So, let's start with our input function, input
let's print birth here, followed by a colon, and a space. Now let's get the return value and store it in a variable,
called birth_year. So as I told you before, we use an underscore to separate multiple words
Next, we need to calculate the age, so we define another variable called age, and here we do some basic math,
currently we are in 2019, so let's write an expression like this. 2019 - birth
year. Now finally let's print age on the terminal. Let's run our program and see what happens.
So, my birth year is 1982, enter, oops, we got an error, what is going on here? So
whenever you see this message, that means there is something wrong with your program. With the information here, we can find exactly where the error occurred. So,
next to the file you can see the file that generated this error, in this case that is app.py. So
currently our program only has a single file, but real complex programs often have hundreds or even thousands of files. So in this file,
on line 2, this is where we got this error, and right below that we can see the piece of code that generated this error.
So that is where we're calculating the age, and right below that you can see the type of error. In this case, we have a type error, and here's the
message. Unsupported operand types for subtraction. Int and str.
So int is short for integer and that represents a whole number and str is short for string, so here we're subtracting
a string from an integer, and Python doesn't know what to do with it. Let me explain. So I'm going to close the terminal window. So after
the first line we executed we have this birth year variable set to a string, so whatever we type in the terminal is always
treated as a string, even if you type the number, in other words, when we run this program, this birth year variable will be set
to a string, with four characters. 1982. This string is different from the actual number
1982. One is an integer and the other is a string. Right? So, back to line 2, where this
error occurred. At run time, which means when we run our program this expression on the right side of the assignment operator
is going to look like this. 2019 - string 1982. Python doesn't know how to
interpret or how to evaluate this expression. To fix this problem we need to convert this 1982 into an integer
and then we'll be able to subtract it from 2019 and that is easy. So far you have learned about two built in functions
one is print the other is input. We have a few other functions for converting values into different types. So we have
int for converting a string into an integer, we also have float for converting a string into a float, or a number
with a decimal point. And we also have bool for converting a string into a boolean value. So to fix this problem,
we need to go back on line 2, and pass this birth year variable to the int function like this.
int parenthesis, like this so we pass this string to the int function, int will convert it into an itneger
and then Python interpreter will be able to evaluate this expression. Now let's run this program one more time, so birth
year is 1982 enter so I am 37 years old. In Python we have a useful function
for getting the type of variables, for example, let's print the type of birth year, so right after line 1,
let's print, now here we're going to call another built in function, called type, and now let's pass birth
year, okay, now similarly after line 3, let's also print the type of age, so
print type of age. Okay? So let's run our program, so birth year one more
time, 1982, okay, here's the result so the type of birth year as you can see is a class
of str or strings, we look at classes in the future so for now don't worry about them, and also below them you cans ee the type of
the age variable is int or integer. So here's what you need to take away. Whenever you use the input function,
you always get a string, so if you're expecting a numerical value you should always convert that string into an integer or
a float. So here's a little exercise for you. I want you to write a program ask the user their weight and then convert it to kilograms and print it
on a terminal. So pause the video, do the exercise and when you're ready come back to watch it.
Alright so let's use our input function and ask for the weight in pounds
here we get the weight in lbs or pounds now we need to convert this into kilograms, it's very easy so
we defined another variable weight_kg we set this to weight_lbs
times 0.45. And finally let's print weight underline
kg. Let's run this Python program and see what happens. So my weight is 160, alright once again we got an error,
can't multiply sequence by non int of type float. So as I told you before, this input function returns
a string, so we cannot multiply a string by a float. Python doesn't know what to do with it. So in this case, we should convert this number
by an integer or float and then multiply by 0.45. So let's call the int function.
And pass weight underline lbs. And run our program one more time, 160
okay, so I am 72 kg's.
In this tutorial, you're going to learn more about Python strings. So I've defined this course variable and set it to Python for beginners
now earlier I told you you could use both single and double quotes to define a string, but there are times you have to use a specific form,
otherwise you're going to run into issues. Here's an example. Imagine you wanted to change this string into Pythons course for Beginners.
So we want to add an apostrophe, like this, Course for Beginners. You can immediately say this is going
crazy, because our string starts here and then terminates here, all these characters that we have here after the second apostrophe
Python interpreter doesn't know what they are. So to solve this problem we need to use double quotes to define our string so we can have
a single quote in the middle of the string. So let's change this to double quotes, now you can see it adds another double quote to close it,
you have to manually remove this, and also one more time at the beginning of the string, we need to add another double quote. Now
you can see error is gone, so if you print course we see Python course for beginners.
Beautiful. Now let's say we don't want this apostrophe here, so we have Python for Beginners, but we want to put Beginners in
double quotes. Once again, if you add a double quote here Python interpreter gets confused because it assumes the second double quote indicates that
end of the string, so it doesn't know what these characters are, so to solve this we need to change our double quotes to single quotes
like this. And then we can add double quotes in the middle of the string. Now let's run this program, there you go.
So we get Python for Beginners. So these are the cases for using single or double quotes. Now in all the examples
I've shown you so far we only deal with short strings, but what if you wanted to define a string that is multiple lengths? For example, what if you wanted to define a string
for the message that we send in an email. In that case we need to use triple quotes. So. We delete this.
Now we add three quotes, so 1, 2, 3, there you go, So, we have three quotes to start our string and three
to terminate it. Again these quotes can be single or double quotes. Okay? Now, with this we can define a string that spans
multiple lines. For example, we can say Hi Jon here is our first email to you. Thank you,
The Support Team. Like that. Now, let's run this program and here's the
result. So, we get this beautiful multi line string. Now let's change this back to something simple
so, we can look at other characteristics of strings and Python. So I'm going to use single quotes and set the course name to Python
for Beginners. Now here we're going to use square brackets to get a character and a given index in this string.
Let me show you. So to get the first character we use square brackets and type 0. So the index of the first character
in the string is 0. In other words, this is how Python strings are indexed. 0, 1, 2, 3, 4, etc.
So the index of the first character is 0, the second character is 1, and so on. So let me delete this and run this program
we get p. We can also use a negative index here. And this is one of the features that we don't have in other programming languages
as far as I know. So we have negative index we can get the characters started from the end. So if I pass negative 1 here,
Assuming that 0 is the index of the first character negative 1 is the index of the last character. So when we run
this program we should see s. Let's run it, there you go, we get s, if we pass negative 2, this will return
the second character from the end. Let's run it one more time, now we get R because that is the second character from the end.
Okay? So place close attention to this square brackets syntax because quite often it's the topic for online Python tests
or university exams, so if you're preparing for a python test, make sure to watch this tutorial one more time and understand exactly how
this square brackets syntax works, we can also use a similar syntax to extract a few characters instead of 1 character.
For example, if we type 0, colon 3, Python interpreter will return all the characters
starting with this index all the way to this second index, but it does not return the character at this index.
In other words, back to these indexes so you have 0, 1, 2, 3, and so on. When you run this program.
Python interpreter will return the characters starting from the index 0 all the way to index 3,
but excludes the character and index 3, so when we run this Python program we're going to see pint (?). Let me show you, so we're going to
delete this line, run this program, there you go. We get pint. Now here we also have default values for
the start and end index. So if we don't supply the end index, Python will return all the characters to the end of the string.
Let's take a look. So run this program, there you go, Python for Beginners. But if you change the start index to 1,
this will exclude the first character so when we run this program, we see ython so p is removed.
Okay? Now similarly we have a default value for the start index, so if we don't supply the start index
but add an end index like 5. Python interpreter will assume 0 as the start index, so, let's run
this program, there you go, we get pytho. Now what if we leave both the start and end
index? Well, I told you? Now in this case 0 will be assumed as the start index, and the length of the string will assume
as the end index. So with this syntax, you can basically copy or clone a string. In other words, if I define
another variable here, let's call it another and set it to course square brackets with just a colon, now this expression will
return all the characters in the course variable so variable will be copy of our first variable. Let's take a look, so,
let's print another, and load our program there you go, we get Python for beginners. So once again
the square bracket syntax is pretty important if you're preparing for online python tests, or college exams, make sure to watch this tutorial again.
Now here's a little exercise for you. I'm going to delete all this code define a variable, called name, and set it to Jennifer.
Now when we print name of 1: negative 1
what do you think we're going to see on the terminal? I want you to use your knowledge to tell what we're going to see on the terminal, we're now running this program. So
pause the video, think about it for a few seconds, then come back and continue watching.
So this expression will return the characters starting from index 1 which is the second character
all the way to the first character from the end, but excluding the character at this index. In this case, the first character from the
in is r, so r will be excluded, in other words we're going to see all the characters starting from e all the way
to the second e. Let's take a look. So I'm going to run this program there you go. This is what we get,
I hope you guessed it right. In this tutorial, we're going to look at
formatted strings in Python programming language. Formatted strings are particularly useful in situations where you dynamically generate some
text with your variables. Let me show you. Let's say we have two variables first name and last name. So first we set this to
John, and last we set this to Smith. Now it's better to call these variables first name and last name, because they're more
descriptive. But here I'm using shorter names because I want you to see the entire code on display screen. So let's say with these two variables, we want to generate
some text like this. Jon, in square brackets Smith is a coder. Let's say we want to print this on
the terminal. How do we do this? Well, we define another variable like message, now here we add the first name,
now we need to concatenate this, with a string that contains a space and a square bracket next we need to add a last name,
then we need to add a string that contains the closing square brackets followed by is a coder
okay? So, then, if you print message and run this program
to see John Smith is a coder, right? Now, while this approach perfectly works, it's not ideal
because as our text gets more complicated it becomes harder to visualize the output. So someone else reading this code, they have to
visualize all the string concatenations in their head. This is where we use formatted strings, they make it easier for us to visualize the output. So,
I'm going to define another variable, let's say msg short for message, and set this to a formatted string. A formatted
string is one that is prefixed with an f. So f, quotes. Now in between the quotes, first we want to add
the value of the first name variable, so, we add curly braces and here we type first.
Next we add a space, we add our square brackets, in between the square brackets, we want to display the last name so once again we add curly
braces, and type last, and finally here we type is a coder. So this is what we call the formatted
string. With these curly braces, we're defining place holders or holes in our string, and when we run our program these holes
will be filled with the value of our variables. So here we have two place holders or two holes in our string. One is for the value of our first name
variable and the other is for the value of the last name variable. But compare this formatted string with string
concatenation. With this formatted string we can easily visualize what the output looks like, right? Now let's print this other
terminal to make sure we get the same exact output. So, let's print message there you go. So Jon
Smith is a coder. So to define formatted strings, prefix your strings with an F and then use curly braces
to dynamically insert values into your strings.
In this Python tutorial, I'm going to show you some really cool things you can do with Python strings. So let's start by defining a variable,
course and we set that to Python for beginners. Now to calculate the number
of characters in this string, you can use a built in function called len. So len we give it this course variable, and then,
we can print the result. Let's run this program, so as you can see we have 20 characters in this string, this is
particularly useful when you receive input from the user. For example you have noticed that when you fill out a form online, each input field
often has a limit. For example, you might have 50 characters for your name, so using this len function we can enforce a limit on the number of characters
in an input field. If the user types in more characters than we allow, we can display an error, now, this,
len function is another function built into Python, it's a general purpose function, so it's not limited to counting the number of characters in a
string, in the future when we look at lists, I want to show you that we can use this function to count the number of items in a list. So it's a general purpose
function. Now we also have functions specifically for strings for example we have functions for converting all these characters to upper case
or lower case. To access these functions we use the dot operator. let me show you. So first we type course,
then dot look these are all the functions that are specific to strings. Now in more accurate terms,
you refer to these function as methods, this is a term in object oriented programming that we want to look at in the future, but for now, what I want you to take away,
is that when a function belongs to something else, or is specific to some kind of object, we refer to that function as a method.
For example, here we have this function, upper, for converting the string into upper case, now more accurately because this function
is specific to a string, we refer to this as a method. In contrast len and print are general purpose functions, they don't belong
to strings or numbers or other kinds of objects. So this is the difference between functions and methods. Now let's take look at this
upper method. So, let's print the results and we run our program, there you go,
you get all these characters displayed in uppercase. Now note this method does not change or modify our original string, in fact
it creates a new string and returns it. So, if we print our course variable right after we
call the upper method, we can see that our course variable still has it's original form, so let's run this program one more time, there you
go. Look, here is our original course variable, it's not modified. Now similar to the upper method we have another method
for converting a string into lower case. So let me show you. Print, course.lower.
Now, let's run the program, so on the second line you can see, all characters are in lower case. Now there are times
that you want to find a character or a sequence of characters in a string. In those situations you can use the find method. So let me delete
these few lines. Call course. find here we pass a character, let's say
p, and this will return the index of the first occurrence of that character, let me show you. So let's print the result
we get 0, because the index of the first capital p in the string is 0.
As another example, if we pass a lower case o here, let's see what we get, we get 4 because
the index of this o here is 4. Now note that the find method is case sensitive, so it's sensitive to
lower case and and upper case characters. As an example if you pass an upper case here and run this program, we get negative 1 because
we don't have an upper case o anywhere in this string, okay? We can also pass a sequence of characters, for example, we can pass
beginners with a capital B let's run this program, we get 11 because
beginners starts with index 11, now we also have method for replacing a character or a sequence of characters
and that is called replace. So let's change find to replace let's say we want to replace beginners with
absolute beginners, so we add a comma to pass a second value to this function, or more accurately this method. We add a string,
here I'm going to pass absolute beginners. Okay, now let's run this program,
so, we get python for absolute beginners. Again, this method like the find method is case sensitive so
if you pass beginners all in lowercase, this method is not going to find this exact word in our string, so it's not going to
place it with absolute beginners. Let's take a look. So I'm going to run the program One more time, look, we still get python for beginners.
We can also replace a single character, for example we can replace capital p with let's say capital
j. Now when we run this program we get jython for beginners. So these are the find and replace methods
and one last things I want to show you in this tutorial. There are times that you want to check the existence of a character or sequence of characters in your
string. In those situations you use the in operator, so let's say you want to know if this string contains the word python.
We can write an expression like this. String python space in space course.
So we're checking to see if python is in course variable. And this is an expression that produces a boolean
value, and I get true or false, so we refer to this expression as a boolean expression, now if we print this on the terminal,
we should get true, and by the way I'm going to delete the second line, we don't need it anymore, so run the program
we get true, but if I change this capitol p to a lower case p and run the program we get false because we don't have
is exact sequence of characters in our strings. Now note that the difference between the in operator and the find method
is that our find method returns the index of character or sequence of characters but the in operator
produces a boolean value. Do we have this or not? So that's the difference. Now let's recap all the cool things you learned
to do with strings in this tutorial. We can use the len function to count the number of characters in a string, this is the general
purpose function built into python, we also have specific functions for strings which we refer to as methods, these include
upper for converting a string into uppercase you also have lower and title methods,
you learn about the find method which returns the index of a character or sequence of characters, we have
the replace method for replacing characters and words in a string and finally you learned about the in operator. So some characters
in a string.
So, you have learned that in Python programming language you have 2 types of numbers, integers which are whole numbers like 10, they don't have
a decimal point, and floating point numbers or floats. Which are numbers with a decimal point. Now in this tutorial you're going to look
at the arithmetic operations supported in python language these are the same arithmetic operations that we have in math, we can add numbers,
multiply them and so on. So let's look at a few examples, we can print, 10 plus 3, so
this is the addition operator, we also have subtraction, we have multiplication, we have two kinds of division,
here's one with a forward slash, let's run this program and see what we get. we get a floating point number. But we also have
another division operator for getting an integer. So if we add another slash here and run this program
we get an integer. We have another operator called modulis (?) which is a percent sign.
And this returns the remainder of the division. So when we run this program we should get 1, there you go. And
one last operator we have here is exponent which is the power. So, that is indicated with 2 asterisks and this will return
10 to the power of 3. So let's run this program we get 1000 so these are the arithmetic operators
in python programming language. Now for all these operators that you learned we have an augmented assignment operator. That is
very useful, let me show you. So let's say we have a variable called x we set it to 10, now we want to increment this by
3, we'll have to write code like this. X we set this to x plus 3. So Python interpreter will add
10 to 3, the result is 13, and then it gets stored into x again. So when we print x we should see
13, there you go. So this is how you can increment a number, right? Now augmented assignment operator is
a way to write the same code but in a shorter form. This is how it works. We type x plus
equals 3. What we have on line 3 is exactly like what we have on line 2. So this is what we call
the augmented assignment operator we have augmented or enhanced the assignment operator. Now in this particular
case we are incremented a number using the augmented assignment operator, but we can also subtract or multiply a number by a given value
for example, let's delete what we have on line 2, we can type subtract equals 3. So here we
subtracted 3 from x. When we run this program we should see 7, there you go.
Now let me ask you a question, I'm going to clear all this code here to
define x and set it to 10 plus 3 times 2. What do you think is the result of this expression?
this is a very basic math question that unfortunately a lot of people fail to answer. The answer is 16. Because in math we have this
concept called operator precedence which means the order of operations. So the multiplication operator has
a higher precendence which means it's applied first which means 3 x 2 is executed first, the result is 6 and then
its added to 10, that's why x showed up as 16 after we run this code, let's verify that. So, print x
run the program, x is 16. So this is what we call operator precedence, it's just a basic math concept.
It's not about python programming language. So all the other programming languages behave the same way, so here's the order, first we have
the exponentiation which is the power, like 2 to the power of 3, then we have multiplication or division
and finally we have addition or subtraction. This is the order of operations. Let me show you another example.
Here I'm going to add the exponentiation operator, so, 2 to the power of 2. Once again, what do you
think is the result of this expression? Pause the video and think about it for a few seconds. The answer is 22.
Because the exponentiation operator takes precedence, so first 2 to the power of 2 is executed, the result is 4,
then 4 is multiplied by 3, that is 12, and finally 12 is added to 10. So x should be 22.
So let's run this program and verify this. So I'm going to delete these lines here. Run the program, there you go. X
is 22. Now let me bring back these rules here. We can also use parenthesis to change the order of operations
so if we have parenthesis we always takes priority. In this case we can add parenthesis
around 10 + 3, so this piece of 3 will be executed first, the result is 13, then the exponentiation
operator will be executed, so 2 to the power of 2 is 4, and finally 4 is multiplied by 13.
Now here is a little exercise for you. I'm going to set x to parenthesis 2 + 3 x 10 minus
3. What is the result of this? Pause the video and think about it for a few seconds.
So you learned that parenthesis always overrides the order, so this piece of code is executed first. The result
of these 5. Then, between the multiplication and subtraction, you know that multiplication takes precedence.
So next, 5 will be multiplied by 10, the result is 50 and finally we have subtraction. So 50 minus
3 will be 47. Let's verify this, print x, run the program there you go, I hope you guessed it right.
So this is all bout operator precedence, it's a very important topic and I see it quite often in Python tests. So if you're preparing for a Python test
make sure to watch his tutorial one more time.
In this tutorial, we're going to look at a few useful functions for working with numbers let's start by defining a variable like x and set it to 2
.9. Now to round this number we can use the built in round function, so we call the round function, give it x,
and then print the result. Let's run this program so, we get 3, we have another useful built in function called
abs which is short for absolute, and this is the absolute function we have in math, we give it a value and it always returns
the positive representation of this value, even if the value is negative. Here's an example. Let's call the abs function
and give it negative 2.9 When we run this program we're gong to see 2.9 on the terminal. So let's go ahead
there you go. So absolute always returns a positive number. But technically in Python we have a handful of built in functions for performing
mathematical operations, if you want to write a program that involves complex mathematical calculations, you need to import the math module.
A module in Python is a separate file with some reusable code. We use these modules to organize our code into different
files. As a metaphor think of a super market. When you go to a super market you see different sections for fruits and vegetables, cleaning products,
junk food and so on. Each section in the super market is like a module in Python. So in Python we have this math module which contains a bunch
of rustable functions for performing mathematical calculations. So, let me show you how to use this module. On the top
we type import, math, all in lowercase with this we can import the math module. now math is
an object like a string, so we can access it's functions or more accurately it's methods using the dot operator. So if you type
math. look these are all the mathematical functions available in this module. For example you can call the
seal method to get the sealing of a number. So if you pass 2.9 here and then print the result we should see 3.
Let me delete all this other code here. Alright, let's run this program there you go. So we get 3. Another useful method is the
floor method, so let's give that a try, floor of 2. 9. What do you think we're going to get? We get
2. Now there are so many functions built in this module and we don't really have time to go through all of them. But let me show you how we can learn about them on your own.
Open up your browser and search for Python 3 math module. Make sure to add the version python 3.
Because the math module in python 2 is slightly different from the math module in python 3. So python 3 math module,
now here you can see the documentation of this kind of module let's go let's have a look, if you scroll down,
we can see the list of all the functions and their explanation. So as an exercise I encourage you to have a quick look at this
documentation. See what functions are there for you in case you need them.
In this tutorial, I'm going to talk to you about if statements in Python if statements are extremely important in programming and they
allow us to build programs that can make decisions based on some condition. So if some conditions are true we're going to do certain things, otherwise we're going to do other
things. Here's an example. Over here I've got this text file with a bunch of rules for our program. If it's a hot day, perhaps we want to
tell the user it's a hot day, so make sure to drink plenty of water. Otherwise, if it's cold, so here's another condition
if this condition is true we're going to tell the user it's a cold day so where warm clothes. And otherwise if it's
either hot or cold, we want to tell the user it's a lovely day. So let me show you how to write a program that simulates these rules. So,
back to our program here, we start by defining a boolean variable is underline hot. We set this to true.
Next, we add an if statement, so if, here we need to add a condition, in this case we're going to use our boolean variable. So,
is underline hot. So if this values to true. Then we're going to do certain things. In this case, we want to tell the user
hey it's a hot day, drink plenty of water. So, back to our program after our condition we add a colon, now,
note that when I press enter pycharm automatically indents our cursor. Now any code that we write here will be executed
if this condition is true, otherwise it will be ignored. Here is an example. Let's write a print statement, here I'm going to use
double quotes because I want to use an apostrophe in our string. So, it's a hot day. Now let's press enter
you can see the cursor is still indented, that means we can write more code that we executed if this condition is true, in this case let's say we don't want to
write any extra code, so to terminate this block we need to press shift and tab, now the cursor is at the beginning of the line
so lets write a print statement with a message like enjoy your day. Now when we run this program, because
this condition is true, you're doing to say this message followed by this second message, take a look, so run, there you go, it's a hot day
enjoy your day. But if I go over here and change this boolean value to false and run the program again, our
first message disappears and we only see the second message, enjoy your day. So this is how if statements work. Now back
here we can add another print statement let's say drink plenty of water.
Now because this spirant statement is also indented it will be executed if this condition is true. So I'm going to revert is hot to true
and run the program one more time. There you go, so it's a hot day, drink plenty of water, and enjoy your
day. Alright now let's add a second rule here, if it's hot we're going to execute these two lines, otherwise if it's not hot
we want to print a different message. So here we are moving an indentation and typing els
colon. Now when we press enter once again our cursor indented so the code that we write here will be executed if this
condition is not true. So here we can print it's a cold day, print,
where warm clothes. Now let's run our program one more time. So we get the message
about a hot day followed by enjoy your day. You don't see any message about a cold day. Now if we go back here on the top.
And change this boolean value to false and run our program we see different set of messages. It's a cold day
wear warm clothes and enjoy your day. But there's a problem with our program. If it's not hot it doesn't necessarily mean that it's cold, it means
it's a lovely day. So the absence of heat doesn't mean its cold. Back to our conditions, here on line 4 we have this rule that says
if it's a cold day, then print these messages otherwise if it's neither hot or cold say it's a lovely day.
So, to implement this rule we need to go back and put py and define another variable. So let' say
is underline cold we set this to true. Now here we need to add a second condition. So after
our first if statement, we can use an el if statement to define a second condition. So here's how it works. So,
el if which is short for els if or otherwise if, now here we add another condition, so,
is cold So if t's cold you want to execute these few lines. So let's cut these
from here, and move them under our second condition and finally if none of these conditions are true,
you want to print a different message. It's a lovely day. So, right now,
is hot is false, is cold is true, so when we run this program, python interpreter is going to execute the first
if statement, in this case because our condition is false, these two lines will be ignored, then Python interpreter will look at
line 7, it will evaluate this condition, in this case is cold is true so we're going to see these two messages on the terminal.
Now, in this case, because one of these conditions was true, this els statement will be ignored, so we are not going to see this message, and finally
as before, we are always going too see this message. So let's run our program, there you go. it's a cold day,
where warm clothes and and enjoy your day. Now, back to the top, if we change is cold
to false it's neither hot nor cold so it's going to be a lovely day. Let's run the program, and here you go, it's a lovely day
enjoy your day. So these are the basics of using if statements. As you can see they are very useful in programming and with these
we can build all kinds of rules into our programs. Okay here's an exercise or you. Imagine the price of a house is 1 million dollars.
Now if the buyer has good credit, they will need to put down 10 percent of the price of this property otherwise they need to put down 20 percent
write a program with these rules an display the down payment card for a buyer with good credit. You will see my solution
next. Alright let's define a variable for the price of this house so price
we set this to 1 million so 1 with 6 0s. Next we need a variable to tell if this buyer has good credit
so has good credit, and we set this to true, now we need an if statement
so if has good credit has true colon, here we need to calculate a down payment so
the down_payment should be equal to 0.1 x the price. That is 10 percent of the price of this
property. Otherwise colon the down payment should be 0.2
times price. Now finally we remove the indentation and print here we can use a form
of valid string, first we add a label, down payment colon and right after that we add a placeholder
or a hole for our down payment variable. So curly braces down payment. Let's run this
program, so down payment for a buyer with good credit is 100,000 dollars. Now let's improve this by adding a
dollar sign before this number. So back to our formatted string, just before the curly brace I'm going to add a dollar sign let's
run this one more time, that is better.
In this tutorial I'm going to talk to you about the logical operators within Python. We use these operators in situations where we have multiple
conditions. Here is an example. Let' say we're building an application for processing loans. If an applicant has high income
and good credit, then they're eligible for a loan. So in this example we have two conditions, one is having
high income and the other is having good credit. So if both these conditions are true, then the applicant is eligible for a loan.
So this is where we use the logical and operator. We use this operator to combine two conditions, and by the way
this is not specific to python programming language, pretty much any programming language that supports if statements also supports the logical operators.
So, back to our program, let's define two variables, has high income, we set this to true.
And another one has good credit, we also set this to true, now our if statement
if has high income has true, and has good credit is also true,
then we're going to print eligible for null. So this is where
we're using the and operator. So if both these conditions are true then this message will be printed. If one of them is false, we're not going to see
this message. Let's try this out. So I'm going to run this program so we see it eligible for loan, but if we change
either of these conditions to false, and run the program again look, the message disappears.
So this is the logical and operator. We also have the logical or, and we want to use that in situations where we want to do certain things
at least one of the conditions is true, for example let's change the rule for this program, such that if the applicant has high income,
or good credit, then they're eligible for a loan, so if either or both these conditions are true then the candidate is
eligible. Now back to our program we can implement this rule by using the logical or operator. So we simply replace
and with or, now when we run this program we're going to see this message because at least one of our conditions is true,
let's take a look. So the applicant is eligible for a loan for a loan because they have good credit. If you change this to false
but set the other condition to true, we still see the same result, but if both these conditions are false
then we're not going to see this message anymore. So this is the difference between these operators. With the logical and operator
both conditions should be true, with the logical or operator at least one condition should be true
we also have another logical operator called not and that basically inverses any boolean value we give it, if we give it,
we give it a true boolean value it converts it to false. For example let's make up a new room, if applicant
has good credit and doesn't have a criminal record then
they're eligible for a loan. Let me show you how to implement this. So, we go back to our program, in this example we don't need a
first variable for let's delete that. Let's set this variable to true we also define another variable like has criminal
record. We set this to false. Now, we want to check to see if this applicant has good credit and not
a criminal record. This is where we use the not operator. So, if they have good credit,
and not criminal record. So, in this example, has criminal
record is set to false, when we use the not operator this basically gets changed to true, so we have two conditions that are true.
Here's ones and here's another one. So our applicant is eligible for a loan. And when we run this program we see
this familiar message. However if an applicant has a criminal record, so let's change this to
true, now when we run this program we can see our applicant is not eligible because when we apply then operator on this
variable, we'll get false. So true changes to false. And we'll end up with two conditions, one that's true
and the other is false. And that's why this message is not printed. So this is all about the logical operators in
python. In this tutorial I'm going to talk to you guys about
comparison operators in Python. We use comparison operators in situations where we want to compare a variable with a value,
for example, if temperature is greater than 30, then we want to print it's a hot day. Otherwise, if it's less
then 10, it's a cold day, otherwise it it's neither hot nor cold. And by the way I'm taking about celsius, not farenheit.
So, to build these rules into our program, we need to use comparison operators. Back to app.py, I define this
temperature value, let's write an if statement, if temperature now we want to check to see if this is greater than 30, so we use
the greater than operator. If this is greater than 30, we want to print it's a hot day
otherwise, let's just print it's not a hot day. Now,
when we run this program, we're going to see this second message because 30 is not greater than 30. So our first condition a value
is to false. let's verify that. So run, it's not a hot day. Now if you change
the temperature to 35 and run this again, we're going to see a different message, it's a hot day, so this is where we use
comparison operators. Now what we have here as you know is an expression because it's a piece of code that produces a value. So more accurately this is
a boolean expression. So this is the greater than operator, we also have greater than or equal to, we have
less then, less then or equal to, here's the equality operator, so if the temperature equals to 30,
then you can say it's a hot day. Note that this is different from the assignment operator that has only one equals sign. You can see that if we use only one equal sign
here we immediately get this red underline because this is simply an assignment statement. We're changing the value of the temperature.
you are setting the value of something else. So we don't have a boolean expression, you are not producing a
boolean value. Okay? So, our equality operator has two equal signs and finally we have not
equal which is an exclamation followed by an equal sign. Now here's an exercise for you. You have probably seen that when you fill out a
form online, sometimes the input fields have validation messages, for example, let's say we have an input field for the user to enter their name.
Now if the name is less then 3 characters wrong we want to display a validation error, like name must be at least three characters,
otherwise, if the name is more then 50 characters long then we want to display a different validation error like name can be a maximum
of 50 characters. Otherwise if the name is between 3 and 50 characters then we just want to tell the user that name looks good.
So go ahead, and write a plan to implement these rules.
Alright let's define a variable called name and set it to let's say j. So we're assuming this is what the user types into an input field.
Now, we want to get the number of characters in this string. So we use the len function, right? Len of name.
When we print this we get 1, right you have seen this before. Now here we want to use an if statement so
if len of name is less then 3, then we want to print
name must be at least 3 characters now here we need a second condition
to check the upper limit. So el if len of name is greater than 50,
then we want to print a different message, name, must be a maximum
of 50 characters. Okay? And otherwise if else
none of these conditions are true that means the name looks good. So, print, name looks good. Let's
run our program. So in this case we get this message because our name is too short. Now if you go back here and
type something really really long. And then we run our program we're going to see a different message name must be a
maximum of 50 characters and finally if we type a proper name here like John Smith
and run our program we get name looks good.
Here's another good exercise that combines many of the materials you have learned so far, so earlier you built a program to
convert someone's weight from pounds to kilograms. Now we want to extend this program and allow the user to enter their weight in either kilograms or
pounds and then we will convert it to the other unit. Here's how our program is going to work. So I enter my weight in pounds so
100 and 60 now it's telling me if it's in pounds or kilograms. So here I'm adding l to lbs or k for kilograms.
And by the way, this program is not case sensitive so when I enter a capital l or lowercase l it takes
it as pounds. Now it tells me ur set it to kilos. Let's run this program one more time,
this time I'm going to enter my weight in kilo's, so send it to is the weight and the unit is kilograms so k,
and it says you are 160 pounds. So go ahead and spend a few minutes on this exercise, you will see my solution next.
Alright first let's ask the user their weight. So we use the input
function, weight colon we get the return value and store it in the variable called weight.
Now the second question, so one more time we use the input function el for pounds.
Or k for kilograms. So, let's get that too and store it in a variable called unit
now we need an if statement. So if unit equals l then we need to convert this weight
into kilograms. However, with this implementation we are only allowing the user to enter a capitol l, if they enter a lowercase l
this code is not going to work. So this is where we use the upper method of string objects so this unit is a string because as I told you
before, the input function always returns a string. So, we can use the dot operator to access all it's methods or
functions, here we call the upper method, this will convert whatever the user enters to upper case and then we'll convert it
to a capital l. Now, if this condition is true, then we need to get the weight and multiply it by 0,
.45 However, as you know this weight is a string object, and we cannot multiply a string
by a floating point number, we talked about this earlier in this course. So first we need to convert this weight to a numerical value. So
right here, when we call the input function, we can get the return value and pass it to the int function. So,
we call the int function and give it the return value of the input function. Now, the
in function will return an integer so we can store it in this weight variable. So here's the converted weight, let's store it in
a variable called converted, then we print here we can use a formatted string, so
we prefix this string with f ur we add curly braces to dynamically insert the value of
converted variable. And finally we add kilo. Otherwise, if the unit is kilograms.
We need to divide the weight by 0.45. q
So, weight divided by 0.45 and just to refresh your memory, this division operator returns a floating point number
but if we use double slashes we'll get an integer. In this case, we want to get a floating point number,
finally let's print a formatted string, ur curly braces, converted
pounds. Okay? Now let's run this program and see what happens. So weight is
160 and lbs in and that equals to 72 kilos, perfect, if we run it one more time,
and enter 72 kilos we get 160 pounds.
In this tutorial I'm going to show you how to use y loops in python. We
use y loops to execute a block of code multiple times and there are often useful in building interactive programs and games. In a future tutorial
I'm going to show you how to build a simple game using a y loop. So, let's get started with the basics, we write a y statement
and right after that, we type a condition followed by a colon as long as this condition is true the quote that we write
in this block will be repeatedly executed. Here is an example. We can define a variable like i, as in short for
index and set it to 1. Now we set our condition to i less than or equal to 5, so as long as I
is less then or equal to 5, we can print i, on the terminal. And then we need to increment i,
by 1. So we set i to i plus 1. The reason we do this is that if we don't do this I will be 1 forever
so we'll end up with an infinite loop. Because this condition will always be true. One is always less then 5, so in every iteration of this
loop, we increment i by 1, so at some point, i is gonna be six and then that is when this condition will be false and then
we'll jump out of this loop, okay? Now to demonstrate how everything works after this loop I'm going to add a print statement
say done. So note that these two lines are indented so they are part of the y block.
Okay, now let's go ahead and run this program and see what happens. So, take a look, we get the numbers 1-5 followed by
done. So heres how this program gets executed first we set i to 1 now python interpreter executes line
2, this condition is true because i is less then 5, so i is printed on the terminal and then incremented by
1. Then the control moves back to the beginning of the y loop. So it doesn't go to the next statement. So,
we come back here and now we are in the second iteration. In the second iteration i is 2, and because 2 is less then 5, our condition is still
true, so i will be printed on the terminal, and once again it will be incremented by 1, so at some point i is going to be 6,
and that's when this condition will be false so our look will be terminated and this done message will be printed on the terminal.
So this is the basics of y loops. Now let's make this program a little bit more interesting. Here we can write an expression like this. We
add a string, and in this string we add an asterisk and then we multiply this string by i. So
with this expression, we can repeat a string, when we multiply a string by a number, that string will be repeated. For example, if
i is two, this expression will produce a string with two asterisks. Now let's run the program
and see what we get. So we see this little triangle shape here. Because in the first iteration i is 1, so,
1 times an asterisk produces 1 asterisk. In the second iteration i is 2, so when we multiply 2
by 1 asterisks, we'll get 2 asterisks.
In this tutorial I'm going to show you how to use a y loop to build a guessing game like this. So we have this secret number which is currently set to
9. Now the computer is asking me to make a guess. So, let's say 1 is not right because the secret number is 9, okay,
try again, 2, no it's not right, let's try again, so I only have three chances to make a guess. If I can't guess the number the program
tells me that I failed. let's run the program one more time, this time I'm going to guess the number, it's 9, there you go, it says you in.
So let's go ahead and build this program using a y loop. Alright, let's start by defining a variable to store our secret number
so, we call the secret underline number and set it to 9. Now we need a while loop to repeatedly ask a user to
make a guess. So while condition colon What is our condition here? Well we want to give our user a
maximum of three guesses. So similar to the last tutorial, we can define a variable like I, set it to 0, and assume this represents
the number of guesses the user has made. And then we write our condition as i less then 3. Note that here I'm not
using less then or equal to operator, because with this condition our loop will be executed 4 times, while i is 0,
one, two, and three, so here we should use the less then operator. Now if we give this code to someone else it's unclear
what does i represent here, it's only in our head that i represents the number of guesses the user has made. So as
a best practice, always use meaningful and descriptive names for your variables. So it's better to rename this variable to guess, count.
Let me show you how to rename. So right click on i variable, and then go to refactor and
rename it. Look at the shortcut. On a Mac computer it's shift and f 6. Now in this dialogue box we can easily
rename your variable and pycharm will update all the references to that variable so we don't have to manually update each instance, okay? Let's
change this to guess_count enter, there you go, now that is better,
also it's better to store 3 in a separate variable to make our code more readable, because it's not quite clear what does 3 represent here.
So, let's define a variable called guess limit say to 3, and then we can change 3 to guess
underline limit, now our code is more readable while guess count is less then guess limit, see it reads like a story
this is how you should write code. Okay, so while this condition is true, we want toast the user to make a guess. So here
we use our input function, guess Now whatever the user enters comes out as a string so we need to convert it to an integer.
So right here, we pass the result to the end function and then get it and store it in a separate variable called guess.
So at this point the user made a guess, now we need to increment guess count so guess count
we set it to plus equal 1 or okay, now we need to check to see if the user will make the right guess.
So here we need an if statement. If what the user guessed equals our secret number,
again see our code is so readable. It's like a story you can read it like plain English. So if this condition is true we want to
tell the user they won. So print you won now lets go ahead and run our program up to this point.
So okay it's asking me to make a guess, I'm going to make the wrong guess so one it asked me again, 2 one more time,
3, okay, what is missing in this implementation is the message that tells me that I failed. We're going to take care of it momentarily, but
let's run the program one more time and make the right guess. So, 9 okay it says you won, but it's still asking me to make
a guess, because our while loop is going to get executed 3 times. Look 1 and 2. So we need to change our program
such that if the user makes the right guess, we need to terminate our while loop, we need to jump out of it. How do we do that?
So, over here if the user makes the right guess, after we print this message we can use the brick statement to terminate
terminate a loop, when python interpreter sees this, it's going to immediately terminate our loop, it's not going to evaluate this condition again.
Now let's run our program and see what happens. So, I'm going to guess the right number, you won and look, you are
now asked to make two more guesses, beautiful. Now the last thing we need to add here is the message that tells the user that they failed if they could not guess
the right number. How do we do that? Well in Python our while loops can optionally have an else part.
similar to the if statements. So earlier you learned that our if statements can optionally happen else part. Here, so
if this condition is true, do this, otherwise do something else. In this case our if statement doesn't have
an else part. Now, similar to the if statements Our while loops, our while statements can also have an else part.
So, right at this level we can add an else block, so else colon.
And the code that we write here will get executed if this while loop completes successfully without an immediate
break. In other words. If the user guesses the right number, you break this loop, you jump out of it so the code that
we write in the else block will not get executed. But if the user cannot guess this number, you're never going to break out of
this loop, so this loop will be executed to completion untill this condition become false. In that case, the code that we write
in the else block will get executed, and this is the perfect opportunity for us to tell the user hey, you made three guesses but none of them were right.
So, print, sorry you failed. Now, let's test the program one more time.
So, guess 1, 2, 3, sorry you failed, let's run it one more time. This time I'm going to make
a wrong guess, and then the right guess, we won and our loop terminated immediately.
Alright, now it's time for you to practice what you have learned so far.
So once again we're going to build a game this game is a simulation card game. Now our game doesn't have a graphical user interface or gooey
and it doesn't really matter for now, our focus is entirely on building the engine for this game. So let's see how this works.
When we run this, we get this little symbol here, and our program is waiting for us to enter a command. If you type help
either a lower case or upper case we get the list of commands that our program or our game currently supports. So we can type the
start command to start our car, we can type stop command to stop our car, and quit to terminate the game.
Any other commands that we type our program is going to tell us hey I don't understand that. For example, if I type asd here, it's going to say I don't understand
that.If you type start, we get this message, car started, ready to go, if you type stop it
says car stopped, and finally if we hit quit our program terminates, this is a fantastic exercise for you to practice
wha you have learned, so pause the video and spend 5-10 minutes to build this program.
Alright, we're going to start with a while loop with a condition What is our condition here? We want to run this loop
until the user types quit. So we can define a variable or a story to command what the user enters, and then we can run this
loop as long as the command does not equal to quit. So right before the loop, we define a variable, command, and initially we set it
to an empty string. An empty string is a string that has no characters in it. We only have the quotes. So then
we type out our condition as while command does not equal to quit then do something.
Now immediately we have a problem here because we're assuming that the user types the command in lower case, so if they type this in upper case they
our program is not going to behave properly, so to fix this problem, you need to call the lower method of the string object and then compare the results.
With this quit. You could also call this upper and then type quit in upper case. It's about our personal preference
in this demo I'm going to use lower case characters. So, okay, now in this loop we need to ask the user to enter
a command. So once again we're going to use our input function, we're going to add a greater then symbol followed by a space,
whatever the user enters, we get it and store it in our command variable. Now apart from
quit command, there are three other commands that we need to support. Start, stop, and help. So here we need an if statement to compare
what the user enters with one of the supported commands. So, if command.lower
equals start then you want to print the message like the car started. So print the car started.
Ready to go, it doesn't matter, now the second condition. What if its not start, maybe it's stop? So,
el if command.lower equals stop, there you go, then we print a
different message car stopped. Now look at our code. We have repeated this lower lower lower multiple times.
This is bad, in programming we have a term called dry, which is short for don't repeat yourself. So whenever you have duplicate
your code that means you're doing something wrong. So how can we solve this problem. Well, instead of calling the lower method in each condition,
we can call it right here when we get the input from the user, so this input function as you know returns a string, we can
immediately call the lower method on this string, and with this command will always be in lowercase, so we don't need to
call this method in every condition. Look, we remove the duplication and also our conditions
are shorter and easier to read. There is also one more place we need to modify so, it's right here. That is better.
Now, the third command. We need one more el if. If the command equals help, then,
we want to show the commands that we support. So, here we're going to print a multi line string. So we
use triple quotes like this, and give the user a guideline like this. So start
to start the car stop to stop the car, and
quit to quit. Now finally we need an else part, so if what the user enters is none of these commands,
we're going to tell them, hey we don't understand these, else, colon print
sorry I don't understand that. And by the way note that here becomes I'm using double
quotes, I can easily use a single quote as an apostrophe, okay? So let's run our program up to this point and see what happens.
Alright, let's type start car is started, beautiful, stop, car is stopped, help,
we get this guideline, but there's so much indentation before our commands, we'll fix that in a second. And finally
let's test the quit command, oops, our program didn't work properly. Here is the reason. With these if statements,
we're comparing the command with start stop, and help. Anything else will end up here, so that's why our
program says it doesn't understand that. So that's why our program says it doesn't understand that command. However, after this el statement
the control will be moved to the beginning of the loop. At this point our command is quit, so our loop will complete and the
program terminates. In other words when we run this program and type quit, our program actually quits but
we still see this message which shouldn't appear here. How can we solve this problem? Well, we can come back here and just before
the else block, add another el if, something like this. el if command equals
quit then you can immediately break. This will solve our problem, but note that we have kind of repeated
this expression in two places. The reality is that we don't really need this condition on the top, because with these if statements
well more accurately with this el if we can jump out of this loop and terminate our program. So, we can simplify our condition
to something like this. True. So while true means this block of code is going to get executed repeatedly,
until we explicitly break out of it, okay? Now let's test our program one more time. So,
quit now our program terminates and we don't see that message beautiful. So let's fix the last problem. You saw that when we
typed help, these guidelines appeared with so much in indentation, and here's the reason, look, right here in our code,
they are already indented. So when we use triple quotes, what we type here will be printed exactly as is. So, because we
have an indentation here, this indentation will also be printed on the terminal. So, let's delete these
okay, run the program one more time, type help, the indentation is gone. Beautiful. Now here's a challenge for you. I want you to
take this program to the next level. So right now if we type start we get this message car started. And if we type start again
we get the same message. It would be better if we got a message like car is already started so it doesn't make sense to
start a car twice. Similarly, if we type stop it says car stopped, if we type it again we get the exact same
message, it doesn't make sense to stop the car twice. So here's what I need you to do if the car is stopped and the user tries to stop it again,
the program should say hey, the car is already stopped, what are you doing? And similarly if the car is already started and the user tries to start it again,
the program should yell at the user. So go ahead and make the necessary changes to implement this scenario.
Alright to add this to our program, we need to know if the car is started or not. So there is one more piece of information
we need to store in the memory. What is the kind of data we need to store here? A boolean. Is the car started or not, it's a matter of yes
or no. True or false. So on the top, here we can define another variable like started and initially we set it
to false. So the car is not started, right? Now when the user types the start command, here we need to check
to see if the car is already started. If not the we'll start it or otherwise we'll yell at the user. So in this block we'll write
another if statement, if it's already started and we print car is already
started. Otherwise, so if you add an el statement here. And at this point,
you set started to true. So we start the car and we print this message, okay? Now we need to make a similar
change for the stop command. So if the car is already stopped we need to print a different message. If
not started, so here we're using the not operator to see if the car is stopped. So if it's not started that means
it's stopped, okay? So if it stopped we print car is already stopped with
double p's, otherwise so else we need to stop the car, how do we do that? We
set started to false. And then we'll print this message. As easy as that. Let's go ahead and run our program.
So, initially our car is stopped. So I'm going to type stop, it says the car is already stopped, so lets
start it, okay, now our car is started, let's start it one more time. The program is yelling at us. So we can
not start the car twice. Beautiful. Now let's stop it it says the car is stopped, let's stop it one more time, we get this message
again. In this tutorial, I'm going to talk to you guys about
for loops in python. In the last tutorial, you learned about while loops you learned that we use while loops to execute a block of code multiple times.
In python we have another kind of loop, that is a for loop, and we use that and we use that to iterate over items of a collection, such as a string.
Because a string is a sequence of characters, so it looks like a collection so we can use a for loop to iterate over each character in a
string and then do something with it. Here's an example. We type out for then we define a variable, this is what we call a loop
variable. In each iteration, this variable will hold one item. So, let's call it item, in
here we type out a string like Python, and then colon. So with this for loop we can iterate over a string and in each
iteration this item variable will hold one character at a time in the first iteration it will be set to p then
in the second iteration it will be set to y, and in the third iteration it will be set to t and so on. So here we are inside our for block,
because of the indentation here, so whatever we type here will be executed in each iteration, for now we can simply print this item
now let's run this program and see what happens. So you can see each character in this string is printed on
a new line. Let's look at another example. In Python we can define lists using square brackets, so let me remove this string from
here, and define a list using square brackets, a list is simply a list of items, a list of numbers, a list of
customers, a list of emails, products, blog posts, whatever. So here we can define a list of names like Mosh,
Jon, Sarah, and then go ahead and run our program so we can see in each iteration we get one name
and print it on a new line. We can also loop over a list of numbers, for example,
1, 2, 3, 4, let's run it, again we see each number on a new line, but what if we want
a list of numbers? We don't to explicitly type out a list with let's say 100 or 1000 numbers, we don't want to type, 5, 6
7 all the way to 100. That is when we use the range function. So, let me delete this,
In Python we have a built in function called range, for creating range of numbers. So, we give it a number, let's say 10,
let's run this program, now we can see here on the terminal we have 0 all the way
to 9. So 10 is not included. So basically when we call the range function, this range creates
an object, it's not a list, it's a special kind of object we can iterate over, in each iteration this object will spit out a new number.
We can also work with a range of numbers here, let's say you want to start from 5, and go all the way to 10.
So, let's run our program, now we have the numbers 5, 6, 7, and 9. Also, this range
function can optionally take a step, so we can pass two asa step to this function,
and when we run our program, we can see our first number is 5, now we go two steps forward to get 7,
once again we go to two steps forward we get 9 and that is the end of our range. So this is the basics of using for loops in python.
Now here's an exercise for you. I want you to write a program to calculate the total cost of all the items in a shopping cart.
So let's say we have a list of prices like 10, 20, and 30, I want you to use a for loop,
to calculate the total cost of all the items in our imaginary shopping cart, so calculate that, and then print it on the terminal. That's pretty
easy. And you should do it in a couple minutes. So as you learned we use for
loops to iterate over all the items in a collection, a collection can be a string, it can be a list, it can be a range object that is
returned from the range function. Anything, any kind of object that has multiple items. So in this example we're going to use a for loop to iterate over
the list of prices. So for item in prices, colon, and by the way this loop variable
we don't have to call this item, can call this anything. For example, in this case we can rename it to price. So for price,
in prices. Now in each iteration this price will hold one value. In the first iteration it's going to hold 10, then it's
gooing to be 20, and then it's going to be 30. So we need to define another variable to calculate the total so
we define that outside of our for loop, let's call it total and initially we set it to 0. Now in each
iteration we get the current price and add it to the total so we write total equals total plus price
or as you learned earlier we can use the augmented assignment operator to simplify this code.
So, after our for loop. This total variable has a total of all the prices we can simply print it here,
or we can use a formatted string, so a string prefix with f, the other label, like total,
curly braces to dynamically include some value in our string, in this case our total variable. So let's go ahead
and run this program, there you go, so the total cost of all the items in our imaginary shopping cart is 60.
In this tutorial I'm going to talk to you guys about nested loops
in python. Using a nested loop basically means adding one loop inside of another loop, and with this technique we can do some amazing things
for example we can easily generate a list of coordinates. So, a acquired (?) as you know is a combination of x and y
value. Let's say 0 and 0. Now let's say you wan to generate a list of coordinates like this. So we have 0 and 0,
then we'll have 0 and 1, then 0 and 2, next we're going to change x, so we're going to use 1 for x,
and once again we're going to use these 3 values for the y coordinates so 1 and 0 then 1 and 1
and 1 and 2, you got the point. We can easily generate these coordinates using nested loops. Let me show you.
So, we start with one loop, let's say for x in range 4. With this loop, we can generate value
for the x coordinate. Let's print this on the terminal, Okay, so, we get the values, 0
to 3. Now for each x, like 0, we should generate a few y values. So that is where we use
a nested loop. So inside of this loop we're going to add another loop, so instead of just printing x first we want to add
another loop, for y in range let's say 3, now we can print x and y together
so, print, here, we use a formatted string. to display coordinates like this. So we add parenthesis
inside of this parenthesis first we need to add x so curly braces x then a comma followed by
another set of curly braces, and y, let's run this program and see what we get.
There you go. So, we have these coordinates 0 and 0, 0 and 1, 0 and 2, then you have
1 and 0 1 and 1 1 and 2 and so on. So let me explain exactly how this program gets executed. So in the first iteration,
of our outer loop, x is 0. Now we are on line 2, here we have a new loop which we call an
inner loop. In this inner loop, in the first iteration y is going to be 0, so we print 0 and 0 on the
terminal. Now the control goes back to line 2 or our inner loop. In this second iteration y will be set to 1, but
we are still in the first iteration of our outer loop. So x is still 0, but now y is incremented to 1.
So that is why we see 0 and 1 on the terminal. Once again, the control goes back to line 2, we are in the third
iteration of our inner loop, so this will continue until our inner loop completes. That is when y reaches 2 because
this range function generates number 0 to 3 but not including 3. So we'll have 0 1 and 2. After this inner loop completes,
then the control goes back to line 1, and at this point we're going to be in the second iteration of our outer loop. So x will be
1, then the control will be moved to line 2, or our inner loop, at this point, this range function is going to generate the numbers 0
to 3 one more time. So this inner loop will be executed 3 times. And then we'll go back to our outer loop. So this is how
nested loops get executed. Okay, here's an exercise for you, but this one is a little bit
more challenging then the exercises you have done so far. So I really don't expect you to do it, but if you do it, wow, I will be so proud of you,
so see what I've done here? Using nested loops, I've written some code to draw this f shape, can you see that? So I
let me give you a hint, first of all we have this list, called numbers, in this list we have these values,
5, 2, 5, 2, 5, 2. These values determine the number of x's we have in each line. So,
for example, the first item in this list, this tells us that we should have 5 x's on the first line. There you go, so 1, 2, 3,
4, 5, on the second line we're going to have 2 x's, on the third line we're going to have 5 x's like this.
So I've written code to convert a simple list of numbers into a shape like this. Now here's a tip for you.
Using your for loop you need to iterate over this list. In each iteration you get one number, this determines the number of x's
to be displayed on that particular line. So if you want to cheat, you can get this number and multiply by a string that contains x,
so if you multiply x by 5, we'll get 5 x's, that's not what I want you to do. I want you to use an inner loop here to
generate a string that contains 5 x's. So imagine in Python we cannot multiply a string by a number
so to solve this problem we need a nested loop. So go ahead and spend five minutes on this exercise. And by the way, do your best to solve this. It is
a little bit challenging, but it's not extremely difficult. It just requires a little bit of focus. You'll see my solution next.
Alright so first we need to iterate over all the items in this list. So for item
in numbers, or, you could rename this variable to x_count. That is the number of x's
on each line. Okay? Now I told you that if you want to cheat you can write code like this. Print x times
x underline count. If you run this program we get the same output. So this is the beauty of Python, with Python
we can write expressions like this, we can multiply a string by a number to repeat it. A lot of other programming languages don't support this feature. But
for this exercise, I wanted you to imagine that we don't have this feature in Python so you will have to use an inner loop to solve this problem. Here's how
it works. In the first iteration, x count is going to be 5. So we need to generate 5 x's. How can we do that?
Well, let's say we define a variable called output and initially set it to an empty string. Now we need to add 5 x's to this string. So,
we can use another loop for count in range, of x underline count. So we're using the range function
to generate a sequence of numbers from 0 up to x count. So in our first iteration x count is going to be 5, so
range of 5 would generate the numbers 1, 2, 3, 4. So this inner loop will be executed 5 times.
That is exactly what this count represents. So now in each iteration we simply need to
append an x to our output variable. So we set output, plus, equals x,
and then after this inner loop we simply print the output. With his we'll print 5 x's on
the first row. Then we go to the second iteration of our outer loop. At this point x count is going to be 2, now
on line 3, we're going to reset our output variable to an empty string. So we start over. Then we go to our inner loop,
this loop will be executed 2 times, so we'll append to x's to the output variable and then print it, as simple as that.
So see, it wasn't really that difficult, but it was slightly more difficult then the previous exercises. So let's run this program, there you go.
Now if you're adventurous, I want you to modify the values that we have in our numbers list,
to print and l here.
Now in this tutorial we're going to take a closer look at lists. So, I'm going to define a list of names, let's send them
to John Bob Mosh Sarah and Mary. So,
if you print this list here, what we see on the terminal look exactly like how we define our lists we have
square brackets, and in between these square brackets we have our item our items, so we have 5 strings in this list.
So we can also access an individual element using an index just like how we can access an individual character in a string using an index.
So, here we type out square brackets, and specify an index. The index of the first item in this list
is 0. So, let's run this program, there you go, we get Jon now if you want to print out the third element in this list
it's index is 2, so names of 2, returns Mosh, now we can also pass
a negative index here, so negative 1, refers to the last item in this list, that is Mary, let's run the program,
there you go, we see Mary, if you pass negative 2, this returns the second item from the end of the list. So let's run the program,
there you go, we get sarah, so this is exactly like accessing individual characters in a string. We can also
use a colon to select a range of items, for example if you pass 2 colon. This will get all items
starting from the index of 2, that is Mosh here all the way to the end of the string. So let's run this program
there you go. We get this list with 3 items, Mosh, Sarah, and Mary. We can also specify
an end index, let's say 4, so this will return all the items up to this index, but it doesn't include the item at this index.
So when we run this program we only see Mosh and Sarah, the item I've indexed 4which is the 5th element or
5th item in this list is not returned. So Mary is not returned. And also here we have default values, so if you
leave out the end index this expression is going to return all the items starting from the index of 2, to the end of the list
or if you leave out the start index, this expression asumes 0 as the default index, so it will return all the items from the
beginning to the end of the list. And by the way, just like strings, these square brackets here, don't modify our
original list, they simply return a new list. For example, if we pass 2 here, you can see this returns a new list with 3 items.
So if you go back here and print our original list of names right after you can see it's not affected.
So here we want to use square brackets with a colon to select a range of items, we get a new list, and by the way we can also
modify any of the elements in this list. For example let's say we made a mistake and the first item shouldn't be john with an h,
so we want to remove the h, that is very easy, so we access it, using an index that is names of 0, and we set it to a new value
like this. Now, let's print our list so, you can see the first item in this list
is now data. So this is the basics of lists. And here's a exercise for you. I want you to write a program to find the largest number
in your list. This is a fantastic exercise for beginners, so go ahead and spend a few minutes on this, then come back and continue watching.
Alright, let's define a list of numbers, numbers, with a bunch of random numbers
3, 6, 2, 8, 4 and 10. Now to find the largest number in this list. We need to define another
variable let's call it max, this variable will hold the largest number, now initially you want to assume
the first item in this list is the largest number. So we set max to numbers of 0. We're only assuming that the first item
is the largest number. Chances are our assumption is wrong. So we need to iterate over this list, we need to loop through it, get
each item and compare it with max. If it's greater than Max, then we need to reset max to that number. So in the first iteration we get
3, and max is also 3. Is 3 greater than 3. No, so we move on, we get the second number, is
6, greater than 3? It is, so we need to reset max to 6. Once again, we continue, we get 2, these two greater
than 6, no it's not, so we move on, then we get 8, is 8 greater than 6? It is, so we should reset max to 8.
That is pretty easy. So here we need a for loop, for number in numbers colon
now we need too heck to see if this number is greater than max, so, if number is greater than max,
max colon then we need to reset max, so max to this new number, that's all we had to do.
So, let's print max, and run our program we can see the largest number in this list is 10.
It doesn't matter whether this number is at the end of the list or the beginning. So if I move 10 and put it right at the beginning
we should still see the same result. Let's run our program, we still see 10, if I put this somewhere in the middle, our
program should still work. Let's put it right after 2. Run the program, we still get 10.
In this tutorial I'm going to talk to you guys about two dimensional
lists in python. Two dimensional lists are extremely powerfully and they have a lot if applications in data science and machine learning. Here's
an example, In math we have a concept called matrix, which is like a rectangular array of numbers, let me show you. So
we have 1, 2, 3, 4, 5, 6, 7, 8, 9. So we have a rectangular array of numbers. You have rows,
and columns. So this is a 3 x 3 matrix in math. Now we can model this in python using
a 2 dimensional list. A 2 dimensional list is a list where each item in that list is another list. So,
you want to define a matrix. We set it to a list, each item in this list, is going to be another list, and that list represents
the items in each row. So, the first item in our list is going to be another list, and in this other list we're going to have
the values 1, 2, and 3. Now the second item in our matrix list, once again, we have a list,
this list represents the items in the second row. So, 4, 5, and 6, and finally 7, 8
9. So as you can see we have a 2 dimensional list Each item in our outer list is another list.
Okay? So, this is how we can implement a matrix in python, now to access an individual item in our matrix,
once again we use square brackets, let me delete this stuff, alright, so how do we access 1 here,
well, you start with our list then we add square brackets first we need to go and get the first item in this list.
Right? So we pass 0, now this expression returns another list. That is the inner list. In this list,
let's say you want to access the second item, so, once again we add square brackets, and we pass 1, that
is the index of 2 in this list, alright. So if we print this on the terminal
we get 2. Okay? So using 2 square brackets we can access individual items in our matrix, and
also we can modify these values using this syntax, so, before printing this, let's change this to 20, so matrix
of 0, and 1, let's change it to 20, and then print it, there you go, it's modified, now here you
can also use nested loops to iterate over all the items in this matrix. Let me show you. So,
we start with a rows for the rows in matrix, so with this loop, we are iterating over our Matrix
list, in each iteration row will contain 1 list, 1 item, okay? Now, here we need to
use an inner loop. So we need to loop over this row which is a list of items. We can type out 4
item in row colon and print item. Okay? So, let's run this program,
there you go, we get all the item in our list. Hey, I just
wanted to make a quick announcement. In case you haven't seen my website yet, head over to codewithmosh.com this is my coding school, where you can find plenty of courses
on web and mobile application development. In fact recently I published a comprehensive python course that goes way beyond this beginners
youtube. And if you're serious about learning python and getting a job, I highly encourage you to enroll in this course. Just like this tutorial you can watch it anytime,
anywhere as many times as you want, and you will also receive a certificate of completion that you can add to your resume, and the course comes with a 30 day
money back guarantee, so if you're not happy we'll give all your money back, no questions ask. The price for this course is 149 dollars, but
the first 200 students can get it for only 15 dollars. So if you're interested, the link is below this video, click the link, and get started.
In this tutorial, I'm going to talk to you guys about the list methods, or list functions. These are the
operations that we can perform in a list. So let's define a list of numbers, here we pass a bunch of random numbers, like
5, 2, 1, 7, and 4. Now there are a number of things we can do with this list, we can
add new items to it, we can remove existing items, we can check for the existence of an item these are the operations that we can perform on a list. So,
the we type numbers, we can see all these functions or more accurately the methods that are available in our list objects.
So we can call the append method to add a new item to this list. Let's say 13. Actually, no it's not a good number.
I'm joking I'm not superstitious, so let's add 20, it doesn't really matter and then print our list
when we run the program we can see 20 is added at the end of this list but what if you want to add a number somewhere in the middle, or at the beginning
of our list? For that we use a different method, that is called insert. So, insert, now this method
takes 2 values, let me show you. So when we open parenthesis look at this little tool tip above the insert method.
You see the first value that we need to pass here is an index, so this is the index at which we want to insert this new item. Let's
say we want to add an item at the beginning of our list, so we passed our index position of 0, and then the second value is the actual
object we want to add to this list. Let's say we want to add the number 10, now when we print this list you can see that the
number 10 is placed at the beginning of the list and all the other items are pushed to the right. We can also remove an item so
we call remove and pass the item that we want to remove 5. Now we
print our list so we see 5 is gone, and we have 2, 1, 7, 4. If you want to remove all the items in the list, you can call
the clear method, so, clear this method doesn't take any values, so, we simply
call it and it empties our list, all the items are removed. We also have another useful method called hop,
and with this we can remove the last item in a list. Let me show you. So, we run our program, you can see the number 4
is removed from the end of our list. Now if you want to check for the existence of an item in our list, you can call the index method.
So, we call index and pass a value here, like 5 and this returns the index of the first
occurrence of this item. So let's print this on the terminal. We don't need this line anymore. So the
index of 5 is 0. What if we pass a number that doesn't exist in this list? Let's say 50? Run the program,
we get an error. We get a value error. 50 is not in the list. There is also another way to check for the existence of an item,
we can use the in operator. So, let me show you we type our 15 in numbers,
earlier we used the in operator with a string, we check for the existence of a character or a sequence of a character in a string,
now here we're checking for the existence of 50 in the list of numbers, so let's print this, we get a boolean value,
false, so unlike the index method, this expression, doesn't generate an error, so it's safer to use this. We also have another
method for counting the occurances of an item, let's say we have another 5 over here.
Now we can call numbers.count and pass 5 and this should return 2 because we have 2 5s in this list.
Take a look. There you go. That is pretty useful now if you want to sort your lists you can call sort method. So,
we call the sort method here, this method doesn't take any values so, look at he return value, that is none, none
is an object in python that represents the absence of a value. So this sort method doesn't really return any values it simply sorts this
list, in place, so instead of printing the return value oft his method, we simply call it to sort our list
and then print our list. Take a look. Now, all the items are assorted in ascending order. We can also
sort the items in descending order, so after we sort the list we can call the reverse method. We can simply reverse
our list. Now let's go ahead and run our program, take a look. Our numbers are sorted in descending order.
And one last method I want to show you here that is pretty useful is the copy method. So copy, with this method you can get a copy
of our list. So let's define another variable called numbers 2, now numbers 2, is a copy of our original list. So if
you make any changes to our original list, if you add new items to it, if you remove existing items, these operations are not going to impact our second list.
Let me show you. So after we show you a copy of our numbers list let's add a new item to this list, so numbers.apphend
ten. So the first list is updated, so now we have a new item in our first list, then lets print the second list.
Take a look, we don't have the number 10 here, because these are 2 independent lists. So these are all the operations
that we can perform on lists. We can add new items to a list, we can remove exxisitn items, we can check for the existence of an item, we can sort
our list, and copy them. Now here's an exercise for this tutorial, I want you to write a program, to remove the duplicates on our list.
Again, this is a fantastic exercise. So spend a few minutes on this and then come back and continue watching.
Alright let's say we have a list of numbers with a bunch of duplicates. So 2, 2, 4, 6,
6, 3, 4, 6, 1. We want to remove the duplicates. So we need to define another list
let's call that new list. Initially we set it to an empty list. Then we need to iterate over
our first list, get each item, and if we don't have that number in this unix list, then we'll add it to this second list.
As simple as that. So, for number in numbers, now we need to check to see if we
have this number in the second list. So we use the in operator. If number not
in units so if we don't have an operator in this units list,
then we'll need to add it, so units. apphend number, that's all we have to do.
So, let's go ahead and print the units list there you go. So you have 2, 4,
6, 3,and 1. The duplicates are removed.
In this tutorial I'm going to talk to you guys about another important structure. in Python called tuple. Tuples are similar to lists
so we can use them to store a list of items. But unlike lists we can not modify them, we cannot add new items, we cannot remove existing items, we
tuples are immutable. We cannot mutate or change them. So let me show you. So I'm going to start by defining a list of numbers,
1, 2, 3, 4, so we use square brackets to define lists and parenthesis to define tuples, so if we change this to
parenthesis, 1, 2, 3. Now we have a tuple. So if we type numbers.
look here we don't have the append or insert methods, so we cannot add new items to this tuple. We also don't have remove clear and pop, we cannot
remove any of these items here. We only have two methods, count, and index. We use count to count the number of occurrences in an item,
and index, to find the index of the first occurrence, of an item. So we can only get information about a tuple, we can't change it.
And by the way, these other methods that you see here, they start with two underscores, we refer to these as magic methods, they're more of an advanced
topic, so they go beyond the scope of this tutorial. If you're interested to learn bout them. You can get my python course, I've covered them in detail.
So similar to lists you can address individual items using squre bracketts,s o we can get the first item like this and then
print another terminal, there you go, the first item is 1, but if you try to change the first item we'll get an error, so,
numbers of 0, we set it to 10 and run our program there you go. We get this type error, because the tuple object
does not support item assignment. So we cannot mutate or change tuples, they are immutable. Now practically
speaking, most of the time you'll be using lists, but tuples are also useful. If you want to create a list of items and make sure
no where in your program you accidentally modify that list, then it's better to use a tuple,
In this tutorial I'm going to show you a powerful feature we have in python called unpacking.
So lets find a tuple called coordinates and here we pass 3 values, 1, 2, 3. So you imagine these are
the coordinates for x y and z. Now let's say we want to get these values and use them in a few expressions, a few complex
expressions in our program. Maybe we want to include them as part of a large complex formula. So together we'll have to write code like this,
coordinates of 0, then let's say we want to multiply this by coordinates of 1, and then multiply it by coordinates
of 2, our code is getting a little bit too long, this is just a very simple example. But let's say we want to use these values in quite a few places
in our program, a better approach is to get these values and store them in separate variables like we can get
coordinates of 0, and store it in x, then you can get coordinates of 1 and store it in y.
And similarly we get coordinates of 2, and then store it in z. Now we started repeating coordinates of
2 or coordinates of 0 multiple times, we can simply work with these variables, x times y times z, that is better.
Right? So nothing new so far. But in Python we have a powerful feature called unpacking and with that we can achieve
the same result with far less code. So we can define our variables x, y, and z. And set them to our
tuple. What we have on line 6 is exactly identical to what we have on lines 2-4.
So this is a shorthand to achieve the same result. So let me delete this and explain how this code works.
When Python interpreter sees this statement, it will get the first item in this tuple and assign it to the
variable. Then it will get the second item in this tuple, then similarly we get the third item in this tuple and assign it to
the third variable we have here, so we are unpacking this tuple into 3 variables. Now if we
print x you can see x is 1, similarly y is 2, there you go.
So this is unpacking. And by the way this is not limited to tuples, we can use this feature for lists as well. So,
if I change parenthesis to square brackets, now coordinates is a list, so we can unpack our list into 3 variables
now we run our program we can see y is 2.
In this tutorial I'm going to talk to you about dictionary in python. We use dictionaries in situations where we want to
store information that comes as key value pairs. Here's an example. Think of a customer. A customer has a bunch of attributes
like name, email, phone number, address and so on. Now each of these attributes has a value.
For example the name can be jon smith the email can be jon@ gmail.com the phone can be whatevr
so what we have ere is a bunch of key value pairs. So in this example, our keys are name, email, and phone,
and each key is associated with a value. So this is where we use a dictionary. With a dictionary, we can store a bunch of key value pairs.
So let me show you how to define a dictionary in python. Back to our program, I'm going to define a variable, customer,
and here we set it to curly braces. With these curly braces we can define dictionary. In this example we have an empty dictionary that doesn't have
any key value pairs. Now we can add one or more key value pairs in between the braces. So let's
add a key value pair here, I'm going to set the key to a name, and the value to John Smith, then we add a comma,
to add another key value pair. So let's set age to 30 let's add another key value pair is
underline verified and we set this to a boolean. Now what matters here is that these keys should be
unique. So if I add another key value pair here, set age to 40, now look pycharm
has highlighted the age key, because we have duplicated that and that's not allowed. So each key should be unique in a dictionary, just like,
the dictionaries we have in the real world, in a real dictionary we have a bunch of words and they're definition each word is only listed once in a dictionary.
We don't have the word book twice. So let's delete the second duplicate key value pair, so the keys should be unique,
and in this example, I'm using strings, but they can also be numbers, we're going to look at that later, but the value can be anything, it can be
a string, a number, a boolean, a list, literally anything. Now we can access each item in this dictionary
using square brackets. So, we type customer, square brackets and then specify key like name
and this will return the value associated with the name key. Let's print it on the terminal, have a look,
there you go, so, the name is John Smith, now what if we pass a key that doesn't exist, lets say first date.
You run the program, you get a key error because we don't have a key called birth date. Also, if we spell
name with let's say a capital N, we get the same error because we don't have a key with the exact same sequence of
characters in this dictionary. Now to get around this we can use the get method, so instead of using the square brackets
we call the get method and specify the key Now if you use a key that doesn't exist here, it doesn't yell at us. For example,
if you pass birth date it simply returns the non value. Earlier I told you that none is an object
that represents the absence of a value. So instead of getting a key error we get none and we can also option
supply a default value, for example, if this dictionary doesn't have this key, we can supply the default value, let's say
January 1st 1980. Let's run the program now instead of getting none we get this default value.
So, this is how we can access the value associated with the key in a dictionary. We can also update these values for example
before a print statement we can write code like this, customer of name, let's update the name to jack
smith, now this little warning is telling us here we can put jac smith here instead of defining it once, and then update
it. Don't worry about them, it doesn't really matter. Now with this line if we print the name of this customer, we should see jack smith, let me show you.
So, I'm going to use the square bracket notation again, let's print the name of the customer you can see that is updated here,
we can also add a new key here, let's set the birthdate to some value like january first
1980. And then we can print it here, so as you see we can easily add new key value pairs
to a dictionary. So this is the basics of using dictionaries in python. They're extremely important and they have a lot of applications in the real
world. Okay, here's an exercise for you. So here we have this program that asks our phone number. Let's type 1
234. We type it in digits and then this will translate it, to words, take a look. Enter, it prints, 1, 2, 3,
4. That's a pretty cool program, so go ahead and spend a few minutes on this exercise, it's pretty easy, I will see you
next. Alright, so first we need to get the users phone number, we call the input function
with the label phone, we get the result and store it in this variable, now let's say the user enters 123
4. So we need to look through this string, get each character and translate it to a world, so what we need to implement this scenario.
is a dictionary, because a dictionary is a structure that allows us to a key to a value. So we can have a dictionary with keys
like 1234. And we map each of these keys to a word. So we cannot put digit 1 to
the word 1 we can map 2 to two you get the point. So let's define
a dictionary, you can call it digits, underline mapping now this dictionary I'm going to add a few key value pairs.
One, we map it to 1, 2, we to 2, 3, to 3,
and finally, 4 to 4. Now technically we should add all the digits from 0 to 9, but I don't want to waste all your time
typing repetitive things here, you got the point. So lets move on, now we need to look through the phone string. So
4 character in phone, we get each character and then use it to access a key value pair in
dictionary. So, digits underline mapping we can use square brackets or call the get method,
I would prefer to use the get method, so in case the user enters some character that is not part of our dictionary, our program is not going to yell at them.
So, we call the gt method and pass this character a the key, and if we don't have this key, we can supply
a default value like exclamation mark, so with this we get a word now we need to add this word to an output string, so we can define
an output string, initially we set it to an empty string, in each iteration we get this and add it to our output string.
So, we type output, plus equals. This and we should also add a
space at get. So the words are not close to each other, okay? That's all we have to do. Now finally let's print
this output, run our program, so I want to type 1, 3,4, 5, lets
see what we get. We get 1, 3, 4 with an exlamantion mark.
In this tutorial I'm going to show you something really cool that you can do with dictionaries, so here in this program you can type
a message like good morning followed by a smiley face, when we press enter, we get this beautiful smiley face, or
we can type i am sad, with a sad smiley face and it gets translated to this beautiful emoji.
So this is another application if using dictionaries, we have a dictionary that maps these characters into smiley faces.
So lets go ahead and build this program together, we start by calling the input function, here we pass a greater than symbol
as an indicator for the user to type a message, we give that message, store it here, as you know that is a string, now we need to
split this string by a space, so if the user types good morning with a smiley face, we want to break this down into
3 words, good morning, and smiley face. To do that we can call the split method. So we call
message.split and pass a string with one space as a separator. What this method
does is basically it goes through this string and anywhere it finds this character, in this case a space, it uses it as a boundary to
separate this string into multiple words. And then it will return a list. Let me show you. So let's store that here, words, and then
Then print it on the terminal, let's go ahead and run our program. So if you type good morning
sunshine, enter, we get a list with three items each item is a string, okay? Now,
back to our program, we need to define a dictionary for mapping special characters like these 2 into a smiley face, so,
we can call that emojis set it to curly braces, here we add a key value pair,
a smiley face, and we map that to a string, in this string we want to add an emoji, if you're on a mac keyboard you can press
control command and space and this should bring up this emoji box, if you're on Windows honestly I
really don't know how you can do this, but there must be applications who do this for you. So lets go ahead and pick this happy smiley face, good,
now lets add another key value pair, or sad face we map this to,
this face here, good. So, we have a list of words now we need to look through this list, get
each word and potentially map it to an emoji. So we can write a for loop for word in words,
now we want to go to our dictionary, and see if you have an item with this word as the key. If you have an item with that key, we get
it's value, otherwise we want to use the same word. So if a user types good morning, we don't want to translate those words, we just want to return those. So that is the case,
where we use the get method to supply a default value, so we wan to get an item with a key word, and
if we don't have an item with that key, we simply use that word as the default value. Now similar to the exercise that we did in the last tutorial
we need an output variable. So let's define that here, output set it to an empty string, now back to line
9, we get the return value of the get method, and add it to our output variable. So output
plus equals whatever we get from the get method, and finally we need to append a space at the end.
That's it, we're done. So let's print the output and run our program and I'm going to type good morning
sunshine with a smiley face, we get that beautiful, let's try the sad face as well, I am sad.
Too bad. Beautiful! So as you can see dictionaries have a lot of use cases in real applications.
Here's a solution from the last tutorial where we created an emoji
converter. Now so far we have been writing all our code right here, in app,py, but as our programs grow we need a better way to organize our code.
We need to break up our code into smaller, more manageable and more maintainable chunks which we call functions. So function
is a container for a few lines of code that perform a specific task for example you have learned about a few of the built in functions in
python like print, and input, each of these functions have a purpose, they know how to perform a specific task. So when we
build large complex programs, we should break up our code into smaller reusable chunks which we call functions to better organize our code.
And that's what I'm going to show you in this tutorial. So let's write this simple program, for printing a greeting message. So we're going to do a print,
hi there, and lets add another message welcome aboard. So here we have a simple
program with only two lines of code. Now let's say these two lines potentially we're going to need them in other programs so we can put them in a function that
we can reuse. Let me show you how to do that, so, we start typing out death, that is a reserve keyword in
Python, and it's short for define. When Python interpreter sees this it knows that we're defining a function, next we need to give our function
a name, lets say greet_user. So all the best practices you learned about naming your variables also apply here,
which means we should name our functions with lower case characters if there are multiple words, we need to separate them using an underscore
and you should always, always, always use meaningful descriptive names for your functions. So, here we define a function
called greet user, after that we'll need to add parenthesis followed by a colon. Now you know that whenever we add a colon at the end of a line
we're telling python that we're defining a block of code. So when we press enter, the next line is indented. Now any code that we write here
will belong to this function. So I'm going to move these two lines these two print statements inside of our function. You can simply
press tab to indent them, beautiful, also lets remove this extra line break, that is better, so these two lines
now are part of our greet user function, so whenever we call this function, these two lines will be executed. Okay? Now,
let's remove indentation so here we are outside of our function, let's do a print statement and print start
after that let's call our function, so greet user. And finally let's do another create statement and print
finish. Now we have this little warning here, this underline, if you hover your mouse over this line, this tool was telling you
that we should add two blank lines after a function definition. This is coming from pep8 which is a document that defines the best practices for
formatting our code. We'll look at that in the future. So for now to make pycharm happy, lets add an extra line break to this function
so whenever we define a function we need to add two lines breaks after. Okay? so, now let's run our program and see what happens.
Alright, so we have 4 messages on the terminal first we get the start message then we get the messages
coming from our create function, so either and welcome aboard, and finally we see the finished message. So let me explain the flow of our program
when python runs this code it doesn't actually print these two messages on the terminal because these two lines of code are inside
of this function, so they would only get executed if we call this function. If we don't call this function, these lines don't get executed.
Okay? So the execution of our program actually starts here, the first message that we see on the terminal is the start message. After
that, Python sees that we are calling the greet function, so it will jump over here and then execute these two lines.
Then, it will jump out of this function and continue the normal execution of our program so it will print the finish message on the terminal.
So this is how functions work. Also note that the order of this code matters, so here we're calling the greet function after
after we have defined it. If you try and call it before you define it you will see an error. For example, if we call the greet
user function right here, see we immediately get this red underline which says unresolved reference, greet user which basically
means python doesn't know what is this greet user, it's not defined anywhere. So we always define our functions first, and then
call them. Here's a function we created in the last tutorial
now I got a question for you, what is the difference between calling this functions nd the print function of python? The difference
is that the print function takes some information, in this case the message that we want to print, but our greet function doesn't take
any information. Wouldn't it be nicer if you could pass the name of the user here and then instead of saying hi there, you could print the name of the user. So,
in this tutorial, I'm going to show you how to pass information to your functions, and that is pretty easy, so back to the definition of our greet
user function, inside of these parenthesis, we can add parameters these parameters are pale holders for receiving information.
For example, you can add a name parameter, and we can pass the name of the user when calling this function. So let's pass Jon
here, now when we call this function and pass this value this name parameter will be set to Jon. So it
will act like a local variable that we defined inside of this function. Just imagine, we didn't have this parameter, and instead we had
a variable like name that was set to jump. Now here we could simply print the name of this user, so we could use a formatted string,
and print the value of the name variable, right? Now, we don't really have this local variable defined in this function
we have a parameter, it's exactly the same thing. So with these parameters we can receive information in our functions. Now let's go ahead and
run this program, so take a look. We get Hi John welcome aboard, we can take this to the next
level. Now we can call this function one more time. So greet user, and this time supply a different name. Let's say Mary.
So we are reusing our greet function and passing it a different value. Imagine if we didn't have this function you would have to
repeat this line twice , once for hi jon and another time for hi mary. So this is the benefit of defining functions, we can take a few
lines of code that have a specific purpose and put them inside of a function, so now let's run our program one more time
there you go. So you get hi job, welcome aboard, then you get hi mary welcome aboard. Now note that when a function has a parameter
we are obligated to pass a value for that parameter. So if you remove jon from here and run
our program, we get this type error, greet user, missing one required positional argument.
Argument in programming is the value that we supply to a function, so back to this example, marrying this case is an
argument that we pass to the name parameter. And lot of programmers don't know the difference between parameters and arguments and think they are the same.
But they are not, parameters are the holes or placeholders that we define in our function for receiving information,
arguments are the actual pieces of information that we supply to these functions. Okay? So, let's bring back
this jon string, now we can also define multiple parameters, for example, let's rename this parameter to first name as I told
you before, you can right click here, go to refactor and then rename, or preferably you can use a short cut. So the shortcut for
this on Mac is shift and f6. And this brings up the renamed dial up box, here we can change this to first
underline name. Now we can add a second parameter so comma followed by last underline name
so back to our formatted string, let's also print the last name, beautiful, so here when calling this function,
then we can supply another argument so jon smith and lets delete this line we don't really need it anymore
run our program, take a look, hi jon smith,
so in the last tutorial you learned that whenever we define parameters for our functions we should always supply
values otherwise we'll get an error. Let's look at that error one more time. So In going to delete this second argument and only pass jon.
Run our program, we get this message, greet user missing one required, position
argument. So these arguments that you have here like jon and smith you refer to these as positional arguments.
Which means their position or argument matters. In other words, the first argument we add here is the value or the first parameter
and the second argument is the value for the second parameter. So if you change their position or order, we'll get different results.
Let's take a look. Let's pass smith first and then jon. Okay, good, delete, now let's
go with this, so instead of getting Hi Jon Smith, we get hi smith jon. So that is the reason we refer
to these arguments as positional arguments, they're positioned or order matters. But in python we also have keyword arguments, and
with those the position doesn't matter. Let me show you how they work. So, let's say here you want to pass Jon as the value for the first
name parameter. We can simply specify that here. So first name equals jon. Now what we have here is a keyword argument.
the key word argument. So this combination of having the parameter name, followed by it's value is what we call a keyword argument, and what we get with this keyword
argument the position doesn't really matter. So here we're supplying Jon as an argument fort he first parameter. Now similarly,
we can use a keyword argument for smith, so last name equals smith, so that we have 2
keyword arguments. So with these keyword arguments we don't have to worry about the order of the parameters. Now that doesn't mean we should always use keyword arguments.
Not really. Most of the time we use positional arguments, but in certain situations these keyword arguments helming us improve
the readability of our code. So on line 7 it's quite clear that we are supplying smith as the last name and jon
as the first name. Now in this particular example, even if we didn't have the keyword arguments, just passing two positional arguments like jon
and smith, would be sufficient, because it's easy to guess what is the purpose of these arguments. But sometimes you're dealing with functions
and you're passing numerical values to them, in those situations it may not be quite clear what those values represent. Let me show you an example.
Let's say we have a function for calculating the total cost of an order, so we still call that calculate, underline cost,
so when calling this function, you need to supply three pieces of information. One is the total cost of all the order items lets say 50
dollars. The other is the shipping cost, let's say 5 dollars, and the last piece is discount, let's say 0,
.1. Someone reading this code, may not be sure what these three values represent, in this case, we can improve
the readability of this code, by using keyword arguments. So we can prefix each value with the name of parameter they target, for example,
we can set total to 50 and then shipping to 5, and then discount to 0.1.
Now if you give this code to someone else, they can immediately tell what these values represent. So that is the power
of keyword arguments. So here's what I want you to take away. For the most part, use positional arguments, but if you're dealing with
functions that take numerical values, see if you can improve the readability of your code by using keyword arguments. You simply
prefix the arguments that you pass with the name of their parameters and this will increase the readability of your code. Now there is one more thing you need to know about
keyword arguments. These keyword arguments should always come after positional arguments. Let me show you what I mean. So,
back to our simple greet user function, let's use a keyword argument for the first thing. So, let's set
first name to jon and see what happens. So we immediately get this error and positional argument after keyword argument.
So when calling this function we're supplying one keyword argument and one positional argument, and python doesn't like this. So,
if you're mixing positional and keyword arguments, you should always use and then the keyword arguments.
In other words, lets remove this keyword argument here, so jon is now a positional argument, is targeting the first
parameter. Now after this positional argument we can supply any number of keyword arguments, so if you set last name to smith
look, python doesn't have any problem with this because we are adding a keyword argument after a positional argument.
So let's quickly recap, for the most part use positional arguments if you're dealing with functions that take multiple numerical values
and it's not quite clear what those values represent, use keyword arguments to improve the readability of your code, and finally if
your passing both positional and keyword arguments, use the keyword arguments after the positional arguments.
So far you have learned how to create functions and send them information using
their parameters in this tutorial I'm going to show you how to create functions that return values, this is particularly useful if you're doing some kind of
calculation your function and you want to return the result to whoever is using your function. let me show you. So let's start by defining a
function, called square, this function simply calculates the square of a number. So we need to add one parameter here,
that is is our number, now here we want to calculate number times number, that is the square of a number.
Now to return this color outside of this function we simply use the return statement. So return. Now,
our square function is very simple, it only had one line of code. But in a real program, you might have a function that has ten lines of code to calculate
something. So, this return statement is very valuable. So now we can return values to the caller of our function.
So, with this, when we call the square function, let's say we give it 3, now this function returns a value,
just like an input function of python, this input function waits for the user to type something and press enter and then it will
return the user's input as a string so we can get it and store it in a variable like this, right? We have the same story with our
story, with our square function. So our square function returns the value we can simply get it and store it in a variable. Let's call that
result. Now, we can print result on the terminal, there you go, so result is 9,
we could also pass this function called directly inside of the print function without defining a separate variable.
Sometimes this is useful for writing shorter code, so in this case. So, in this case, we don't really need this result variable. We simply want to print
the square of 3. So, we could simply pass this function call right here, as an argument for the print
function. So let's delete this variable now our code is shorter so with this we're calling the square function, this returns a
value and we'll pass that value as an argument to the print function. Okay? When we run this program, we get the exact same
result. There you go. Now what happens if we don't use a return statement in our function. So in the last example we simply used
a print statement. Let's temporarily remove this return statement and print the result
on the terminal. Like this. So let's run our program one more time and see what we get. We see two things, the number
9, and none. What is happening here? Well when Python interpreter executes this code, first it will call
the square function. So the control moves to the square function here we calculate the square of this given number and then print it
on the terminal. That is the reason we see 9 right here, now, by default, all functions return the value
none. So if we don't have a return statement here, by default python returns none. None
is an object that represents the absence of a value, it's like nothing or null i c, c++ java and Javascript.
So, in this example, we didn't have a return statement, and by default python returned none from this function.
So, after this square function is executed, the value none is returned and passed as an argument to the print function, that is the reason
we see none on the second line. So here are the two things you need to take away from this tutorial. By default all functions in Python
return none. You can change that, so if you have a function that calculates something, you can return the result using the return statement.
Here's the code for our emoji converter program that we wrote earlier.
If you missed that tutorial, make sure to go back and watch it, as I told you before, there is a table of content right below this video in the
description. So we can simply click on the emoji converter tutorial to watch it. Now, your exercise is to reorganize this code using a function.
So I want you to extract a function in this code, because this algorithm for converting these smiley faces into emoji's is something that
we probably want to use in a couple different applications. We can use it in a chat application in an email application and so on. We don't want to write all this code every time
we want to convert these characters into smiley faces. So, out of all these lines of code that we have from line 1 to
line 10, the lines 10-2 belong to our algorithm, all these lines together implement this feature.
So, you should put these lines in a separate function, Now, why don't we have the input in this function? Because
the input will can come in different forms, currently we're using the import function to receive the input from the terminal, but in other applications
we might receive the input from a graphical user interface, so the input can come in different forms. We don't want to put that in our function, because this line will not be reuseable.
You want to give our function the actual message, as a string. We don't care how we got that message. In one
program you might get it from the terminal, in another program you might get it from a graphical user interface. So that is the reason this line up code should not
be in that function. By the same function, you shouldn't include the last line in that function because what we do with the output is different from
one program to another. In this program, we are printing the output in another program, you might send an output as an email, or as a response in
a chat application, so as a general rule of thumb you're function should not worry about receiving input and
printing it. These lines of code should not belong to your functions. So go ahead and reorganize this code by extracting a function.
Alright, on the top, first we need to define our function. So first we type
def, give our function a name like emoji_ converter, so the name of this function clearly tells me what
it does. Each function should be responsible for one and only one task, and that task should be clearly explained in the name of the function.
So, our emoji converter function should take a parameter, we call that message, that is a string, right? Colon
now we need to move the lines 5 all the way to the end of our for block
into the function, so let's select all these lines, you can cut them from here, by pressing command and x on Mac, or
control and x on Windows, then we paste it here, as you can see these lines are automatically indented
so, they are part of the emoji converter function, if this didn't happen on your computer, make sure to select these lines and use the
tab to indent them. Alright, so here's our emoji converter function beautiful. Now after that
in the main flow of our program, first we get the input from the user we store it in this variable message and then we call
emoji converter and pass this message, this function should return a value, that is what we use to calculate
the end of this function, so right after this for block we need to add a return statement, return output,
now that our function returns a value, we can get it and store it in a separate variable, let's call that result
and then we can simply print that here, or we can make this code shorter, we don't really need this code here so we can simply
call the emoji converter, and print the result. Like this. Now here we have an underline because
as I told you before we need to blank lines after our function definitions. So currently we have only one blank line
we need to add another black line, good, let's go ahead, and run this program, and make sure everything works as before
so I'm going to type a message like good morning with a smiley face good, let's run it one more time, times that,
to add okay beautiful, so, here's the final result, we defined this function called
emoji converter, this function takes a parameter called message. And finally returns the output.
In this tutorial I'm going to teach you how to handle errors in your
python programs, so let's start by writing a small program to get the user age from the terminal. So we call the input variable
input, and a label here, like age, this returns a string, so we need to pass it to
the end funciton and store the result in a variable called age, now let's print age to make sure you have
implemented everything properly we run our program, we type 20, 20 is printed here, beautiful, now look at
the exit code of this program, exit code 0 means our program terminated successfully, there were no errors, but what if
we run this program one more time and instead of entering a numerical value, we enter something like asd.
We get a value error with his message invalid literal for int with base 10. Basically what this message is telling
us is that this string asd does not contain a valid home number that can be converted to an integer. Now look at the exit
code of this program, exit code 1 means our exit code crashed, so 0 always means success and anything but 0 means crash
now as a good python programmer you should anticipate this situation. You don't want to let your entire program crash just because the user entered
an invalid value. So instead of letting the program crash you should handle the situation and print a proper error message, and
that's what I'm going to show you in this tutorial, now before we get any further look at the type of error we get here, value error,
so remember this, we're going to get back to this shortly now how can we handle these errors, in python we have a construct called
try accept we use that to handle errors. Let me show you how it works. So on the top
we type try: now as you know we are defining a code block so, I'm going to move these two lines,
inside of our try block so press tab here. And remove this black line, now these two lines are part of our
try block, right? So after try we type accept, and then we add the type of the error
that our program may encounter, that is value error okay? Then, we add a colon and in this block we can
define what should happen if our program encounters an error of type value error. In this case we want to print
a proper error message, so print, invalid value. So with this try and accept we are telling python
hey, go ahead and try running one or these two lines of code, if you encounter, an error of type. Value error
then instead of crashing the program, try this error message on the terminal so this is how this works. Now more accurately in programming
we reefer to this kind of error as an exception. So an exception is a kind of error that crashes our program. So our
user enters an invalid value, this line of code in line 2 will raise an exception, and on line 4 will catch it
and print this error message, so our program will no longer crash. Let me show you. So let's go ahead and run this
age 20, everything works just like before and the exit code is 0, let's
rerun this program, and enter asd, so we get this proper error message invalid error menu and once again
the exit code is 0, so that means our program completed successfully. Didn't crash, now, we can also handle different kinds of
errors or exceptions, for example right when we get the age let's define a variable income and set it to 20,000.
And then define another variable called risk and set it to income divided by age.
Let's run this program and enter 0 as the game to see what happened. So 0 is obviously a numerical value
so when we enter this value, technically we shouldn't get any exceptions. Take a look. Our program crashed, we
did a 0 division error, because we cannot divide a number by 0. Once again look at the exit code, so we couldn't catch this kind of error or
this kind of exception with this accept block. Accept block is only cashing exceptions of type value
error. And this happens when we try to convert a nonnumerical value, to an integer. So in a situation like this. We should handle
different kinds of exceptions, we can add another except statement for an exception of type 0
division error. Now in this block we can print a different kind of message, like age cannot be
0. Let's run our program one more time. Now, I'm going to enter 0 as the age so we get this
error message age cannot be 0 and look at the exit code. It's 0, so our program didn't crash, so to recap, we
`used try accept blocks to handle exceptions that are raised in our programs, as a good programmer you should always anticipate
these kind of exceptions and handle them properly.
In this tutorial I'm going to talk to you guys about comments in python. We use comments to add notes or comments to our programs.
For example, here I'm going to make a print statement, sky is blue. Now, before that, I
can add a comment using a hi sign and then whatever we type here is going to get ignored it's not going to get executed. Let me show you so
let's run this program, look we only see this message. Sky is blue. So with this comment we can explain
something about our code, we can use it as reminders to fix things or clear things up, or we can use it to communicate things with other developers
reading our code, why we have written this code in a certain way. These are good use cases for using comments, we can also
have comments over multiple lines, so we can simply add more comments, each line should start with a new hi sign. Now
one thing you need to avoid when using comments is explaining what the code does. So here's an example of a bad comment.
Let me just delete these two lines, and with this comment I'm going to say print sky is blue. Why
is this a bad comment, because it's telling me the obvious, it's telling me this slide is going to print sky is blue. Now the problem with this comment is
that apart from being verbose and repetitive, if you come here, and change sky to ocean, now this comment gets
outdated. So overtime we change this code, then we have to come back and modify the corresponding comment. So I've seen some developers
add comments in front of their functions, for example, they define a function let's say a square that takes a number
and simply returns number times number. But it is obvious that this function calculates and returns the
square of the given number. So there is really no need to add a comment and explain that. Calculates and returns the
square of a number. This is very repetitive and it creates noiser code. Someone else reading your code they get distracted with all
these unnecessary comments, so use comments to explain whys and hows. Not why's if you have made certain assumptions, we can use
comments to explain those assumptions. Or we can use them to add notes to remind yourself or other developers to do something in the code.
So comments are good, but too much of a good thing is a bad thing.
In this tutorial I'm going to talk to you guys about classes in python. Classes are extremely important in programming and they're not
specific to python, in fact, a lot of other programming languages do support the notion of classes. We use classes to define new types.
For example, so far you have learned about the basic types in Python like numbers, strings, and booleans,
these are the basic or simple types in python, you also learn about a couple of complex types like lists and
dictionaries. While these types are extremely useful, they cannot always be used to model complex concepts, for example, think about
the concept of a point, or a shopping cart. A shopping cart is not a boolean, it's not a list, it's not a dictionary, it's a different kind of
thing. So we can use classes to define new types to model real concepts. Now in this new model I'm going to show you how to
define a new type called point, and this new type is going to have methods for working with points. For example, back to our main program. Let's
create a list, numbers, 1, 2, 3, you know that here, when we type that dot,
functions or methods available in list objects, now similar to this, we're going to create a new type called point, this point is
going to have metas like move, draw, get, distance from another point, these are the operations that we can
perform on points. So let me show you how to do this. We start by defining a class by using the class keyword,
and right after that we give our class a name. Now look at the naming convention I've used here. I've capitalized the first letter here, this is what we call
a pascal naming convention. So the naming convention we used for naming our classes is different from the convention we use for naming
our variables and functions. For variables and functions we always use lower case letters and we separate multiple words using
an underscore. But when naming classes, we don't use an underscore to separate multiple words, instead we capitalize
the first letter of every word. So in this case our class has only a single word, if you had multiple words, let's say email client
look I've capitalized the first letter of every word. Once again, this is called pascal naming convention
and it comes from the old pascal language that you might have heard of. So, back to our point class. Here we add
a colon which means we're going to define a block, now in this block we can define all the functions or methods that belong
to points, for example, we can define a function called move for moving a port, now note that as soon as we
type open parenthesis, pycharm automatically adds self here, this is a special keyword and we're going to get back to this shortly.
So, for now, in this method, let's print move on the terminal, now let's define another
method like draw, so define draw and in this method, let's print draw on the terminal, now
let's remove the indentation, we're done with the definition of our point class, so we need to add two line breaks
okay, so with this class we defined a new type with this new type we can create new objects, so
an object is an instance of a class, a class simply defines the blueprint or the template for creating objects, and
objects are the actual instances based on that blue print. So we can have tens of hundreds of points on the screen, these are the
objects or the instances. So to create an object, we type out the name of our class and then call it like a function
this creates a new object and then returns it. So then we can store that object in a variable, let's call that point 1,
there you go, now when we use the dot operator. Look, we have these two methods that we
defined, draw and move, we also have a bunch of other methods that we start with two underscores, these are called magic methods
we'll look at them later in the course. Now, let's call the draw method of our point object, and run our program
so you can see draw is printed on the terminal. Now apart from methods these objects can also have attributes and these attributes
are like variables that belong to a particular object. For example, here, after we've defined .1.
We can set .1.x to 10. And .1.1 to 20.
Now we can easily print out these attributes, let's print .1.x and run our program one more time
take a look, so the x coordinate of .1 is 10. Now we can create another object, let's call that.2
so .2 once again we type out the name of our class and then call it like a function. Now this object is completely
different then the first object. So if you print .2.x
look we get this attribute error, because this point object doesn't have an attribute called, so each object is a different
instance of our points class. Now here we can assign a value to .2.x. Let's
send that to 1, and then run our program so we can see the x coordinates of .2 is 1. So to recap
we use classes to define new types, these types can have methods that we define in the body of the class and they can also
have attributes that we can set anywhere in our programs.
You have learned how to create new types using classes now therein a tiny problem in this implementation.
We can create a pooint object without an x or y coordinate let me show you. So point we create this
object here, and before we set point.x let's print point .x run our program
we get this attribute error which you saw in the last tutorial, so point object has no attribute called x
This is the problem we have here, it is possible, to have a point object without an x or y coordinates.
And that doesn't really make sense, because whenever we talk about a point, we ned to know where that point is located. To solve this problem, we
use a constructor. A constructor is a function that gets called at the time of creating an object. So here on line 9, when creating this
point object, we want to pass values for x or y coordinates, let's say 10 and 20, and with this,
this point object that we get here, will have it's x and y coordinates initialized. So how do we do this?
We need to add a special method in this class called constructor. So, on the top, I define a new function,
look at the name of this function, double underscore init, double under score. So init is short for initialized, and this is the
function or the method that gets called when we create a new point object. Now, press enter, so this automatically adds,
self in parenthesis, we're going to come back to this shortly. Now, right after self, we want to add 2 extra parameters,
x and y, so let's type out x and y, and then in the body of this method, we should read the values past
here, and use them to initialize our object, so when we pass 10 and 20, these arguments will be used for
x and y parameters. Now to initialize our object, we type our code like this. Self.x equals
x. And then self.y equals y. What is going on here, this self that you see here is a reference to the current
object. So, back to line 13, when we create a new point object, self references that object in
memory, the same object, that we're referencing using this cariable. So earlier we typed point.x equals 10,
with this code we set the x attribute of this point object. Now what we have in the constructor is exactly the same, we use the self
to reference the current object and then we set the x attribute to the x argument passed to this function. So,
using this init method, we can initialize our objects and we refer to this method as a constructor, this method is used to construct
or create an object, okay? so, Now, let's remove line 14, so we created
point object with these values and then print point.x let's run our program there you go, x is 10, we can also change
these values later, so just before printing point.x we can set point.x to 11 and then run our program
so x is updated, beautiful, alright, here's a exercise for you. I want you to define a new type called person
these person objects should have a name attribute as well as a talk method. This is a very easy exercise so,
you can tackle it in probably a couple of minutes. Alright, so
first we start with a class keyboard, we define this person class once again look at the naming convention I have used here, the first letter
of the first word in this case the only word is uppercase. Now, in this class we define all the methods we need, currently we only have
method that is the talk method, so define talk, pycharm automatically adds self, we come back to this shortly,
for now let's just print talk. So this is the body of our person class. We remove the indentation
and add two line breaks after defining our classes. Now we can create the personal object, let's call that jon,
we set it to person, we can call jon. talk, let's run the program so we get this
message, beautiful, but our person objects should also have a name attribute, it doesn't make sense to have a person without the name.
So that is when we use the constructor function. So on the top, we add a new method, at the name of this method is double
underscore, init double underscore. So we call this method a constructor. Now in this method we need to
add another parameter which is name, so we simply set self.name to name. Once
again, self references the current object, we're setting the name attribute of the current object, to the name argument passed to this method.
With this we can go back to line 9, and when creating a person object we pass the name, let's see jon smith
now let's print jon.name and run our program there you go. So jon Smith is printed on the terminal, beautiful,
so this is all you had to do as part of this exercise. But let's make this program a little more interesting. Instead of printing
this boring message here, let's print hi, I am Jon Smith. So, we can use a formatted string with a message
like Hi, I am, now we want to dynamically add the name of this person. How do we do this? Well, look at
the parameter of this talk method. As I told you before, every method in our class should have this parameter, self.
And they should be the very first parameter of each method, okay? So, with this self we can get reference to the current object, so
we can add curly braces and type out self .name. Thsi returns the name attribute of the current
person object. With this we can remove line 10, where we print jon.name and simply call
jon.talk. Lets run our program. Hi, I am Jon Smith. There we go, beautiful.
Now we can build another person object, let's say Bob, is a new person called Bob Smith, when we say
Bob.talk. And run our program we get a different message, hi I'm Bob Smith, so
each object is a different instance of a person class.
In this tutorial Im going to talk to you about inheritance in Python, inheritance is a mechanism for using code and once again
it's no limited to python, most languages that support classes also support inherence. So let ms how you how this works. Let's say
we have this dog class with a simple walk method, in this method we're simply printing the walk message on the terminal, now let's say
in real program, instead of just one line of code here we're going to have 10 lines of code. Now, what if in the future we want to define a
another class let's say cat and we want to add this walk method there as well. Sow e'll have to repeat all that code,
in this new class, walk. This is bad. because you have repeated or duplicated our
code. In programming we have a principle called dry which is short for don't repeat yourself.
Let's say sometime in the future, we discover a problem with our walk method. If you have repeated or duplicated this method in many other places, then we'll
have to come back and fix that problem in every single place we have duplicated this code. So that's why in programming we should not define something
twice. So how can we solve this problem. There are different approaches, one approach that is easier to understand for beginners is inherence
Now here's how it works. We define a new class called maml and move the walk method right there. Then we'll have
the dog and cat classes inherit that method from their parent just like how humans inherit certain
attributes or behaviors form their parents. That' exactly the same, so on the top, we define a new class, let's call it
mammal then we need to move the walk method there. So, we select it, cut it, using command and x on Mac, or
control x on Windows and then paste it here, beautiful, now we want our dog class to inherit this class from the mammal class
so right after the class name we add parenthesis and then type out the name of the parent class. In this case, mammal.
That's all we have to do. So with his the dog class will inherit all he methods defined in the mammal class.
Now there is a tiny problem here, if you look at line 9, there is a red underline here. The reason this is happening is because
python doesn't like an empty class, so right now our dog class is empty, it doesn't have anything, we either need to add methods
specific to dogs or just to make Python happy, we can use the path statement, and that basically means nothing.
We're telling python interpreter, hey, pass this line, don't worry about it. But with this, we don't have an empty class, okay? Now as I told you before
after each class I should have two line breaks so right now we only have one line break and that is the reason we have this little warning here, so let's add
another black line, beautiful, so our dog class is inheriting the walk method from the mammal, you need to apply the same change
to the cat class. So we'll have cat inherit from mammal, and then,
use the path statement here. With these changes, now we can create either a dog or cat object, let's say dog,
one, we set it to a dog object, and when we type dot look we have the walk method that is defined
in the mamall class. We can easily call it, let's run our program there you go, you see the walk message,
so both the dog and cat classes are inheriting all the classes methods defined in their parent class. Now here we can add methods
specific to dogs, for example, we can define a method called bark, and then print bark.
Now, we don't need the path statement because we already defined one method in our dog class. So now when we type out
dog1. look we have two methods one is the walk method that we inherited and the bark method that we just
defined in the dog class. Similarly, we can add a method specific to a cat, for example, we can define a method called
be annoying, I hate cats, so let's print annoying , now when we create the cat
object, let's remove that, cat1 and type out cat1. you have these two methods
dog and be annoying. So these are the basics of inheritance in python Now there is more to this that really goes beyond the scope of this beginners tutorial.
If you're interested to learn more about inheritance and other mechanisms for reusing code, I encourage you to get my complete Python course.
In this tutorial, I'm going to talk to you about modules in python.
A module in python is basically a file with some python code. And we use modules to organize our code into files.
Just like sections in a super market. When you go to a super market there are different sections for fruits, vegetables, cleaning products, and so on. We don't have
one section with all the products in the super market. We have the same concept in programming. So instead of writing all our code, instead of writing
all the functions and classes in app.py we want to break up our code into multiple files. We refer to each file as a module.
With this, not only is our code better organized and structured, but we'll also have the ability to reuse our code. For example,
over here in app.py, I've defined two functions for converting weight from pounds to kilograms and vice versa.
Now we can take these two functions and put them in a separate module called converters, and then we can import that module into any
program that needs these converter functions. Let me show you how to do this. So, let's open up our project panel and right
click the project, go to new, and add the new file, we're going to call this file, converters.py.
Then, we go back to app.py select all this code, cut it and then
paste it into our new module. converters.py. With this we have cleaned up our app module it's not bloated with different
functions, so as we write more functions with classes, we put them in their corresponding modules, a module should contain all the related
functions and classes, okay? Now you want to import the converters module into our app module, and that is really easy, on the
top we write import converters without extension, so we don't add .py we only type out the name of
the file. Let me close that project panel. Now, this converter is an object so we can use the dot operator
to access it's members. So currently we have defined these two functions inside of our module, kilogram to pound,
and pounds to kilograms. So we can easily call one of these functions let's pass 70 kilos get the result and print it out.
Run our program, so, that is under 55 pounds. Now there is also another
syntax for importing modules, let me show you, so instead of importing the entire module we can import specific functions from that
module. Here's how it works. We type out from then we add the name of our module, so converters
import, now here if you press control and space we can see the list of all the functions defined in this module.
So here we can grab one of these functions let's say kilogram to pound, and with this we can directly call this function just like
the function defined in this file. App.py. Compare what we have on line 4 to what we have on line 6. On line 6
we'll have to prefix this function with the name of an object converters. So we have to type converters. and then we'll be able to
access this function. In contrast. When we import a specific function from our module, then we can easily call that function
without prefixing it with the module name. So here's what you need to take away. We use modules to better organize our code. Instead of
writing all the code, instead of writing all the functions in one file, you break up our code across multiple files. Each file is called
a module and it should contain all the related functions and classes then we can import a module into another module, in this case, we are importing
the converters module into our app module. And as you saw, there are two ways to import this module, we can import the entire module, and then
we'll get an object with the same name as the module so we can type converters . and then we'll be able to access all the
functions and classes defined in this module. The other appraoch is to impot a specific function or class from a module using the
from import statement. Now here is your exercise. Earlier in the course you had an exercise for finding the
largest number in the list. So here on the top we have a list of numbers, initially we set max to the first number in this list
then, we look through this list, get each number, if the current number is grater than max, then we reset max.
And finally when we are done with our loop we print max on the terminal. Now here's what I want you to do. This code currently
has no organization. We don't have any functions, we don't have any modules, we wrote all the code in app.py, that is okay for small programs,
but as your programs grow, you need to properly organize your code into classes and modules. So, as part of this exercise, I want
you to write a function, call it find max. This function should take a list, and return the largest number in that list.
Now after you do this, go ahead and put this function in a separate module. So extract it from here, and put it in a module,
called utils. So in this module we're going to have a bunch of utility functions, oaky? Then import the utility
module into the current module and call this function. Finally, get the result and print it on the terminal, this is a
fantastic exercise to teach you how to properly organize your code. So, go ahead and spend a couple minutes on this exercise.
So the first step is to define a function called find max. So on the
top, I'm going to define function, find max this function should take a list of numbers, so we
add a parameter called numbers. Now inside of this function you want to have these few lines, this is the algorithm for finding the
largest number in a list, we don't want to bring the first line, because this is where we create a list. So somewhere in our program we're going to create this list,
and tehen pass it as an argument to pass max function. Okay? So, let's go ahead and grab
these few lines, cut them, and put them inside of find max function. Alright, so we find the
largest number in this list, finally we need to return it, so, return max. So here's our function. Now we
need to move this into a separate module. So let's go to the panel right click the project and add a new
file, we can also add a new python file that's the same, let's call that utils so if you add a new python file
pycharm automatically adds .py extension, but if you go to new file we'll have to explicitly type out
.py. So make sure to get the extension right. Now, back to app.py, let's cut this code and
paste it into this new module, okay beautiful. Now I'm going o go back to app.py and import our new module.
We can either import the entire module, so import utils and then access individual functions so we can call utils
.find max or we can explicitly import this function from the utils module. It doesn't really make a difference.
So, we could type from utils import find max. And then we
don't need to prefix this with the name of it's object, so we simply call find max. Now we need to call this after we initialize our list.
So first we need to define the list of numbers. Then, we pass that list as an argument to find max
we get the result which is max and finally we print it on the terminal. let's go ahead and run our program, so the
largest number is 10, beautiful, now one last thing before we finish this tutorial, here we have this little warning
under max and the tool tip says shadows built in name max. The reason we see this is because we actually have a function called
max. And it does the exact same job as our find max function. So this is actually built into python.
But I ask you to do it as an exercise because it's a great exercise for beginners. Now, back to the warning, this warning is basically telling us that we are
overwriting the built in max function in python so we are changing the meaning of this function, and this is considered a bad practice,
let me show you what I mean. So let's comment out what we have on line 4, by putting a hash sign here, we can also use,
a short cut command and slash on Mac, or control on slash on Windows. So now this line is commented out. Look at the
color of max here, it's purple, it's the same color as print. And this is the color used to identify the built in functions. So now we can call
this function and give it a list of numbers run our program we get the same exact result however,
if we bring this line back, once again we can use the same shortcut that is command and slash on Mac or control slash on Windows.
Now, we are redefining max, so up to this line, max used to be a function, but after line 4 is executed
max is set to an integer, that is the largest number in this list. So, we'll no longer be able to call it on line 5,
let's run our program and see what happens. So there you go, we get this type error, int object is not
callable, because max is now an integer, it's not a function, so we cannot call it. So to solve this problem, we can rename
this variable to something else. So right click here. Go to refactor and rename,
and rename this to maximum. So you can see the warning is gone. As you can see we have the same warning
in our utils module. So here we're redefining max and as I told you before this is a bad practice. We're changing the
meaning of built in functions in python. So, let's rename these as well, I'm going to use the short cut that is shift and
f6 there you go and here we can change this to maximum. Enter, done.
In this tutorial we're going to talk about packages in python,
packages are basically another way to organize our code, so currently we have only 3 files for modules in our project but a real project
can contain hundreds or even thousands of modules. We don't want to add all those modules here, because over time this directory will get
bloated with so many files, so a better approach is to organize related modules, inside of a package, so a package is a container
for multiple modules In file system terms a package is a directory or folder. So in our project we can add a new directory
and in that directory we can add all the directed modules, as a metaphor think of a mall. When you go to a mall or a shopping center there are different
sections for mens women and kids clothing, so that is ilke a package, now when you go to the mens section, there are different areas
fior different kinds of products, we have a section for shoes, t shirts, jackets, and so on, so each of these is like a module, so,
in this tutorial, I'm going to show you how to create and use packages in Python, here in our project panel, right click the panel and
add a new directory. Let's call this directory e commerce. So we're going to create
a package called e-commerce and in this package we're going to have all the modules related for an ecommerce application. For example,
we can have modules for sales, shipping, customer service and so on. So let's go ahead
Now here we have an empty directory, in order to convert this to a package we need to add a special file in it. So, right
click this directory and add a new python file, call that file double underscore in it, double underscore
this is a special convention in Python. When Python interpreter sees a file with this name and
name in a directory, it treats this directory as a package, we also have a shortcut for that in pycharm so let me delete this directory
and start again. So delete, once again right click the project, and go to new but instead of creating a new directory
we can create a new python package, let's call our package ecommerce as you can see
pycharm automatically creates this file for us so we don't have to manually create it. Okay? Now, in this package, let's add a new module,
so a new python file, let's call it shipping okay? Now in this module we want to have
a function for calculating the shipping costs. So define calculate, underline, shipping.
Now don't worry about parameters or implementation, we simply print calculate underline shipping.
Now lets say you want to import this shipping module into our app module, with this new structure this shipping
module is now part of the ecommerce package, so we cannot import a direct you have to start from the ecommerce package. So,
bak to app,py once again there are two ways to import this module. We can import the entire module or we can
import one of it's functions or classes. So let me show you both approaches. First, we're going to import the entire module. Now what is the name of our
package? it is ecommerce, right? So ecommerce. shipping. So instead of typing import
shipping we type import ecommerce .shipping. we have to prefix it with the name of it's package.
Now to access any of the functions or classes in this module we'll have to type out ecommerce.shipping.
and there you go. Now we can access the calculate shipping function. So let's go ahead and run our program,
we see this message printed on the terminal, beautiful. However with this approach, every time you want to call one of the functions
to this module, we'll have to prefix it with ecommerce. shipping. that is very verbose. So when working with packages
we often use the second approach, using the from statement. So we can type from ecommerce
.shipping import calculate shipping. Now we don't have to prefix this function
with ecommerce.shipping, and we can call it multiple times in this module, so our code is a little bit shorter. But what if
you want to use multiple functions in this shipping module. We can either import them here, so calculate shipping, comma, let's say calculate_
tax. Or we can import the entire module and then access all he functions or classes in that module. So,
let me revert this back. To import the entire module we type from ecommerce so we remove.shipping
so from this package, import the shipping module. Now the shipping module,
is an object so we can access all the functions and classes defined here, using the dot operator, so
shipping. there you go, calculate shipping. So to recap, when using the from statement we can either start from
the package and import a specific module, or we can start from package.module
and then import a specific function. Like calculate shipping. So, this was the basics of using packages in
python. As I told you before, packages are extremely important, especially when you want to work with a framework like django, we use django for building
web applications with python, and I'm going to show you that later in this course. So in Django we have quite a few packages and
each package contains several modules. So make sure to watch the tutorials, about modules and packages one more time, otherwise you're going to get confused later
when we get to Django. In this tutorial I'm going to talk to you
guys about the built in modules in python, so python comes with a standard library that contains several modules for common
tasks such as sending emails, working with date and time, generating random values and passwords and so on. There are so many modules
already built into Python and that means there is already lots of functionality that we can reuse. Let me show you where you can find
this standard library. So open up this browser and search for python 3, module index,
make sure to add the version number, because the modules in python 2 are different from modules in python3. So here we search for python 3
module index, and the first page here, you can see is python module index, or python 3, let's go ahead,
so these are all the modules built into python, for example we have modules for working with date and time,
we have modules for sending emails for encoding values, there are so many modules here. Now the explanation of all these is
beyond the scope of this course, that really requires it's own course. Because we have so many modules here, but don't let this list intimidate you.
This is not something that you need to learn right now, as you learn python as you build more applications, gradually you will get familiar with more modules
here, in fact nobody knows all the modules in python standard library. Everybody knows some modules based on the applications they have built.
So in this tutorial, I'm going to show you how to use one of the built in modules, for generating random values. So on the top,
we import the random module, now because random is a built in module, we don't need to have a file here
called random.py. So python interpreter knows that random is a built in module as long as it knows where to find it.
Now if you're curious where this random module is stored on the disk, let me show you, so here in the project panel, expand external
libraries, then expand python 3, and then one more time python 3.7 library
route. So this is a folder somewhere on your computer, in this folder, we have all the built in modules in python. So,
if you scroll down, you should be able to find. The random module. There you go. It's right here. So random.
py. You can open this and this shows you the source code of this module. there you go. Now in this tutorial,
we don't want to worry about hat, so let's go back to our app.py, and use this module to generate random values. So when we import
this module, now we have this object, random, so we can use the dot operator to acces it's methods. One method that is useful
here is the random method, and every time we call it it generates a random value between 0 and 1. So here we can do a for loop,
let's say for I in, range 3. So just to refresh your memory we are using the
range function to create a range object. We can look through this range object and in each iteration this object will spit out a value.
So with this for loop, we can execute this code 3 times. Now, let's indent this. Okay, and finally, let's print the result,
There you go. So we can see that in each iteration we get a new random value between 0 and 1.
Now what if we want a random value for a particular age? Let's say random values between 10 and 20, well,
there is another method here, rand int, we use 2 arguments here to specify our range, let's say 10 and 20.
Run our program one more time. Now we have the numbers 20 13 and 18. If we run our program one more time,
We get different values, so 20, 19, 11, one more time. Look, you also have another powerful method for
randomly picking an item from a list. Let's say we have a list of team members and you want to randomly pick someone as the leader. Let me show you how to do that.
So, we define the list of team members, we set it to jon, mary, bob,
and mosh. Now we can call random .choice and pass our members list
this method randomly picks a method from this list and returns it. SO, we can store the result in leader and then
print it on the terminal. let's run our program, so now the leader is mary, if you run our program one more time
this line is mosh now it's mosh again one more time, it really likes mosh, you get the point. So
the random module is very powerful, and it has a lot of applications. Now here's a very cool exercise. I want you to write this program to
roll a dice. So every time we run this program we get a different value. Now we have 3 in 1, next time we get 3 and 6, one more time
5 and 6, 4 and 3, double one, that's a very cool exercise. So before we get started, I want you to pay attention to a few things.
I want you to define a class called dice in this class we're going to have a method called rope so every time we
call this method, we get a tuple, a tuple remember is a list of values but values cannot be changed, you cannot add a new item to it, we
cannot remove it. So it's like a read only list. So every time, we call the row method, we should get the tuple of two random values.
So go ahead, and do this exercise, You'll see my solution next.
Alright, we start by importing the random module on the top, then we define a class called dice:
this class we want to have a method called row. So define row parenthesis, this automatically adds self, now in this method,
you want to generate two random values between 1 to 6. So we call random.randint.
And pass 1 and 6. So this generates the first number, we can ut that here, now let's call this one more time,
so I'm going to copy what we have on line 5, put it here, and change this variable to second. So we have two variables first and second.
With two random values, finally we need to return them, in a tuple, so return parenthesis instead of square brackets,
first and second, now in python when you want to return a python from a function, you don't have to add
this parenthesis, so you can simplify your code and python will automatically interpret this as a tuple. So we are done
with a definition of our class, we remove the indentation and add two line breaks. Now we create an object of this type
so you set dice to dice next we roll the dice, so dice.roll and
print the result on the terminal, that's all you have to do. Let's run this program, so now we get 2 and 5,
lets run it one more time, 3 and 2, 1 and 1, beautiful. Now we have this little warning here, that says
expected 2 black lines found 1. Once again this is coming from pep 8, pep is short for python and
proposal. We have so many python enhancement proposals or peps. Pep 8 is a very famous 1, and in this document we have
all the best practices for formatting our code. So pep 8 says, that after we define our classes we should have 2 lines breaks, we've already done that
so the reason this is complaining is because we had 1 line break before the class, so let's add one more line break, now pycharm
is happy. So basically pycharm is following all the best practices defined in pep8. Now you don't have to memorize
any of these best practices, as you code in pycharm, pycharm gives you a little more warning, and gradually you will learn how to properly format your code, so it's
readable by other people. In this tutorial, I'm going to show you
how to work with directories in python. So here in python3, module index, you can see we have a module called path lib which provides an object
oriented file system pact. That basically means it provides classes that we can use to create objects to work with directories and
files. So, if you click here, you can see how this module works, we can see all kinds of examples. For example, here on there basic
useage, you can see this is how we import the path class from the path lib module. Let me zooming so you can see
clearly. Okay, so look, from path lib, that's our module, import path, note the naming convention.
P is capitalized, that means path is a class, so we need to create an instance of this class as you can see, right here,
now there's so much documentation here, you can read this on your own, but let me quickly show you a few examples to help you get started. So after pycharm
on the top, from the path led module, that's import the path class. Now we need to create,
a path object to reference a file or directory on our computer. So there are basically to ways to do this we can use an absolute
path, or a relative path which basically means a path starting from the current directory. For example,
if you wanna reference this ecommerce directory in our project, we can use the relative path. So we start from the current directory and then
go somewhere else. With absolute paths we start from the root of our hard disk. For example, if you're on Windows you might have
an absolute path like this, c drive, backslash, program, files, backslash microsoft,
so these are directories in c drive. On Windows we use a backslash to build a path. If you're on
Mac or Linux, your paths will look a little bit different, so instead of backslash we have a forward slash lets say user/local
/bin. So these are examples of absolute paths. In this tutorial we're going to work with he relative path to work with this ecommerce
directory that we have in our project. Now if you didn't create this directory earlier, simply right click on the project and then go to new
directory. oaky? So, let's close this panel, we create a path object, now,
if you don't pas an argument here, this will reference the current directory alternatively, we can pass string, in this string we can
add a file or a directory. let's say the ecommerce directory. Now this runs a path object, so we store it here,
now this path object has a few interesting methods for example, we can check to see if a path exists by calling
the exist method. This simply returns a boolean so let's print it on the terminal, there you go. So this path exists,
what if it changes to ecommerce 1, and run our program and get false, we can also create a new directory
for example, let's change our path to email, now when we run this program, obviously we don't have this directory but we can
create it by calling the mk dir method so make directory. Let's run our program
alright, this method returns none which basically means it doesn't return any values. Now if you look at the project panel you can see
here we have a new directory called emails, we can also delete this directory so, instead of mk dir we call
rmdir which is short for remove directory, but let's go ahead, now we can see that directory is gone. We can also see
all the files and directories in a given path, that is, very useful if you want to write a little program to automate something. For example,
you can iterate over all the spreadsheets in a directory one them and process them. Let me show you. First we change the path
to the current directory and then we call the glob method. With his method we cans each for files and
directories in the current path. So as the first argument we need to pass a string that defines a search pattern. We can type an asterisk
and that means everything, all files and all directories. We can optionally add an extension, so to get all the files, you
need the files you use star.star. With this pattern, we'll only get the files in the current directory. But not the directories.
We can also search for all the py files, or all the excel spreadsheets. Anything. So let's search for all the py files
in the current directory, now when we run our program we get this generator object. Generator object
are kind of an advanced topic, and they are beyond the scope of this beginners python course. But for now all you need to know is we can iterate
or loop through these generator objects. So instead of printing this generator object, let's just iterate over it using
a for loop, so, for, file in, the generator object that is returned from the glob method. q
Let's print file. We run our program, there you go. So these are all the
py files in my current directory, this could be different on your machine if you didn't follow the exercises I gave you earlier. For example, this
utils.py, we created this as part of one of the exercises earlier in this course. So don't worry if the files you see here are different on your machine.
So, you can use the glob method to search for files using a pattern, we can also get all the files and directories in the current
path, so, we just use one asterisk, then run our program, take a look, so we have this
ecommerce directory, we have notes.txt, this is a file I added earlier just to write notes as part of my presentation so you're not going to have
this file. We also have a bunch of directories and files.
Even though python's standard library is comprehensive and has so many modules for common tasks, it's not complete by any means.
That's why we have this directory called python package index. Or pypi. And in this directory you can find hundreds
of packages for doing awesome things. These are packages that people like you and I have built as part of our projects, and then they have published it as part of this directory.
For other people to use. So that's why we have a fantastic community in python, there are so many python developers out there and there are so many packages
right in front of us to reuse in our programs, let's say you want to send text messages in your programs, you don't have to build this functionality from scratch,
we can simply come to pypi.org and search for sms aas you can see there are so many
projects or apckages that give you this functionality. Of course not every package, not every project is complete or bug free, some of them are still
in development or they have bugs, but if you look around I'm pretty sure for any kind of function you can imagine there is a good
reliable and well documented package for you. In my complete python course, I will show you some of those most useful packages on pypi. For example
you will learn how to access the information on yelp.com in your programs. So you can write a program and search for businesses
registered on Yelp. Let's say you want to search for the best barber in New York City. I will show you how to do that. You will also learn how to use a technique called
web scraping, which means you can build an engine and have that engine browse a website, and extract information from HDML files.
This is the same technique that Google does to index various websites. So they have several engines, or web crawlers, these web crawlers
are continuously looking at various websites and extracting information from their pages. When you publish a blog post Google's web crawler
finds the title of your post, its keywords and so on. So, I'm going to show you how to do that with Python, we'll also look at browser automation, and this is extremely
powerful, because you can automate testing of your web applications. So you might get a job as a test engineer, and
your daily job is to browse a website, click here and there, fill out this form, that form, and ensure that this website is functioning properly. You can automate all that
with a powerful python package called selenium, as I have shown in my complete, as I show in my complete python course. Now in this tutorial, I'm going to show you how to install
packages, from pypi.org. So, here on pypi.org let's search for open py
xl. This is a package that we use for working with excel spreadsheets. So let's search for this package, there you go, so currently
it's at version 2.5. On the top you can see, this instruction pip install open pyexcel.
this is the command that we need to type in the terminal window to install this package into our program, so back to pycharm,
here on the status bar. You can open up a terminal window for executing various commands. So let's open it, now if you're on Windows
you're probably going to see something different instead of this dollar sign, don't worry about that just execute this command I'm going to show you. So pip
install open py xl Make sure to spell everything properly. So pip is the tool,
that comes with a python installation, and we use it to install or uninstall packages registered on pypi.org. So here,
we're using pip to install this package. open py xl. Enter, let's go ahead with that, it's going to take a few
seconds, oaky done, now we can import this package and it's modules just like the built in modules in python, or the modules that we have
in our project. Now if you're curious where this package is stored on disc let me show you. So open up the project panel,
and then expand external libraries, next expand python 3, and then expand sight packages.
This is where all these packages that we installed with pip are stored. So here we have open py xl, you can open this,
in this folder we have another folder called cell, now Now, look what we have here you have this init
type, earlier I told you that whenever we add this file to a folder, python treats that folder as a package, so sell is a package, and this
package we have is modules. Sell, interface, read only and text. So as you can see, this package openpyxl has several
subpackages like cell, start, chart sheet and so on. And in each package we have several modules, in the next tutorial
I will show you how to work with excel files. So we have covered all the core concepts in Python, I hope you have learned a lot.
please support my hard work by liking this video and sharing it with others. And be sure to subscribe to my channel for more tutorials like this. Next we're
going to work on our first python project that involves automation. You're going to write a python program that can process thousands of spreadsheets
in under a second. Are you excited? Let's get started.
In this tutorial I'm going to show you something really awesome you can do with python. You're going to learn how to process spreadsheets, and this is extremely valuable
in situation where you have hundreds or thousands of spreadsheets that need to be updated. If you want to do this by hand it may take hours or days
weeks, or even months, you can simply build a python program in less then half an hour. And have that python program, automatically process thousands of spreadsheets
in under one second. So, here we're going to work on this excel spreadsheet. You can download this below this video.
In this spreadsheet we have three columns, transaction ID, product ID, and press. Now don't worry about the fourth column yet.
So in this spreadsheet we're going to record all kinds of transactions, but let's say due to an error, it could be a human error or a system error. The price that we have
here is wrong. Let's say we need to decrease this by 10 percent. If you want to do this manually, we'll have to come back here and
add a formula, so we typed out equal sign, let's say you want to recalculate say you want to recalculate the value of this cell.
have to get that and then multiply it by 0.9 and that is like 90% of the original price, we are reducing the original
reducing the price by 10%. Now when you hit enter you can see the updated price. Next we'll have to come back here, select this cell and
apply the same formula to all the other rows. Now what if you have thousands of rows here? You'll have to scroll up and down, this is going to be very tedious.
So we're going to write a python program that will do this for us. It's going to auotmate this process and not only that it will also
add this beautiful chart right here, once again if you want to open up hundreds or thousands of spreadsheets
and add a chart to each one, this is going to take at least a week or two Our python program is going to do all of this in a matter of seconds.
So, let's get started. Alright the first thing I want you to do is to download this transactions file and add it to your project.
I put the link below this video for you to download. So if you're wondering how to put this in this project, you can simply right click the project,
and if you're on Mac you have this item where reveal in finder, if you're on Windows you should see something like reveal
in explorer, or file explorer, or whatever it's called when you click this, this opens up the direct
on your machine where this is stored. So simply copy paste the transactions file right here. Now,
here on the top, first we need to import the open py excel package. So import open py excel, we can give it a
an alias to make our code shorter. So asxl. This is not required but it just makes our code a little bit cleaner.
Let me show you. So now instead of typing open pyxl. we type xl. okay so that's an alias for
this package. Now in this package we have a function for loading an xl workbook. So let's call load workbook,
and as the argument we pass transactions. .xlsx. So this we load
our excel workbook and return a workbook object. Okay? Now if you open this workbook, you can see you add only 1
sheet, and that is called sheet 1, so to access that you use square brackets, and specify the name of the sheet,
that is sheet one, make sure to spell this with a capital S. Because this is case sensitive, if you don't spell it properly
you're going to get an error, so this returns a sheet, now in this sheet, we have various cells. So
next you need to learn how to access a particular cell, and that is very easy. back to py charm, with this sheet object, you can use
square brackets and give the coordinate of a cell. Coordinate is the combination of the column and the row.
For example, this cell it's coordinate is a1. So back to pycharm, we can type a1, and this returns
our first cell. Also, there is another approach to getting a cell, instead of using square brackets with a string, we can
use the cell method of the sheet object, so, sheet.cell, you pass the row and the column, so row
and column 1 these return the exact same cell. Now let's print the value of this cell, cell.value
and run our program so the value is transaction id, beautiful,
so now we need to iterate over all these rows and for each row we need to get the value in the third column. That is the price. We'll get that and then multiply
by 0.9. So first we need to know how many rows we have in this spreadsheet. We can get that from the sheet object so sheet
has an attribute called mx_ row. Let's print this, so in this sheet,
we have 4 row, and you can verify that here. So we have a total of 4 rows. So we need to add a for loop.
that would generate the numbers 1-4. So, let's delete this print statement, nd add a for loop
for row in were going to use the range function unction to generate a range of numbers, starting from 1, all the way to sheet
.max_grow. Plus 1. The reason we're adding 1 to this, is because as I told you before this range function
will generate numbers, starting from this value all the way to this value, but it will not include the second value. So currently
max row returns 4, if you use range of 1-4 this will generate the numbers 1, 2, and 3, but not 4.
So to include 4, we need to add 1 to it. Let's go over here, so we tied sheet.max underline row plus 1.
Now before going any further let's just print row and make sure our program is working up to this point. So let's run
this, we get the numbers 1-4 beautiful. So now we can easily get the cells in the third column. However
we don't really want this first cell, that's the heading. so technically you want to ignore the first row. Back here, you want to change
our range function, and start from 2. Now, we're going to use sheet.cell to get access to the cell
at this row. And the column should be 3. We get a cell object, let's print it's value
and make sure you're on the right track, so run the program these are the values we get. 5.95
6.95 and 7.95 these are the values of the third column. Next we need to multiply each
value by 0.9 so instead of printing cell.value we multiplied by 0.9 and this is
the corrected underline price, so this is the mistake we're going to make with our program, now
we need to add a new cell to our worksheet, so we want to add all the corrected prices, ia new column, it could also overwrite the values in this column,
but in this tutorial I'm going to show you how to add a new column. So using the same method, now we need to get a reference to the cell, to the given
row, but in the fourth column. So, we call sheet .cell, and pass row and four as the arguments.
Once again, this returns a cell object, let's store that in a separate variable and call it
price_cell. So note that my variable names are very descriptive. There is no guess work. You have corrected price which holds
actual value and we have corrected price, which is a cell object in this spreadsheet. Next we have to set the value in this
cell. So we set corrected price cell. value to this corrected price. With these few lines
we can easily update our spreadsheet, but first we need to save it. So, after our for loop, we call workbook.
save. Now let's save this in a new file because we don't want to accidentally overwrite the original file in case our program has a bug
so, I'm going to call that transactions 2.sms ex. And finally let's run our program,
so, you can see that happened in a split of a second, now here we have a new file tranactions 2. When we open this we get something like this.
So you can see we have this 4th column with the updated prices. Beautiful. So half of the problem is solved, now we need to add a chart here.
To add a chart, we need to add a couple classes on the top, so, after this import statement let's type out from
open py excel.chart, import, bar chart, comma, reference.
So lets see what's going on here. In this package you have a module chart, and from this module we're importing two classes, bar chart,
and reference. Again, look at the naming convention used here. The first letter of e very word is capitalized. Also it's better
to add a line break after our import statements to make our code cleaner. So, before we save our workbook, we need to
add achart to the current sheet. First we need to select a range of values. For this exercise, I'm going to select the values in the fourth column/.
So all the values in rows 2-4 these are the values I'm going to use in our chart. Now in this part 2 example it doesn't really
make sense to add a chart per transaction, but that doesn't really matter we just want a bunch of numbers to create a chart, so after our
for loop, we're going to use the reference class to select a range of values. Now the first argument in the constructor is the
sheet. So we pass our sheet here, then we add 4 keyword arguments, the first one is min_row, we set this to
2. The second one is max_row we set this to the maximum row in this sheet. That is sheet,
.max_row, so we want to select the cells in row 2-4. kay? Now to make this code a little bit cleaner
I'm going to put this on a new line, so we can see clearly, now this is going to select all the cells
in all the columns in these rows. That's not what we want. we only want the values in the fourth column, so back here
we need to set a couple more key word arguments men_call or column, we set that to for, and also
max underline call, we set that to 4 as well. So we are limiting the range of cells we're selecting to the fourth column.
Now, we're creating an instance of the reference class, let's store the result in a variable called values, so this values object
will have all these values in the fourth column, now we are ready to create a chart, so we create an instance of the bar chart class
and store it in this object. Next, we call chart.add_date and
pass our values. That is pretty straight forward finally we need to add this chart to our sheet. So, we call sheet,
.add_chart and pass this chart object We should also specify where we want to add this chart.
let's say we want to add it here, on row 2, after the fourth column. So the coordinate of this cell is e2, and this is going to be,
the top left corner of our chart. So as the coordinate I'm going to pass e2 that's all we had to do, done. Let's run our
program one more time, beautiful, let's open up the update workbook. And here's the end result, so
right after the fourth column, we have this beautiful chart. Now we could take this to the next level, we could add a legend here, we could change the color of these bars, we could even use a different
kind of chart, it doesn't have to be a bar chart. So to learn more about this we can read the documentation for openpyxl. So
our program is complete, for our code is dirty, it's not clean, it's not organized. We don't have any functions here. We have written all the code in app.py.
So let's goo ahead and organize this code like a professional software developer. So, on line 4, we are loading our workbook
then we're getting a reference to the first sheet, but we don't really need these two lines here this is purely for demonstration to show you how to access a cell. So,
let's delete these unnecessary lines, this is a very important practice as you're coding always look at your code, always review it, see if you have some code that is
not used. Always delete those. Okay, next we are iterating over all the rows, fixing the prices, and then
we select the values to add a chart, and finally we save the workbook. Now, if you were going to use this to automate the process of updating
thousands of spreadsheets, this program wouldn't work, because it's only relying on this file. So we want o reorganize this code, and
move it inside of a function. This function should take the name of a function So let's define a function. Let's
call it process_workbook. It gets a file name. Now, we move all the code inside
of this function, so let's select everything, and press tab, beautiful, now back
to our function, instead of loading this transactions file we're going to load this file name, that's better,
Also, now that our program is working properly, there is really no need to store the result in a separate file. So here we can
simply overwrite the same file. So let's pass file name, that is the end of our function, so,
now, we have this reusable function, we can simply reuse this to process thousands of spreadsheets. Earlier in this python course you learned
how to find all the files in a directory, so we can get each file in a directory and pass the name of the file to this function, this function will go
ahead and update this spreadsheet in just a second or less. So, that was just one example of using python to automate
repetitive boring task that waste your time. But automation is not just about processing excel spreadsheets, there are so many things we can automate.
Here's a question for you, what do you want to automate, how do you want to use python to make your life easier? Use the comment box below and let me know. I love to
hear about your ideas. Next we're going to work on project which involves machine learning, which is a subset of artificial intelligence. Are you excited?
Let's get started. In this section, you're going to learn about machine learning, which is a subset of
AI or artificial intelligence. It's one of the trending topics in the world, these days, and it's going to have a lot of applications in the future. Here's an example.
Imagine I ask you to write a program to scan an image, and tell if it's a cat or a dog. If you want to build this program using
traditional programming techniques, your program is going to get overly complex You will have to come up with lots of rules to come up with specific curves
edges and colors in an image to tell if it's a cat or a dog. But if I give you a black and white photo, your rules may not work, they may break.
Then you would have to rewrite them. Or I may give you a picture of a cat or a dog from a different angle that we did not predict before. So solving this problem
using traditional programming techniques is going to get overly complex or sometimes impossible. Now to make the matter worse. What if I ask you to extend
this program such that it supports 3 kinds of animals. Cats, dogs, and horses, once again you will have to rewrite
all those rules. That's not going to work. So machine learning is a technique to solve these kinds of problems, and this is how it works. We build
a model or an engine and give it lots and lots of data. For example, we give it thousands or tens of thousands of pictures of
cats and dogs. Our model will then find and learn patterns and the input data, so we can give it a new picture of a cat that we haven't seen before.
And ask it, is it a cat or a dog or a horse and it will tell us with a certain level of accuracy, the more input data we give it, the more accurate
our model is going to be. So that was a very basic example, but machine learning has other applications in self driving cars,
robotics, language processing, vision processing, forecasting things like stock market trends and the weather, games and so on.
So that's the basic idea about machine learning. Next we'll look at machine learning in action.
A machine learning project involves a number of steps, the first step is to import our data which
often comes in the form of a csv file. You might have a database with lots of data, we can simply export that data and store it in a csv file for the
purpose of our machine learning project. So we import our data, next, we need to clean it. And this involves tasks such as duplicated data.
If you have duplicates in the data, we don't want to feed this to the model, because otherwise our model will learn bad patterns in our data and will produce the wrong result,
so we should make sure that our input data is in a good, and clean shape. If there is data that is irrelevant we should remove them, if there are duplicates
or incomplete we can remove or modify them, if our data is text based, like the name of countries, or genres of music,
or cats and dogs, we need to convert them to numerical values. So this step really depends on the kinds of data we're working with, every project
is different. Now that we have a clean data set, we need to split it into two segments. One for training our model, and the other for
testing it, to make sure our model produces the right result. For example, if you have 1,000 pictures of cats and dogs, we can reserve
80% for training, and another 20% for testing. The next step is to create a model, and this involves selecting
an algorithm to analyze the data. There are so many machine learning algorithms out there, such as decision trees, neural networks and so on.
Each algorithm have pros and cons in terms of accuracy and performance so the algorithm you use, depends on the kind of problem
you're trying to solve and your input data. Now the good news isnthat we don't have to explicitly program an algorithm, there are libraries out there that provide these
algorithms, one of the most popular ones, which we are going to look at in this tutorial, is side kick learn. So we build a model using an algorithm ,
next we need to train our model. So we feed it our training data. Our model will then look for the patterns in the data, so enxt
we can ask it to make predictions. Back to our examples of cats and dogs, we can ask our model is this a cat or is this a dog and our model
will make a prediction, now the prediction is not always accurate in fact when you start out, it's very likely your predictions are inaccurate.
So we need to envalue the predictions and measure their accuracy. Then we need to get back to our model and either select a different algorithm
that is going to produce a more accurate result for the kind of problem we're trying to solve. Or fine tune the parameters of our model.
So each algorithm has parameters that we can modify to optimize the accuracy. So these are the high level steps that you follow in a machine learning
project. Next we'll look at the libraries and tools for machine learning.
In this lecture we're going too look at the popular python library that we use in machine learning projects. The first one is numpy which
provides a multidimensional array. A very, very, popular library. The seconnd one is pandas, which is a data analysis library that
provides a concept called data frame. Data frame is a two dimensional data structure similar to an excel spreadsheet. So we have rows and columns
we can select columns in a row or a column or a range of rows and columns, again, very very popular in machine learning
and data science projects. The third library is mad plot lib which is a two dimensional plotting library for creating graphs on plots.
The next library is sidekick learn, which is one of the most popular machine learning libraries that provides all these common algorithms like decision trees,
neural networks and so on. Now, when working with machine learning projects, we use an environment called jupiter for writing our code, technically we can still
use vs code or any other code editor, but these editors are not ideal for machine learning projects, because we need to frequently
inspect the data, and that is really hard in environments like vs code and terminal. If you're working with a table of 10 or 20 columns
visualizing this data in a terminal window is really, really difficult and messy, so thats why we use jupiter. So that's why we use jupiter, it makes it really easy to inspect our data.
Now to install jupiter, we are going to use platform called anaconda. So, head over to Anaconda.com/download.
On this page you can download Anaconda distribution for your operating system, so, we have distributions for Windows Mac and
Linux. So let's go ahead and install Anaconda for python 3.7. Download,
Alright, so here's Anaconda, download it on my machine, let's double click this.
Alright, first it's going to run a program to determine if the software can be installed. So, let's continue and once again continue,
pretty easy, continue one more time, I agree with the license agreement, we can use the default
you ca use the default installation location so don't worry about that, just click install, give it a few second, now the beautiful thing about Anaconda is it will install
jupiter, as well as all those data popular science libraries like numpy, Pandas and so on. So we don't have to manually install this
using pip. Alright now as part of the next step Anaconda is suggesting to install Microsoft vs code. We
already have this on our machine so we don't have to install it we can go with continue and close the installation, now finally we can move the
this to trash because we don't need this installer in the future. Alright, now open upa terminal window and type
jupiter, with a y, space, notebook. This will start the notebook server on your machine. So enter
there you go. This will start the notebook server on your machine, we can see these default messages here, don't worry about them, now
it automatically opens a browser window, pointing to local host port 888. This is what we call
jupiter dashboard. On this dashboard we have a few tabs, the first tab is the files tab, and by default, this points to your home directory.
So every user on your machine has a home directory, this its my home directory on Mac, you can see here we have a desktop folder as well as documents,
downloads and so on. On your machine you're going to see different folders, so somewhere so somewhere on your machine you need to create a jupiter notebook. I'm going to go to desktop
here's my desktop I don't have anything here, and then click new, I want to create a notebook for python
3. In this notebook we can write python code, and execute it line by line. We can easily visualize our data as you can see over the next few videos. So,
let's go ahead with this, alright, here's our first notebook, you can see by default it's called
untitled, let's change that to Hello World so this is going to be the hello world of our machine learning project. Let's
rename this now if you look at your desktop you can see this file hello world.ipynb. This is a jupiter
notebook. It's kind of similar to our py files where we write our python code, but it includes additional data that jupiter uses to execute our
code. So back to our notebook, let's do a print hello world.
And then, click this run button here and here's the result printed in jupiter, so we don't have to
navigate back and forth between the terminal window we can see all the result right here. Next I'm going to show you how to load a data set from a
csv file in jupiter.
Alright, in this lecture we're going to download a data set from a very popular website called caggle.com. Caggle is basically a place to do data science projects.
So the first thing you need to do is to create an account, you can sign up with Facebook, Google, or using a custom email and password, once you sign up then come back
here, on caggle.com, Here one the search bar search for video game sales.
This is the name of a very popular data set that we're going to use in this lecture. So, here in this list you can see the first item with this kind of reddish
icon, so, let's go with that, as you can see this data set includes the sales data for more then 16,000 videos
games. On this page you can see the description of various columns in this data set, we have rank, name, platform,
year, and so on, so here's our data source, it's a csv file called vg sales.csv, as you can see there are over 16,000
rows, and 11 columns in this data set. Right below that you can see the first few records of this data set.
So, here's our first record, the ranking for this game is 1, it's the wi sport game for wii as the platform and it was released in the year 2006,
now, what I want you to do is go ahead and download the data set, and as I told you before you need to sign in
before you can download this. So this will give you a zip file as you can see here, here's our csv file, now I want you to
put this right next to your jupiter notebook, on my machine that is on my desktop so I'm going to drag and drop this onto the desktop folder.
Now, if you look at the desktop you can see here's my jupiter, hello world notebook, and right next to that we have
vgsales.csv. With that, we go back to our jupiter notebook, let's remove the first line and instead
import pandas as pd. With his we're importing pandas module
and renaming it to pd, so we don't have to type pandas. several times in this code. Now let's type pd.
read_csv. And pass the name of our csv file. That is vgsales.
csv. Now because this csv file, is in the current folder right next to our jupiter notebook, we can easily load it, otherwise we have to supply the full path
to this file. So, this returns a data frame object which is like an excel spreadsheet. Let me show you.
So we store it here, and then we can simply type df to inspect it. So one more time let's run this program
here's our data frame with these rows and these columns so we have frank name platform and so on. Now this data frame object
has lots of attributes and methods that we're not going to cover in this tutorial, that's really beyond the scope of what we're going to do, so I'm going to leave it up to you to
read pandas documentation or follow other tutorials to find out about pandas data frames. But in this lecture, I'm going to show you some of the most useful methods and attributes.
The first one is shape, so shape let's run this one more time, so here's the shape of this data set, we have over
16,000 records and 11 columns. Technically this is a 2 dimensional array of 16,000
and 11, okay? Now, we can see here we have another segment for writing code. SO we don't have to write all the code in the first segment
so here in the second segment we can call one of the methods of the dataframe, that is df.describe.
Now when we run this program, we can see the output for each segment right next to it. So here's our first
segment, here we have these three lines, and this is the output of the last line. Below that we have our second segment, here we're calling
the describe method, and right below that we have the output of this segment So this is the beauty of jupiter, you can easily visualize
our datsa, doing this with vscode in windows is really tedious and clunky. So what is the describe method returning? Basically it's
returning some basic information about each column in this data set, So, as you saw earlier we have columns like rank, year and so
on. These are the columns with numerical values. Now for each column we have the count which is the number of records in that column, you can se
our rank column has 16,5 -98 records whereas the year column has 16,3-
-27 records.. So this shows that some of our records don't have the value for the year column. We have null values.
So in a real data science or machine learning project we'll have to use some techniques to clean up our data set. One option is to remove the records
that don't have a value for the year column. Or we can assign them a default value. That really depends on the project. Now another attribute for each column
is mean so this is the average of all the values, now in the case of the rank column, this rank doesn't really matter, but look at the year.
So the average year year for all these video games in our dataset is 2006. And this might be important in the problem we're trying to solve.
We also have standard deviation, which is a measure to quanitfy the amount of variation in our set of values, below that we have
min, as an example the minimum value for the year column is 1980. So quite often when we work with a new data set,
we call the describe method to get some basic statistics about our data. Let me show you another useful attribute.
So, in the next segment, let's type df.values. Let's run this, as you can see this returns
a two dimensional array, this square bracket indicates the outer array and a second one represents an inner array.
So the first element inn our outer array, is an array itself, these are the values in this array, which basically
represent the first row in our data set. So the video game we ranking 1, which is called wii sports. So this was a basic
overview of pandas data frames, in the next lecture I'm going to show you some of the useful shortcuts of jupiter.
In this lecture I'm going to show to you some of the most useful shortcuts in Jupiter,
Now the first thing I want you to pay attention to is this green bar on the left. This indicates that this cell is currently in the edit mode, so we can
write code here. Now, if we press the escape key, green turns to blue, and that means this cell is
currently in the command mode. So basically the activated cell can either be in the edit mode or command mode. Depending
on the mode, we have different shortcuts, so here we're in the command mode. If we press h, we can see the list of all the
keybord shortcuts, right above this list we can see, Mac OS modifier keys, these are the
extra keys on a Mac keyboard. If you're a Windows user you're not gong to see these. So as an example, here is the shape of the
command key, this is control, this is option, and so on. With this guideline you can easily understand the shortcut associated with
each command. Let me show you. So here we have all the commmands when a cell is in the command mode. For example, we have
this command, open the command palette. This is exactly like the command palette that we have in vs code. Here is a short cut
to execute this command. That is command shift and F. Okay, so here we have lots of shortcuts,
of course you're not going to use all of them all the time, but it's good to have a quick look here to see what is available for you. Tis these shortcuts you can write code much faster.
So let me show you somme of the most useful ones. I'm going to close this, now with our first cell in the command mode
I'm going to press b, and this inserts, a new cell below this cell. We can also go
back to our first cell, press escape, now the cell is in the command mode. We can insert an empty cell above this cell by pressing a.
So either a or b. A for above or b for below. Now if you don't want this cell, you can press d
twice to delete it. Like this. Now in the cell I'm going to print a hello world message. So print
hello world. Now, to run the code in this cell, we can click on the run button here,
so, here's our print function, and right below that you can see the output of this function. But note that when you run
a cell, this will only execute the code in that cell. In other words, the code in other cells will not be executed.
Let me show you want I mean, so in the cell below the cell, I'm going to delete the call to a describe method. Instead I'm going to print
ocean. Now, I'm going to put the cursor back in this cell where we print this hello world message
and run this cell. So we can see hello world is displayed here, but the cell below is still displaying
the describe table, so we don't see the changes here. Now, to solve this problem, we can go to the cell menu on the top,
and run all cells together. This can work for a small project, but sometimes you're working with a large data
set, so if you want to run all these cells together it's going to take a lot of time. That is the reason jupiter saves the output of each cell, so we don't have to rerun that
code if it hasn't changed. So this notebook file that we have here, includes our source code organized in cells as
well as the output for each cell. That is why it's different from a regular py file where we only have the source code.
Here we also have autocompletion and intellisence, so in this cell, let's call df data frame
. now if you press tab you can see all the attributes and methods in this object. So let's call
describe, now with the cursor on the name of the method we can press shift and tab, to see this tool tip that describes
what this method does and what parameter it takes. So here in front of so here in front of signature you can see the describe method, these are the paramter
and their default value, and right below that you can see the description of what that method does. In this case, it describes
generates descriptive statistics, that summarize the central tendency and so on. Similar to vs code, we can also convert a line to comment
by pressing command and slash on mac, or control slash on windows. Like this. Now that line is a comment, we can
press the same shortcut one more time to remove the comment, so these are some of the most useful shortcuts in jupiter.
Now over the next few lectures we're going to work on a real machine learning project, but before we get there, let's delete all the cells here, so we start with only a single
empty cell, so here, in this cell, first I'm going to press the escape button, now the cell is blue, so we're in the command mode, and
we can delete the cell by pressing d twice. There you go. Now, the next cell is activated and is in the command mode.
So, let's delete this as well, so we have two more cells to delete there you go, and the last one, like this,
so now we have an empty notebook with a single cell.
Over the next few lectures, we're going to work on a real machine learning project, imagine we have an online music store, when our users sign up,
we asked our age and gender, and based on their profile, you recommend various music albums their likely to buy. So in this project,
you want to use machine learning to increase sales. So, we want to build a model, we feed this model with some sample data,
based on the existing users. Our model will learn the patterns in our data, so we can ask it to make predictions. When a new user signs up,
we tell our model, hey, we have a new user with this profile, what is the kind of music, that this user is interested in, our model will say jazz, or hip hop,
or whatever, and baed on that we can make suggestions to the user so, this is the problem we're going to solve, now back to the list of steps in the machine
learning projects, first we need to import our data, then, we should prepare or clean it, next we select a machine learning algorithm
to build a model, we treat our model and ask it to make predictions. And finally, we evaluate our algorithm to see it's
accuracy. if it's not accurate we either fine tune our model or select a different algorithm. So let's focus on the first step.
Head over to bit.ly/music.csv this is a very basic csv that I've created for this project, it's just some random
made up data it's not real. So we have a table with 3 columns, age, gender, and genre. Gender
can either be one which represents a male, or a 0, which represents a female, here I'm making a few assumptions.
I'm assuming that men between 20 and 25 like hip hop men between 26 and 30 like jazz, and after the age of 30,
they like classical music. For women I'm assuming that if they are between 20 and 25 they like dance music, if
they are between 26 and 30 they like acoustic music, and just like men, after the age of 30 they like classical music. Once again this is
a made up pattern, it's not the representation of the reality, so, let's go ahead and download this csv. Click on this ... icon here
and download this file. In my downloads folder, here we have this music.csv.
I'm going to drag and drop this onto the desktop because that's where I've stored this hello world notebook. So I want you to put this csv file
right next to your jupiter notebook. Now, back to our notebook, you need to read the csv file, so just like before
first we need to import the pandas module, so import panda as pd. And then we'll call pd,
.read_csv and the name of our file is music.csv. As you saw earlier this
returns a data frame which is a two dimensional array similar to an xl spreadsheet, so let's call that music_
data. Now let's inspect this music_data to make sure we loaded everything properly so
run, so here's our data frame, beautiful, next we need to prepare or clean the data. And that's the topic for the next lecture.
next lecture. The second step in a machine learning project, is cleaning, or
preparing the data, and that involves tasks such as removing duplicate null values and so on. Now on this particular data set we don't have to do anything
kind of cleaning, because we don't have any duplicates, and as you can see As you can see, all rows have values for all columns, so we don't have null values.
But there is one thing we need to do, we should split this data set into two separate data sets, one into the first
two columns, which we refer to as the input set, and the other with the last column which we refer to as the output set. So when we train a model,
so when we train a model we give it two separate data sets. The input set and the output set. The output set which is in this case
the genre column contains the predictions so we're telling our model that if we have a user who's 20 years old and a male they like
hip hop. Once we train our model then we give it a new input set. For example, we have a new user who is
21 years old and is a male, what is the genre of the music that this user probably likes. As you can see in our input set, we don't have
a sample for a 21 year old male, so we're going to ask our model to predict that. That is the reason we need to split this data
set into two separate sets. Input and output So back to our code, this data frame object has a
method called drop. Now if you put the cursor on the method name and press shift
and tab, you can see this tool tip, so this is the signature of this drop method, these are the parameters you can pass here.
the parameter we're going to use in this lecture is set to none by default. Witht his parter we can specify the columns we want to drop, so
in this case we set columns to an array with one string, genre
now this method doesn't actually modify the original data set. In fact it will create a new data set but without thisq
call. So by convention we use a capital X to represent that data set, so capital x equals this
expression. Now, let's inspect x, so as you can see our input set or x
includes these two columns, age and gender, it doesn't have the output or predictions. Next we need to create our output set so,
once again we start with our data frame using data, using square brackets we can get all the
values in a given column. In this case, genre. Once again this returns a new data set. By convention we use a lower case y
to represent that. So that is our output data. Let's inspect that as well. So,
in this data set we only have the predictions or the answers. So we have prepared our data, next we want to create a model using an
algorithm. The next step is to build a
model using a machine learning algorithm. There are so many algorithms out there, each algorithm has its pros and cons, in terms of the performance and accuracy.
In this lecture we're going to use a very simple algorithm called decision tree. Now the good news is we don't have to explicitly
program these algorithms, they're already implemented in a library called side kick learn. So, here on the top,
from sklearn.tree let's import the decision tree
classifier. So sklearn is the package that comes with sidekick learn library, this is the most popular machine learning library
in python. In this package, we have a module called tree. And in this module we have a class called decision tree classifier.
This class implements the decision tree operator, okay? So, now we need to create a new instance of this class.
So, at the end, let's create an object called models nd set it to anew instance of decision,
tree classifier. Like this. So now we have a model, next we need to train it so it learns
patterns in the data, and that is pretty easy. You call model, .fit this method takes
2 data set. The input set and the output set. So they are capital x, y.
Now finally, we need to ask our model to make a prediction, so we can ask it, what is the kind of music a 24 year old male likes? Now before
we do that, let's temporarily inspect our initial data set. That is music data. So, look what
we got here. As I told you earlier, I've assumed that men between 20 and 25 like hip hop music but
here we only have 3 samples for men age 20, 23,and 25. We don't have a sample for
a 21 year old male. So if you ask our model to predict the kind of music that a 21 year old male likes, we expect it to say hip hop. Similarly,
I've assumed that women between 20 and 25 like dance music, but we don' have a sample for a 22 year old female. So once again if
you ask our model to predict the kind of music that a 22 year old woman likes, we expect it to say dance.
So, with these assumptions let's go ahead and ask our model to make predictions. So let's remove
the last line, and instead we're going to call model .predict. This method takes a
2 dimensional array. So here's the outer array. In this array, each element is an array. So I'm going to pass
another array here, and in this array I'm going to pass a new input set. a 21 year old male. So 21, 1
that is like a new record in this table. Okay? So, this is one input set, let's pass another input for a 22 year old
female. So here's another array, here, we add 22 comma 0, so we're asking our model to make 2 predictions
at the same time. We get the result and store it in a variable called predictions, and finally
let's inspect that in our notebook. Run, look what we got, our
model is saying that a 21 year old male likes hip hop, and a 22 year old female likes dance music. So our model successfully
will make predictions here. But wait a minute, building a model that makes predictions accurately is not always that easy.
After we build a model we need to measure it's accuracy. And if it's not accurate enough, we should either fine tune it or build a model using a different
algorithm. So next lecture I'm going to show you how to measure the accuracy of a model.
In this lecture I'm going to show you how to measure the accuracy of your models. Now in order to do so,
first we need to split our data set into two sets. One for training and the other for testing, because right now, we are passing the entire data set,
for training the model and we're using 2 samples for making predictions. That is not enough to calculate the
accuracy of a model. A general rule of thumb is to annotate 70-80% of our data to training, and another20-30%
for testing, then instead of passing only two samples for making predictions, we can pass the data set for testing
we'll get the predictions and then compare the predictions with the actual values. In the test set. Based on that, we can calculate the
accuracy. That's really easy, all we have to do is import a couple functions and call them in this code. Let me show you. So first on this top
from sklearn.model underline selection module we import a function called
train test split. With this function we can easily split our data set into two sets. So training and testing,
now, right here, after we define x and y, sets, we call this funciton, so train
test split. We give it 3 arguments, x, y, ad a keyword argument that specifies
the size of our test dataset. So test _size we set it to 0.2 So we're allocating 20%
of our data for testing. Now this functions returns a tuple, so we can unpack it into 4 variables
right here. x_train x_test y_train and y
_test. so the first two variables are the input sets for training and testing.
And the other are the output sets for training and testing, now, when training our model,
instead of passing the entire data set we want to pass only the training data set. So, x_train,
and y_train. Also, when making predictions instead of passing these two samples, we pass
x_test. So thats the datas set. That contains input values for testing. Now we get
the predictions. To calculate the accuracy we simply have to compare these predictions with the actual values we have in the output set
for testing. That is very easy. First on the top, we need to import a funciton, so, from sklearn.metric
.metrics import accuracy _score. Now at the end.
We call this function, so accuracy score and give it two arguments y_test.
Which contains the expected values and predictions which contains the actual value.
Now this functions returns an accuracy score between 0 to 1. So we can store it here,
and simply display it on the console. So let's go ahead and run this program. So, the accuracy score
is 1 or a 100% but if we run this one more time, we're going to see a different result because every time we split our data set into
training a test sets. We'll have different data sets, because this function randomly picks data for training and testing. Let me show you, so put the cursor
in the cell, now we can see this is activated note that if you click this button here, it will run the cell and also insert a new
cell below this cell. Let me show you. So if I go to this second cell press the skip button, now we are in the command mode,
press d twice, okay now it's deleted, if we click the run button, we can see, this code was
executed, and now we have a new cell, so if you want to run our cell multiple times every time you have to click this and then run
it, and then click again, and run it, it's a little bit tedious. So I'll show you a shortcut. Activate the first cell, and press control and enter
this runs the current cell without adding a new cell below it. So, back here, lets run it multiple times
okay, now look the accuracy dropped to 0.75, it's still good, so the cuuracey scored here, is somewhere
between 75% to a hundred %. But let me show you something, if I change the test size, from 0.2 to 0.
8, so essentially we're using only 20 percent of our data, for training this model. And you're using the other 80%
for testing. Now let's see what happens when we run this cell multiple times. SO, control and enter, look, the accuracy immediately
dropped to 0.4 One more time, now 46% 40%, 26%
it's really, really bad. The reason this is happening is because you are using very little data for training this model. This is one of
the key concepts in machine learning, the more data we give to our model and the cleaner the data is, we get the better result, so if you have duplicates,
irrelevant data, or incomplete values, our model will learn back patterns in our data. That's why it's really important to clean
before training our model. Now let's change this back to 0. 2, run this one more time, okay, now
the accuracy is 1, 75%, now we drop to 50% again, the reason this is happening, is because we don't have enough data.
Some machine learning problems, require, thousands or even millions of samples, to train model, the more complex a problem is,
the more data we need. For example, here we're only dealing with a table of three columns, but if you want to build a model to tell if a picture of a cat or a dog or a horse,
or a lion, we will need millions of pictures, the more animal it will support the more pictures we need. In the next lecture, we're going to talk about
model persistence. So this is a
very basic implementation of building a training a model to make a prediction. Now to simplify things I have removed all the code that you wrote in the last lecture for
calculating the accuracy, because in this lecture, you're going to focus on a different topic, So basically we import our data set.
Create a model, train it, and then ask it to make predictions, now this piece of code that you see here, is not what we
want to run everytime we have a new user or every time we want to make recommendations to an existing user
sometimes it's really time consuming. In this example, we're dealing with a very small data set that only has 20 records. But in a real application,
you might have a data set with thousands or trillions of examples, training for that might take seconds or minutes or even hours.
And that is wy model persistence is important, once in a while, you build and train our model and then we save it to a file.
Now, next time we want to make predictions, we simply load the model from the file and ask it to make predictions. That model is already trained
you don't need to retrain it, it's like an intelligent person. So let me show you how to do this. it's very very easy. On the top,
from sklearn.externals module we import joblib. This
job lib object has methods for saving and loading modules. So, after we train our model we'll simply call
job lib .dump and give it two arguments. Our model and the name of the file
in which we want to store this model. Let's call this music -recommender.job lib
That's all we have to do. Now temporarily I'm going to comment out this line, we don't want to make any predictions, we just want to store
train model in a file. So let's run this cell with control, and slash, okay, look, in the output
we have an array that contains the name of our model file. So this is the return value of the dump method. Now back to our
desktop, right next to my notebook we can see our job lib file, this is where our model is stored. It's simply a binary file. Now back to our
jupiter notebook. As I told you before in a real application we don't want to train model every time. So let's comment out
these few lines, on Mac, we can press command and slash and on windows control slash.
Okay, these lines are commented out, now this time, instead of dumping our model, we're going to load it, so we call the load method, we don't have the model, we simply
pass the name of our model file. This returns our trained model. Now with this
two lines we can simply make predictions, so, earlier, we assumed that men between 20-25 like hip hop music.
let's print predictions and see if our model is behaving so control
so this is how we persist and load models.
Earlier in this section, I told you that decision trees are the easiest to understand. And that's why we started machine learning with decision trees. In this lecture, we're going to
export our model in visual format, so you will see how this model makes predictions, that is really, really cool.
Let me show you. So once again I've simplified this code so we simply import our data set, create
input and output sets, create a model, and train it, that's all we are doing, now I want you to
follow along with me, type everything exactly as I show you in this lecture. Don't worry about what everything means we'll come back to it shortly. So on the top,
from sklearnimport tree, this object has a method for exporting
our decision tree in a graphical format. So after we train our model, let's call tree
_graph vis. Now here are a few arguments we need to pass. The first argument is our model,
the second is the name oft he output file. So here we're going to use keyword arguments, because this method takes so many parameters, and we want to selectively pass
keyword arguments without worrying about their order. So, the parameter we're going to set it out_file
let's set this to music-recommend .dot. This is the dot format, which is the
graph format, which is a graph description language, you will see that shortly. Now the other parameter you want to set is feature
_names. We set this to an array of two strings, age and gender. These are the features
or the columns of our data set. So they are properties or features of our data. Okay? The other parameter
is class names. So class_names we should set this to the list of classes or labels we have
in our output data set, like hip hop, jazz, classical and so on. So, this y data set includes all the genre
or all the classes of our data, but they are repeated a few times in this data set. So, here we call y.unit this returns
the unique list of classes, now we should sort this alphabetically. So, we call the sorted function, and pass the
result a y.unique. The next parameter is labeled, we set
this to a string, all, once again don't worry, about the details of these parameters, we're going to come back to these shortly. So,
set label to all, then round it, to true, and finally field to true. So,
so this is the end result, now let's run this sound using control and enter, okay,
here we have a nw file music recommender .. that's a little bit funny. So we want to open this file with vs code.
So drag and drop this into a vs code window. Okay, here's a dot format, it's
a textural language for describing graphs Now to visualize this graph we need to install an extension in vs code.
So on the left side, click extensions panel and search for dot, dot. Look at this second extension here.
graphvis or .language by stephon vs. Go ahead and install this extension
and then reload vs code. Once you do that, you can visualize this dot file. So let me close this tab.
Alright, look at this ... on the right side. Click this, you should have a new menu, open preview to the side. So like that
alright, here's the visualization of our decision tree, let's close the dot file, there you go. This is exactly
how our model makes predictions. So we have this binary tree, which means every node can have a maximum of two children.
On top of each note we have a condition if this condition is true we go to the child node on the left side. Otherwise we
go to the child node on the right side. So let's see what's happening here, the first condition is age less then or equal to 30
.5. If this condition is false, that means that user is 30 years or older, so the genre of the music that their interested in is classical.
So here we're classifying people based on their profile. That is the reason we have the word class here,
so a user who is 30 years or older, belongs to the class of classical. Or people who like classical music. Now what if this condition
is true. That means that user is younger then 30, so, now we check the gender, if it's less then 0.5,
which basically means it equals to 0, then we're dealing with a female. So we go to the child node here,
now once again we have another condition, so we are dealing with a female who is younger than 30. Once again we ned to check their age so
is the age less then 25.5? If that's the case then that user likes dance music, otherwise they like acoustic music.
So this is a decision tree that our model uses to make predictions Now if you're wondering why we have these floating point numbers
like 25.5 These are basically the rules that our model generates, based on the patterns in our dataset.
As we give our model more data, these rules will change so they are not always the same. So they are not always the same, also the more columns or the more features
we have, our decision tree is going to get more complex. We only have two features, age, and gender. Now back to our code
let me quickly explain the meaning of all these parameters, we set field to true so each box or each node is filled with a color. We set
rounded to true, so they have rounded corners. We set label to all so every node has labels that we can read.
We set class names to the unique list of genres and that's for displaying the class for each note, right here, and we set
feature names to age and gender, sow e can see the rules in our notes. So that was a short and
sweet introduction to machien learning. Now you can use the materials that you learn in this section and apply them to solve a different set of problems. Now here's a question for you:
What ideas do you have for machine learning? What kind of problems do you want to solve with machine learning? Use the comments box below and let me know. I love to
hear about your ideas! Next we're going to use python and a popular framework called django. To build a web application. Are you ready, let's get started
In this turorial, I'm going to show you how to create your first website with python, and A
and a very popular framework called django. So it's spelled with a silent D, and is pronounced django. it's a web framework for
perfectionists with deadlines. So if you're a perfectionist and you want to quickly put together a website that is fast, scaleable and secure,
django is your best friend. And here are the popular websites built with Django. Like Instagram, Spotify
YouTube, Washington Post, and so on. Now you might say what is a framework, and why do we need a framework to build a web application or a web site?
Well, the framework is essentially a library of reusable modules these modules provide functionality for common tasks
for example, in the case of a web framework like django we have modules to work with http requests url's, sessions, cookies and so on.
These are the concerns of pretty much every website or application out there. So all this functionality is baked into django, we don't have to
code it from scratch, that is why we use a framework like django. Now, django. Now technically a framework is more then a library,
apart from providing these modules it also provides a structure for each application It tells us what folders or files we should have in our project. So this
provides a consistency among various django projects. So as you move from one company to another and work on different projects, you can easily transition from one
project to another, because all these applications follow the same structure now, with that interaction, let's create our first
django project. So back to pycharm, close the hello world project, and create a new project, create a new project,
let's call this new project pyshop go ahead, alright, now down at the bottom let's
open up a terminal window, in this window we're going to install django. So we use pip to install
django. But be sure to add two equal signs here followed by 2.1 With this we are telling pip that we want to install django version
2.1. The reason I'm doing this, is because in the future when you're watching this video, chances are there is a newer version django out there. I
want to make sure that you can easily follow these tutorials, even though what I'm going to show you in these tutorials will most likely work with the latest version of django. I just want to
be on the safe side. So let's go ahead alright, django is installed,
next we need to create a django project, so here press control and L this cleans up our terminal window, you don't have to do it, but it's just
easier to see. To create a django project, we need to execute this command, django, -admin space
start project space, you're going to call this project pyshop space period.
So when we install django, django brings a command line utility called django admin so this is a utility or program
that we can execute form the command line or terminal, right here. Now, this program takes various arguments, in this case
we want to use this argument start project, with this we're going to create a project called pushup in the current folder.
So this period is imported here, that means the current folder, if you don't add this period, this utility is going to create an extra folder and that
looks a little bit repetitive, so let's go ahead with this, alright, now, back to the project panel, if you expand py
shop we can see that this is our project that we created in pycharm and in this folder we have these files.
So, init.py, you have seen this before, that means this folder is package, so we can import various modules,
of this package into other modules, and in this module, we define various settings for our application, you're going to see this later in
this course. You also have this url's module, and with this module we define what should the user see when they see slash
about/contact/products/shopping cart again, we're going to work with this only. And finally we have this module,
that wsgi, that is short for web server gateway interface. The purpose of this module is to provide a standard interface
between applications built with django and web servers. This is an advanced topic, so for now, don't worry about it. Now, outside of this folder,
of this folder you also have this new folder in our project manage.py. As the name implies, we use this to manage
this django project. With this we can start our web server, we can work with our data base, again, we're going to work with this soon,
let's open up the terminal window one more time, now, type out this command, python if you're on windows or python
3 if you're on Mac, because as I told you at the beginning of the course, Mac by default comes with an installation of python, that is python 2. But that is
this course is python 3. So python 3 space manage .py space run
server. What is going on here? So with python interpreter we are running this program manage.py and passing run server
as an argument. This manage.py is essentially the same program that we worked with here, django admin.
But we use django admin before creating a django project, now we have a django project, so now in this project we work with manage.py this
is a module that contains some python code, so we use this module to manage our django project. 
in this course I'm gonna teach you everything you need to know to get started programming in python.
Python is one of the most popular programming languages out there, and it's by far one of the most sought after for jobs
and so if you're trying to get a job or you're trying to you know, automate your life or you try to write awesome scripts to do a bunch of different things than
python's for you honestly more and more developers every day are moving their projects over to python because it's such a powerful
and the surgeon easy to use language, a lot of programming languages out there just aren't very beginner friendly there's
a lot of syntax there's a lot of like little things that if you get wrong the program will yell at you.
python is the complete opposite of that. you basically just type out what you want to do in python does it it's that simple there's not
a whole lot of syntax to learn the learning curve is literally zero you jump in, you can start writing your first program in seconds.
in this course I'm gonna teach you guys. everything you need to know to get started in python. I designed this course
especially for python, and each lesson has been specially designed with examples that will help you along the way.
with so many people starting to learn python the question isn't, why should you learn pipe on the question is why shouldn't you ?
and I think for a lot of people the reason they might not want to learn python is because they're intimidated or they're afraid that it's going to be too hard.
trust me I am going to hold your hand through this entire course we're going to talk about all the core concepts in python we're going to look at
everything you need to know to start programming in python and start being confidence are writing scripts and start writing programs that are awesome in doing cool things in your life.
anyway I'm super pumped to be teaching you guys python. I can't wait to get started in this course and I hope you guys stick around and fall along with the course and learn this amazing programming language
in this tutorial dominates three guys how to install python onto your computer. and we're also going to install a text editor that we can use to write
our python programs in. so the first order of business is to actually install
python on your computer. so we want to do is head over to your web browser
and you want to go over here to this page it's just www dot python dot org
forward slash downloads and on this page there's going to be two buttons down here
and this is going to say download python three point six point three. and at least the version that I have right now or download python two point seven point one four.
so here's the thing about python there's actually two major versions of python that are in use
currently there is python two and there's python theories you can see over here,
this is like two point seven point one four basically any python two
version we would just refer to as like python two and here's like the latest python three version.
and so there's these two versions that you can download and the first thing we have to decide on which version do we want to download.
and here's the basic difference python two is a legacy version of python which basically means that
it's like an old version and it's not being like actively maintained or supported
like officially by python anymore. python three is like the future of python it's like the newest version it's the one that's getting actively maintained and supported.
so there's pros and cons to picking either won a lot of people say like python too
has been around longer and so there's more like libraries there's basically just more python code written in python two
so therefore like there's a few more things that you can do in pipe onto then you can do in python three
but then again python two is not supported and you know, five or ten years from now probably no one's going to be using it.
python three it like a site is like the future of python it's the newest version it's the one that you know it's sort of being maintained going forward.
so for the purposes of this tutorial I'm going to be teaching you guys python three so we're going to want to download python
three now here's vaguely if you learn python three or you learn python to the differences aren't very big.
there are a few differences in like some syntax and just so you know little things here and there,
but if you learn python three you'll be able to jump right in and code in python two as well don't let anyone
tell you that you have to learn one of the other. we're going to learn python three just because it's I think probably the best for a beginner to learn.
and so that's the one that we want to download so I'm just going to click download python three and we're gonna go ahead and download
this version. and when that's done downloading I'm going to head down to my downloads folder
and you'll see here we just have this file doubleclick, and we get this like python installer so I'm going to click through here,
and we'll be able to install python three on our computer right when that's done and stalling we can just close out of this and we should begin to get us now we have python three
installed on our computer. the next step is we need to choose a text editor so
we're going to be writing a bunch of code so we're going to need some you know environment of some program that we can write all that code in.
and really you can write python in any text editor you could write it in like a note pad or tax at it,
it doesn't really matter but there are special text editors that are designed just for writing python code.
and these are called id ease and not stands for integrated development environment.
it's basically just a special environment where we can you know ron and execute our python code.
and it'll you know basically like tell us how we're doing so were the only if we write something that's wrong or we
have errors it'll kind of point us in the right direction of what we need to do to fix that stuff, so in this course we're going to be using an idea
and one of my favorites and one of the most popular ity ease for python is called pi charm.
so I'm over here on this website. it's called jet brains dotcom forward slash
pi charm. and this is the idea that we're gonna be using in this course so I'm just gonna come over here and click this big download
now button and we'll go ahead and download this pie charm program
right so I'm getting this page are here you can see there's two versions of pi charm one as a professional version and that one's like paid they have to pay for it.
but then there's this community version down here and that's free and open source so I'm going to download this one
and this should have everything we need to get started using python right when that finishes downloading I'm just going to
pull that up in my downloads folder and again we can just sort of run this guy
and I'm on a mac so I'm going to have to drag it over to my applications folder. all right so now have pi charm
and we have python three installed on your computer. so we're ready to start programming in
python. in this tutorial we're going to create our first
python program. and we're going to be able to run it and see how everything works. the first thing I want to do is open up
pi charm so pi charm was the idea he the integrated development environment
that we downloaded in the last tutorial so I'm just going to go out and search for it on my computer
and I can just open it up and we first opened up high charm we should basically just get a window prompting us to create a project.
so you can see that down here. actually the first thing I want to do though is come over here to configure
and I'm just going to click on preferences. and I actually want to change the appearance
so I'm gonna go ahead and give this a theme so I just went over here to appearance and behavior appearance
and I'm gonna change the theme to darker color because I think it's a little bit easier to use and look at,
but you don't have to do that if you don't want you so down here I'm just going to click create new projects
and it's going to give us this little window right here so I can just name my project. and I'm just going to name this
graph. and then there's other option down here where it says interpreter. now
what we wanna select is python version three so if I click down here you'll notice that there's a couple different options.
so I'm on a mac computer and by default mac has python
version two installed on it. if you're on a windows machine I'm not sure if it does but
in this tutorial we're going to be using python three so you wanna make sure that you have python three selected as the interpreter,
otherwise you might not be able to fully follow along with what we're doing in this video. so now it's going to come down here and click
create. and this is going to go ahead and create our projects for us right so now we have
our python project up and running, and I'm sure you guys how we can create our first
python program, so over here in this draft folder and this is just that project that we created.
I'm just going to right click and I'm saying new and I'm going to come down and click python file so we want to create a new python file this will be our first
python program. and I can just give this a name, so why don't we just call this app
and it's going to click ok all right so now we have our first python file open
and we can just start typing in some python so I want to show you guys. does a very basic python program.
and this is just going to be a hello world programs so we're just gonna print something out onto the screen. so when I say
what I want to do is I want to type out p r iyer anti prince and wanted to have an open and closed
parentheses now inside of those parentheses we can make some quotation marks
and inside of the quotation marks I'm just going to tape out hello world. so this is like a very basic python program.
and what this is gonna do is it's just going to print out hello world onto the screen.
and so now what I can do is I can actually run this file and we're actually getting a little arrow here it wants us to create a new line
at the end of the file. and so now in order to run our python program I'm just going to come up here to the top
and I'm cinematic run and we'll click this run button right here and I will see what happens
so it's asking me what I want to run I can just click add up and down here at the bottom you'll notice that we have this text that just got printed out
hello world, so whatever I print or whatever I put inside of this print statement is going to get printed out
down below in the council so as long as you're getting that print statements work then you actually written your first python program.
and as we go through it forward in the course were can be writing all sorts of awesome python programs. and we're going to do an
all sorts of cool stuff
in this tutorial I wanna talk to you about writing a basic python programs so we're going to write it as a very simple python program.
we're going to look at how we can go ahead and write up programs we're going to talk about how our programs are getting executed by python
and we're also going to draw out a little shape onto the screen so this is going to be pretty cool I'm excited to
talk you guys about just the bare basics of python, and really just sort of give you an introduction so
over here we have our basic text editor and so any of the
python code that I write inside of this file is actually going to get executed by a python so
this python file has a bunch of python code inside of it. and basically what we're doing when we're
programming in python is we're just giving the computer a set of instructions. right that's really what programming is it's just like we're specifying a set of instructions
and the computer is going to go off and execute those instructions that we give it. and so
the more complex the instructions we give to the computer the more complex the tasks the computer can
carry up. so I'll show you guys how we can use some python instructions or some python code
in order to draw out a shape onto the screen so I'm actually going to draw out a little triangle.
so over here, we can actually print something out onto the screen and python using something called a print statement so I can just type out
print. and inside of these parentheses. I can just type some quotation marks
and inside the quotation marks we can put whatever we want to print out onto the screen. so I'm gonna
copy this and I'm actually going to make a few of these little prince statements and we're going actually draw a sheep.
so we're gonna draw like a triangle type shape so down here it's gonna draw a forward slash
and then up here I'll make a space and we'll do another foreign sash here will make two spaces
with united forward slash. and over here we can make three spaces and afford sash. and now I'm going to draw like a vertical bar is going all the way down.
and actually we can do some underscores here as well. I think high school right so now we have our triangle looking shave and you can see
it looks kind of like a right triangle so I can save my file. and I can either come up here to run and
click run app or of using pie charm you can also just come over here and click this play button
and when I click the play button I want you to notice what happens down here so down here we have this little window and
this is called the consul and it basically the council is a place where python is going to
output some information so when we use this print statement were basically telling python late
hey can you print something out onto the consul. so there's a lot of situations where we're gonna wanna see what's going on in our code.
and we can use that print statement and print things out to the council. and we can basically like have a little window into what our programs doing
in our case we're just going to be printing out this triangle onto the consul. so I'm gonna come over here and click this play button
and you'll see down here we're actually printing out that triangle so mission accomplished we were able to print out our shape.
so I can really draw any shape I want it as long as I was able to specify inside of these print statements.
so essentially what python's doing when I click that play button is it's going into this file and it's looking at all of these instructions in order.
so the first thing it does is it goes to this instruction and it says ok, they want me to draw out these like little forward slash in this vertical bar onto the strain,
once it does that it goes down to this instruction it says ok they want me to print something on again when it prints dot out it goes down to this instruction
etc so python is actually going to execute the lines of code that we write
in order. so the order in which I write the instructions matters a lot. so for example if I was to take this last line here
and put it up here at the top. now when I save the file. instead of just drawing up that triangle.
it's going to draw out this little upside down bottom thing at the top and then the rest of the triangle down here so
the order of the instructions actually matters a lot. so this is basically how your python programs are going to go.
as we go through this course we're going to learn more and more of these little lines so here we're just using this little print function basically and just print something out on to the screen,
there's a bunch of little things like this that we can learn as we go through will learn more and more instructions that we can give to the computer.
but in this lesson I just wanted to kind of show you guys the basics right. oh we can essentially just define these little instructions for the computer
and the computer will execute them in order.
and this tutorial I wanna talk to you guys about using variables in python.
now in python and you're going to be dealing with a lot of data and so a lot of times in our program we're going to be working with
all types of information and data and values, and sometimes that data
can be difficult to manage. so in python we have this thing called a variable.
and it's basically just a container where we can store certain data values.
and when we use a variable when we put those data values inside containers. it makes it a lot
easier for us to work with and manage all of the different data inside of our programs.
so variables are extremely helpful and it's sort of like a core topic in python that you're really going to want to know and master.
so in this tutorial omelets each you guys. everything you need to know to get started with variables we're going to look at what they are
why they're useful and we'll look at the different types of variables and the different types of data that we can store
inside of variables, who over here in my python file I just have a very simple program.
and it's basically just printing some text out onto the screen. and so this is actually a little story that I wrote it says.
there once was a man named george he was seventy years old. he really liked the name george
but didn't like being seventy. so this is a valid python program I can go ahead and
run this program and you'll see down here in the council everything prints out and it looks great so
we have an awesome little python program here. well let's say that inside of our story I wanted to change
the character's name so instead of naming the character george let's say I wanted to name the character
jon well I'm going to have to go through and I'm going to have to manually change the name george to the name john at every place inside of this story where it's mentioned.
so I'm not to go over here and I'll say ok john I'm going to have to manually change that
and then ok it's out here we're going up to again manually type in john and change it to john.
so in order to change the character's name I had to manually go in and change it in both places.
and now let's say ok maybe we want to change the characters ne age also so in addition to changing the name.
we also want to change the age let's make him a little bit younger so why don't we say john is going to be thirty five.
so you see here I had to come here and manually change the age and then come down here
and manually change it again right. and now that we changed it like it's going to work it's going to be updated in our program.
but you'll notice that in order to make that change like I had to look through the entire program find it where that
value was and change it, and this was only with four lines of the story imagine if I had a story that was like
thousands of lines long. and we mentioned that the character's name and age like hundreds of times.
we don't have to look through each one of those lines and manually change the character's name and that is not a very good way for us to do this
and it's really not a good way for us to manage the data in our program right the character's name in the age.
and so we can actually use a variable in order to store the character's name and the characters.
age. and when we use that variable it'll make it a lot easier for us to put the character's name and age.
inside of our little program here. so I'm gonna show you guys how we can create a variable for the character's name and age.
now it's going to go up here above this print statement. and up here I want to create a variable.
so when we create a variable in python we actually need to give python
a couple pieces of information. the first piece of information we need to give python is the name of the variable so I need to actually assign a name
to this container where we're going to be storing information. so all I have to do is just type out
the name of the variable that I want to create so I'm going to create a variable called character name.
so I'm just going to say character adam's they underscore name
so generally when you're creating a name for a variable in python. you want to separate different words
with an underscore so I have two words here and I'm separating them with an underscore.
and now what I need to do is I need to put a value inside of this very more so
basically what I can do is I can just say equals and over here I can type a value
so I'm just gonna type out the character's name inside of quotation marks. so we're just gonna type out john.
so now we have a variable for the character's name and below this character named variable I want to create another variable called
character age certain just going to tape out character underscore age.
and I'm going to set this equal to the characters age which is thirty five.
so we now have two variables, one representing the character's name and one representing the characters age.
so what I can do now as I can replace the character's name inside of this story with
this variable. and I'm gonna show you guys how to do that so if we want to put a variable inside of this print statement.
I'm actually going to have to do a couple of things. the first thing I'm going to have to do is end off this
text in here so I'm going to have to put a quotation marks here the end
and you can see I'm basically wrapping this whole thing into a single like quoted line.
and now I also have this tax overhear the end so I'm going to have to put a quotation mark here. so now I have
a bunch of tax year in quotation marks. and then I also have tax over here in quotation marks
now inside of here instead of saying the character's name I want to refer to that character name
variable so I'm just going to say plus character
underscore name and I want to say another plus sign so I basically I'm saying I want to
print out all of this text, plus the value that stored inside of character name
plus all of this text. and what this will do is they will actually print out the character's name we print this
so I'm gonna go ahead and run this program and you'll see down here and actually let me put a space over here,
and we'll run it again. so you can see down here, we still are printing out there once was a man named
john. and so what python is doing is when it executes this line of code
it's coming over here and it's seeing ok they want to turn out. the value inside of character name
so it python's going to go up here it's going to get the value, and it's going to insert it inside of there
so I can basically do this for every instance of the character name in my file so I can
you know r is copy this guy right here and I can just paste it down here where the characters name is
so apace this and you can see now were doing exactly the same thing that we did up there.
I can also do this for the characters age someone to come down here and I'll paste in what we just paste it in.
and I'm going to change this instead of character name was changed to character age.
and I'm going to do this in one more spots are going to do this over here we're mentioning the age
and again I'll just change this to carry your age. and so now when I run this program it's going to print out the same story they were printing out before,
but now I don't actually have to type in the character's name and the characters age.
I can just refer to this variable. and the cool thing about variables as if I wanted to change the character's name.
now all I have to do is change it up here so I could change the characters names you like tom or something.
and we could also change their age so I could change the age to be like fifty and now that's going to automatically update throughout our entire story
when I click this play button you'll see now we're using the name tom and he's fifty years old.
so that's where variables can come in handy and this can be a really awesome way to control and manage
the data that's inside of our programs with variables you can also modify their values
so for example let's say that halfway through the story I wanted to change the character's name
why can just make some new lines over here, and down here I can actually assign a new
value to one of these variables. so I can say like character underscore name,
and in order to give it a different value all I have to do is just say equals and will give it a different value and so
let's say halfway through the story we want to change the character's name to mike one now when I run my program
you'll see here in the first part of the story it says there once was a man named tom. and in the second part of the story,
it's referring to the name as mike. so I actually updated the variable
inside of my program over here and that's a really awesome way you know a lot of times in these programs you're going to want to be modifying the values of variables
so you can do it just like that. and so finally I want to talk to you guys about the different types of data that we can store inside of these variables.
so over here I have the character name and character age and I'm actually storing what are called strings,
so a string is basically just plain tax straight so the name tom that's just plain text
down here these guys are strings as well. so there's a data type in python,
called a string and it's just basically going to store plain text so
you know any text that you would have like in a story early know someone's name you can store inside of a string.
there's also another type of data that we can store inside of python which is numbers
so an additional storing text we can also store numbers. so if I wanted to start a number for example
let's say we wanted to store the character age instead of inside of a string. we can store it inside of a number so
I could just type out fifty. and when we're storing a number we don't need these quotation marks
you only need that quotation mark when you're storing a string so if I wanted to a number I can just
write it out like this, and in addition to using whole numbers I can also use decimal numbers.
so I could say like fifty point five six seven eight to one three and pythons are going to be able to store
that number as well. you can store all different types of numbers and we can also store
what's called a boolean value and a boolean value is essentially a true or false value.
and there's a lot of instances in programming where we're going to want to represent true or false
data for example I can have a variable called like his mail and this would tell me whether or not someone was a male,
and in my case it will be true because I'm a guy right so I can actually this needs to be capital
so I could sort of value of either true or
false. and actually if we were naming this in python we want to use an underscore or so I would say
is underscore mail and this can be either true or false so true or false values is maybe not something that you're used to dealing with like in the real world
but in programming we're going to be using a true or false values all the time they're super important so
like I said there's three basic types of data that we can work with in python there's strings which is just like a plain text,
numbers which would be like either decimal numbers or whole numbers like this, and there's true or false
values. and these are the basic types of data I mean there's a bunch of other types of data that we can use but I would say ninety nine percent of the time.
as a new user in a new programmer to python, you're just going to be dealing with these
three types of data so those are the basics of the data and also with variables
and you're going to be using variables all the time in python so you definitely want to practice up and get comfortable using them
in this tutorial are talks you guys about working with strings in python. now what the most common types of
data that we're going to be working with in python is going to be strings and strings are basically just
plain text so any text that we want to have inside of our program we can store inside of a string.
so I wanna talk to you guys about all the cool things we can do with strings and we're basically just going to get a full introduction into why strings are awesome.
so over here, I'm just going to actually print out a strings I'm just going to say print
and inside of these parentheses. I can type out a string in order to create a string I need to use quotation marks so I can make an
open and close quotation marks just like that now inside the quotation mark I can put whatever text
I want the string to have so we could say like draff academy.
and so now we have a string with the text draff academy inside of it so if I run my program.
now down here we're going to print out draff academy as you can see, and when we have these strings there's actually a bunch of cool things that we can do with them so
one thing I could do would be to create a new line inside of the string so if I wanted I could come over here,
and I could save backslash n and you can see it got highlighted in a different color.
and what this is gonna do is it's actually going to insert a new line into the string so now it's going to say draff on one line
and academy on another line. so I'm gonna click play. and you'll see down here we just get draff academy,
an addition to the backslash n I could also use a backslash quotation marks so
if I wanted to put a quotation mark inside of my string. I can't just put a quotation mark like that
because pythons going to think that I'm trying to end this strength. so if I want to include a quotation mark I can just use this
special backslash character and that's called the escape character and it basically just tells python that
whatever character comes after it we want to render a literally so when I say backslash
quotation mark. it basically means like hey python I want to point out a quotation mark. and so now we'll be able to print
out a quotation mark right there. I can also use this to print out of backslash so if I needed to put out a backslash.
I could see backslash, and it'll just print out a normal backslash now
so you can see just like that so if you want and you can use that backslash to make new lines or pronounce quotation marks,
or you can just use it as a normal backslash in addition to just typing out a string here I could also create a string
variable. so I could come down here up here and we can create a variable and let's call it phrase.
and I'm going to set it equal to drop off a colony, so I can store this string value inside of a variable called phrase
and then when I want to print out that variable, or I want to access that string variable. I can just
type the name of the variable. and you'll see that it's going to print out the value that was stored inside of it.
I can also use something called concatenation and concatenation is basically the process of taking a string and
appending another string onto it. so I could come over here and I could say phrase, and I can say
plus. and now I can add in another string so I could say like is cool.
and now this is going to say druff academy is cool, so I'm basically appending another string
onto another one they call that concatenation. and so in addition to doing all that stuff we can also use a special thing is called
functions and a function is basically just a little block of code that we can run
and it will perform a specific operation for us, so we can use functions to modify our strings.
we can also use functions to get information about our strings. so I'm gonna show you guys a couple common functions we can use with the strings.
and they're actually going to do awesome stuff so in order to access one of these functions I can just say phrase and then I can say
dot. and I'm gonna show you guys a function that we can use to convert this string entirely into lowercase so I could just say phrase dot lower.
and I'm going to want to type an open and close parentheses, and this will take this phrase, it'll take my string and it will convert it to lower case.
so you can see now we just have a draft academy done here but it's entirely in lower case. I could also do the same thing for upper case so I could say phrase dot
upper and this will convert the entire string into upper case so you can see now it's entirely upper case.
so in addition to converting the string into upper case lower case I can also check to see if a string is entirely upper case are entirely lowercase.
so for example I could say phrase dot is upper. and this is going to give me back a true or false value
so it's going to be true if the string is entirely upper case or false if it's not.
and you can see here we're getting a false value because this is an upper case I can also use these functions in combination with each other so for example,
I could say phrase dot upper and that a parentheses
and then after this I can say dot is upper and now what it's going to do is it's going to run this
upper function, it's going to convert it into upper case. and then it's going to run this is upper function right after that
and you'll see now we're going to get a true value back because it will have converted the whole thing into upper case.
so you can see now we're getting a true value so the news these functions one after another it can be really useful.
and there's a few other ones that I want to show you so we can also figure out the length of
this string so if I wanted to figure out how many characters were inside of this string I could just say
l e n and I'm actually going to make an open parentheses, and I'm going to make a close parentheses.
so I'm essentially saying alien and this is another function it's the length function. and inside of this alien function I'm actually passing
this phrase variable basically giving the length function this and it's going to spit out a number so tell me how many
characters are inside of this string. as you can see here we get fifteen because there's fifteen characters inside of draff academy.
so that's how you can get the whole length of the string and that's going to be really useful as we go forward in python. we can also get
individual characters inside of a string so imagine if I wanted to just grab one of these characters like imagine if I wanted to
figure out what the first character in the string is we're going to actually use and open a closed
square bracket just like that. and in here I can specify the index of the character that I want to graph.
so if I wanted to grab the first character in the string I can put in a zero. so if I say phrase
square bracket zero, this is going to give me that capital g and you can see down here
that's what gets printed out. now I want to point something out in python. when we're working with strings.
a string gets indexed starting with zero. so you'll notice that in order to access this g.
I had to put a zero in here. that's because in python. when we use indexes on a string we start with zero
so if python is counting the characters or its indexing the characters in a string it's going to start with zero so it's going to say
g is zero I as one are as to a history. so we would say that g is at position
zero in the string. I is at position one r is at position two a's at position three etc.
so we start counting at zero. so if I wanted to access
the first character in the string. this g I have to say phrase zero and that's just a special thing
in python and actually most programming languages do that so they'll start with zero.
so for example if I wanted to access this ei, I'm going to have to put zero
one two three so I put three inside of here now will be able to access that first
a. as you can see we get an a right here, so this is actually really useful being able to grab a specific character inside of a string
and you're gonna be using it that a lot as we go forward and python is also another really awesome function that we can use and it's called the
index function. and basically what the index function will do is it'll tell us
where a specific character or string is located inside of our strings like unsafe phrase
dot index. and I can actually give this a value so sometimes when we use these functions in python,
we can actually give them information so I can give this of value and we would call this passing a parameter so
I would call a value that I would give to a function a parameter and you'll hear that word a lot.
so for example I can say inside of here capitol g, and now this is going to return
the index of the capitol g inside of our string so it should give us back
a zero because g is at the zero of index and you'll see down here that we get a zero because that's where g is.
so for example if I put in a inside it here like the lower case a it should give me zero one two three
because that's where the first aid is inside of this string, so I can click the play button
and you'll see it's giving us a three. you can also put actual words in here so for example I could put like
academy in here, or I could even just put like a c a d. and this is going to tell me where this starts
inside of my string so when I click play, it's going to give me an a because that's where
a cat and he starts right zero one two three four five six seven eight
if I put something in here that wasn't in the strings of for example if I put a z in here, that's not in here.
it's actually going to throw an error so when I play this you'll see that we get this error down here because the z is not found inside of our program so
that the next function again can be really useful we'll be using that a lot. there's also one more than I want to show you which
is called replace so we can say phrase not replace and in here I can actually give this
two parameters so I can give this replace function two values that it can use.
and the first thing I want to you to give it is what I want to replace so for example I could say giraffe.
and then I'm going to put a comma in here, and I want to put in here what I want to replace draft with so I could just say like
elephant and now instead of saying draff academy this is going to print out elephant academy.
so you can see down here it just says elephant academy so this replace function can be really awesome because we can replace
certain words or even certain letters inside of our springs with other ones. so those are some basic ways that we can work with strings inside of python
and there's a lot of these different functions that we can use with strings. these are some of the most common the ones that I just showed you right now,
but if you just do a google search you can find all sorts of python functions that you can try out in use and you know,
see what they do, but you definitely want to get comfortable working with strings and python because you're going to be working with them
a lot. in this tutorial I wanna talk to you about working with numbers in
python and numbers are one most common data types in python and
any python program you write is most likely going to be dealing with numbers at some point so
I want to talk to you guys about the basics of using numbers we can talk about the different types of numbers that we can represent in python.
and I also want to show you guys some awesome functions that we can use with number so we can do a certain like mathematical operations mechanism
awesome things with numbers I'm going to show you guys all of that in this video it's gonna be awesome so
first thing we can do is we can actually just like print out a number. so if I want to write a number in python it's really easy I basically just write the number so I could say like print
too. and this is just going to print the number two out onto the screen, so I can use a whole number like this I could also use a decimal number so I can say like two point
oh nine eight seven and pythons are gonna be just fine with that we'll be able to print that on
the screen as well. I can also make numbers negative so I could make this two point oh nine
eight seven a negative number and python to be able to handle that just fine too.
in python we can also use basic arithmetic so I could do things like addition subtraction multiplication
fancy like three plus four and now this is going to print this out or was he like three plus
four point five. and this will be able to print out the answer so we get seven point five.
and we can do a dish in we can do subtraction. we can do division or we could do like multiplication as well so you can
pretty much do whatever you want inside of python, and if you want to make more complex mathematical equations we can also use
things to specify order of operations so I could use parentheses. so for example if I said three times four plus five
what python is gonna do is it's gonna multiply three and four together so it's going to be twelve and then we'll add five to that so we should get seventeen.
but let's say that we wanted to change up the order right I could actually put a parentheses around four and five
and now it's going to add them first social ad foreign fighters will get nine and will multiply that times three so we should end up with twenty seven,
so you can see we can use those parentheses to specify order of operations so I could make like a very complex
little equation here and just by using numbers and parentheses. we can also use one other operation which is called the modulates operator so I could say like
ted, and use this percent sign three and this is actually read
ten mod three and basically what this is gonna do is it's going to take the first number
divided by the second number, and it's going to spit out the remainder. so it's basically going to say
ok ten divided by three. that's going to be three with a remainder of one.
so this is going to give us the remainder. and you'll see down here we get one because
that's the remainder of ten divided by three that modulates operator can come in handy quite a bit.
we can also store these numbers inside of variables so we can store them inside of these
variable containers, so I could come over here and I could create a variable called like
my underscored gnome and we'll just store a value of let's say like five and here
is why have you come down here and I can just print out my underscore numb. and we'll be able to print that number out to the screen
just fine. so in addition to doing things like a basic arithmetic we can also
do some other stuff so one thing I could do is I could actually convert this number into a string.
so if I wanted to convert this number into a string I can just say s t r and I can put the number that I want to convert
inside of these parentheses. and so what's going to happen now is this number is going to be converted
into a strings when I click the run button you'll see it's just printing out five but now instead of being a number this is actually a string.
and this is going to come in handy when you want to print out numbers alongside strings,
so I can come over here and I can say like my favorite number,
and we'll be able to print this number along with this string so I click play,
and it's as five my favorite number, if I was to get rid of this string right here
and I wasn't converting the number into a string. now pythons gonna have a problem with this.
it's not going to allow us to do that you can see we get an error so anytime you want to print out a number
next to a string you gotta make sure that you use that little string function. so
there's a bunch of other stuff that we can do with numbers and a lot of times in python you're gonna want to be using specific
metabolic more advanced math operator so there's a bunch of different math functions that we can use on our numbers
and a function is basically just like a little collection of code that does something so a function could perform an operation like a mathematical operation on our number,
we can also give us information about our number, so I'm sure you guys some of the most common functions that you'll be using in python
related to numbers. the first one is called abs and it stands for absolute value so we can get the absolute value
of a number. and so over here I'm going to make this variable negative five
and basically I can just say abs and I can make an open enclosing parentheses over here,
and this is going to give me the absolute value of this number up here, so when I click the play button,
you'll see it's just giving us five because five is the absolute value of negative five,
I can use a few other functions there is another one which is called pau at so it says p o w
and I'm actually not going to use this variable we just as a normal number and this function is going to allow us to pass it
to pieces of information so I can give this function two pieces of information. the first is going to be
like a number. and the second is going to be the power that I want to take that number two so I could say like three
comma two and this is basically just going to be three raised to the power of two,
so it's just going to be three squared so we should get nine down here, you can see that we do,
so I could pass in like you know some crazy number like we could pass in a four and we can raise it to the power of six,
and so we should get like a pretty big number here and you can see we get four thousand ninety six so
this power function is really useful for taking numbers to specific powers. so in addition to using this power function we can also use another function which is called
max. so I can say max. and what this is gonna do is it's basically gonna return
the larger of the two numbers that we pass into it so right now I'm giving this a four and a six
and this should tell us which number is higher so over here it's just pulling out six because that's the bigger number.
I cannot see is another function called men and this is going to do the opposite so now instead of printing out the max number it's going to print out the smallest number.
and it's going to turn out for down here as you can see. another cool function is called the round function
and this is going to allow us to round a number so it's just going to follow like standard rounding rules.
so if I said like three point to inside of here now is going around it down to just normal three
but if I said like three point seven. it's going to round it up to four so that'll allow you to round a number.
so there's a few other functions that I want to show you guys but in order to get access to them I'm actually going to have to do something called
importing and in python we can actually import external code
into our files and so if I want to access these specific math functions.
I have to import something called python math so I can just say from up here math
import and this star and basically what this is gonna do is it's going to
go out and it's going to grab a bunch of different math functions that we can use so I already showed you guys a few of the zipper math functions but there's actually a bunch more.
and in order to access them we're going to need to include this line of code inside of our file. so once we have that now I can access a few other so
is another function which is called the floor method and it's just f l o r and what this will do is it'll basically just grab
the lowest number so it's essentially just going to chop off this decimal point. and you can see over here now
we get a three because we're using that floor function. there's also another one called seal.
and that's just going to do the exact opposite so that's just going around the number up no matter what so no matter what will always get for
which we have a three point whatever here and there's another one which is called square root so it's just asking you our team
and essentially this is just going to return the square root of a number so I can say like thirty six.
and now we should get six back. so those are also very interesting functions and
inside of this math module so we would call this a module and you don't have to worry too much about what that is right now,
just know that when we put this line of code into our program it gives us access to a lot more
math function so though it basically allows us to do a lot more things with math
inside of our program and there's a bunch of different math functions in python and if you why you can basically just go online and search for different math functions.
I showed you guys a few here and I would say the ones that we looked at here are probably the most commonly used but there's a bunch more.
and like I said you know there's tons of documentation on all this stuff so you can just look up your math functions in
python and there's going to be tons and tons like lists of these things that you can use inside of your programs to perform different math
operations, but for now that has been a little bit of by using numbers a little bit about doing it on certain math operations and using functions
with those numbers
in this tutorial I'm going to show you how to get input from the user. so we're basically going to allow a user to
input information into our program. and I'm actually going to take the information that the user inputs.
I'm gonna store it inside of a variable and then we're going to be able to do something with that variable.
so I want to show you guys how we can actually go about getting input from someone. and down here in my python file.
all I have to do to get input from someone is I just have to type out input and then an open and closed
parentheses. and what this is basically going to do is it's going to tell python like hey we want to get
input from a user in python will allow the user to type in some information
and inside of these parentheses we can actually type a prompt and so generally when we want the user to enter in some information
we want to tell them what we want them to enter. and that's what we can put inside of here so I'm just going to say.
enter your name, so we're actually going to create a little python app,
which is going to allow the user to enter in their name and then will store the name inside of a variable and then we'll basically just
say hi to the user so we'll say like high and then whatever the name they entered was
so what I want to do is I actually wanna store whatever the user and put it into our program
inside of a variable. so I can actually go over here and I can create a variable I could just call it name
and I could set this variable equal to input. so what I'm doing now is I'm taking the value that the user inputs
and I'm storing it inside of this variable container called name
and so now I have access to whatever they entered it. so what we can do is we can say
print and inside of the parentheses I can just print out
hello and then I'm just going to add on to this name
and actually want to put an exclamation point. so essentially we're getting a name from the user.
restoring it inside of the named variable and I'm printing it out onto the screen.
so I'm gonna go ahead and play this ? and when we run the program you'll notice down here python is giving us this little problem
so it saying enter your name. now in here I can actually type in of values so I could type in might.
and then I can just hit enter and pythons going to go ahead and store this value inside of that variable
and then it's going to print out hello mike. and so this is kind of cool and actually what we could do is we could
prompt the user to enter in more than one piece of information. so I can actually
copy this line of code. and I'm an pasted below here and why don't we have the user enter in another variable.
so we could have them enter in for example their age. and over here we just want to say enter your
age. so now we're able to get two pieces of information from the user.
and I could say hello name. and then I can say you are
and I'll print out their age so I'm going to print age. so now I'm basically able to get both of these pieces of information
from the user I can get their name and I can get their age so when we run this program.
I can type in both of those pieces of information so as they enter your name. so we could just
make up a name like john and then enter the age that say john is twenty five
and now is going to say hello john you are twenty five. so the program is able to get input from the user and then it's
able to use that information in order to say hi to the user and tell them how old they are,
so getting input from the user is a great way to make your programs more interactive and
here we're just scratching the surface right word just basically getting to know a piece of information from the user but
you can use these inputs to do awesome things in python and as we go through this course.
you're going to see some really cool things that we can do with these inputs
in this tutorial I'm going to show you how to build a very basic calculator in python.
we're basically going to build a calculator where we'll get to numbers from a user, and then we'll add those numbers together and print the answer out onto the screen.
so this will give us some practice in getting input from users and we'll also talk about getting numbers from users as opposed to just
strings. so I'm really excited to get started on this calculator. the first thing we want to do is
create two variables and inside of those variables we want to store the two numbers that the user wants to add together
so down here, I'm just going to say, number one, and that's what we'll call our first variable
is equal to. and now I need to get input from the user so I'm going to say. input
and inside these parentheses I'm going to say. enter a number,
and now I basically want to do the same exact thing but for the second number,
so we'll piece this guy down here, and I'm just going to say gnome two
and then we'll just say enter another number. so now we're able to store the user's input
inside of these two variables. so now all I want to do is just print out the results so
I'm actually going to create a variable called result somebody's going to say a result is equal to
and basically we just want to add these two numbers together something as a number one plus numb too.
and now all we have to do is print out the results I'm just going to print result
so we basically have our entire program written out here and this will allow us to enter in two numbers and then we'll add them together and print out the answer
so I could play. and down here we can enter our number, so I'm gonna enter the first number we'll say five,
and I'm going to enter my second number so let's say eight point zero
or else a point three it's now should print out the answer, but
if you look over here. that's not quite the answer we were looking for at five plus
eight point three is definitely not fifty eight points three and here's what happened
when we get input from a user by default. python is just going to convert
it into a string, so it doesn't matter what we put down their when we're entering the numbers
python's always is going to be like. ok this is a string that's it sounds good right ?
it's just going to make it a string in order for us to make these number one and number two variables numbers,
we're actually going to have to convert the strings that we get from the user into numbers,
and so the way that we can do that is by basically just coming over here and when we add the two numbers together
I can use a special python function in order to convert those strings
into numbers. and there's actually two python functions that we could use for this.
the first is called int so I could say I auntie. I can make an open parentheses and I can make a close parentheses
and basically what this is gonna do is it's going to convert whatever is inside of these open or close parentheses
into an integer number, and an integer number is basically a whole number so it's like one two three four or five so it's a,
it's a whole number another word that can't have a decimal point, so what I could do is I could say
I n t, and I could put these inside of parentheses. and now what this is gonna do is it's going to convert both of these numbers into
integers in other words into whole numbers that don't have decimals, and it's going to add them together and will print out the result so why don't we do that
we'll just see if this works I'm gonna click the play button and down here we'll enter our first number sums can enter into four
and then I'll answer in a five and now you can see it's printing out the correct answer four plus
five and so that's essentially our basic calculator. but we do have one
problem with this calculator salmon run it again and I'll show you guys with that problem is if I wanted to add in
a decimal number so we'll add four point three and five point five.
you'll see that we're getting this error. and that's because I'm using this ain't
function of here and this int function is looking for a whole number. so if
I put decimal numbers inside of there it's going to break the programs. there's another function we can use
instead of an n we can say float and a float is basically just a number that has decimal so it's a decimal number
so I can convert both of these guys into floats and now I'll be able to use decimal number so I can click play.
and I can just enter into number so I could say like four and I could also say like five point five.
and now it's going to be able to add both of those numbers. even if one of them is a decimal and that's the beauty of using that little float function so
in certain circumstances you might want the user to only be able to enter into an integer to a whole number.
but in a lot of cases like in this calculator. we want them to be able to answer any number that they want so we're going to use this flow
function. so I'm just going to recap what we did one more time we created two variables number one and number two
and we basically stored the two numbers that the user's implanted into those variables,
then we converted them into numbers and weed out of them together and we printed out the results so
this is a pretty cool calculator, i'm happy with it. hopefully you guys learned something. and as we go forward in this python course you're going to learn all sorts of ways that we can make this calculator more complex
in this tutorial I wanna show you guys how to build a mad libs game in python,
so a mad libs game is basically just a game where you can enter in a bunch of random words so like
you know verbs nouns names colors and you basically take all of those words and
put them into a story randomly so over here I had my web browser I just have
an example of a mad libs so you know down here were basically just taking random words like an adjective or a noun or a pronoun
and entering them in sort of a story so like you read through the story than like some random word pops up in
mad libs can be pretty fun and I'm sure yeah he's heard of mad libs before, but if not, now it is a little introduction.
so I want to create a mad libs in python and this is going to be really cool so down here I have this, like,
a little poem which says: roses are red \ violets are blue \ I love you. and so y'know, this is a compelling classic poem
but I think we should mix it up a little bit and create a mad lib for this poem.
and so instead of having this red colour over here, I want to have the user answer in
their own color instead of having violets, why don't we have them answer in
a plural noun. and instead of saying "I love you" why don't we have them say "I love --" and then some celebrity
so celebrity. so this is the basic structure for our little madlib. right; it wants you basically have the user answering a color
enter in a plural noun. an answer in a celebrity, and I'll take all of those words and
put them inside of our madlib and hopefully we end up with something that's pretty funny. so how can we actually go about building this in python well
the first thing we're going to have to do is we're going to have to be able to get these words from the user right that's pretty obvious.
so I think what we should do as we should create three variables called color plural noun in celebrity
and will store the user's inputs. inside of those variables.
so up here let's create those variables the first very well I'm going to create is going to be called color so it's a color.
and I want to set this equal to the inputs are going to say input and inside of here I was going to give them a prompts all say answer a
color. and we can basically just copy this line of code. and
I'm going to paste it down below and we'll paste one more time. so now we're going to create our plural noun
very also I'll say peoria pluralism now and want to say answer a
plural now and actually over here I want a meager coal as well.
so then finally we'll create our celebrity variables they enter a
celebrity and so now basically we're creating three variables called color plural noun in celebrity
and inside of them were storing the color that the user enters the plural noun the user enters and the celebrity these adventures.
so the last thing we have to do is replace these guys with those variables so
I'm basically just going to add in the colour over here and we're going to add in the plural noun
so I can just go like this.
and finally what is adding that celebrity.
so now we have a prequel mallet and it should be functional everything should work it looks like it's
good to go so let's come over here and we'll run our program and then down here in the council.
we can play are a little mad libs games so they enter a color I'm just going to say. magenta
enter a plural now when we say, microwaves
and enter a celebrity you at say Tom Hanks. so when I click enter what should happen is we should get our mad libs
printed out some good enter and now we have our methods was as roses are magenta
microwaves are blue I love Tom Hanks. so it's a pretty good madlib
and obviously you know, the more, the more print statements we put over here you know the better the madlib could be and we could store as many, y'know, variables up here as we wanted.
this was just a very simple madlib we only took in three inputs but you know you could see how you could take something like this and create a little mad libs game so
your homework for this lesson is to go off and make your own madlib game hopefully one that's a little bit funnier than mine.
but that's the basics of creating a mad libs game in python
in this tutorial on its artsy guys about working with lists in python. a lot of times when you're programming in python you're going to be dealing with large amounts of data,
and when you're dealing with large amounts of data you want to make sure that you can manage it and organize it properly,
and the list is essentially just a structure that we can use inside of python to store the lists of information so we can take
a bunch of different data values we can put them inside a list and it allows us to organize them and keep track of them
a lot easier. so generally you would create a python less than you would put a bunch of
related values inside of that list and then you can use it throughout your program so I'm actually eyes are just the basics of using lists we're going to look at some of the common use cases and
really just get you up to speed with what lists are and why they're useful so over here in my program
I'm actually going to create a list and we create a list a lot might we create a python
it's like a normal python variable so the first thing we want to do and we're making a list is give it
a name so we want to give it a descriptive name something that's going to basically describe what's inside the list
in my case for this example let's make a list of like friends so we could say here's a list of all my friends so I can say
friends and I'm going to set this equal to the list of values that represent my friends
and we want to create a list we can use these opening closed square brackets.
so whenever you use these open and closed square brackets python basically nose okay they want to store a bunch of values
inside of this list. so why don't we go ahead and start adding some values so we can say like my friends are like
tavern, karen and say jim.
so here I have three values inside of my friend's array.
so when we're creating a normal variable in python generally we just give it one value
right now to create a variable I would give it one value may be a string or a number or a boolean.
but when we make lists were able to store multiple values inside of the same like
little item inside of the same object right and then what I can do is I can access these individual items
inside of my program so inside of this friends list were basically storing
all of these different values and that can be really useful so now that we've stored some values let's talk about what you can put
inside of a list so you can really put any piece of information in python we could put things like
strings, numbers, or booleans so if I wanted instead of just putting strings here I could change like one of these to a number
and I could change one of these to a boolean and wouldn't matter python's going to be fine with that.
let's change it back to strings just for the sake of the example so now that we've created our list
how can we access individual elements inside of this list it's a good question.
I'm going to go ahead and print something out to the screen. the first thing we can do is we can just print out the actual list so
I can just say print friends and then when I run this program. if we look down here in the console you can see it's just
printing out the actual list of friends right, but let's say that I wanted to print out a specific
element inside of this list where I can actually refer to elements by their
index so each one of the elements inside of this list has a particular index
and the index is actually started zero so we would say that this first element in the list kevin
has an index of zero, we would say that this other element karen has an index of one.
and this third element jim would have an index of two. so even though jim is technically the third element
inside of the list. it has an index of two and that's because we start indexing at index position
one. and so that is kind of how this work and that's how list indexes work so
if I wanted to access a specific element inside of my friends list. I can just referred to it by its
index. so over here after which I bought friends I'm just going to tape an open and closed square bracket,
and inside this open and close square bracket I want to put the index of the element inside the list
that I want to access so fallen to access this guy right here this element. I can just put a zero.
so I can say friends zero. and now when I run my program, it's just going to print out that value it's just going to pronounce
cabin, if only to access this gem value over here I can put a two
and that will give us that jim value you can see right there, so we can access elements
based off of their index we can also access elements based off of their index
from the back of the list so for example if I said negative one inside of here,
this is going to give me access to this value right here for jim. and you can see that's what it does so when we use negatives it starts indexing from the back of the list so if I start at negative two,
this is going to give us karen so you can use the negatives to access items at the back of the list.
just keep in mind though and this is kind of an interesting we said we would say this first element here is index position zero
right but we would say the first element at the back of the list is index position negative one so
just keep that in mind. so there's actually other ways that we can access like just portions of this list so for example,
let's say I just wanted to select the last two elements in this list and I didn't want us like the first one
will in here I can just say one with a colon, and this will grab the element at index position one and
all of the elements after that so now we should describe jim and karen
or carrying gym in that order. I could also specify a range. so actually let me out in a couple other elements,
just so that we can illustrate this better. so are in two more names. so if I wanted to I could select like
the element and exposition one up to the element at index position three so
it's going to grab this one says one, two and it's actually not going to grab the third one so it's it's going to grab all the elements
up to but not including three so it'll grab karen and jim,
let's go ahead and run this and you can see it grabs canon japan so you can either just put like one with a colon after it and it'll grab that
in exposition in everything after it or even specify like arrange that you want to grab from. so that's how we can access
elements inside of this list but we can also a modify elements so for example I could come down here.
let's say I want to modify this value right here karen we'll all you have to do is just access that elements I could say
friends and karen is that at position of one and I could change this to whatever I want so I could say friends
in that position one is equal to mike ? and now when we print out friends and at position one
that value is going to be updated so it's just going to say mike instead of saying karen
so it can be really useful to modify values inside of arrays so it can be really useful to modify values inside of python lists.
so those are kind of the basics of working with lists in python and actually in the next tutorial monastery guys
even more ways that we can use these less we're going to learn how to link add elements to a less delete elements from a less
copy lists and a bunch of cool stuff with these lists but for now this has just been sort of like
the basics of working with lists
in this tutorial I wanna talk to you guys about using functions with lists in python,
and python a list is one of the most important structures where we can store our information.
a list basically allows you to take a bunch of different values and organize them and store them inside of their own little list
structure so down here my program you can see I have two less I have a list of lucky numbers.
and this is just a bunch of different numbers, and then I have a list of friends so this could be like a list of somebody's friends
and it's basically just a bunch of strings with names in them. so these two lists are storing a bunch of different values and
what makes this awesome is not only can I store like this many values I mean I could store hundreds or thousands or millions of values.
and when you're working with a lot of data and a lot of information and python bees lists are invaluable.
so because lists are so important there's actually a bunch of different functions that we can use with lists
and those functions allow us to do things like modify the lists and get information about the list so
in this tutorial I just want to show you a bunch of those functions we're going to talk about some of the most common and the most popular functions
that you would use on lists to make them more powerful and make them more easy to use.
so the first thing we can do is obviously just print out a list so down here I'm printing out this
friends list when a warm and when I run my program, you see down here we're just
printing out all the elements in the list so it's always good to be able to print out all the elements inside of a list,
but there's a lot of other functions that we can use so one function is called the extend function in the extend function will basically allow you to take a list
and append another list onto the end of it so I could say like friends
dot extend and inside of these parentheses I can pass in the list
that I wanted to add onto the friends list. so I could say like lucky numbers.
and now when I print out this friends list. not only is it going to have all the elements in the friends list
it's also going to have all the elements inside the lucky numbers list you can see down here we have all our friends,
and we also have the numbers overhears that's a really easy way to essentially just like add two lists together.
we can also just add individual elements onto a list so I come down here and I could say friends
dot append and this will actually allow me to append another item
onto the end of this list, so over here I could just add another name so we could say
creed for example and now I'm like adding another friend onto the end of this list so when I run the program.
in addition to having the original items that were in the list up here. we also have this additional item at the end
and not a pen function is always going to add the item onto the end of the list, but let's say that you wanted to add an item into the middle of the list so like right here right here,
there's another list function called insert and insert is going to take
two parameters the first parameter is going to be the index where you want to insert the item so
why don't we insert it here at index position one. I'm just going to say one and then I'm going to type in the name of the element that I want to add so
we can just say like kelly, and now at index position one we're going to have
the volume kelly and all of these other values are going to get pushed up they're going to get pushed to the right
one index position so now I run the program, you can see we have kavin this new element
kelly and then all the other elements have been pushed off to the right, we can also remove elements
so for example let's say I wanted to remove this jim value. all I have to do is just a friend's dot remove.
and I can just typing whatever element I want to remove so I want to remove this jim element
is a now when we run the program jim is going to be gone from the list and we just have these
four guys left. you can also remove all of the elements from the list so if I just wanted to
completely like reset the less than get rid of everything I could just say friends thought clear.
and this is going to give us an empty list so get rid of every single element inside the list.
there's also another really cool nothing which is called pop and you can just take out pop like that
and basically what pops is gonna do is it's going to pop an item off of this list so when I click the play button,
you'll see here that we're left with kevin karen jim and oscar so
we basically got rid of the last element inside the list and that's what pop does it pops an element
off of the lists of easily removes the last element in the list. so we have our list but let's say that we wanted to figure out
if a certain element was in this list right if a certain value is in here so let's say I wanted to check to see if
my friend kevin was in this list. why could say friends dot index
and in here I can just pass a value so I can say like kevin.
and this is going to tell me the index of caverns are the tell me if cabins in the list,
so I could play you can see down here it says zero if I was to say like oscar and here for example
now would give me the index of oscar. so that's it three but if I put a name that wasn't in here so like
if I put mike doth not in the list. and so now we're going to get back an error because it's as
mike is not in the list so that's an easy ways you figure out if a specific element inside of the list.
and if it is, then you know what index its app, you can also count the number of similar elements in the list so
I'm actually going to come down here copy this gem element and will add another jim element into here
so I could come down here and I could say friends dot count and
will pass in jim and this will tell me how many times the value jim shows up
inside of this list. so it should say to which it does down there because
we have two values with the text jim and so we have all these values we could also sort this list so
I could come over here and I could say friends.sort() and what this will do is it'll sort the list
in ascending order so we have a bunch of text here and you'll see what it does.
basically what it's going to do is it's gonna put it in alphabetical order are so you see we have j k
o and t so the list went from being just random order like whatever we have up here to now it's in alphabetical order.
and that's also going to work for lucky numbers so I could say late lucky numbers
dot sort and then we'll turn out lucky numbers and they should now be in ascending order,
which I'm realizing they already are up here but if I was to take this forty two and
put it down here. now it will figure everything out and put it in ascending order anyway.
we can also reverse a list so if I wanted I could reverse this not lucky numbers list I could say
lucky numbers dot reverse. and now when we printed out instead of being forty to eight fifteen sixteen twenty three.
it's going to be twenty three sixteen fifteen eight forty two, so it's basically just reverse the order of
the list. and finally there's one more or less functional monetary eyes which is copy.
so I can actually create another list. and I could make it as a copy so I could say like
friends 2. and we could set this equal to friends dot copy
and now friends too is going to have all the same attributes as friends,
because it's basically just like copy it basically took a copy of that friends list so
you can see it's the same exact thing and copying lists can come in handy in a lot of different situation so
those are just some basic list functions and just to kind of like you know get your feet wet in working with lists
obviously like the more you work with them the more you practice using these different functions the more comfortable you're going to
get. but that's just kind of like a basic overview of what you can do
in a sartorial talk to you guys bought tuples in python. now a tupel is a type
of data structure which basically means it's a container where we can store
different values. now if you're familiar with lists in python a tupel is actually very similar to a list.
it's basically a structure where we can store multiple pieces of information, but
a tupel has a few key differences from lists that we're going to talk about in
this tutorial. first thing I want to do is I want to show you though how to create a tupel.
so I can come down here and I can create a tupel and one of the most common
examples of tupels his coordinates. so let's say I had a series of like x y coordinates I could create a variable
called coordinates and I'm gonna set this equal to an open and close parentheses,
and whenever we want to create a tupel inside of python we're going to use these open closed parentheses
and inside of here inside these proceeds we're gonna put the values that we want to store
so I could for example put a list of numbers, so this could be like my coordinates I could have like four and five.
so this would be my tuple with coordinates inside of it. and one of the things about tuples that makes them unique
is a tuple is immutable, and you'll hear that word a lot when we're talking about tuples
immutable it basically means that the tuple can't be changed or modified. once we create our tuple up here.
you cannot modify it cannot change it you can't add elements to it you can't erase elements from it you can't
change any of the elements inside the tuple. what you see is what you get once you create the tuple its
it does it as it can't change so I can come down here and I can print out some of the
attributes inside the tuple. and the way I can access them is just by using an
open and closed square bracket. and in here I can pass in a index
so troubles are indexed starting at zero so technically we would say that four is at index position one
and for -- sorry it is in position zero and five of them is at index position one, so if I said
coordinate zero now it should print out four
and down here we're printing out four. so if I wanted to print out that five we can just put a one inside of those square brackets
and now we'll print out that five so I can access the elements inside of a tuple I can
easily access is at each entry. but if I was to come over here and try to change
one of the elements so if I said coordinates and coordinate one and I tried to set it equal to something else like
ten python's actually going to give us an error when we run this programs often run the program.
you see we get this error it says type air tuple object does not support
item assignment because it's immutable because we can't change it so
that's basically what tuples are how we can create them and you know a couple like I said it's very simple you just created and then you have,
um. and now I want to talk to you guys about a common topic in python which is the difference between
tuples and lists. so remember a list is basically doing the same thing
a list. if one is to create a less we would just use square brackets instead of those parentheses. and if I was using a list
I could assign different values to it I could, I could basically mutate any of the elements I could add delete
modify change whatever I wanted with the list, but with a tuple. we can't do that and that's
sort of the basic difference and really python doesn't say anything more than that it basically just says like one of them's immutable one of them's not
but in practical use cases generally people will use tuples for data that's never going to change
so you'll steal stored dna inside of a tuple when that data doesn't need to be mutated that's why something like coordinates
is such a good candidate for a couple because once you have coordinates like we're probably not going to modify them right,
we might add other coordinates. so for example if I wanted I could create a list of tunnels.
so I can say like four five six seven, maybe we have some other coordinates like
eighty thirty four. so here I have in uh I have a list
and inside of it we have these tunnels. but remember these topples can't be modified the values can't be changed so
really it's just a case by case basis I would say by a huge majority. you're going to be using lists most of the time.
topples or more of a niche you know they're using more special situations.
but there are plenty of situations where you want to use tuples so if you're in a situation where you want to store data that can't be changed or mutated
then tuples are the way to go to <...> some basics about tuples some basics about the difference between
lists and tuples and so a tuple is a great thing to add in c or python repertoire
in this tutorial I wanna talk to you guys are by using functions in python. a function is basically just
a collection of code, which performs a specific task so I can take
a bunch of lines of code that are basically doing one thing I could put them inside of a function.
and then when I wanted to do that task or do that one thing that the function was doing,
I can just call the function and so functions really help you to organize your code a lot better they allow you to kind of
break up your code into different you know little chunks that are doing different things and
they're really just awesome so functions are like a very core concept when we're talking about programming in python,
so i'll show how to create an awesome function today let's say for the purposes of this tutorial we want to create a function
that says "hi" to the user so the one task that our function performs as basically just saying hi to
whoever is writing the program so over here, if I want to write a function the first thing I have to use
is a keyword in python it's called "def" of d e f and
basically when python sees this keyword it's going to say okay this person wants to use a function.
so after we type out "def" we need to give this function a name, so just like when we
are creating variables we give them descriptive names. we also want to do the same thing with functions.
so if I'm creating a function I can just give it a specific name which basically says like what it's doing so
we're going to create a function that says hi so I'm just gonna call this function, say hi,
just like that. and once we type out the name of the function and so also I could type out say high with no
underscore or I could type out say high with an underscore. both are considered like
good practices and python and a lot of times if you just have a simple like two word function like this
you don't need to put an underscore but we can put an underscore there if we wanted. after we type out the name of the function
I'm just going to type into open and closed parentheses. and then I'm going to type a colon
and basically what this is doing is it saying to python lake or eye all the code that comes after this line
is going to be inside of our function. and in order to write code that's going to end up being inside the function we actually have to
indent it sold over here. you'll notice that when I clicked enter my text editor automatically
indented attacks so it's automatically like using this indent here
and that having one of the rules and python is like the code that goes inside of this function
needs to be indented. so if I was to write some code like out here, this is no longer going to be considered inside the function so you can see
as I type out code and obviously this isn't real code but as I type text over here that's invented
this little like marker over here is basically saying like oh yeah that's inside the function.
but then when I write code over here that is like not at the same indentation level as this stuff.
it's no longer considering it inside the function so that is a little thing any code inside this function needs to be indented
right so our function is just going to say hi to the user so I'm going to have it print out
some text it's going to say hello. user. so this is a very simple function obviously we just have one line of code and
inside of a function you could have you know as many lines of code as you want but for our purposes we only need one line in order to perform our function.
so now all we have to do is call this function so if I want to execute the code inside of this function I have to do something
called calling it so if I was to just run my program as it is right now, I'm just gonna run it,
you'll see that nothing happens over here right ? even though this function is printing out hello user when I run the program
it's not doing it, and that's because of the code inside of a function isn't going to get executed
by default. the code inside of a function is only going to get executed when we specify that we want to execute it.
and in order to do that we're going to have to do something called calling the function so in order to call a function,
you basically just type out the functions name and those open a close parentheses. so I'm just gonna type out
say hi and opening close parentheses. and now when we are, when we run this program again,
you'll see that it prints out hello user so were executing the code inside of the function.
and I want to show you guys just one more thing here just talking to you guys about how these functions actively work so
up here I'm going to print top and then down here I'm going to print bottom.
so I wanna show you guys the flow of these functions inside the program so when I run this program
you'll see we print out top hello user and then bada.
so essentially what's happening is when python goes through and executes this program,
it goes over here to this first line it says ok we want to print out the word top
and then it goes down here and it says ok we want to execute the say high function so python actually jumps
up and it goes over this say high function, and it's going to execute all of the code
inside of this function so it's going to go through execute all this code. and then once it's done executing all the code and the function,
it's going to jump back down here and it's going to move onto the next line which is bottom so that's how like the flow of functions,
again with functions generally when we're naming these functions and you want them to be named
in all lower case, and usually when we're naming stuff in python if there's two or more words we're going to use an
under space or an underscore in between them. so I can write this out as say under score high.
but in a lot of situations though if I have a function like this where the name is really short and might just be easier to leave it
without an underscore but why we've spent on scoring now just to be a super python official.
all right so now we can actually make these functions a little bit more powerful and what we can do is we can give them information.
so a lot of times when we write a function we're going to want to have additional information that gets passed in.
and these are called parameters so a parameter is a piece of information that we give to
the function, so over here I can actually specify that this function needs to receive some parameters so I can basically say like
hey if you're gonna call this function, you need to give us some information, you need to give us some parameters
and all I have to do to do that has just type out the name of the parameter that I want to receive so why don't we allow the
code calling this function to tell it what name to say hi to up here I can just say name
and basically what this means is it means whenever I call this say high function we have to give it a name.
so down here if I was to call this I have to include a name in here so I can say like
mike. and what we can do now is we can actually access this parameter or this variable
inside of our function so I could come over here and instead of saying hello user. I could say hello
name and basically what this is gonna do is it's just going to say hello to whatever name got passed in here
so I'm actually gonna copy this and we will do this twice also hello my kilo
steve and now when I run this program you'll see that
instead of just saying hello user it saying hello to whichever name I passed in to the function.
so that's why this can be really useful right we can give the function information and depending on the information we give it
it'll performance task a little bit differently. I could also include more than one parameter so you can I mean
technically you could have as many parameters as you want so I can put another one in here would say age.
and now I'm going to have to pass in an age along with these, so I'm just going to pass in
age and passing an age for down here, and I'm just going to pass in
strings, so we can say hello name
you are age so I'm passing in two pieces of information.
now when we run this program is going to call the function, and it's going to use both of those pieces of information so it's a healthy
like you are thirty five hello steve you are seventy. so essentially you
were writing out this one line of code which just prints out like hello to someone
and were allowing this function to receive two parameter so the name in the age
and depending on the name in the age, the function is going to print out hello a little bit differently.
that's kind of the beauty of using function so you could pass anything you want into a function so for example,
I could pass in a integer. instead of a string for the age. so like I could pass in a number.
the only differences over here we're going to have to convert this into a string, but it's going to work.
just the same, so you can pass in alm strings numbers bullion's
arrays you can really pass any type of data into a function and it's going to work
so you can see here we get the same result. so that's the basics of functions and as you go through on
with python you're gonna you know being functions more and more, and generally it's a good idea to break your code up into different functions so whenever you have like a grouping of code
that's designed to perform a specific task. that's usually a good candidate to be put inside of a function
in this tutorial I wanna talk to you guys about using the return statement in python, functions
and other python function is basically just a collection of python code that performs a specific task.
and when we want to perform that task in our python programs we can call a python function
and a lot of times when we're calling a python function we just gonna call it and it does its thing and then we move on with the program.
but sometimes when we call a function we're actually going to want to get information back
from that function. so when I call the function I want to basically executes task I wanted to execute all the code
and then I wanted to like give me some information back so that can be like a particular value.
it could be something like telling me how the task went basically the function can just communicate back to us like hey,
here's some information. and that's what the return keyword can allow us to do the return keyword can basically allow
python two return information from a function. so I'm gonna show you guys how we can
do this I want to create a very simple function. and it's just going to cube a number so when we cuba number we take it to the power of three so if I was going to cuba like to
be like two raised to the power of three right it's just pretty basic math.
so we're gonna make a function that will cuban number and I'll show you guys how we can use that return statement
so first thing we want to do is make a function. I'm just going to say death q,
we'll call the country the function cube. and over here we can specify any parameters that this function will take.
so basically any values that we want to give this function so we're going to give it one function which is just going to be
a number so I'm just going to call it numb. and then over here I'm going to type out a colon
and then down here, we can put any of the code that we want to be included in this function.
so basically this function is just going to keep this number so we could just take out numb
times numb times numb right that's going to give us numb cubed.
so that's all well and good. and if I come down here I can execute this function so I can basically just call it as a cube.
and why don't we pass it a three. so I'm going to go ahead and pass it to three and I'm going to save this.
and now let's go ahead and run this code, so we're on the code
and you'll see down here. nothing happened right so nothing got printed out
in our program facts when we call this cube function it didn't really do anything,
so let me try to print this out so immediately prentice function out it'll give us back the information that we want so
what about print and will print out the value of the function I'm terrific play
we look down here it says none. so when I printed out the value of this function it told me none
but really this function is supposed to be q being the number. and here's how we can use the return statement and python
I can come over here and I can just say return and now python is going to return whatever value we put over here to the right.
so when I call this cube function and I give it a three python's going to go off it's going to execute this function
when it sees this return statement it's going to say okay, I want to give a value back to whatever call of this function.
and it's going to return this value. now when I print out cube three
it should print out the answer because we get an answer back so when I play this
you'll see down here, says twenty seven so we got the correct answer.
so I can do this with anything wantonly cube like for something as an hour on this
and you can see we're constantly getting the correct answer back so that's the basics of using this return statement it allows us to return a value back to
the caller in other words back to whatever's calling the function. so I just wanna illustrate this point a little bit further I'm going to go up here I'm actually going to create a variable
so I'm gonna create a variable called result and I'm just going to set it equal to cube
for this variable result is going to store the value that gets returned
from the cube function since it's not in a store like cube for its going to store the value that gets returned from executing that function.
so now if I came down here and printed out result. it's actually just going to turn out sixty four again because
that's the value that it's storing so this return statement can be really useful for like getting information back from a function,
we can use something like a parameter. I guess for as a parameter. we can give information to a function
and then we can use the return statement to get information back from a function.
and I do I just want to point out one more thing I'm actually not able to put any code.
after this return statements so if I came down here and try to put like a prince statement. this actually isn't going to work so
this is never going to get printed out so if I just typed out like code right here when we run this program.
it's not going to type out code does because when I used this return keyword,
it breaks us out of the function so python's going to go through it's going to execute the code
in the function whenever it sees this return keyword. it's just going to break back out and we're going to be done so we'll never be able to reach
this line of code. so that's the basics of using return statements and you can return
any data type you want we could easily return like a string or boolean or an array.
it doesn't really matter you can return whatever you want. and a lot of times in a lot of situations you're going to want to get a value back from
a function in this tutorial I wanna talk to you guys about using
if statements in python. now if statements are a special structure in python
where we can actually help our programs to make decisions. so by using an if statement
I could execute certain code when certain conditions are true, and I could execute other code when
other conditions are true. so basically if statements allow our programs to respond
to the input that they are given so depending on the data that we're using in the program
are programs will be able to respond so when certain data is certain values we can do certain things
and when other data is, other values you can do other things so you know your programs are essentially
becoming a lot smarter and actually if statements are things that we as human beings deal with every day so
you know as you go throughout your day generally you're dealing with if statements all the time so I want to kind of
give you guys a brief introduction into if statements and we'll talk about some of the common if statements that you'd see in everyday life.
and now we'll go ahead and do a really awesome example of the kind of like sure yeah what if statements can do for us.
so over here in my text editor I just have this little text file and in here I wrote out a bunch of
if statements that a lot of people will encounter on a daily basis so here's the first one it says I wake up
if I'm hungry. I eat breakfast. so let's break this down a little bit up here it says
if I'm hungry. and this is a condition. right this is either going to be true
or it's going to be false, right if it's true, I'm going to go ahead and
eat breakfast right if it's false under skin to skip whatever was in here and move on,
writes that the basics of an if statement. we have a condition in this case if I'm hungry.
if the condition is true, then we do the action so we eat breakfast. otherwise we just skip it.
so down here we have another one. it says I leave my house. if it's cloudy.
I bring an umbrella. otherwise I bring sunglasses. and so this one is a little bit more complex than the one we just looked at you'll see we have our condition right says
if it's cloudy. if that conditions true we're going to bring the umbrella. but
in this case if the conditions false there is something else that we want to do so in the case of here if this condition was false we just moved on.
but now if this conditions false then we're gonna go ahead and bring sunglasses so
that's another example of an if statement it's a little bit more complex. finally I have one more down here and this one's even more complex it says I'm at a restaurant.
if I want me. I order a steak. so if this conditions true we order the steak,
but if this condition is false, then we're going to move on and we're actually going to check another condition.
so I'm gonna say otherwise if I want pasta. I order spaghetti and meatballs.
this is another condition. if this condition is true we get the spaghetti, if it's not true
then finally we're going to move on down here and which is default to ordering the salad so
all three of these if statements are valid if statements it's just they get more and more complex as we go down the list
so hopefully that's you know kind of wrap your head around what if statements are we're basically specifying conditions.
if those conditions are true we're going to do certain things and those conditions are false we can do
other things. or we can check other conditions aren't so let's head over to our python file and we'll start writing some actual python.
so in here in my app dot python file. I want to create an if statement and I'm going to show you guys a very basic if statement in this tutorial.
and then in the next victoria we're going to look at some more advanced if statements. so what I want to do is create
a bully invariable. so I'm gonna create a boolean variable that's going to store whether or not the user is a male.
so it's just going to be called is underscored mail and I'm gonna set this equal to true
because I'm a male. so we have this boolean variable right and right now we haven't set equal to true.
I can actually use an if statement to check to see what the value of this variable is and if it's true I can do something so
if I want to use an if statement all I have to do is just type up if. and then I just need to type out
a condition. so basically I would have to type out like something that's going to be true or false
like for example in the other page we are specifying like if I'm hungry or if it's cloudy.
here we're just going to check to see if is male. so in other words if the person is male.
so remember this has to be a lake it has to be able to be reducible to a true or false value.
so in our case where it is using a boolean because that's like the easiest thing we can do. so
I said if I specify my true or false condition. now I'm just type a colon.
and what I want to do now is make a new line. and so anything that I put below this with an indentation
is actually going to be executed when that conditions true so I could put print
and down here I can just put you are a male. and now you'll see what happens when I run this program.
it's going to go down here and it's going to say you are a male. but if I changed his mail to false
so instead of this being true I'd just change it to false. now all of a sudden it's not going to print anything.
so it's just going to be blank down here. that's because this condition wasn't true.
so anything that I put below this if declaration and that has an indentation like that
is going to be executed when the if statement is true. we can also use another keyword in
python which is called else and alice is basically going to be like otherwise so you remember,
before we said if it's cloudy. I'll bring an umbrella, otherwise
I'll bring sunglasses well this is going to be like our otherwise so I can say down here. else
and now anything that I've put below else is going to get printed out when that condition isn't sure
so long we just put you are not a male. so now we're able to cover both of these situations for this variable.
if it's false we can cover that situation. so it says you are not a male. if it's true
we can cover that situation as well so it'll say you are a male, so that's pretty cool.
but we can also make these more complex and actually before I talk about that you can put as much code as you want inside an if statement so I could have like
dozens of lines of code if I wanted. I'm just giving you guys are very simple example so
why don't we make this more complex and I'm gonna add another variable into the mix
so I'm going to add another you know boolean attribute into this mix. I'm going to make another variable called
is tall and we're gonna set this equal to true as well. so now I have
two variables in the mix. let's say I wanted to write an if statement that will check both of those variables.
so I could write an if statement that's like if their mail and their tall or if they're male and they're not taller
if they're not mail in their tall like I can write out a bunch of if statements to check
the combination of these variables and so the way I can do that is by using one of
two key words so the first keyword I want to show you guys is the or keyword.
so I can come over here and I could say if is male or is
underscore tall. and what this is basically going to do is it's going to say if the person is either male
or if their tall, then we want to do something so
this is only going to be true when one of these values is true when one or both of those values is true
so down here we can actually put instead of you are a male we could put you are a male
or tall or both that's going to be more appropriate. and then down here we would say you are
neither male nor tall and that's because if we execute the code inside of this else
that means that both of these guys are false rates I'm saying if they're male or their tall,
we're going to execute whatever isn't here otherwise that means they're neither male nor tall we're just going to execute this down here so
misery as how this works all click play. and these are both true so it's going to say you are a male or tall or both.
if I was to set one of these to false so let's set his male eagle false.
now, it's still going to say you are a male or tall or both. but if I set them both equal to false.
now it's going to say you're neither male nor tall. so that's how the basics
of using the or operator. and there's another operator we can use which is called and
and basically a similar to or accept both of these conditions have to be true so
this is basically saying if the person is male, and they're also tall,
then we're going to execute whatever's in here so we could actually change this text to say you are
a tall now because we know for a fact that if this is getting executed that are both male and tall.
we can also change this print statement down here, this could say you are
either not mail or not tall, or both. so
you can see it's basically just saying that you're either not one of them or you're not both of them so
we could the play button and you'll see because they're both false it's going to say you are either not mail or not tall or both.
but if I make them both true, now it's going to say you are a tall male.
if I was going to make one of these faster so let's make is tall false. now it's not going to execute this first print statement it's going to execute the one inside of the else,
so to say you are either not mail are not tolerable. so that's the basics of
and and or and you know you'll be using those a lot of them as you use your if statements, but there's actually one more
thing we can do we can add in some more conditions so up here I'm checking if their mail and their tall,
but what if I wanted to check if their mail and they're not tall so they're like a short male
I can use another keyword in python called else f or really it's just typed out
yes I am, and it stands for lcds. and after this we can put another condition so
over here I'm going to check to see if their male and they're not tall, so I'm gonna say else if
mayor ismail, and now I can type in not tall.
and the way I can do that is by saying not an open and close parentheses and saying is tall
and basically when I use this not function, it's going to negate whatever is inside of here so if this was true,
it's going to make it false and if this was false it's going to make it true. so basically that'll tell us whether or not their tall
and that I'm going to use a colon and now down here inside of here were basically just going to type out any of the code that we want to happen
when this condition is true so down here we can just print out
you are a short male, and there's actually one more condition that we want to check for which would be if they're not mail and their tall,
so we can make one more lcs. and I'm actually just gonna copy this guy
and we'll paste it down here. so I want to say, if
not, is male and his tall,
so now we're checking to see if their mail and are either not now and their tall so here we could say
you are a you are not a male but are tall.
so essentially here we have an if statement that's going to cover every single condition
for these two variables so in every single situation of the two values of these variables
were going to be able to print something out for it so if I mean both of these true it's basically going to tell us.
you are a tall male if I make is male false it's going to tell us.
you are not a male butter tall if I made is mailed true
and is tall false, then it's going to tell us you are a short male
and if I made both of these false it's going to tell us you are either not
male or not taller both and actually we need to change this so this should say you are not a male
and not tall so that would be a better print out for that situation so
you basically see how we can use ifs osoph's and else in order to
how I programmed to make decisions and really to respond to the different data in our programs.
so unable to respond to every combination of the values for these two
variables and that's really cool so in this example we were just using simple boolean variables
but in the next tutorial, I'll show you guys how you can actually use something called comparison operators.
so we could compare like two numbers or two strings and we could use those as are conditions
but for now I think this is a good introduction into if statements. so I'll see you guys in the next tutorial,
in this tutorial on a talk to you some more about if statements in python. more specifically we're going to be looking at using comparisons
inside of our if statement so if you're following along with the course in the last tutorial,
I talked to you guys about just the basics of if statements and we used a couple different boolean variables
and depending on the diaries of those bullion's we're able to do certain things in this tutorial we're going to look at another way to use if statements which is with comparison so,
instead of just using boolean values we can actually compare different value silly I could compare a couple of numbers like
compare couple strings and depending on the results of those comparisons we can do
certain things so this is going to be pretty cool and this is really going to give you guys a full understanding of what you can do with if statements so
for this tutorial I actually want to create a python function and this function is going to
give us the maximum number that we pass into it so this function is going to take three parameters as input,
and it's going to print out the biggest number that we give it so
let's create this function I was going to say, death. and I'm just going to call it max
numb and inside of these parentheses I'm going to specify that I want three parameters as input.
someone to say number one, number two and number three. so basically
we're passing it three numbers and this function will return. the largest
of the three. so in order to figure out which of these numbers is that the largest we're going to have to use an
if statement. so I can say if. and over here I need to specify
a condition. so I need to put like a true or false value. and so what we can actually do is we can compare these different numbers so I could say if
num one is greater than or equal to number two,
and number one is greater than or equal to numb three.
so basically what I'm doing here is I'm comparing these different number so I'm saying if
the first number is greater than or equal to the second number and this is a comparison so
when you think about it when we compare these two numbers we're going to end up with a true or false value
write num one is either greater than or equal to numb to or it's not it's actually a boolean
value rights either true or it's false. same thing over here. the result of this comparison
is either true or it's false so technically I'm putting a true or false value in there.
I'm just getting that true or false value by using a comparison. and you'll notice over here we're using something called a comparison
operator. and basically this is just like how we want to compare them so we're saying like greater than or equal to in this case
so down here. if this whole condition is true in other words of the results of these two comparisons end up being true,
then we know that none one is the biggest so I can just return num one I can say return
no one but we also want to check some other condition so I can say alef
and now I want to do some other comparison so I'm going to say, else if none too
is greater than or equal to number one and number two is greater than or equal to
number three. so I'm doing essentially what I did up here except for none too so again I'm comparing
these different numbers and this is gonna end up being a true or false value, depending on the result of the comparison
so down here again we can just returned home to because if all this is true that means we're going to end up returning
none too. and then finally we can just say else so
if num one isn't the biggest and numb to isn't the biggest then we can pretty much assume that
number three is the biggest so now we have our function
so down here I'm actually just going to call this function, so I'm just going to say,
actually I'll print out the results I'll say max numb and will pass in like three four or five
so we're basically calling that new function that we just made.
and I'm going to go ahead and run this program. so you can see down here in the output we printed out five because that was the biggest.
if I was to change this middle onto the biggest so we make the middle on forty now it will be able to
take on that situation and finally I can make this like three hundred and it'll be able to handle that so
no matter which number numb one number two or number three ends up being the biggest it's able to
tell us without a problem. so these comparisons are a really really really common way to make if statements and a lot of times
you're gonna want to be comparing different values inside of python, so over here we're comparing
numbers. but we could also compare strings so I can easily make these both like
you know I can make this like dog and I can make this dog and I could say
a different operator so I could say like this double equal sign would mean equal so I can basically say like
if this string is equal to that string. you can basically like compare
all different data types see nike compare in numbers strings. you can also compare bullion's
so once again these are comparison operators and this one is greater than or equal to but there's a bunch of other comparison operators we can use so
the most basic is just going to be a double equal sign and not basically checks to see if the two values are
equal so it'll say like, if number one is equal to number two,
we can also say not equals and this exclamation point will basically mean
not equal so it's. if no one is not equal to none too.
we also have greater than, less than, greater than or equal to
less than or equal to. and those are kind of all of the operators are all the you know the basic
comparison operators that are going to be using in python so using comparisons is really awesome and there's going to be tons and tons of situations
inside a python where you're going to want to compare different values so these can be extremely useful
in this tutorial on how to talk to you guys about building a calculator in python. now having been fallen along with this course you'll know that in the beginning of the course we actually created a very basic calculator.
basically the user could just enter into numbers and our calculator would add the numbers together and spit out the answer
in this is horrible honorary guys how to build a more advanced calculator so this calculator is going to be able to perform all of the basic arithmetic
operations so we can add subtract multiply and divide and were actually allow the user to specify which one of those they want to do,
so the user will enter in a number. they'll enter in whatever operator they want to use so plus minus
divide mocked by, and then I'll enter in the second number and will perform the operation
for them says it can be pretty cool. and it's going to show you how we can use if statements
in like a practical application so let's get started. the first thing we want to do is get
input from the user so I'm going to create three variables one for the first number one for the second number and
one for the operator and will basically store the values that the user inputs into those variables so the first one will just be number one
and I'm gonna set this equal to input and we're going to give this a prompts also enter
first number and here's actually the thing is whatever the user
enters. we're going to want to convert it into a number so generally in python when we get input from the user no matter what they put in it just gets converted into a string.
but we don't want a string because we're going to have to be adding or subtracting and multiplying these numbers together ?
so whenever they enter in the number I just want to immediately convert it to
an actual like number data type instead of a string. so what I can do is I can actually say float.
and I can surround this entire input tag with parentheses. and now,
what this is gonna do is it's going to immediately convert whatever the user inputs
into a float. now that's going to mean that they're going to have to insert a number otherwise we'll get an error
but for the most part this should work out for us so I'm actually just going to copy their sky
and we'll go ahead and paste it over here, and we'll paste it one more time so we
were basically just try to get three pieces of input from the user. so the second thing we want to get is the operator so I'm just gonna say
oh p for operator and actually get rid of this flow because
we want to keep this as a string. and I'll just say enter operator so it's going to be like.
plus minus multiplication whatever. and then finally down here we'll get numb
to and again we're going to want to convert this to a float, so I'll say enter second number
so now basically what we're doing is we're getting the first number we're getting the operator and we're getting the second number from the user.
so what we need to do now is we need to figure out what is inside of this
o p. in other words we need to figure out what operator. the user was trying to do so are they trying to do additional they're trying to do a subtraction like
we want to figure that out, so we can use an if statement in order to
figure that out so I'm gonna come down here and I'm basically just going to create an if statement song and say
if. and we want to check a condition so I'm basically going to check to see if this operator is equal to
a plus sign so I can say if o p equals plus sign
and now if the operator is equal to a plus sign. I'm just going to print out
number one plus none too. but let's say that instead of a plus sign they entered in something else so we can say
l f o p is equal to. and now we'll check if it's a minus sign.
and so here or just print num one minus nothing too. and I actually forgot to put a colon here.
so we can just do these for everything so now we can say. lf opie
is equal to division and here we'll just divide the two numbers so I can print out
number one divided by numb to it, and finally we'll do the same thing for multiplication so I'll say
l if opie is equal to astronauts
and was print out number one times none too.
so basically over here we have every you know condition. but I also want to put in an
else statement so in the case that the user enters in an operation. that's
not like one of the four that we specified up here I just want to throw an error sums usa
opie are actually we just say else and here with this print out lake
invalid operator. so this if statement should give us everything we want basically I'm just checking to see
if it's equal to a plus sign a minus sign the division sign or a multiplication sign !
depending on which one is equal to we'll do a different operation so let's go ahead and run this and see how we do so
I'm going to run this program and it says enter first number let's enter five
enter an operator so why don't we just do addition and enter a second numbers do twenty three.
so now it prints out the answer twenty eight so our calculator actually works let's try another
operator just to make sure. so it would be six and y we multiply it
by I don't know five point to three. so now we go off and we do the multiplication and looks like we got our answer so
our calculator seems to be working and so basically all we did was we got the input from the user.
and then we used if statements to figure out what they wanted to do right so we could check to see if they want an edition we could check to see
if they wanted subtraction division and multiplication. and we can also check to see if they entered in an invalid
operator so actually why don't we try that too. so enter it in like five
and now what does enter unlike an open or close parentheses and four,
so you can see here it's able to tell like the program smart enough to know that that's not a valid operator so
these if statements can be really powerful and we can use them in combination with getting the user inputs to create a little calculator.
in this tutorial on hitachi guys by using dictionaries in python.
now a dictionary is a special structure in python which allows us to store information
in what are called key value pairs. so essentially I can just create a bunch of these different
key value pairs. and then what I want to access a specific piece of information inside of the dictionary.
I can just refer to it by its key, so the word dictionary is actually pretty appropriate here if you are familiar with a normal dictionary,
you know in a normal dictionary you'd have a word, and then you'd have a definition associated to that word so
in this situation the word would be the key. in other words the word is what like uniquely identifies it
inside of the dictionary, and then the value would be the actual definition so
this is going to make more sense once we start working with this but I just wanted to give you guys a quick introduction.
so in this situation I want to create a little program that will allow us to convert a three digit month name
into the full month name so I can convert for example like jay a n
two january or I could convert an a r into
march. like I want to be able to have a program that can do that for us and that's actually a pretty good use case for a dictionary so
we're actually going to create a dictionary. and I'm sure you guys how we can do that so, the first thing we need to do
in creating a dictionary is just given a name, so I want to give this a specific name so I'm just going to call this
month conversions. and now I just want to set this
equal to an open and closed curly bracket so whenever we create a dictionary in python.
we're always going to wanna created inside of these open and closed curly brackets so
inside of the dictionary now we can start defining what are called key value pairs.
so I can define a key and that I can give it a corresponding value.
and the way that we can do that is by typing out the key and then typing out the value so in our case we're converting three digit month names
into the full month names so I would want to type out for example j n
and then I can type a colon. and I want to type out the value I want to associate with it so we can say in january.
I could basically do this for every combination so I could say like you'd be
and this would be february and actually after each one of these we're going to need to put a comma.
so I could do the same for march soon say and they are.
so essentially what I can do is I can specify an entry inside of this dictionary for
each one of these so this over here would be the key in this over here would be the value.
and here's one thing is all of these keys have to be unique. so if I was to come down here and change this to j n,
this is actually going to give us a little warnings you can see down here it says dictionary contains
duplicate keys dots they know no one we're creating dictionary so you'll want to make sure that
the keys are unique aren't so I'm gonna go ahead and create one of these for each one of the months
and then we'll come back and we'll talk about it. all right so I've gone ahead and created an entry for all twelve of the months so now
we have a bunch of unique keys and each one of those keys is associated with a different value.
so this is the basics of creating a dictionary is we have a bunch of these different key value pairs.
and now what we can actually do is we can access them from inside of this dictionary ?
so if I wanted to access a specific key or a specific value. all I have to do is come over here and I'm actually just going to
print it out onto the screen so we can see it. all you have to do is referred to the dictionary by name so it's just called
month conversions. and there's actually a bunch of different ways that I can access these month names,
so I could access different entries inside of this dictionary ?
the first way is just by making a open close square bracket inside here I can just type in one of the keys.
so for example inside here I could type in and oh thee. and what this should do is it should give us back.
the full name for november so when I print this out, you'll see that we get back down here.
nov. so I can do the same thing for any of these we can say like an a r.
and now we should get marched back so I'm able to refer to the key,
and it's going to go into the dictionary and it's going to give me the value that's associated to that qe
is actually another way we could do this too so I could say month conversions dot
get an inside of here I could also pass in the name of the key so I could pass in like
d c and now we'll be printing out december.
and what's cool about using this get function is I can actually specify a default value that I want to use.
if this keys not found so there's going to be certain cases when we're dealing with dictionaries where you're going to put in a key
that might not necessarily map to a value inside of the dictionary you so he put in an invalid
key. so let's just try to do that so honest put like aliyu v. that's not
a month abbreviation. so when I try to run this, you'll see we get this none
down here. and in a lot of cases you're gonna want to create some sort of a default
value. so if I'm in this situation where I have a key that's not mappable to any values inside of this
dictionary ? I can actually pass it a default value. so inside this dot get function
I can make a comma. and I can pass in like a default value to get printed out so I can say like not
a valid key. and now when I put in the invalid key instead of saying none.
it's going to go ahead and say not a valid key and so this is going to give us like a default value
that we can fall back on so these dictionaries are really awesome and
the keys over here don't have to be strings so you could also use numbers so for example I can see like zero
one tan like I can put any numbers I want over here as keys
as long as their unique and that I could access those keys just like I normally would down here
with this get function or with those open and closed square brackets so that's sort of the basics
of using dictionaries like me really useful to store key value pairs and honestly you're going to be using them a lot in python to store different types of data.
in this tutorial I wanna talk to you guys about wild loops in python, and a while loop is basically a structure in python which allows us to loop through
and execute a block of code multiple times. so I could specify like a few different lines of code and then I could
put that code inside of a while loop and it would basically you loop through that code executing it repeatedly until a certain condition was false.
so our lives can be awesome and there's a lot of situations in python where we're going to want to loop through specific lines of code,
so in this tutorial I just want to show you guys the healing bare basics of how wildebeests work
and then in future tutorial is we're going to use while leaps to create little games and stuff like that so
let's talk about wild sum when I create my wild loop. the first thing I want to do actually
is create an integer. I'm basically creating a variable that's a number and you don't have to do this for a while
but just for our demonstration I'm going to. so I'm going to call this, I am going to set it equal to one.
now what I wanna do is I want to create a while loop so I'm basically just going to say. while
and over here I want to specify a condition, and this is what's called our loop condition or you can also
refer to it as a loop guard and basically we are going to keep looping through the code
inside of the while loop. as long as this condition is true. so whatever condition I put in here as long as it's true
we're going to keep looping through the code inside the wild is I'm just going to say while I
is less than or equal to ten and now I'm gonna put a
colon and I'm gonna make a new line. and so anything that's below this while loop declaration and that's
indented like this is going to be considered code that's inside the while loop and so that code
is going to get repeatedly executed while this condition up here is true.
so I'm just gonna put a very simple line of code here where it's going to print out the value of I,
and then down here I'm going to actually increment eyes I'm going to add one to eyes I must say
I is equal to I plus one, so basically I'm taking this I value and I'm adding one to it
is actually a shorthand that we can use in python to do something like this though I could just say
I plus equals one and not automatically going to add one
to I so this is like a little shorthand and you'll see people in pipe on using that a lot.
so over here we basically have our wild lives I have
the outline for a while lives we're defining this variable up here and we're going to keep looping through the code
inside the while loop. as long as this condition up here is true.
so if this condition is false for example if I is equal to eleven,
then we're not going to loop through this company more than just going to move on. so down here I'm actually just going to print
done with loop. so this was kind of illustrate this for us. so let's go ahead and run this program I'm just gonna run it
and you'll see down here we get some output so we're actually going to get
numbers printed out one all the way down through ten and then were printing out done with loop
so basically what's happening is we're printing out every time we go through this loop
so initially I is equal to one right. the first thing that python's going to do when it gets to this while loop
is it's going to check this condition. so before it does anything else, it's going to check this condition and it's going to say
okay, is one less than or equal to ten. and that's true.
so as long as this guy is true we're going to go through and loop through all the code inside of here.
so we're going to print out I which has the value of one and then we're going to add one to I so now I'm going to go from one
to two. now what we're going to do is we're going to go all the way back up here
to this while loop declaration and we're gonna check the condition again.
so remember I checked the condition first time and then I looped through all the code, then I'd go back up to the top
and I check it again so I'm gonna say ok is I less than or equal to ten at this point
I is equal to two so I is less than or equal to tenant. so now we're going to go through and will
execute all this code again so I'm going to print out I so it's going to be too and I'm going to add one to eye
so now we have three then python's going to go all the way back up to the top and it's going to check
the condition again so on every iteration through the loop before python
does what's inside of this loop it's going to check that condition. and as long as the condition remains true.
we're going to keep executing the code inside the loop eventually though in this program I is going to end up being eleven
right so I'm the last iteration it's going to end up being levin, we're going to come back up here,
and we're going to say hum is eleven less than or equal to ten nope and so sense it's nope
we're going to come down here and we'll print out this done with loop line so that's the basics of how these wildebeests work
we're specifying a loop condition. as long as that conditions true will keep executing the code
inside of the loop, and after every execution of the loop, we're going to come back up and check the condition again so
that's how we end up with this. printing out down here, so that's the basics
of a while loop and we can use these volumes to do all sorts of things like wild fruits are very very powerful
in this tutorial on a show he eyes how to build a basic guessing game in python,
and in this guessing game we're actually going to be using all sorts of cool programming structures that we've
learned up to this point in the course. so we're going to be using things like if statements and wild loops and variables and
all these cool things in order to build this game so, the basic idea is we will specify lake a secret word.
so we'll have a secret word that we store inside of our program and then the user can interact with the program and try to guess
the secret word. and so what we want to be able to happen is we want the user to be able to keep guessing
what the secret where it is and keep typing in different responses. until they get the secret word right.
so that's the basics of what this game is going to be. and now let's go ahead and create it so the first thing we want to do is
create a variable to store our secret word. so I can say secret
word. and we're just going to set this equal to a secret word so why don't we make it a draft. that's a pretty good secret word.
and now what we wanna do is want to create a variable that will store the user's response
so I want a variable that will store like all the guesses that the user makes so I'm just gonna
call this guess and I'm just going to set it equal to an empty string right now.
so now we have a secret word and we have a variable to store the user's guess
and what we need to do is we need to be able to prompt the user to input the secret were.
but here's the catch. what we want to happen is we want them to enter the secret word.
and if they don't guess it correctly we want to prompt them to enter it again. so we can't just use a single
input statement we actually have to use something called a while loop. and we can use a while loop
in order to continually ask the person to guess the word until they guess it correctly.
so let's go ahead and create our while loop so I'm gonna say while and after a while I need to specify a looping condition or a looping guard.
basically this is something that as long as it's true we're going to keep looping through
this loop. so basically I want to say I want to keep looping as long as
the user's gas is not equal to the secret word. so as long as they haven't guessed
the secret word. I'm going to keep going through this loop, and inside this loop.
what we're going to do is we're going to ask them to input the secret word so I can take this
gas variable and I can set it equal to input.
and I'm just going to say. enter guess. and so over here we're basically telling the user to enter in their guests.
I'm storing whenever they enter inside of this guess variable
and then what's going to happen is that we're going to come back up here we're going to check to see if the gas is equal to the secret word
if the guests isn't equal to the secret word, then we're going to do it again. but if the guests
is equal to the secret word, then we're just going to break out of this loop. and so we can come down here
and we can just print out a success message so I could say you win
because they got the secret were since they have very very simple program but
this is essentially all of the code that we need to be able to build a game like this so
let's go ahead and play our game we can run it and see how he did so I'm gonna click play.
and down here you can see it's prompting us to enter a guest's so I'm just going to type in some you know random texts
we can type in whatever you want. and as long as we're not entering that secret word it's going to keep prompting us to
enter different information. but if I enter in the secret word so if I enter in draft.
now all of a sudden the programs can terminate and it's going to say, hey you win
because we were able to guess the secret word. so that's like a really cool way for us to be able to do this.
and we actually have a fully functional guessing game. but I think this guessing game could actually be improved quite a bit.
a lot of times when we're making a guessing game we want to set a limit so in other words I want to set a limit for
the number of times that the user can try to guess the word. so let's say that the user has
three tries right they have three guesses in order to guess the word. and if they can't guess the word after three tries.
then they're going to lose the game. but if they can guess the word inside of three tries then they'll win the game right.
I think that will be a little bit more of a fun game so why don't we try to program that game,
basically we're going to set a limit on the number of guesses that the user can have
in order to do this and we're going to have to create a couple more variables down here.
in other words we're going to have to store a couple more pieces of information. the first piece of information I want to keep track of is
how many times the user has guessed right, so we can just make a variable called guests
cao and we'll just set this equal to zero because initially the user won't have guest
down in this while loop. every time we go through the loop, I want to increment that gas can
write so every time we've gone through this while loop I want to increment that count because that means the user will have guessed
so down here I'm going to say. guess count plus
equals one and this is just going to add one to the gasket actually whips.
so after each iteration of this loop we're going to go ahead and add one to the gas count
right so that's the first variable that we're going to need we're also going to want to store another variable
and this is going to be called guess limit and basically this is going to tell us how many times the user can guess the words on it it's going to be guests
limit and will basically just say three so let's say that the user has three tries
to guess the word three strikes and you're out so the user if they can't get it in three tries
then we're going to basically say that they lose the game. and I'm also going to need one more
variable here, which we're going to call out of
gases. and I'm just going to set this equal to false initially. so this
out of gases variable is going to be a boolean. and it's gonna tell us whether or not the user is out of gases.
so if out of gases is true that means they have no more guesses right they basically lost the game
and if out of guesses is false that means that they still have some guesses left so they can keep playing.
so let's use these different variables in order to make our program or functional so
the first thing I want to do is when I go through this loop. I want to check to make sure that the user has more guesses,
right in other words before I let the user enter a gasp. I want to check to see that they haven't already used up all their guesses.
so down here I can make an if statement I can say if and inside of the condition I want to check to see that
guess count is less then guess limit
if gas count is less than guess limit. that means that they haven't guessed the
total number of guesses that they have so they have some guesses left. and if that's the case and if that's true,
then I'm going to go ahead and give them a guess and then we'll increment the guest count.
if this isn't true in other words, if they have reached their guests limit,
then I'm going to want to set out of guesses equal to
true because there are guesses right they have no more guesses because the gas count wasn't less than the guest limit.
and so that means that there are two gases so they have no more gases. so there's actually one more thing we need to do inside of this while loop
we need to add another condition onto this loop guard. so right now we're going to keep looping as long as the guest
is not equal to the secret word but remember if the users out of gases in other words if they've reached their gas limit
we don't want them to guess anymore, right so if they ran out of gas is then we want to basically break out of this loop and not give them anymore guesses so
I'm going to go ahead and add another condition onto here and I'm gonna say wow they haven't guessed the secret word
and they're not out of gases so it's going to be not
out of guesses, then we're going to keep looping so as long as they haven't guessed the word and as long as they still have some guesses laugh we're going to keep looping
but otherwise we're going to break out of the loop. and so down here we're printing out you win,
but actually when we break out of this loop, there's going to be two possible scenarios.
so again, there's two possible ways that this loop could andrei either the gas is equal to the secret word.
so either the user guests of the word correctly, or the user ran out of guesses
and so there's two situations down here that we need to account for. and so I'm going to use an if statement to figure out
which is which I'm going to say if. and we're just going to say, out of
gases, and, if the user is out of guesses that I want to print,
you lose so we're basically going to be like you lost the game. otherwise though if they're not
out of gases. that means that they guessed the word correctly so we're just going to pronounce you win.
all right so now we have all the logic for this little guessing game set up and let's see if we can run it and play through it so
I'm just going to run this program. and now it's going to tell us to enter a guess so why don't we
enter more guesses than we have so we're going to try to lose the game so I'm going to enter one gas two guesses.
and now I'm on my final guess so if I don't get it here, we should actually lose the game.
and you can see it says out of guesses you lose. so we were able to guess it in the number of trials that we had.
let's run the program again and we'll try to win the game. so we'll get a couple wrong.
let's say we're on our last gas and unlike okay I can do this so I type in the word and
bam we won the game so, that's how we can basically create a game where we have
a guess limit so this is a lot of code let me walk you guys through this one more time
so you can just get a full understanding of what we're doing up here I created a few different variables
we created this secret word variable and we created this guests variable. then
we also created some more variable so we created this guests count variable. and this just keeps track of how many times the user has
guessed the word. and you can see down here. every time we give them a gas
were incremental the guest count. we also have guests limit and gas limit is telling the program how many times the user can guess.
so before I go through this while loop the first thing I'm doing is I'm checking to see that the guest
count is less than the guests limit. in other words do they still have some guesses
left if they do, then we're going to get the input from the user. otherwise,
we have this other variable up here called out of gases and out of gases is going to tell us whether or not they have some guesses left.
so this is equal to false. that means they have some guesses, if it's equal to true however it means
no more dice no more guesses they are done so they lost the game. the last thing we needed to do is specify an additional condition up here.
so we are going to keep looping through the code inside of this loop, as long as the conditions up here
are true. so as long as they haven't guessed the word. and
as long as they're not out of guesses. we are going to keep looping through.
and so when eventually the user does break out of this loop, there's going to be two possible situations the first situation is that they ran out of guesses
and so we want to check to see if that's the situation. I want to check to see if they're out of guesses.
if they are will print out a lose message, if they're not, then they must have guessed it correctly so
they win. and so that is how we can use while loops and if statements and also variables
in combination with each other to build a pretty awesome guessing game
in this tutorial on a talk show guys by using for loops in python. now a for loop
is a special type of loop in python which allows us to loop over a different collections
of items. so a lot of times will use for loops in python to like loop through different arrays
or we can loop over like the letters inside of a string or we could just loop through like
a series of numbers so for lives provide a very specific purpose.
and the easiest way to kind of wrap your head around why four lives are useful as it is for me to show you guys
a bunch of different examples so that's exactly what I'm going to do, we're going to look at why four lives are awesome so down here in my
text file and my a python file. I'm going to write out a couple different for lives. so the way that we create a for loop
is just by saying four. and now what I want to do is specify
a variable and this variable is going to essentially represent
a different value every time we go through this for loop
and you guys will see how that works in a second but just know that this variable is going to be used on every iteration
of our for loop, and each time it will most likely have a different value so
in our case I'm just going to call this letter. and I'm going to save four letter inn.
and now what I wanna do is I want to specify a collection that I want to loop over.
one example of this would be like a string so I can put a string in here I can just put like draft
academy. and now I can just put a colon and so basically what this is gonna say it so it's going to say for
every letter inside of draft academy. I want to do something
and so down here inside of this for loop and again we need to indent this
we can put what we want to do with each letter so let me just show you guys like basically what this is going to do so I can print out
letters I can print out this letter variable. and it's actually going to print out a different letter
inside of this dropoff academy string on every single iteration of this loop.
so I'm gonna run this program. and down here inside of my counsel you'll see that I'm basically printing out
draff academy so on the first iteration of the loop. I printed out the first letter in draft academy which was g
on the second iteration of the loop I printed out I third was our fourth with
a. so I'm essentially just looping through all of the letters inside of
draff academy. so I'm saying for each letter in dropoff academy.
I want to print out that letter. and so this is kind of like how for loops can be used we can define a variable
and that variable will change on each iteration of the loop right so on the first iteration of the loop.
this letter variable represented a g. on the second iteration of the loop. the letter variable stores
the value I excited right so we went through this entire string we were able to print
out each letter. so in addition to using this with strings we can also use this with other collections for example like an array.
so if I created in array up here, let's call it friends. I'm gonna set this equal to a bunch of different values so we can
put like a list of our friends in hearings zelig jim karen and
kevin instead of saying the letter why don't we call this friend, and I could say for friend
in friends and now will print out
the friend so over here I'm saying for each friend inside of this friends
array. I want to print out the friend so now we'll actually be able to print out each
element inside of that array so not here you'll see we're printing out gym and then on the second iteration were putting out karen and on the third would bring up kevin tso,
and he was a loop through all of the values inside of the array. and just so you guys know like
you can name this variable whatever you want so I could name I could give this like any random name,
and if I want to access it though I have to access it using that same name so we can loop through asking me like an array we can also just loop through
a series of numbers so I could say index over here and again this can be anything I'm just gonna call index
so we could say for index in range and then in here I can pass in a number so I can pass in like
ten for example. and down here I'm just going to print out the index. when I run this program,
you guys will see that it's basically going to print out every number in the range from zero to ten,
not including ten so starting with zero it's going to put out zero one two three four five six seven eight
nine. but notice that it didn't print out ten so it's essentially just printing out all the numbers between
zero and ten not including ton. you can also specify a
a range of numbers so I can say for example like three and ten. and now this will print out all the numbers between three and ten
not including ten so run this program, and you can see we print
out three four five six seven eight nine ten not ten so whatever value that you put
here in this second position is not gonna get included in the range and ranges can be
really is also for example I could use a range to loop through an array just like we did before.
so if I wanted I could say something like for index in range and now
inside of this range I can pass in the length of the array.
so just so you guys know if I wanted to get the length of this array. in other words if I wanted to figure out how many elements were inside of it.
I could just type out alli end and then inside parentheses. the name of the array and so
this is going to spit out three because there's three elements inside of here right
kind of make sense. so what I can do is I can say down here inside of this range function
I can just type in eliane and then friends. and so what this is gonna do is it's going to essentially give me
a range between zero and the number of friends. inside of this list so down here I could actually type out
friends index. and this will allow me to access each individual friend inside of this list.
just like we did before but now I'm doing it with a range, so you can see I'm
typing out jim care and kevin so actually for each iteration through this loop
it's basically going to be printing out friends zero friends one
and then friends too because in heater were passing in a three
and remember whenever I pass in there it's going to range from zero all the way up to that number but not including that number so
that's another way that we can print out all the elements in the array and looping through something like an array is actually a very very common use case
for four loops. but like I said we can you spoil hopes to loop through essentially any collection that we have so
we can loop through like a string that we could also loop through you know something like an array so
this can be really useful and bats are the basics of for loops in python.
and I also want to show you guys one more example just while we're here so why don't we go ahead and print out a range
up to five brace this would just be a simple program you can use all sorts of logic
inside of these four lives. so let's say that I wanted to do something special on the first iteration of the loop.
so I could say if index is equal to zero
and if the index to zero than we know it's the first iteration of the loop so I could do something special I could like print out
first iteration. and then otherwise we could just print lake
not first so this would be an example of like maybe you want to do something on the first iteration of the loop
and do something else on subsequent iteration so if I play this you'll see only on the first iteration is it
printing this out and otherwise it's printing out other stuff so you don't be afraid to put some complex logic
inside of these four lives because it can really make your programs more powerful
in this tutorial I'll show you guys how to build an exponent function are an exponent function is basically going to allow us
to take a certain number and raise it to a specific power. so in python there's actually a really easy way to do this I can come down here and I could print.
we could say like too. and we can just do two multiplication signs and I could say three
and this is basically just going to be two raised to the third power. so
you can see here I can just print this out and we get a cassettes to cube so it's really easy to do exponents in python.
but I want to show you guys, how we can use something like a for loop in order to create a function like this of our own sun will actually create an
exponent function that will basically do this and we'll use for loops to do it
so let's create a function. something as a death and now we need to give this function a name so why don't we call it
raise two power and inside of here, I'm going to accept two parameters the first parameter is going to be the
base number. and then the second parameter is going to be the power number so we're going to take the base number
and raise it to the power number. so over here we can just make a colon
now inside of this function when you start writing some code. here's the thing
inside the function we don't necessarily know the value of this poem,
right for them why have we knew that we were just trying to like square this number or cube this number.
I could just return like bass num times
basal cell right now it's square the number or I could keep the number bass num so right so this would be like the number cubed.
the problem is though we don't know like right off the bat what this value is going to be right this could change like the user can decide that.
so in order to write this function we're actually going to need to use a for loop. and I'm sure you guys how it can use a for loop
to basically figured this out so the first thing I want to do is create a variable and I'm just going to call it
result. and we're just going to set the result equal to one so we're gonna start this off at one.
now I want to create a for loop, so I'm basically just gonna say four
and over here, I don't want to specify like a index on aug eight index
in and now want to specify a range and arrange will basically range us through
a collection of numbers. so basically I want to multiply the bass num
by itself, as many times as the pound numb specifies
right over here I can just make this a range of power numb
right and so we'll basically a loop through this for loop as many times as pound them so eponymous two
will loop through it twice. economists for will luther at four times and every time through the loop will multiply bass num by itself
or actually you'll see we're going to multiply it by this result, and so down here inside this for loop I can basically say
result is equal to result times, pacing up
this should actually give us everything we need to take this number to the specific power so
the actual like result of doing the math is going to get stored inside of this
result variable so the first time through the loop, we're just multiplying basin on by one
right. and so now result is going to become the same value is based on the second time through the loop so this would be if we were squaring the number.
we're basically multiplying resort by basin um again so it's essentially just based on long times based on
the third time through the loop we're multiplying result times bass num so we're essentially just like keeping the number so
that's essentially what this for loop is doing for us. so the last thing I want to do is right here below this for loop
I'm just going to return the result so we'll be able to return whatever the result of raising the number to the power was
so let's come down after this function and we're just going to call it so I'm just going to say,
actually will print out the answer so save raise to power and the inside of these pregnancies member we can pass two numbers so let's
raise three to the second power so we're just going to square three and we'll see how this works
so from the program and you can see down here in the console were getting nine.
let's try something a little bit crazier drive three to the fourth power
and will run this aggregate eighty one so that's three to the fourth power. let's try two to the third power
and were getting eight yeah so that makes us so our raised the power function is working just as expected and that is what he has to do it one more time.
so inside of this function were taking in two pieces of input were taken in a base number.
we're taking it a pow number so that's like the base number is going to be taken to the power number
I'm defining a variable here called result and result is where we're going to store
the actual result of doing the math. now we specify this for loop,
and I'm basically saying that I want to loop through this range of numbers. when I put
pounha um here is basically going to range from zero all the way up to but not including the power number silk
we'll basically loop through power number of times that makes sense. and then every time through the loop we're just multiplying result by
base numb. and then we're just returning results so that's the basics of building a power function
and obviously like if you're just trying to take a number to a power in python it's really easy but this kind of shows you like the internal workings right
for a function like that to work we would have to actually type something out just like this,
and this tutorial I wanna talk to you guys about two different concepts in python.
it's going be a pretty cool lesson. first thing I want to show you guys though are two dimensional lists so down here in our
python file. I just want to create a basic list so I'm just going to call this
number grid. and I'm going to set this equal to a normal let strangers like this
now normally if we were creating a list I could just put in a bunch attributes and bunch elements right,
and now all of these elements are inside of this number grid lists everybody's happy. but
another thing I can do is I can make all of the elements inside of this number grid list
lists so the first item in the numbered list is going to be a list. the second item and the number grew less is going to be a list
etc. so I'm going to show you guys have to do that I can basically just come down here and why would normally put the first
element in the list I can just create another array someone's going to make an open closed square bracket,
and now I'm just going to say one two three and I can create the next item in my list
I can say four five six, and then let's make another item in this list.
I can say seven eight nine and finally we're going to put one more list inside of the number grid list
and it's just going to have zero in it so inside of this numbered red lips write this
high level overall list, we have four elements in all of those elements
are themselves lists. so essentially what we're doing is we're creating a grid right
this grid has one two three four rows and one
two three carbons right for rose three columns and that's kind of like
why these can be useful as we can create a grid like structure inside of python
using two dimensional lists. so this is a pretty cool list structure.
and I wanna show you guys, how it can access individual elements inside of this list structure so
for example let's say I wanted to print out one of these values if they wanted to print out this one right here,
the way I can access it is by saying number grid. and
the first thing I want to do is make an open and closed square brackets and in here I want to put the
index of the row that I want to access. so this would be like row zero because it's the zero of element in the array.
this would be row on its it and exposition one this would be row to row three etc so I could put
roses grow and now right next to this I'm going to make another square bracket,
and I want to put the index of the column so this would be like column one
column to column three. so I'm going to put it another zero because this is at the zero
index of this first array so I've been zero zero here. now we can print this guy out to the screen
and you'll see down here that we get that one so I can also do this for like for this eight for example so this is going to be
zero one two can be row two and column one
and now we should be able to print out that e. so that's basically how we can access elements inside of this
two d list. the next thing I want to show you guys is a nested for loop
nested poorly with the situation in mega said well we have a for loop inside of a for loop.
and I'll show you how we can use this nested for loop in order to print out all the elements inside of this array so I've basically shown you guys on a parse through
a two dimensional list or a two dimensional array. so basically we're going to create a normal for loop so I'm going to say four
and I'm just going to say row in number grid. and I'm using the word row here because
I'm kind of seeing these guys as rows right these are sort of horizontal rows
in our little grid so for each of those rows for each of the elements
inside of number grid. I want to loop through so I could actually just print out each row right now
and it's going to print out all the rows inside of this list you can see down here we basically just get exactly what we have up there.
but I want to be able to access each of these individual attributes inside of each of these
array elements so we can actually create another for loop and am I put that for loop inside of here,
so now I'm going to say four column in a row.
and basically what this is going to give us is each individual column or each individual
element inside of these arrays so for example inside of the arrays that are the elements of the number grid
over that makes sense so down here. now we can just print out column
and this should actually print out every single value inside of this two dimensional array.
so let's go ahead and run this program. and down here you'll see that we're basically printing out
one all the way down to zero so we're printing out all of the elements
inside of all of the arrays inside of the number grid. so that's how we can use two dimensional lists and
nested for loops together in both of those things are actually pretty handy in python
in this tutorial I'm going to show you how to build a basic translator in python.
so essentially we can take in a strings we can take him like a phrase or a word
and will be able to translate it into a different language. so over here I have this little file
and it basically specifies this language that I made up so I'm calling it the draft language
and in the draft language all vowels become g so if I was going to translate an english word into
a draft word for example the word dog, I would look through the word dog
and any instances where there was a vowel so in our case let's just say a e I o u.
I would convert that vowel into a g so dog would map to ddg
cat would get mapped into c g t. so those are the basic translation rules. obviously this is a pretty simple language but
you get the point any vowel is going to become a g and then we'll get the draft language.
so we're going to build a draft translator over here in our python file.
let's start making this translator the first thing I'm going to do is just define a translate function.
so I'm going to make a function here and I'm just going to call it translate and
inside of these parentheses we want this to take one piece of information which is going to be
the phrase that we want to translate so I'm gonna say phrase and now inside of this function we need to figure out like
ok how can we translate english into our draft language well remember
the rules is basically just any vowels become jeez. so the first thing I want to do is create a variable
and this variable is going to be the translation so this will be like the final result that we're going to return to the user.
so I can say translation for now I'm just going to set it equal to
the empty string so this is just going to be like a completely empty string it's not gonna be doing anything.
and now what we want to do is we basically want to loop through
every letter inside of this phrase. and if it's a vowel we want to change it to g
and if it's not avowal we want to leave it alone and we're essentially going to be looping through phrase.
and we're going to be adding the letters onto this translation one by one so make sure you guys how we can do this.
I'm going to make a for loop somewhere safe for and I'm just going to say a letter
in phrase. and so now when I looped through here I can access
each individual letter inside of the phrase that they passed in. so what I wanna do is I want to check to see if
the letter is a vowel or not right. if it's a vowel than we can add a g onto translation.
if it's not available then we can just add on whatever letter it was onto translation
anyway so many users if statement I'm going to say if. and there's actually this special thing we can do in python we can check to see if something is in
something else so I can say if letter inn.
and over here I'm just going to take out all the vowels that was a e I o u. and a e
I o to you. I'm basically checking to see if the letter is inside of this string
and if the letter is inside of here, then we know that it's a vowel so down here we can handle that case
so I can say. translation is equal to
translation plus g because if
this letter is a vowel we just wanted to convert it into a g. otherwise though
I can basically just say translation is equal to translation
plus letter. so in the case where we have a vowel I'm adding a g onto
translation and the case where we don't have a vowel. I'm just adding on whatever letter it was on to translation so
finally down below this for loop we just want to return the translation so I'm just going to say
return translation. and now we have a awesome translate function
and it should probably work so let's come down here and we'll test it out so we only allow a user to input some information so
I'm basically going to call this function. actually we're going to print it out so we'll print this out and I'm going to call this function
translate and inside of here I'm actually just gonna pass whatever the user
inputs so I can just say input and inside of these parentheses I can say the problem so
enter a phrase, and so now I'm basically combining all these statements together I'm saying I want to print
out the translation of whatever the user enters in.
so let's go ahead and run this program and we'll see how we do so I'm gonna run the program
it says enter a phrase actually let me format this a little bit better.
okay that's it says enter a phrase.
so let's go ahead and do that. so let's just type in the example we use before him and say dog
and so now out pops the answer which is d g g. so that's kind of cool.
and we can just keep running this as many times as we want so I could type only. to be or not to be,
this is like a little bit longer of a string, and you can see it translates it into our draft language.
so that's basically how we can create our little a translator out and that's pretty cool.
as you can see we're using a for loop in combination with an f loop and that's a really powerful structure
and actually there's one place over here where we can make this a little bit more efficient so instead of saying
if letter in this string. you'll notice here I'm checking to see if it's in
all the lower case and the upper case. I could actually just say if letter dot
lower in and now I only have to type out the lower case letters,
and it's still going to do the same exact thing so that's a little like hack or whatever that we could use
and there's also one more problem with this program so you'll notice down here we're setting the translation equal to the translation
plus g. but the problem is if I was to start my word inside of the phrase with a capital vowel
so in other words if I said like on, you'll notice that when this gets printed out, it gets printed out as lower case g and
so it's not keeping our uppercase syntax and that's kind of a problem so
we can actually use another if statement in here and we could check to see if
letter dot is upper and if the letter is upper case
then we can just set the translation equal to the translation plus a capital g,
otherwise, we can just set it equal to the lower case g. it's a now we're able to control
both of those situation so let's just test this and see if it works
and to rephrase say on. and now we're keeping that capital letter so
those are just a couple different ways that we could make this program a little bit better, but the basic concept is we have a for loop
and then we have some if loops inside of it, and we're calling this awesome function that can translate a word for us
in this tutorial I wanna talk to you guys about comments in python. this is going to be a pretty short tutorial I just want to give you an overview of what comments are and how we can use them in our python programs.
so over here in my python program I just have this line here it says print comments are fun.
so if I run my program down here inside of the council it's going to print out comments are fun right,
so any code that I put over here is going to get executed by python, but there's actually a special
line of code that we can write and it's called a comment and a comment is basically a line inside of our python file that's just not going to get rendered by python,
so in python sees it as just going to ignore it it's not going to execute its not going to print anything out. it's just gonna kind of ignore it and comments are
basically just used for us humans, so a comment is used for like me or another developer to
write a little comment a little like plain tax dino comment inside of a file
nor retreat of a comment I could use this hashtag symbol. so in click hashtag and now I'm
writing a comment. so I can write whatever I wanted in here I could say like this
program is cool and you'll notice when I run the program
that doesn't show up anywhere. it doesn't matter what I put off at halftime this is just like ignore by python,
it's just for me or another developer to come in here and use. so a lot of times you want to write like a little note
inside of your python files or maybe you can write yourself a little reminder. or if you want to write
a line to lay explain a line of code to for example I can write a comment that would explain
this print statement sighted sailing this prints out a string right
now anybody looking at my file would be able to read this and they'd be like, oh that's what this does ok
cool so comments are useful for leaving little comments in a python file
you want to make comments on multiple lines. you can just create a new line and use another hashtag
and so that I could type out whatever my next comment was I mean generally if you're gonna put comments on multiple lines you want to just use multiple hash tags
plot there's actually another way that you can write out comments so you can use a triple
quotation marks so I'm typing out these single quote and I'm typing not three times
so you can see here, up here we have this three times we have this three times. so in here I can you know write any comment that I wanted so I can
put you know as much taxed up here as I would want. and same thing when I run this program.
it's just not going to get rendered so this is another way to make multiple line comments
but the link official python like style guides or whatever just recommends that if you're going to put comments on multiple lines you used these hashtags so
you know you can really do whatever you want but if you want to be like super python official then use these hashtags
comments can also be useful for doing something called commenting out a line of code.
a lot of times when you're writing a program, you might have a line of code in there that is maybe like potentially making stuff up.
and so what you can do is you can actually comment out that line of code so I can put a comment in front of this line of code.
and now when I run my program. the program is going to run, but it's not going to use this line
so sometimes if you're trying to see if like a line of code is causing you trouble or if you want to see what your program would be like without a line of code
or even like a block of code, you can just commented out. and that way you're not actually deleting the code
from your file you're just commenting it out so pythons gonna ignore it, and those are really the two uses for comments as to write little notes
right little comments about different things or to comment out code and as you go forward and python
I'm sure you'll find uses for comments
in this tutorial on a talk to you guys about catching errors in python,
and a lot of times when we're writing python programs you'll encounter of an error so different situations could come up
and your program might throw an error or it might throw an exception. and a lot of times when these
situations happen though completely stop your program from running. and what we can actually do is we can watch out for
you know a certain specific errors that are going to pop up in our program and we can actually handle them.
so instead of our program just breaking and stop executing, we can actually handle those errors and do things when they occur so
I want to show you guys an example of using this down here I'm saying number is equal to its
input enter a number, basically what's happening is I'm prompting the user to enter into a number using this input command
and then I'm converting whatever they entered into an integer. so as long as they enter in like a valid integer I can convert it into an integer.
so I can convert it into like a whole number and I can store it inside of this number variable that I'm just printing it out so let's try to execute this program,
I'm going around the program and you'll see down here it says enter a number, so we can enter in like four for example
and when I answer in four everything's going to work and it's just going to print out four and everything is right in the world.
and actually I'm going to modify this appears it's a little easier to see. but what if we run the program again.
so it says okay enter your number. let's say that I break the rules might don't enter a number so it is ignore what the prompts says and I put
you know some random text in here, now when I enter this the program's going to throw an error,
you see down here it says value error invalid literal for ants base
with basten basically paved and answering an integer like you said you would
write. we told them to enter in a number they entered in text so it broke the program.
and this is a situation that happens a lot so there's a lot of them in situations where something can just go wrong in our program.
and up until now we've just kind of accepted it as a reality but if you're writing a real live python program
you don't want something like this to trip up your program, you don't want the entire program to break when somebody just forgets to enter in a number
right you want to be able to handle all these different situations, and in order to handle them we can use
something called a try except block in a try accept blog will basically allow your programs to try out
a piece of code, and if everything goes well then we're great like we could try out entering in the number
and if the user enters into correct number great, but if they don't enter in the correct number then we can basically like
account for that so they entered it in something like a string when they're supposed to render in a number. we could tell them like hey you entered in the wrong thing
so I'm sure you guys how we can use these try accept blocks are going to come up here and I'm just going to say try
to make a colon. and I want to indent. both of these things. so both of these things are going to be inside of this
try block. now I'm going to make a new line I'm going to come down here and I'm just going to tape out
except. and I'm also going to put a colon here, and down here I'm just going to print something out so I'll just say like
invalid input. so now since I put this code inside of this try block.
if the user enters in something wrong it's going to be able to catch it so it'll be able to catch what the user does wrong
and print out invalid input onto the stream. so let's go ahead and run our program.
and it's just gonna say enter a number. so we're going to ignore that will enter this end and now instead of yelling at us in breaking the program
just says hey invalid input. so was able to handle the error they got called it was able to handle the invalid
input error basically just told us hey nowhere input. so
this is a really powerful thing that we can do in our python programs basically just to protect our programs
right if I want to have my program running for long period the time I can't have something as simple as an invalid
input trip it up so I can catch that invalid input using these try except blocks.
but here's the thing you notice that this little guy down here is getting highlighted. and let's just see what it has to say so it's basically saying
two broad exception clause. and this is a message that we're getting because when I just say accept
this will catch any error under the sun so anything that can go wrong in my program for the most part this is gonna accept it so
let me give you guys an example, let's say I had in my program I was creating a variable right so I'm
gonna create a variable called value and I set it equal to ten divided by the zero.
now if you know anything about math you'll know that you can't divide a number by zero it's not possible. so
the program isn't going to be able to handle this and you'll see that this is going to throw an error for us. so I run the program.
it basically says zero division enter division by zero, we're not allowed to do that right.
if I took this and I put this down and out of this try block.
and I just pasted it in here, it's going to get caught by this exception
that we wrote down here so it's going to get caught by that accepts and when I run the program you'll see it says
invalid input. but the problem is that we didn't input something that was invalid
right we just divided by zero but it wasn't able to handle that. right so it could not divide by zero
it through an error. so even though we didn't get an invalid input even though it was because we divided by zero it's still printed this out.
and this brings me up to another point is we can actually catch or we can accept specific types of errors.
so for example in this case we got a division by zero error in this case we got
an invalid input air I we we put something in that was wrong you can convert the value.
so I can create two different except blocks to catch two different types of error so down here
I can just make a space and I can specify the type of error that I want to catch. so when we divided by zero it was
zero division air. so if I just put zero division error in here. now it's going to catch that zero division later so I can say
divided by zero. I can also make another accepts I could say accepts
and we can catch the other exception that we got so I think it was a value air right now is
we put in the wrong type of value inside of that inputs so now we can print out
invalid input. so with these two except blocks were basically able to handle both of these
situations so for example if this ends up breaking the program this division by zero,
then it'll be able to catch that so down here it'll tell us. hey you divided by zero,
but if I was to get rid of this line of code, and I just entered in the number wrong
so I came down here and I answered in a string set of a number. now it's going to tell us invalid input so
we're going to be able to specify what happens when certain things break. so when we get a valid it
when we get a value error we can say invalid input. when we get a zero division error we can say divided by zero and depending on what breaks depending on what happens,
we can actually do different things, and I want to show you guys one more thing we can do which is
we can actually store this error as a variable. so I can say except
I can say as and I can type in a name here so a lot of times people will just say like. ye are our
and down here I can print out the actual error so I can just print e r r.
and so if we end up dividing by zero. so if I say answer is equal to ten divided by zero.
we're going to throw this error and it's going to print out what went wrong so now I can run this program
and it just says division by zero so it just printed out the error that we got.
so that's another useful thing you can do is you can actually print out the specific error that got thrown.
now a best practice in python is to use these specific error so you always want to accept
and except for a specific error when you don't want to do is just say
except and then just accept anything under the sun. it's this too broad
and if not in good practice and pythons you wanna be catching specific errors like this
in this tutorial on a talk to you guys about reading from external files in python,
you know a lot of times in python you're going to want to read from files that are outside of your python file,
so you might want to read information from like a text file or a csv file or like an html file.
and you can actually use something called the python read command and it will allow you to
read a file that is stored outside of your python file so you can use these files to get information or you can
parse through different files and do different things. so I'm gonna show you guys the basics of reading files
opening files closing files doing all that stuff over here I have this file
called employees dot text and it basically just lists out a bunch of different employees like
these can be employees in an office or whatever. so it's just listing out all of this information.
so let's say that inside of my app dot python file I wanted to read the employees
inside of that file. the first thing I have to do is actually open that file from inside
python. so I can use a special command called open. so I can say open
and then in here I can type in the name of the file that I want to open so this is either going to be a relative path to the file.
an absolute path to the file or just the files name if both files
in the same directories on my case app dot python and employees dot text are in the same folder
within the same directory so I can just type out the name of the file liking to say employees dot text.
and I want to put one more thing inside of this open function, and it's going to be the mode
that I want to open the file in which you could actually open files in a couple different modes
and the first mode is called read so I just put an r here and that's going to stand for a read
and this basically means that I only want to read the information inside the file I don't want to modify it I don't want to
change it. I just want to read it I just want to see what's in the file and do some stuff without information.
another mode is called right so I can type in this w and writing basically means that you can
change the file right you can write new information you can change existing information.
there's another one called a and a stands for a pen. and it's basically means that you can
append information onto the end of the file so you can't modify any of the information in the file.
you can't change any information but you can add new information. and there's one more which is
r plus and this basically means read and write so this will give you
all the power of reading and writing. so in our case, we are just going to be working with
regular are so we're going to be reading from the file. now this open function will essentially just
open the file so it's going to like golden map file inside of our file system opened it up
and it'll allow us to read through it but generally we're going to want to store this opened file
inside of a variable so I can create a variable and we can just call it
employee file. and I'm just going to set it equal to this open function.
so now the open employees dot text file and all the content inside of it
is stored inside of this employee file variable. now whenever you open a file
you always want to make sure that you close the file as well so just like we have this open command
we also have in close function so I can come down here and say. employee
file dot clothes. and this is essentially just going to close the file so we're no longer going to be able to access it and
generally it's a good idea whenever you're opening up a file and you want to also make sure that your closing the file at some point so generally
once you're done reading it and you can just close it. so that's kind of like how we can open and close the file.
now let's talk about how we can get information from the far right there's no point having the file that we can't figure out what's in it
so there's actually a few different functions that we can use on this employee filed to figure out what's inside of it.
and I'm gonna show you guys some of those so I'm just going to make a print statement. and inside this print statement will basically just print out some information
about the employee file so the most basic thing we can print out is just the entire
contents of the file. but before I do that I want to show you guys how you can check to make sure that a file as readable.
so before we do anything else generally is a good idea to make sure that it's possible to read this file.
and there's a function inside of python we can use called readable so I'm just going to type out
in poorly file dot readable. and this is going to return a boolean value and it's going to tell us whether or not we can read from this file so I'm going to run my program
and you'll see down here we get a value of true and that's because we set the file with
a read mode so it's in read mode we can read from it. if I was to put a w here so if I put like right
now redouble is going to be false because we can no longer read the file we can only write
to the file so I'm going to change this back to our so we can just read it.
so once you figure out whether or not the file can be read from let's actually read it so
there's another function called employee file dot read and this is basically just going to spit out all the information in the files
so when I run the program it's just going to spit out all of this information right all the information isn't that was in that file.
I can also come down here and we could read an individual line inside this file so I can say employee filed dot
read line. and what this is gonna do is it's gonna read an individual line inside of this file so
now when I run this program you'll see it's just reading that first line in the file. and this red line function is actually just
reading the first line and then it's basically like moving a little cursor onto the next line so
if I was to copy this line of code, and then printed again down here
I'm saying employee filed out read line. so it's going to read the first line and then when I say it again it's going to read
the line after that so this is actually going to end up printing out the first two lines in the file.
when I run this program you'll see we print out jim sales men and dwight salesman. so if I was to do this multiple times I could technically print out
every line inside of this file. and you can see we can do that
and so that can be pretty useful for reading multiple lines in a file but there's actually another function that is better at doing that.
we can say instead of employee father read line we can say dot read lines. and what this is gonna do is it's going to take
all of the lines inside of our file and put them inside of an array. and so now when I print this out you'll see we have this array down here it says
jim sales men that's the first item in the array to white salesman the second item in the array.
it's basically taking each line and putting it inside of an array. so if I want to access a specific line
I can just refer to it by its index in the array so if I said one. now this is going to give us that
do white salesmen line because that is at index position one inside of the array.
you can also use this reliance function with a for loop so I could come up here and create a for loop
is going to save four and we'll say employee and
employee file and then for each employee we just want to print them out so
it actually started we have to put employee file dot read lines up here
and so now there's a loop through all the employees in this employee filed out read lines array.
so we can actually just print out the individual employee and now this will print out all the employees
inside of that files is basically printing out each line in the file. and that can be pretty useful.
so you can use all of these different functions like read read line read lines
readable you know there's a bunch of these different things that we can do to get information from a file. and so there's a lot of cases where you're going to want to be able to parse through information in a file and this is a
awesome way to do it so just to recap in whenever you want to open a file and read from it you can just use this
open function type in the name of the file and then the mode, which in our case is going to be r.
then you can do all sorts of stuff with it and you always want to make sure that you close it when you've done that's just good practice so
that's the basics of reading from files and hopefully you guys can use this in some way shape or form in the future.
in this tutorial on to talk to you about writing and appending to files in
python. so one of the cool things about python is it allows you to work with external files so I could have like an external text file and
I could actually like completely read all the information in it I could pass through it use that information to do certain things,
but it isn't a reading a file I can also write a file and that's what I want to talk to you guys about today's writing new files and appending onto existing files
over here I basically just have some code written out and this essentially just reads information from this employee's dot text file so you can see over here,
I am specifying the mode which is r and that stands for read and then down here under his reading
all of the contents of the file and spitting it out on the screen. so I'm gonna click the play button over here,
and you'll see that if this executes so it's printing out all of the
lines of code in our text file so over here I'm in this employee's dot text file
and it just has all this information like employees in an office. but let's say that I wanted to add another employee onto here
right ? let's say that a new employee joined our company is that we wanted to add them onto this list.
well I can come over here to my app dot python file and instead of reading from the file
I want to append it to the files I want to say a and appending to the file basically
basically means that you're adding some text at the end of the file so wherever the file ends you're just going to add some text
onto there. so what we can do is we can actually add another employee into the file.
so instead of printing something out I'm actually just going to say.
employee file dot right. and when I say employee filed out right I'm going to be able to write something to
the end of the file so I can basically does right whatever I want so why don't we add in another employee
into our employees dot text file so we can add in another employee why don't we say like toby.
and he's going to be in human resources. so now
when I run this program. it's going to add toby human resources onto the end of the file somewhere on my program.
and you'll see that nothing shows up down here in the council. but if I go over to my employees dot text file.
all of a sudden we have a new entry over here it's toby from human resource is right so I was able to
append a line onto the end of this file. but here's the thing you need to be careful when you're writing to files because you can actually mess up a file
very easily for example I already added toby here into my file. but if I was to run this program again,
you'll see that over here in this employee's dot text file it when I hadn't added toby again
right so it added this employee here again and also you'll notice that in this case,
these employee didn't go onto the next line I accidentally ran my file again and all the sudden it messed up
this file over here and so appending you really need to be careful because if you actually go under file again or have you
you know, append something on something wrong to the file it's permanently it's getting saved inside of the file.
so I want to talk to you guys are a little bit more about you know appending another thing we can do let's say we wanted to add another
employee and you'll notice over here in this employees that text file when I appended it on again
it got appended to the end of the existing line right so the first time I had
a new line there but if you don't have a new line at the end of your file and you all and you want to add a new line,
you're going to have to add some special characters so let's add another employee and we'll call her
kelly, and let's just say kelley is in
customer service so kelly is going to be in customer service. and if I want to add this employee onto the end of the file in a new line I'm going to have to put a new line character in front of it so I can say
backslash n and this will upend this entry into the file
with a new line so on a new line so now when I run this, you'll see we get kelly from customer service
on her own line. so you want to make sure that you're aware of like these special characters that you can use they call them
escape characters and you're in time you're audi onto a file you want to make sure that you're adding on exactly where you want to add on.
so in addition to appending to a file. I can also just like overwrite a file or I can
write an entirely new file. this is as we already have this open instead of appending to the file.
why don't we just write a file so I'm going to use this w. and now
if I say employee filed out right because I'm using w and I'm not using
a, it's actually going to override the entire file and it's only gonna put this inside the file so
when I run this and we go over to this employee's dot text file you'll see we only have one line inside of this file now it's just
kelley customer service. that's because I was using double you not a when you use w it's just
overwriting everything that's in that existing file. you can also use w to create a new file
so over here I could say employee file as he could to employees one dot text.
and now what's going to happen is when I run this it's going to create another file for me song in a run this
and you'll see over here in my file browser. we have this new file employees one dot text
so if I open this up. it has exactly the same stuff as in this employees file, but it basically created a new file for us and so a lot of times you're going to want to create a new file,
and you can use different extensions to so if I wanted to create like a web page I could say
index start each tier mel and I could also add in some each team malcolm here so
if you don't understand html don't worry about it but if you do I can put like a paragraph in year
another paragraph like this is html basically ht mouth like a webpage.
and the point I'm trying to make is that you can write out a webpage inside of python by doing something like this so
now when I have played this we get this index style html file. and it has some
html inside of it so that's one way that writing to files can be really useful you can
overwrite an existing file, you can write a new file and create it, or you can append onto the end of a file and
there's tons of applications for writing to files and pythons and great language for working with reading writing
doing all itself with files
in this tutorial on its altea guys about using modules in python. now a module is essentially just a python file that we can
import into our current python file so for example if I wrote a python file that had a bunch of like useful functions are useful variables are you know other things like that.
I could take that file I could import it into the file I'm currently working on and I could actually access
all of those functions all those variables. all the stuff from that external file
inside the file that I'm currently working on so I'm sure you guys how we can use module and then we'll talk about like
you know where you can find awesome modules and and really why modules make python and awesome
language, so over here in my text editor actually created this file and it's called
useful tools dot python and basically this file just has a bunch of
sort of like useful tools that I might want to use in one of my progress, she'll see over here I have some variables this one is telling me how many feet are in a mile.
this one's telling me how many meters or a kilometer. and then we have this list here which lists out all of the
members of the beatles, am I also have a couple different functions down here so I have this get file extension function.
and this basically just was you know you give it a file name it'll tell you what the extension is, and then we have this other function down here which
simulates rolling the dice so you pass it a number bypass it like a six it would roll a six sided dice
a passive nine at roland nine sided dice etc so this is like a pipe on file that I wrote.
and it has some useful stuff in it, and honestly there's a lot of stuff in here that I might want to use in the
other python files that I work with, so let's say I'm over here at this app dot
python file and I'm thinking to myself, ha, I think I could use one of those functions
that was inside of that useful tools file actually yeah I need to simulate rolling the dice in my program
well instead of having to go over here copy this function and then paste it over here in my program
I can actually just import this useful tools file and I'll be able to import all of these functions and all of these
variables and attributes. so the way I can do that is by coming up here and I'm just going to go right at the top of my
file and I'm just going to say. import. and then I want to type in the name of the file that I want to import it so I was going to say,
useful underscore tools and pythons going to be smart enough to know that it should go off and
grab all the stuff from this useful tools dot pi file so once I've used that important statement
I can actually use all of the functions inside of that useful tools file. so
for example I could simulate rolling the dice I could say useful tools.
dot, and now I'm actually able to access all of the attributes from inside that file so when I say useful tools dot
you'll see down here and my little suggestions menu it's telling me like beetles feet miles
get file extension meters and kilometers roll dice. so it's giving me access to all of the stuff that was in that file so over here I could just say like
roll dice and we could pass this like a ten will roll a ten sided dice. and now this should actually
be able to run that function so will simulate rolling a ten cited diet as you can see we got four
and this is a really core concept in python which is
importing functionality from external python files and this is like
huge in python and this is seriously going to change the way that you create your python files
so you'll notice like I didn't have to copy any functions or any variables or anything
over into this file and yet I was able to use all this stuff that was inside this useful tools
file so that is huge and honestly, it's going to save you a lot of time because you can write something once and then you can
import it into your other files. so that's really the basics of using modules mean modules are very simple module as any external python file
that you want to use some stuff inside of it. I want to show you guys a place where you can go to find a huge list
of modules so I'm going to go over here my web browser. and among this website
it's actually like the official python docks and basically all I did to get here was just typing
list of python modules and google, and depending on the version of python you're using you're gonna want to make sure that you click the right one.
I flicked on the version three one and over here on this page you can see there's just a huge list
of python modules, and these are basically modules inside of python that you can just access so
essentially there's like all of this awesome code that's already been written for you and so if there's some sort of functionality that you want have inside of your python program,
chances are there's a module in here that has that functionalities of all sorts of stuff
you can do I mean if you just look through this list like you'll see a huge collection of basically just
you know a bunch of either python variables are python functions just you know things that you can use to make your programs better.
so here's what I would recommend like head over to this page and to sort of look through a lot of these different module is no see what you can see
and honestly like if you click on one of them it'll bring you to a page that talks about like how to use they'll tell you like
how to import it and just you know some basics about it and this is sort of like the list
that on the official python docs but he's using the python community is huge there's tons of developers who use python.
and you can actually find a lot of third party modules so if you just go online and you know look up like python module for doing actual
python module for doing why chances are somebody out there has already written a python module to do what you're trying to do so.
if you get good at using modules and you get good at you know looking for them in finding them you can actually save yourself a bunch of time because
chances are that somebody is already written a module to do you know what you're trying to do are like
part of what you're trying to do. so now that we've taken a look at all these different python modules
I wanted to kind of dive in a little bit deeper into how we can actually use these things so
you'll notice here there's a lot of files right there's a lot of different modules that we apparently have access to in python but the question is
where all these files store right when I was over here in my program
for example I was using this useful tools dot pie fire like I knew where that was I created that file.
I was directly involved in making it and I just imported over here it was pretty easy right ?
but what about all of these files right what about all these modules over healy
where all of these stored and there's basically two types of models here there's built in modules which means they're just built into the python language so
we can't just automatically have access to them. and there's no external modules
and a lot of these external modules are just stored in basically the same
folder that we installed python on our computer so for example let's look at a couple of these right we have on linking
base sixty four bd be been ascii like if I come over here,
and you'll see I'm over here in milo file explorer I have my python project which is draft.
there's also this other folder over here called external libraries. if I was to click down on this
and I come down here you can see it's just the version of python that I'm amusing.
there's a folder here called lab and this is a very important folder and this is basically storing all of those
external modules so you can see if I scroll down here we have all of these different
like modules right so here's that base sixty four hears bd be right.
a lot of these external modules are stored inside of this lib folder and like is that there's no external modules there's also a few modules that are just like a built in
modules that are not can be stored inside of here and you can actually tell so for example if I was to come over here and click on
base sixty four. it tells me where the source code so the source codes in lab forward slash
base sixty four. we are able to see that right how is I saw that inside of my lib folder
this been ascii though for example if I click on this, you'll notice that this isn't
giving me a folder cause this is basically just like built in to python so we don't have to worry about
you lucky enough I'll just kind of like it just how it works. so some of these are external some of them are built in.
and I want to show you guys are in addition to using these modules races. there's a lot of good stuff here and honestly you could spend.
you know for years and years just learning about all these different modules. but a lot of times you're going to want to use modules that
other people have written and you know there's a lot of developers
who work on python and who write different modules so there's a lot of useful modules either that aren't included
in this list right they're not going to be inside of this lib folder by default.
and what we can actually do is we can install those external module is as third party modules
that don't just come preinstalled with python, and I'm sure you guys haven't do that really quick so
the first thing you need to do obviously is find a python module that you wanna installed you can download
and I have actually used one in the past. python docs it's an external module that you can use to
basically use python to create where documents which is pretty cool as you can like format where documents inside of it so I'm just going to look that up here
in google. I'm just gonna type in python docks and here's a thing there's tons of these
extra modules you don't have to use python dogs. I'm just giving you guys an example
but really it he just look up like useful third party python modules there's going to be lists of hundreds of these things online
or in my case though python docs has a website and it basically just has like some installation instructions are gonna come over here
and it tells me that I can install python docs using the command pip install python docks.
so this brings us to something I want to talk to you guys about which is a pip and pip
is essentially a program and actually if you have a newer version of python three it comes preinstalled with python three
and you can use pipe to install python modules. it's referred to as a
package manager and a package manager basically just allows you to like install manage
update and uninstall like different python modules so pip is extremely useful.
and in order for us to install python docs we're going to have to use pip somno sure you guys are how we can do that,
but what I want to do is open up the command prompt or the terminal on my computer. if you're on a mac you wanna open up your terminal.
if you're on a windows computer you want to open up your command prompt I'm using a windows right now, so I'm just going to come down to the search bar and type a and c m d
and this command prompts you to come up so I'm gonna click this inside of the command prompt we can actually use
pip firstly we want to do is check to make sure that pips install and like I said if you have a newer version of python three pictured calm just
pretty installed and it should do some work in here if you don't have a newer version of python three though,
you might have to install pip separately and there's tons of instructions online and how to install pip.
so I'm just going to check to make sure that I have to type in pip haven hyphen
version, and they should spit out the version of pip that I currently have. so as long as we have to
pip then we're ready to install an external or third party python
module. all I have to do is just say pick install and now I just want to type in the name of the python module so in the case of python docks.
it was just python dogs like that. now again you don't have to install python dogs
I'm just doing this for this tutorial just going to show you guys how this is going to work. but you know
what you want to do is go online and look up some third party external python modules,
and generally like I'd say ninety to ninety five percent of the time you're going to be able to just install them using pip.
in the off case that you can't install them using pip, chances are they'll be like some detailed installation instructions but out say
for the most part any late legitimate python module is going to be able to install using pip.
so over here to understand a pip install and add a module name so python hyphen docks
and when I click enter this is going to go off and install python dogs for ourselves, we enter
and it's going to go off and install everything we need for python docs. so you can see we have
successfully installed python docks zero point eight point six, so I'm sure you guys
where exactly this god placed so normally when we install a external
third party module. it's going to get put inside this limb folder. but it's gonna get put inside of a special folder in here called
site packages so slight packages is a special folder and if I open this folder,
you'll see now we have this docs folder and we also have this python dark zero point eight point six
pi three points sakes thought eg info folder so these two folders are basically
included in that module installation so you can see this docs folder has a bunch of different python files and
has a bunch of stuff in here that we can use. so if I wanted to use this inside of one of my programs
I'm just going to refer to the name of the module so in our case, it's just going to be docks.
so I used python docks in order to install it but we're going to use docs if we want to import it so
I could come up here and I could say import deal c x. and now I can actually use it so I can just say like docs dot whatever and you can see there's a bunch of different stuff down here.
there's like a document, document part image part there's a bunch of stuff that we can use with this and obviously
depending on the python module you install there can be different instructions. but you can see it got stored down here in this
site packages folder. if I wanted to remove this I could use pick to do it so I could just say tip
and install and we could just again saying that a module names of
python dogs and people now and install this on our computer.
so if I was to go back over to this folder, you'll see that those two that docs folder and then that
other folder disappeared so they're no longer here, and I'm actually not going to be able to use this anymore so
that's sort of the ins and outs of using modules now again there's tons of these modules and
I can be dozens and dozens of python courses covering each one of these modules, you know the built in modules the
modules that are included by default and external modules. there's tons of these things out there
and really as a python programmer now what you can do is you can go out and play around with these different modules.
I showed you the ins and outs of installing them and you can use pip to install all these different modules
and you know you can make sure that you have owned by checking the site packages folder or the lips folder but really now it's on you to just come and go out and
use these modules and don't shy away from this because modules are a huge part of python
you're definitely going to want to include them in your python stack.
in this tutorial on a talk to you guys about classes and objects in python
classes and objects are extremely useful in python programming and they can help you to make your programs
more organized and more powerful. so when we're in python we're dealing with all types of data
right and a lot of times when we're writing programs we're going to have to work with different types of data
and there's essentially like a few basic types of data we can deal with usually things like string cilic plain tax
numbers and boolean values those three are kind of like the main types of data that you're going to be working with in
python and we have all sorts of structures we can use to store that data you know things like lists or dictionaries.
but here's the problem is that not all information not all data not all things
can be represented using strings numbers or bullion's right, there's a lot of
things in the real world that we can't represent in automating a string or an array, or just a number right
in other words something like think of like something like a phone or a computer or a person right you can't really represent those things
in like a string or a number you know it in other words like the data types that we have available to us in python
can't cover that. and so what we can do with classes and objects is we can essentially create our own
data types. so I can create my own data type for anything I want python so
I could create like a phone data type and it could represent a phone so I could store all the information I would ever want to know about my phone
inside of that data type in and python we could create a class for it and
essentially what a classes is just saying hey here's another data type that we want to use in python.
so with a class you can essentially define your own data type and its super awesome and classes are extremely useful
causes are used in almost every single major programming language out there so in this tutorial I just want to
give you guys a basic introduction of classes and using them inside of python so
let's say that I'm writing a program, and I want to represent a student
inside of this program so maybe I'm writing a program for like a college or a university. let's say that in this program
I want to model a student like I want a model a real world objects and I wanted to be a student
right where we don't have a student data type and I can't really represent a student in just a single string or a number.
so I can actually do is I can create a class for a student and I'm basically creating like a student data type.
so I'm sure you guys how we can do that and create our student class it's over here. I'm just gonna make a new file.
wouldn't we get a new pipeline vase I'm just going to call it student dot pie
and inside of this student dot pi file I want to create a student class.
so the way that I can do that is just by typing class. and now I'm gonna type the name of the class
that I want to create. so in our case we are going to create a class called student so I'm just gonna say student.
and now we're going to make a colon now everything that goes inside of here is going to be inside of our student class so
everything that's invented like this will be considered a part of our student class
and basically what we can do inside of this student class is we can define a bunch of attributes about a student.
so essentially what I'm doing is unlike modelling a student I'm creating our student data type.
and I can use things like strings, integers and bullion's in order to
map out what a student should be in what a student should have. so I want to create something called an initialize
function. and the way I do that as just by typing out a d e f and I was going to take
two underscores, and then the word I am I t and then two more underscores,
and you also want to type out open close parentheses and inside of those parentheses we want to type out
self, and I'm on a colon after that. what I can do inside of this initialize function
as I can basically map out what attributes a student should have so we can essentially define like
hey, here's the student data type in python so what I want to do is add in certain attributes
after this self so I'm just gonna say self a comma. and now we can start thinking about
you know what values will represent a student inside of our python programs so
if I'm thinking lake unthinking something like name right so every student in our programs should have a name.
they also might want to have a major because they're in college, they probably also will have a gps,
so their grade point average like how they're doing in school and lets to find one more thing that let me think,
why don't we make a bullion and it's going to be called is on
probation and this will basically tell whether or not the student is on probation.
so essentially what I'm doing inside of this initialize method inside of this innate function is
I'm defining what a student is in our program. and so in this program
a student has a name, it has a major as a gps, and it has a value that determines whether or not it's on probation.
this right here is the student data type. so if I'm representing a student inside of my program now,
it has all of these attributes associated to it. and that's basically what I'm doing up here
now inside of this initialize function we actually have to do something and basically what I want to do is
assign some values so I'm going to be writing out some stuff and this might not make total sense
right now. but this is going to make sense in a second after we create our first student
object. so just stick with me right now and just basically know that we have to do what I'm doing over here so I'm just going to say self dot meme
is equal to name. and then I'm going to say self dot major because you get the major
self dot gps is used the gps. and I'm going to say self dot is
on probation is equal to is on probation.
so again this might not make a whole lot of sense right now but in a little bit this is gonna make
total sense so now that I have this student class defined I can actually use this class
inside of my other file so I'm gonna come over here into this app dot python file.
and this is just my main file. so I actually want to create a student right so
in that student class we defined the student data type and we basically said like hey a student has a name,
a major a gps and it says whether or not they're on probation dots like the template for what a student
is, but we can actually create a student so we can create an actual student and give it some information.
and that's called an object. so this student class over here
is basically defining what a student is so a class is just like an overview of what the student data type
is an object is an actual student so it's an actual student with a name a major and a gps.
it's not just this template anymore it's actually like a student that we're representing inside of our program so
in order to use that student class and create a student object I actually need to import that so
all I have to do over here just say from student and this is referring to this
student file. I can say import student
and basically what this is saying is from the student file. I want to import the student class.
so even though these are both student they're referring to different things so this is referring to the file.
and this is referring to the actual student class. so now that we did this we can create a student so
you can create an object of a class a lot like you would a normal variable so I can just give it a name
I'm gonna call this student one and I'm going to set it equal to student
and I'm gonna make an open and close parentheses and now inside of this parentheses.
I want to give this student a name, a major a gps
and ann is on probation value. so I'm going to say it will just create a fake student saw to say his name's
jim and he's studying business
and we want to give them a gps and maybe has like a three point one. and
finally we want to say whether or not this student is on probation so why don't we say false. so basically what I'm doing is I'm
saying that I want to create a student. so I want to actually create a student
object and rubber an object is just an instance of a class.
so the class is like an overall template it defines what a student is put an object
is an actual student with actual information so we could call student one now
this is a student objects. so I just want to show you guys, what this student object actually is and what we can do with it and then I'm going to talk some more about that
in it function from before so over here I'm just going to make a print statement
inside of here I just want to print out student and what's cool about
this student one object is I can actually access each of the attributes from inside of this object.
so if I wanted to get the name of the student I could say student one dot name and now this is actually going to print
out the student's name. so over here, you'll see it prints out jim
if I wanted I could print out the students gps and it's going to print out the students
gps three point one. so now that I created this student objects.
I can actually access the information about the student so essentially I'm just created a student
data type so I could create as many of these students as I wanted if I wanted I could create another student we could call it student too.
and essentially we do the same thing we just give it different information so we could say lake
pam and her major is art and she has like a two point five.
and let's say that she is on probation. so now I have another student student too so if I wanted
I could access information about that student we could say like student to dodgy p a and now this has given me
the dpj of student too. so basically what I did was I created a student data type
and I created student objects and now I'm able to represent a student inside of my program.
so let's talk real quick about all this stuff over here because I didn't really explain it basically what's happening is
when I come over here and I say student and I'm passing in all of these different values.
those are getting passed into this init function. so remember I passed in a name
I passed in a major at passing a gps. when we create that student we're actually calling
this function. and when I pass in the name the major and the gps those values are actually getting stored over here in this name.
this major this gps et cetera, right so I'm giving this student object.
all of that information. and down here. what I'm doing is I'm saying
self dot name as he put the name and basically what this means is the actual objects name
is going to be equal to the name that they passed in so self dot name as an attribute
of student, raises the student is storing a name the student is storing a major the student is storing and gps,
but that's different from this name this major in this gps remember and these are all just values that I passed in
there just parameters. so I need to take the values that I passed in and I need to assign them to the actual attributes of the object so I need to say
ok. the name of the student is going to be equal to the name that we passed in
one more time. the name of the student objects is going to be equal to the name
that we passed in the name of the student's major, is going to be equal to
the major that we passed in the student's gps is going to be equal to the gps that we passed in.
that's basically what's happening here so when I say self is referring to the actual object so
over here what I'm creating this student object. I'm giving it all of this information.
it's taking that information and storing it as attributes for the object.
so hopefully that makes sense I think that's about as clear as I can make it but the point is that now we have a student
data type. so now I can represent a student inside of my python
program and that's like a super powerful. and what's cool about classes and objects as you can do this with anything.
so in this example we created a student class and then we created student objects off of that.
but I can model any real world entity into this program I can model something like a phone
or I can model like a water bottle or I can model you know a keyboard or I can model anything that I wanted.
inside of my program I can just give it certain attributes right so that's what's cool about classes we can model real world objects.
and we can create our own data types
in this tutorial I'm gonna show you guys how to build a multiple choice quiz in python.
so basically we're gonna set up a little multiple choice quizzes and we'll have the user take the quiz and as they take the quiz
will keep track of their score and then at the end will tell them how they did so this is going to be a pretty cool video I'm excited to show you guys how to do this and we'll get to use things like classes and
if statements and loops in order to build these programs are we're going to use a lot of cool stuff in python.
the first thing I want to show you guys actually did this before I started the video it's this little a ray is called question prompts.
and I basically just wrote out all the questions that are going to be. or I should say the questions I wrote out all the question prompts
that are going to be inside of my multiple choice quiz so the first one just says what color are apples and the answers are
red, purple or orange. and the next one is what color of banana is the options are
teal magenta and yellow, and the third question is what color are strawberries and the
options are yellow red and blue so this is obviously a very very easy multiple choice quiz but
I just kind of wrote out the questions beforehand so I didn't have to spend time doing that. so let's talk about how we can build
a multiple choice test. well. the first thing I want to think about is how can I represent the questions in the test
right over here we have the question prompts. but there's actually two parts to a question when you think about it,
there's the prompts in other words like the actual question itself. and then there's the answer to the question in both of those attributes needs to be
kept track of right I need to keep track of what we want to ask and I need a cap to keep track of what the answer is.
so what I'm actually going to do is create a question class so I'm gonna create a little data type for questions
and inside of that question class will be able to store the question prompts, and will also be able to store the question's
answer, so I'm just gonna come over here to my folder and I'm going to make a new
python file and we're just going to call this question dot p y so we'll call a question up high
and inside of this question dot pi file I'm going to make a class so I'm just gonna say class
question. and I'm going to put a colon here. so inside of this question class we want to define it and initialize
function so I must say deaf to underscores in it too underscores,
and then we're going to type out an opening close parentheses self and that a colon.
so after this self we wanted to find the different attributes that will describe or that will
be included in a question so we're going to include a prompt everyone to include an answer so every question we'll have a question prompt
and a question answer now down here I'm going to take those values and assign them
to the actual class objects only to say self dot prompt
is either the prompt. and I must say self dot answer is equal to answer.
so now we have a question class set up and we can store all the information we need about a question.
so what I want to do now is go back over to my app dot python file, and we're actually going to create an array of questions.
so I have over here these three prompts, and I'm actually just going to create another array so we'll just call it
questions. and I'm going to set it equal to to open or closed square brackets
and we're gonna start creating question objects so I can just say the first element in this questions ray will be a
question, and we want to pass questioned prompts
zero. and the answer to the first question was a red green and that's the color of apple so I'm gonna pass
that first question. and I'm also going to pass the answer which is a, and you see down here I'm getting an error so
seeing unresolved references question so actually what we need to do before we can
create these questions is we need to import this question class on mckillop been here come up here and say
from question import question
so now down here in this questions array we're not getting that hair anymore so we created one question objects.
and I'm just going to create a couple more for these other ones so I'm just going to copy this one
and we will pace this down here,
or it's an hour creating two other questions in these ones are going to be one and two.
and the answer to the second question is c. and the answer to the third question I think is that the
new york yeah so it's cmb. so essentially what we're doing is we're creating
three questions. each one is getting a different question prompts, and they're each getting different answers so now we have an array of questions that we want to ask
on our test. so the next step is to actually write a function that will run the test right
it has to ask these are the questions and it has to check to see if they got the answer right so
down here lower in the file let's create a function. so I'm just going to say death.
we'll call this run test and inside of his prentices were going to take one parameter into this function.
we're going to take a list of questions so I'm just going to say questions. so this is basically going to be a list
of question objects that we want to ask the user. so once I've been here all I want to do is a loop
through all the questions so I want to loop through each question I want to ask it to the user.
I want to get the user's answer and I want to check to see if it's right, and we need to be able to keep track of how the user does through the test so I'm gonna create a variable called score
and I'm going to set it equal to zero, so every time the user answers a question right will increment this
score variable right so what I want to do is like I said loop through all the questions in that questions array so I'm going to create a for loop
I'm going to say for question in questions.
so in other words for each question object inside of this questions array. I want to do something.
and basically the first thing I want to do is ask the user the question and I want to store their response inside of a variable.
so I'm going to say I wanna make a variable down here called answer. and this is going to represent the
user's answer to the question. and I'm gonna set it equal to input
and I need to give this a prompt so I'm actually going to give this the prompt for the questions I can just say
questioned dot prompt. so now I have the answer that the user entered in which is stored inside this variable.
so we want to check to see if they got the question right. and I can do that using an if statement so I can say if
answer and this refers to the student's answer is equal to
question dot answer so I'm checking to see if the answer that the student gave as equal to the answer of the current question
that we're asking. and if this is true, then I just want to increment score so I'm going to say score
plus equals one and this basically just means we're adding one to the score. so the last thing I want to do inside of this function is just
print out the results I want to print out how the user did so down here I'm just going to say,
print and I'm basically just going up are not like hey you got like two out of three questions are you got five out of six questions right
or you got zero out of ten questions right well what does per not how they did so to say to you got.
and now I want to print out how many questions they got right so this is just going to be this score.
and in order to print a number alongside of a string like this I'm going to have to say s t r,
and then type in the number so say str score so basically say you got
however many they got right out of so we use this little forward slash. and
now we'll just say how many questions there were so we can say. and then I'm going to have to convert this to a string because it's going to be in numbers we can say string
and then want to figure out how many questions were in that questions array so I can say. ellie ann and inside of here we can just say
questions so this is kind of like this long state and just to turn out how many questions that were
so that over here to say correct. so now we have this print statement.
and it's just going to be printing out how many questions they got right. so let's see if
this works the last thing I need to do is just call this run test function so I'll say
run tests. and I'm just going to pass it that questions are ready to be created before so
we created this questions array with all of these question objects inside of it. I'm basically just going to pass that into this run test
function. so now let's run our program and see how we didn't hopefully we don't getting errors.
there's a lot of code there so it's possible that we might. okay so this is what color are apples has a tough one I once put
a. so we'll get the first question right ? what color are bananas. let's get the second question wrong
so I'm going to say be bananas aren't magenta and we'll get the third question right so it says what color are strawberries
output be cassettes the right answer, so now you'll see that our program prints out
you've got two out of three correct. so not only did to ask us all the questions and get our input for each question
but it also kept track of our score and it printed it out so why don't we run through the tasks one more time.
and we'll just like get two wrong this time so we'll get this one wrong I'll get this one wrong and I get this one right.
so now it says you got one out of three correct so say would actually great our test. and
what's cool about the program we just wrote is if I wanted I could add another question into here
and it would automatically be able to ask it so it doesn't matter how many questions we put in here
it's just able to ask so really the point I was trying to make with this whole video was just how we can use something like a class
in order to model a real world entity. so for example we created this question class.
and we were able to store all the information about a question that we could ever needs were ill bizarrely the prompts and the answer,
so we created our own question data type and then we were able to create a bunch of different questions,
pass it into this ron test method, and it was able to grade the test and just run the test
really easily so that's kind of the point. so hopefully this makes sense. you know this was a lot of code
so if you don't fully understand what I did go back watch the video you know, try to cobble times on your own and see if you can create your own multiple choice test
in this tutorial on talks you guys about class functions in python so
a class function is essentially a function that we can use inside of a class and it can
either modify the objects of that class where it can give a specific information about those objects.
over here I have this student dot pi file and inside of here I created a student class I was headed class student
and I gave this student a couple of different attributes I gave it a name, a major and a gps
so I can give this student. all of this information so when I create a student objects. it'll have
all of that information in it. now over here on this app dot pi file it actually created to students
so student one is oscar who was studying accounting and has a gps unit three point one
student to as phyllis who's studying business and she has a three point e.
so what we can actually do is we can use functions inside of these class files so I can actually define a function
instead of this student class and then all of my student objects could access it.
so for example, I can come down here and create a function and let's say we wanted to create a function
that told us whether or not this particular student had honours so whether or not they were on the honor roll right
basically like, are they like a really good student so I can define a function
call on honor roll and basically what it's going to do,
it's going to tell me whether or not this particular student is on the honourable and
let's basically just say the rules are being on honor roll is you have to have a gps iif three point five or above.
so here gps three point five or above that means you're on the honor roll well over here I could actually
write the code for that so I could say if self dot gps.
and when I say self over here this is referring to like the actual students gps
and you'll notice over here I have to pass that in as a parameter. and that always has to be the first parameter so I could say if
self dot j e p a is greater than or equal to the read point five.
then we can return true because this student is on the honor roll
otherwise an else we can just return false because
if their gps isn't above a three point five that they're not on the honor roll. so
that's essentially our little on honorable function and you can see it's a very small function, but it provides
a service to the objects of this class right it allows the objects of this class to
figure out whether or not that current student is on the honor roll so over in this app dot pi file.
I could just print out that values so I could say print and I'm gonna see if
student one is on the honor roll. so
now when I run this you'll see it should print out false and is putting out false down here
because student one only has a gps of three point one. if I was to do the same thing on student to
students who has a gdp of three point eight so we should return true. and that's exactly what happens so
essentially a class function is just a little function that can be used by the objects of the class and I would say this is a pretty good example of
what a class function should be doing should be like giving us information about the class or it could also be like modifying information about the class.
and so that's the basics of using functions and classes I mean this is a pretty simple tutorial but I really just wanted to introduce you guys to the concept
of pudding met functions inside of classes this is going to be really useful and
if you're making a class you always wanna think about like what functions can I put inside of here that will
you know essentially healthy user to either figure out information about the object or
modify different values in the objects
in this tutorial on antarctic guys about inheritance in python. inheritance is basically where we can define a bunch of attributes and functions
and things inside of a class, and then we can create another class and we can inherit all of those
attributes. so I could basically have one class that has all the functionality of another class
without having to physically write out any of the same methods or attributes. so it that's confusing don't worry I'm
sure you guys exactly what this is in this video so let me show you about some stop I have set up over here.
I created this class called chef and over here we just have this class chef.
and inside of this chef class we have three functions so the shaft can do three things.
the chef can make chicken. the chef can make solid and the chef can make
a special dish. and whatever the chef makes a dish he basically just says the chef makes a chick in order the chef makes
a salad or the chef makes barbecue ribs for this special dish. so basically just
saying whatever the chef is doing so if I was to come over here to my app dot python file,
you'll notice that I'm importing the chef so I'm basically allowed to use this chef class now,
and I can say my chef is equal to shafts I'm creating a new chef. so now if I came down here and I send my
chef dot make chicken, when I run my program.
now it's going to say, the chef makes a chicken. if I said make
special dish and are on the program. now it's going to say the chef makes barbecue ribs so it because that's the chef's
special dish. so I have this really awesome chef class and it works really well. but let's say that I wanted to create another class
to model another type of chef rise to this chef class is just modelling like some generic schafroff
we're representing some generic chef in our program, but let's say that I wanted to create
a class that modeled the different type of chef for example, let's say we wanted to create a class that modeled a chinese chef.
so instead of just a normal chef this is a chinese chef, well I actually created a file over here called
chinese chef dot python. so we can actually use this chinese shaft out python file to create our chinese
chef class tom's going as a class. and over here I'm just going to say chinese chef
and basically I just can define everything that the chinese chef can do,
but let's say that our chinese chef can do everything that are generic chef can do.
so the chinese chef is like a special schafroff it's very specific type of chef. but let's say that this chinese chef
can do everything that the normal chef can do so the chinese chef can make chicken can make salad,
and can also make a special dish. well if I wanted to give this chinese chef, all of that functionality.
I could just come over here and I could copy all of these functions. and I can paste them in here
and so now the chinese chef can do everything that the other chefs can do, but let's say that in addition to all of these things the chinese chef
can also make a special dish called fried rice so I could say deaf
and we could say make fried rice. so the chinese chef has this extra
function which allows it to make fried rice. and over here we just say, the chef makes
fried rice. and let's also say that the chinese chef has a different special dish so instead of making barbecue ribs.
the chinese chef makes lunge chicken. all right so now we have our chinese chef class set up
and you'll notice that it can do everything that the normal chef could do. so let's go back over to our app dot python file and I want to create
a chinese chef object. so instead of importing from chef we're going to just import it from chinese chef.
so I'll say chinese chef and we're going to employ for chinese chef.
so let's go ahead and make a chinese chef object sit down here I'm going to make one arrow to say
my. and then my chinese chef. we can print out this special dish so
remember the chinese chef can do everything that the normal chef could do so if I say my chinese chef da
make special dish. when I run this program you'll see the regular chef is making barbecue ribs and the chinese chef is making orange
chicken so everything works out. and this chinese chef also has an extra method called make
fried rice. and you can also make fried rice. but here's the problem right when I go over here to this
chinese chef dot pie. I went I wanted to use all of the functionality that was inside this
chuffed class I actually had to copy and physically paste.
all of these functions down into this file right and that's kind of a drag. and they especially like imagine if this chef had like
twenty or thirty of these different functions in it. we have to copy and I have the pace. all of those inside of this chinese chef
and this is where we can use something called inheritance so instead of having to copy and paste all of these functions.
I could just inherit these functions from that chef class and in order to do that,
I can actually just get rid of all of these, and I can come over here and
right next to where I'm saying class chinese chef inside of the parentheses I can say the name of the class that I want to inherit from so I can just say a chef.
and I'm also going to have to import this song to come over here and we'll say
from chef in poor shelf. so basically what this is saying is
inside of this chinese chef. I want to be able to use all of the functions that are contained
inside of the chef class so say that one more time inside of this chinese chef class
I want to be able to use all of the functions that are inside of this chef class so
by using inheritance here I'm actually able to come over here to this anecdote pi file.
and now I'm still able to execute for example like the make chicken function.
even though I didn't specify the make chicken function in here I didn't write it out.
I can still run this program and the chinese stuff. the chinese chef will still be able to make
chicken. so when I run this program you'll see it out here it says the chef makes chicken
and that's because I inherited the make chicken method from the chef class
but here's one thing that got my stuff if I come over here and I say make special dish.
remember the chinese chef special dish was supposed to be orange chicken. but now the chinese chef is going to be making barbecue ribs
because I inherited this makes special dish function
from this chef class is what I can actually do is I could come in here and I could override
that make special dishcloth so I could say death make special dish.
and down here I can just override it so I could say, the chef makes
orange chicken and now when I go over here and I run
this make special dish function. now the chefs are going to be back to making orange chicken so the chinese chef will make his
special dish. so that's basically what inheritance does it allows me to inherit
functionality from an existing class into the new class. and
I can actually just inherit all of it without having to write it out so I didn't have to write out
make chicken and make solid inside the chinese class, but the chinese chef
can still make chicken and salad because it inherited that functionality from the chef class
in this tutorial I wanna talk to you guys about the python interpreter. the python interpreter is basically a little environment that we can use to execute python
commands. so it's kind of like this little sandbox environment where we can test out and try out different
python commands are different python functions in a very safe and neutral environment.
so it's kind of like a quick and dirty way to write python and try different things out. the way we use the python interpreter is by opening up
opening up our command prompt. now if you're on windows there's a program called command prompt
if you're on mac there's a program called terminal. basically you need to open that program in order to use the python interpreter,
so I'm here on a mac but if you're on a window as you can essentially do exactly what I'm doing just inside of the command prompt.
so on mac here I'm just going to search for my terminal. if you're on windows you can just search for like cmd or command prompt in it should pop up,
so the terminal is basically an environment on our computer where we can
interact with the computer and do different things without a graphical user interface so normally when we interact with the computer
we're using things like buttons or you know windows and you know what we can move stuff around we can
you know basically just like interact with the computer. with graphics with the terminal or the command prompt
is a place where you can interact with the computer using text commands. so you know am I going to get too much into
what the terminal the command prompt dog but that's essentially what it is. so inside of here,
we can use the python interpreter and the python interpreter is basically just a little program
that like I said and we can write you know sort of python in so generally, all you have to do is go over to your terminal or your command prompt
and type in python three and since we're using python three on monotype python three.
but you can also just like normal python and I'm pretty sure that gives you python two. now here's a quick disclaimer.
I'm on windows, you may run into a problem where you can't use this python three command,
and it's possible that if you're running into that problem python python three hasn't been added to your windows
path variable. and basically what that means is your computer doesn't recognize the command
python three and that's the case all you have to do is just go and google how to add python three to your windows path variable.
it's really easy I'm not going to get into it in this video just because it's kind of outside the scope but if you're running into that problem.
that's probably it's not on your windows path variables such as google around for that and you should be able to find an answer,
but onsite python three and then click enter and it's going to open up this cool thing down here so
you can see it basically just says like here's the version of python. now I'm going to enter so we can have some like
new lines here and put down here this is the python interpreter so we can write
python code in here and it's going to work so I could for example I could write like print
and inside of here I could print like hello world. and when I click enter
you'll see that it prints out hello world. I could create a variable so for example I can say like number one
is equal to ten. I can say numb two is equal to ninety. and then I could print
out number one plus none too and it's going to be able to do that for me ?
I could also use awesome like a function so I can define a function in here, we can make a function that is called say hi and it'll take a name parameter.
and you'll see here when it saw I wanted to create a functional put these three little dots
and I can index in and we can write the code for a function so I can say like print
hello last name.
and now I have a function called say hi so I can break out of this by this entering again
and I would call the function so I could say say hi and we'll say out of me.
I'm like so now it's going to say hello mike so I can use a function I could use something like an if statement
you know I could say, I can easily afford the wicked use while loose.
I mean we can basically use all of the basic like python commands and you know inside of this python interpreter and like I said before.
it's essentially just an environment where you can test out python code. now this is not a place where you want to write
like any serious python scripts so if you're like designing and writing a python program
I would not recommend doing it inside of this interpreter ? it is, it's not a very intuitive environment it's pretty much just set up for some quick and dirty tests
we need to test somethin' out great this is a perfect place for it. you'll have to set up a file
you'll have to use like some id you don't have to execute a filing is going here it's quick it's dirty,
you get it done. but if you're writing an actual program. you definitely definitely definitely want to use
a text editor. the text editor is just going to be way more organized everything is going to be a lot cleaner and you're not going to get confused with like where stuff is and what you have so
that's the basics of the python interpreter, you know in the course I havent really been using it at all,
just because I think it's a lot easier to teach when we're inside of a file, then inside of here but
you know don't count this guy out the python interpreter is awesome a lot of people who use it and it's great if you just need a task
you know little bits of code out without having to set up some huge environment so python interpreter
definitely awesome out player out there you know have some fun and take advantage of it. hey things are washing if you enjoy the video please leave alike answered
garbage off academy to be the first snow and release new content also were always going to improve so if you have any
constructive criticism or questions or anything leave a common below finally if you're enjoying job academy and you want to help us grow
head over to draft academy dotcom ford sauce contribute and invest in our future.
Hey guys, welcome to this advanced Python course. My name is Patrick and I create free tutorials about Python and machine learning. In this course, I teach you all the advanced
topics that bring your Python skills to the next level. So who is this course for this
course is aimed at an intermediate skill level, you should already have some basic Python
knowledge. For example, if you just completed a beginner course and are looking for the next step, then this tutorial is perfect for you. And even if you are already in the intermediate
level, you can benefit from this because I share some helpful tips along the way. And we really go into detail of all the different topics. So here's an overview of what we will
cover today, the course is splitted into 21 sections. And in my opinion, every experienced
Python programmer should know about these topics. Alright, let's start. list is a collection
data type that is ordered mutable, and that allows duplicate elements. So let's have a
closer look at lists and what you can do with them. First of all, a list is created with
square brackets. And within these brackets, you put each element that you want separated
by a comma. For example, let's put some strings in here, banana, cherry, and an apple. And
if we print this, then we see that all elements are printed, we can also create a new empty
list with the list function. So my list two equals list. And if we print this, then we
see that this creates an empty list. And later on, you can append items. List allows for
different data types. So for example, we can say that our list can contain an integer,
a Boolean, and a string. That's all possible. And the list allows duplicate elements. So
if we put in another apple here, that we then we see that we have two apples now inside
our list. Now if you want to access an element, you do that by referring to the index. So
let's say item equals my lists, and then inside brackets, you specify the index, and note
that the indices start at zero. So index zero is the first the very first item in this case
the banana. And if we print the item, then we see this is the banana. And index number
one is the cherry. index number two is the apple. And now if we put in an index that
is too large, what will happen, then we get an index error list index out of range. So
be very careful with that. Now you can also specify a negative index, so minus one, this
refers to the last item, in this case, the apple minus two is the second last item, and
so on. Now if you want to iterate over your list, you can do that simply with a for loop
for i in my list colon and then do something this crazy, just want to print it. So then
we see that for each element inside our list, we print it and note that you don't have to
call this I you can call this also x or whatever you want. Now if you want to check if an item
is inside our your list, you can do it with an IF and then your item that you want to
check, say banana in my lists, colon and say let's print. Yes. Else. Print. No. Now if
you run this then we see that the banana is inside. All this let's check if the lemon is no the apple yes So that's a very simple syntax to
check if your index is inside your list. Now let's talk about some other useful methods
that you can do with the list. First of all, if you want to check how many elements Do
you have inside your list, you can do that with the Lang method. And now if we print
this, and we see that we have three elements inside our list. Now if we want to append
items, we can do that by my list dot append. And now let's append a lemon. Now, print that,
we see that a new item the lemon, got inserted at the very last at the end of the list. Now
if we want to insert an item at a specific position, we can do that with that insert
methods. And now First, we have to specify the index let's say at index number one, and
then the item, say a blueberry, and then print it. And we see that at index number one, now
we have the blueberry. If you want to remove items, we can do that with the pop method.
And this returns the last item and also removes it. So if we assign this to a variable, and
print it. And we see that now we got our apple back. And if we print our list, then we see
that the app is no longer in our list. Now we can also remove a specific element with
the dot remove method. For example, let's remove that. Sherry then we see that the cherry
got removed. Now what happens if we specify an item that is not inside our lists, for
example, if we have a typo here, then we get a value error. It's not in list. So be careful
here. We can also remove all elements with the clear method. So now we have an empty
list. Some more useful things that you can do is for example, you can reverse the list
with the reverse method. So now the list is in reversed order. And you can also sort your
list with the sort method. Maybe this, for example gets clearer for us numbers here also,
let's say 4231 minus one, minus 510. And if we start this, then we see that it's now in
ascending order. So note that this sort methods, sorts your list in place. So this changes
your original list. And if you don't want to have this change, but rather create a new
list, then you can do this with the built in sorted method, new list equals sartet,
and then your original list and note that if you print your original list again, then
you see this is still the same. And if you print a new list, then you see that this is
now the new sorted list. Now, some useful trick if you want to create a new list with
the same elements multiple times. So for example, I want a new list with five zeros in it, then
you can do it like this. So let's say it's put in a zero, and then times five. So if
we print this, then we see that we have a new list with five zeros. And we can easily conquer two lists
with the plus operator. So let's say I have Another list equals to 12345. And then we
want a new list. So a new list equals my list plus my list too. And if we print this, then
you your fun new lifts with both elements with both lists inside it. So, yeah, let's
talk about slicing, slicing is a very nice way to access sub parts of your list with
the colon. So for example, let's create a new list with some numbers 12345689. And let's
create a new list and simply call it a and then inside brackets, the A equals and then
my list. And inside the brackets, you specify this start index and the stop index. So let's
say for example, start index one and stop index five. And if we print this, and we see
we have a new list that goes from index one, to index five, and the last item, the last
index is excluded. So it said index 123, and index four. So our list has all the numbers
from two to five. Now, if we don't specify a start index, then it starts all the way
from the beginning. And if we don't specify a stop index, then it goes all the way to
the end. And you also have an optional step index. So and then I put in another colon,
and then the step index, and by default, it's one. So let's say, this goes all the way from
the beginning to the end with a step one. And if I put in a step two, then it takes
every second item. And I can also specify a negative index. So this is a SIM, a nice
trick to reverse your list. Now let's talk about copying a list. So let's say let's call
this list original, and put in some fruits in here, banana, Sherry, and an apple. Now,
if I want to create a copy, and I simply do it by assigning it to the original one, then
you have to be very careful. So if I print the copy, the nice see that it, it's the same
as our original list. But now if I if I modify the copy, what will happen is that it will
also modify the original list. So for example, if I append a lemon, and if I print the copy,
and I also print the original, then we see that the original list now also has a lemon
in it. And this is because with this assignment, both lists refer to the same list in inside
the memory. So yeah, be very careful here. And if you want to make an actual copy of
your list, you can do it with the dot copy method. So now if we print them, we see that
the original method, the original list is still the same. We can also do it with the
list function, and as argument we use the original list. So this also makes an actual
copy. And as third option we can use slicing, if I just use a colon here, so this means
slicing all the way from beginning to the end. And this also makes an actual copy.
Now, as a last nice trick, I want to show you an advanced technique that is called list
comprehension. So that's an elegant and fast way to create a new list from an existing
list with one line. For example, if we have a list with numbers 123456, and we want to
create a list with squared numbers, and we can do it like this, inside brackets, we say,
i times i, for i in a, or maybe let's call this my list. Now if we print my list and
print the second list, then we see that a new list got created where each element is
squared. And the syntax is you have your expression, and then a four in loop over your list. So
note like the same with iterating, you don't have to call this AI, you can also call this
x. And then also use the x here. So that's a very simple and elegant way to create a
new list with another with some expression in one line. tuple is a collection data type
that is ordered and immutable. It is similar to a list with a main difference to the tuple
cannot be changed after its creation. a tuple is often used for objects that belong together.
And let's have a closer look at tuples. And what you can do with them. First of all, a
tuple is created with parentheses. And within these parentheses, you put each element that
you want separated by a comma. So for example, let's put in Max, 2008, and Boston. And if
we print this, we see each all the elements inside our tuple. Now the parentheses are
optional. So we can leave them away. And it's still a tuple. One special thing is if you
just want to have one element inside your tuple. And even if you put it in parentheses,
and you write it like this, then this is not recognized as a tuple. So if we have a look
at the type of this, then this is recognized as a string. So what you have to do, then
you have to put a comma at the end, even if it may look strange. That's the right syntax.
So now it's recognized as a tuple. You can also use the built in tuple function to create
a tuple from an iterable. For example from a list, so say Max 28. Awesome. If you print
this, then we also have our tuple created. Now if we want to access elements, we just
do that by referring to the index. So if we say item equals my tuple, and then inside
brackets, we specify the index that we want, and the indices start at zero. So index zero
gives us the very first item, we print this, then we see we have Mac's index one, we get
28 index two, we get Boston, and if you use an index that is too large, we get an index
eiroa index out of range. So be careful here. We can also specify a negative index minus
one refers to the very last item. So that's Boston, in this case, minus two is the second
last item, and so on. Now, what happens if we want to change the elements inside our tuple like with lists
week, if we write my tuple and then get the first index and assign it to a new value,
like Tim, and if we run this, then we get a type error object does not support item
assignment. So this is not possible because a tuple is immutable. Now we can easily iterate
Over a tuple with the for in loop. So for i in my tuple colon and then do something
in this case, I just want to print the element. So then for each element, we print that, and
we don't have to call this I can also call it for example x or whatever we want. We can
also easily check if an element is inside our tuple with an if in statement, so if max
in my tuple, and then we say just print, yes. And otherwise, we print No. And if we run
this, then we get a yes, so Max is in our tuple. If we check for Boston, it's also inside
our tuple if you check for Tim, and we get a no. So very easy syntax to check if something
is inside our tuple. So let's talk about some other useful methods that you can do with
a tuple. For example, create a tuple with some letters in it. And first of all, if we
want to get the number of elements inside our tuple, we can just use the Lang method, Lang, of my tuple.
And this returns five, so we have five elements. If we want to count some elements inside our
tuples, so we can use my tuple dot count, and then we count the letter
P. So then we see we have two letter piece inside our tuple. If we check for the L, we get a
one, if we check for all, which is not inside our tuple and we get zero. And we can also
find the first index of some specific elements. So for example, my tuple dot index of P. and
if we run this, then it returns the first occurrence of this element. So this is an
index P. For example, if we say a, and we get index zero, we get if we want to get the
index of L, then we get index three. And if we check for an element that is not inside
our tuple, then we again get a value error. So be careful here. Um, we can also easily
convert a tuple to a list and vice versa with the list and the tuple function. So if I say
my list equals and then I use the list function, and put the tuple here, then I get a list
out of it. And I can convert it back, I say my tuple to equals, and then the tuple function,
my list if I print this, so then I have a tuple again. Now let's talk about slicing
with tuples. So slicing is a very nice way to access sub parts of your tuple with the
use of the colon. So for example, let's create a tuple with some numbers in it. And let's
create a tuple. And then the syntax is we use the tuple, the original tuple. And then
inside brackets we specify a start and a stop index. So for example 225. And if we print
this, then we have number 345. So this goes from index number two to index number five,
and the other last index is not included. So it only has index two, three, and four
in it. So if we don't specify a start index, then it starts all the way from the beginning.
And if we If we don't specify a stop index, then it
goes all the way to the end. Now, we can also use an optional step argument. So by default,
this is one. So in this case, it goes all the way from beginning to the end with a step
of one. And if we put in a two here, for example, then it takes every second element. And we
can also use a negative step, this is a nice little trick to reverse your tuple. Now we
can, let's talk about unpacking. So if we create a new tuple, like at the beginning,
let's put, let's use Max, 28, and Boston. And we can unpack it, if we write to the,
at the left side, we write our variables, so name, H, and city, and then just say equals
to my tuple, then we get each separate element and the city. But the number of elements that
you put in here must match the elements inside our tuple. So if we just use two elements
here, then we get a value error, to many, many values to unpack. But what we can do
is we can unpack multiple elements with a star.
So for example, if we use some numbers, so 1001234. And if we want to unpack this, so
let's say I won, and then a star, and say, I, two, and I three equals to my tuple. And
then if we print I one, this is the very first item, if you print by three, this is the very
last item. And if we print by two, then these are all the elements in between, and now converted
to a list. Yeah, so one more thing that I wanted to show you is to compare a tuple and
a list. And because a tuple is immutable, Python can make some internal optimizations.
And thus, working with a tuple can be more efficient sometimes, especially when working
with large data. So let me copy this in here. In this example, we create a list and a tuple
with the same elements. And then we use the SIS dot get size of method to return the number
of bytes. And both of them. And if we compare them, then we see that a list is larger, even
though it has the same elements as the tuple. And also can be more efficient to iterate
over a tuple. And also to create a tuple. So if we compare if we use the time it method,
so there's a very nice method in the time, module time at that time it and then you can
use a statement and repeat this specific number of times. So in this case, it's 1 million
times 1 million times we want to create a a list and 1 million million times we want
to create a tuple and then measure the time. If we run this, then we see that it took much
longer to create the list than to create the tuple. So yeah, keep that in mind that working
with tuples can be more efficient than working with lists. dictionary is a collection data
type that is unordered and mutable. It consists of a collection of key value pairs. So each
key value pair maps the key to its associated value. And let's have a closer look at dictionaries
and what we can do with them. First of all, a dictionary is created with braces. And inside
these braces, you put each key value pair separated by a colon. So let's say key name,
and then colon, and then the value, Max. And then you separate each item with a comma.
So comma, and then let's put in another key value, pair, age, colon 28, comma, and another
one, city, Cole on New York. And if we print this, and we see all the key value pairs here,
then we can also use the dict function to create a dictionary. And there we put all
our keys as arguments. So name equals Mary, comma, age equals 27, comma city equals Boston.
And if you print this, we see that we have a second dictionary here. And note that with
this function, you don't have to use quotes for your keys. Now, when you want to access
the values, you do that by saying my dict and then inside brackets, you give it the
key. So you print the associated value for the name, then we get max. And if we want to look up the age,
we get 28. And what will happen if we use a key that is not inside our dictionary, for
example, check the last name, then this will raise an exception, a key error. So be careful
here. A dictionary is mutable, so you can add or change items after its creation. So
when we want to add an key value pair, we simply do it like sell, we say my dict and
then inside brackets give it the new key. Let's give it an email. And then the associated
value max at x y z.com. And if we print it, then we see that our dictionary now has the
email key value pair here. Now if we do the same thing again, and the key already exists,
then it got gets overwritten. So let's say emails, coolmax, then we see that it still
has the key email. And now with our new value. If we want to delete items, we have several
options, we can say, we can use the Dell statement, so say Dell, my dict and then off the key
name, and then we print it then we see that the name key value pair is no longer inside
our dictionary. Or we can use the pop method. So we can say my dick dot pop, and then give
it the key, let's pop the age. So now we see that the age is no longer inside our dictionary.
Or we can use the pop item method. So prior to Python 3.7. This removes an arbitrary pair
and since Python 3.7 This removes the last inserted item. So in this case, it's Python
3.7 and then it removes the city. So we see the city is no longer inside our dictionary.
When you want to check if a key is inside our dictionary then there are two common ways
to do that. The first one is to use an if in statements so we say if name in my dict
and then we can use this key we can say print my dict name. So then max gets printed. If
we say last name and want to print it then the if statement is wrong. So this doesn't
get executed, so nothing is printed here. Or you can use a try accepts accept statements.
So try and then access a key. So let's say my texts, name. And except print, let's just
print error. So if we run this, then this statement is successful, so it can print the
name. And if we want to access the last name, then this statement will raise an exception,
a key error. So an exception is thrown, which is caught here. So this statement then will
be executed. So if we run this, then we see that we have the error here. When you want
to loop through a dictionary, you have several different ways within for in loops. So you
can say for key in my dict, and then print the key, then you can see that this loops
through the dictionary, and loop through all the keys. You can also say dot keys. So this
will do the same thing. The keys method returns a list with all the keys inside it.
You can also loop over the values. So you can say for value in my dict dot values and
then print the value. And then it prints the values. Or if you want to have both in one
loop, you can say for key comma value in my dict dot items, and then you can print the
key and the value. Now when you want to copy a dictionary, you have to be careful. So the
most common way to do it is like so let's say my dict copy equals to my dict and just
assign it to the original mighty dictionary. And now if you print this, then we see that
is the same as the original one. But now if we modified the copy, this will also modify
the original one, let's say my direct copy and at the email max@xyz.com. Now if we print
the copy and the original one, then we see that both dictionaries now have the new key
value pair. This is because with this simple assignment statement, both dictionaries now
point to the same dictionary inside our memory. So be very careful if use this expression.
If you want to make an actual copy, you can use the built in copy function. So if we use
this one and print it and we see that the original one didn't change,
or you can use the dict function. And as an argument, you pass the dictionary that you want to copy.
So if you use this, then we see that the original dictionary also didn't get affected. Now there's
a useful method to merge two dictionaries, that is called the update
method. Let's create two dictionaries. And the first dictionary has a name, an age and an email.
And the second dictionary also has a name and an age but no email, but then it has a
city. And if we want to merge these, we can do it like this. They might take a dot update
and then with the second dictionary, and now if we print this then what happened. All the
existing keys or key value pairs got overwritten. So the name is now Mary, the age is now 27. The email
didn't change and the non existing keys the city got edit So, yeah, that's a nice way
to update to dictionaries. Let's talk about possible key types. So in all the examples
before I used a string as a key, but you can use any immutable type, for example, you can
also use numbers as a key, or even a tuple. If it only contains immutable elements. For
example, we can say, my dict, and then key three, and so value, give it the squared value,
then a key six and 36, and the key nine, and 81. Now let's print this. So this is also
possible, but then you have to be very careful, because when you want to access a value, like
so, and you want to do it like with lists, and you refer to the index number, for example,
say index zero, then this will raise an exception because you have the key error. Zero is not
in our list, what do you rather want to do is you want to use the actual key, so the
key three is not nine, and then if you print the value, then we see we get the nine. So
yeah, we also can use a tuple as a key. So let's say my tuple equals eight, seven, and
then create a dictionary and S key, we use the tuple and s value, we use the sum. Now
if we print this, then we see we have our new tuple here, and are our new dictionary
here. And yeah, so tuples are also possible. But what is not possible, for example is a
list. If we use a list here and run this, then this will throw an exception type error
on hashable type. That is because a list is mutable and can be changed after its creation.
And therefore it's also not hashable and cannot be used as a key. So be careful here. Set
aside collection data type that is unordered and mutable. But unlike lists, or tuples,
it does not allow duplicate elements. A set is created with braces, just like a dictionary,
but we don't put key value pairs in it. But instead just single elements separated by
a comma. For example, let's put some numbers in here and print this. Then we will see our
set here. And if we put for example, another one and another two here, and print this again,
then we see that only one of each element is kept. Because a set does not allow duplicates,
we can also use the set function and use an iterable. Here, for example, let's use a list
here. This will also create a set, or we can use a string here are example Hello. And if
we print this, first of all, we see that the order is arbitrary because a set is unordered.
And the order is not important. And we also see that there's only one l in our set. So
this is a nice little trick to find out how many different characters are in your word.
Now, if you want to create an empty set, and you do it like this just with the braces,
then you have to be careful because now if you have a look at the type of this, then
we see that this is recognized as a dictionary. So if you want to have an empty set, you have
to do it with the set method. Set is mutable so you can change it later on. So now we can
add elements and we do this with the dot add method. So let's put in some numbers here
and print this. And we can also remove elements again with the Remove method. So let's remove
the three and if we want to remove an element that does not inside Our set, then this will
raise a key error. So be careful here. So there's another method, let's call that this
cart method that does the same thing. So it also removes the element. And if it does not
find the element, then nothing will happen. So no error here. We can also use the clear
method, of course, this will empty our set, or we can use the pop method. So this will
return an arbitrary value of our set and also removes it. So we print this. Then we see
in this case, it returned the one and also remove the one from our set. Now, we can iterate
over our set very easily with an for in loops. So for i in my set, and then do something,
in this case, just print this. So this will iterate over each element and print it. And
we don't have to call this I we can also call this for example x or whatever we want. Now
we want to check if an element is inside our set, we can do this with an if statement.
So if one in my set, and then we print, yes. So the one is in our set, the two is in our
our set. And if we check for example, for the four, then nothing gets printed. Now,
let's talk about union and intersection. And for this case, first of all, let's create
three different sets one with odd numbers, one with even numbers, and one with prime
numbers. And now we can calculate the union. So the union combines elements from both from
two sets without duplication. So let's calculate the union of odds. And we do this with dots
union, and then as an argument, the second set so events and print this. Then we see
that now we have all the numbers from zero to nine. So the union will combine elements
from both from two sets without duplication. We can also calculate the intersection of
two sets. So the intersection will only take elements that are found in both sets. So if
we say the intersection equals arts dot intersection events, and if we print this, then we will
get an empty set, because arts and events don't have the same elements. Now if we calculate
calculate the intersection of arts and primes, we will get all the prime numbers that are
also odd. So 357 if you calculate the intersection of events and primes, then we will get back
only the even prime numbers. So in this case, only the two now we can also calculate the
difference of two sets. So let's create two different sets again, set a with numbers from
one to nine and set B with one with 123 10 1112. Now the difference will return a set
with all elements from the first set that are not in the second set. So let's call that
call a diff equals set a dot difference set B and print this.
Then we will see that we will get back the numbers from four to nine because it takes
the elements from our first set, but not the ones that are also in the second set so only
from four to nine. So if we do it the other way around set be the difference set a then
it will take 10 1112 but not these three numbers because they are also here. So then there's
a second different method. second difference method, that's called the symmetric difference
method. So, the symmetric difference method will return a set with all the elements from
set A and set B, but not the elements that are in both sets. So again, so it takes 456789
from set A, and 10 1112 from set B, but not one, two, and three, because they are in both
sets. So if I use set a symmetric difference set B, then this is the same thing. Now, union
and intersection and the difference method that I just showed you, they will not modify
the original sets, they always will return a, a new set, but we can also modify our sets
in place. So for example, we can say set a dot update, set B. And now print our set A,
then we will see that this updates the set by adding the elements that are found in another
set. So without duplication again, so it does not add one, two and three again, but it adds
1011 and 12. There's also a intersection up update method. So set a dot intersection update,
set B. And what this does, it updates the set by keeping only the elements from found
in both sets. So only one two and three are found in both sets. So only these numbers
remain in our set. Then there's also the difference update methods. So set a difference update
set B. And if we print this, we will see the numbers from four to nine because difference
update, it updates the set by removing elements found in another set. So it also it found
it finds one, two and three in the set B so it removes these numbers from our set A. And
then there's the symmetric difference update. So this updates the set by only keeping the
elements found in set A and in set B, but not the elements that are found in both. So
one, two, and three are found in both sets. So these are not taken, but then it takes
all the remaining elements from both sets. Yeah, you'd have probably have to play around
with them yourself a little bit to make it clearer. And yeah, let's also talk about soap
sets superset and disjoint methods. So for example, let's make them a little bit smaller.
You can calculate the if set A is a subset of set B. And we print this then this will
return false because subset means that all the elements of our first set are also in
our second set. So if we use it the other way around set B is a subset of set A, then
this will return true because one two and three are also in the second set. And the
opposite is called the super set method. So is super set.
And in this case, it returns false because a super set returns true if the first set
contains all the numbers or all the elements from the second set. So, set B does not contain
546. So it's not a super set. But set a is a superset of set B, because it contains one,
two and three. And we can calculate if two sets are disjoint. So this join returns through
if both sets have a null intersection, so no same elements. So set a is this joint set
B. And if we print this, this will return false because they have same elements. And
if we create, for example, a set C and put seven, eight in here, and check set a is this
joint with set B, then this will give us true. Now let's briefly talk about copying two sets.
If you have watched the previous episodes about lists, for example, then you already
know this, you have to be careful, and you want to copied two sets and only do this with
a simple assignment. So let's say let set B equals to set one, set a. First of all,
if we print this, then we see that we have a copy. But now if we modify the copy, let's
say set B at set seven. And if we print the copy and also print the original one, then
we see that also the original one changed, because with this simple assignment both points
to the same set. So be careful here, you only copy the reference. Now if you want to make
an actual copy, you have to use the dot copy method. So if you run this again, and we see
that the original set didn't change, or you can also use the set method and use the first
set as a argument. This will also make an actual copy. Now as the last thing, I want
to show you the frozen set, the frozen set is also a collection data type. And this is
just an immutable version of a normal set. So you create this with the frozen set method.
And there's an argument you can also put an iterable here, for example, a list and let's
print this, then we see our frozen set here. So with a frozen set, you cannot change it
after its creation. So if I try to do a.at, two to this will give us an error. Or I can
also say try a remove one. This will also give us an error or any of the updates, update
methods I showed you, they also don't work. But for example, Union intersection and difference
method, they will work a string as an ordered and immutable collection data type that is
used for text representation. And it is one of the most use data types in Python. So I
hope that at the end of the session, you'll feel comfortable working with them. So let's start. First of all, a string is created with either single or double quotes. So you can
use double quotes and then put your letters in here. So let's say hello world, and now
we can print this and then we see our string here or you can use single quotes This is
probably more common. The only thing you have to be careful is if you have another single
quote inside this. So if you have for example, I am a programmer. Now if you try to run this, then this will get a syntax error. So what
you can do is you can either use an escaping backslash here, so this is valid. Or you can
put your single quote in Side double quotes. So this is again, a valid string. You may
also sometimes see triple quotes. So this is typically used for multi line strings.
So now I can go in another line. And this is also used for documentation inside your
code. So now if we run this, we see that our string goes over multiple lines. Now, you
may also sometimes see an escaping backslash, like so. And this just says that the string
should continue in another line. But it should not create a new line here. So now if we run
this, then we see we have our one line hello world string. Now, if you want to access characters,
or sub strings, it's the same like with lists, you access it with inside brackets, so let's
say char equal, or let's create a string first. Alright, my string equals hello world. And
then you can say char equals and then my string. And then in brackets, you put the index you
want. So if you want the very first character, you have to use index zero. So we can print
this. So this is the H and F, we use index one, we get the E, and so on, we can also
use a negative index, so minus one is the very last character, minus to the second last,
and so on. But what we cannot do, for example is we cannot access a character and change
it. So if I want to change the first character to a lower age, if I tried to run this, now,
this will get a type error, a string object does not support item assignment. And this
is because strings are immutable, so they cannot be changed. So be aware of that, we
can also access a whole substring with slicing. So then I will say my string and in brackets,
I put this start index, so let's say one, and then a colon and then a stop index. And
then if I print this, then I will see I get the string, e Ll O. So what this does, it
starts at index one, and goes until index five, but index five is excluded. So be careful
here. So it has 123, and four, so our string is E Ll O. Now if I don't use a start index,
then it starts all the way from the beginning. And if I don't use a stop index, then it goes
all the way to the end. So this goes all the way from beginning to end. And then there's
another optional step index. So if I put another colon here, and by default, this is one. So
this takes every character. And now if I put a two here, it takes every second character.
And I can also put a minus one here, and then what it does, it will reverse our string.
So that's a nice little trick to reverse the string with this slicing operator. Now, we
can concatenate two or more strings simply with a plus. So if I create another string,
Tom and I will just call this hello and say this is now a greeting. And then I can say
my sentence, I will create a new string that is greeting plus, and then I want a space
between them. And then plus again, plus the name. And now let's print this
and then we see we have our concatenated string. So very easy with this plus here. Now we can
iterate over our string with a four in loop so for i in greeting, and then do something
so just print this print every letter So, this goes over our whole string and prints
each character. And we don't have to call this I, we can also call this for example
x or whatever we want. Now, if you want to check if a character or substring is inside
our string, we can do this with an if in statement. So I say if and then I want to check for the
letter E. So if e in greeting, and then I will print Yes. And otherwise else I will
print. No. So he is inside my word. So it prints Yes. So if I check, for example, for
p, then it will print No. And I can also check for substring. So I can check for E Ll, this
will also print Yes. Now let's talk about some more useful methods that you can do with
strings. So let's say we have a string with some whitespace here, and then we have our
hello world, and then some more whitespace at the end. So if we print this, we will see
that our printed string also has the wide string. Now if I want to get rid of this,
I can do my string equals my string dot strip. So this method removes our whitespace. So
now if I print it, we see that the whitespace is gone. And be aware that we this method
does not change our string in place, because as I said, a string is immutable. So if I
just write it like this, then this will not change my original string. So if I run it,
our original string still has the whitespace. So what we have to do is, we have to assign
it again to our original one, and then we have the new string with without whitespace.
Now, what we can do also, with strings is we can say, we can convert every character
to an upper case, so let's say my string dot upper. And then we have all an upper cases,
we can also say my string dot lower, then we have all in lower cases, we can check if
my string starts with specific character or substring. So if we can say starts with and
then we can say h. so this will give us true or we can also check for Hello, also true
and check with world. And we will get a false. But we can also check if it ends with something.
So if it ends with world, so now we have true. And yeah, if it ends with Hello, then we get
a false. Now we can find the index have a character or a substring. So let's say my
string dot find and then we want to find O. So this will return the first index that it
finds with an O. So index 01234. So it returns a four, we can also check for substrings.
So this is the at index three, our l o substring starts and if it does not find a string, then
it will return a minus one. We can also count the number of characters or substring it finds.
So let's check for how many O's we have in hello world. So this will return to and how
many peas do we have? We have zero.
We can also replace characters or substrings inside our string. So we can say my string
dot replace. And then we want to replace world with a new word. So we want to replace it
with the universe. And now, if we print this, then we see our string is now Hello universe.
And also be aware here that this will return a new string and does not change this one.
So if it does not find this strings, let's say for example, we have a typo here, then
it does nothing. So it will still print the original string hello world. Now, let's talk
about lists and strings. So let's say you have a string with some words. So let's say
we have here, how are you doing. And you want to convert this to a list and put at each
word of my string as an element in my list. Now, what you can do then is you can say,
my list equals my string, dot split. And if we print our list, then we see that we have
each word now as an element in our list. And by default, the delimiter it is looking for
is a space. So here, the default argument is a space. So it looks for each space, and
then splits our string here. Now, for example, if you have commerce, here, and then cannot
find a space, so it, we only have one element here. So now what you would then have to use,
you would have to use as a delimiter, a comma. And then again, we have four elements. Now
if you have the list, and you want to convert it back into a string, what you can do is
you can say, let's say new string equals and then we say, my whip, you know, we say and
empty string, and then dot join, and then the list as an argument. And then we print
the new string. And then we will see that this will concatenate all of our words, all
of our elements in our list. So this will put all of our elements together as a string.
And between each element, it will put this string that we put here. So now if you put
a space here, then it will put a space between each element. And now we have our original
string again. So the dot join method method is a very useful method to quickly join the
elements of a list back into a string. And I would highly recommend to remember this
one because this is very useful. And let's In fact, let's talk about this a little bit
more. So let's say we have a list with some elements. So let's say for example, only A's
and then times six. So maybe you know this syntax. So this will create a list with six
elements. And now if you have the task to join this into a string, a lot of times what
you will see is that you will create an empty string and then you will use a for in loop.
So for i in my list, and then you will say my string plus equals i. So let's check this.
So it worked. We have our string here, but this is bad Python code. Because what happens
here since a string is immutable. This will create a new string here and then assign it
back to our original string. So this operation is very expensive. What you should better
use it The dot chain method. So as I just showed you, we can say, my string equals,
and then we will say an empty string dot, join my list. And then we will print this.
So this will also give us the same thing, but it's much cleaner, and also much faster.
So let's look at the time of both of these ways. So let's say we have saved from the
time at module, we import the default timer as timer. And then we will say here, start
equals timer. And at the end, we can say, Stop equals timer. And then we will print,
stop minus start. So this will give us the time it takes from here to here. And we will
do the same thing here.
So if we run this, we will, let's remove this, we see that both both was very, very fast.
But now let's say we have, for example, a very large list with let's say, 1 million
elements. And now I don't want to print my list. So if we run this now, what we will
see that this The second way with a dot join method is much faster. So the first way took
more than half a second and the second only point 01 seconds. So forget this way of doing
it. And remember that duck shine method. Now as the last thing, I want to talk about formatting
strings. So there are two ways to format a string, the old styles are with a percent
operator, or with a thought format method. And since Python 3.6, there's also the new
f strings. And let's talk about all of these methods. So let's say we have a variable and
call it it's, let's say variable equals a string, and we have the name Tom. And then
we will create a string and say it's the variable is and then we use the first method, so we
use a percent s. And then after our string, again, we use the percent and then the variable.
So this tells the interpreter that we have a placeholder with a string here. And then
afterwards, we fill this placeholder with our variable. So now if you print our variable,
then we will see that our string is the variable is Tom. Now, if we have a number here, we
shouldn't use percent s here, we should use percent D. So this stands for integer decimal
value. So now we have the variable is three. And let's say we have a floating point. So
like this, and if we run this, then we see that we still have three here because we told
the Python that we have a decimal value here. So now what we want now is we want a floating
point, so we say percent F. And then we have our floating point value here. And by default,
it has six digits after the decimal points. So if we want to specify how many digits we
want to have, we can say, dot percent dot and then how many digits and then let's say
two digits and then.to F. So this will give us two digits after the decimal point. So
this is the very old formatting style. The new formatting style is with the dot format
methods. So now what He wants to do is as a placeholder, we use braces. And then after
our string, we call the dot format method. And then here we put all our elements as arguments.
So now if we print this, then we see that we have the placeholder got replaced with our variable. And we can also
specify how many digits so we can say, colon, dot two, F. So then we have two digits after
the decimal point. And for example, if we have more variables, we simply would place
another placeholder here, and then another argument here. So let's say we have var two
equals six, and then we would put var two here. And then we will see that we have all
our variables inside our string now. So these are the old formatting styles. And the newest
way to do it is with the F strings. So this is, since Python 3.6, or newer, you can use
the F strings. And with an F string, you would simply put a f between the string and then
the string. And then you will also use braces. And inside the braces, you can use your variables
directly. So you can use var here, and var two here, and then you don't need this anymore.
So if we run this, then we see it worked. And yeah, I think this is much more readable,
it's more concise. And it's even faster, especially if you have a lot of variables here. So I
would highly recommend using this f string f strings now, since python 3.6. And yeah,
what this does is it evaluates the this at run time. So we can also put some operation
here. So let's say it's a mathematical operation, like var times two. And then this will, will
be evaluated at runtime. So now, we see we have our two times our variable here. And,
yeah, so that's it about f strings. And that's all I wanted to show you about the strings.
The collections module implements special container data types, and provides alternatives with some additional functionality compared to the general Bert and containers, like dictionaries,
lists, or tuples. So we will be talking about five different types from the collections
module, the counter the named tuple, the artists dict, the default dict, and the deck. So let's
start with the counter. And first of all, we have to import it from collections import,
counter. And the counter is a container that stores the elements as dictionary keys and
their counts as dictionary values. So let's say we have a string called a with some different
characters, a BBB, CCC. And then we can create our counter, we say my counter equals counter,
and then we give it our string. And if we print it, then we see we have a dictionary
with all the different characters as keys and their count as values. So we have five
times a four times B, and three times C. And, like with a normal dictionary, we can have
a look at only the items. So this will give us all the key value pairs, we can have a
look at the keys. So this will give us an iterable over the keys. And we can also only
have a look at the values. So this will give us all the different values. And what's also
very helpful is to have a look at the most common element in our counter dictionaries.
So we say if we first print our counter again, and then we can see Today we want to print
my counter dot most common. And then here how many different items, so I want to see
only the very first so the most common elements. So if I print this, then I will get the A with the count five is the most
common element. So if I say two here, that will give me the two most common types, so
it will also put the B in here. And this will return a list with tuples in it. So, for example,
if I want to have a look at only the, I want to see what is the most common element, then
I will x have to access the index zero, so, this will give us the tuple at index zero.
And then if I only want to see the element, then I will again have to access the first
element of this tuple. So against zero, and then I will get the A is the element that
is most common in our string. So, we can also use a list here or any other iterable. Yeah,
we can also have a list with all all the different elements. So, if we say, print my counter
dot elements, and this will give us an iterable over elements repeating each as many times
as it counts. So, I have to convert this to a list in order to print it nicely. So now
if I print it, and I will see, I will get all the different elements here as a list.
And I can, for example, iterate over this. So that's the counter next talk about the
named tuple. And of course, first of all, we have to import it. So we say from collections
import named tuple. And the named tuples is an easy to create and lightweight object type,
similar to a struct. So what I can do is I can define my named tuple. I say for example,
let's create a 2d point and call it point equals and then I will say named tuple. And
then as first argument, I give it the class name. So typically, this is the same name
that I use here. And then as a second argument, I use another string and here I use all the
different fields I want separated by either a comma or a space. So I can say x comma y.
So this will create a class called point with the fields x and y. So now I can create this
point. So I can say p t equals point and then I will give it values for x and y. So for
example, I will give it one and minus four. And now if I print my point, then I will see
I have a point with x equals one and y equals minus four. And I can also access the fields.
So I can say p t dot x and p t dot y. So then this will print the values for x and y. Next
is the ordered dictionaries. So from collections import, ordered dict. And the ordered dict
is just like a regular dictionary, but they remember the order that the items were inserted.
So they have become less important now since the built in dictionary class has also the
ability to remember the order since python 3.7. This is guaranteed. But for example,
if you use an older Python version, this may be a way to use a dictionary that remembers
the order. So for example, let's create a dictionary like so. And then we can append
key value pairs like with a normal dictionary. So we say here and brackets give it a key
a and a value, one. And let's do this with some more key values. So let's say we have
B, C, and D, and 234. And now if we print this,
then we see it's the same order as we inserted it. So for example, if we inserted the A,
at the very end, then it will also get printed at the end of our audit dictionary. Yeah,
since here, I'm using three python 3.7. So in this, I can also just simply use a normal
dictionary now and it still remembers the order. Next, we have a look at the default
dict. So from collections import default dict. And the default dict is also similar to the
usual dictionary container, with the only difference that it will have a default value
if the key has not been set yet. So what we will do, we have to create a default dict.
And as an argument, we will give it an a default type. So let's say we want to have an int,
an integer here as default type. And then we can fill our dictionary, again, let's say
D, with the key a is one and D with the key b equals two, and let's print our dictionary.
So we will see it here and then we can access the keys. So for example, let's access the
key a, and then it will give one and the key p will return to and now if I put in a key
that does not exist, so for example C, then what will happen, it will return the default
value of an integer. And this is by default a zero. So I can also for example, say I want
a float default value. So then this will return 0.0 if it does not exist, or for example,
I will have an empty list if it does not exist. So yeah, with a normal dictionary, this would
raise a key error. So now this would raise a key error, but with a default dict it would
return the default value of the type that we specify. So, as a last collections type,
we will talk about the deck. So the deck is a double ended queue. And it can be used to
add or remove elements from both ends. And both are implemented in a way that this will
be very efficiently. And yeah, let's create a deck so let's say d equals deck and then
we can append items like with a list, let's say the append one and the append two and
then print it. Now, now, we see our deck here and also we can say we can say d dot panned
left. So this will add elements at the left side. So now we can see our three got added
here. And we can also again remove elements from both sides. So we can say d dot pop.
And now if we print our deck then we will see that the with pop, this will return and
remove the last element. So now the two got removed or we can say d dot pop left so this
will return and remove the other From the left side, so now, the three got removed.
can also of course, say d dot clear. So this will remove all elements,
we can extend our deck with multiple elements at a time. So we can see d dot extend, and
then give it a list, let's say 456. So this will add all the elements at the right side,
or we can say d dot extend left, this will extend all the elements at the left side.
And note that now, it will add First, the four from the left side and the five, and
then the six. So now six is the most left elements in our deck. We can also rotate our
deck so we can say d dot rotate one. And now if we print it, we will see that this will
rotate all elements one place to the right, I can also say for example, do not rotate
to and then this will rotate all elements to places to the right. Or if I want to rotate
to the left side, and I will give a negative number here. So if I say d dot rotate minus
one, then all our elements will rotate one place to the left.
The inner tools module is a collection of tools for handling iterators. Simply put iterators
are data types that can be used in a for loop. So for example, the most common iterator is
the list. And the error tools offer some advanced tools. And we will be talking about the product,
the permutations combinations, the accumulate function, the group by function, and some
infinite iterators. So let's start with the product. So first of all, we have to import
it. So we say from it or tools, import product. And let's say we have two lists a equals one,
and two, and B equals a list with three and four. And then we say we have a product of
a and b, and the product will compute the Cartesian product of the input iterables.
So let's print this. So print the product. And then we will see that we have a editor
tools object. So this is an iterator. And to see the elements we can come convert it
to a list, and then we will see the product. So the product will combine one and three,
and one and four, and then two, and three, and two and four. So this is the product,
we can also define a number of repetitions. So if we say repeat equals two, then it can
repeat. And let's run this and then we see that this is a very large list. So let's make
our second iterables smaller, and print this. And then maybe the repetition gets clearer.
So we have one and three. And since we can repeat again we do one and three, and we have
one and three and two and three, two, and three and one and three, and again with repetition,
two and three, and two, and three. So that's the product. Then we also have something called
permutations. So permutations will return all possible orderings of an input. So let's
say we have one, two and three as a input, and then we calculate the permutations of
a and print this again, as list and then we see all the different orderings So we have
123132213231312, and 321. So that's permutations. And we can also specify the length of the
permutations as a second argument. So if we want to have shorter permutate, permutations
with only length two, we skip the argument two. And then we see different orderings with
the length of 22121321, and so on. That's permutations, then we have combinations. So
from either tools, import combinations, and the combinations function will make all possible
combinations with a specified length. So let's also make an example here. Let's make a list
123, and four, and then say comm equals combinations of a. And the second argument with the length
here is mandatory. So in this example, I only want the length two, and then print this again
as a list. And then we will see all possible combinations with length two, so 12131423, to four, and
three, four. And, and note that we don't have combinations of the same arguments or no repetitions
here. And if we want that, we can also use the combinations with replacement function.
So then we import it, so import combinations with replacement. And then let's make another
combination iterable and say combinations with replacement of a and also of length two,
and Prentiss comm with replacements, and then we see that it will make combination of one
and itself. So one and one, one and two, one and three, and so on. So this is combinations
and combinations with replay replacement. Now, when we have the accumulate function,
so the accumulate function makes an iterator that returns accumulated sums, or any other
binary function that I will give as input. So let's make an example. First of all, import
the accumulate function. And then we can say, we leave the list a equals 123, and four,
and then we say, accumulate equals accumulate of a, and print this. First of all, let's
print our list and then print the accumulated list. So we see that our list is one, two,
and three, and they accumulated sums is 136, and 10. So the first elements stays the same.
And then we have one plus two is three, three plus three is six, and six plus four is 10.
So that's the accumulate function. And by default, it will compute the sums. But we
can also for example, multiply the elements so let's import operator. And then we can
give as a second argument, we can say func equals operator.ml. So this will multiply
each element so one stays the same. One times two is two, two times three is six, and six
times four is 24. And as a third example, let's just use the max. So this will return
the max for each comparison. So for example, if we have a five here in between, and have
a look at our list than one is the same two now two is the max then compared with five
and five is Till the max compared with three and five, still the maximum and compared with
four, five is still the maximum. So that's accumulate. Now let's talk about the group
by function. The group by function makes an iterator that returns keys and groups from
an inner rebel. So let's make an example. To make this clearer, let's say we have our
list a equals 123, and four. And then we say we make a group object, and that is group
by, and then we want to group A, and we have to give it a key, which map has to be applied.
So as key, we can define a function, so let's say smaller than three, and give it an input,
and then return x smaller than three. So this will return true or false. And as a key, we
will give it this function. And then let's print this. So we will see that this is a group by object and we can
iterate over this. So we can say, for key and value in our group object, and then we
want to print the key and the value. And then we will see it prints the key and an inner
tools, object, group or object. So we can convert this to a list to see the values.
And then it gets clearer. So we have our input array. And we group this into other lists.
With the comparison if it's smaller than three, so for one and two are grouped together, because
they are smaller than three, and the key is true, and three and four are grouped together,
and the key is false. Now, we can also use a lambda function here, so I will talk about
this in the next video. But as a very short explanation, lambdas are small one line function
that can have an input and will do some expression and then will return an output. So I can write
this same function in one line with a lambda expression. So I can write lambda, x and then
colon, and then simply x smaller three. So this will do the same thing. If I run this,
then it will print the same thing. Now let's make an another second example. For this,
maybe this is not clear at the first side. So let's define a object persons. And this
is a list. And inside this list, we have different dictionaries. And the dictionaries contains
a name and an age. And let's say we want to group our persons by the same age, so let
and then we say lambda x and simply x and s key the age. And then if we run this and
print this, then we will see as keys, we have the different values for age. So we have 2527
and 28. And then we also see that it grouped Tim and then together because they both are
25 years old. And then we have Lisa and Claire. So that's the group by function. Then we also
have some infinite iterators. There's the count function, then this cycle function and
the repeat function. And the count function is very simple. So if we just say for i in
count and then Give it a start values. So let's start at 10, and then print this. So
this will make an infinite loop that starts at 10. And then adds one for every repetition.
So one, so 10 1112, and so on. And this is still going now. So then for example, if I
say, if I is 15, then we will we break, so then it will stop at 15. That's the count
function, then there's the cycle function. So this will cycle infinitely through an iterable.
So let's say we have a list that has one, two, and three. And we want to cycle through
a and print this. So this will print one, two, and three, and then cycle again, one,
two, and three, and again, infinitely, until I make some stock condition. So that's the
cycle method. And now as a last thing, the repeat methods, so repeat,
for i in repeat, and then I want to repeat, for example, just the one, then this will
simply make an infinite loop. And we'll print one. And I can also as a second argument,
give it the stop repetitions. So how many times do I want to repeat for example, if
I say four, here, then it will repeat the one four times.
Lambda function is a small one line anonymous function that is defined without a name, and
it looks like this. First it has the lambda keyword, then it can take some arguments,
then a colon, and then an expression. And what this will do, this will create a function
with some arguments, and it evaluates the expression and returns the result. So let's
look at an example. To make this clearer. Let's call a function and we call this add
10. And this is equal a lambda with an input. And let's call our input x. And then it should
evaluate x plus 10. So this will create a function with one argument, and it adds 10
to the argument and returns the result. And we assign this function to our var variable
at 10. So now this is a function that we can call with an argument. So let's call it with
with five. And now if we print this, then it will print 15. So this is practically the
same as a normal function like this, let's call this at 10. func, and this will take
an argument x and return x plus 10. So these two things do the same thing. But the lambda
function is much shorter and only in one line. So lambda functions can also have multiple
arguments. So let's say let's create a another lambda function and call this mouth and and
this is equal lambda. And now we give it x and y. And it should evaluate x times y. So
this will create a function with two arguments, and it will multiply these two arguments and
returns the result. So now if we print for example, mod two, and seven, then it will
print 14. So that's the lambda syntax. Lambda functions are typically used when you need
a simple function that is used only once in your code. Or it is used as an argument to
higher order functions, meaning functions that take in other functions as arguments.
For example, they are used along with the built in functions, sorted map, filter, and
reduce, and we will have a look at all of them to make the usage of landac euro. So
let's start with the sergeant methods. So you probably already know this, and I also
showed this in my video about lists. So let's say we have a list. And we call our list points
to the, and the list has tuples with two elements in it. So you can think of this as the x and
the y well use of our points. And now if we want to start this, so let's create a points
to the sorted list. And then we can call sorted, this is built in, so we don't need to import
anything. And now we can start our list. So we want to sort points 2d, and now print,
first, print our points and then print our points to the sorted. So by default, this
will start our, our list by the first argument, so by the x argument, so one, 510 and 15.
But we can also give it a specific rule how to sort it. So we can say we can give it a
key argument and the key equals, and this should be a function. And as we now know,
we can write a function with a lambda in one line. So we can say, lambda with an argument
x. And now let's say we want to sort it by the Y Well, you so by the second index, so
then we say, x of the index one. So now if we run this, then we will see that our list
got sorted according to the Y index. So what this does is, you can also, for example, give
it a or define a function, and let's say sort by y and then give it a index. And in this,
give it an argument, and in this case, two argument is a tuple. And then it returns the
first index. So now we can also use this function here, so sort by y, and if we run this, then
this will return the same result. But now we see with a lambda, we don't need this.
And then we can simply use our lambda here, so we can use our lambda here, and get rid
of this function. And yeah, that's one use case of a lambda. For example, let's make
another example of sorting. Let's sort this according to the sum of each. So therefore,
we would say lambda x and then evaluate x of index zero plus x have index one. Now if
we run this, then we see that it got sorted according to the sums of each tuple. So that's
the sergeant's method with a lambda is key argument. Now let's talk about the map function.
So the map function transforms each element with a function. So it looks like this. It
has a func, a function as an argument, and then a sequence. So this is for example, a
list. So let's create a list with some numbers in it. So 123, and four, and five. And now
let's create a another list and call this B equals and now we will want to multiply
each element by two. So let's say map. And then as a function, we define a lambda with
an argument and evaluate x times to and then as a second argument, we use our list. And
then we print this and if we want to print this, then if we simply print it like this,
then it will print a map object. So we have to convert it to a list first.
And then we can see that each element got multiplied by two. So that's the map function.
However, you can achieve the same thing with list comprehension. So you probably already
know the list comprehension syntax. It's a little bit easier. So you can write it like
this. C equals And then let's say x times two, for x in a. Now, if you print this, then
this will do the same thing. So, personally, I would prefer this syntax, it's a little
bit easier. But you should have heard about the map function. Now the second function
is the filter function. So the filter function also gets a function and a sequence. And it
will, this function must return true or false. And the filter function will return all elements
for which the function evaluates to true. So let's say let's also give it a six. And
let's say we want to filter this. And we say, we equals filter. And let's say in this example,
we only want to have the even numbers. So then we create a lambda with x, and we evaluate
x modulo two equals equals zero. And then if we run this, we should get only the even
numbers. So again, here, we can achieve the same thing with list comprehensions. So we
can also write C equals a list and then inside our list, we write x for x in a, and then
we can give it a condition, we can say, if x modulo two equals equals zero. So we print
C, then we see that this will do the same thing. And as a last function, I want to show
you the reduce function. So the reduce function also takes a function and a sequence. And
it repeatedly applies the function to the elements and returns a single value. So let's
say I have a list here. And I want to compute the product of all the elements. So let's
call this product, product A equals and then I can say, read us. And in Python three, I
have to import this now. So I have to save from func tools, import reduce. And then I
can come call the reduce function. And as a first argument, I give it a function. So
I define the function here, again, in one line with a lambda i say, lambda, x, and now
it has two arguments here. So function, the function for the reduced function always has
two functions has two arguments. So let's say x and y. And then it should evaluate x
times y. And as a sequence, I gave it a, so let's print the product. So this will print.
Let's make this example smaller, then we can see it has one times two equals to two times
three equals six, and six times four equals 24. So yeah, that's the reduce function. And
that's all I wanted to show you about lambdas.
A Python program terminates as soon as it encounters an error, and an error can be either a syntax error or an exception. So in this tutorial, we will have a look at what's the
difference between a syntax error and an exception? What are the most common built in exceptions?
How can we raise and handle exceptions? And how can we define our own exceptions. So let's
start with a syntax error. a syntax error occurs when the parser detects a syntactically
incorrect statement. So for example, if I write a equals five, and then in the same
line, I want to print this, this will raise a syntax error because I have no I have to
use a new line here. So this will be fine. Or a syntax error can be for example, missing
or too many parentheses. So if I try to run this now, this will also raise a syntax error.
And now exceptions. So even if a statement is syntactically correct, it may cause an
error when it is executed. And this is called an exception error. There are several different
error classes, for example, trying to add a number and a string will raise a type error.
So, if I say A equals five plus, and then as a string, I write the 10. And now, if I
run this, then this will raise a type error, unsupported operand types for plus int and
string. So, this is a type error. And now let's talk about some more common built in
exceptions. So, of course, there is the import error. So if I say import, and then some module
that does not exist, then this will raise a module not found error, which is a subclass
from the import error. This is a common exception, then there's the name arrows. So let's say
if I have a variable A equals five, and another one, b equals C, and C is not defined yet.
So, if I run this, then it will raise a name error name C is not defined, then there's
the file not found error. So, let's say I want to open a file f equals open and then
the file is called some file dot txt. So if I try to run this, then I will get a file
not found error, no such such file or directory. Then there's the value error. Which happens
if the function or operation receives an argument that has the right type, but an inappropriate
value. For example, let's say I have a list with some numbers here 123. And now I can
remove elements from a list with the dot remove method. So I say a dot remove one, so this
works fine. So now, I print A, and the one got removed. And if I try to add the two,
remove the four, which is not in the list, and this will raise a value error, so list,
remove x x not enlist, then there's the index error. So if I want to access an index of
a sequence, or of this list, that is not that is too large. So for example, if I try to
access the index for, then this will raise an index error list index out of range. And
if I have a dictionary, so let's say I have a dictionary with and name, and the name is
Max, and it has only the key value pair have the name, and I want to access for example,
I want to access the age then this will raise a key error because the H key is not inside
my dictionary. Now let's talk about raising an exception. So if you want to force an exception to occur
when a certain condition is met, then you can do this with the race keyword. So let's
say we have a variable x equals and minus five. And then we say if x smaller than zero,
then we want to raise an exception and then we say, race and then we raise simply the
base exception, and as message we give it x should be positive. So now if we run this,
then this will raise this exception x should be positive. And now if we get given a value
of larger than zero, then no exception will be raised. As a second way you can use the
assert statements so you can say. You don't use an if statement. So you use an assert
statement. So you say assert, and then a condition and the search statements will will throw
an assertion error if your assertion is true. Not true. So if you write here, you make an
assertion that x should be larger or equal to zero. And now if we run this, then this
will raise an assertion error, we can also give it a message here. So x is not positive.
And now this will print the message here. And if our statement is correct, so x is positive,
then your code will be just fine. So if I ran this, then no assertion is here. Now if
you want to handle exceptions, so you can catch exceptions with a try except block.
So you write for example, you write try and then call on and then you can do some operations.
So let's say I want to try a equals five divided by zero, and this will raise an error. So
let's simply run this and show you what happens. So this will raise a cirro Division error,
because division by zero is not allowed. So what I can do, then I can make a try except
blocks. So I will try this statement. And then I can write except, so if an exception
is raised, then the code will continue here. And then I can simply print and our are happened.
So if I run this, then your program doesn't stop here, it will continue and it will continue
in this line. And you can also catch the type of exceptions so you can ride except exception
as E. And then you can print your exceptions. So you can if I run this, then it prints the
division by serial message from the zero division error class. Now, it's good practice to specify
the type of exception you want to catch. And therefore you have to know the possible errors.
So for example, if you know that this is a zero division error, you can simply write
or you should write, except zero division error. And then you can do something here.
You can also for example, use multiple statements here. So you can try multiple operations.
So let's say we want to try five divided by one. So this is this is fine. And then we
say B equals a plus and then a string. So we we've already seen this, so this will race.
So let's this will raise a type error. So let's print here. So let's catch this acceptive
zero division error as E and print E. And now we also want to catch a type error. So
then we write type error as E, and then we can also print this. So now if we run this,
this will catch the Type error and prints this message, unsupported operand types for
float and string. And now if this fails, then this will be catched here, and then this match
message gets printed. So now we have division by zero. That's how you can handle exceptions.
Now you can also with a try except block you can also have a else clause. So an else clause
is run if no exception occurred. So here I print. Everything is fine. And now, if I,
for example, make divide by one that's fine, and I want to say a plus four, that is fine.
And then the code continues in the else clause. And I also can have a finally clause. So the
finally clause runs always No matter if there was an exception or not. And this is, for
example, use to make some cleanup operations. So here we print Li cleaning up. So now if
you run this, then the else clause runs, and the finally clause runs. And if there is an
exception, for example, this, then this line is running. And again, the Finally, clause
also is running. So yeah, that's how you can handle exceptions. Now, as the last thing,
let's talk about how we can define our own exception. so we can simply define own error
classes by sub classing from the base exception class. So we can say for example, class value,
too high error, and typically, you want to give your class a name with an error at the
end. So the class value to high error. And then as a base class, we use the exception
class, and then we can simply say pass. So this is already a valid, defined exception
error. So now, we can say, let's write a small function, test value with an input. And now
we say if x is larger than 100, then we can raise this value to high error. And by default,
it can also have an error message. So we say value is too high. And now if we run our method
with an argument of, let's say, 200, then we will see that this will raise the value
to high error, so value is too high. And now, for example, we can use a try and accept lock.
So let's say try test value, and then accept and catch the value to high error. And then
we print or let's print the era as E. And then print, let's catch the value to high era E and then print E. So then, we will see
that the message gets printed here. And usually what you want to keep this classes small,
but you can write it like any other class. So you can, for example, let's make a value
to small error. And also, as a subclass. It has a sub base class, it has the exception
class. And now you can, for example, define a custom in it method. So it has the self
argument, and then we give it the message and value. And then we can store this variables
here. So we can say self dot message equals message, and self dot value equals value.
And now, inside our test function, we make another if statement. So let's check if x
is smaller than five, and then we want to raise a value to small error. And now we have
to give it the message. So the message is value is too small. And then as a value, we
give it the x. And now if we catch this, then we want to catch the value too small error
as E. And now we have the information about the error so we can print e dot message, and
we can also print e dot value. So if I test my function with one, then the value to small
error will get raised. So I'm sorry, I'm Miss colon. I forgot the column. So then, um, It
catches the error here and prints all the information that I defined here in my error
class. Python already comes with a powerful built in logging module. So you can quickly
add logging to your application by simply saying import logging. And then you can use
this. And in this tutorial, we will have a look at the different block levels, the different
configuration options, how to lock in different modules, how to use different lock handlers,
how to capture stack traces in your log and how to use rotating file handler. So let's
start. So after importing the logging module, you can import to five different, you can
lock to five different log levels. So let me copy this here. So the levels are debug
info, warning, error and critical. And they indicate the severity of the events. So if
I run this, then we will see that only warning error and critical are printed. And this is
because by default, only levels of only messages with level warning or above are printed. And
if we want to change this, we can do that by setting the basic configuration. And usually
we want to do this right after importing them logging module. And then we say logging dot
basic config. And then we can specify some arguments here. And for this, I would have
a look at the documentation. So in the official Python documentation, you find the different
arguments for the basic configurations. So for example, you can set the level and the
format, and then the date format. And so in this case, I said level two logging dot debug.
And then for the format, I give a string, and inside this string, I can
specify this lock record attributes. So for example, I can have the name being locked.
And I do this by saying or by writing percent, and then in parentheses, name and then S.
Or I can say the ASC time, so this locks the time, then the level name and the actual message.
And then I can specify how the time should be locked by saying date format equals and
then give a string for the date format. And for this, I can also have a look inside the
documentation. So here are the different formatting rules for how to lock the time. So for example,
percent m will look the month, then the day then the year, then the hour, the minute and
the second. And now if I run this, then we see our new format. And also that debug info,
warning, error and critical are all locked. And by default, our logger is called the root
logger. So that's because the name here is root. Now, if I want to log in different modules,
then it's best practice to not use this root logger. But create your own logger in your
modules. So let's say we have a helper module here. And what you do then, after importing,
logging, you create your own internal logger here by saying logger equals logging dot get
logger. And then you give it a name. And it's also good practice to use this double underscore
and then name global variable. So this will create a logger with the name of the module.
So it's called helper in this case, and then you can use this logger to lock something
so as for example, say logger dot info. Hello from helper and then in your main module.
After importing, logging, and setting the config, then for example, if I import this
helper module, then it will lock the message from the helper module with the name of this
logger. So it's good practice to create your own logger in your modules with this get logger
function and then give this name with double underscores here as a name. Now, if I create
this log on here, then this will create a hierarchy of loggers. It starts at the root
logger, and all these new loggers get added to this hierarchy. And they propagate its
messages up to the base logger. So now if I don't want to have this propagation, I can
say logger dot propagate equals false. So by default, this is true. And now this will
not propagate to the base logger. And now for example, if I run this module and import
the helper module, then nothing gets locked here because it doesn't propagate to our base
logger. Now let's talk about lock handlers. So handler objects are responsible for dispatching the
appropriate lock message to the handlers specific destination. So for example, you can use different
handlers to send log messages to this standard output stream to files via HTTP or via email.
And ba you let me show you how you set different lock handlers. So first, we create a our logger
in our module by saying logger equals logging dot get logger, and then the name of this
module. And then I want to create my handler. And let's say I want to have a handler that
locks to this stream. So a stream handler. And then this equals logging dot stream handler,
though this is a built in class. And I also want a file handler that locks to the file.
The file handler equals logging dot file handler, and then it needs a name. So let's say our
lock file is called file dot lock. And then typically, for each handler, you want to set
the level and format. So we say, stream handler dot set level, for example, set this to logging
dot warning. And for the file handler, the file handler should only lock method messages
of level logging dot error. And now we also specify some format. So we say, a stream format
equals logging dot format. And then inside here, we give it a string, just with the,
the same like with the basic config. So let's say we want to have this string here. So we
want to have the name of the logger and the level name and the message. And all let's
also set the file handler to this format, or just call this format. And then First,
we set the formatter to our handler. So we say stream handler, dot set format, formatter,
and also we say file handler, dot set formatter formatter. And then at the end, we have to
add our handler to the logger. So we say logger dot add handler. And first we want to add
the stream handler, and then logger.at handler. And now we want to add the file handler. And
now if we use this logger and lock something for example, say logger dot warning, and then
we want to say this is warning. And now we also want to have logger dot erawan and Block,
this is an error. And now if we run this, what will happen is in our stream, we have
warning and error, because our stream handler locks, messages of level warning and above.
And then also file handler locks to a file. So now if we have a look, in our folder, there
is now this file lock. And this only has the error message. So this is how we can define
the front lock handler. Now let's talk about other configuration methods. So we've already seen the basic config method. But we can also
use the file config or dict config method. And for this, you will create a file in your
folder. And you specify it with this syntax. So you call it logging.com, or logging dot
ini. And then you define the loggers, the handlers and the formatters. So in this case,
we define two loggers with these names, one handlers, and one format. And then you specify
each of these further. So you say logger, and then underscore and then the name of the
logger. And then you give it its arguments. So let's say for example, we have a logger
called simple example. And this should lock to level debug and above. And it should have
a console handler. And then we come and we define the console handler, and this is a
stream handler with this formatter. And then we define this formatter and give it the format.
And now if we want to use this config file, then in our file, we say, import logging,
dot config. And then we can call logging dot config dot file, config, and then give it
the file name. So we say logging.com. And now what we can do is we can create a logger
with for example, with this name. So this will get the simple example logger. So let's
say logging dot get logger. Simple example. And now if we lock something with this logger,
say logger dot d back, because it also locks debug, this is a D block message. And now
if we run this, then we see we have the message here with this format, the time then the name,
the level, and the actual message, just like we defined here for our formatter. And we
can also use a dict config, but I won't cover this now. So for this, you should also have
a look at the documentation. So the config is just a different syntax that you can use.
And then you would right here, logging dot config dot dict. config, and set this config
from a dictionary. So with this two methods, you don't have to hard code your configuration
in your code. But you can use a separate file that you can easily change without changing
the code. So yeah, remember that you can also use these tickets and file conflicts. Now
let's talk about capturing stack traces in your lock. So this can be very helpful for
troubleshooting issues. So let's say you have a, you run a code that
raises an exception. So let's say we have a list with some values 123. And we want to
access a value, but we use an index that is too large. So this will raise a index error.
And we can catch this by saying except index error as E and then we can say Logging dot
error. And by default, this will only now lock the error message live index out of range.
But if we also want to lock the stack trace, then we can set the argument e xe info equals
true. So e xe underscore info equals true. And this will also now if you run this, this
will also include the stack trace in our logger. So now we can see that trace back and the
line where our exception occurs. And yeah, so this is helpful for troubleshooting issues.
And now let's say we don't know what kind of error we raised. So let's say we just say,
accept and catch everything. But we still want to have our trace back, then we can import
the trace back module. And we can, for example, look a string. So the error is, and then we
use string formatting. So we say percent s, this is a placeholder. And then here, we call
this trace back dot format, e x c method. So this will now if we run this, then this
will do the same thing. Basically, this will also print this measure message to the lock
the error is, and then includes the trace back. So let's talk about rotating file handlers.
So let's say you have a large application with a lot of log messages, and you want to
keep track of the most recent events, then you can use a rotating file handler that keeps
the files small. So for this, let's say, we also have to import this. So we say from logging
dot handlers import rotating file handler, then, let me quickly copy this here. You create
your logger. Here, you set level. And then here, you create your file handler. So your
handler is now a rotating file handler. And then you give it the name of the lock file,
then the max bytes. So this means that after two kilobytes, it will roll over the lock
to another log file. And it will also keep five backup counts. And then we add our handler
to the logger. And then for example, we log a lot of messages. So we say, for underscore,
this means that we don't care about this. So for underscore in range 10,000, we look
HelloWorld. And now if we run this, we see that in our folder, we now have different
log files, all with this Hello, world message. And now if we also have a look at the folder,
then we see that each of these files is two kilobytes and after two kilobytes, it gets
rolled over. So this is how you can use a rotating file handler. And sorry, now, let's
say your application will be running for a long time, then you can use a time rotating
file handler. So for this you say from logging dot handlers import, timed rotating file handler,
and this will create a lock, a rotating lock based on how much time has passed. So
what we will do here is we also create a our handler that is now a timed rotating file
handler. And then the name of the lock and then we say when should it roll over. And
therefore we can give for example, we can give an S for seconds, an M for minutes, an
H for hours, then a D for day. We can also say midnight, or we can give it the weekdays.
So, W zero means Monday, W, one means Tuesday, and so on. So in this case, let me rotate
this every seconds with an interval of five. So every five seconds, a new file gets created.
And we keep a backup of five files. So now if we say, for example, for underscore in
range, let's say six, and then we want to lock something. And after this, we want to
wait a specific amount of time. So let's import time, and then say time dot sleep. And then
we want to sleep five seconds. So now if we run this, we see that our lock file got created.
And now if some time has passed, so after five seconds, another log file got created
with this timestamp. And then after five seconds, again, another, and so on. So this is the
time rotating file handler. And as a last thing, I want to mention that also if you
have a lot of different modules, and lock many, many different things, so especially
if you use a micro service architecture, then I would recommend to use not locked to this
simple messages, but use the JSON format for logging. And for this, I would recommend this
open source, Python, Chase and logger. So you can find this on GitHub. And you simply
install it with pip install Python, Chase and logger. And then you can define this format,
and add this formatter to your handler. And then you log in JSON format. Jason is short
for JavaScript Object Notation. And it's a lightweight data format that is used for data
exchange. It's heavily used in web applications, so you should be comfortable working with it. Luckily, Python already comes with a built in JS module that makes working with JSON
data very easy. So in this tutorial, we will have a look at how we can encode and decode
JSON data with this module. So let's dive into it. And first of all, let's have a look
at how Jason data looks. So here I have this example file called example dot Jason. And
here we see that chastened data looks very similar to a dictionary. So it consists of several key
value pairs. And as values it can take strings or numbers, or Booleans, are also nested types,
like here, a nested array or a nested dictionary. And we can also have a look at the whole conversion
table. And by the way, you can find this on my website, Python minus engineer.com. There
you can find written tutorials to all my other video tutorials. And this is how Python is
translated to chase and vice versa. So a dictionary in Python is an object and chasen list and
tuples are an array is string is a string, integer, long and float are a number and chasten.
True and False are also true and false, but with a lowercase and none is now in Chase.
And so these are all the conversions you have to know. And let's start working with it.
So let's say we have a Python dictionary and want to convert it to a JSON format. And this
is also called serialization or encoding. So let's say let me copy this here. Let's
say we have a dictionary called person. And this has a name, an age, a city, a Boolean,
if it has children, and then titles and this is a nested list. And let's say I want to
convert this to a chase an object. So first of all, I have to import the chasen module.
And then I can say, if I want to have this in chasen format, I can say person chase Then
equals and then I use this module and I use chasen dot dump s, and then the person. So
this will dump our object to a JSON string. Now, if I print this, print our person and
chasen then I will see that this is now in chastened format. And we can see this, for
example, because false has a lower case. Now I can also specify an indent here. And I would
recommend setting this indent to four. And now this has a nicer format. I can also specify
different separators. And this is a tuple with two values. So here I can specify different
separators. So instead of a comma here, I use a semi colon in the space. And instead
of a colon in the space here, I want to use, let's say, an equal sign and the space. And
now if I run this, then we can see that different separators here, but I would not recommend
using different separators, but instead use the default ones. But what's also helpful
argument here is to use this sort keys argument and set this to true. So by default, this
is false. And now if I run this, then we see that our keys are sorted alphabetically. So
this is how we can convert from a Python dictionary to a JSON object. And in this case, to a string.
Now, I can also convert it or dump it into a file. And for this, I can say, I open a
file. So let's say with open and let's call our file person, the chasen and I want to
open it in right mode, open it as file. And then I can say chasen dot DOM, not dump s
because S stands for our string, I want to dump into a file. So let's dumb and I want
to dump the person object into our file. So now if I run this, then we see that this file
got created in our folder. And this contains our JSON data here. So for example, I can
also specify the indent here, let's say indent equals four, and run this and have a look
at our file again, then we see that it has not a much nicer format.
So this is how you convert from Python object to JSON data. And let's say we have chastened
data and want to convert it back to a Python object. And this is called D serialization
or decoding. So let's say I have our person in JSON format here and I want to convert
it back into a dictionary and I will say person equals Jason dot load. So in this case, I
want to load from a string and then I will give it the person chasing and chasing and
now if I print our person again, and don't print this, then we will see that now we have
a Python dictionary again, because here we can see that false is written with an uppercase.
So this is how you convert from a chase string. And, like before, if you want to convert from
a chasen file and you use the chasen dot load method. So for this we have to open our file
so we still have our person dot chasen here in our folder. So we say with open and let's
open this file person, that chasen and now we want to open it in read mode as file and
then I want to I can say person equals chasen dot load from our file. And then I can print
this and if we run this, then we see that this does the same thing. So this is how we
can decode chastened data. And now, in this case, we work with a dictionary by Let's say
we have a custom object. So let's say we have a custom class, let's call, let's create a
class called user. And our user has two instance, variables. So let's say it has a name and
an age. Let's say, self dot name equals name, and self dot age, equals age. So now let's
create a user object user equals user. And let's say the name max and the age 27. And
now let's say I want to have this in JSON format. And like before I call chasen dot
dump. So dump from a string, dump as a string. And I want to dump the user. Now if I run
this, then this will give a very long error here. And at the end, it says type error object
of type user is not chased and serializable. So what I have to do, I have to write a custom
encoding function, and this is not very long. So let's say let's create a function called
encode. user. And this will take a object. And inside our function, we check if our object is of
with this is instant method. So this will check whether an object is an instance of
a class. So let's check if our object is of class user. And if so, then we will return
a dictionary with all the instance variables as key value pairs. So let's say it has the
name. And this equals it, this is our object dot name. And then it has the key h with the
value object dot h. And then as a little trick, it will get also the class name as a key.
So I can say, object dot with double underscores class and then dot double underscores name.
So this would give the name of the class as a string. And then as a value, the value doesn't
matter. So I simply put in true. And otherwise, I will raise a type error. Let's raise a type
error and as a string or message, I will put this same message here. So now this is our
custom encoding function. And now in our dump, or dump s method, I give it that as a default
argument. And now here, I use this encode user function. So this now we'll use this
function for how to encode the object. And now if I run this, then this worked. So now
I can print our user dot JSON. And now we see that we have our dictionary with the name,
the age and the user class is key with value true. So this is how you encode a custom object
with this default argument. And then there's also a second way so you can implement a custom
chasen encoder. So let's say we import from Chase. We import the chase and encoder. And
then we create a class called this user and coder. And this is derived from this base
chazan encoder. And then we override this default method. So let's say this is called default and this takes self and an object
here. And then inside we do the same thing. So we check if our object is of the Last user,
and then we'll we will return this dictionary with the class name in it. And otherwise we
will we let the base chasen encoder handle it. So we say return chasen encode our default,
self and object. And now in our dump or dump s method, I can give it a class argument as
a class. Now I use the user in encoder and not the bass chasing encoder anymore. So now
if I run this, then we see this also worked. And as a last option, now I can use this encoder
directly. So I can say user chasen equals user encoder. Now let's create a user encoder.
And then I can say dot encode our user. And now if I run this, then we see this also worked.
So this is how you encode custom objects. Now let's say I want to decode our object
back. Let's say I have here our user in JSON format. And I want to have it in a normal
Python object. So I can say user equals Jason dot load s. And then I will give this user
chase in here. Now, if I run this, then this worked. So I can print the user. And now we
see we have a dictionary here. So we don't have a user object. So let's check the type
of this user, then we see that this is a dictionary here. So for example, I cannot call user dot
name, because it's not a user object. But what I have to do if I want to decode this
into a user object, I also have to write a custom decoding method. So let's call this
decode user. And this will get a dictionary. And now, inside this function, we check if
our dictionary contains the user key. So now here, in in our encoding function, we added
the user class name as a key. So now, in here, we check if this key is in our dictionary.
So let's say if user dot double underscore name in dictionary, and then we will create
and return a user object. So let's return a user. And as name, it will get the name
from our dictionary, so name equals dictionary and then the dictionary with the key name.
And as a age, it will get the age of the dictionary. So age equals Dictionary of age, and otherwise,
it will simply return the dictionary. So then still, the decoding will work but it will
be decoded into a dictionary. And now we have to use this custom decoding method. So we
can say in our chasen dot load or chasen dot load s method, we can specify an argument
that is called object hook. And now we set this object hook to our decoding message.
And now if we run this, we see that we have our user object so we can let's print that
type of user. And then we see that this is now a class user. And we can access its instance
variables for example, user dot name, and here it prints max. So this is how you decode
custom objects.
So Python comes with different built in modules to generate random numbers. In this tutorial,
we will have a look at the random module for pseudo random numbers, the secrets module for cryptographically strong random numbers and the NumPy random To generate arrays with
random numbers. So let's start with the random module. And first of all, we import random.
And this is used to generate pseudo random numbers for various distributions. And it's
called pseudo random because the numbers seem random, but they are reproducible. And we
will see how we can reproduce the data in a second. But first of all, let's have a look at the different functions. So the easiest one is random dot random. So let's say a equals
random dot random, this will print a random float in the range from zero to one. So let's
print a. So this is a random float in the range from zero to one. Now, if you want to
have a specific range, we can use random that dot uniform and give it a start and a stop.
So let's say our range is from one to 10. Now this will produce a random float in this
range. Now if you want to enter chess, we can use random dot Rand int, and give it the
range. And if we run this a couple of times, hmm. Now it's not happening. But this range
will actually now we got it, this will include the upper bound, and you might expect a behavior
with this is not included. So for this reason, you can use the RAND range method, so this
will do the same thing, it will pick a random integer in this range. But here the upper
bound is not included. So this will never pick the 10 here. Then there's the random
dot normal variate function with a mu and a sigma. So let's give it zero as mu and one
sigma. And this might be useful if you're working in statistics. So this will pick a
random value from a normal distribution with a mean of zero and the standard deviation
of one. So let's have a look at how this normal distribution looks. This is the normal distribution
for different means and standard deviations. So in this case, we use zero and one, so we
have to have a look at the red line. And this will pick a random value somewhere in this
range where our red line is not zero. So this is the random normal variant. Now the random
module also comes with different functions to work with sequences on let's say, we have
a list and call it my list equals. And let's create a list with different characters. So
if we print this, we will see that each character is now a element in our list. And for example,
now we can pick a random choice. So let's say a equals random dot choice from our list.
And print this so this will pick a random element. Now if you want to pick more elements,
we can use random sample and give it the number of different elements we want to pick. And
this will pick unique elements. So it will for example, never pick a twice. And if we
want to have a behavior where elements can be can can be picked multiple times, we can
use the random dot choices method. And here we have to use k equals three. So this will
do the same thing, but now we see it can pick elements multiple times.
Then there's also the random shuffle methods. So let's say random dot shuffle our list so
this will shuffle a list in place. Now if we print this, then we see that the elements
are now shuffled. So these are the most common functions to generate random numbers. Now
are Yeah, I said that these are pseudo random numbers, because they are reproducible. And
you can do this with the random seed method. So I can say random dot seeds and give it
a value here. So let's say for example, one, and then I can do different random operations.
So let's say I want to have, I want to print random dot random. And I want also want to
print some random integer. So let's say random dot Rand int in the range from one to 10.
Now, if I run this, this will produce some random numbers. And then I can reseed again
with this value with the same value here, one, and then do the same set of operations.
And now if I run this, then we see that these are now exactly the same numbers here. Now,
I can also, for example, now I can see it with a different value here, let's say two.
And then I do this operations. And then again, I will see it with one and do these operations.
And at the end, I will seed with two again and do these operations. And then I run this
and now let's have a look. And now we see that all our operations are our random numbers,
with a seed of one are now the same, and then all, where I use the seeds to all these random
picks are now the same. So this is how you can reproduce your data with this random seed
functions. And because these numbers are reproducible, they are not recommended to use for security
purposes. And for this purpose, you should use the secrets module. So we can use import
secrets. And this only has three functions. And they should be used for things like passwords,
or security tokens or account authentication things. So for all these purposes, you should
use the secrets module. The disadvantage is that it's it takes more times for these algorithms,
but but they will generate a true random number. So and it only has three functions. So the
first one is secrets dot ran below. So let's say a equals secrets dot ran below, and then
it has an exclusive upper bound. So this will produce a random integer in the range from
zero to 10. And 10 is not included. Then you have the secrets dot random bits method. So
this will return an integer with K random bits. So for example, let's give it four bits.
Now, if you you're familiar with bits and bytes, so for example, here for bits means
that it can has four different random random binary values here. So the highest possible
number here, and this case would be 1111. So this is 15. So this is two to the power
of three, which is eight, then this is two to the power of two, which is four. So eight
plus four plus two plus one equals 15. So this will generate a random number in the
range from one to 15. No from zero to 15, sorry. Then you also have a secrets choice method. So let's say I have
a list. My List equals list and with some characters in here, and then I can use A equals
secrets dot choice and my list. And this would pick a random choice that is not reproducible.
So this is the secrets module. And now if you're working with arrays, then you can use
the NumPy module. So if you have not installed it, just use pip install NumPy. And then you
can say import NumPy as NP. So usually, you will do it like this. And then you can say,
for example, you want a array with random floats, then you say A equals NumPy dot random
dot Rand, and then give it the dimensions. So in this case, I will put in three here.
So this will produce a 1d array with three elements in a year. So three random floats
here. Now, if I can, I can also use more dimensions here. So I can three, this is now a three
by three array. Now if I want to have random integers in a range, I can say, Rand end and
give it the range from, let's say, zero to 10. And here 10 is excluded. And then I can
give it this size. So let's say also size three a 1d array with random integers. Now,
if I want to have a array with higher dimensions, I have to use a tuple here, so I can use a tuple and say,
three by four, for example. So this will create a three by four array with random integers.
Then, this will also have a random
shuffle method. So let's say I have a NumPy array with different dimensions. Now print this
array. And then I can say NumPy, dot random dot shuffle, and then our array and now print
the array. And this will only shuffle the elements along our along the first axis. So
this will never switch elements in between, but only switch elements in the first axis.
So this is the NumPy random module. And one important thing you have to know is that the
ret NumPy random generator uses a different number generator than the one from the Python
standard library. And it also has a different seat. Well, seat functions, so I can also
say NumPy dot random dot seeds, and then give it a value, let's say one. And then I can
do some operations. So let's say NumPy of print this print NumPy dot random dot Rand
three by three. And then I can receipt and do the same thing. And this will now reproduce
the same, the same array. And the important thing is that you should use the NumPy random
seed method instead of the seed method from the random module that we've seen previously.
So these are two completely different seed generators. decorators are a very powerful
tool in Python and every advanced Python programmer should know it. In this video, I show you
the concept behind decorators how you can write your own decorators the difference between function and class decorators and some typical use cases. I promise you that once you have
understood the concept, it is not as difficult as it seems in the beginning, and it might improve your Python knowledge a lot. So let's start there are two different decorators,
function decorators and class decorators. more common is the function decorator and
it looks like this. So you have a function, call it def. And let's say call it do something.
And that does nothing in this case. And above your function, you have an add sign, and then
some other function name. So some decorator function name, let's say my decorator. So
this is how the decorator syntax looks. And what this does a decorator is a function that
takes another function as argument and extends the behavior of this function without explicitly
modifying it. So in other words, it allows you to add new functionality to an existing
function. So in this case, this function would be extended with the functionality of this
decorator. And in order to understand this concept, we have to know that functions in
Python are first class objects. This means that like any other object, they can be defined
inside another function passed as an argument to another function, and even returned from
other function. So now, let's have a closer look at the concept. So let's say we want
to, we have a function and call it print name. And this will simply print LX. And then we
have a decorator function, call it start and decorator. And now as an argument, it takes
a function. And inside our decorator function, we have an inner function called and we call
it wrapper. So def wrapper, this is a wrapper function, which, which reps our function.
So he inside this wrapper function, we execute the function. And then as I said, I can extend
the behavior. So I can do something before. And I can do something after it. So before
I say in this case, simply print start, and after it, I want to print and, and then after creating this inner wrapper
function, I also have to return it. And now, to apply this, let's first of all, simply,
let's execute the print name functions. And if I run this, it prints LX. And in order
to apply the decorator, I assign this print name function to now to our decorator function.
And as argument I take the print name function. So now the print name function has this new
functionality. So now if I run this, we will see that it prints Dart then executes the
function and prints Alex and then it prints and, and now the decorator function will do
the same thing as this line. So now if I write at start, and decorada, then I don't need
this anymore. So this now that's the same thing. If I executed now, it will also print
start Alex and end. And now this is how we can extend the behavior of a function with
a decorator. So let's see what happens if a if our function has some arguments. So let's
say we have a function, call it at five and this takes an argument and then it returns
X plus five. And now if I tried to run this at five and this argument I give 10. Now,
if I run this, I will get a type error because our wrapper takes zero positional arguments,
but one was given. So here, I need the same arguments is here. And to fix this, I can
use the arcs and quarks. I will talk about this in another video in more detail. But
basically with this syntax, I can use as many arguments in keyword arguments as I want.
And now inside our wrapper function, I also call this function with the arguments and
keyword arguments. So let's write it like this. And now if I execute it, then it works.
So this is how you apply arguments. And now what about the return value, so let's store
this in a result. So let's say result equals, add five, and then print the result. Now,
if I print this, this will print none here. And to fix this, I also have to save the result
of the function here, and then return it from my inner wrapper functions return result.
And now if I run this, it can print the result. And now I said last thing, what about the
function identity. So let's print the help function of f5. The health information with
this help function, and also let's print the name of this function with this double underscore
method. Now, if I run this, this will print that help function wrapper, and the function
name is also wrapper. So Python got confused now about the identity of this function. So
in order to fix this, I can import func tools. And here before my wrapper, I apply also a
decorator. That's called func tools, dot wraps, funk. So this will now preserve the information
of my used function. So now if I run this, I see that it now knows the help on function
at five. And also, our function name is now again, at five. So this is all to complete
the decorator funk decorator syntax. So this now is a
template for a decorator that you can use for all your function decorators. So let's
say call it my decorator, then you can do something before the function, then you execute
the function. And then you can do something afterwards. And then you return the result
and return the wrapper. So this is the template for a nice decorator. And you can also have
a look at this on my website, Python minus engineer.com. Yeah. So now, as we've seen
here, we see here a decorator that takes a function that takes an argument so decorators
can also take arguments. And what this means this is basically now two inner functions,
so an inner function within an inner function. And to make this clearer, we'll look at another
example. So let's say we have a function, call it greet, and then it takes a name. And
then inside it will print. And now we use an F string. And I've shown this before in
another video about strings, so we can say hello. And then inside braces, we use the
name. And now we use a decorator and call it repeat and give it an argument num times
and set it to three. So I want a repeat decorator that executes this function three times. So
how does this decorator now look? First of all, we have the outer function repeat, which
also takes num times and then inside it takes out decorator function as we've seen it before,
so we have a Decker Ray down. So define a decorator. Repeat. And this takes a function.
And then inside here we have our wrapper. And this takes arcs, and Clark's, and we decorate
this with our func tools dot wraps Decker decorator. And then inside our wrapper, I
simply want to repeat this the number of times I've given here. So I say for underscore,
because I don't need this for underscore in range num times. And then I say result equals
our function with the arcs and the quarks. And then I return the result, then I return
the wrapper, and then I return that decorator. So now if I execute greed LX, then this will
be executed the number of times I've given here. So now if I say executed four times.
So this is how the concept behind decorators with arguments work. And now let's also talk
about nested decorators. So you can stack decorators on top of each other. So you can,
let's say we have a function and call it let me copy this here. So let's, we have a function,
say hello, which gets a name, then it prints a greeting and returns the greeting. And now
we can debug this, we can decorate this with our start. And decorator as we've seen it
before. Now, let me copy this here inside. This is our start end decorator, which will
print start and end after our function. And we also decorate this with a second decorator
and call it D block. And now let me copy this debug decorator in here. So, this debug decorator extracts the
name and the arguments and the keyword arguments and then it prints the information of this
function it executes the function and then it also prints the information about the return
value. So, this will basically print some more information about this function. And
so now if I apply multiple decorators to add a function, they will be executed in the order
they are listed. So this means now if I say for execute say hello LX this will first of
all execute the debug function and then inside the debug function, it will execute the start
and decorator function. And then inside this function it will execute the say hello function.
So now if I run this, we will see that first of all, it prints calling say hello this is
from my Dubuc wrapper. Then it prints start from the start and decorator. Then it prints
Hello LX then ends and then again I'm here I am prints the function name and the return
value. Hello Alex. So this is how you can apply multiple decorators. And now it's the
last thing Let's talk about class decorators. So instead of a function decorator, you can
also define a class decorator. So let's say we have our function, say hello. And then
it simply print. Hello. And I want to decorate this with a class decorator. And I call this
count cause. So class decorators do the same thing as function decorators, but they are
typically used if we want to maintain and update a state. So in this example, I want
to keep track of how many times I have executed this function. So let's create a class call
it count calls. And this has a init method. And it takes self Of course, and then it takes
the function just like the decorator function. And then inside the in it, I will save the
function as class variable, or as member variable. And I said self funk equals funk. And then
I will also create a state. And I call this self dot num calls. So and this is zero in
the beginning, so I want to keep track of how many times this got executed. And now
in order to write a class decorator, I have to implement the call method. So this also
takes self, then the arcs and the quarks. And this is the same as the inner function
in our function decorator. And now, sorry, this also has trailing double underscores.
And now the call methods allows me to execute a object of this class just like a function.
So let's, as an example, let's just print Hi, there, here. And now, let's say I create
a object of this class called cc equals count calls. And this takes a function here. So
this example, I just use none. And now, since I've implemented this call methods, I can
say CC and execute this as a function. So now, if I run this, it prints Hi there. So in our example,
I don't want to print Hi there. So, what I want to do now, I want to update the state.
So I say self dot num calls plus equals one, then I want to print the number of calls.
So, I print this is executed self dot num sorry self dot num calls times
and then now this is my man, I also have to execute and return the function. So I say
return self dot func and now I call the function with all the arguments and the keyword arguments.
And now if I say, if I run this and I say Say hello, then Oh, sorry, self num calls.
Now, if I run this, then I will see this is executed one times and now if I run this again,
then I will see. Now this is executed two times. So here I could keep can keep track
of how many times this is executed. So this is how you can implement class decorators.
And now let's talk about some typical use cases of decorators. So for example, you can
implement a timer decorator To calculate the execution time of a function, you can use
a debug decorator like you've seen before. To print out some more information about the called function and its arguments, you can use a check decorator to check if the arguments
fulfill some requirements and the depth the behavior accordingly. You can register functions,
like plug ins, with decorators, you can cache the return values. Or you can add information
or update the state generators or functions that return an object that can be iterated
over. And the special thing is that they generate the items inside the object lazily, which
means they generate the items only one at a time and only when you ask for it. And because
of this, they are much more memory efficient than other sequence objects when you have to deal with large data sets. They are a powerful advanced Python technique. So let's have a
look at some examples. To understand how they work. A generator is defined like a normal
function, but with the yield keyword instead of the return keyword. So let's define a function
call it my generator. And here I can return or I can yield some values. So here I use
the yield statement and yield a value. So I want to yield one. And then I can have multiple
yield statements inside a generator function. So I can, for example, also yield two, and
then yield three. And now I can create a generator object. So I can say ci equals my generator.
And now if I print this, and this will only print that this is a generator object. And now what I can do, for example,
I can loop over this object. So I can say, for i in ci, and then I print the value. So
this will print one, two, and three. And I can also get the values one at a time with
the next function. So I can say value equals next ci, and then I can print the value. So
this will print one, and this will execute the function and runs until until it reaches
the first yield statement. And here, it returns the value and pauses at this line. So the
next time if I want to get the next value, again with this next function, so again, I
say value equals next ci, then it will continue here and runs until the next yield statement.
So it runs until here, and returns to and pauses here. So if I run this, now, it will,
it will print one and two. And if I do it again, then it will also return and print
three. And now what will happen if I try to run it a fourth time. So now if I run it,
this will raise a stop iteration, because a generator object will always raise a stop
iteration if it does not reach another youth statement. So yeah, this is how generators
work. And you can also for example, use them as inputs to other functions that take iterables.
So for example, the built in sum function takes a iterable. So I can give the generator
object here and I can print this. So this will calculate one plus two plus three equals
six. Or I can, for example, use the built in sorted method and put the generator object
here. So this will return. This will create and return a new list with all the objects
in a sorted order. So for example, if I have it the other way around three to one, and
then with this, I can sort it again. And then it prints one, two, and three. And now let's
have a closer look at the execution of a generator function again. So let's say I have another
generator, and I call it countdown, and it takes a starting number. And then I say first
of all I want to print starting. And then I say while num is larger than zero, I yield,
the num. And then I also want to update the numbers. So I say num minus equals one. And
then I create my generator object. So I say CD equals countdown. And for example, I want
to start at four. And now if I, let's first of all, run this, and notice that this will
not print starting here, so nothing will be executed here. And now the first time, I want
to get the first value with, let's say, value equals next of this countdown generator object.
Now if I run this, then now it will start from the beginning of this function and execute
it. So this will print starting, and then it will run until it reaches the first yield
statement. And here, it will return the number and stops at this statement. So I can also
print the value. And then it prints four. And again, the next time, I want to continue
here with again, with this next statement, let's say print, seed print next CD, then
it will continue here, it will remember the current state, so the current number is four,
then it will update the number now the numbers three, then it will continue in the while
loop. And then it stops again, at this line, and now returns three. So now if I run this,
this will also print three, and then again, it remembers the state and the next time I
continue, it will continue from here, and so on. And again, if I run this a couple of
times. Again, if I print next, then it will also print to and now it will also print one,
and now it will raise the stop iteration. So this is the execution in detail. And now
let's have a look at the big advantage of generators. So as I said, generators are very
memory efficient. So they save a lot of memory when you work with large data. So what this
means is, let's have a look at an example. Let's say I want a function, call it first
n and it takes a number as input. And this will return a sequence with all the numbers
starting from zero all the way up to n. So usually what you would do is you create a
list call it nums equals an empty list, then you also say num equals zero. So, this is
your start number and then you say while num is smaller than n nums dot append num. So
you at the current number to a list then you update the current number. So you say num
plus equals one and at the end, you will return this list. So you return nums and now I can
say for example, I can say my list equals first n and give it for example 10 and then
I can simply print this so now this will print all the numbers from zero to nine in a list.
And for example I can also calculate now the sum of this. So this will print 45. And now
here with this way, all the numbers are stored in this list. So this takes a lot of memory. And now if I use a generator instead,
I can say I define another function first n underscore, Jenna rater. And now it also
takes as input, and now I don't need the list anymore, I simply say num equals zero and
also the while loop while num is smaller than n. And here, I simply yield the current number.
So I yield num. And then I also have to update the number. So I say num plus equals one.
So this is the whole implementation of this as a generator object. And now I can, for
example, also print the sum of this first and Jenner Raider object. And now you see
this will give the same result. And this will also print 45. But here, I don't have to save
all the numbers inside this array. So I can save a lot of memory here. And for example,
if I analyze this, I can import sis. And now I can get the size of this object. So I can
see size persists precice dot get size of this object, this will return the size of
this object in bytes. And again, here, I also say, print sis dot, get the size of this object.
So first, I print the size of my list object. And then I will print the size of the generator
object. And here we see that already, the generator object is smaller. And now let's
say I don't have 10 numbers in here. But let's say I have 1 million numbers in here. And
the same number of elements in here, then this you see, this takes way more memory.
So and use cases like this, the generator object is very useful. So remember this. And
another advantage of the generator object is that we do not have to wait until all the
elements have been generated before we start to use them. Because we can, for example,
get the very first item with the first next statement. And we don't have to calculate
all the numbers. Yeah, so this is the big advantage of generators. Now let's have a
look at another example to practice the generators. A typical example is the Fibonacci sequence.
So we say define feeble, not cheap. And this will give this will get a limit as argument.
And the Fibonacci sequence works like this. So the first two numbers are zero and one,
and then all the following numbers are a sum of the previous two numbers. So now, we have
zero plus one is one. Now one plus one is two, one plus two is three, and so on. So
then we have five 813, and so on. And to implement this as a generator, first of all, we have
to store the first two values. So we say a and b equals zero and one. And then we say
while a is smaller than our limit, we yield the current value, so the current value is
a and then we update the current value. So now we say A equals B. And also we in the
same line, we update the B value, and now the B value is the sum of A plus B, the sum
of the previous two numbers. So we say a, b equals B, and so a is B, and B is a plus b. So this is the whole implementation of
the Fibonacci sequence. And now we can say for example, fib equals Fibonacci and as a
limit for example, like if it 30 and Now I can loop over this object, I can say, for
i in fib, and then print I. And now we see this will print the sequence until, until
this limit. And now as a last thing, let's have a look at generator expressions. So generator
expressions are written the same way, like list comprehensions, but with parentheses
instead of square brackets. And this is a very simple syntax and shortcut to generate
some generate to implement the generator expression. So I can say, my generator equals and now
I use parentheses and here I can use an expression with a for in loop. So I can say I, for I,
in range, for example, 10. And I can also use an if statement, I can say, if I model
two equals equals zero, so this will put all the elements all the even elements from zero
to nine in a in my generator object. And so for example, I can print or I can loop over
this object, so I can say for i in my generator, and then print i. So this will print 0246,
and eight. And this is similar to the list comprehension. So the list comprehension works
the same way, except that they use square brackets here instead of the parentheses.
So I can say, my list equals this expression. And then if I print the list, this will on
print the same sequence as a list. And by the way, I can also say I can convert a generator
object to a list with the list function. So I can say print list, my generator, and this
will do the same thing. And again, let's analyze the size of this. So let's say print sis dot,
get size of this object. and here also I want CES dot get size off this objects. And now
they here they are almost equal. But let's say again, I have a large number 100,000 Then
again, my generator object is much much smaller and saves a lot of memory. So with threading
and multi processing, you can run code in parallel and speed up your code. And in this
tutorial, we will learn what is the difference between a process and a threat, the advantages
and disadvantages of both how and why threads are limited by the Gil and how we can easily
use the built in threading and multi processing module to create and run multiple threads
or processes. So let's start with the difference between a process and a threat. So a process
is an instance of a program. So for example, if I'm running one Firefox browser, then this
is one process. Or if I'm running one Python interpreter, then this is one process. And
a thread on the other hand is an entity within a process. So a process can have multiple
threads inside processes take advantage of multiple CPUs and cores. So you can execute
your code on multiple CPUs and parallel processes have a separate memory space. So memory is
not shared, but between processes and they are great for CPU bound processing. So this
means for example, if you have to, if you have a large amount of data and have to do
a lot of expensive computations for them, then with multi processing, you can proceed
As the data on different CPUs and this way speed up your code and new process is started
independently started independently from other processes and processes are easily interruptible
and killable. And there's one Gil for each process. So this avoids the Gil limitation.
And I will come to the Gil or global interpreter lock in a second. Now, there are some disadvantages.
So process is heavyweight. So it takes more, it takes a lot of memory and starting a process
is slower than starting a threat. And since processes have a separate memory space that
memory sharing is not so easy. So the so called inter process communication is more complicated.
And now on the other hand, threats, so as I said, a threat is an entity within a process
that can be scheduled for execution. And it's also known as a lightweight process. And a
process can spawn multiple threads. So all threads within a process share the same memory.
And they are lightweight. So starting a thread is faster than starting a process. And they
are great for IO bound tasks. So this means input output tasks. So for example, when your
program has to talk to slow devices, like a hard drive or a network connection, then
with threading, your program can use the time waiting for these devices and then intelligently
switch to other threads and do the processing in the meantime. So this is how you can speed
up your code with threading. But on the other hand, threading is limited by the Gil. So
the Gil allows only one thread at a time. So there is no actual parallel computation
in multi threading. So threading has no effect for CPU bound tasks. And they are not interoperable
and kill killable. So be careful with memory leaks here. And since threads share the same
memory, you have to be careful with race conditions. And a race condition occurs where when two
or more threads want to modify the same variable at the same time. So then this can easily
cause bugs or crashes. And yeah, that's the difference between processes and threats.
And now I mentioned a couple of times the Gil. So let's talk about the Gil. And this
is also known as the global interpreter lock. And this is a lock in Python that allows only
one thread at a time to execute. And this is very controversial in the Python community.
But why is it needed. And this is needed because in C Python, so C Python is the reference
Python implementation that you get when you download and install Python from python.org.
So the gala is needed because in C Python, there is a memory management that is not thread
safe. So in C Python, there is a technique that is called reference counting for memory
that is used for memory management. And this means that objects created in Python have
a reference count variable that keeps track of the number of references that point to
the object. And when this count reaches zero, the memory occupied by the object can be released.
And the problem now in multi threading is that this reference count variable needs needs
protection from race conditions where two threads increase or decrease the value simultaneously.
So if this happens, it can either leak, it can cause leaked memory that is never released.
Or it can incorrectly release the memory while a reference to that object still exists. So
this is the reason why they introduced the Gil. And a couple of ways to avoid the Gil if you want to use
parallel computing is to use multi processing Or you can use a different free threaded Python
implementation and not c Python. So there's, for example, Chai THON or iron Python. Or
you can use Python, Python as a wrapper for third party libraries. And this is the way
it's it works in NumPy artists Sai pi modules. So they are basically just wrappers in Python,
that then call code that is executed in C. So yeah, that's enough theory. And now let's
jump right into code. So let's start with multi processing. And for this, you simply
say from multi processing, import a, the process I'm sorry. And now I create a list called
processes, where I will store all my processes. And now I define a number of processes. And
a good number usually is the number of CPUs on your machine. So you can say import o s,
and then we say num process processes equals o s dot CPU count. So on my machine, there
are four different CPUs. And then I will create the processes, so create processes. So I will
say, for i in range, num processes, P equals a new process. And this takes two important
arguments. Now the first one is target and the target function. So this is a callable
object or a function that is then executed by this program process. So I have to define
a function here. So I say, let's define this up here. So let's say in this example, let's
say their square numbers. And here, I will say for i in range 100. I will simply say
i times i. So this is a dummy example, that's basically not useful, but just for how to
show you to show you how to use different processes. So this is the function that my
process should execute. So I say target equals square numbers. And if my function here has
some arguments, so then I would also need to specify arcs equals and then as a tuple.
Give the arguments here. So in this case, I don't need them. So now I created my process.
And then I say processes dot append, my process. And now I want to start each process. So I
say for p in process, and then I say P dot start. And then I also have to join the processes.
So I say for P and process, P dot join. So this means that I want to wait for a process
to finish. And while I'm waiting, I am blocking the main thread. So here I am waiting for
all processes to finish. And I blocked the main thread until these processes are finished.
So now at the end, I can for example, simply print and main. And I will only reach this
point when all processes are done. And now if I execute this, let's For example, let's
also import time and tear.
Just to show you the different processes, I will wait some time and say time dot sleep
0.1 and now I am having a look at the activity manager or the task manager. So here I can
filter for processes. So I say I filter for Python. And as you can see that I've already
two Python processes running, they all have a different process ID. And they all, it's
also shown how many threads are inside my process. So now if I'm executing this Python
file, then we will see what will happen. So it takes a couple of seconds. And now we see
five Python processes coming up. So this is the main process, and then the four process
processes I created here. And now after a couple of times, after this is finished, they
will disappear again. So we can see that there are actually different processes now running
on my machine. And this is how we can use multi processing. And now let's talk about
multi threading. So the threading API is very similar to the previous multi processing IPA
API. So here, I say from threading, import threat. And then here, let's call these threats,
and num. Now I call this number of threats. And let's simply say I want to have 10 different
threats. And then for i in num threats, now I create a threat. And this takes the same
arguments. So it also has to define a target. And if my target has some arguments, then
I would also have to specify the arcs here. And then I say, threats dot append my threat,
then I will start each threat. So I will say for t in threats, T dot start and also join
them. So I will say for T and threats, T dot join. And now let's have a look at the activity
manager again. Now if I'm running this Python file, then we will see takes a couple of seconds.
Now we will see one process coming up with 11 threads inside so the main threads and
the 10 child threads that I created here. And now processing is finished and the threads
disappear again. So this is how you can use the threading module.
In this video, we will go into more detail about the threading module. So we will quickly recap how we can create and start multiple threads, then we will learn how we can share
data between threads and how to use locks to prevent race conditions. We will also learn
what is a daemon process and how we can use a queue for thread safe data exchanges. So
let's start and let's quickly recap from the last video how we create and start threats.
So this is the code where we left off. So we say from threading import threat. And down
here we define a num so we want 10 threats here. And now we create our threats. And for
each threat, we give them a target method. So this is the function that the Stan executed
by this threat. And then for each threat, we also have to say thread dot start. And
also threat dot join. So join means that we wait and block the main threat until the threat
is complete. So yeah, this is how we can can use the threading module. And now let's go
into more detail. And let's talk about how we can share data between threats. So since
threads live in the same memory space, they have access to the same data. So this makes
sharing data very easy. So we can for example, just use a global variable here. So let's
define a global variable. And in this case, I will call this database value. So and I
will set this to zero in the beginning, so this should simulate a database now And now
in our main code, what we will do is, we will first of all we print, print the start value.
So we print our database value here. And then we will create two threats. So let's say threat
one equals threat. And this will get a target method that we will call increase, and also
threat a second threat. So threat to that does the same thing. And then for each threat,
we say threat start. And also, threat join. So we wait for the threads to complete. So
thread two dot join. And at the end, we print the end value. And then we again, want to
print a database value at the end. So and now we have to define this increase methods.
So we say define increase in here, we want to get and modify our database values. So
in order to modify the global variable, we have to say global database value. And now
we can use it here. And now let's make some dummy code. So we want to simulate some database
access, we want to get the value from the database and store it in a local copy. So
we say local copy, equals and here, we can simply copy it from our database value. And
then we want to do some processing. So here, we simply say, local copy plus equals one,
so we want to increase it. And then we simulate that this should processing should take some
time. So we import time. And then we wait some time here. So we say time dot sleep 0.1.
And then when we are done, we want to write our new value back into our database. So we
simply copy it back and say database value equals local copy. So this is our increase
function. And now let's run this. So now we have two threats.
And if we run this, let's clear our console. And let's run this again. So we he sees start
value is zero, and end value is one. So now you might be wondering, why is this one because
we have two threats. And both threats should increase our database value. So now the end
value should actually be two. And now why is it one and this is because we have a race
condition here. So a race condition happens when two or more threads try to try to modify
the same variable at the same time. And now let's step through this code what is happening
here. So when we say thread one dot start, then it will get the database value and store
it in a local copy. So in the beginning, this is zero, and then we will modify the local
copies. So now our local copy is one. And now since we say time dot sleep, our program
can intelligently switch to the other threads and use the waiting time. So now it switches
to threat number two. And now thread number two invokes this increase method. So it also
copies the database value in the local copy. And the local and the database value is still
zero because we didn't write it back here. So now thread two also has a local copy, which
is zero and then it increases it's to one and then we again say time that sleep so we
can switch back to threat number one. And now threat number one copies it's it's a Copy
that is one into our database, and then it's done. And then we are switched back to thread
two again. And that now also copies its local copy that is also one here into the database
value. So this is why the end value is one. And now how can we prevent this. So for this,
we use the lock object. So we say from threading, import, lock, and then we create a lock here.
So we say lock, dot lock equals lock. And now we say our increase method gets a lock.
So we have to give this year in the arguments. So we say arcs equals lock. And since this
is a tuple, with only one element, we also need a comma here. So Python needs this comma
here in order to know that this should be a tuple. And also, for our second threat,
this will now get the lock as an argument. And now with a lock, we can so a lock prevents
another threat to access this to access this code part at the same time. So now we can
say lock dot acquire. So it basically has two, only two methods. So we say lock dot
acquire. And now we can process and modify the value. And at the end, when we are done,
we say lock dot release. So and we should always, every time we acquire a lock, we always
have to release it. So Otherwise, this will block and never release. So then we are stuck
here. And now what is happening with this lock. So now our let's run this and see if
this works.
Lock dot acquire. So Oh sorry. This is a lock object. So now let's run this. And now we
see that it's correct, our end value is two. So what happened here, so now our first threat
got here. And since it locked the state, now it can modify the value. And it will not switch
back to our threat number two here, because it's the state is locked. So it can count
it continues and runs and copies the local copy that is now one into our database, and
then it releases the lock. So now our second threat can enter this code part. So it also
gets the database value. And this is now already one and then it modifies it to two and writes
it back. So now this is working fine. And as I said, you should never forget to lock
to say lock dot release. So there's a recommended way to use locks. And this is to use a lock
as a context manager. So you can simply say with lock colon, and then use the part of
the code here. And then we don't need to say lock that release. So let's also get rid of
this. So if we run this, then we see this also works correctly. So this context manager
acquires and releases the lock for you. So yeah, this is the concept of locks. And now
let's talk about how we can use queues in Python. So queues are excellent for thread
safe and process safe data exchanges and data processing in multi threaded or multi processing
environments. And for this, we simply we have to import the queue so we say from queue import
queue. And now let's get rid of this. And first let's have a look at how a queue is
working. So a queue is a linear data structure that follows the feefo or First In First Out
principle. So a good example of a queue is a queue of customers that are waiting in line
where the customer that came first is also served first. So, let's create a queue object.
So we say q equals Q, and then we can put in some elements. So we say q dot put one,
and Q dot put to two. And also, let's put in us a third object, so say q dot put three.
And now our code looks like this. So first, the one is, enters our Q, then we put in the
two, and then we put in the three. And here, this is our front. So the beginning of the
queue. So now if we want to get the first value, we can do this by saying first equals
q dot get. So this will get and remove the first item. So if we print first, then this
will print one. And now our thread, our queue only has three and two inside. So this is
how the queue principle is working. And there are a couple of other
important methods. So first, you can check if a queue is empty with Q dot empty, this
will return true if the queue is empty. And then in a threat threading environment, whenever
you get a object with queue dot get, and then you process this object. When you are done
processing, you should always call queue dot task done. So this now tells the program that
we are done processing with this object and can't can can't, can continue. And there's
also a Q dot join method. So this blocks until all items in the queue have been gotten and
processed. And this is similar to the thread dot join methods. So with this, we block the
main thread and wait until all the elements in our queue are processed. So these are the
the important methods you have to know. And now let's look at an example to how we can
use this. So we say Um, also, we want to define a couple of threats. So we say num threats
equals 10. And then we say for i in range, num threats. And here we create our threat.
So now we say threat equals threat. And as a target, it needs to get a function. So we
will define this in a second. And then we say thread dot start. And we will also now
use a demon threat. So we say threat dot demon equals true. And I will explain what this
will do in a second. So by default, it is not a daemon thread. And then let's define
our function. So our function, let's call them worker, and define this worker function
up here. So we say def worker. And now we use an infinite loop. So we say while true,
and then we say value equals q dot get. So this will get two arguments, this will get
the queue and also a lock. And here, we will get the first value inside our queue with
Q dot get and then we will do some processing with it. So in this case, we simply want to
print the values so we say print and let's import the current so let's say from threading
import current threads, so we want to print this here. Let's use an F strings so we can
say we are in and then we are in our current threat dot name. And in this threat we got
the value. So we simply want to print this here. And then we are done. Remember, we have
to say q dot task done. And now what this is doing, this is an infinite loop that is
now starting. And since we don't have values inside our queue, this Q get method will block
and wait until items are available. So now we wait here, so we have to fill our queue
with elements. So we simply say for i in range, let's say one to 21. So we want to fill this
with all the numbers from one to 20. And we say q dot put AI. And then at the end, we
have to say q dot join. So we block the main thread and want to wait until all the items
have been gotten and processed. And yeah, then we print and main. And now let's run
this code and see what's happening here. And here, we also have to, now this worker gets
no, let's leave this lock, and only gave it a cue. And now as arguments, we have to give
it in a tuple. Again, we give it the cue and don't forget the comma here with one item.
And now let's run this and see what's happening. And now
we see that we have threads with different names from one to 10. So we have 10 different
threads. And they get the values from our queue and can process the item here. And the
order might not be sequential. But what is important here is that with a queue, we can
easily exchange the data in a thread safe environment. So this value, this queue gets
call is thread safe. And also the queue put calls are thread safe, so no other thread
can write at the same time into this queue position. And now let's run this again. So
in this time, we, this time, we got lucky, and we got lucky again. So what might happen
here is that multiple threats might try to print at the same time. So there might be
print statements that are in the same line. So two statements in the same line and no
line break. So to make it work correctly with we should say with lock and use a lock here.
So let's also give this a lock. Let's say down here, lock equals lock. And then as argument,
it also gets the lock. And now this should work fine and never produce confused lock
statements. And yeah, let's have a look at what is happening here again, and why we use
a demon threat. So we are our threats, entered this infinite loop. And then it blocks here
because we have no items inside our queue. And then as soon as items are available, then
it can continue here and process the items. So in this case just prints it and then after
all the items are done, we can continue here then this will unblock and then we will continue
and print n main and then we will leave the main threat. And now a demon threat is a back
ground threat that will die when the main thread dies. So you might be wondering, we
have an infinite loop here. Why do we Why does our program correctly stop so we say
and main and then it's it's done and I can use my command line here again. So a daemon
thread dies when the main thread dies. So if I reach this statement and then exit the
main thread, then all the threads die. And so the worker method and the wild true loop
no longer gets invoked. And this is why we use a demon threat here. So by default, this
is false. And if we don't use a demon threat here, then our program will still continue
here in our wild true loop. So, what we should do then is we should use another mechanism,
for example, some some signaling mechanism like an event to say that now we are done
and we can exit the wild true loop. So then we should have used here, if some condition
and then break. So yeah.
In this video, we will go into more detail about the multi processing module. So we will quickly recap how we can create and start multiple processes. Then we will learn how
we can share data between processes, and we will recap how to use locks to prevent race
conditions and how to use queues. And at the end, we will learn how to use a process pool
to easily manage multiple processes. So let's start and let's quickly recap from the last
video how to create and start processes. So we say from multi processing import process.
And then down here we define a number of processes. So a typical good choice for this is the number
of processes on your machine. And you get this with Oh s dot CPU count. And then you
create your different processes with process equals process. And this takes a target is
a function argument and the target is a callable function. This is that this then executed
by this process. So we define a function appear, this simply squares, some numbers. And then
we give this to our process here. And then for each process, we call process dot start.
And also process dot join. So this says says that we want to wait for all processes to
finish and block the main program until all these processes are done. So this is all we
need to set up multi processing. And now let's go into more detail. And first, let's talk
about how we can share data between processes. So in the last video with multi threading,
we learned that we can easily share data between threads with a global variable. And now with
processes, processes don't live in the same memory space, so they don't have access to
the same public data. And because of that, they need special shared memory objects to
share data. And there are two shared memory objects that we can use, we can use a value
for a single value, or we can use an array. So we say from multi processing, import value
and import array. And down here, let's first start with a single shared values. So we say
shared number. And this is now a value. And this takes two arguments. First, we have to
give it the data type as a string, so we give it an i for integer and a starting value.
This is no cirro. And first of all printers so we say number at the beginning is and then
we say we access this shared number with or this value with share number dot value. So
now if we run this, and we see that this is zero, and now let's create two processes that
should modify this number. So we say process one equals process. And as a target, it gets
a function that we call at 100. So let's define this up here. So let's define adds 100 and
this gets a number and then it should modify this number a couple of times. So we say for
i in range 100. So 100 times it should say number though value plus equals one. So it
should increase this by one. And we also want to modify a behavior that takes some time.
So we say, time dot sleep and 0.01. And so here we give it this at 100 to our process,
and it also needs arguments. So we say art equals, and this is a tuple. So here, we give
it this shared number. And be careful. Since this is a tuple, with one element, it also
needs a comma here so that Python knows that this is a tuple. And then we create a second
process that will do the same thing. So process two, that should add 100 to our shared variable.
And then we say process, one dot start, and process two dot start. And then we wait for
them to complete. So process one dot join, and process to the chain. And now at the end, we again, print our numbers. So we say number
at end is and then access it with share number dot value. So let's execute this and see what
happens. So the beginning is 100. It's zero. And now we got lucky. Now let's run this a
second time. And now it's not 200. So it's only 168. And why is that because here a race
condition happened. And I will not explain this in details, please have a look at the
previous video. There I explained in detail how race conditions occur. So a race condition
occurs when two threads or processes try to access and modify the same shared variable at the same time. So
in this case, both processes try to read and write into this object at the same time. So
some operations might get lost here. So in this case, it's only 168. And to prevent this,
we must use a lock. So we say from multi processing, import lock. And I also talked about this
in the last video, so please check this out. So a lock prevents another process from accessing
this at the same time. So to use this, we create a lock object, so we say lock equals
lock. And then we give this to our function to function. Yes. So this now also takes a
lock. And a lock has two important methods. So first, we say lock dot acquire. And then
at the end, we say lock dot release. So as soon as we say lock dot acquire, it will set
this in a locked state. So this means that while this is running, no other process has
access to this code and can execute this part here. And then when we unlocked the state,
again, with lock that released and the second process can also execute this. So this is
all we need to prevent multiple process to modify this at the same time. So now let's
run this. And now we get 200. Let's run this again. And yeah, still working. And a better
way to use locks is to use locks as a context manager. So whenever you say lock acquire,
you always have to call locked release, then at the end, otherwise, this will block and
your program cannot continue. So don't forget this. And you can use a lock as a context
manager. So we say with lock, colon, and then your code. So this automatically will acquire
and release this for you. So yeah, this also works. And now this is how we can share a
single value. And now let's share a array. So we say shared array equals array, and this
also needs a data type. So in this case, that's given a D for double And here given a list
as initial values, so we say, put in 0.0, here, 100.0, and 200.0. And then we say our
array, at the beginning is, and let's say shared array. And then we have to access each
element with inside brackets and then with the index. And we can also use slicing here
to access all in the indices. So let's just put in a colon here, and then again, print
this at the end. So at the end, we want to print our array. So array, at the end, is
this. And now we have to change our functions, this now takes multiple elements. So this
takes numbers. And then we have to go over each number here and increase it. So first
of all, let's also change this parameter here. So let's say shared array. And now, in our,
in our function, what we want to do is we want to go over each number and increase it.
But be careful here. So we cannot say for number in numbers, and then simply say number
plus equals one. So now if we run this, this will print our error at the beginning and
at the end, and this is still the same. And this is because this loop here will create
a local variable called number that is then increased. So this has nothing to do with
our shared value object. So in order to do this, we have to say for, and let's say for
i in range, and then the range has the length of our array. And then we access each element
with numbers, dot i, and save plus equals one. And now let's run this. And now we see
that it got modified. But we also have race conditions here. So don't forget the lock.
So we say with lock, and then our modification operation. And now we increased each element in our array
by 200. So this is how we can use the shared value and shared array. And we can also use
a queue to exchange elements between processes. And I also already showed this in the last
video. So a queue can be used for process safe data exchanges. And so in the last video,
we set from Q, import Q. And there, we have to use a slightly drif different queue that
was formed from the multi processing module. So this has all the same methods except the
the tasks done and the tasks and the join method. So a queue is a linear data structure
that follows the first in first out principle. So the first element that you put into your
queue, that is then also the first element that gets retrieved when you want to get elements.
So let's make an example to use a queue and exchange data between multiple processes.
So in this case, let's say q equals Q, and then create two processes that should do should
access and write to this queue. So we have a process that gets as a targets, it gets
a function that we call square. And as arcs it gets some numbers and our queue and then
we curate a second process that has In a second different function here, so we call this make
negative, and it has the same arguments. So it will write to the same queue. And now let's
define our functions here. So we say that f square, and this will get some numbers,
and Q. And then we say, so in this case, for i in numbers, we calculate the square and
put it into our Q with Q dot put i times i, and then a second function make negative.
And there we also it also takes some numbers and a Q. And here, we also go over our numbers
for i in numbers, and then we say q dot put minus one times i. And then let's say, let's
start our processes. So pros, one dot start, and process two dot start, and then process
one dot shine, and process two that shine. And here, we don't have to call q dot join,
because there is no methods cue that join. But what we can do is we say while our queue
is not empty, so while not Q dot empty, and then we want to print each element. So print
q dot get. So this will return and also remove the first element in our queue. And yeah,
now let's run this and see what happens. numbers is not defined, oh, sorry, I have to create
a numbers variable. And I will say this is a range object from one to five. So or five
should be included. So I say from one to six. And now this will print each element. And
we see that both processes have access to this queue and can write
put elements into it. And then in our main process, we can also access the queue and
get the elements back. So this is how we can a can use a queue. And now as a last thing,
let's talk about a process pool. So a process pool can be used to manage multiple processes.
So a process pool object controls a pool of worker processes to which chops can be submitted.
And it can manage the available processes for you and split, for example, data into
smaller chunks, which can then be processed in parallel by different processes. So let's
have an example how this works. Basically, a pool takes care of a lot of things for you.
So you don't have to consider a lot. So we simply say from processing, import
pool. And then down here, we create a pool. And we say, so we say pool equals pool, and then
it has two or four, let's say it has four important methods that you have to know. And
for the rest, I would recommend to have a look at the documentation because there are a lot of more methods but the most important ones are map, apply, join and close. So what
we want to do is we want to create multiple process that should access a or execute a
function. So we call define a function cube. And this takes a number and returns the cube.
So it will will return number times number times number. And now here we can simply say
or we create some numbers. So numbers equals a range object from zero to 10 or 10 or only
to nine. And then we say, pool dot map. And now we map we have to give it a function,
so we give it the cube, and the numbers. And this will return a result that we can then
print. So print our result. But first of all we have to, so this will, what this will do
this will automatically allocate them the maximum number of available processes for
you and create different processes. So typically, this we'll create as many processes as you
have cores on your machine. And then it will split this iterable into an equal into equal
sized chunks, and submit this to this function. And this function is now executed in parallel
by different processes, or by different processes. So this is all you need to write and then
the pool will take care of the rest. So this will allocate the pools, it will split the
data and then run this method in parallel. And when it is done, it will return the result.
And we have to call pool dot close. And then we can call pool the join. So this means that
we want to wait for the pool to process all the calculations and return the results. And
we have to remember that we should call pool that close before. So now if we run this,
we can print our result and we can see that it has the cube here. So yeah, this is how
we can easily use the the pool
to run different processes with a function. And if we simply want to have one function
executed by a pool, then we can say pool dot apply. And then also the cube. And then in
this case, it will only has one number year. So we can for example say Apply numbers, the
first element. So number zero, so this will execute a process with this function with one argument. And
yeah, so this is the most important things about pools. And there are also asynchronous
calls to this map and apply functions, but I will not cover them here. First of all,
we will learn what is the difference between function arguments and function parameters.
Then we will talk about positional and keyword arguments, then about default arguments and
variable length arguments. So what are the arcs and quarks arguments for then we will
talk about container unpacking, we will also talk about the difference between global and
local arguments inside of functions. And finally, we will have a look at how arguments are passed
to functions and if they can be modified within a function. So let's start and let's quickly
talk about the difference between our arguments and parameters. So parameters are the variables
that are defined or used inside parentheses where defining a function. And arguments are
the values passed for these parameters while calling a function. So let's make an example.
Let's say we have a function called print name, and it gets a name. And then we simply
print this name, then this name here is our parameter. And when we call this function,
let's call print name with a string LX. Then this is the argument for this function. So
there is a difference when we talk about them. Now let's talk about positional and keyword
arguments. So we can pass arguments as positional or keyword arguments. And let's make another
function as an example. So let's say we have a function foo, that has three parameters
A, B, and C. And we simply want to print them Print A, B, C, then we will call this function
with positional arguments. So we can say foo, and then just one, two, or three. So this
will print 123. Or we can also use keyword arguments. So we say A equals one, b equals
two, and C equals three. So this will also work. And note that if we use keyword arguments,
then the order is not important. So I can say, for example, C is one, and a is three,
and a is the first one that is printed. So let's see what happens. So it prints 321,
and not 123. Like I like the orders here. So when using keyword arguments, then only
the keywords matter and not the position. We can also use a mix of both. So I can use
a positional argument first, that's a one and then I can use keyword arguments. So b
equals two, and C equals three. So this will also work. But I cannot use another positional
argument after a keyword argument. So if I try to call it like this, then this will raise
an error. And also, if I try to assign a a again, so A is the first positional argument.
And now if I use a as keyword argument, then this will also raise an error. So yeah, that's
the difference between positional and keyword arguments. And yes, sometimes it's better
to use keyword arguments, because it makes it more clear what they present. Or we can
rearrange the arguments in a way that makes the most readable. So yeah, then we have the
possibility to add default arguments. So I can say D and give them give this parameter
a default value. So let's say d equals four. And now if I, I can call this fool, and just
with three arguments now, one, two, and three. And let's also print D here. So if I ran it like this, then it will take the default value
for D. And I don't need it here. But I can also give it a different value. So I can say,
seven here. So this will print 1237. Yeah, so default arguments must be at the end of
your function parameters. So for example, if I have one here, b equals two, and I try
to run this, then this will give an error. And now let's talk about variable length arguments.
So probably, you've also already seen functions that looked like this. So they have some parameters
A B, and then have at this star, and arcs argument, and sometimes also with with double
stars and quarks. And now what these are, so this is a function. If you mark a parameter
with one asterisk, or one star, then you can pass any number of positional arguments to
your function. And if you mark your parameter with two stars, then you can pass any number
of keyword arguments to this function. And typically they are called arcs and quarks,
but you can call them whatever you like. So also, for example, C. So inside this function,
let's print a and b first, and then this is a tuple inside your function. So we can go
over this tuple and say for arc in arcs, and then print arc. And the quarks argument is
a dictionary so I can say For key in quarks, and then I want to print the key and the value
of this dictionary entry. So I say quarks key. And now I can call this function. For
example, at least it needs the two arguments A and B. So I can say, one and two. But then
I can also use as many positional arguments as I want. So I say, maybe 345. And then I
can use some keyword arguments. So I can, for example, say six equals six, and seven,
equals seven. And now let's run this. And let's see what it prints. So first, it prints
the two positional arguments one and two, then it goes over our, our arcs. So this is
345. So it prints each number in a different in a new line, and then it goes over the keyword
arguments and prints the keywords and the value. So this is how we can use variable
length arguments. And for example, I don't need them. So I can also simply use keyword
arguments here. Or I can use some more positional arguments and don't use the keyword arguments.
Sorry. So this is also possible. Now, let's talk about force keyword arguments. So sometimes
you want to have keyword only arguments, and you can force enforce that. So you can, for
example, give a write a star here, and then some more arguments after this. So let's say
C, and D. And then I want to print them here, print ABCD. And now every
parameter after this star must be a keyword argument. So if I write it, like call it like
this, then these are positional arguments. And then this will raise an error. So I have
to say C equals three and D equals four. And then it works. Or, if you, for example, use
the arcs variable here. And then each parameter after that is also a keyword only parameters.
So let's say C, and D, and then simply print the last two. So if I write it like this,
or for example, to make this more clear, let's call this last. And then for arc, in arcs,
print, arc, and then print. Last. So if I caught it like this, then it's missing, then
sees this parameter only as your arcs. And then it says that the last keyword parameter
is missing. So I need another one. And now I needed as keyword arguments. So I say last
equals 100. And then it's working. So this is how you can enforce to have keyword only
arguments. Now let's talk about unpacking arguments. So if we have a function, let's
say again, fool with three arguments, A, B, C, and we simply print them a, b, and c. Now
let's say we have a list, my list equals 1012. Here, then we can easily unpack this list
into our function in a function in the function call. Have this list unpacked into the arguments.
So I can say, star and then my list. So this will unpack the first item into a second into
B and the third into C. And this also works with a tuple here, so I can have a tuple.
Here. The only thing is that is important is that the length of your container must
match the number of parameters here. So for example, if I have another item here, then
this won't work. Now if I have a dictionary, so let's say my dict equals, and then the,
it must have the keys with the same names as your parameter names here. So a, and then
some well you want, then the second B, and some well you and also see. And some well
you then I can unpack a dictionary with two stars here. So I say two stars, and then my
dict. And then this will also work. But here, also, the length of this dictionary must match
the number of parameters here. And also, the keys must match the name the parameter names
here. So for example, if I use e here, then this will also raise a type error. So yeah,
this is how we can quickly unpack a dictionary or a list into our function arguments. And
now, let's talk about local versus global variables.
So let's say we have a function. Again, foo. And this now First, let's say we have a global
variable somewhere. So we call this number and say, the number is zero. And then inside,
we create a local variable x and access this allow a global variable, so we can say x equals
number, and then let's print let's say number inside function, and then print x. So and
then we can call this. So let's call foo, then this will print the number inside the
function, so we can access this number here. But if we want to modify it, so let's say
number equals three, then what will happen, then this will raise a, a arrow here, because
then what this will do here, this will create a local variable that is now
different than this global variable. So if you want to modify this, then we first have
to say, global number, and this is the name of this global variable. And then we can say
number equals three. So this will work. So now if we print the number after our function
call, then this will print the new value three. And if we now what will happen if we don't
write this global here, and we don't have this and simply assign number two three. Then
now what will happen if we run this now this x is not available anymore. So let's run this.
So this will Print zero, it prints the number that is still zero even after the function
call where we set number equals three. And this is because here, we create a new local
variable. So this has nothing to do with this global variable. And this is the, this only
lifts inside your function. And it will not modify your global variable. So if you want
to modify the global one, then you have to write global number here. And now it will
print three. Yeah, so this is the difference between local and global variables. Now let's
talk about parameter passing. So maybe you've heard already of the term, call by value or
call by reference. And in Python, it's a little bit different. So it uses a mechanism, which
is known as call by object or call by object reference. And there are two rules that must
be considered. So parameters are passed are the parameters passed in?
No, sorry, the parameter passed in is actually a reference to an object, but the reference
is passed by value. And there is a difference between mutable and immutable data types.
So this might be a little bit confusing. But this basically means that mutable objects
like lists or dictionaries can be changed within a method. But if you rebind, the reference
in the method, then the outer reference will still point to the original object and is
not changed. And immutable objects like integers or strings cannot be changed within a method.
But immutable objects contained within a mutable object can be reassigned within a method.
So let's look at some examples to make this clearer. So let's say we have a function foo.
And this takes an argument x, and then it reassigns. This so it says x equals five.
And now let's say we have a bar equals 10. So this is an integer, and then we call foo
with this bar. And after this, we want to print all of our now this will still print
10, even if we assign X to five here. So because what happens here that var is an integer,
and this is an immutable, immutable type, so it cannot be changed. And that this will
create a local variable called x here, that has nothing to do with this. So this is the
same with the global and local variable difference. But yeah, so immutable objects cannot be changed,
but mutable objects can be so let's say this will get a list. And then we can modify this
list. So we can say a list dot append an item, so let's append four, and let's create my
list. And this is, has three elements one, two, and three. And then we passed this list
and then call this function with the list and then afterwards, print the list. So then
we see the list got modified. So immutable objects can be modified within a function.
And also immutable objects within a mutable object can be changed, so that immutable integers
within this list can be changed. So I can for example, also say, list and access the
first index, so index zero, and this is now let's say minus one 100. So this will also
change the global list here. And but what is what is not possible so if we rebind a
mutable reference here. So if I say for example, first if I say, a list equals, and then let's
say 200 300 400. And now I call, I create my global list here, I call this function,
and then I print it, and it will still print the original list 123. And this is because
I rebind, the reference here. So this is now a local variable, a list with this new ways
and new values. So this has nothing to do again with the global variable. So yeah, maybe
now the four points are more clearer. So again, mutable objects can be changed. immutable
objects cannot be changed. But immutable objects contained within a mutable objects can be
changed. And like here, if we rebind, the reference in the method, then the altar reference
will not be changed. And let's have a last very quick difference that
how this can affect your list. So first, if we say, a list, instead of writing append
items, we can, for example, say plus equals and then a new list. So if I write it like
this, and now if I run this, then my outer list here, my global list, got affected by
this. But now if I say a list equals a list, plus this, then if I run this, then this will
not change the original list. So this is a slight difference, but it can have a big effect.
Because here again, this will create a local variable. So be careful with this slight difference.
So plus equals, again, will change the list. So in this tutorial, we will talk about the
different use cases of the asterisk or star sign in Python. So it can be used for multiple
different cases like multiplication and power operations, the creation of lists or tuples,
with repeated elements, for arts quarks, and keyword only parameters for unpacking lists
tuples, or dictionaries into function arguments, for unpacking containers, and for merging
containers into a list or merging two dictionaries. So we will have a look at all of these use
cases. First of all, of course, there is the simple multiplication operation. So let's
say result equals five times seven. And then if I print the result, then this will print
the multiplication of these two. Or if I use two stars, or two asterisks, let's say two,
and then two stars and then a four, this will be a power operation. So this is two to the
power of four equals 16. This is one use case, then it can be used to create lists tuples,
or strings with repeated elements. So let's say I want to have a list called Ciro's equals,
and then I write one element. So I say, one item here, so zero, and then I write times
10. So this will create a list with 10 elements, and each element has a zero. So this is my
list. I can also put in multiple initial items here. So if I write it like this, then this
will repeat zero and 110 times. I can also use a tuple here. And it also works with strings.
So if I say, let's say a B here, then this will create a new string with 10 times A B
So next is to use the star or asterisk for the arcs and quarks and keyword only arguments.
So if you don't know what this means, please watch my last video about function arguments.
So probably you've seen a function that looks like this. So that define a function called
foo. And then it has some arguments. And then also some arcs with one star, and with quarks
with two stars. So and then let's print A, and now arcs is a tuple. So I can go over
this tuple for arc, in arcs, and then print arc. And quarks here is a dictionary. So I
can say four key in quarks, and then print the key and also the dictionary value of this
key. And now, I can call this function with the A and B arguments. So let's say one and two.
And then for this arcs, I can use as many positional arguments as I like, so I can say
345. And then I can also use as many keyword arguments as I want. So I can say, for example,
six equals six, and seven, equals seven. So this will print my function here. Um, forgot
the beat here. And then if I only use one star here, and then another parameter here,
then all parameters after this star are keyword only parameters. So if I want to print C,
I cannot call call the function like this. So because here, the last item must be a keyword
argument, so I have to write C equals three, and then it will work. So this is another
use case of the star operator to enforce keyword only arguments. Then we can also use the asterisk
for argument unpacking. So let's say I have a list, my list equals and it has three elements.
So 012, then I can call this function and unpack this list here with one star, and then
my list. So this will work. And the only thing that is important here is this is that the
number of arguments must match the number of parameters here, the number of elements in the list must match the number of RF parameters
here. So if I have another one, then this will raise an error. And this will also work
with a tuple. And if I have a dictionary, so let's say my dict. And then this must have
the parameter names as keys, so a and then a value, one, B, and the value, and C and
the value, then I can unpack this dictionary with two stars, and then my dict. So this
will work. And also the number of elements must match the number of parameters here,
and also the key, the keys, the name of the keys must match the name of the parameters.
So if I have a different key here, then this won't work. Then the asterisk can be used
for unpacking containers, so it can unpack the elements of a list tuple or steps into
single and multiple remaining elements. So let's say I have a list called numbers and
This is, let's say 123456, then I can unpack them, let's say I write, star and then beginning
and then a last value. And this is equal numbers. So let's print beginning. And let's print
last. So this will unpack all the elements except the last one into a list, and then
it will unpack the last item into a single number. And, yeah, be careful here, this will
always unpack your elements into a list. So if I have a tuple, here, then unpacking works,
but it will still be a list here. So if I run this, and it looks like this, I can also
unpack the, or put the star sign for the last item. So this will unpack the first number
into the first element into one number and all the remaining elements into a list that
is now called last. Or I can use this in the middle, so I can say beginning and then star,
middle, and then last. So and then I can print the middle here. So now middle is my list
with the elements between so if I run this, it will print this. And for example, I can
also unpack more numbers into single element. So I can say second, last, and then here print.
Second, last. So this is how we can unpack multiple items into a list. And we can also
use the star operator to merge iterables into a list.
So for example, if I have one tuple with elements, one, two, and three, and then I have another
list, so my list equals 456. And then I can say second, or let's say, new list, equals
and then I say I, in brackets, I put my first iterable here, so I can say
star, and then my tuple. And then I can put in the second iterable here, so my list. So
if I print the new list, then this will be a new match list. And I can also use a set
here. So if I use a set, here, my set, then this will also work. So this merging, works
for lists tuples and sets into a list. Or I can merge two dictionaries. So if I have
one dictionary, call it dict, a equals and then some elements here. So let's say a and
one, and B and two, and then I have a second dictionary, so let's say dict b, this has
the keys C and D with the values three and four. And then I can create another dictionary.
So let's say my dict equals and then inside these square brackets, I use two stars and
then the first dictionary and then comma and then again two stars to unpacked this Second
dictionary. So this will merge multiple dictionaries into one dictionary. Now if I print this,
then I can see that I have one dictionary now. And yeah, I think that's all the important
use cases of the asterisk sign. This tutorial, we will talk about copying. So we will learn
how we can copy mutable elements with a built in copy module, and the difference between shallow and deep copies. And we will also have a look at how to make actual copies of
custom objects. So let's start. And first of all, let's have a look at the assignment
operator. So let's say we have a variable called orc, and this is now a number. And
now if we want to make a copy with an assignment, so we say copy equals original, then this
will not make a real copy, it will only create a new variable with the same reference. So
now both variables point to the same number. And now for immutable types like this integer,
this is not a problem. So let's say if we change the copy, and say copy equals six,
then this assignment will again, create a new variable. So they they are now both independent.
So if we print the copy, and if we print the original, they are different. But when we
deal with mutable types, so for example, a list then we have to be careful. So let's
say we have a list here with some elements. So let's say 01234. And now we make a copy
with this assignment operator. And then if we change elements of our copies, so let's
say we want to change the first item and say this is now minus 10. And now if you print
both the copy and the original, we see that also the original has the value minus 10.
Here, and this is because this assignment operator doesn't make an actual copy. So to
make an actual copy, we can use the built in a copy module, so we can say import, copy.
And then we have to make a difference between shallow and deep copying. So a shallow copy
is only one level deep. So at the first level, it makes an actual copy. But then it only
copies references of the nested child objects. And then there's the deep copy. So this will
be an a full independent copy. So let's start with an with a shallow copy. So to make a
shallow copy, we can say copy equals, copy that copy, and then the original.
And now if we print both, we see that the original didn't get affected. So only the
copy here has minus 10. And, for example, with a list, there are several different options
to make shallow copies. So we can also say copy equals original dot copy. So this will
also work. Or we can use the list function and give it the original as an argument. This
is also possible. Or we can use list slicing, so we can say pork, and then the slicing operator.
So this will simply be from start to end. So this will copy all elements. And this will
also make an actual copy or a shallow copy. So this works fine if our element is only
one level deep. And now let's say we have a nest or nested lists. So let's say we have
a first lists here, a list inside a list and then a second list here. So with some more
elements, three, so this is our original list. And now we make a shallow copy. And now we
change an object or an item that is at the second level. So we say copy at index zero,
so in this list, and then again at index zero, so this element, or for another example, let's
make index one here, so this is this element. And now this we want to set to minus 10. And
now let's see what happens. So if we run this, we see that both the copy and the original
now have minus 10. Here. And this is because a shallow copy is only one level deep. So
to make an actual copy in all the levels, we have to make a deep copy. So we can say
copy dot, deep copy. And now if we run this, we see that the original didn't get affected.
So this is the difference between shallow and deep copying. And for the built in types,
like lists, dictionaries, or tuples, we can use these methods. But we can also use it
for custom objects. So let's say we have a custom class and call it person. And now in
the in it, it gets self Of course, and then it gets a name and an age. And then we say
self dot name equals name, and self dot age, equals age. And now let's create two persons
person one equals person. And now as the name it gets LX, and as an age, let's say 27. And
now let's make a copy, simply by assigning it, so let's say person two equals person
one. And now if we change person two, dot h, equals 28. And now if you print person
two dot h, and we also print person, one dot h, then we see again, both got affected because
this is not an actual copy. So here, we can use copy, copy. And now if we run this, we
see we have a shallow copy here, so the original person didn't get affected. But again, now
if we have a deeper structure, so let's say, let more let's first create our person class,
and let's say we also have a class company. Um, this gets this has an init method, so
in it, self and now this gets two persons, it gets a boss, and an employee. So self dot
boss equals boss, and self dot employee equals employee. And now we create two persons. So
one boss, so boss, might be older. And now a second person. Cho was a little bit younger. And now let's
say we want to have a company so we say, company equals company, with our person one, and our
person too. And now if we want to make a clone of this, so if we say, company, clone equals
company, or let's right away, make a shallow copy, so we can say copy dot copy. And now
if we change some variability here, so let's say one boss turns a year older, so let's
say company clone, dot boss dot age, equals 56. Now, and now let's print this print company
clone dot boss dot age, and also print the age of the boss of the original company. So
let's say company, boss, ah, then again, we see it got affected because this is only a
shallow copy, and the age is at the level two. So this will, again only be a copy of
the reference here. And in order to make this independent, we have to say copy dot deep
copy, and now if we run this, we see that the Original bosses still 55. So this is the
difference between shallow and deep copying. So we will learn about the concept of context
managers, and what are they used for, we will then have a look at typical examples of context
managers and how we can implement our own context manager. So, context managers are
a great tool for resource management, they allow you to allocate and release resources
precisely when you want to. So a well known example is the width open statement. So, in
order to open a file, we can say, with open, and then a file name. So let's call it note
stuff. txt. And we open it in write mode, and s, a, and give it a name here. So, inside
our width statement, we can use this name now. So we can say file dot write, so we write
something into our file, some some to do. And now when we leave this with statement,
again, this width statement or just context manager will make sure to correctly close
our file again, even if there is an exception somewhere here. So if we would have to write
this as a full code, it would look something like this. So we say file equals open, and
then note stuck text in write mode. And then we have a try block. So we try to write into
our file. So write some to do. And now we have an A Finally, clause. So this will be
executed with or without an exception. So no matter what happens, this will, will be
executed every time. so here we can say file, dot close our file again. And then our resource
is freed up again correctly. So now if we compare this and this, then our with open
statement looks much cleaner, and much, much more concise. So this is the recommended way
to open a file. And this is a typical example how we can use context managers in order to
open an AI file and allocate the resources. And then after leaving, it's also make sure
to correctly free up our resources again. So typical examples is like in this case that
with open statements, then, for example, to open and close database connections, or another
typical example is the lock. So if you've watched my tutorials about multi threading
and multi processing, you already know how to use a lock. So if we have a lock, so we
say, from threading, import, lock. And now if we create a lock, so lock equals lock.
So whenever we acquire a lock, so we say lock dot acquire,
and then we can do something here safely. So this is now thread safe. But after that
we always have to call lock dot release. And if we forget this, we might run into a deadlock
here, and our program won't continue. So never forget to say lock dot release when we had
locked out acquire. So a better way to do this. And also much simpler is to say with
lock, and then do something here. This will automatically acquire our lock when we enter
this with statement and then it will make sure to say locked at release when we leave
this with statement again. So this is also a typical example. And now let's say how we
can implement a context manager for our own classes. So in order to do that, we have to
implement the ENTER and the exit methods. So let's say we have a class and call it managed
file. Now of course this has an in it and it will get a file name here. So we simply
store the file name, say self dot file name, equals file name. And now we re implement
the same functionality as With the with open statement, just in order to show you how this
is done. So, now what we have to implement is we have to implement the Enter method.
So this will get self. And then we have to implement the exit method, this will also
get self, and then it will get an exit exception, type, an exception value, and also an exception
trace back. Now, I will talk about this in a second. But first of all, let's implement
both of them. So, the Enter methods will be executed as soon as we enter the width statement.
So, here we want to allocate our resource. So, in this case, first, let's print enter,
to have a look at where this will happen. And now we allocate our resource. So we say
self, we create a file and say self dot file equals and now we open it here. So we open
it with the file name, and open it in write mode. And then also inside the Enter method,
we want to return the allocated resource. So in this case, we return self dot file.
And now in our exit methods, we want to make sure that we correctly close the file. So
we say if self dot file, so if this is not none, then we say self dot file, dot close.
And then print, exit. And here, let's print in it. And now this is all we need to use
this class as a context manager. And now we can say we can use a width statement. So we
can say, with Managed File, and this will get the file name notes dot txt, s file. And
then we can say file dot write, some to do. And now let's say let's see what happens.
So this will, let's also make a print statement here. So let's say print, do some stuff. So
we see here, that init method gets called when our object gets created. Then as soon
as we enter this width statement, the Enter method gets called so enter is printed, then
our resource is allocated, then we can do some stuff. And afterwards, our exit method
is called as soon as we leave this with context here again. So now let's talk about what will happen if an exception occurs. So we see here that Python
Python passes the type the value and the trace back to the exit method. So you can handle
the exception here. And if anything other than true is returned by this exit method,
then the exception is raised by the width statement. So let's say let's print continuing
here. So in order to see if we reach this code, and now, let's also print. The, for
example, let's print, we want say, exit exception, and then print the exception type. And the
exception value. So now if we run this, we see that our exception here is none. So no
exception here, exception type, and the exception value is none. And now if we try something
here, this that won't work, so let's say file dot some methods, so this will not exist inside
our class here, so it doesn't notice some method method. So this will raise an exception.
So now if we run this, then we see inside our exit function, it still can close our
file even if there is an exception. So it reaches this code. So then it prints the ACC
chat exceptions. In this case, it's an attribute error. And the error is that we don't have
this some methods. And then we can exit this function. But then our width statement will
raise an exception. So we won't reach this continuing here. And now if we want to handle
this exception ourself, we can, for example, say, we check if exception, type is not none,
then prints that here's an exception. So let's say exception. Exception has been handled.
And now in order to not raise an exception, we have to return true here. So let's say
return true. And we don't want to print this anymore. And now let's run this. Now we see,
we did prints exception has been handled, then it exits our width statement again, and
then no exception here from our width statement, and we can continue. So continuing is printed.
So yeah, this is an example of how to write our own class as a cost as a context manager.
And we can achieve this with implementing it as a class with the ENTER and the exit
functions. But we can also implement it as a function. And to do so we have to say we
have to import something. So we say from context lip import context manager, and we have to
use this as a decorator. So and then we will create a function that is a generator. So
if you don't know, or are not familiar with generators and decorators already, and please
have a look at my other tutorials, because I already talked about them. So now let's
create a generator here and call this open Managed File. And this also will get a file
name. And then here, oh, sorry, I misspelled it. So Managed File, and then inside here,
we want first, of course, want to open our file, so we say f equals open file name, in
write mode. And here we have to write a try and a finally clause. And inside the try statement,
we want to yield the file. So
here, we would, we want to write everything that would otherwise end up in our enter function.
And then we want to have a finally clause and here we write all the content of the exit
method to free up the resource, the resource. So here, we say F dot close. And then we also
need to decorate it with our context manager decorator. And now we can use this function
in a width statement. So we can say, with open Managed File and call it notes dot txt,
and then S f and then we can say F dot write and then write something. So this will also
work. And now let's go over this again what will happen here, so is because this is a
generator, so this will first make sure to allocate our resource and then it will try
to yield our resource. So and by yielding it it will temporarily suspend its own execution.
So we can continue here and use this file. So then we can do some operations with this
file. And then when we exit the width statement again, then our function here continues running.
And then the finally clause will be executed, and our file will be closed again. And also
we can handle exceptions here. And yeah, so this is the second way how to use a context
manager. And that's all I wanted to show you about context manager. I hope you enjoyed
this tutorial and if you liked it, please leave a like and subscribe to the channel.
Python is more than just a programming language. It is also a great place to begin. If you're just starting to code
with the popularity and versatility that python bags. No wonder it is a great time to Learn Python Programming.
Hi. I welcome you all to this full court session on Python Programming and what follows is hopefully a crash course of everything
that you need to know to start out with python, but before we begin, Begin, let's talk about our agenda for today.
So we're going to start out by introducing you to python here. We are also going to talk about the market trends
and overview of python. Also, we're going to give you a guided way of becoming a python developer.
Now next. We are going to talk about the step-by-step installation of a python IDE and we are going to also help you run
your first Python program across various ideas. Now next we're going to talk about python Basics here.
We're going to talk about comments variables data types and Traitors in Python now followed by which we are going
to talk about a few popular python libraries like numpy and sciPy now next.
We're going to get a little deeper here. We're going to talk about file handling and functions in Python.
We also going to discuss Concepts such as object oriented programming classes and inheritance in Python now followed by that.
We have a final topic which is web development and web scraping in Python here. We are also going to talk about Frameworks associated
with python like Django flask and web 2 pi with that. I come to the end of the agenda.
Also currently take up this time to subscribe to us. And don't forget to hit that Bell icon to never miss
an update from the Edureka YouTube channel. Also check out our Python Programming certification course
the link to which is in a description box below. So without Much Ado, let's get started.
Fighting is the fastest growing language in terms of developers libraries and applications
that it can be used for it could be machine learning artificial intelligence web development anything
that you can think of python has always got you covered. Now before we get started, please subscribe to the channel and turn on notifications
for all of our future videos with that. Let's go ahead with the agenda for today's session.
We shall understand. What python We is and why it is so popular thereafter the features
that python has and where it is used in the industries. Finally. We can take a look at how to get started off
with the python Basics and end our session with the career opportunities that by then holds for us.
Let's move ahead with the first topic for today. What is python well python
is a general-purpose programming language, which is high-level easy to learn and dynamically initialized the development
of python started out as a hobby for its creator. Your Divine resume because he wanted to make a language
that was beautiful to look at and easy for everybody to read to do this he used indentations instead of
curly braces to basically describe the blocks of code that came inside the language the language went on
but did not receive love as it was slow compared to the other languages now with the rise of machine learning
and artificial intelligence python has come into the spotlight because it makes the work much more productive
and much more easy why Why is that? Well it is because of the amazing computing power
that we have. We just won't work to be much more productive. Even if it takes a lot of time
so that basically wraps of this topic of what does python having that understood let
us move ahead and understand why python is popular comparing it to the other languages python is the best language
to get started off with it's easy syntax and high level features make it one of the best language
for anybody to get started off with programming. Maybe kids or veterans it is the language for everybody.
The next reason is that python is an open source language meaning that it is free for anybody to use every day.
There are thousands of programmers who come together online in making python better and efficient you modify the code you break the code
and you make the code you're allowed to do it without any problems. Moving ahead.
Bison can be used to make almost anything gy applications web applications.
Mobile app server side coding artificial intelligence machine learning algorithms anything
that you want to make python will always have the way to do it lastly. There is a huge community of people
who come together to make the libraries or modules that can be used to obtain a Solutions just
for an example machine learning algorithms are already available and you can use them to obtain your Solutions.
But your productivity right up there you code is much more lesser. You can see why people around the world Four bytes
and so much features make a language attractive and that is what python is made up of features
that make anybody want to start coding with it. Let us now see the different features that python has in store for us.
The most well-known feature of python is its Simplicity python has made programming fun because it is simple it makes you think move for your solution
rather than the syntax the next important feature is that python is an open source language,
which means that it is free for anybody to use use modifications to python are also allowed without any problems
which brings us to its next feature portability python supports portability, which means that you can write your code
and share it with anybody that you want to and it would work the same way as it does for you when you run the code this makes movements of projects
and systems much more easier. Our next feature are the embedding properties chances are
that certain languages May perform certain functions better than python, but that does not stop you.
As python suppose adding code of other languages into itself to run those functions,
which makes python all the more powerful with that. Let us move over to the next feature interpretation python
is interpreted line by line, which means the management of memory and CPU and debugging of the code much more simple if you wonder by now
whether python is the language to get started off with let me tell you that it is python has a huge Library support
which would help you to obtain solutions to your problems easier. You can get started off with data science web development
on the go with python. You may have had questions. Like how do developers make applications
that are so well related to a domain that is because of object-oriented Concepts python supports.
Oops, meaning that you can model a real word problem into your code and have security for it such
that access to them is restricted which helps you replicate real world scenarios. Now that we know all the amazing features
that python has for us. Why don't we look at a few of the most? Alone companies who use Python Google is the most
known Tech Giant who uses python to provide better search features to its users Dropbox is
a cloud platform to save data online its client and server applications have been coded using python Netflix uses machine learning
with python to learn the taste of its users cluster them into groups and then recommend them shoes to retain them for longer
the National Security Agency uses python for cyber security analysis, and for the encryption and decryption purposes.
The BitTorrent application which is used for peer-to-peer communication started out as a simple
python file NASA scientists use Python to perform calculations which helps them reduce time and makes their work easier.
So these are the major companies who use python as you may know python is a very important language and it
would definitely be beneficial if you start learning with now you would wonder how do we get started off with learning python?
Let me help you with that. So to get started off with learning this amazing programming language you
would firstly need the basics which are variables datatypes and operators' which helps you to understand data
and the different data types that you can use such as numeric lists tuples and so many more naming data and Performing operations
which can help you to obtain logic or simple additions or subtractions and so forth once you understand
that you can move ahead to understand res which can be used to store data in a structured manner
nextly understand the flow control twerking and how you can manipulate it using Loops such as the
for Loop in the while loop and conditions which are the if else statements you can then study about how to make methods
which are basically used to perform certain functions which can be as simple as adding numbers to performing the most complex of work
that you can think of liter learn how files are handled where you can read data from files and write data
to the files you can then learn about Hoops by understanding classes and objects and were they important This is
and finally to master it all you need to practice python as much as you can because practice is what makes you better at it.
Once you are done understanding the basics. What do you do you master it? There are a variety of careers
that are at your disposal stick to the one that you feel is your goal and start mastering it
which brings us to the career opportunities that by then holds for us web app development is an option
that you can choose you have Frameworks such as Django and flowers that can. Can be used to create web applications game development
is also a career option that is available where you can create AI enemies and bosses and graphic textures.
Accordingly. Big Data analysis is a booming field which can be used to obtain data helpful to make decisions
and help take risks for better profits web app testing is also an option where you can report bugs and make sure
that a website works as needed data scientist machine learning engineer artificial intelligence are some of the fields
that Everybody wants to get into and it is clearly one of the jobs that looks like it would have
a long life cycle smart iot devices are another place where you can use Python
and build better infrastructure for connecting the world. So those are some of the most well-known career opportunities
that python has for you. There are many more such as a software developer automation engineer and much more.
So now I hope all of you know, what python is and why everybody loves it so much.
I hope all of you would consider learning. Learning python because it is just fun to learn and easy to program
with Netflix is the leader of its plan for video streaming
and for all take savvis. This Market giant has revealed that python is the secret to its success
before we begin just make sure you subscribe to our Channel and hit the Bell icon to stay updated
with all the latest Eddie Rekha videos coming back towards the session. Let's first begin with a small introduction to Netflix
and We shall move on to see how Netflix uses python in various sectors such as for its CDN,
which is open connect Fordham and engineering and machine learning big data analytics and scientific experimentations
video encoding animations security and finally for monitoring and auto remediation.
So without any further delays, let's get started Netflix as we all know is an American company which renders
video-on-demand Services. It has about a hundred and forty eight million subscribers through out the world
and the number however keeps growing each day in a period of approximately two decades Netflix has emerged as
the king of its clan for the biggest TV series and movies throughout the world being the fastest growing brand of America
and having a revenue of twenty point five billion till June 2019. It's enough for it to be an eye-catcher.
Thereby interesting all into its technical spheres. Let's move on to see how Netflix uses python in its various domains.
Engineers at Netflix admit that they use Python for the full content lifecycle from deciding which content to fund all the way
to operating the CDN that serves the final video 248 million subscribers.
Now that we've taken the name of Syrian over here. Let's move on to see what this is and how it makes use
of python the CDN or content delivery Network that Netflix makes use of is open connect.
This basically comes into picture when you hit the play button. All the content delivered to the end user is looked
after by this CDN open connect basically requires various other software's to design built and operated
which are in turn written in Python. Not just this the network devices underlying this CDN our python applications
since python is prominent in solving network issues. Now that we are aware of the first component open connect.
Let's move on to see how Netflix uses python for its demand engineering the And engineering team is responsible
for handling Netflix clouds Regional fail overs traffic Administration capacity operations management,
which is looking after the limit up to which the content can be made serviceable and Fleet efficiency.
The library is used by this team are the numpy and the Sci-Fi Library, which is used for performing numerical analysis boat or three
which is the software development kit of the Amazon web services for python. This helps python developers integrate.
On into AWS. Thereby allowing development in the infrastructure radius, Q or r q,
which is a python Library which helps to keep track of the tasks that are present in the queue and allows their execution.
Thereby allowing the management of asynchronous workloads flask Netflix uses flask
for python web development Netflix uses flask apis to bind all of the previous segments together.
Not just this Netflix also makes use of Jupiter know Books along with interact which is an extension
for Jupiter on a large scale Jupiter is known to be popular for data analysis.
It serves very well in operation data analysis and visualization which in turn helps in detecting capacity regressions.
Now, let's move on to see how python is used for machine learning machine learning ranges from creating
personalization algorithms to figuring out the use cases personalization algorithms helped to train the machine learning models
as As per the Netflix standard it also provides personalized recommendations outlines
on a day-to-day basis label Generations Etc. The library is required to learn deep neural networks
are tensorflow Kara's and python watch whereas XG boost and light GBM for gradient boosted decision trees.
Netflix has also developed quite a few higher level libraries that help in combining with the work area
such as fact logging feature extraction publishing Etc. Apart from all this Netflix also makes use of meta flow to create
machine learning projects. The Big Data team is responsible to execute the ETL
or the extract transform load and ad hoc pipelines. A major part of this orchestration is written in Python.
This team uses a scheduler which runs on jupyter notebooks with paper mill to produce job types with templates.
For example, spark Presto Etc. In addition to this the team has also created an event.
In driven platform which is built completely on python. They've created a number of events and combined it
into a single one allowing Netflix to filter react and Route events. Okay.
So now let's move on to see how python is used for scientific experimentations. This platform is basically created for experimentations
and to allow A/B Testing guys a be testing is also called a split testing
and it deals with comparing two versions and figuring out the better performing. Among them the scientific experimentation team can also
present new Innovations in data statistics and visualization. The python framework
that has implemented here is metrics report which is based on Pi Pika and allows writing of reusable parameterised queries
for the statistics sector by arrow and rpy to are used to calculate the statistics
in either python or are plotly helps in visualizations video encoding
or media cloud. During this team is responsible for encoding and re-encoding tasks for the Netflix catalog.
Python is used approximately 450 projects such as the V math which is video multi-method assessment fusion
and mezzanine file system computer vision solution, which deals with imagery using Archer Etc Netflix animation
and envy FX python forms the base for all animations and visual effects at Netflix Maya and nuke
which are 3D and 2D. D computer graphic applications are united using python.
Now, let's move on to see how Netflix uses python for its information security Netflix uses
python pad information systems for auto remediation security automation risk classifications Etc.
The most active open source project of this team is security monkey Netflix also uses bless
which stands for basham's Lambda M Farrell SSH service to protect secure shell.
Sources report kid is used to Grant. I am permissions and TLS certificates are allotted through Lemma.
Both of these tasks rely mainly on python. Finally. Let's move on to see
how python is used for monitoring and auto remediation the monitoring and auto remediation team is also known as
Insight engineering team, they build and execute tools for operational Insight Diagnostics Auto remediation
and altering for most of its services. Steam makes use of python. For example The Spectator python client Library.
This library is used for recording dimensional time series along with these libraries products like Winston
and bolt are also built on python Frameworks, which are flask unicorn and flask rest plus summing it all up one can easily claim
that python is the driving force for Netflix vital has
to Followed all its rivals in popularity and this popularity is directly proportional to money-making.
So before we begin just make sure you subscribe to our Channel and hit the Bell icon to stay updated with all the latest Eddie Rekha videos coming back
towards this session. We shall first take a look at who are python developers and what are their job Trends
then we shall take a look at the average salary is drawn by these developers based on three factors,
which are experienced location and skill set. So without any further delays, let's get started.
A python developer just like any other developer is someone who designs programs and deliver software applications,
but using python some of the most important responsibilities include writing effective code for back
and components testing and debugging programs creating applications that can be integrated with the present ones Etc.
The current salary trend of these developers has also remarkably increased but before taking a look at that here is a survey
that reasons out why python developers are heavily paid pythons popularity
in 2019 is record-breaking according to stack Overflow python has emerged as the most
question language leaving behind its Fierce competitor JavaScript GitHub grants python top slot in the race for popularity.
So as you can see on the screen python stands first Java second followed by JavaScript Etc.
This popularity is also a reason for the growth in job trends for python developers. These developers are in great demand all
over the world in August. In 19 in deed shows about 69,000 openings for a python developer.
Most of these jobs are in sectors like web development Big Data machine learning data science Etc,
New York city has the most number of job postings for python developers followed by Chicago
and San Francisco. So given this I know you all will be eager to know. What is the average salary drawn by these developers
the average salary depends on many factors. The three most important factors are experienced lucky.
Asian and skill set. So talking about a python developers experience and entry-level python developer earns a minimum
of two point four lakhs per annum the upper limit. However, depends on the organizations
and the skillset possessed by the developer on an average the python developer salary
at an entry level is about 5 lakhs per annum in India and about 88,000 dollars in the US.
The next level of these developers is becoming a senior python developer and at this level the average salary.
Comes about 8 lakhs per annum the biggest leap in salaries is seen after the senior level for developers.
So now let's move on towards the next factor, which is location salaries of python developers also,
very geographically in the US the best location for a python developer seems to be California having an average
of hundred and twenty-two thousand dollars per year California stands at the top of the list for best book locations
for python developer when it comes to India the best location for us. Software developer with python skills is good ground
having an average pace care of seven like thirty one thousand per year. Okay. So now moving on towards the next very important factor,
which is skill set having the knowledge of python along with other skills proves to be a very crucial Factor influencing python developer salaries,
according to CV compiler the most in-demand skills preferred along with python are AWS
and Django the average salary for a python developer having knowledge of Django is about 6 lakhs.
For annum which is much higher compared to the average seen earlier in the session
how to become a python developer. So guys, I will be discussing everything related or python developer, you know,
who is a python developer. What are the various job roles available in the market who can become a python developer
and then prerequisites in everything around, you know, if you're looking to you know, make a career in Python.
Let's move forward and have a look at the agenda for today. So this is what we will be discussing today. We'll Begin by understanding who is a python developer
and why one should even consider python as a you know, as a preferred programming language then the question is,
how should I start? I mean, how should I go about becoming a python developer then we'll focus on various job rules
for a python developer and let me tell you there are a lot of job roles out there, right? So if you think about python you have a lot
of fields lot of domains that you can go in right then a few projects for practice.
I mean you can just And it on the internet and and it's available and I believe the best way
to learn anything is to start working on it and you should start working on the project. So I'm going to give you a small introduction to few
of the projects that you can start with. Now the question is who is a python developer.
So let me tell you that first of all a python developer does not it is a very subjective term.
I would say why because you know, there are a lot of domains. There are a lot of different types
of job roles available in available in Python, right? So when I say python developer does not necessarily mean
I'm talking about a software engineer does not necessarily mean I'm talking about a web developer or a mobile app developer, right?
So a python developer is a very vast field. I mean something which doesn't exist right?
Because there are certain fields or sub domains in Python that you can, you know, come up with a job rule around that.
That's what I mean. Right? So, you know, he can be a software developer a software. You can be developing web apps mobile apps he
might be even into testing right because you can use Python with selenium. Then he can become a data analysis as well
or he can be a data scientist machine learning engineer artificial intelligence Engineers are different types
of job roles available in the market. Next up we are going to focus on you know,
why become a python developer because everything exists for a reason, right? And let's try to figure out why
one should even consider python is a programming language. When you have Java JavaScript and other different programming languages
and the best answer given to this question is by stack Overflow. So have a look at the graph guys, right?
I don't have to explain anything here because the red line the red curve that you are seeing is of python, right?
So from 2012 to 2018, you can see that it's it's an exponential.
Growth, right. This is this is it's a straight line. I'm sorry, right? So yeah, I mean it's growing pretty fast and I would also tell you
one thing guys are always make sense to learn something when you know, there's a demand there's no you can not you know,
so when there are no tights, right, so just to explain you that now python comes with really really cool features.
So let me just talk about those features. First of all, it is very very easy to learn. So all the people who are actually scared
of coding don't you don't have to be scared of python. I'm being really honest
because it is very very easy to write code in Python. The syntax is very easy,
right then tons of libraries guys. If you are talking about machine learning web development numeric computation
scientific computation, whatever comes to your mind any type of application python gives you a very good Library around
that whether it's computer vision anything you can think of right? So there are a lot of libraries available with python that you can use for.
The purposes right next day's it is free and open source that I think a lot of you might already know,
right and the best part is it has a very active Community guys right high demand
as I've just proved with the stock word flow graph apart from that since python is not only used for one particular domain
or one particular purpose. So if You Learn Python, you can go into any field right? It's like, you know a typical Indian household,
you know, pay parents who tell their kids to go ahead and study. Engineering and then he can decide what you want to do.
Well something similar but this makes more sense. Right? So these are the various features guys,
right and few companies few Giants who are using Python and let me tell you guys each
and every company out there in the market nowadays use Python, right? I have written down few big names
so that you can actually relate Google NASA, you know, Firefox YouTube Netflix Facebook Dropbox Raspberry Pi IBM Walt Disney,
all of them are using Python and Very happy about the services and you know,
basically whatever the python whatever python comes with right next up. We are going to talk about salary Trends.
This is something that you can see it on your screen, but I would definitely tell you guys it is a average number
and generally a data scientist is not going to earn you know, 8 lakh per annum 8 lakh rupees
per annum it'll be definitely more than that. It's just an average. We have taken it from a pay scale. It is definitely more than in that I'm telling you
that through my experience, right and devops engineer also earns a lot more than what it is here apart from that.
There is also a start around the python developer salary in popular cities, right?
So we have San Francisco which was paying somewhere in on 137 thousand eight hundred three hundred eighteen nine US dollars to python developers,
which is pretty great. If you ask me and I am definitely sure it is a way
above then 150 thousand dollars in us as well. Right, but for now, let's focus on how should I start how to you know,
go about becoming a python developer. Obviously everything starts from Basics, right? You have to understand the fundamentals to reach
to certain level. So first of all install python, go ahead type on Google install python, right?
You'll go to their official website. You'll find lot of lot of things out there. I can actually show you that let me just open it.
So if you click on install python, you'll be directed to this website download python here. Just select the version select the OS that you are using
and you are good to go right choosing an ID is a you know, it varies from person to person.
I prefer pycharm. You can also download python. Let me just take you to one more link.
download pycharm you'll be directed to a jetbrains website and here we go so
this is go ahead click on the community version because the professional version is you know you have to pay some amount for that right
so go ahead click on the community version download it and it's very cool guys because it gives you autocomplete features and a lot
of other benefits as well you don't have to manually go and install the libraries using CMD you can just go ahead
use Python and do it right choosing an IDs done a simple hello world program
Right. So I've already installed python. I have Pi term. I'm just going to show you how easy it is to write code
in Python, right? So, let me just quickly open my by charm and all I will do here is print.
Hello world.
All right. I just have to click and select The Interpreter as well. Let me just go to the settings.
I'll just go to The Interpreter.
This top to select The Interpreter and we are good to go. Now, let's go ahead and try executing again.
It is again saying that you haven't selected an interpreter. I just did that's weird. Let's see if I can see there is
an interpreter just waiting to minutes to process. Let's just wait for that and we'll go back
to our slides till then and will continue. So I'll tell you how to execute a simple hello world program
get just give me like five minutes after that. Let's see what we have next year. So we are going to talk about little bit about the basics.
So obviously as I've told you earlier as well to become a python developer to become data scientists or or Euro to go to a revel in your
in your career you have to start everything from Basics right so we have talked or EV all we already talked about
how you can install python how you can install python IDE which is pycharm right now let's talk about what are the basics
that you actually need to learn now people who are from a programming background can easily understand
this but people who are not let's just focus on them so variables and data types you need to understand
how to declare variables how to bother the different types of of variables that we can declare so they are numeric variables
that there can be you know list couple sets dictionaries all those data types you need to study there is
a separate tutorial on all of these you can go ahead and check out that in the python playlist but for now let's focus here what I'm talking about
then we have functions exceptions and input/output operations how you input /output operations basically mean
how you can open a file how you can delete the file how you can give our input to the programming language
right if My input something the user wants to input some variable value, right? So input/output operations
plus how to open close files delete files are certain things append certain things in a file.
So all those things apart from that exception handling, right? What about 1x0 of some some term like that comes
which has no answer right? So how will you handle those exceptions that will be covered and exception handling there are functions
which are nothing but useful code blocks, right so that you don't have to again and again right the same thing
right if you have for example if you want to calculate All ten times in a program you don't have to write the logic 10 times.
You can write a function and execute it 10 times just an example guys, then Loops control statements and conditional statements
which are very important. Right? I am pretty sure you guys know what our Loops right? If you have a set of you know,
if there's a logic that you want to repeat again and again and you have a condition defined then you can go ahead and use Loops for that.
Right? So there are different types of loop there is there is a while loop right? There is a for Loop and
yeah. They're nested Loops as well. We're inside one Loop. You can Define one more Loop condition statement
if L if if statement, so if a particular condition is true execute this if it is not then execute the next statement.
So those kind of things are called conditional statements data structures. Then you have hoops Concepts
what oops Concepts basically, you know, your polymorphism encapsulation classes objects
how to declare them. What are Global variables, you know, all those things that it's basically
a very vast field hoops, and it is very very important and python is one of those programming languages
which have object-oriented as well as procedural Concepts, right and file handling. I've just told you
in the beginning itself how to open close delete add append all those operations with a file right
how you can do that with the help of python, right? So now let me just go ahead open my pycharm and again and I'll execute that hello world program.
so I think Kobe can execute it now just a second guys it is just indexing right now
or how about I go ahead and create one more python file let us name it as test
and I'll type here rent hello world
and here we go yep so with one line of code I can do this try doing
that in Java So guys that was a very simple hello world program that I've written.
There are separate tutorials. I'm again and again telling you guys. All right. So now let's talk about the job roles,
which I'm pretty sure everyone is waiting for it. Next we have job rules as I was as I was mentioning.
So there are software engineers and developers writes. These people might be writing apis for your web app right there.
These people might be, you know, helping with mobile application. These might be mobile application developer
web application development. Those right so basically what or desktop GUI developers or game developers all those people, right?
So what sort of skills, you know Industries look for and in such a
for such a profile, right? So code python Basics, right which I've just mentioned at the beginning
where I was talking about data types variables functions Hoops Concepts file handling conditional statements Loops control statements all
those things right apart from that. You need to have basic knowledge about the web. I'm works right object relational mappers restful apis.
You need to understand all these terms guys. I cannot go into detail of all of these terms, but just to give you a knowledge.
Basically you need to understand how the web works. You should you should know the basics of web front-end back-end
and you should be aware about of libraries such as Django and flask which are very famous python libraries
for web application development. Right database knowledge is a must because where is your data? Anyway going after you know,
somebody does any sort of activity on it. They'll go to a database. Right? So that database knowledge is very important
for any developer out there in the market when a topic of talk about script writing. So scripting is a little bit different
than programming, right? So scripting basically is suppose. I want to execute 7 program sequential e, right.
So what I can do is I can write a script that can execute those seven programs in an order
that I have defined, right? So it basically automates a lot of tasks right in this case. I can write a script that will automatically take my data.
And you know create a schema and store in the database. So the load of other things that you can do with a particular script, right?
So just wanted to tell you the difference between a scripting and programming and I hope you I hope you have understood what you need to understand
what you need to learn. What are the skills required in order to become a developer whether you are a web application developer
or any sort of developer, right? Let's move forward guys and let's see which is the job role.
We are going to focus on next. So we're going to talk about A python web developer, right?
We just spoke about a developer a web developer like in the previous slide as well.
So here it's all about, you know, understanding the web HTML CSS Django flask
MVC mvt architecture model view controller template. So these are all things that you need to understand right?
I mean, these are few things which you will know once you start going and researching in that particular field,
right database knowledge as I've told you it It is a must for any sort of developer.
Right script writing is also very important because without scripting guys, there's no automation.
Right any automation tool that you use round also uses script, right? So just to clear the doubt,
you know, scripting is also very very important right now. Let's see which dobro we are going to focus on next.
Alright, so a data scientist sexiest job of the 21st century right now.
What do you need to learn to become a data scientist? What scales are Industries looking for in a data scientist?
So you definitely require core skills write code python skills, which have just discussed mathematics and statistics
is the code or you can say the foundation of a person who wants to become data scientist. That is very very important is these fundamental topics are
very very important guys in people generally ignore them, right? So basically, Programming core python skills mathematics
and statistics apart from that you also require skills, like, you know data visualization data wrangling you
might have to clean the data before processing it right. Then there's a scale called ed8 Data exploratory data analysis
where you just figure out you just look at the data understand the data what it is talking about. What should I predict what I can't predict
which grows are useful for me which columns a useless for me. Can I subtract a couple of columns in come up with the new column
that might be more useful for me. So these are the things that you know, you should have that it only comes with experience
and that's how it works apart from that a very important skill is machine learning and artificial intelligence.
So you need to be very, you know, you need to understand all the machine learning algorithms.
You need to understand where I can use which sort of a machine learning algorithm and if you want you might come up
with a different algorithm is with So how you can achieve that with python? So if it's python there
are a lot of libraries that you can work on. So there's a library called pandas which is Euro for creating data frame.
So you can import any sort of data with the help of Partners whether it's a tsv file CSV file Excel file doesn't matter.
You can import that data. You can perform basic operations joining concatenation merging any sort of operation.
Then you have numpy because python does not support anything called arrays. There's no there's nothing cool air is right.
So there are numpy array is that you need to create with the help of numpy package? Right. So any sort of Matrix operation
you can perform the help of number. So I get learner is in the library used for machine learning. So it has predefined methods for different algorithms
whether it is KN K means all those algorithms. There are there are predefined functions or methods
in this particular library that you can use and very cool feature about this libraries that it comes with sample data set
so you can practice those data sets you can you can Practice those datasets the way you want.
I mean you getting data sets guys. You don't have to download it. What else you what else do you want?
So I've just received a very good comment. The explanation is very good and helpful. Thank you mumtaz.
Is it easy to learn - Ravi ready? Well, let me tell you this is the easiest programming language that I've ever come across.
Okay. So should have already has one more questions. I am fresher to Learn Python. Is it useful in future,
please tell me Well python is growing at A very very, you know at a very good rate
you I just showed you the graph of stack Overflow python is very it's in demand right now
and whether it is any domain python is useful and definitely it will take over all the other languages
in another five years, right because of the kind of community that they have in the kind of packages that they come with right.
So let's move forward guys. So now we're going to talk about data analyst right? So data analyst is someone
who understands Theta and who understand a lot of things who understand the entire data lifecycle
who can take care of data wrangling who can take care of data exploratory analysis, right all those things
but they have only implemented simple linear regression models, right they you know are not aware
of those complex algorithms or some neural networks and some complex machine learning algorithm
which can be unsupervised for example k-means so they build prediction model simple regression models, you know sales forecasting and things like that.
they are very good with data manipulation and they have the scale which is very important and it is called as data
driven problem solving approach so you need to understand you know what sort of approach should I take for this particular data
and that only comes with experience right so that's how things work because you know you cannot just apply one algorithm
to all the data sets that are there in the market right you need to figure out what sort of a problem is it is it a clustering problem is it a
you know all those things are basically I don't want to go into too much detail here but that's what a data analyst is right So,
let's see emerging job role. So Ai, and ml engineer artificial intelligence or more properly also called as machine learning and generous.
These people are not bothered about data pre-processing. They get the good data.
They get the data where they have to predict something. It might be a regression problem where they're predicting something.
It might be a clustering problem where they might be clustering different people, right? It might be a classification problem
where they're classifying whether the given Input is X or Y right so that's what the major job role
of machine learning engineer or an AI engineer is so they require programming skills data science skills
and machine learning, right? So that is what basically an AI am L engineer should have right apart from that neural networks
is what people are talking about right now is it is a buzzword in the industry and it takes machine Learning
To The Next Step and it is called Deep learning. I cannot go into detail here. I hope you guys can understand
but deep learning is very very interesting eyes. And there are a lot of libraries that python has for deep learning one.
It's tensorflow. Right and it is a it is given to us by Google. So I hope you guys trust Google right?
So, you know, it's it's it's a very good library and I find it pretty interesting.
The I have separate tutorials on tensorflow is will write I have worked on tensorflow so you can go ahead and check out my videos.
Next is python automation testing. so what is python automation testing is basically you
know you're using okay let's talk about selenium because I can see only selenium in the slide so selenium
you can write scripts in Python using selenium right you can perform functional testing basically you know
testing login of any website testing any feature whether it's login whether it's search engine or any sort of feature
whether the link is clickable the button is working all sort of functional testing or you can say user acceptance testing can We're done
with the help of python in a very automated fashion. Next is a deep learning engineer.
So deep learning engineering focuses mainly on neural network. So he'll need to understand different types
of neural networks. Whether it's a recurrent neural network. It can be a convolutional neural network. It can be RBM autoencoders,
you know fully connected networks or single layer multi-layer perceptron, so they should be they should have that thing
where they can understand all these different types of networks and have good experience in working on applications
such as video processing image processing. Your division, you know speech to text text
to speech image recognition. So how do you think that the Facebook Auto attack feature works, right?
So it works with the help of deep learning only right and Right,
so that's how that's how it is. Now comes the roadmap guys.
Okay, so I have you know, I'll talk about each and each and every job role one by one.
So how you can master code python. So what you need to understand you need to learn variables and data types file handling exception handling Hoops
concept data structures. I Traders generators writes these type of things where basics of programming you need to understand right then.
Well, let's talk about master web Frameworks. So Django or flask whatever you prefer.
8T Cantor is basically 4 gy base the web apps, right? Then we have MVC MVC architecture
that is basically model view controller and template that you need to understand HTML CSS is a must
for any web developer gets right. It's there's no rocket science. ER I think people should be aware about it
that web developers have to learn HTML CSS. Okay, just a second towards data science.
If you want to go start a sticks applied math data visualization analysis, basically any sort of data manipulation.
You need to understand that on top of it. You need to understand machine learning and you have you know,
python libraries to make your life easy machine learning and artificial intelligence.
You need to be very good with the machine learning algorithms understand, you know libraries like scikit-learn tensorflow probability and statistics.
You should be very good with From that neural networks and deep learning if you are looking to become a neural network
deep learning engineer, right?
So deep learning again. There is a neural network architecture that you need to understand some machine learning and deep learning.
There's a very thin line here but deep learning is nothing but an advanced machine learning, right so don't get confused here.
Both are the subsets of artificial intelligence. Right artificial intelligence is an umbrella term which encompasses machine learning and deep learning together.
So this is though. I don't want you to guy. I don't want you guys to be confused about it.
I mean, it's very easy to understand machine learning. The next step after machine learning is deep learning which Neural networks.
It's nothing but Advanced machine learning. And opencv for computer vision web scraping
with bs4 predictions models Etc is what you should be knowing. The opencv is basically a library, which is used
for computer vision again, I have a separate tutorial and opencv as well. So you guys can check that out apart
from that web scraping is nothing but scraping data or collecting data from different websites web pages
that you can easily do right and prediction models is
I think you guys are already aware of Let's take
a quick look at why you should consider learning python. Well guys python is a general-purpose language,
but it has a wide range of applications ranging from web development scientific and mathematical Computing
and even design your own graphical user interfaces. So you can make use of Django and bottle for web development.
You can make use of numpy and sympathy for mathematical computations and you can design your own games using pi game as well
and so much more guys and Also, the syntax of the language is really really clean and the length of the cord is relatively short.
It's fun to walk in Python because it allows you to think about the problem rather than focusing on the syntax itself guys
and every Fortune 500 company that exists today uses python in one way or the other guys,
you don't even have to do any digging to know this fact. And again, as I said python is extremely popular among both the startups
and established industry Giants and programming in Python is really fun guys
it's easier to understand and write python code again why because the syntax feels natural guys
and on that note let us come to the main agenda of the session which is to help you all to install and
setup python let us begin so guys to begin with and install python the easiest way is
to come to the official documentation page and go about from there so here I have opened up
the official python.org page and we are in the download section of the page as you can check the URL
where at python or Ork /downloads / Windows guys since this tutorial is mainly focused
on installing python for Windows we are here guys just in case if you had to install a Linux
or something the steps are quite different from what we do for Windows however coming back the latest Python
3 version releases python three point seven point two and the latest python to release is two point
seven point one five well based on your requirement and you needs at this point of time you should already know which version of python
that you should use and just in case if you Don't you can actually install both of these versions
python 2 and Python 3 into your machine and go bar from there as well guys. Well, as you can check out three point seven point two
is the latest version of python at the time that this session was curated guys. So basically we need to go
and download this from the official site. Well, all you need to do is click on the latest release version there and we'll take you
to the download section desk. However, the first section is actually all of the changes and the new features added in Python 3 point 7,
and there are multiple documentation you are as well. So basically See, this is all the change log of this particular version
of python guys. Well, all you need to do at this point of time is to scroll down to the file section and then search for Windows out here.
Well, as you can see there are multiple versions to install right? So you actually get an embeddable zip file which is actually a zip file
where you have to unzip it and then install it manually or you actually have an executable installer guys,
and if you can notice there are two versions here as well. One is the 32-bit version and the other one is
64 bit version guys will basically you need to know if your machine is either running a 32-bit version
of Windows or a 64-bit version of Windows guys but however do note that the 32-bit version is actually backwards compatible
with 64-bit as well so what I mean by that is in case if you have a 64-bit machine you can still go ahead
and install python 32 bit and it would work absolutely fine but if you have a 32-bit windows then you will not be allowed
to install the 64-bit version guys I hope I'm clear with that and now that you would be familiar with your particular version
of Windows both are actually of the same install our as well well as soon as you go ahead and download it and basically all you need to do is open it
later guys giving it an administrative privileges is a choice but then it is always recommended so as soon as you
run it as an admin you'll be greeted with the following screen guys so basically it's telling me the python version right now
and it is automatically selected 64-bit version for my machine guys so basically you can actually customize installation
at this point you can choose the location and the features you need as well and all of that one main thing that I want you guys to do
is Make sure that this particular option is checked. It says add python 3.72 the path.
I will let you know why this is really important. But just make sure to check this at this point guys. And all you need to do is hit install now
and python is ready in your machine guys will basically as you can already see that it says that a program called Idol is also installed with it.
Right? So Idol is nothing but a graphical user interface, which is used to work with python guys.
So let me quickly open up idle to show you what it actually is. Well, as you can check out it is basically
a python 3.7 shell guys. So here you can actually type out anything that you want.
So let us say printer. Hello, Ed, Eureka.
As soon as I hit enter that is executed, right? So basically you can run any of the Python programs here as well.
So let me go ahead and do another hex equal to 10 print X into 2.
So X into 2 is basically 10 into 20 and that is good. Right. So basically provides a GUI for python guys as simple as that,
but do know that if you actually have a Windows machine there is a very good chance that python might already come installed on your machine guys.
However, there is one more thing. That you need to do. Well that is to actually check out your environment variable guys.
So basically you need to right click on my computer and go to properties guys and in properties,
you need to go to Advanced system settings and environment variables and here you need to check
if the path of the user variable actually points to your python installation location guys. So this is basically why we had to have the check box
during the installation. Well, if this is not the case in you have to manually come here and add the path in the system variable guys.
So why is this required? I'm pretty sure you guys could have already guessed it at this point, but let me quickly go over and show you a demo.
Let me open up my command prompt and if python is in my path, as soon as I hit python it is supposed to open up the interpreter and be ready
for me to execute commands guys. And since I already have the path established it is actually done.
So it is as simple as this guy's well installing python is actually pretty straightforward
and simple but let me quickly push you on another concept right? Well, so next up on the session will actually check out the different.
Development environments available for python guys. Well python has a large supporting community and there are numerous active forums online
which can be handy. If you're stuck anywhere guys, well at Ed Eureka, we have a vast Community for python lots of blogs
and these amazing videos created by our subject matter experts as well. So make sure to check them out.
Alright, so we have multiple development environments for python guys. So we have pider for Eclipse.
We have pycharm. We have notepad plus plus and Bluefish for you all my Users as well.
We have Komodo and whim to Guys these are some of the many IEDs that's out there that you can develop code in.
Well, I suggest you use something that you're comfortable with and then go from there guys. Well choosing an IDE is like choosing an ice cream flavor.
You need to first try it out practically and see if it suits your needs perfectly. If it does then go ahead and make use of it guys.
Well personally in my case. It has been a long journey with python guys. I have tried multiple IDs
and I have a personal liking towards pycharm. It is really simple and amazing to work with and I'm sure a majority
of the entire Community agrees with me when I say that pycharm is the number one IDE for python guys.
Let's talk about how you can write a simple hello world program in Python or before talking about a simple hello world program.
Let me talk about the python interpreter or python is also a piece of software called an interpreter.
Interpreter is the program. You'll need to run the python code and scripts. Technically The Interpreter is a layer of software
that works between your program and your computer hardware to get your code running now depending upon the python implementation
that you are using The Interpreter can be when you're writing a program in C. It's going to be C Python
and if you're writing the program in Java, it's going to be J python or jython. And then we have a program written in Python itself.
Then we have y pi and for the program implemented in.net there is going to to be ironpython as The Interpreter.
So whatever form The Interpreter takes the code you write will always be run by this program.
So therefore the first condition to be able to run Python scripts or Python program is to have
The Interpreter correctly installed on your system. Now The Interpreter is able to run python code
in two different ways, which is basically as a script or a module and the next one is as a piece of code,
which is typed into an interactive session. So talking about the hello world program guys in Python
if you To write a simple hello world program. It's very easy. You just have to write a print statement
and inside the print statement. You just have to specify the string which is hello world inside the inverted commas.
So let's take it up to the command prompt guys, which I have opened the interactive session already. So to print the hello world program.
What I'll do is I'll just mention hello world over here as a string inside the Commerce. And when I press enter it is going to show me
the output as hello world. So this is as easy as it looks guys, so This is how you run a simple hello world program in Python.
The syntax is pretty easy since it is Python Programming and one of the Salient features of python is the easy syntax.
So what you have to do is just write a print statement and inside the print statement. We have written a string which is hello world inside the inverted commas.
So now that we are done with how we can write a hello world program in Python. Let's see how we will run it using a DOT py file
and other different approaches as well guys. So I'll exit from here now.
Okay, let me open Idol guys, which is what you get when you install python guys,
so I'll make a file which is a new file, of course, so I'll just write print hello world over here.
Now I'll save it guys so I'll save it on desktop and I'll just write it as Hello dot p y
so this is going to be my DOT py file guys. So now when I run this I am getting
the output as hello world. So this is how you run py file in idle guys.
So this is the python shell guys. So to print the same thing, I'll just write hello and you recall learner.
Let's see what is going to happen now. Okay now when I This it's going to show me that the string
that I have provided over here. Now one more thing. I want to show you guys when I open my desktop over here.
I have a file which is demo and hello as well. So these are my DOT py file extension guys.
So to run it and using the command prompt, what I have to do is I'll just write python over here
and mention the file that I have saved using the dot py file extension and you will see that okay,
we are not in the same directory as so you have to make sure you should be in the direction. Every where your file is actually saved,
so now when I run Python and mention the file name, I'm getting the output as hello world now.
I'm check the file. I checked the file over here.
As you can see I'm getting the output over here. So this is how you actually execute a DOT py file guys
and a DOT PDF file is nothing but a simple file which has a python code and it is saved with an extension dot P Y
which contains the code or the script guys.
We always like to have options in everything but choosing the best among them especially in case of ideas gets confusing.
So if you have any issues regarding Here is the top 10 best ideas for python help you narrow
down on the most suitable one for you. So before we begin just to make sure you subscribe to our Channel and hit the Bell icon to stay updated
with all the latest editor acre videos moving on towards the session. We shall first begin with understanding
what exactly is an IDE and the basic features of it following that we shall take a look at the top 10 best ideas
for Python and the factors that need to be in mind before selecting one of these so without Out any further dues,
let's move ahead straight away to learn what exactly is an IDE guy's ID e stands for integrated development environment.
It's a graphical user interface web programmers write their code and produce their final products
and IDE basically unifies all essential tools required for software development
and testing this in turn helps the programmer to maximize his output now that you know,
what is an IDE, let's move on to see what are the basic features of an ID. many of us do not know the difference
between code editors and IDs code editors are applications that are able to write and manipulate source code
they can either be Standalone applications or can be integrated into ID he's the only feature a code editor should support
is being able to edit text on the other hand and IDE is a complete environment where you can create software applications
in addition to code editors IDs also have other features such as syntax highlighting
which is used to Mark the syntax of the base language in different colors and fonts the auto completion feature is designed to minimize
the time consumption a debugger is available which is required to test and debug the source code IDE is also consists
of compilers now these are tools that translate source code from one language
to another finally IDE is can either be language-specific or may have support for multiple languages the choice relies
on the user to single out and embrace the ideas of This choice now that you know basic features of an IDE,
let's move on to see what are the top 10 best ideas for python at opposition 10 is Idle.
It's a cross-platform open-source IDE, which comes as a default implementation along with python
and it's written completely in python as well. It's name is presumed to be in honor of Eric idle
who's one of the founding members of Monty Python. This IDE is considered to be extremely suitable
for the education industry due to With Simplicity, it also provides special features such as availability of a python shell
with syntax highlighting a multi window text editor program animation or stepping
which refers to executing one line of code at a time breakpoints are available to ease the debugging
and the call stack is clearly visible at position 9 is Thani. This is an idea that was developed for beginners.
It provides step-by-step assistance to the programmer. It has separate windows that are provided to secured function
calls line numbers are available to the user to keep track of each line log of the user actions is available
so as to assist the user in future statement stepping without breakpoints is also possible moving on
towards the next IDE which takes the eighth slot is Adam Adam is an open-source cross-platform IDE built using
web Technologies Adam is based on the electron framework which is built by GitHub it also provides some remarkable
features such as support for third-party packages and themes so as to form at the editor Adams APM allows installation
and management of packages it also provides support for a number of languages other than python such as C C++
Java Etc Adam also consists of an exception reporting package
at the 7th place is Eric python Eric python is an open-source cross-platform IDE
which is written completely in Python its source code is available freely And can be studied
and recreated by anybody some of the quality features provided by Eric python are formattable
window layout formattable syntax highlighting code folding, which is selectively showing
or hiding some part of your code. It is also furnished with a class browser and has built-in support for unit.
Testing and Django at the sixth position is Wing this cross-platform IDE was created by Wing
where it is a lightweight IDE and designed to allow quick programming. It comes in three variants namely Wing Pro Wing personal
and wing 101 Wing Pro is a professional version which is priced somewhere between 95 $279 Wing personal
and wing 101 on the other hand are simplified free versions that are available for students and
beginners Wing provides special features such as automatic multi-process and child process
debugging remote debug process is possible. It also has a module browser
and allows refactoring which is a process. Structuring existing computer code it also provides
Auto completion feature for non python files as well. Now, let's move on towards Sublime Text
which stands at the fifth position guys Sublime Text is a cross-platform IDE priced at $80.
It is developed and C++ and python in addition to python it provides support for other languages as well.
The features of this IDE can be enhanced using plugins the go to anything feature allows quick access to files symbols
or lines its command palette provides robust matching for keyboard invocations
python-based plug-in apis are supported. This idea also allows simultaneous editing
and the preferences can be made project-specific at position. 4 is Rodeo Rodeo is an open-source cross-platform
IDE built in particular for machine learning and data science Rodeo makes it very convenient to load
and compare data. It also allows data experimentation and is This to it bites and tutorials to guide the users.
It also provides cheat sheets for material reference files and packet search is made very easy.
Rodeo is a simple and a lightweight Ide at the third slot is pydev.
This is an open-source cross-platform third party package with serves as a plug-in for Eclipse
which in turn enables it for python development pydev provides a remote debugger. We're in the files,
which are not launched in Eclipse can be debugged it also. It's the code folding feature. So as to selectively hide or display sections of code,
it provides support for python 2X and 3X syntax. The auto edit feature can automatically edit the parentheses
at self parameter to the class methods and can also add import keyword in the import lines standing
at number 2 spider is an open-source cross-platform IDE designed mainly for data analysis
and scientists. It's considered to be a powerful scientific development IDE. Didn't invite in spider
is integrated with many Scientific Python libraries such as sci-fi numpy matplotlib pandas Etc
pertaining to its scientific use spider provides Advanced support for editing analysis and data exploration.
It also allows static code analysis where in the analysis is performed without actually
executing the code the features of this IDE can be expanded further through plug-in system and API the IDE that takes the top slot
and is at position number one is my personal favorite pycharm. It was developed by the Zeke company jetbrains
and it's a cross-platform IDE. It comes in two versions where in the community version is free
and the professional version is priced at $199 per user pycharm is considered to be one of the best ideas
and also the most widely used because of its remarkable features such as specialized project views allowing quick switching
between files it also facilitates. it's a web development along with Django flask and web 2 pi pycharm is equipped with more than thousand plugins
so programmers can write their own plugins to extend its features 81 of the top hundred companies make use of pycharm
before ending the session let me just help you guys to narrow down on the best idea that suitable for you
before choosing an IDE keep the following points in mind the level of expertise of the programmer the type
of industry or sector where python is being used the ability to buy commercial versions or stick to the free ones the kind of software being developed
and the need to integrate with other languages once these points are decided upon the programmer can easily
select among the ideas which we have discussed earlier based on the given features So no exactly on that note.
Let us start checking out pycharm. So guys many programmers nowadays op for python to build software application, right?
So they need the code to be concise clean and readable as well. They can even accelerate custom software application development
by actually taking advantage of the number of ID is supported for python. Well a company called jetbrains has actually developed by charm
as a cross-platform IDE for python in addition to supporting versions. Dew point x + 3 .6 of python pycharm is also compatible
with Windows Linux and even Mac OS and at the same time the tools and the features provided by pycharm helps programmers
to write a variety of software applications in Python very quickly and efficiently guys.
So the developers can even customize the pycharm UI according to their specific needs
and preferences also, they can extend the ID by choosing over. I think they are on 50 plugins as well to meet their complex.
Project requirements. So again, it is a win-win for everyone starting from the beginner to the advanced user as well.
So pycharm is one of the most widely used IDs for Python Programming as I mentioned at present python.
IDE is being used by all of the large Enterprises like Twitter or VF Pinterest. We have HP,
we have semantic and even group on guys. So this is really a good thing in terms of Industry traction.
So now that that's done we need to check out why pycharm is so popular. I'm sure you guys were thinking about about this right?
So let me quickly walk you through all of the features and the tools provided by pycharm guys.
So first we look at the features and later. We'll move to the tools. So the first important tool we have is the code editor guys.
So what is the code editor feature? So basically the intelligent code editor provided by
pycharm enables all of us programmers to write say high-quality python code directly guys.
So the editor enables programs to read code easily through their different color schemes.
Set indents On You lines automatically pick the appropriate coding style and Avail context-aware code completion as well.
And at the same time the programmers can also use the editor to expand the code block to an expression
or logical block. They can also Avail code Snippets format the code identify the errors and misspellings as well.
They can even detect duplicate code and auto generate code to also the editor makes it easier
for developers to basically analyze the code on the whole and Identify the errors while writing the code guys now
that was an important feature, right? So next one. I want to talk about is code navigation guys.
So the smart code navigation options provided by pycharm basically help the programmers to edit
and improve the code without putting any extra effort or time. The ID basically makes it easier
for the programmers to go to a class or a file assemble and go along to the Declarations
invoked from a particular reference as well. And the user can even find an item in.
Source code or the code snippet UI element or a user action almost immediately.
So basically they can further locate usage of various symbols and set benchmarks in the code.
And also at the same time the developers can even take advantage of the code navigation feature to scrutinize the code
throughout lie in this Mode called as the lens mode guys. So next up we have refactoring. Well pycharm definitely makes it easier
for the developers to implement both local and Global changes really quickly and efficiently guys.
So the developers can even take advantage of the refactoring options provided by the IDE while writing plane python code and working
with python Frameworks. They can Avail the rename and move factoring for files glasses functions methods,
you'll properties parameters and local and Global variables as well. Also likewise,
they can improve the code quality by extracting variables Fields constants and even parameters also pycharm
allows programmers to break up longer classes and methods. Through the extract method.
So next up is support for web Technologies guys python makes it easier for programmers to write various web applications in Python.
So python basically supports Technologies like HTML CSS JavaScript typescript and even coffeescript, right?
So the web developers can basically use the live editing preview options provided by the ID to view a single web page simultaneously
in the editor as well as the browser. So this same time the live edit feature provided
by the Enables programmers to see the changes made to the code instantaneously on a web browser pycharm further allows developers
to Avail a JavaScript debugger as well as coffeescript and typescript editors as well do know
that it even simplifies isomorphic web application development as well. And this is done
because it supports both angularjs and node.js guys. So the last feature is support for python scientific libraries.
So guys pycharm further helps programmers to use Python more efficiently in in big data and data science projects as well.
So it supports some of the widely used scientific libraries for python starting from numpy and a condom and matplotlib as well.
So the developers can work efficiently with all of these scientific libraries by availing the interactive graphs deep code inside
even array viewers provided by the IDE. They can even run the repl python console
provided by pycharm to Avail robust features, like on the fly if syntax check and code inspection as well.
and at the same time programmers can also integrate the ID seamlessly with the IPython notebook to create innovative solutions
without putting extra time and effort as well so that is a really good Advantage as well right so now
that we're done with the features let me quickly walk you through the important tools while all these tools definitely give python the upper hand so
let's check it out so the first one will be checking out is database Tools in addition to supporting various python libraries
and Frameworks pycharm allows developers to work with a number of relational databases including Oracle SQL Server MySQL
and even postgresql as well so the developers can further use the ID to run the queries
edit the SQL code browse data alter table data even analyze the schemas as well
well guys pycharm further supports SQL Alchemy library and inject SQL code into code
which is written in various programming languages as well the professional edition of the ID further makes it easier
for the developer Purse to hide a large volumes of data efficiently through the data grids and next we have visual debugger.
So guys the visual debugger provided by the IDE basically helps the programmers to debug python JavaScript
and Django code directly. The developers can use the inline debugger to see live debugging data directly on the editor likewise,
they can build multiple python processes simultaneously and step through the code bypassed libraries as well bite
some further creates reusable and customizable. Duration for each test script or debugger execution.
The user can have an option to facilitate a remote debugging by integrating the visual debugger with the remote
interpreters directly and the next feature we have is built-in terminal. Well guys pycharm comes
with a local terminal for Windows Linux and Mac as well. So the built-in terminal basically enables
the programmers to continue the code and test without ever leaving the IDE. Also the programmers
can use the ID to basically run the python files and configured. Still biting environments.
Well, well this is done according to the precise project requirements as well. So that's good. And at the same time they can run interactive python
or Django consoled directly into the IDE and the console provides useful features, like code completion automatic braces management and Dynamics
and text change the programmers even have an option to integrate the console with both local and remote interpreters.
So the terminal is really big Advantage guys and next up. We have software testing. So like any other IDs pycharm also comes with features
and tools to simplify python application testing. It allows developers to perform unit testing
through popular python, testing framework, like knows a tests and Doc tests as well.
So the testers even have an option to run individual or multiple test files and test classes guys.
They can further integrate the IDE with coverage dot py to measure the code coverage
while testing the applications as well and while testing multi-threaded applications the testers And use
a Ted concurrency visualization option provided by the ID to control the application fully
and efficiently at the same time pycharm enables users to deliver high-quality software
by implementing behavior-driven development guys in short. We actually call this as bdd
and lastly we have remote development capabilities guys pycharm allows developers to connect with various machines
and build software applications remotely. The programmers can Avail the built-in SSH console
provided by the idea to basically connect to machines and perform various development tasks remotely through SSH
so they can even run debug and profile the python applications in a remote environment by replacing the local interpreter with that
of the remote interpreter and also pycharm enables programmers to create reproducible development environments
through a robust tool called as vagrant guys and this basically simplifies distributed application development.
And this is done using Docker the users even have the option to Item seamlessly with issue tracking systems as well.
So in my opinion that has enough of knowing what it offers. So let us Dive Right into pycharm now
and I'll walk you through the interface. Let me open up IH am so guys. This is probably the first screen that
pycharm greets you with. So on the left here, you will basically have all of the codes that you have actually worked with or any other recent projects
that are opened. I have a quite so I have a handful of projects right here. So basically this might be blank for you
if you're installing pycharm for the first time. And there is installing pycharm is very simple.
So it is free and the installation is extremely straightforward as well. So all you need to do is go to the official website
and it's a single step download procedure. I already have it installed on my machine as you can see. So first let's go ahead
and create a new project in pycharm guys. So all you need to do is hit create new project on the right side and give a name for the project.
So let me just type it out as pycharm test. And then for now you might not have the python interpreter.
I'll just come back to this sofa. Let me just hit create and let pycharm take us to the or UI.
So basically it has created the project folder for us as you can check out on the left and it is blanket and
this part actually queries all this skeleton procedure. And this is the time where it actually sort of
for scroll through and checks all of the installed packages. And also it probably will take a while and you could actually catch it rotating somewhere here guys.
So this is good. So let us quickly go and create a new python file that we can write into so click new news cards file.
What? Type of file we trying to do here sea bass. So the file we're trying to do is python here,
right so that and you can write in different languages as well. So basically you can use x HTML XML HTML the DTD command line as well.
So right now since we're doing python, let me quickly go ahead and type in Python. So as you can see we have a scratch file,
which is a scratch not py guys so you can basically right-click refactor and rename this to whatever you want.
But since this is just a demo I'll leave it at scratch. So then there are multiple options to With this value,
but if you want to get started really simple just follow all the procedure until now to create a scratch file and later.
You need to add the configuration to actually use Python to run this guy's so we click on ADD configuration.
Click on the tiny plus icon Python, and then we don't have any configurations, right? So let me name this test config
and then the script path the script path basically is providing the past to the particular script.
So it's pycharm test and then as soon as we come into the environment, Dormant here is where we will be actually checking
out our interpreter guys. So I have multiple versions of python installed as you can see. I have three point seven and I have 3.6 is well,
so there is a very good chance that this might not show for you because you have not installed Python
and it is very simple to install pipes in guys. So I'll just show you that in a second. So this is the part
where we actually select our interpreter 3.7 and all we need to do is okay. So this is actually ready
to execute with our test configuration guys. So now coming back to on how you can install python.
okay so basically we open file settings and in settings we actually come to project by jump test case
so click on the project interpreter and on the right side you can actually check out The Interpreter
so basically we have multiple interpreters you are and for this case I'm going to use mini conda 3 and that is
what I've used so for your case if you have not installed it so go to the gear icon on the right and click add sure you can actually use
the system interpreter which has Python and days so in my case I've installed it using an knock on door so it
says Anaconda so make sure you click this and hit OK and you're done this so apply so now that all
that is done right so how can we add all the packages to python not everything comes in built right so again go
to file settings is pretty much almost same day so we go to The Interpreter and then we have the packages tab under this
so basically we use the gear icon to actually check out our interpreter now check out all the list we have based
so basically these are all of the packages that are installed for my particular case so these are All of the libraries that are installed guys,
so in case if you need to add a library hit on the plus icon on the right side, so this type in any of the libraries
that you require right? So there are multiple installed as well. As you can see whatever is in blue is actually installed
if I just type in tensorflow, it says already installed, but then it won't be in blue for you
because you might have not installed this right. So click on that install package on the left side and you're good to go
how simple is it guys? So now that we're actually all set up and we're waiting in a scratch file.
So let me quickly. Walk you through a tiny code snippet and we can check out the advantages here as well.
So guys, let me try to quickly import a package here and not even going to type the entire thing. Right?
So I just basically typed out the first three letters I MP and it is actually prompting me to pick up the entire thing.
Right? So this is basically how intellisense walks and visual studio. And this is all the intelligence of pycharm guys.
So it is at this point of time. You can actually choose to type in the entire thing like ort or you can just again come back I MP and then you realize
that you To use import so all we need to do is either hit enter or you can hit tab as well
and it takes the entire thing. So this definitely helps reduce a lot of time by providing good predictions, right?
So this was just basically one line of codes. So imagine if you have to write hundreds and thousands of lines of code,
then this is definitely a lifesaver in my opinion. So next I'm going to actually try importing a package.
That's a pie game. So import pygame come to the new line so you can check out everything is grayed out here, right?
So we can actually change the color by making sure we actually use something right. So let me quickly go and buy game dot in it.
For example, as you can see the color change, right? So this is basically telling us that by game is being used now simple as that and next.
This is another actually good tip for you guys. So let me quickly take an example.
I will to 10 I'm going to print I so
as you can already guess this is not very complex code, right? So it is going to print I As soon
as I run this piece of code, I am supposed to get I printed to be like five times right? So check this out.
This was only five times. So let's say you have a piece of code where you have to change something, right? So let me change this i2p quickly.
And now that this has been changed to pee since this is a small program. I can probably go ahead and change this manually, right
so I can go ahead and change this to BP again P1 more Sagan.
It took like almost 20 seconds to do this for five times, right? So imagine if someone Has to do
this for thousands of lines of code, so it becomes really annoying. Right? And this is where another useful feature of pycharm helps us.
So let me quickly select this p as you can see, this is selected. Every P here is highlighted, right?
So let me quickly right click on it go to refactor and then hit renamed. So let's insert P.
We wanted to biessed as soon as I hit refactor. Boom as you can check out, right? So the once this got changed everything else got changed
in just one click and this is also a lifesaver in my opinion. S so next up there are multiple keyboard shortcuts
you can use as well. So basically it's the same we can use Ctrl F to actually find something
and then use it. Right. So this actually works even in scope as well. So let's say you're in the scope of a function
or a user-defined function or something and then you want to find something in that particular scope. So this particular search option actually works there as well.
So basically with coding you would have done multiple changes, right? So you would have done multiple changes with your programmer
in case you just want to check out what are all the changes. Is that you have done? So we actually press alt shift + C to actually give
us a list of changes that we have actually done check this out. So these are all of the changes that we have actually done right?
So we deleted something created on these cards file. So this basically goes in the reverse order guys. So this is definitely useful
in case you actually want to step back or check out. What are the changes that got done and then in case
if you just want to print the same thing over and over again, you can do it as well. So let me quickly go ahead and type out Brent say Edgar a cow
or Like These Guys these are all examples, right? So do not bother about the exact syntax right now. I'm just trying to show you how pycharm works here.
So basically in case I have to just hit this print again, so instead of typing it out or copying
and pasting into something there is actually a short bit better. I'm going to place the cursor here. I'm going to hit control D. So control D basically duplicate this entire line for us.
And how cool is that guys? So guys the next feature. I want to show you guys is basically to select
a current column. So let me just quickly select. Ain't your and then I'm going to use alt
and actually scroll guys. I am not sure how you might actually use this but you can select the columnar output of it
and maybe this might help for your particular requirement as right. So basically you can use it for iron tation
of the code as well. And then this basically depends on your requirement, but this is a very good feature provided by pycharm guys.
So basically to run this all you need to do is Select it or right click run scratch or say you can even click
the play icon here as well to debug it. There is a time. Bug icon on the right. So basically you just place the debugger wherever you want
and you can actually stop execution at this particular point of time and later move on from there as well.
So guys, there are n number of features that pycharm offers and to keep the session simple. So I basically just showed you all of the tips
and tricks that you can actually use with it. So guys on the whole pie item is one of the most popular ideas for python.
So the python programmers can make use of pycharm as licensed software as well. However, jetbrains allows
developers to choose between in three distinct editions of the idea guys Community professional and educational
the developers can always create a software development cost by opting for the community edition of pycharm.
However, the Community Edition is free, but it still lacks some of the advanced features provided by
the professional editions case. So jetbrains have been updating both editions of the Python IDE to make programmers more productive
and simplify custom software development as well. Let's say for instance the professional edition of fights.
Mm. Mm 17.3 actually. Is it easier for developers to test functionalities of the API
by providing a built-in rest client likewise, it accelerates the web application development
by allowing programmers to Avail new features provided by Django 2.0 and also it allows
developers to visualize and analyze the data more efficiently through a data science model as well guys.
So now that we checked out python in a really good amount of detail. Let me quickly conclude the session for you guys.
So we started out by checking out what an ID is later. We looked at why we need to make user ID followed by that.
We actually looked at the different IDs you can make use of to code with python and lastly we checked out python in a small amount
of detail guys. So it is at this point of time. I like to tell you that we have in-depth tutorials
and blogs on Python and even a complete master's program, which will help you become a certified python expert days.
So I highly suggest you guys check it out.
Have you ever asked any And I'm going to explain the code he wrote a year ago, or have you ever tried reading your own previously written code.
It would become a very time-consuming and tiring task guys. If you had to reanalyze every block of code from scratch.
Well, the best thing to do is add a comment. So let's just quickly move ahead and look at what's in store under this topic firstly.
We shall understand what exactly comments mean and when to use them then I'll be showing you
how to write comments in Python and how they're going to be interpreted. It following that we will be looking
at the types of comments that is single line and multi-line comments and a few shortcuts related to them.
And finally we will be looking at docstring comments or to be more precise docstrings as commence.
So I hope you are clear with this moving on towards the first topic of the session what are commands?
No, they're not something there just to increase the size of your code, but guys, they are indeed very meaningful comments our program
a coherent statements. Describe what a block of code means and they get very useful,
especially when you're writing large blocks of code. Say for example, you've developed some software previously.
And now you're working on something that's new and completely different at this point of time.
You find that your previous software is throwing some error you would have completely forgotten what you did and how so this is
where comments come in to picture a good code actually consists of relevant comments. These comments actually increase the readability.
Leti of the program not just to the programmer but to the others as well now that you know what our comments let's move on and see
when to use them. The best practice is to write comments as and how you proceed
with your code comments are very useful. But only if they are implemented wisely just keep the following points
in mind when you're commenting your code. Make sure your comments are very precise and clear
and preferably shot as well. They need to be as specific as possible to the Talk of code.
They're included with please make sure you use decent language guys and do not repeat your comments
as they become redundant now that you know, what our comments and their importance.
Let's see how to write them in Python comments in Python are preceded by a hash character
as you can see on the screen over here. I have a small example with some two lines of code.
My first line is a comment and my second line is a print statement. Now, let's move on towards the jupyter notebook and see how this works.
Works now, let's move on towards a jupyter. Notebook and write some comments All I'm going to do over here
is I'll open a new python notebook and I will rename this notebook to rename your notebook guys.
All you have to do is click on the title. Give whatever title you want.
And you was renamed. Like I've told you before come and start with a hash character in Python.
So here I'm going to write a comment preceded by a hash.
As you can see my output there is nothing related to the comment line and whatever I have printed
in the print statement has been returned as my output. Now. This is how comments work they do not show up in your output.
Now, let's get back to our presentation and see how they're interpreted, which is exactly what is our next topic whenever
The Interpreter encounters a hash symbol it omits whatever is present after that the hash character actually tells The Interpreter
to stop reading whatever is present after That until the end of that line, so when you're writing comments,
whatever is present after your hash character is going to be emitted by your interpreter. Now, what if the hash character was present inside the string?
Let's go to a jupyter notebook and see what happens. I'm including a hash character within a string and I will run this.
As you can see when I run this the string is returned which means a hash inside a string means a hash itself and nothing else.
So you cannot write comments within a string. Okay. So I hope you've understood how to write comments.
Now, let us move ahead and see what are the types of comments comments can either be single line
or multi-line single line comments can either appear individually or in line with some other code multi-line comments have to be preceded
by a hash character in Realign they appear. Now. Let's see a small example of single line comments.
Like I've told you before single line comments can appear either in an individual line or in line
with some other code. Now, let's move on towards the jupyter notebook and write some single line comments.
I'll just create a heading over here to create a heading. All you have to do is go to code select heading.
Give whatever heading you want as your heading and prefix it by a hash a single hash tables
that it's H1 level heading to hashes tell that it's h 2 and so on you can use the heading level of your choice here.
I prefixed my Heading by a single hash which means it's of level H 1 now, let's write some single line comments.
As you can see over here. My first line of code is a comment line. I've prefixed this line by a hash character.
And in my last line, I have an inline comment. This inline comment is present with some part of the code,
as you can see in the output. None of the comments have been returned. Now, let's get back to our presentation and see
how multi-line comments work. Like, I've already told you multi-line comments can appear
anywhere in your code. But each line needs to be prefixed by a hash character. Example as you can see on your screens.
I have a hash character present in the first two lines of my code. After that. I have some code followed by it.
You can see in the output that none of these lines have been returned. Now, let's go to our jupyter notebook and write some multi-line comments.
As you can see over here. I have three initial comment lines and all three have been prefixed by a hash after that.
I have some code and you can see in the output that none of the comment lines have been returned
and whatever code is present after that and output is returned based on this code. Now typing a hash everywhere might be a problem and many
of us would not like to do. So, let's look at some Shortcut methods of how to comment multiple lines at once.
All you have to do is type your multi line comments. first hold the Ctrl key and left click wherever you want
to insert a hash character just like how I'm showing your and then type it once
and it appears wherever I have inserted the cursor as you can see on the screen now
in case you want to remove multiple hash characters all at once do the same thing hold the Ctrl key click
on wherever you want to remove the hash character from and press the backspace key, as you can see from two lines.
I remove the hash character in a single go. So these are some Shortcut methods to comment multiple lines.
Many of us think that comments and docstrings are same now, let's move ahead and see
what the doc strings and whether they are actually comments or not doc strings are not actually comments,
but they are documentation strings. These strings are written within triple quotes. They are not assigned to any variable
and many other times they're used as comments as well. Now you'd be thinking what is the difference
between docstrings and comments doc strings are not permitted by The Interpreter unlike Comments are emitted by your interpreter
and nothing present after the hash character is going to be read by it on the other hand doc strings are strings
that describe something about the code docstrings actually tell what some function is going to do.
Whereas the comments will tell how it is going to do. So, this is the difference between docstrings and comments.
Now, let's go to a jupyter notebook and see their functionality.
Like I've told you before doc strings are written within triple quotes as you can see in the output.
When I execute this. It Returns the string itself. Whereas in case of a comment when I execute the comment,
it does not return anything which means The Interpreter does not emit docstrings.
Whereas it omits the comment now these doc strings are efficiently used when you want to describe something about a class
or a function or something else. Now these dogs drinks can either appear in your out. But or they can be omitted
based on where you're going to place them. Let's try to place a docstring initially before the code starts.
As you can see in my output the doc string has not been returned. Whereas when I use the doc string individually
without any code and I executed it you could see that it had returned the string itself,
but when I include the doc string before the code, and after that, I've included some code lines and I run this you can see
that only the output for my code is present and nothing related to the doc string has been returned as my output.
Now. Let's try to include a doc string after some code.
As you can see over here when I included the doc string after the code. It has returned the output
for the code as well as the string itself. So when you're making use of Doc strings just be specific
of whether you want it to be returned in your output or not many a times these strings are called rather than writing it again and again,
so I hope you've understood what our comments and docstrings as well.
First of all, we have to understand. What a bill is a variable is like a memory location
where you store a value now this value you have stored you may or may not change in the future now coming back
to python to declare a variable we just have to assign a value to it you don't have to give any additional commands unlike any other programming languages
like C C++ Java but you have to give additional commands for declaration and assignment purposes let's take a look at an example here
we have two variables X and Y and we have assigned values to each of them we have given hundred 2X
and Ed Eureka to Y so this is actually how you create a variable in Python now when I print these variables I am going to get the output as
hundred and adyar a curve you can also perform operations on these variables using the arithmetic operators
you can perform addition multiplication subtraction or division as well now let's try to understand this
in the jupyter notebook as well first of all what I'm going to do is I'm going to declare a variable without assigning a value to it let's see
Happens it is going to show an error. The error says name X is not defined. So let's try again after giving it a value.
Let's say x is equal to 10. It does not give any errors now. So we have successfully declared a variable here.
Let me declare one more variable. Okay, I'll give it a value 12. Now. Let's try to perform a few operations
on these variables. First of all, let's just perform addition between X and Y now, let's try to do multiplication.
There's one more thing. I want to tell you about variable declaration that Is variables in Python are case sensitive meaning
and uppercase letter here is not going to be the same as a lowercase letter. They are going to be two different variables.
Let me show you it is showing another error which is saying name, why is not defined because we have not assigned a value to uppercase letter Y,
let me give this another value here. Let me give it 20 so we have declared two variables here
a lowercase value Y and an uppercase value Y which are going to be two different variables. So we have understood here the Bill declaration
how we declare a variable now, let's quickly move on to various variable data types that we have in Python depending upon the properties.
They possess there are mainly 6 data types in Python. First one is the numbers on numerical data type.
The next one is the string then we have a list after that. We have a dictionary followed by a double and in the last
we have a set there is one more variable data type that is range. We will talk about that in the end
because it is mainly used when we are iterating through values or Or when we are using the for Loop, so let's try to understand all these in detail numbers are
numerical data types mainly have numerical values and in numbers. Also, we have four different data types
that is integer float complex and Boolean so integer mainly takes the whole number values without any decimal point values,
but if I add a decimal point value to a number it is going to become float and for complex.
We just use J as an imaginary part and add it to the number for Boolean it only returns at or false
so we use Boolean for only categorical output now let's try to understand this in jupyter Notebook
first of all let me declare a variable X and give it an integer value let's say 10 now to check
the type of a variable I am going to use the type function so it is going to show me the type of this variable
let's say x that is NT now if I add a decimal point value to X let's say 10 .25 and let's check the type
of this variable now we should get flowed as you can see we are getting float here now to make
a number complex I'm just going to add an imaginary part that is Jay here let's check the type
of this variable it is going to show complex number to understand the Boolean variable let me take
another variable now I am going to check if 10 is greater than 9 or not so when I check the type
of this variable here it is going to show me that it is a Boolean and when I print this value
it is either going to show me true or false since 10 is greater than 9 it is showing true as output
so this was all about it SQL data types now let's quickly move on to string data type string data type in Python is written
in single or double quotes as you can see here in the example that I have shown you. I have two variables X and Y
and I have given them the string values hello and world now to access the string values. We use the square brackets with the index number now,
you must be wondering what I index number is so let's take a look at an example here. I'll show you what index numbers are in the jupyter notebook.
Now, let me declare a variable and give it a string. Value let's say at Eureka now. Let me check the length of this string.
Let's say so it has a length of 7 now what our index numbers so index numbers basically start from 0.
So at the letter A here index number is going to be 0 and it is going to go until the end of the string.
So here at the end is the letter A. So index number at the letter a is going to be 6
since we have the length of the string as 7 and index numbers start from zero now,
let's try to access some values from the string using the next number so when I write the index number as to
I am going to get the value at the index number that is 2 which is later you now we can also perform several operations
on strings for example we can change the case of the string we can replace the values in the string we are going to see
if we can actually replace values in the strings or not so let's try to update a value here at the index number 2 here
so instead of you let's say I want D here it is going to show an error which is a type error
which says string object does not support item assignment which means strings are immutable you cannot change
them now to access a series of letters from A String I can specify a starting index and with the colon here I can specify the ending index
as well let's say I write eight but we only have seven indexes here let's see what is going to happen here
so it has actually started from the index to that is you here and has gone to the end of the string but what
if I write ending index as seven since we have the length of the string as Let's see what it's going to do.
It's going to show the same thing. But what if I write checks over there, it is not going to include the last letter
because the ending index there is not going to include when we are accessing the values from the string.
Now, let's try to do one more thing here. Let's try to make all the letters here to uppercase letters
as you can see I've done that similarly. I can make all the latest lowercase as well.
So this was all about string data type. Okay. One more thing. I want to tell you here is to access the values
from the end of the String I can specify the index number using the minus here. So what I am going to get here is starting
from the end of the string. I'm going to get the two letters there. That is at the index number 5.
That is K. Similarly. If I write name specify the index number 2 here it is going to give me the same value
so we can also access the values in the string like that also. So this was all about string data type.
Now, let's quickly move on to list data type a list is a collection of arrays which is changeable and ordered
which they have indexes just like strings so we use the square brackets to declare a list
as you can see here I have the list name fruits and inside the square brackets I have the list values now we have to understand
that we can declare different data types in the list not just strings or not just integers we can merge integers
and strings as well or we can also use other data types in the list as well so I'm going to show you this
in the jupyter notebook so let's declare a list first give it some integer values
first some duplicate values as well let's just see what happens and a string value as well as you can see
we have successfully declared a list now when I print the list let's see what all values I will get so I am getting all the values
that have declared here now let me try to access the values using the index number just like we did in the string
as you can see we can access the values in the list just like we did in the strings as well using the index number now
we can also update the values in the list using the index number as well so let's just try to update the value at index number two so
instead of 30 I want 35 over So let's just see what it does as you can see we have successfully updated
our value in the list. Now. Let's try to add a value using a pin. So what append does is it will add the value
at the end of the list now, let me show you so there is a value at the end of the list that we have added using the append function.
Now what if I want to add the value at the middle of the list using the index number, so what I'm going to do is I'm going to use
the insert function specify the index number and give it a value. You just say a hundred now
when I print the list as you can see at the index number 5, I have added a hundred as a value.
So the difference between the insert and apparent is that using the up and you can only add the value at the end of the list.
But when you are using insert you can add the value specifying the index number now. Let me do a few operations here.
Let me try to reverse the list here using the reverse function. Now when I print this the list is diverse.
So this was all about list here. Let's quickly move on. To dictionary now and dictionaries are collection just like a list
but it is unordered changeable and indexed. So we have a key value pair in a dictionary
and we can use the keys as indexes because they are unique but the values in the keys can be duplicate
as you can see in the example here. I have the dictionary name as animals and in the curly brackets,
I have declared the key value pairs. So let's try this in the jupyter notebook as well. So I will declare a dictionary here.
Let's just say courses is my dictionary inside the Curly brackets, I will get key values.
Let's just save one and give it a value comma key value that is 2
and then I'll give you another value. Let's just say data science. I can give string values in the key as well.
So I'm going to write here machine learning. Now, let's see if we have a successfully
declared our dictionary. Yes. We have let's try to print the dictionary. Now as you can see I am getting all these values
with key value pairs. Now, I can access the values in the dictionary using the keys as indexes
and just try to third over here as you can see. I'm getting the value at the key that is third now for the similar purpose.
I can use the get function and specify the key value. There. It is going to show me the same value now to update a value
in the Eddie I'm just going to write the index number that is our key value here. So instead of machine learning, let's just say Hadoop.
Alright, so when I print the dictionary now it is going to show me an updated value. Also, I can add the key value pairs using the square brackets.
I'll just specify the key value. Let's just say for here. I'll add machine learning again.
Okay. Once again, we have made a mistake here. We wrote the wrong name.
Now as you can see, we have added another value to our dictionary. So this was all about dictionary guys.
Let's quickly move on to topple at Apple is an ordered and unchangeable. Now what it means is it is immutable just
like a string we cannot make any changes in the topple, but we can have the duplicate values in the top layer as well.
So let's try to understand this with an example. So I have a couple here which has a name animals and I have few values here.
So let's just do this in jupyter Notebook as well. So I will My double as a name animals,
so I will give it a value in round brackets a few integer values first just to check off course
and then I'll add some values like tiger and just say line and one more I will give let's say giraffe.
Let me give a duplicate value here to check if we can actually add a duplicate value or not. I'll say tiger once again,
so I have successfully created a couple here. Now. Let me access the values here using the index number.
Let's see if we can do. That so this actually means the tuples are indexed as well. We can use the index values to access the values
from the double now since it is immutable or we cannot change it. There are not many operations
that you can perform on a topple, but you can count the number of duplicate values using the count function here.
Just going to write the value. Let's say tiger, we have duplicate value over there. So we will check how many times tiger is there?
So it's going to give us the count here. So this was all about topple guys. So let's quickly move on to set now now a set is a collection.
In just like a list or a dictionary as well, but it is unordered and there are no duplicate entries present.
Now, let me show you this with an example in the jupyter notebook. So I will give my set as the set name
and inside the curly brackets we can have values. Let's say 10, 20 30 40.
I'll also give a few duplicate values just to check if we can have duplicate values are not seeing value.
Let's just said Eureka courses as you can see we have successfully declared
a set here now, let me Me try to print this now as you can see there are no duplicate values,
even though when we have declared the set it was there now. Let me try to access the values using the index numbers.
It has shown us an error which says set object does not support indexing which means a set does not have any indexes and every time we
print a set it is going to show us a random value. So this was all about set guys briefly talk about range now.
So range is used whenever we are iterating through values suppose we want to Numbers from 0 to 10.
Let me put it in a list to get the values. So what I'm going to do is I'll just write 11 over here
and it is going to give me the values in the list that is from 0 to 10. So this is all about range guys.
Now, let me take a miscellaneous example now, I'll have a dictionary with some values
again integer values now, let me try to make a list and try to get the values
from A and B as well, let's see if we can do that now when I print see here. It is going to show me
that our list C has the list a and a dictionary as well. So which shows you can actually make a list
with other data types. For example, you can actually incorporate a dictionary over there. You can also do
that with the topple or asset and if you want some value that you don't want to change the future you can actually make it a double and declare it in a list
so that you cannot change that value in the future. For example, if you don't want to access any value using the indexes
you can make it with set so that it does not have any indexes. So that is all about data types. Guys, so there is one more topic
that I want to talk about which is type conversion now suppose we have an integer here that has 10 value and we have a string as well.
Which says now when I try to add these two variables name and eggs,
it is going to show me a type error, which says unsupported operating types now for this error,
I am going to do a type conversion here. So let's quickly talk about type conversion before moving on to the example.
So type conversion is basically when you convert a type of a variable to another Data type
so we have all these functions here which will convert the data type into their respective counterparts. Now, let's try to look at the example now,
so we are getting an error here, but what if I change the data type of integer into string am I going to get the same error again or not?
Let's just see we're not going to get any errors. So this is what is all about type conversion. Let me show you one more example.
So we had a dictionary over there that is with the name be what I'm going to do is I'm going to use the list function
and specify be over there. So I have actually converted our dictionary into a list. So this is what is Type conversion all about.
Collections in Python before moving on let's take a look at the agenda for this session.
So first of all, I will be talking about what our collections in Python and then I will discuss what is the collections module in Python
and how we can use it and finally I will sum up this session with various specialized data structures that are present in the collections module.
I hope you guys are clear with the agenda Also. I suggest you to subscribe to a director channel for more exciting tutorials.
And also, press the Bell icon to get the latest updates from madurai go now. That wasting anymore time.
Let's understand what our collections in Python collections in Python are basically container data types
namely list sets topples and dictionary. They have different characteristics based
on the Declaration type and the usage as well. So let's take a look at each of them. So talking about list a list is declared
in square brackets guys. It is mutable, which means you can actually change the values once you have declared a list and it also
stores duplicate values and the elements can be a accessed using the index has now talking about double a double is ordered
and immutable in nature, which means you cannot change a value inside a double once we have declared it an audible can also have
duplicate entries present inside now talking about asset asset is unordered
and declared in curly brackets. It is not indexed which means you cannot access the elements
inside a set using the index has also it does not have any duplicate entries present as well
not talking about a dictionary a dictionary has Value Pairs and is mutable in nature which means we can change the values inside a dictionary
and we use the curly brackets to declare a dictionary as well. So these are the pythons general purpose built
in container data types. But as we all know python always has a little something extra to offer
so it comes with a python module name collections, which has specialized data structures. So let's take a look at the python collections module guys.
What is it and how we can use it. So Python programming language has for collection data types that I have already told you
which Has less double sets and dictionary but python also comes with a built-in module known as collections
which has specialized data structures, which basically covers for the shortcomings of the four data types
now connections module in Python Implement specialized data structures, which provide alternative
to pythons built in container data types. So let's take a look at those specialized data structures
in collections module. Also, you don't have to install collections like other python modules guys. It is already there inside python.
You can just import it. Writing this name collections. So I'll show you while we are working on the use case guys.
So taking a look at these specialized collection data types guys. So first of all, we have a name topple.
Then we have chain map deck there is counter order dictionary default dictionary. Then we have User Dictionary user list and use a string.
So we'll be taking a look at each of them one by one guys. So let's take a look at name topple guys.
So what exactly is named couple named Apple returns a double with named entry, which means there will be The name assigned to each value
inside a double now, if you look at the topple as in general, it does not have any any named entries, but with named Apple we can do that.
So it actually overcomes the problem of accessing the elements using the index values with named Apple.
It becomes easier to access these values since you do not have to remember the index values to get the specific elements now here is an example guys.
So this is what unnamed apple looks like guys. So let me take up to pycharm guys will try to implement
unnamed couple using the This module so we are inside the pycharm guys. I hope this is visible to you.
So first of all, what we'll do is we'll import The Collection module and from collections.
Okay, as you can see, I have not installed it anything. You can just write Collections and it will appear the so from collections.
I want to import name to play guys done. Now, what I'll do is I'll simply okay.
Let me Implement a name double first. So I'll just make it as a and use named up.
Over here and over here. I will just provide some values. Let's say the name of my name double will be courses.
I have to put it in comas case now. I have to give some names like I'll just write course name and then let's say technology.
Now. What I'll do is I'll make one more variable and I will pass this
and provide some values over here for my course name. I'll write data science.
And for technology, let's say python. Now when I print s over here, let's see what happens.
So as you can see, I'm getting the output as this courses, which is the name of My Double and over here.
I am getting the named entries for these values that I have put inside this double guys. So this is how you can Implement a name double guys.
It's as easy as it looks you just have to import it from Collections. And after that you have to implement our name double
and inside that I have provided the Name and the values that are going to be there for the table guys now,
I'll show you one more thing guys how you can actually get the value or Implement a double using a list guys.
So let's take a look at that. So what I'll do is I'll take one more variable. Let's say s now.
What I'll do is I'll just specify using this variable over here and I will use make
and over here. I can just make a list and I will provide values like let's say artificial intelligence.
And technology is going to be fighting nice. So if you're wondering why am I making this course has these courses are available at our Erica website guys.
You can check them out anytime you want. So now when I print this, let's see what is going to happen.
So I've actually used a list to get a name double guys to get the values inside a name double.
So this is all about name double guys. It's actually pretty easy and you can get named entries
for your values inside the double. So let's take a look at the next one that we have. Have which is actually dead guys.
It is written as DQ, but we can pronounce this as deck now talking about deck what actually it is used for so deck pronounces
deck is an optimized list to perform insertion and deletion easy. So when I say optimized
what it actually means is there is a way where you can actually do it very precisely and very easily
as so let's take it up I charm again and we'll try to implement this so from collections instead of named topple.
What I'm going to do is I am going to Import that guys now what I do is so let me just specify a list over here.
So I'll just write a few values here. Let's say a deer a Car Guys.
Let's see. What's happening here. So now what I'm going to do is I'm going to use a variable
and inside this I will pass this list. Let's see what we get. If I print this variable guys, so I'm getting a DQ.
I have made a deck using the list guys. So let me show you the operations that we can perform in this.
So first of all, let me open the value or add a value guys. So what I'll do is I'll just open a value.
So let's say append and Let's say python. Yeah, so now when I print this you will see the different guys.
So we have a deck over here. And after that I have appended a value or inserted a value using this append function guys.
So which means I have added the value at the end of the day now if I want to add it like before the deck guys,
like in the beginning of the deck, what I have to do is I'll just have to use this method
which is opened left. So now we'll see what is going to happen guys.
So this value python is actually inserted in the beginning of the deck similarly for removing a value.
What I can do is okay. I'll just Now we have added this value. Let's say I want to actually remove this value.
So what I'll do is I'll just write the dot pop and let's see what happens.
I'll print it again. So as you can see from the value from the end of the deck is missing now,
if we have actually removed it from the deck using the power function, but let's see if I want to actually remove this value.
How am I going to do it? I'll just write pop left guys and as you can see See the value python is also missing here.
So this is an optimized version of insertion and deletion guys using the deck.
So this is all about dat guys. Now, let's talk about the next one that we have which is a specialized data structure office lie,
and that is chain map. So chain map is a dictionary like class which is able to make single view of multiple mappings.
So it basically returns a list of several other dictionaries suppose. You have two dictionaries suppose.
We have two dictionaries with several key value pairs, so This case Jane map will make a single list
of both the dictionaries in it. So as you can see in this example, we have two dictionaries A and B.
And if I use the chain map, it will return me a single view of these two values
or multiple mappings. So let's take it up to pycharm guys will try to implement this again. So I'll remove this and instead of deck.
We are going to use or we are going to import chain ma'am guys, so it's very simple.
So let me declare two dictionaries guys. So first of all, I We'll give a value. Let's say 1
and Eureka then the second key value pair is going to be lets say python.
Now, let's take one more. And inside this I will give the value. Let's say ML.
And the fourth one is going to be lets say yeah now using the chain map.
I'm going to specify these two dictionaries in this. So let's print a one.
Let's see what And so as you can see, I have made a chain map which has a single view for multiple mappings,
which is a and b guys. So this is what you can do using the chain map guys. I hope you understand this.
So this is a very basic example guys to let you actually understand what is happening over here.
So we are using these two dictionaries and we are able to get it inside a single view guys.
So let's take a look at the next one that we have which is counter guys. So Counter is also like a dictionary subclass,
which is used to count hashable objects. Now, what are hashable objects? So let's take a look at this example.
So let's say we have a list inside this we have different elements. So what counter is going to do is okay.
Let's take it if I jump to understand this better guys, so I'll remove this and instead of chain map.
Let's say I have come to so let's take a list guys. So I will specify some duplicate values
because This is what it is used for to count the hashable objects guys.
Now what I'll do is I'll make one variable and use the counter in pass a over here.
So when I print C now, let's see what happens. So as you can see,
I'm getting a dictionary inside which I have these values so which is saying the number of times to has occurred is
five number of time for has occurred is 3 and then again 1 2 and all
so when I run this again I'm getting the same value so this is how you can actually use counter guys
to count the hashable objects inside any I travel value so we have a list we can you do it for any other
I travel object guys like a double or set so this is all about counter I hope you understand this now in addition
to the operation you can perform on a dictionary counter has three more operations that we can perform so
which are basically an element function a most common function and a subtract function as well so we'll talk about at them
in detail now so talking about the element function guys so let's see what I women's does so we'll see elements now
so I hear we want the list so we will put it in the list Constructor guys and let's print this
Okay, let's see. What are we going to get? So it returns a list containing all the elements in the counter guys.
So as you can see, I'm getting all the values that I have inside the counter and this is the counter that I have.
So to comes five times one comes two times and then we have 3/2 times 4/3 times and so on.
So this is the function of elements function which is returning a list containing all the elements
inside the counter and now let's take a look at the next function that we have which is the most And function
so let's get on to it. So we'll use the C which is our counter guys. So I'm going to use the most common here now.
So let's see what I will get here. So I'm actually getting a sorted list with the count
of each elements inside the counter. So we have 2/5 times 4/3 x +
1 2 X 3 2 times 5 2 x + 6 one time. So this is actually
how you can use the most common function and then we have one more function which is subtract guys.
So Subtract, let me get one more variable. So I want to subtract let's say
so I'm getting to five times. So I'll just subtract two one time
and I'll subtract six one time. So what I'll do now here is I use the counter and let me use
the subtract function guys. Here it is and I will pass sub over here.
Let's see what happens. Okay. So now when I print my counter Okay,
I will get the values the most common values again. So now as you can see 2 is coming for X here
and 6 is coming 0 times because I have subtracted using the subtag function.
So this was all about counter guys. Let's talk about the next data structure, which is soldered dictionary.
So order dictionary is a dictionary subclass which remembers the order in which the entries were added.
Basically, even if you change the value of the key the position will not be changed because of the order in which It was inserted in the dictionary.
So let's take it up to pycharm guys will implement the order dictionary over there. So I will remove all this.
And instead of counter, we will import order dictionary. Now. What I'll do is I will Implement an order dictionary.
Let's say d and now I'll add a few values. Let's say okay.
The first one is going to be e and then second one is let's d no let me print D over here
which is our order dictionary let's see what the output will be so we have an order dictionary which is saying on the first value we have e and
then so on we have Eddie wake up all the letters from Eddie recognized so this is how you can actually Implement an order dictionary guys so
let me take a look at what all functions do I have in this so I have pop update pop item get items from Key set default values clear copy keys
so let me get all the keys from this When I run this, okay, let me print this.
Now as you can see, I'm getting the order dictionary Keys, which is one two, three, four five and seven and similarly I can get instead of keys.
Let's say about all we can get. We can update Bob item. Okay, let's get items.
So the functions are actually similar to what we have for dictionary guys.
So this is all about order dictionary guys it remembers the order in which the elements were put inside the dictionary you guys.
Okay. Let me do one thing is I will change the value the first let's print this so you'll understand it better.
So now what I will do is I will change the value at 1. So instead of e let's say I want Peola and now
when I print it let's say what happens. So as you can see, I have replaced the value over there,
but since it was inserted in the beginning, like the first one was e value is not changing over there.
So this is the main reason why we use order dictionary because it remembers the order in which
the elements are being added inside the dictionary. So now that we are done with order dictionary. Let's talk about default dictionary guys.
So what basically default dictionary does is it is a dictionary subclass which calls a factory function to supply missing values?
So in general it does not throw any errors when a missing key value is called in a dictionary.
So you'll understand this better guys. So let's take a look at this example. We have a default dictionary in which we have to specify a type as well.
So let's say we have two values on the first value we have at Eureka and then we have python but instead we want to print Java there which is not actually
inside the dictionary because there is no value present. That but we will not get any key value errors
and it will instead give the output as 0 so let's take it up to pycharm guys will try to understand over there.
So let's remove all this. Now instead of ordered dictionary.
We are going to import default dictionary guys. So let's make a default dictionary.
And inside this let's specify the type as well. Now. Let's say we have the first value as
python the second value. It's a anyway car.
Now when I print this T over here, I'm getting the value as it's showing me that we have a default
dictionary which has a class into that. We have specified over here. And then we have a dictionary with the values 1 2
which has python and a director respectively. Now, let's say I want to get the value at the number three,
which is not actually present there, but I'm getting the output as 0 so I will show you the different guys
what actually happens if you do this in a normal ordinary dictionary guys, so I will Make one more dictionary.
Let's say and I'll give it some value at say. Python and Eddie Rekha now
when I print this which is not actually present inside the dictionary. Let's see what we are going to get.
We're going to get the key error guys because 3 is not actually present inside this ordinary dictionary.
But if you put it inside a default dictionary, you're not going to get this error guys. So this is what is function of default dictionary guys.
It does not show you or through any key error, even if the value is missing inside. Actually you guys so now
that we are done with default dictionary. Let's take a look at the next one that we have which is User Dictionary user list and use a string.
So these three data structures are actually same but different. So let's talk about them one by one.
So talking about User Dictionary this class acts as a wrapper around dictionary objects now
that need for this class came from the necessity to subclass directly from the dictionary.
It becomes easier to work with this class as the underlying dictionary becomes an attribute now,
Talking about the user list this class acts like a wrapper around the list objects and it is useful Base Class for other list like classes
which can inherit from them and override the existing methods or even add a few more new ones as well.
And the need for this class came from the necessity to subclass directly from list. It becomes easier to work with this class
as the underlying list becomes an attribute as well. Now talking about user string guys.
It is also a wraparound string objects for easier strings. Glassing now the need for this class has been partially supplanted by
the ability to subclass directly from string. However, this class can be easier to work with
because the underlying string is accessible as an attribute
in this session today guys. I will be covering the following topics. First of all, I'll be explaining
what exactly is an array and then I'll be differentiating between Python lists and arrays now,
this is a very common question. Question that many of us asked after that. I'll be showing you how to create arrays in Python
following which we will try to access array elements and then we will try to perform some basic operations
on arrays such as finding the length of an array adding and removing elements from it
or a concatenation slicing and looping through an array. Now, let's move on towards the first topic our first topic
for this session is what exactly is an array and array is basically a data structure guys with automatic.
What series of elements any variable that is declared as an array can hold more than one value
at the same time all values in an array have a particular address which is specified by its index number here
as you can see on the screen. I've declared a variable a as an array and I've stored values
from one to hundred in my array, which is a also make a note of the index values indexing always starts from zero
and not from one therefore a of zero holds one a of One holds to a of to holds 3 and similarly a of 99 holds hundred
when the length of my array is n the index value will be n minus 1 it is always 1 less than the length of the array.
Now. Let's move on towards our next topic for this session, which is the difference between Python lists
and arrays python lists and arrays have the same way of storing data, but there is a key difference
that you all have to note erase can store only single data type values. Whereas Lists can store any data type values.
So for example, if I have an array of integer values all values present in that array will be
integers and nothing else on the other hand. If I have a list then it can store integers together
with float and Cal's and strings Etc. Now when you try to perform some operations,
like slicing or looping it will be similar for both, but when you try to perform different operations,
like if you want to multiply your array values by 2, or you want to Divide it by 2 you can do so easily
when you have an array, but if you try to do the same with the list, it will throw an error because naturally you cannot multiply cares
and strings or divide them. So I hope you are clear with the difference between these two. So now let's move on towards the next topic
how to create arrays in Python unlike other programming languages. If you want to create a raise in Python,
you will have to import the array module now this module has all the functions that are necessary for creating
and performing Various kinds of operations on arrays to import the array module you
can use three ways first is to import the array module by its original name, which is array.
The second method is to use an alias name. This is the most widely and commonly used method as well in my demonstrations.
I'm going to be using this method the Third Way is using star from array import Star
what this does is it's going to import all that is present in your array module now,
let's go To our jupyter notebook and try to do this. Please do it along with me guys.
I'll open a new notebook and I will use the first method to import the array module
as you can see when I hit run no error has been returned, which means this is executed now,
let's try to create arrays using this method
As you can see over here. I've created an array using the first method. So I have used a red dot array of integer values
and have specified some random integer values here. The first array is the name of the module.
The second array is the array Constructor and then I've given a type code this type code specifies
what type of elements my array will hold as you can see. I've created an array. So I hope you are clear
with how to create arrays using the first method now. Let me open the notebook and try the second method the reason
to open a new notebook is because I've already imported array module in this notebook I'll rename this notebook
because I'm going to be using this method in further demonstrations as well as you can see over here
when I use import array as ARR ARR here is my Alias name
when I use this and hit run it does not throw any error now let me try to create arrays using this method I'm using it
as my data type you can use any data type of your choice
as you can see that an array has been created with some random integer values in place
of the module name array I've used ARR now let's try the third method I'll open a new notebook again
As you can see over here when I'm creating arrays using the third method. I've just specified The Constructor name
and then the type code and the value list. So now let's get back to our presentation. Our next topic for this session is accessing array elements
to access array elements. You'll have to make use of the index values each index value holds a unique element.
Like I've told you before indexing starts from zero and not from one. So therefore a of zero holds one a of One holds 2
and so on this is the normal driver still order which starts from the left hand side and moves
towards the right hand side. But here I want you all to note this point as well that negative indexing also exists.
So negative indexing will start from the right hand side and move towards the left hand side there 400 will be at a of -
199 will be at a of minus 2 and similarly one will be at a of - hundred now.
Let's go to our Jupiter. Your notebook and try to access some array elements.
As you can see over here. I've created a heading to create a heading. All you have to do is go to code select heading
and prefix your text with the number of hashes based on the heading level you want. So if I want H 1 I will use one hash
if I want H to I will use 2 and so on here, I've created a heading of H1,
so I prefixed my text with one hash now. Let me try to access some array elements.
As you can see over here when I access a of to my output is 3 let's see
where 3 is present in my array one is present at a of 0 to at a of 1
and 3 at a of 2. So therefore when I access a of two three has been returned
our next topic of this session is basic array operations here. I just want to tell you all something arrays are mutable,
which means they are changeable. So in case you want to add Or remove elements from it you can do so easily now coming back
to our presentation our first operation under this section will be finding the length of an array
the second is adding or changing elements of an array and then we will try to remove
or delete elements of an array and then guys, we will try to perform array concatenation slicing
and finally we will be looping through an array. Now. Let's move on towards the first operation to find the length
of an array you will have to make use of The Len function now this function returns an integer value
which is equal to the number of elements that are actually present in your array. The Len function takes one parameter,
which is the name of your array as you can see in the example of here. I've created some random array a
and I've given some random values as you can see. I have three values over here and when I use the Len function
and I specify the name of my array the output is 3 which is equal to the number of elements
that are present in my array. And now let's move towards our jupyter notebook and see how this works.
As you can see over here when I use the Len function and I've given the array name which is a and integer value is returned,
which is six six is the number of elements that are actually present in my array, which is a okay.
So I hope you are clear with this. So I'm next operation is adding elements to an array in case you want to add elements
to an array you can do so using the append extend or the insert function. The append function is used
when you want to add an element to the end of your array. The extend function is used when you want to add more than one elements
to the end of your array. The insert function specifically adds a new element to a particular position in the original array.
Let's have a look at the small example of these three as you can see on the screen. I've created some random array a
and then I've used the append function and I've given the value that I want to add to my array
as you can see in the output 3.4 which is the value of I've specified to the pain function.
Has been added to the end of my array which is a and then I've used the extend function.
Please make a note over here that when you use the extend function, you will have to specify the values between square brackets.
If you don't use the square brackets, it will throw an error. I've given three new values and all three values have been added to the end of my array
and then I've tried to use the insert function over here. I've specified the index number as 2
and the value to be inserted at that position as 3.5. As you can see in the output 3.4 has been inserted
at Sea of to now, let's go to our jupyter notebook and will do the same.
I'll repent my array which is a so that it's easy for us to refer to it.
Since my array holds integer values, I will give some new integer value to it.
As you can see I've given eight as the value that I want to insert in my array and eight has been added to the end of my array now.
Let me try to give some float value to this array and see what happens.
As you can see when I try to append some float value, it gives me a type error.
Therefore I can add only those values which is specific to the type of elements that are present in that array.
Now, let me try to use the extend function.
Like I told y'all when you're using the extended function, you will have to make use of the square brackets.
As you can see in the output all the values that I've specified within the extent function
have been added to the end of my array now, let me use the insert function.
I've used the insert function and the first parameter I've specified is the index value
and the second is the element to be inserted at this index position. So at index value a of to 6 will be inserted
as you can see in the output six has been inserted at a of to so I hope you are clear with how to add elements to an array.
Now. Let's move on towards the next operation. Our next operation is removing elements of an array
in case you want to remove elements from an array. Can make use of the pop or the remove function
the pop function removes the element and returns it whereas the remove function will remove it
but it will not return it the pop function can either take no parameters or one parameter the parameter.
It takes is the index value of the element to be removed. If you do not specify any parameter,
it will remove the last element from the array the remove function takes one parameter,
which is the element to be removed itself. Now, let's have a look at a small example of this
as you can see on the screen. I've created some random array a and then I've used the pop function
without specifying any parameter as you can see in the output when I do not specify any parameter
the last value present in my array has been popped and returned as well second time.
I've used the pop function and I've given some index value. Now this pop function will remove the element
that is present at this index position as you can. See, it has removed 3.1 and returned it as well.
After that. I've used the remove function. Like I've told you before the remove function takes one parameter,
which is the element to be removed and you can see in the output that the remove function has not returned any value after that.
I've printed my array and you can see all the values that are removed using these two functions
are no more present in the array a now. Let's go to our jupyter notebook and do the same.
Let me reprint my array, which is a first I will use the pop function without specifying any parameter to it.
As you can see over here when I do not give any parameter. It removes the last element that is present in my array now,
let me give some index value to it.
I'll repent my array a because I've removed an element from it now. Let me give some index value to the pop function.
As you can see when I use a DOT pop of to it removes the element which is present at a of 2
which is 6 and it returns it as well. Let me try to use some negative index value
for the pop function. It'll pop of minus one removes the last element that is present in my array,
which is 5 now. I'll use the remove function. Let me reprint my array guys,
as you can see all the elements that have been removed using the pop function are no more present in my array a like I've told you before
when using the remove function, you will have to specify the element that is to be removed here.
Let me remove it because there are two occurrences of 8 and let's see what the remove function does when I hit run remove function
does not return anything now, let me print my array and see what this present
as you can see. The first occurrence of eight has been removed, but the remove function did not return the value.
So I hope you are clear with the remove and the pop. Students now let's get back to our presentation
and perform the next operation. Our next operation is array concatenation concatenation means joining.
So in case you want to join different arrays, you can make use of the plus symbol as you can see on the screen.
I've created some random array A and B, and then I've created some random array C, which is empty also make a note
that all three arrays have the same type code and then I have concatenated a and b into my empty array
which is see. As you can see in the output all the elements present in A and B have been concatenated into my array C. Now.
Let's go to our jupyter notebook and perform array concatenation.
I'm using it as my data type you can use any data type of your choice.
To create an empty array. All you have to do is specify the type code and leave the value list empty here.
I've created an empty array D and have concatenated B and C into my array which is D. Now.
Let me hit run when I hit run all elements present in B and C have been concatenated into my new array,
which is D. So I hope you appear with or a concatenations. Let me just show you what happens
if I try to concatenate arrays of different data types. I'll just change one of my Previously created
a raise type code and I'll give it as float. Let's see what happens when I change the type code
and I try to concatenate these two arrays. You can see that I've encountered an error and it says type error
which means it cannot concatenate two arrays of different data types. So just be careful when you're concatenating arrays.
You cannot concatenate arrays which hold different data type elements.
Okay. Now let's move on towards our presentation and see what is the next operation. Our next operation is slicing an array slicing actually means
fetching some particular values from your array to do so, you can make use of the colon symbol
as you can see on the screen. I've created some random array a and I've sliced it from 0 to 3 0 specifies
from We're fetching has to start and three specifies where it has to stop
so it will start from zero. It will go on till 3:00, but it will not include the value
which is present at 3:00. As you can see in the output. I have a of 0 a of one and a of 2
that is present in my output. Now, let's go to our jupyter notebook and we will try to slice our arrays.
I'll reprint Maya radio here and then I will try to slice it.
As you can see, I've sliced my array from 0 to 5. So it will start from index number 0 it will go
to 5 but it will not include the value which is present at index number five. You can also see the same in the output over here.
Let me try to use some negative index value.
My output when I use 0 colon - to contains all the values between 0 and minus two,
but it will not include the value which is present at minus 2. Okay. So I hope you have here with this topic.
Just give me a quick confirmation before I move on. Okay, I know it says yes Shashank has a question.
He asks, what does colon colon minus 1 Min Shawshank unlike what many
of us think colon colon minus 1 does not reverse my array, but it prints a reversed copy of my array.
So let's try to do this over here. as you can see all the elements present in Array D have been reversed now,
let's print our array which is d The original array D is the same but colon colon
minus 1 has reprinted a reversed copy of my array, which is D. This method is actually not preferred
because it exhausts the memory. So I hope I've cleared your doubts Shawshank. Just give me a quick confirmation.
Okay. Shawshank says, yes. Now let's get back to our presentation and perform the last operation of this session which is looping
through an array. You all might be familiar with these two Loops, which is the four and the while Loops the for Loop iterates
over the items of an array specified number of times. Whereas the while loop iterates
until some condition is met or some condition is true when you're using the while loop you will have to keep
three things in mind one is initializing your iterator. In is to specify
a condition third is to increment your iterator. Remember that if you do not increment
your iterator your while loop will go on forever. Let's see a small example of this
as you can see on the screen. I've created some random array and then I've used the for Loop to Loop through my array.
I've used for X in a print X which means go to every element that is present in a and print it.
Let's try to do the same on our jupyter notebook.
Let me reprint my array D. Now. Let me use the for Loop to Loop through this array.
For X in a print X which means go to every element in D and print it
as you can see all elements present in D have been returned one after the other now.
Let me try to slice this array and print specific elements.
As you can see over here. I've sliced my array from index number 0 to minus 3 and I've printed only
those specific values using the for Loop. Now, let's go to our presentation and have a look at the while loop.
Like I've told you before when you're using the while loop you will have to do three things one is initializing.
Your iterator second is to specify the condition and third is to increment your iterator.
Let's try to perform looping on our jupyter. Notebooks. Please do it along with me.
Let me reprint my array d. Here I'm using the iterator as temp.
You can use any name of your choice.
As you can see over here, I've initialized my iterator to 0 and then I've specified a condition
where an I have told whenever the value of my temporary variable is less than D of to then print that value
and then I have iterated the value of temp. I can also use Temple us equal to 1
which is same as temp equal to 10 plus 1 now. Let's try to use the while loop using the Len function here.
I will use my array a so let me reprint it. here as you can see over here when I use the Len function,
my temporary variable will go to all elements present in my array a and print them one after the other.
So I hope you are clear with looping data requires
a number of ways in which it can be stored and accessed and one of its most important implementations includes
hash tables and hashmaps. So before we begin just make sure you subscribe to our Channel and hit the Bell icon.
To stay updated with all the latest Erica videos coming back towards the session we shall first begin by understanding
what exactly are hash tables are hashmaps in Python. And for that I'll be showing you guys
how to create dictionaries nested dictionaries and perform various operations on hash tables such as accessing updating
and deleting items from them. Finally. I'll be showing you guys how to convert a python dictionary
into a panda's data frame. So without any further delays, let's get started. So what exactly is a hash table or a hashmap
in python in the field of computer science a hash table or a hash map is a type of data structure that map's keys to its value pairs.
It implements the abstract or a data type. So this basically makes use of a function
that computes an index value that in turn holds the elements to be searched inserted removed Etc.
This makes it easy and fast to access data in general hash table store key value Pairs
and the key is generated using a hash function. hash tables are hashmaps and python are implemented
through the built-in dictionary data type the keys of a dictionary in Python are generated by
a hashing function the elements of a dictionary are not ordered and they can be changed so
for example a dictionary can be a mapping of employee names and their employee IDs
or the names of students along with their student IDs okay so moving ahead let's go on and see
how to create dictionaries in Python dictionaries in Python can be created in two ways one is
by using the curly braces and the second is to use the dict function so now I'll jump onto my jupyter notebook
and over here I'll be showing you guys how to create dictionaries in both these methods so the first method is by using the curly braces for that
I'm just going to give some name to my dictionary I'll say my dictionary And I'll just give some random key value pairs to this.
So I'll just give a name said Dave. And I'll specify the value of this as 0 0 1 so just
consider this to be an employee mapping with the ID numbers. So I'll give another key over here.
I'll say Deva. And I'll specify the ID to be 002.
I'll specify another one say Joe and I'll give the value as not not three.
Okay. So after this, I'll print out my dictionary.
and also the type of my dictionary and then I'll hit shift enter.
So as you can see over here, my dictionary has been printed out and the type of it is dictionary itself.
Okay. So now to show you guys how to make use of the dict function. All you can do is just specify some name.
I'll say new dictionary. And make use of the dict function. I'm not giving any parameters at first.
I'll just print out new ticked.
And the type of it as well.
Okay, so as you can see over here and empty dictionary is created since no key value pairs are supplied as a parameter
to the dict function in case you want to add the values. All you have to do is specify parameters
into that function. So what I'm going to do is copy this from here, we'll just paste it and within this function,
I'll specify these values as a parameter to this so over here, I'll just use the key value as Dave
and I will say this is equal to naught naught 1 and then Ava Which is equal to not not to now,
I'll just print out new decked. And I'll run this so as you can see over here,
I've specified the key value pairs as parameter to this function and therefore my dictionary has been created
with those parameters. So I hope you are clear with this. So now moving on towards our next topic
which is nested dictionaries. Nested dictionaries are basically dictionaries that live within other dictionaries.
So for example, consider a project within which there will be a number of teams such as the development team the marketing team sales team Etc.
These are basically other dictionaries that are contained within the project dictionary. This project dictionary
itself can be a part of the organization that has a number of projects. So I hope that gives you a clear idea
about what exactly is a nested dictionary. So now I'll jump onto my jupyter notebook to show you guys
how to create them. So all I'm going to do over here is create a dictionary which contains the employee
details a single team can have a number of employees and these employees have different salaries IDs
and Nations I'll just create a variable over here. I'll just say EMP details.
and then I'll use the curly braces within which I'll specify the main element to be employed
and this is going to contain various other dictionaries so here the first employee name will be Dave
and since each employee will have other details such as ID salary designations Etc it is going to be another dictionary
with in this dictionary so I'll just open another dictionary and over here I'll specify ID to be 0 0 1
the next detail that I'm going to specify for this employee is the salary so I'll just specify the key as salary and
I'll give some random value to this say 2000 and finally I'll specify the designation Okay,
so this was all the details for Dave now, I'll create another employee name.
So I'll move out of this dictionary and here I'll specify Ava.
So just like Dave Ava is also going to have ID salaries and designations and for that I'll create another dictionary within this
and I'll specify the same key value pairs. The ID is going to be 0 0 2 and salary I'll give some random value
say 1,000. the designation will be associate Okay.
So after this I just print out this dictionary.
So as you can see over here, I've created a nested dictionary. So I hope you guys are clear with this.
So now let's move on towards our next topic which is performing operations on hash tables. There are a number of operations that can be performed
on hash tables in Python using dictionaries in this session. I'll be showing you how to access update
and delete elements from dictionaries or hash tables in Python. So accessing values the values of a dictionary can be accessed
in many ways such as using key value pairs. Functions are implementing the for Loop now to show all this to you.
I'll jump onto my jupyter notebook.
I'll just give a heading over here say accessing values or rather healthy items.
So the first method that I'm going to show you is using the key values. So for that I'll just use the dictionary
that I've created earlier which is my decked and I'm going to say my underscore dict
and the parameter that I'm going to specify is Dave and then I'll hit run. So as you can see over here the key Dave contains
the value as 0 0 1 python also provides a number of functions using which you can access the key value pairs
that are present within dictionaries. Some of these functions are the keys function. The values function or the get function.
So what I'm going to do over here is first print out my dictionary.
Now I'm doing this only because it's going to be easy for us to refer to it. So after this, I'll be showing you guys how to use the keys the values
and the get functions. So what I'm going to do is print. My dict dot keys.
And then I'll head Run Okay, so as you can see over here when I use the keys function all the keys
that are present in my dictionary have been returned now in case I want to access all the values.
All I have to do is change this from keys to values and then hit Run Okay.
So as you can see in contrast to the previous function, the values function has returned all the values
that are present within my dictionary now, there's another function which I already told you which is get and to use function you'll have
to specify some parameter whose value you want to retrieve so what I'm going to do is print my dictionary dot get
and I'll specify the value as Ava so as you can see over here the value that's present
for Ava is not not too so I hope you guys are clear with this so there's another way by which you can access the values
that are present in a dictionary and that is using the for Loop so in case I want to retrieve all the keys that are present
in my dictionary all I'm going to do is use for X in my district
as he protects so as you can see over here my for Loop is iterating over all the keys
that are present in my dictionary and it has returned all of them one after the other now in case
I want to fetch only the values that are present in my dictionary all I can do is use the same for Loop and
within that I can specify my dick taught values function
so as you can see all the values that are present within my dictionary have been returned by the for Loop now there's
another function called as items that will retrieve all the key value pairs that are present in my dictionary so to show you
guys I'll just type 4 x 4 x in my dictionary Dot items which is the name
of the function. Sorry guys, this supposed to be X comma y
since I have to retrieve two values at a time. That is the key and the value and then I'll just print
X comma y. So as you can see over here, I have all the keys along with their value pairs.
Okay, so I hope you are clear with this. So now let's move on and see how we can actually update the values
of a dictionary dictionaries are mutable data types and therefore you can update them as and when required so in case
if you want to change the ID of some employee or if you want to add some new key value pair to a dictionary you can do it easily.
So now to show that to you guys, I'll get back to my jupyter notebook. I'll give a new heading.
I'll say updating.
So I've already created a dictionary of here and from that dictionary. I'll just change the value of Dave from 0 0 1 2004 for that.
I'll just specify my dict. And within this I'll specify the parameter as Dave.
And the value I'll change it from 0 0 1 2004. Now I want to add some new value to my dictionary.
So for that allowing going to do is specify my dict. And I'll specify a new parameter.
Say Chris. And the value I'll specify to this as 003.
Finally, I'll just print out my date.
So as you can see over here, the value of Dave was initially 0 0 1 and now I updated it from 0 0 1 2004
you can also see over here that I've added a new key value pair and the key is Chris and the value is not not three.
So I hope you guys are clear with this. Okay. So now let's get back to our presentation and see
how we can actually delete items from a dictionary. There are a number of functions that allow you to delete items
from a dictionary such as the DL function the pop function. Pop item function pure Etc.
So to implement this I'll get back to my jupyter notebook and over here. I'll create a new heading.
So the first thing that I'm going to do is use the pop function, so I'll just copy the name of my dictionary from here.
And I'll use the pop function with this. So the pop function will take one parameter
and it's going to remove that key value pair from my dictionary. So just specify Ava And I'll hit run.
So as you can see over here, the pop function has removed and return the item from the dictionary.
So there's another function called as the pop item function which will remove the last inserted element
from my dictionary. So for that all I'm going to do is specify my date.
dot pop item and then I hit Run Okay.
So as you all know the last item that I had added to my dictionary was Chris having the value of not
not three pop item has removed that and returned it as well. So to use the delete function.
All you have to do is specify DL followed by the name of the dictionary
and to this you'll have to specify the key whose value you want to remove from your dictionary. So here I'll just specify Dave and I'll hit run finally.
I'll just print out my dictionary.
So as you can see over here, all that is left in my dictionary is just one key value pair,
which is Joe having the value of not not three. Okay. So now let's move on towards the last topic
of this session which is converting a dictionary into a data frame. So before showing you guys
how to convert this let's first see what exactly is a data frame a data frame is a two-dimensional data structure
that consists of columns of various types. It is very similar to python dictionary and you can even convert a dictionary
into a Those data frame. So now to convert this. I'll get back to my jupyter notebook.
Okay. So as you all have seen previously I had created a nested dictionary containing employee names
and their details map to it now to make a clear table out of that. I'll make use of the pandas library
in order to put everything as a data frame. So what I have to do over here is import pandas.
And I'll take a new variable say d f I'm going to import the pandas Library as PD guys. Sorry, it's just an alias name so you don't have
to worry about that. So I'll just use PD touch data frame.
And over here, I'll specify employ underscore details, which was the nested dictionary which I've created earlier.
Finally, I'll just print out the data frame. So if I would have imported the pandas Library as pandas
and not as PD in place of PD over here, I should have written the complete name of the library,
which is pandas. Okay, so now I'll just hit run. So as you all can see
a clear table has been created for the dictionary, which I had created earlier.
So here is a list of all the operators that we have in Python. So first of all, we have arithmetic operators,
then we have assignment operators comparison operators logical operators. Then we have membership operators identity operators
and bitwise operators. So we will be discussing all of these operators in detail. So let's talk about arithmetic operators
at The mattock Operators are nothing but the operators that are used to perform arithmetic operations
between variables or two values. So these are the Pneumatic operator symbols that we use in Python.
So we have addition subtraction multiplication division modulus exponentiation
and flow division. So, let's take it up to jupyter notebook to understand the concept of arithmetic operators.
So let's say I have two variables X. I'm going to give this value as 10 and then I have one more variable.
Let's say why I'll give it a value. Let's say 20 now to understand the concept of our thematic operators.
What I'm going to do is First of all, I will try to perform addition between these two variables.
So I'll just write plus over here. And when I execute this I'm going to get the addition as my output now to perform subtraction.
I'm going to use the subtraction operator and it is going to give me the value as the subtraction over here.
Similarly. I can perform multiplication then I can also perform exponentiation.
So I'll use two asterisks instead of one for exponentiation it is that easy in Python guys now we will perform division.
No, we have so it is going to give me the value of the division. Now when I do the flow division,
I'm going to get the value over here as well. One more operator is left that is the modulus.
So I will try to perform modulus as well. So it is going to give me the value that is the remainder.
So this was all about arithmetic operators guys. So these are all the symbols that we can use for various purposes
like addition subtraction multiplication division Etc. I hope you are clear with the concept
of arithmetic operators. Now let's try to understand the next operator that we have which is assignment operator.
So you can imagine what an assignment operator is by the name itself that is assignment.
So we use the assignment operators to assign values to a variable or any value that we have in Python.
Right? So we have assignment operators like is equal to then we have plus is equal to so all these symbols we
have let's try to understand what all these are used for. For example, let's say we have a variable X
which has a value hundred. Now when I write this X Plus is equal to 10 it is going to mean the same
as X is equal to X plus 10. Similarly. We can write x minus is equal to multiplication
is equal to division is equal to R exponentiation is equal to now, let's try to understand these operators
or the assignment operators in jupyter Notebook. So first of all, we have is equal to as our first assignment operator.
So I will have 1 let's say I have X so I have not assigned any value to this. Let's say what happens, okay.
Let's try one more variable. I'll write this so it is showing me a name error, which is saying name a is not defined
because I have not assigned a value to it. So in Python until you assign a value to a variable it is not going
to be declared in Python. So now when I give the value to this variable, let's say I'll write 5 over here.
It is not showing any error, which means I have assigned a value to this variable. Now, let's try to understand other assignment operators.
Let's see. So what does plus is equal to Min in Python? Write this what should be the output guys.
So let's try to understand this. So when I print a I get the value as 10 so why I am getting this value
because I have assigned the value 5 over here. Then I write one more assignment operator that is plus is equal to 5.
So what is going to happen over here is it is going to be same as a is equal to a plus 5,
so we have 5 over here and we have added five more to this statement, which means we are getting the result as 10 over here.
Now, let's try to understand. And other assignment operators as well. So let's say exponentiation is equal to 5.
So, let's see what the output will be. So when I print this I'm getting the exponentiation to the value of five
since a is equal to 10 and we are doing the exponentiation until five digits. So we are getting the output as a hundred thousand.
So this was all about assignment operator. Similarly we can do the division is equal
to then we have minus is equal to so these are all the assignment operator. That we have in bitin.
Now, let's talk about the next operator that we have which is comparison operator. So comparison operators are nothing but the operators
that we are using to compare two values or objects, right? So we have comparison operators
like equal not equal greater than less than greater than or equal to and then we have less than or equal to as well.
So let's try to take an example over here. So when I use the equal operator, I am going to write the statement as just I have
written over here x is equal to Why so when I'm using the comparison operator, I'm actually using double equal to so
this is the basic difference between assignment operator and comparison operator. So let's take it up to jupyter notebook to understand
these comparison operators guys. So let's say I have two variables.
Value is equal to 10 and number is equal to 20.
So to understand the comparison operators, let me take one more variable. I'll say this will be our Boolean variable.
So what I'm going to do is I will write Val is equal to number one for I am checking is
or comparing these two values. So what exactly I'm doing is comparing these two variables
or values that we have. That is Val and number one. So when I print this compare variable
what I am going to get is either true or false, so it is going to be false because value is not equal to number so I can do this.
Miller thing I can check whether it is greater than or I can check if it is less than so when I write 10 over here
so I can similarly check if it is greater than or equal to I can check if it is less than or equal to.
So these are the comparison operators that we have in Python, which we can use to compare two values or two objects.
Now, let's try to understand the next operator that we have which is The Logical operators. So logical operators are used to combine conditional statements.
So what are the Conditional statements that we have in Python. So let's briefly talk about conditional statement guys.
So mainly we have three conditional statements in Python. We have an if statement then we have an else
if statement and we have an else statement. So I'll give you an example for better understanding so for these two variables only.
Alright if well is equal to number one print equal.
else if well is greater than number one print greater else print smaller so
what happened here is guys first of all the execution will go to F statement it will check this condition
if this statement is true it is going to print this value if this is false it is going to move to the next statement
that is the else if statement that we have over here it is going to check this condition if it is true
it is going to print this statement or if this condition is false it is going to jump to the next statement
that is the else statement and I will give one more condition so if all of these conditions Is are false.
It is going to jump to this statement and it is going to print not there over here.
If all of these conditions are false, it is going to jump to the next statement that we are going to have in the program,
but I have not written any other statements. So it is going to end the execution over here own. So this is a basic example using the conditional statements now
that we are done discussing conditional statements. Let's talk about logical operators. So I have told you
logical operators are used to combine conditional statements. So what exactly are The Logical operators,
so we have a logical and we have logical or or we have a logical not With by looking at the example.
Let's say we have two conditions over here. We have X is greater than 5 and then we have X is greater than 10.
So let's try to understand these logical operators in jupyter Notebook. Now, let's say I have two statements.
Alright X is equal to 10 and what I'm going to do is I'm going to check
if x is greater than 10. All right, and which is my logical and operator and I'll write X
is greater than 5 so what is going to happen if I use the logical and operator if both of these statements are true it is going to give
the result as true. But if one of these statements is false it is going to give me the value
or the output as false. So, let's see what happens if I execute this statement, I'm getting false because one of these statements is false.
Now when I write instead of 10, if I write 8 over here, let's see what happens
since both of these statements are true. It is going to give me the output as true now instead of and Creator
if I use the logical or operator, let's see what is going to happen. It is showing me that it is true
because when we are using the logical or operator only one of these statements has to be true the output will be true.
But what happens if both of these statements are false, it is showing me the value that is false.
But let's see what happens. If both of these statements are true. I'm getting true as well.
So one of the statements has to be true when we are using the or operator not talking about logical not operator,
but I'm going to do is I'll write not in the beginning now. I specify the condition. Let's say x is greater than 10 and X is greater than 5
this is the same statement that we have used before and for this we have got the output as false.
So, let's see when we use the logical not operator. What is going to be the output. I'm getting true as the output here
because this statement is negated over here using the not operator and we are getting the Value
that we should be getting for this statement. So this is the purpose which fulfills by using the not operator
or The Logical not operator that we have in Python. So now that we are done with logical operators as well.
Let's try to understand what our identity operators so identity operators are used to compare objects.
Now, you must be wondering what our objects here. So everything in Python is actually an object
so we can use the data types as objects as well. So let's try to understand. What are the identity operator?
In Python, so we have is and we have is not so these are the identity operators.
So what is does is it returns? True? If both the variables are same object?
For example, let's try to do this in jupyter Notebook. So what I'll do is I'll take let's say A list I will give it up some values.
Let's say 10 20 and 30. I'll take one more list. Give it the same values.
Let's say 10 20 and 30 and I'll write X is equal to list one.
So when I use the identity operators, let's say if I write X is lest one.
Let's see. What is the output that I'm going to get. I'm getting true because X is actually the same object as list
1 Now let's try to write lists one is list to even though when we have used the same values in list one and list two.
Let's see what the output will be. It is false because these are the not the same objects, right?
Similarly. I can use list one is not list too. So here I'm going to get the output as
true because list one is not exactly list to even though we have the same values. It is not going to be the same object.
So this is the concept about the DD operators now let's talk about the next one that we have is membership operators in Python.
So membership operators are used to check if a sequence is present in an object or not now to understand the difference
between an identity and a membership operator. Okay. Let's first understand. What are the operators in membership operator we have in
and then we have not in so it is going to return true. If a sequence with the specified value is present in the object
and it will return true if the sequence is not present. So let's do do this in jupyter Notebook.
We have already specified these objects. So let's try to do if x in list 1 let's see what happens.
It is going to show me that it is false because we have no values in X. So when I do the same thing with list one in list two now,
you see we have the same values over here. Let's see what the output will be it is false again.
Okay, let me do one thing. Now to check a particular value or a particular sequence.
What I am going to write is I'll check if 10 in list 1 so it is going to check
if this is going to be present over here or not. It is showing me that it is true. So what if I write like this 10 20 30
in list 2 it is false. So this is the basic difference between is
that is then identity operator and membership operators. So when I alright,
let's say It is going to check if this is present in the sequence or not. It is showing false because it is not there.
But what if I add this value over here, let's say Now when I execute the same statement,
I'm getting true because this sequence is actually present in the object now to understand the difference
between he's equal to n the identity operator. Let's see what is going to happen. What if I write lists one is equal to list
to it is showing false. I have made a change over here. So I'll do this once again,
so when I print this it is showing that it is true, but instead of is equal to if I write is over here it is going to show me false
because the Are two different objects. So this is the basic concept of identity and membership operators guys.
Now, let's understand bitwise operators. So bitwise operators are used to compare binary values
or binary numbers. So this is a rather difficult concept guys. So I will be telling you about what are binary numbers first
and then we will be moving on to the bitwise operators that we have in Python. So these are the bitwise operators like bitwise
and bitwise or so, these are the symbols used for these Operators guys, so this is actually
what happens when you are using these operators. So let's try to understand bitwise and operator first
in jupyter Notebook. So what I'm going to do is I'll just try 10 and 12.
So what is going to happen over here? Let's say it is showing me the output as eight but it is not clear why we are getting this output.
Right? So let's understand what 10 is in binary numbers. So when I write 10 in binary numbers,
it is going to be 1 0 1 0 and similarly for 12 Is going to be 1100 now
when I use the logical and operator but is going to do is if both the bits are 1 it is going to be 1
so in this case only first bit is 1 over here. So the output will be 1 0 0 0 and if we convert this
to a decimal it is going to be the number 8. So this is the concept between the binary numbers guys.
Similarly. I can use 10 or 12. So what is happening here is I have these values.
Let's say 1 0 1 0 for 10 and 1100 412 now looking at first bits here.
That is 0 0 it is going to be one. So all of these bits in the output will be 1 1 1 1 which is exactly equal to 14.
So this is the concept of using the bitwise operators where we are using the values as binary numbers.
We are comparing the binary numbers now, let's talk about left shift and right shift guys.
So this is what I write for doing the right shift. So 10 in binary numbers is 1 0 Zero,
so when I write shift these two beds, I'm going to be left with 1 0 and when I convert this to Binary,
I'm going to get the value as 2. So this is the concept of right shift guys. Now, let's try to understand left shift.
So when I write this I'm going to get the value as 40 now. Let's try to understand how I am getting this value.
So 10 if I write it in binary is going to be 1 0 1 0. So when I do the left shift,
what is going to happen is it is going to shift to values and I'm going to Get the value as 1 0 1 0 0 0.
So what is happening here? If I convert this binary number to decimal I'm going to get the value as 40.
So this is why I am getting the value for T over here. So this is the concept of bitwise operators guys.
I hope you are clear with the concept of bitwise operators. It is a bit complicated because we are using the binary numbers even
though I am telling you these binary numbers, you need not mention them while using the operators for example for these bit.
Operators all these are written over here. Let's say if you are using the bitwise and operator it will set each bit to 1
if both bits are 1 as I've shown you and then before bitwise or operator it is going to be one
if one of the bits as one so similarly for x or it will set each bit to one.
If only one of the bits is 1 and then we have bitwise not operator which is going to invert all the bits.
Let's say if we have all bits that is one it is going to convert all those bits to 0.
And then I have told you about left shift and right shift as well. So this is about operators in Python guys.
Today's session will be focusing on various Loops that are available in Python. So without any further Ado,
let us move forward and have a look at the agenda for today. So first we'll see why to use Loops.
What is the reason of introducing Loops in the programming world? Then we'll see what exactly are loops
and then we'll focus on various types of Loops that are In Python namely while for and nested.
I will be explaining you all these three loops with examples after that. I'll give you a brief summary of what are the things
that we have discussed in today's session. So let us move forward and see why we need Loops.
Now, let us understand this with an example that is there in front of your screen suppose. You are a software developer
and you are required to create a software module for payroll processing of all the employees in your office.
Now what all things you need you need. The salary of those employees the bonus then the total amount that they will get after the end of the month.
Right? So all these things for each employee you need to print so for each
of the employees you need to print all these three details now there are two ways of executing this task.
So let us see, what are those two ways. So the one way is you can actually write a logic
to calculate the total salary of each of the employees that includes all the fields like salary bonus in total
and you are going to write that logic for all the employees that are there in our office there might be hundreds of employees
that are there in your office you need to write the closet or you need to write the code for all of those employees
so this process is actually pretty hectic you need to repeat the same logic for total amount of employees
are there in the office I'm just giving you an example of three employees but what if you're have like hundreds of employees
so at that time this particular process will not work this will not only increase the size
of the code it will make it more complex and less efficient now another way of approaching this task would be you write
the logic to calculate the salary you keep on iterating that logic for the total number of employees
that are there so when this Loop runs once it will print the salary of first employee when the loop runs
for the second time it will print the salary of the second employed similarly it will keep on repeating so if you have a hundred employees it will repeat
four hundred times now what advantage we get here the major advantage that we get here
is we don't need to write the logic for each employee in order to calculate the salary In right one logic
and keep on repeating it for all the employees. So this way the size of the code get reduced. The length of the code is reduced at the same time.
It reduces the complexity makes it more efficient and even increases the speed of execution.
So this is just one example in order to show you why we need Loops. So there are hundreds of thousands of examples
that you can think of why we need Loops, right? So this is just one simple example that I've shown you in order to make you understand
why we need Loops. So let us Move forward and see what exactly are Loops. Let me explain you this with the help of the flow chart
that is there in front of your screen. Now what our loops loops basically allows us to execute
a statement or a group of statement multiple times. Let me explain you this with the help of an example
that is present in front of your screen. Now over here what happens the control comes here and check the condition.
So if this condition is true, it will go on and execute the conditional code that is here. This is nothing
but the statements that are present inside. The loop so it will execute that. And again, it will go back and check the condition.
So if the condition is still true then again, it will execute the conditional code of the statements president side the loop
and it will keep on repeating until this condition becomes false and the moment is condition becomes false the control will move
out of the loop and it'll execute the statements are a present after that Loop. Now one thing to notice here guys is
that they can be two kinds of Loops one is finite. This is actually the flow chart for the finite loops and another
can be E infinite now in infinite Loops what happened? The condition will never be false.
So at that time the control will never come out of the loop. So it will keep on repeating and it will never stop
that is what infinite Loops are. So basically the condition will never be false and do that.
The loop will be executed infinite number of times. Now, there is one more way in order to categorize Loops
that is called post-test and pretest in postage Loops what happened the controls will first enter the loop
and then in End it will actually check the condition. But in pretest Loops the control will enter the loop only
when the condition is true. So the condition is checked in the beginning of the loop and pretest Loops,
but in post-test Loop the condition is checked at the end of the loop now in Python. There are no postage Loops present.
There are only pretest Loops. So we'll focus on pretest Loops in today's session. So we'll move forward and we'll see various types of Loops
that are present in Python. So python basically supports three kinds of Loops one is by 4
and nested will look at all these Loops one by one and I'll explain you with examples as well.
So first we'll have a look at while loop. So while loop is basically used when you don't know how many I trations are required.
So let me explain you this with the help of the flow chart that is there in front of your screen now over here
what happens the control will move inside the loop only when this while condition is true
and when it is true Execute the body of the loop. And then again, it will go back and see
whether the condition is still true or not. If it is still true then again, it will execute the body of the loop and we'll keep on doing
that until the condition becomes false and the moment the condition becomes false. It will come out of the loop and executes the statements
that are present after the loop. Now. This is a Syntax for while loop first need to write while then you write the expression or the condition.
Then you give a colon and the statements or the body of the loop now why we use while loop Basically,
I've told you earlier as well while loop is used when you don't know how many I durations are required. So you don't know
how many times you need to execute the statements that are present inside your Loop. So that is the reason why we use while Loops now,
let me show you that with the help of an example. I'll open my pycharm and I'll give you a very basic example of using
while loop and after that I'm going to increase the complexity of the code. So first we'll see a very small introductory example
of while loop in which I'm going to print the integer values between 0 to That won't include nine.
So it will print 0 1 2 3 till 9:00, but it won't include nine. So let me open my pycharm and show you how to do that.
Now. This is my pycharm guys. So we're here as I have told you earlier as well. I'm going to print the integer values between 0 to 9,
but that won't include nine. So for that what I need to do is I need to First Define a variable.
Let me name it as count and I'm going to initialize value to it. That is 0 now after that.
I'm going to use the while loop and I'll write while And then I'm going to give a condition
which says that when count becomes greater than nine. It should come out of the loop.
Alright, so now what I'm going to do is I'm going to just type in print Let It Be number colon comma print count, right?
Now, I'm going to increment the value of count count equal to count plus 1.
Yep. Now when I come out of the loop, I want to print say goodbye.
Yeah looks fine. Now. Let me tell you what I have done here. I have defined a variable and I have initialize the value zero to it.
After that. I have used a while loop in which I have given a condition that says that count should always be less than nine
because I want to print values between 0 till lines which won't include nine. Let me tell you that so my condition says
that the loop should be executed only when the count value is less than 9 the moment.
It becomes greater than 9 than the control should come out of the loop. That is just a sent General syntax.
I have given a colon and then I have written a print statement that will print the count value and after that I have increased
the value of my count by 1 and finally when the control comes out of the loop. I want to print goodbye.
So let us see whether it works or not. I'm going to run it and as you can see that it works.
So we have 0 1 2 3 4 5 6 7 & 8 and finally when the control went out of the loop it has printed.
Goodbye. This is just a very A small example guys now, let me go back to my slides.
Now the example that we just saw was a very simple example, so I'll increase the complexity a bit
and I'll give you one more example. So let us move forward with that so over here, what I'm trying to do is I'm trying to code
a little guessing game. All right. So what happens in this guessing game, so there will be a random number
that will be generated between say zero to 20 and you need to Guess that number so the
but that you have guessed is less than that random number then it will print number is too small
if you have guessed the number that is greater than the random number then it will print that number is too large
and the moment you get the right answer you'll exit the while loop and you have won the game basically,
so just a pretty simple example, but this is a perfect example in order to show you why we use while loop because if you notice here,
I don't know how many I trations are required in order to guess the correct answer so at that time
while Loop is a perfect solution to this problem. So without wasting any time I'll actually open my pycharm and show you
how to execute this. So this is the code here guys. Let me explain you each and every line
that is present here. Now what happens first? I need to import a module that is called random in order to generate
a random number now over here. I've defined a variable n and I've given a value to it that is 20
because I want the random number that is to be generated should be between the range 0 to 20.
Now I've taken one more variable and I've named it as to be kissed and over here.
It should be an integer types of written NT and this logic will generate the random number that I'm talking
about and this will be generated between the range 0 to 20. So how can we generate will be generated
with the help of random module that we have imported. So it will be n random dot random
plus 1 this will actually generate a random number between 0 to 20.
So after that what happens I have defined one more variable guess and I have assigned a value
to it or initialize the value to it zero. All right. So now comes the while loop now
in while loop I have given a condition which says that the number that I have guessed
if it is not equal to the random number then enter the loop now, once you enter the loop
you need to input the new number the number that you want to guess again now if that guest number or the number
that you are guessing It's greater than 0 then again. There will be one more if condition which says
that the number that you have guessed is greater than the number that has been generated or the random number
that has been generated. Then print number is too large. And if the number that you have guessed is actually smaller
than the random number generated then print number is too small. Now there's one more condition that is else,
which means that when the number that you have guessed is less than or equal to 0 then
that means you are giving up so it will break it will come out of the loop and it will print sorry that you are giving up that's when your game gets over
and you have lost it finally if you have guessed the correct number then it will print congratulations.
You have made it. So let us go ahead and execute this and see what happens.
All right, so it asks me for a new number. So it has to be between 0 to 20.
So, yep, I'll type 10 and let's see what happens. So it says number is too small
that means it is between 10 to 20. How about 13?
All right, so I have guessed the correct number and it says congratulations you have made it now over here
as you can see that it took only two I trations for me in order to guess the correct number,
but what if it would have taken more iterations? I mean, I'm pretty unclear how many iterations it will take for me.
So that is the reason why we use while loop because we don't know how many I trations are required now we
can run this program again and I can show it to you once more. Us a new number, so I'll just type in say 14.
It says number is too large. So I'll type in 11 again. The number is too large.
That means it is between 0 to 11. So how about eight guys number is too small.
So now now as you can see that already three iterations have occurred and for the for titration definitely the random number
will be somewhere between 8:00 and 11:00. So, how about 10? n So congratulations you have made it and the control came
out of the while loop and it has printed congratulations you made it. So we'll move forward and see for Loops in Python.
So for Loop is basically used when you know, the number of I trations that are required and like while loop where you are.
Not sure about the number of iterations that are required in for Loop. You know, how many times the statement that I present inside the loops
need to be executed. So for Loop provides you with a syntax that'll include three Fields basically or you
can say three informations. So first will be the Boolean condition then comes the initial value of the counting variable
and then the incrementation of the counting variable. So as you can see it from the syntax is well
first you write for name of the variable in the range. Then you specify the range in which that variable should be
or and then you specify the range that means from which point at which point it should be executed.
So, you know, the number of iterations required then only you use for Loop now over here as you can see from the flow diagram itself,
the control comes to this and it will see the item from the sequence. It will execute the statement go back again,
and then from Um the range it will pick up the next item again. It'll execute this statement again go back and then
from the range will pick up the third item and it will keep on executing until the range becomes over
or that is the last item from the sequence. So when there are no items in the sequence, it will go on and execute the statements that are present
after the for Loop. So this is how for Loop Works guys. Now, let me just give you a very small example of
how for Loop works. I'll open my pycharm again and I'll start with a very small example,
and then I'm To increase the complexity of our code. Like I've done that in while loop now over here.
What I'm going to do is I am going to first Define a list and I'm going to name it as fruits.
So what all fruits you like guys, I'll first type in mango then I like grapes.
And finally, I'm going to write and say apple. Yep. So this is my list
which contains the three fruits mango grapes and apple now I am going to define a for Loop and over here.
What I will write I'll Define a variable safe route for fruit in fruits.
Give a colon. print current fruit and type in fruit now
when you come out of the loop just print. Again, goodbye.
So I have declared a list and the name of that list is fruits. Now that fruits list contains elements,
which are mango grapes and apple now after that I have defined a for Loop
which says that for a variable named fruit in fruits.
So this will give me the range fruits will give me the range as you know, that in the fruits list.
There are only three fruits so I know it alight rate only Thrice first for mango then for grapes,
In per Apple. So this is the difference between the violent for Loop and for loop. I know that will take only three iterations
after that print the current fruit. That's all and when the control moves out of the loop print.
Goodbye. It's pretty easy guys. So go on execute this and see what happens.
So you have the current fruit first is mangoes incomes grapes, then comes apple and then finally print goodbye.
So what I'm going to do is I'm going to increase the complexity now as I've done that in while loop as well.
So I'll show you an example first. Let me go back to my slides. So what I'm going to do in this example,
I'm going to calculate the factorial. Now one thing to notice here guys again in factorial.
Also, I know how many I trations are required because if you see if I'm calculating the factorial of 5,
and I know that I need multiplication five times first. I need to multiply 5 with 4 then 4 with 3 then 3 with 2
and then 2 with 1. So this way I require only four iterations. So I know the number of iterations required
so it's a very good example in order to show you where we should use. A while loop and where we should use for Loop.
So let me go back to my pycharm and execute this practically. So this is the code in order to find the factorial of a number
so over here what happens first? I need to input the number that I want to calculate the factorial of after that.
I've defined a variable factorial and have initialize the value to it, which is 1 now. I have defined a condition
if the number that I have entered is less than 0 then print the number must be positive
because I can't calculate the factorial. Negative numbers, right? And again, I have given one more condition which says
that if number is equal to equal to 0 then factorial is equal to 1 and then else condition says that
when number is greater than zero then I've used the for Loop which says that for I have defined a variable I in range
1 to num +1 when I write num +1 the range will be between 1 to num +1,
but it won't include num +1 so it will only be including one till Numb.
Alright, so after that would have written factorial is equal to factorial n 2.
I so factorial was one earlier than it will multiply by I I will also be 1 in the beginning
and then again, it will go back and it will become 2 similarly. It will keep on increasing until it becomes numb.
So till that time we'll keep on executing the loop and the moment it becomes equal to num. It will come out of the loop
and it will print the factorial value. So let me go ahead and execute this and show you
if it works or not. So I need to enter the number. So let's say I want to calculate the factorial of 3,
which is 6 so if I want to enter one more number, so what I can do is I can start it once more.
So what I will type I can type again for So it prints 24 which is absolutely correct.
So we'll move forward and we'll see what are nested Loops in Python. So python basically allows us to use a loop inside
and another loop, for example, you can use a for Loop inside a for Loop or you can use a while loop inside a while loop
and at the same time you can use a while loop inside a for loop as well and a for Loop inside a while loop as well.
So that is basically what is called nested Loops now, we'll have a look at the example of nested Loops as well.
Don't worry. So let us move. What an see one example of nested Loops now over here. What I'm going to do is I am going to write a code
in order to simulate a bank ATM. All right. So for that I am going to use nested
while loop and what will happen first. You need to enter the four-digit pin and then you can perform the following functions.
You can check the balance. You can make a withdrawal you can deposit some money and you can even if you don't want to do anything you can tell the machine
to return your car as well. So let me show you how it is done. I'll open my pycharm once more.
So this is the code that I've written in order to simulate a bank ATM. I'll explain you each and every lines don't worry about that.
So first line is nothing but a print statement that says welcome to iron bank of braavos ATM.
All right, and then I have defined a variable restart and I've assigned a value to it. That is why similarly chances are assigned a value
that is 3 and this is the balance that I'm going to initialize the array 67.1 phone notice
you over here. You won't get more than three chances in order to write the correct password. Now comes the while loop
which says that when chances are greater than or equal to 0 at that time.
What will do you need to enter the pin? So you need to input the four-digit pin
that you have and if that pin is 1234, then it will print that you have entered the correct pin now comes
one more while loop which says that while restart should not be in this particular topple.
That is the value of restart should not be n capital n o small n o or capital N,
so it should not lie within this particular sequence that is n capital N Ono and N,
but we know that the restart value is y so, it will enter the while loop now over here
what will happen it will give you four options. First option is in order to check your balance for that.
You need to press one to make a withdrawal. You need to press to in order to paint some cash or you need to deposit.
Is it something you need to press three or you want your card back? You need to press for so these are the four options
that will be given to you. So when you choose option 1 it will print the account balance so over here as you can see
that your account balance is and the balance that is there in your account. After that.
It will ask you for restart. So you need to input that value so that will say would you like to go back and
if you restart value lies in this particular Tuple, then it will break and it will print a Thank you statement.
But if you want to continue or you want to go back then you can press anything else apart
from small n n o or this no or capital N. So if you press any other button apart
from these it'll actually go back and in the while statement as you can see it says that it is not present here.
So it'll give you all these four options once more now after that what if you choose the another option
in which you need to make a withdrawal. So for that what will happen you need to enter the amount that you would write to draw which can be a float number.
It cannot be an integer number. So that's why we use float here. So you need to enter that value. And once you enter that value,
it will check whether it is in this particular list or not. That is 10 20, 40 60 80 100 Now by default.
It will give a restart. Why because you need to enter the amount once more. So again, it will go back and I will give you all four options
so you can choose that withdrawal option again, and you can choose a number which is present in this particular list now
when you choose withdrawal equal to equal to One at that time it will again ask you please enter the desired amount.
So this is for option two. Now when we talk about option 3, it is pretty much similar to the couple of options
that we have discussed before there is pretty much similar to that over here again, whatever the amount is
that you want to pay in the how much of amount that you would like to pay and balance plus the amount that you are depositing.
So it will print the balance that will be equal to balance plus the amount that you are depositing again.
It will ask you for restart if you press Anything apart from this particular Tuple, then it will go back to the while statement
and it will give you all these four options similarly for option for as well. Now what happens when you enter the incorrect pin,
so there's one more condition in the end, which says that if the pin that you have entered is not equal to 1 2 3
4 then it will print that incorrect password and it will decrease the chances by one. So earlier you had three chances.
If you press the incorrect pin once it'll decrease your chance, and it will make it as to If you write the incorrect password then again,
it will make it as trans requires two chances minus 1 which will become 1 and if the third time also you do the same thing,
then the chances will become zero and the moment it becomes 0 then it will print no more tries break will come out of the loop.
That's all guys. So let us go ahead and execute this and see what happens. So, please enter your four-digit pin.
So I'll just write 1 2 3 4 and give me four options, which is one for balance to for withdrawal.
I paint for to return a card. So if I want to check my balance and put in 1 so it has printed my balance which is 60 by 7 point 1 4 and
then the restart value that I was talking about. It is asking for that. Let me just make it big for you.
Yeah, would you like to go back? So if I press n here it will come out of the loop and will break
and if I press anything apart from small n capital n o small n o or capital N it will actually go back and ask gave me
all the four options that were there. So if I press y it will again give All the four options that are there you can see that press 1.
So again, if I want to make a withdrawal, I will press to how much amount that I would like to withdraw say I want to withdraw 10.
So my balance has reduced from 67.1 for 250 7.14. So would you like to go back?
So I'll again press Y and it will give me all four options. If I want to paint something that is I want to deposit something and press three
how much amount that I would like to deposit. I'll say 10, so my balance became again 67.1 One for again.
It is asked me would you like to go back? No, I don't want to go back so I can type in N so, yep.
So it says thank you and again asking me for 4-Digit pin. So let me show you what happens.
If I die the incorrect pin say if I write one one one incorrect pin, if I write that pin again again incorrect again incorrect.
So we have no more tries. It'll come out since I've exceeded the chances that I was given. So I was given three chances I couldn't write the I've been
in those three chances. So at will come out of the loop and it will stop so this is an example of nested
while now, let me go back to my presentation and I'll show you an example of for loop as well. So this is an example of nested for Loop.
So over here, what I'm going to do is I'm going to write a code in order to print the Pythagorean number
between a particular range. So what happens is suppose if I want to enter the number 20,
that means I want the Pythagorean numbers between 1 to 20. So Pythagorean numbers are nothing but the integers
which satisfy a square plus b square is equal to C Square. So at that time it will print all the Pythagorean numbers
that are possible between one to twenty three four five. You can see the three Square for square is equal
to V Square 9 plus 16 is equal to 25 similarly. It goes for 5 2013 6
8 10 8 1579 1215 similarly for 12 16 and 20.
Don't worry guys. I'll go back to my pycharm and I'll explain you how you can do that. So this is the example of a nested for supposed over here.
I need to import certain modules in order to use the square root function. So from math module,
I am going to import the square root function after that last me for the number in the example
if you can remember in the slides where I've written 20, so that's printed the Pythagorean numbers between 1 to 20 that same number It'll ask me
and it will print the Pythagorean numbers between 1 to n. So whatever the number n that I'm going to put in or given input.
After that, lll run a for Loop and it will say that for a which is a variable in range 1 to n plus 1
that means 1 to n that means 1 to n plus 1 but don't include n plus 1 after that.
There's one more variable B, which is in the range a comma n that will not include n it
will only include till n minus 1 so the square root C Square. I've defined one more variable C square is equal
to a exponential to What a ^ 2 similarly B raised to the power of 2.
All right, and then what I'm going to do is I'm going to calculate the square root. And then what I'm going to do is
I'm going to Define one more variable C and it will be an integer that will be the square root of C Square.
So if that c square is minus C square is equal to equal to 0 then print ABC.
It's pretty simple logic guys. Okay, I'll explain it once morning. So this is an example of nested fought so over here.
What I'm going to do is I'm going to first import the square root function from the math module.
I have to that I am going to input a number. So if you can remember in the slides have given it as 20 so it will print the Pythagorean numbers
between 1 to 20 over here. Also, I will print the Pythagorean numbers between 1 to n. So whatever the value of Nu input
that will be depending upon it. So the Pythagorean numbers will be depending upon the values that you input. So it will be printing
the Pythagorean numbers present between After that, I'll run a for Loop, which says that for a should be in the range 1 to n plus 1
that will not include n plus 1 guys. It'll only include n so 1 till n plus 1 but don't include n plus 1
After that, I've defined one more for Loop which says that for be in range a comma n it won't include n it will be tell only n minus 1.
I've defined one more variable here, which is equal to C underscore square that is equal
to a square plus b square. Now after that have defined one more variable C
and this will be actually the integer of the square root of the C underscore Square.
All right, so whatever value that you will get here. Square root of that value will be converted to an integer value
and will be assigned to see now one. If condition I will be using here which says that if C underscore
Square minus C square is equal to equal to 0 then print ABC
that means that will be a Pythagorean number. So this is a pretty simple logic guys.
Alright, so I hope you have understood the coda explain to you here now. Let us go ahead and execute this and see what happens.
Yeah. So the first number that I'm going to type in say five iron will give me all the Pythagorean numbers present between 1 to 5.
So we have only one Pythagorean number that is 3 4 5 in that range now. Let's execute this once more and I'll type in 10 here.
So we have to Pythagoras number. There are three four five and six eight ten similarly. If I execute it, once more and a type in a big numbers say 25.
Yeah, we have these many. Bye to Grandpa numbers between 1 to 20 fights will again go back to our slides
and we'll have a look at one more example. Now in this example, I'll actually be using a for Loop inside a while loop.
So what is this example, I want the bulk reservation of train tickets. So I have like group of people who are traveling somewhere
and I want to give their details such as name age and sex I want that to happen in bulk. I don't want to give it one by one.
I just want it to happen in bulk. So for that what I am going to use is I'm going to use a for Loop inside a while
as I told you earlier is where you can even use a while loop inside a for Loop. But for now, I'll use a for Loop inside a while loop and see what happens.
So let me go back to my pycharm. So this is the code in which I will be using a for Loop
inside a while loop the first I have defined a variable traveling so in which you need to input
whether yes or no, so if you are traveling you'll say yes, obviously and then we'll have a while loop which says
that while the condition is traveling equal to equal to yes. That means if you're willing to travel enter
the number of people who are traveling so you need to enter the number of passengers that are traveling
and that will be assigned to a variable num now they'll be a for Loop which says that for Num in range 1 to num +1
but it won't include num +1 enter the name and age and finally
whether the person is male or a female and then print all those values now
one more thing here is again it will ask you whether you have missed someone or not so you need to input
that whoops forgot someone so at that time you can write in yes if you have forgotten someone that again it'll execute the loop again It'll ask you
the number of people traveling in all these details if you ripen anything apart from yes that means you have not forgotten anyone
and it will come out of the loop so it is a very small example but a very good example to understand how
for Loop can be used inside the while loop so let me go ahead and execute this whether you're traveling I would say yes I am traveling
number People traveling I would say three name is sort of Ages 78 male.
Alright. So again, it is ask me for one more name. So I will say Neil.
Age is 90. male or female Male,
yep, so one more name I need to type in say I would type in Java tea.
AJ is 98 Male female female and Yap.
It will print all those details for me. So now it is asking have you forgotten someone
so if I type in and say yes, then it will again Ask me the number of people traveling
that means it is again executing the while loop. So if I would say the number of people traveling is one
and I would type in the name of the person that was traveling so I would just say Siddharth whose age is 77
and he's a male. Yep, again, it has asked me. So if I type in anything apart from yes say
if I type n so, yep, it'll come out of the loop. And this is how you can actually use a for Loop inside a while loop.
So let me just open my slides. And yeah, so this was an example of a for Loop
inside a while loop. So let us move forward and I'll give you a brief summary of what all things we have discussed till now.
First we saw why we need Loops. We actually use the example of software module for payroll processing in which I showed you two methods.
The one is manual and the another one in which you are using Loops after I told you what exactly are loops
and we saw various types of Loops in Python namely while for and nested then we focus on each
of these Loops we started with while loop and I explain to you where to use by loop I gave you two examples of
while loop similarly for for loop I explain what is that least four Loop how it works. It's Tags and two examples again perform a loop
when you talk about nested Loops again. I've explained you the syntax how to use it and I've given you three examples for nested Loop
is well, let's take a look at the agenda for this session.
First of all, I will start with star pattern programs and the patterns include pyramid half pyramid are
glass dementia patterns Etc moving further. I will discuss pattern program with numbers.
So instead of asterisk will be Using the numerical values in the patterns and finally I will explain a few pattern programs with characters
or alphabets in them. I hope you are clear with the agenda. Also, don't forget to subscribe to a director
for more exciting tutorials and press the Bell icon to get the latest updates from Eddie. Wake up. Now without wasting any more time.
Let's take a look at the star pattern programs that I will explain in this session. So I'm going to start
with star pattern programs in which I'm going to show you how you can play with the concept and make other patterns like half pyramid triangle.
Glass bad didn't diamond pattern and inverted pyramid patterns as well. So let's take it up to jupyter notebook
and I'll show you how you can make Star pattern programs and we are going to start with the simple pyramid program first.
So now we are in the jupyter notebook guys. I'm going to start with the simple pyramid program.
So I'll write pyramid over here. And in this I'm going to take one function and I will name it as pattern inside this
I'm going to pass n because this is going to be our number of lines which I want in the pattern and for blank Cases,
I'm going to take one variable. That is K. I'll show you what it does and we're going to use a lot of for Loops inside this so
if you're not familiar with loops in Python, I suggest you to check out other tutorials on a deal breaker for Loops in Python
so that you will be able to understand this better. And I'm going to take one for Loop here for I in.
This is going to be the loop for our outer rows. So I'm going to take this as range 0 to n
and I'm going to take one more Loop, which is for J in range. And this is going to be our Loop four columns.
And I'm going to take this as K over here. Now. I'm going to print some blank spaces over here.
So for this I'm going to write this and is equal to and after this I have to decrement the value of K,
and I'm going to take Take one more for Loop inside this I'm going to specify the range 0 to I plus 1.
Because you're going to move in the forward Direction while printing the pattern that we have. So inside this I'm going to print the Aztecs pattern
which is the star pattern also. And end is equal to this now one more important point you
have to print backslash or backslash n in order to get the pattern right?
I'll show you what happens. If you don't do that now, we're done with the pattern function over here. I'll just call pattern
and inside the red specify 5 and when I run this, I'm getting a pattern which is a pyramid. Pardon.
So instead of backslash n if I write backslash R, the pattern will look something like this and
if I just comment this statement lists, Get the output that varies. So we're getting the output somewhat like this.
If you want to get your pattern, right you're going to have to write it like this. And this is how you can make a simple pyramid
pattern program in Python. So you can see this. This is the variable that I was talking about to specify the spaces.
So what if I write it as let's say n minus 2 the output will move to the left side and
if I write it as n Look at this. So this is what happens when you play with the space over here.
So I'll just write it as 2 into n minus 2, so we are getting the pattern somewhat like this. So instead of 5 if I write 10 over here.
I'll be getting a much more bigger pattern with a pyramid shape. And this is how we can write a simple pyramid pattern.
So let's take a look at the next program that we have which is the inverse pyramid.
So by now, I think you have got the idea of how we are doing this so for printing the inverse pyramid,
you're going to go from Back to the starting. So we'll start with this one first and we'll go
in the backward Direction. So that will get one in the end. So we will get the inverse pyramid then so let's take a look at how we're going to do that.
I'll just take a function like I have done before and inside this I'm going to specify the space as well,
which is 2 into n minus 2. And I'm going to take a for Loop.
So for I in range this is where the magic happens guys. You have to specify an over here
because we're going the backward Direction and minus one and we'll take the step as minus one as well.
And if you're not familiar with the range functions, please do check out the other tutorials on a diwaker for better understanding guys.
We have a full video on Range function as well and I'll take another for Loop for columns as well.
So in this I am going to go with the back our direction as well step is going to be minus one.
And now I have to print and is equal to this now.
I have to specify our increment in the K variable because we're going the backward Direction.
I'm going to take one more for Loop and for J in rain this time, you're going to go with the normal flow,
which is I plus 1 And in this I'm going to print my asterisk.
And after this I have to just print the backslash R so that my output will not be distorted
and it will print of perfect pattern. So when I call my function pattern over here and let's just say I write it as 10.
Okay. I have an invalid syntax over here. Sorry guys, we're getting an inverse pattern right here.
So in this you can see the output is towards right? So what I'll do is I'll just remove this
and you will see the output is just like the other one the pyramid and we are getting the Most pyramid right now.
So the approach that I followed was I was starting from the end which I got over here
and I got back to the backward Direction and in the end I'm getting the one stop. So this is how you write a simple program
for inverse pyramid. Let's take a look at the next pattern that we have which is all right, start patent program.
So we are going to follow the same approach right here. Let me just write right start button.
So in this I am going to follow the same protocol. I will specify a function pattern inside the cell specify n
and now what I'll do is I'll just write for I in range.
0 to n for J in range 0
+ I + 1 that we have written before as well. Now, what I'll do is I will print my asterisk
can any of you guess right now which I had and I'm going to make because I'm not sure if everybody is familiar with the pattern right start pattern.
It's going to be looking like a triangle but mention in the comments if you had guessed right
and specify one more outer rows function because we're going to get failure.
Unique pattern in there. So we need to Outer Loops for Rose and two outer Loops for columns as well.
So I in range. I'm going to specify the range as n 0 and minus 1 the step
is going to be minus one. And inside this I'm going to specify for J in the range 0
and we're going to follow the same approach. That is I plus 1 after this.
I'm going to print asterisk again. And is equal to this.
Trent backslash R. Don't forget the backslash R guys. So if you have any problems in your pattern just look
at the print statement where you have specified backslash R. Now when I call my function pattern over here,
I'll specify tan again. Okay, I'm getting the pattern somewhat like this. OK we are not getting the output as I had expected.
So I'll just do one thing instead of 0 over here. I'll specify minus 1 so when I run it again,
I'm getting the perfect right start baton. So this is how you write a program for a ride. Start pattern in Python and let's take a look
at the next program that we have which is a left start pattern.
So for this I'm going to take pattern again specify an and after this I am going to take one variable for spaces
because we are going towards the left side. So what I'll do is I'll just write K is equal to 2 into n minus 2.
And again, I will take a loop for outer rows and sizes will specify the range as 0 and N minus 1.
For the columns. I will take for J in range 0 to K. Trent end is equal to this
because we want some blank spaces over there and I will determine the value of K by K minus 2.
You can modify these values for K and all these range functions as well according to your pattern
whichever pattern you're making do experiment with these values so that you will understand how it's working.
So I'll take one more for Loop for columns again. So J in range this time. The range is going to be 0 and I
plus 1 and can any of you guess right. Now. I'm going to print the asterisks over here,
which is going to be in my pattern again. This is going to be n is equal to this
and oh, Here, I need to print backslash R. So that my output will not look distorted.
And again, I have to get the value of K. Right. So I'll write K is equal to K
minus one. Now I have to take one more.
I would to look for outer rows. So for I in range just like we did in the other program.
Okay, I'll show you why we are taking two different outer rows. So I'm printing a half pyramid until here
and after this I'm going in the backward Direction like this. So instead of doing this I am going to print
some blank spaces as well. So I'll be printing back spaces until here and then my actual program will start.
So this is why I'm taking two Loops over here. So just specify N minus 1
minus 1 and minus 1 for the step as well. And after this I'm going to take one more Loop for columns.
And inside this I will specify a minus one and step as minus one as well. I'm going to print and is equal to spaces.
The commitment value or increment the value because we are going to go in the backward Direction in this Loop
and again for J in range 0 I plus 1 and after this I'm going to print asterisk.
And is equal to this and print backslash are.
I mean I call my pattern again say 10. Okay, I have invalid Syntax for J in range.
Okay, I think I have made a mistake over here. So I'll just check my coat again. Okay, I'll make this as minus one
and move it a little further. So I'm getting my pattern right there, which is a left start pattern.
So this is how you can write a program for left start pattern in Python. And now let's take a look at the next program
that we have which is our last pattern program. So for our class pattern I'm going to print. pyramid pattern and on top of that I'm going to print
or inverse permit so that it will look like an hourglass so let's take a look at how I'm going to write that
so I will take one pattern function again specify n and I'll just go with the variables for spaces
and then for auto Rose I have a loop in which I am taking the range as n minus 1 and step
is minus one as well okay I made a syntax error
and now four columns for J in range I'm going to take the range as K 0 and minus 1
okay we'll do one thing guys I know for sure that we need an inverse pyramid
so I'll just take this code copy this and over here I'll just print this code so
when I call pattern now say five I'm getting an inverse pyramid so now I'm going
to take the code for Pyramid pattern over here and I'm going to paste this after this this goes here
so this is my art class pattern guys I'll give you how a little distorted our glass
so in our inverse pyramid beginning the six rows and in this very minute we are getting only five rows
so what I'm going to do is I'll just specify this as 0 and N minus 1 let's see what happens so
I'm going to take it as n plus 1 so now we're getting a perfect hourglass pattern
and this is how you can write our glass pattern in Python guys all you have to do is Understand
how it works. And after that you can just play with the numbers and the spaces and you can make any pattern
that you want. So now that we are done with our last pattern. Let's take a look at a half pyramid pattern
that we have in Python. So it's very easy guys. I'll just take one pattern function specify an over here.
And in this I am going to just write for I in range whatever number that you want.
So I'll just write 0 n and for J in range The range is going to be 0 and I plus 1
and I'm just going to print my number over here. and inside this my asterisk and is equal to this and again,
I have to specify a backslash or Now when I call my pattern function Spanish attend give you have
a syntax error again, I'm sorry guys, and this is my half pyramid pattern or we can call it a right triangle pattern as well.
So this is how you can make a half pyramid pattern in Python guys. So let me show you how you can make a left pyramid pattern
so that you have to just add a simple code in which you have to specify the spaces like we have done in the other programs also,
so I'll just copy the whole code. They stood over here and four spaces.
Okay, I'll have to take a variable k 4 spaces and inside this I'm just going to specify 2 N minus
2 and after this I will have to take one more outros do and inside this. I'm going to take the range
as it's going to go in the direction 0 to n and for J in range now,
this is where K comes into picture and I'm just going to print the spaces that I want.
I think we're done. I have to determine the value of K as well.
So when I call my pattern now. Just say Phi
if you're getting a different value here. I think I made a mistake guys. Let me check the code again.
Okay, I think I've got the error guys. So let me just comment this line and see if our output changes at all.
It doesn't. And this one as well, so now we're getting the left half plane
with pattern guys. So I had made him silly mistake. So I was taking two Loops for outer rows instead.
I just have to take one. So let me just make it as then so that it will be better looking. So this is how you can make a left half pyramid pattern
in Python guys. Now, let's take a look at the next program, which is a downward half pyramid.
So we're going to go from this line to that line in a reverse order. So that will get a downward half pyramid.
So we follow the same thing. We will take a function specify any over here. And now what I'll do is I'll write
for I in range range is going to be downward Direction. So it's going to be minus 1
and minus 1 again and for J in range. This is going to be the same I
plus 1 Since you're not getting any left pattern, we just going to print the Aztecs over here.
And is equal to this. Bring back slash are now when I call my pattern function.
Let's see what I don't know. I'm getting over here. I'm getting a downward half permit pattern like this.
And if you want to make it a left downward pyramid pattern, you just have to follow this approach in which
you have to specify a range and get this variable K and decrement the value and you will get the same output
as you're getting over here. Now, let's take a look at the next topic or the next program, which is diamond pattern.
Diamond pattern in Python for this. I'm just going to take pattern again.
And after this I'll specify the spaces to into n minus 2 again for I in range I'm going to take the range as 0 to n.
And again, I'm going to take the columns which is going to be in the range 0 to K.
I'm going to print the spaces. And after this decrement the value of K. Now again,
I will take one more blue four columns, which is going to be in the range 0 and I
plus 1 and I'm going to print asterisk again for my pattern.
And is equal to this and after this I'm just going to print the backslash are now.
Let me just call my pattern function and see what happens over here.
I'm getting the pattern like this to make it a diamond-shaped pattern. I'll have to make inverse permit on the downward Direction so
that it will look like diamond. So I'll take one more for Loop for that.
I have to specify the K value again. So for this I'm going to take n minus 2 because if I take 2
and minus 2 it will look a little started. I'll show you that as well. So I'll take the for Loop for I in range now.
We doing the diamond downward Direction, so it will be n minus 1 and step. Nu minus 1 as well and for J
in range it's going to be K 0 and step is going to be minus one now in this I am going to print
and is equal to this bring the backslash r for J in range
is going to be 0 and I plus 1 again I will print my asterisk value over here
and is equal to this print backslash are so now
that we're done with the functional just print this. Okay. We are getting a very distorted image.
I'll take a look at what we are doing wrong over here. Okay, we have this one. So for this I have to specify K is equal to K plus 1 and
as you can see we are getting the diamond-shaped pattern over here and let me show you if I take the value of K as 2 into n minus 1 or n minus 2
the pattern looks somewhat like this to make it better. I have to make it as 2N + -2 should be gone.
I'll have to make a few changes over here to make it a line to the downward pattern. So what I'll do is I'll just remove two over
here and it will look like a diamond-shaped pattern right now. So now that we're done with this one. Also, I will show you a diamond star pattern.
So there is a different approach to this a diamond pattern that I'm going to show you right now.
So first, I'll write the code and then I'll explain how I have made this. So for I in range going
to specify the range has five and for J in range,
it's going to be five as well. Now. What I'll do is if I plus j or or i -
J is equal to 2 or I plus J is equal to 6 or Jay.
- I is equal to 2 so this is my condition is I have put it all in the
if statement I am going to print my asterisk and and is equal to this else print
and is equal to this I think I made a mistake over here
let me just take a look at the code again so when I print this I'm going to get the value as this
so this is a star diamond star button so what I've done here is you have to look at the picture over here
so if you take a look at the rows and columns is going to be 0 1 2 and 3 and you have to you know identify the pattern in which
you can make a statement like this so for all these values I'm printing this one so wherever we
have a as tricks over here it's going to satisfy This statement over here only then it's going to print this value.
So this is how you can make a diamond star pattern in Python guys. So now that we're done with the star pattern programs.
Let's take a look at the number pad in program. So instead of asterisk, we will have a numerical value in the patterns
and we will start with some simple numbers program.
I'm just going to take one function that is pattern. And again, I'll just write for I
in range the range is going to be 0 to n and after this I will have a variable but
before that I have to specify it over here. So let's say x is equal to 0
and inside this I'm going to increment this x by 1 now comes my program guys.
So four columns for J in range. I'm going to get the value. Was zero and I
plus 1 just like before and inside this instead of a stress. I'm going to print X. And is equal to this.
Or because we don't have spaces over here. I'll just write space now.
I'll have to specify backslash R statement.
And take okay. We'll just call our function over here.
So we're getting patents for more like this. I'll just make it as let's say seven. So we're getting the pattern with numbers
which is 1 then there is 2 2 then this 3 4 5 6 and on till 7:00. This is a very simple pattern for numbers.
Let's take a look at a Pascal's triangle pattern guys. So I'm sure most of you are familiar with Pascal's triangle.
So I'll just write the code for Pascal's triangle and inside the specify n again.
I'll have to take for I in range 0 to n.
For J in range 0 I plus 1
and inside this I'm going to print my function.
Which is I and J comma this and end is equal to this.
And after this I'll just print now I have to take one more function guys.
So my function is function and inside this I have n and K.
So my result is equal to 1 this is the logic for Pascal's triangle guys.
So I have made the function for my pattern now. I'm just writing the code. For Pascal's triangle logic.
So if K is greater than n minus k k is equal to n minus
k 4i in range 0 to K Result is equal to result into n minus.
I and so does equal to zero flow division.
I plus 1 it's John result now
when I call my pattern function specify not 10 let's say 7 so this is my Pascal's triangle guy
so basically what happens in a Pascal's triangle if you take a look at this one so some of these two numbers is going to be over here
and similarly for later purposes some of these two numbers is going to be here and these two numbers here
so this is how the Pascal's triangle will go on and for let's say 10 it will look something like this
and what's your 20 look something like this so this is how you can make a Pascal's triangle pattern
in Python guys so very simple pattern I've given you the logic also to get the third summation over here
in this position so this is how you can make a pattern for Pascal's triangle in Python let's take a look
at a half pyramid pattern with numbers guy so I just showed you a half pyramid pattern guys it's right here
so I'll just copy this code again paste it over here so getting When I call my pattern function,
let's say 10. I'm getting a half pyramid. So what I'll do is I'll just write X is equal to let's say 0
and after this I'll just mention X is equal to X Plus 1 and instead of asterisk.
I'll print X space over here and we're getting the values as 1 2 2 3 3 3 4 4 4 like that
but instead of that we can also make a diamond pattern with numbers as well.
So we'll just copy the code again. With this one. Okay. I'll just show you over here only.
So instead of asterisk. I'm going to print X and I'll specify X over here
x is equal to 0 and here x is equal to X Plus 1 same here.
I'll have 2X is equal to 0. X is equal to X Plus 1
Okay, we made a mistake guys. and we have to change X over here as well give it
a space you not do this for 10 let's say do it for 7 and this is
how you get a diamond pattern with numbers guys so you just have to change the values inside all these patterns
that I've shown you and you can play around with numbers and make different patterns as well now let me show you
one more program with numbers so I'm going to show you how you can make or descending order patterns so it's very easy guys
and just make one function with same approach and for I in Range,
I'm going to take the range as n 0 and minus 1 and again for J in range 1
and I'm going to take 1 I plus 1 again. I'm going to print Jay.
And end it with space. print backslash or Call my pattern function
specify 5 over here and you can look at this. We're getting the descending order pattern. So first of all, we have five numbers.
Then we have four then we have three two, and one similarly we can do is for 10 as well for any amount of numbers.
You can make it this as a descending order pattern, which is also a downward half pyramid pattern as well.
So now that we're done with this one. Let's take a look at and binary number pattern program guys out of all these numbers.
We are just going to use 0 and 1. So what I'll do is I'll take one. action pattern and inside this I'll take the range as
for I in range 0 to n.
Okay, I forgot to take that variable K is equal to 2 into n minus 2 after this for Jay.
In range it's going to be 0 to K. And after this I'll print this blank spaces.
Is equal to this K is equal to K minus 1.
4J in range 0 + I + 1
I'm going to print one and zero. So instead of a stress, I've just written one and zero,
so it's going to print out a binary number program. So basically what happens over here is we just
getting the output as 0 and 1. So you can use any characters instead of 0
and 1 you can use two and three and you can use just 2 or 4 or 5 or any other number that you want and we're getting the value somewhat like this.
So this is a pyramid pattern. We just binary number that is 0-1 and this is how you can make number patterns in Python.
And now that we are done with number pattern programs. Let's take a look at character pattern programs instead of numerical values.
We will have a character value inside the program and there is a little more changed you can all just to mention it.
Some variable or just like that you have to make sure that you're changing it to integer value the character number.
So first of all, let me show you the pattern for right alphabetical triangle.
So what I'll do is I'll take function name in that pattern taken over here.
So I'll take the variable X as 65 now because 65 is the as Sky value for a so for I in range 0 to n
And I'm going to take one more variable CH and I'm going to change this x
into the character variable now X is equal to X Plus 1.
It's easy for me now for and J in range 0 I plus 1 I can just print ch.
Call pattern program. Okay, let's just name it as 10. We have an invalid syntax over here.
So this is how I'm getting my pattern, so it's starting from a and going until J. Because I have specified then over here.
Let's say I wanted as 25. So we're going until why and if I do it like 26,
we're getting the whole alphabetical pattern with a to z in a triangle pattern.
So this is a very simple example guys, so I'm going to show you a character pyramid program as well.
So I'll take this same approach specify a function pattern and over here.
And inside this I'll take the value of 2 N minus 1 or n minus
2 for I in range 0 to n we have forgot to take the eggs
now we're here for J in range 0 to K print the blank space decrement the value
for K and for J in range 0 + I + 1 Now comes the CH
or character variable in which I'm going to change the X into character.
And now I'm going to print CH and is equal to this and X Plus is equal to 1
because we have not done that after this. I'll just print my backslash R again.
Now when I call my pattern function, let's see what I'm getting. So we're getting somewhat like this.
Okay, so instead of 10, let's just take seven. So we're getting a b c d e f and this is how we are going.
The values over here, so I have changed a little over here. So I was incrementing the value of x on the outer rows,
but now I have incremented the value in the columns as well. So we're getting a BC bef like that.
Otherwise, we will be getting like a BB CC c b and so on so this is a simple change that I've done in this program
so that you will be understanding better. So let's take a look at the next pattern that we have which is a case shape character program.
So I'm going to print the pattern in the shape of okay. Using the asterisk again. So I've shown you that diamond star pattern
in which I have taken if statement. So if that statement is satisfied, it's going to print or k shape pattern
which is going to look like okay shape with Aztecs in them. So I'll just write the code for this.
So for I in range, let's see 7 and 4 J in range 7 again.
So this is where the court begins and I'm going to specify if J is equal to 0 or
i - J is equal to 3 or I plus J is equal to 3 again.
I'm going to print. Asterisk, Orange Grove asterisks.
I'm just going to print a over here and and is equal to this else.
I'm going to print. And is equal to this.
and now print so we're getting the value of Summer like this.
So this character actually looks like case shaped character. So instead of a I'll just write as just again
so that you'll be understanding better. So this looks like a cake shaped character program using Python.
And this is how you can make a cake shaped character program in Python. So let's take a look at one more pattern here,
which is a triangle pattern program. So I'll just specify a function again specify an over here take
K is equal to 2 into n minus. Two again X is equal to 65 for I in range 0 to 1.
And CH is equal to character X. X plus zero is equal to one.
Now for J in range 0 to K. I am going to print blank spaces and for J
in range 0 to I plus 1 I am going to print CH and N
is equal to this print backslash or And when I call my pattern function,
I'm getting the value like this. So this is how I make a simple triangle pattern.
So let's take a look at the last pattern that I have in the session which is a diamond-shaped pattern with characters.
So we just copy this code again in this is my diamond pattern. So I'll just copy this whole code.
And over here, I'll just paste this when I run this. I'm getting the pattern somewhat like this.
So instead of numbers. I want characters. So what I'll do is I already have X over here.
So I will mention X as 65 and over here. I'll take CH is equal to character X and instead
of X will write CH. Let's see how the pattern unfolds. So we're going to follow
the same approach over here as well. So X is going to be 65 and we have ch is equal to character X and instead
of X will write CH now in my print my pattern so I'm going to take this to another level.
So I'll just write 15. So this is my diamond shaped pattern using characters guys.
Let me quickly walk you through the agenda for the session. We'll Begin by quickly understanding why we need
file handling later. We'll move on to understanding the types of files and guys.
This is very interesting next. I'll walk you through all of the concepts of how files are handle using python will be making use
of the code first approach to ensure that we understand code at every point of time will end this session by checking out
how Eddie Rekha is helping Learners across the globe so we can make sure you can get started as soon as possible.
And make your learning fun. So let's begin by quickly walking you guys through why
we require file handling. Well guys think about this situation.
You have a server running and you need to give access to someone who needs to access it remotely right
or basically you need to walk with these files in general and say you need you need to have some import
into your program where you're actually configure an input for it. Well, if I had to answer this personally,
how would I go about it? I would be using files for a lot of my deep learning models to import my data sets
into the program at all the time. So basically by doing this I'll be making use of files a lot.
So coming back to the basics again. How can we in put something into python the standard input the usual keyboard input
right so you can key in anything you want. Well, there's another case as well.
Maybe even command line arguments to input some parameters into the code, correct?
But what if you had to read lots and lots of data, which is not practical to type in at every point
of time or even that it doesn't make sense at all to type it all the time. The easiest way out of this here is to actually
store whatever input you want in one place and keep using it as long as your requirement
is met so what's the answer the answers files guys. So guys this concept is actually very easy.
I'm sure everyone who's joined will take away some really interesting stuff about python that you can practically use.
Working with fights basically opens another door among thousands and each door with python opens up to n number
of opportunities again. So now that we're good with this and we started off on a really high roll.
Let's keep it going next. We'll be taking a look at some of the types of files available in Python.
So we have images we have audio we have video we have text we have script and so much more right
there is a key difference here. I want you guys to note check this out. Windows supports all of these files that I told
and more well watch Ali unlimited to be honest. But again, I won't get ahead of myself here
because there are limitations here as well. Now check out python. There are two types of files binary and text.
So whatever is not text is binary as simple as that. So either a file gets to be a binary
which contains obviously zeros and ones or it can have A literal text well takes as
in strings or anything while it for that matter. Picks fights are structured as a sequence of lines
where each line includes a sequence of characters. And this is what we call as code or syntax.
Right and every line is terminated with a special character what we call as the EOL.
What is the EOL guys? It's the end of line character a binary file is any type
of file which is not a text file as I mentioned and because of their nature binary files
can only be buy an application that knows and understands this file system structure.
In other words, they must be applications that can read and interpret binary, right?
And now that we know what are the types of files are so we can start looking into more
of this guy's formally speaking. I think it can be Consolidated
as the operations performed on a file, right? So what all can we do?
Check this out? It's called as the crud operations. What is crowd well create read update and delete Guys.
These are the operations which can be done with files. Will again there are many Operations as well
such as copying a file changing the properties of a file or anything, but for Simplicity sake I have planned to keep
this session really easy for all of the audience. So let us dive into python now.
So let us quickly see how we can go about understanding the file handling capabilities of python check out this flow diagram to give
you a quick picture of what needs to be done first. We create a file and later.
We open that file. We work on the file. Well walking on it is basically reading or writing
or anything for that matter and lastly we close the file when we are done using it.
Coming to python now creation of a file can be done manually by the user
or through python for now. Let us consider that we will do it manually by going into the location
and creating a file say like a text file later in this session. I'll show you how easy it is to make python create the file for us.
So make sure you stay tuned till the end. So now we concentrate on
how we can open a file with python guys. It is very simple. So we have an inbuilt function called as the open function
which is used for this exact purpose. The open function takes in two parameters as seen here one is the filename
and other is the mode and this on your screen is the syntax for the open function.
So what do the two parameters mean one is the file name that you want to open?
It can be anything at this point of time, right? So it has to contain the extension of the file type as well.
So this is compulsory and important. So make sure you keep this in your mind and second.
We have the mode we know this means something that has to do with opening the file, right?
So check the check the screen. So basically these are various modes available to open a file.
We can open it in the read mode the right mode the append more and even the create mode as well pretty straightforward,
but do note that the default mode is always the read mode and guys know
that you can open a file in read mode only if it exists as well. If you try to read a file or something that doesn't exist.
Then python will greet you with a beautiful error message and in addition if you want to specify
if the file Should be handled as a binary or text mode then along with the mode as well.
We can actually push into categories for it. Check this out. So we have t for text and be for binary T
is the default value and B is for binary modes so we can have something as WT.
So what does it mean so it basically says that the file needs to be opened in the right mode and the file
that the python opening is a text file. So we're basically making the job of Been to be
really easy in this case. So check out the example code I have here for you guys.
Even if we do not give a mode as I said the default is the read mode. So these two tiny Snippets I have for you are one
and the same and yet make sure something exists before reading that guy's or else you're sure to hit that error.
So check this out, right? So F equal to open and the file name is demo file dot txt. I don't have a more here.
This is exactly equal to having the read more in the next example. And it is as simple and straightforward as that.
So now we know how we can actually create a file and open it. Right? So let's begin walking on it.
Let us start with creating on how we can actually do a read operation using python.
So the read operation is very easy guys. So basically just like all the other functions
and handling files in Python. We make use of the read function for this very purpose.
But then again, there are so many ways to read a file to so let me so let me break it down for you.
All right, so we can do many things here. We can read an entire file or read a few characters
or need a few lines or any number of characters and lines together and so on check out this Sample code here.
So we have a variable right we call it file and then we are opening the file.
It's called text file Dot txt and opening it in the read mode. Later, we are actually going to make use
of the print function to read the contents of the file and print the same on the python console.
Now similar to the previous code that I just showed you we have something slightly different here.
Can you notice that five on your screen? What do you think the five indicates your guys?
Let me help you out. So basically tells the python interpreter to read the first five characters from the file and nothing else.
Now check the old syntax. So here we don't have the five. So we are basically telling The Interpreter to read
every single valid character present in our file and print it out for us. So you got a good picture of what is happening
with the file now. Well, let's quickly take a tour in to seeing this practically.
So I'll open up my pycharm now, which I use as the IDE to work with python where I'll show you the code for all of these guys,
you can basically make use of any IDs That you're comfortable with and even the console as well.
It is your call. I am comfortable working with pycharm. So I'll go ahead with that.
So let me quickly open up the IDE and we can see the basic code to read the file.
So as you can check out I'm here in my pycharm right now importing. The OS module is the first line This currently being unused right now,
but I'm going to talk about this in the future session. So basically we are opening a file, right so we have a variable file.
We're going to open it and we providing the entire path to the file present. So here the file is demo file dot txt.
This is the name of the file W is the right mode that I already told you about. Let me quickly go ahead and run this.
That ran fine, but you cannot see anything on the output right? That is because we just opened it over out everything
that is present in the file and we just close it. So we not seeing absolutely anything here check out example
to importing the OS module file equal to open again. We are providing the same file here we had right board
and now we are having the read mode and here we're actually printing it using the file dot read again.
I will be walking you through file dot read in a second, but right now all you need to Is this will print the output
on the screen for us if I go ahead and actually run it nothing is going to be printed.
Why do you think this happened? This happened because we actually use the right mode
and we actually blanked out the entire file Quick Fix is to actually open the file
as you can see nothing is present there. So, let me type in something.
So we love Ed Eureka. Let me save that quickly minimize it go back to my pycharm.
Now as soon as I run this it is supposed to give me that exact output, which says we love Ed Eureka perfect, right?
So with absolutely three to two lines of code, you can actually print something on your screen how simple is
this guy's Let's check out the next case. So again, it's the same thing opening the file
using the read mode and then you're printing file dot read of Five Guys file dot read of five.
Right? So I actually explained this to you. So let me just go ahead and run it. We'll check the output.
We got the first five characterized UWE a blank space L&O. Let us try to make it more a nice to look at.
Let me just quickly open up the file.
Hello world. This is a perfect candidate for our example. Yep, the quicktype.
Oh save it exit back into the code. Now if I'm going to run this old code, right?
So you're going to get the entire output here. Check it out. Hello world. Perfect because we have read of blank now.
We're going to actually run this. Because we're telling The Interpreter to read only
the first five characters of the first line for us. It is just printing hello how simple is this guy's so now
that we are actually done with this. Let's quickly jump back to the presentation to see what's next.
Well guys next I want you guys to check out the syntax, right? So this is what I love about python amazing readability
and you can almost guess what it means and you can be certain of its in 90% of the time.
So we saw how to read characters now, let us look at how we can read lines.
Well read line will actually read each of the lines and give us a line by line output read line
of three will tell the python interpreter to read only the 3rd lesson. And absolutely nothing else,
but what if you wanted to return every line in the file, which is properly separated and nice to look at.
Well, you can actually use the same function only in a new form. This is called as file dot read lines function again,
let's take a quick jump back into the core so we can see this in action.
So check out example for on your screen. I have the same file demo file or text. I'm opening it in the read more and I'm using read line soon
as I go ahead and run this I will have the same output as hello world. Okay, let us step it up a little let me
just change this hello world. We love python.
and we love At Eureka so I have three lines. You're all good.
Right? So I'm going to save it close it. I'm going to come back here. I'm going to run the read line.
Again, reading only the first line cool check out example five. Now. This is where things get interesting import again.
It's all the same guys. So basically instead of the read line I have read lines over here. So the S is extra it's going to read all of these lines angle.
It is going to put it in a really beautiful way for us to see check this out. Hello world is an entity we love python is an entity
We Love Ed Eureka is another entity. That's nice to look at right so instead of just getting
a gibberish output of everything in the line separating. It actually makes a lot of sense.
So now that we're done with this another quick hop back to our presentation. So guys.
Next we need to check out our tiny concept on how we can actually Loop over a file object.
Well, this is another simple concept. So let me teach you this. We using the for Loop for this very purpose
as shown but why would we want to do this when you want to read or return all the lines
from a file in a more memory efficient way and in a faster manner you need to use a loop over method.
So the advantage of using this method is that the related code is both really simple
and easy to understand right? So, let me take another quick jump into pycharm and check the single snip it out.
So we are back into pycharm and check out this for Loop example I have for you. So again, we're sitting on the same file demo file dot txt
reading it in the mode. So for every line in our file object print read lines, so it is going to print the output for us containing all
of the documents of our file as you can see we will have Python and we love Ed, Eureka.
That's really simple. Right? And with this we are actually done understanding
how to open the files and read them in multiple ways. Next. We need to actually take a look at the write operation,
which is again, very simple and almost similar to the Reed method. Let's start Writing to a file is as simple as
using the right function guys similar to the read again. So to write to an existing file we make use of two modes
one is the append and the other is Right, which we already checked out earlier.
By up and we actually add the contents of the right to a new existing content.
And with right we just added to the blank file now. I am sure there is a question in your mind right now.
So what if the file that I'm trying to work on is not blank what if it contains some previous data
and we make use of w instead of a pen. guys this will basically delete everything in the file
and overwrite it with what you've just put and this is exactly the first example case
that I actually showed you so make sure that you use the mode very wisely in every situation right
so here's a quick example before we dive right back into code
as you can see we open a file in the right mode and we write two lines into it and we close it
it is as simple as that right now again taking you back to pycharm and let me walk you
through the code so guys we are back into pycharm right now so check out the first example I have for you import
OS already explained opening it in the mode of right so since we already have some content all of that content
will be overridden with hello world and hello Again, so we're opening it. We're using file dot right to right to content into it
and then we will close it. Let me run this again. No output because we're not printing it to our console.
How do we check if everything is walking open the demo file? Hello world and hello world again, right?
So this is exactly what we wanted. But then again this looks a bit gibberish as I told you right?
So we use read lines to actually make it look nice for us. Heading back to pycharm again.
Check out the next example I have for you. So now this is to prove that we are actually overwriting it again, which I've already told you and it is simple
but still let me walk you through this. So we are working on the same file. We using the W mode and then we are writing your
to it saying oops we have over a ton it. Run it run no output.
But in the sense the file is changed. So it says oops over it and instead of hello world and that old message
that we printed. Let me get back to the pycharm again, and this is for creation
and we'll be coming back to this in just a second. So let's quickly go back to our presentation and then we're going to be coming back to pycharm again.
So we're down to the last two concepts that we will check out in this session. The first one among that is
for us to create a new file using python. Well guys, even for the creation of the file,
we need to make use of the open method. We already know that a is used for up and
and W is he's for right and now we have X which is used to create a file.
But do know that you cannot create two files of the same name guys. So basically it means
that you cannot create a file which already exists check out the example on your screen
and you will definitely get a better picture of it right there. So you cannot have two files
with the same name test file dot txt. This is not right. So again python will give you a beautiful error message
and it won't be so beautiful at the end of it. Let me dive back to pycharm
and we can check out the example over here. Let me change this we have something else right?
So let me type header a card or text. I'm going to print new file into Ed, Eureka.
Opening it. We're opening it in the X more. So we are actually creating this file physically right mode
to write something into it and close it. So as I already know output check out the file,
whereas the file called Eddie Rekha, let us your new file of a deal breaker. So it's perfect, right?
Let me quickly head back to the presentation and we can check out what's next and then the next simple concept I have
for you guys is showing you on how deletion operation works with respect to files using python guys.
Deleting a file is very simple and straightforward will require the OSD remove function just
for this purpose. So yes importing. The OS module is a compulsion here.
I have been using it all along because it is just a good programming habit. Use the OS module
when you playing around with the file system the biggest mistake I have seen people do is
that they usually go on to delete a file, which doesn't exist again python pushes
in an error message. And that is not good at the end of the day, right?
So it is very vital to know for sure that the file exists to do this. We just check
if the path exists and if it does cool remove the file else print that the file doesn't exist.
So you cannot remove it. What does this say guys? This is a very simple case of an exception handled by the user
and this is a really good programming Habit to So all good, but can we delete a folder?
Yes, we definitely can a folder with all the content inside. It can be deleted using the rmdir command.
What does rmdir stand for it basically stands for removing directory and the parameter here is basically the path
and by the path includes the name of the folder which needs to be removed. And this is all
of the operations you can do with python by making use of files. Let me quickly conclude the session for you guys.
So we started by checking out the different types of files and why we need to use files, right?
So we also saw the different types of files again and how we can work with each of these types of files and all
of the operations involved with this as well.
Let's take a look at the agenda for this session. So first of all, I Start with the prerequisites that are python functions and then I will talk
about python decorators with a few examples. And finally I will discuss a rather complex concept
that is fancy decorators with a few examples as well. I hope you guys are clear with the agenda. Also, don't forget to subscribe
to our dear a car for more exciting tutorials and press the Bell icon to get the latest updates from Eddie.
Wake up. So without wasting any more time. Let's start our session. I'm sure most of you are familiar
with functions in Python. So let's recall some of the important Concepts that are going to To be useful while working
with the decorators. So the concepts that I want to discuss are first class objects and in a functions,
so in Python literally everything is treated as an object including all the data types
and even functions. So the functions can be passed around as arguments as well. So that is why it is called a first class object coming
onto the inner functions a function can be also declared in another function which is known as an inner function.
It also resonates Around The Decorator, so we'll get to that later. In the session, so let's take it up to pycharm and understand
how in a functions work and we will also try to return a function from a function which is actually passing a function as an argument.
So let's take it up to pycharm guys. So now that we are in the pycharm. Let me go to the presentation mode
so that the clarity will be better. So first of all, let me talk about the first class object.
So I'll just take a function named it as let's say function one and inside this I am going
to pass a variable name. So now I just want to return let's say hello.
So for this I'm going to use the string interpolation. If you're not sure about that. Please do check out the tutorial on strings on Ed Eureka
so that you will be familiar with what I'm doing here. That is the string interpolation. You'll see what it does.
Now. Let me Define one more function. Let's say Define function number two.
And inside this I'm going to pass the same argument. That is name. And now I'm going
to return using the string interpolation again. Softer this I actually want to ask how you doing.
I have to give two lines over here they should do and now I want to take one more function guys.
So I will name it as function number three. And inside this I'm going to pass function as an argument.
So here I just want to return function number 4 and inside this let's say I want to write Delano.
Now when I print this I'm going to print function number three and inside this I'm going to pass function
that is functional were one now again, I'm going to pause function number. Let's say three and inside this I'm going to pass
the function number two again. Let's see what the output is.
Okay, we have an error guys function to is missing one required positional argument name.
So we have made a mistake over here. So when I open this now, I'm getting the output as hello dear Ilana and dealer know
how you doing. So I'm actually able to pass the functions as arguments. So that is actually how we use the first class object.
We can use anything as an object in Python. Now moving on to the next example that I'm going to show you is for inner function.
So how exactly do you use in a functions. So I'm going to take one function. Let's say found
and inside this I'm going to Define one more function. So first of all, let me Give it a statement.
I'll say first function. And after this I am going to Define one more function
and this is going to be function number two, or I'll just write it as function number one.
And after this I'm going to give one more statement over here. Let's say first child function.
Now I'm going to go Define one more function. Let's say function number two.
And inside this I am going through print. Let's say second child function.
And let me take one more statement so function to and function 1 now when I print our function over here,
let's see what the output is. So first of all, we are getting first function that is the base function and then we are getting
the child function and the first child function. So this is how you can use in a functions in Python. Basically, it's a nested function.
We are using multiple functions inside a function. So we have one function over here and inside this we have
two more chai functions. So this is a basic example of a no functions and python decorators.
Is it going to revolve around this concept A Lot the first class objects and in a functions,
that is why I was telling you about this. I'm going to show you one more example, so I'm going to return a function from a function.
So basically what it means is I am taking a function as an argument for another function. So what I'll do is I'll just write function and Define
one function over here. I'll just write n and now I'm going to Define one more function.
It's a function number one. So I'm going to return let's say and Eureka.
Yes, and now I'm going to take one more function. Let's say function number two and inside this function.
I am going to return let's say python. And now let me take a statement guys.
So if n is equal to let say 1 so I'm going to return function number
one unload use this I'll tell you about this later else. I am going to return
function to so this is my function guy inside this I have two more functions. I'll show you what it does.
So I have a is equal to function inside the cell right one and now again inside this.
Alright, let's say 2 So now when I print a and let's say I want to print be as well.
You'll see what the output is. Give you have a name B is not defined. So actually I had to take be over here.
So the output is Eddie Rekha and python, so I'm successfully able to return a function from a function guys.
So I've taken these two functions as arguments and this is how we can return a function from a function.
So now that we are true with the python prerequisites. We'll talk about decorators in Python.
A decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure.
So decorators are usually called before the definition of a function you want to decorate let's take a simple example.
Able to understand how it works. So we'll go to pycharm again. I'll clear this off and okay.
Let me just put it right here. Now. I'm going to take a simple decorator example,
so I'll just Define a function. Yes. And inside this. Let's say I want to pass a function as an argument.
I'll name it I Function One. Now again, I'm going to define a wrapper function.
This is my inner function guys. And this is basically The Decorator that I'm going to use here.
I'm going to pause function again. So you'll see what it does and I'm going to print one more statement of this.
So let's just say welcome to python editor acre tutorial.
Now I'm going to return wrapper over here. And I'm going to Define one more function
and inside this function. Number two. I am going to use a print statement. Let's say pythonista.
And let's just call a function Now function number. Let's say two is equal to function one function
to so this is a very important statement guys. Now, I'm just going to call the function number two.
Let's see what the output is. So my output is hello pythonista, welcome to python editor tutorial,
as you can see inside the wrapper function over here. First of all, we are getting hello after the function
which we have right here this one function number two, which we have passed in function number one.
So this is my rapper statement guys. There is another approach to this using a pie syntax
or we can call it a syntactic sugar as well. So it basically makes it easier to use decorators
in Python guys. What I'm going to do is I'm going to make a few changes in this code and you Understand what I have done.
So after this statement that is returned rapper. Okay. Let me clear all this.
I can just write at the rate function number one, and now I'll just Define my next function
that is functional mode 2. And over here, I'll just print pythonista.
And now when I call my function number 2 the output is going to be same.
So as you can see the output is same which is hello pythonista. Welcome to python editor a car tutorial. So what I have changed here is I have changed this over here.
So I've used this pie syntax, or you can call it a syntactic sugar as well. It makes your job easier.
So this is how you can use a simple decorator in your functions guys.
So now let's try to understand the concept of decorators in Python with a few more examples. So I'm going to take a program
inside which I'm going to specify a decorator. Arguments, so I'll just take function number one.
And inside this I'm going to pass function again. Now I'm going to Define my wrapper function inside which
I will have arguments. So earlier I didn't have arguments over here. But now I am going to have arguments inside this decorator.
So I'm going to print hello again. Like I did in the last program and I'm going to call the function again.
So inside this I am going to use the arguments as well.
And after this I'm going to print the same statement. That was welcome to Erica Python tutorial.
And I will return wrapper after this I will use a syntactic sugar function number 1 I will write
and after this I'll Define my function number two and over here.
I will try to print statement. Let's say all right, we can use argument over here as well and we'll use
the string interpolation again. Yeah, then I print function number.
To I'm going to specify a name as well. Let's say the scene now my output is okay we have error
which is function one is not defined. So basically this we have made a mistake over here now,
it should work fine.
So we have hello Wasim, welcome to Erica Python tutorial. So this is a very simple example guys.
So we have actually used arguments in our decorator. Let's take a look at the next function that we have.
So I'm going to use a function in which I'm going to return values from a decorated function.
so I'll just Define function function number one and inside this I'll pass function again
and now I will Define a wrapper function with the few arguments let's say and after this it's going to work the same way
like we did so I'm going to write print let's say work
so it will show us that it work I'll return wrapper and after this I will have
that same syntactic sugar function one and I'll Define my function number two here pass name over here
and I will write print string interpolation get name and now
when I print let's say function number two with name let's say python
so what is the output that we are getting it showing it work so now that we are through with the decorative let's talk
about fancy decorators in Python are nothing but the complex features of decorators in Python and to explain this I'm going
to take a few examples like class decorator and let's talk about them one by one so we're making a reference here
so that we can use it for various purposes in the future as well so we are not using the parentheses over here
because we're making a reference to this function so I'll clear this up and we'll talk about the class decorators now
so there are two ways to decorate a class in Python the first one is is where you can decorate the methods inside a class
and there are built-in decorators like class method static method and property in Python so class method and static method
Define methods inside a class that is not connected to any other instance of a class and property is normally used to customize the Getters
and Setters of a class attribute so let's take an example to understand this so I will take a class I will make them more relatable
so I will not use functions instead I'll use let's say Square And for my class over here,
I'm going to Define few functions. So first of all, I'm going to Define an inner function and inside of self.
I am using one more variable that is side now self dot side is equal to side
and I'm going to add a property over here. So this is going to be my decorator guys.
So this is going to be my decorator. It's a built-in operator case. I show you what it does. So I'm going to Define one more function named
as let's say side and inside this I'm going to pass self and now again, I'm going to return self side
and I'm going to use one more. So this is my setup function guys,
and now inside this I'm going to use the side function and after this I'm going to use the value.
So if value is greater than equal to 0 I am going to get the side.
Is equal to Value else? I'm going to print that there is one are over here.
And now again I'm going to use property. And over here, I'm going to Define area self again.
And inside this I'm going to return the area. So I'm going to use self dot side and I'm sure
everyone must be familiar with the what is the area of a square that is Side Square.
So I'm using a double exponentiation operator over there, which is used to calculate the square.
So if I make it as 3 it's going to be a cube, but we don't need that. So I'm just going to leave it at two now.
I'm going to define a class method and it is going to have one more function. Let's say you win it.
Square and inside this let's have one movie. We will see LS and now I'm going to return.
one we are done with the so we are done with the class which has all these functions and built in class decorators,
like property class method and Setter and getter all those so I'm going to have square over here.
I'm going to be specified side as five. Now. Let's say what my side is.
Yes, and I'm going to print the area as well. So when I do this my output is 5 and 25 now,
sometimes it's useful to have a decorator that can keep a track of state. So let's take a few more examples to explain decorators
in Python in detail. So I'm going to make a Singleton class using class decorators. So first of all,
I will import found tools and after this I'm going to define a Singleton class.
So I'll name is as Singleton. Now after that,
I am going to use the function tools da traps inside this CLS.
Now comes the wrapper function and inside this I'm going to have a few arguments as well.
And after this I'm going to get the instance is equal to CLS orgs and Chaos.
I'm going to return wrapper again making a reference to the function
and not calling it but I am going to use this to make an rapper dot instance.
I'll give you making a small Arrow here.
no I'll just write rapid dot instance is equal to none and I'm going to return wrapper again
after this I have a single ton and after this I'll have class 1
I'm going to pass and let's say first is equal to 1
and let's say second is equal to one as well
And I'm going to print first s second. So let's see if we get true or false beginning a error guys.
All right. I have made a mistake over here I had to add if statement
That's why we are getting this error guys. and after this it should work fine now.
So it is actually true and we know that a Singleton class only has one instance
and there are plenty of Singleton's in Python including true none Etc. So now that we are done with the making a Singleton class.
I want to talk about nesting decorators. So in a function, you can actually use nested decorators as well.
So I'll show you the Syntax for that. So basically what you can do is you'll just write function one and you can write function to
but you have to Define all those before. That you use after that you can just Define a function name and print whatever you want.
You can use multiple decorators by stacking them on top of each other. And now let's take an example
in which I am going to take arguments in a decorator. So for that I am going to import function tools and after this I
will Define a function, let's say repeat and inside this. I'll write number now again, I will write one more function.
Let's say decorator. Repeat and after this I will pass a function
inside this and now I will make one decorator. Let's say funk tools no traps inside this I will pass function
and I'll Define one more wrapper function over here. And inside this I will pass a few arguments.
now for range number value
is equal to I'm going to return value of this
and return wrapper making not using the parentheses again,
and after this I'm going to return Deco reto repeat and again not using the parentheses.
Now, we make our decorator. Let's say repeat inside this I'll specify the number itself.
Let's say five after this. I'll Define function and inside the cell past name using a string interpolation.
We will have a name again. So Let's just say I want to print my name again,
or I can use python as well. So just write python over here. Now when I run this we should not be any errors.
So I'm getting it as python as 4 times. So instead I can use for over here you get it four times.
So this is my repeat function. So I'm using it as an argument to times also we can use it
for 20 times as well. So it is always useful to pass an argument in a decorator.
Everything in the world of programming requires a name,
but still there are a few Anonymous Mysteries Lambda functions or Lambda expressions are one of these kind of entities
that are in fact nameless. So before we begin just make sure guys that you subscribe to our Channel and hit
the Bell icon to stay updated with all the latest Ed Eureka videos coming back towards the session we shall first begin with understanding
what our Lambda functions or Lambda And why they're used following that I'll be showing you all how to write these Lambda functions
along with some user-defined functions as well as some predefined functions such as filter map
and reduce finally. We will be using these Lambda functions to solve some algebraic expressions.
Okay. So without any further Ado, let's move on towards the first topic of this session, which is understanding
what exactly are Lambda functions. Python Lambda functions are functions that do not have any name.
They are also known as Anonymous or nameless functions the word Lambda is a key word
that specifies what followers is anonymous now that you are aware of what these Lambda functions are.
Let's move on further to see why they're actually used the main purpose of anonymous functions comes into picture
when you need some function. Just once they are created wherever they are needed
due to this reason why the Lambda functions are A throwaway functions. There are also used within higher order functions
which take a function as an input or return it as an output another very good advantage
of using these Lambda functions is reducing the size of code, and I'm going to be showing you all in this session
how to do this. So now let's move on towards our next topic which is to see how to write Anonymous functions.
Lambda functions are created using the Lambda operator and its syntax is as follows the first thing
that you need to specify Phi is the Lambda keyword and following that you'll have to specify the arguments or the inputs
and finally after the colon symbol, you'll have to specify the expression that needs to be solved
Lambda Expressions can take any number of arguments. So as you can see over here, my first example is a Lambda expression
without any arguments in the second example. I've taken a Lambda expression with just has one argument
a one finally. I'm demonstrating a Lambda expression which has inputs A 1 to a n just remember
that all your arguments or inputs need to be separated by a comma so now let's move on towards our jupyter notebook and see
how we can actually write these Lambda functions. I'll just create a new notebook of here guys.
I'll just open a new notebook of here guys and I'll rename it as Lambda functions.
So guys now just let me write the syntax as a comment over here. This is going to be good for a referral purpose.
So first is the Lambda keyword like I already told y'all. Sorry guys for the spelling mistake,
Lambda and the argument. followed by the expression Okay.
So the first thing I'll have to write down is the Lambda keyword following that I'll have to specify the arguments.
So let me just give one argument to this and after that I'll just say I want to multiply this a with itself.
So this is my Lambda function but before executing this, I'll require some variable that can hold the value of this.
So I'll just specify that X is equal to this Lambda function and after this I'll say x of B and I'll hit run so
as you can see over here when I used X of 3, its return the output to be 9
so guys if I had to solve the same expression using a normal function, then I would have had to write a larger piece
of code than this. Let me just demonstrate this to you guys over here. So I'll just Define a function say new
and I'll pass the parameter as a now I'll be using return to return the value of a star a to call this function.
I'll have to use the name of the function and specify some value to the argument that I've already passed.
So in place of a I'll pass the value as for or let me take it as three itself like the previous function.
And I'll hit run as you can see over here using Lambda functions. I just required two lines of code.
Whereas while using the normal function I had to make use of three lines of code along with this return statement over here.
Okay, so guys, I hope you all have understood how to write these Lambda functions. So guys as you all have just seen
I've used Lambda expressions in the example along with some other variable X now,
I did this because these functions are nameless and Acquire some name to be called but doesn't it seem confusing as
to why a assign a name to a nameless function? And what is the need of it? It's a legitimate question guys,
but the point is this is not the right way of using Anonymous functions Anonymous functions.
Like I've already told y'all are best used with in higher order functions these functions either take
a function as an input or return it as an output to demonstrate this. Let me just move on towards our next topic
of this session. First thing that we're going to study is anonymous functions within user-defined functions.
So as you all can see on the screen, I have a user-defined function that takes the Lambda function as an input in this example over
here the normal python function which in my case is new funk takes one argument
X this argument is then added to some unknown argument which is supplied through the Lambda function.
Let me just jump onto my jupyter notebook to explain this in detail. Let me just first create a heading over here guys.
Just remember the number of prefixed ashes tells which heading it is. So if it is H1,
it will have one hash prefixed to it. If it has to then it's h 2 and so on so I'll just create a heading over here of H1 level
and I'll give the name as user-defined functions. or Lambda within user-defined functions Lambda
Within user-defined So I hope you guys know what are user-defined functions.
Okay. So as you all know when you have to create a function in Python, you'll have to use the d e f keyword followed by the name of the function.
I'll just name the function as a and I'll pass one parameter to its ax after that.
I'll be using the return statement and within this I'll specify a Lambda function.
I'll pass y as the argument to this Lambda function and I'll use X Plus y as my expression now.
Let me just give some value to the variable X and store it in another variable T So a of 4 and
a I spent the value of T of 9 or sorry eight and I'll hit run.
So as you all can see on the screen, the Lambda function that is used within the function a is called Whenever I Call
this higher order function, and the first thing that I'm doing over here is passing a value
to the variable X and then I'm printing the value of x plus y so, I hope everyone's understood this part.
Okay. Now let me just copy this function and pass a few other values to this as well.
I just ordered a new value in the variable you and I'll pass the value for x as say seven
and I'll print. Two of five and I hit run.
Okay, so I hope everyone's clear with this. If you have any doubts, please do let me know in the chat box
at my team is here to help you. Now let's move on towards the next topic
which is using Lambda functions within filter map and reduce functions. The filter method is used to filter the given iterables,
which can either be lists set Etc. Now this is done with the help of another function
which is passed as an argument to test all the elements to be either true or false after applying the function
to the set of iterables. If the value is true, then that value is returned in the output now,
let me just jump onto my Jupiter. Notebook and use the Lambda function within the filter method.
I'll just give a new heading over here again. Just for your reference guys.
I will create a heading of H2 level by prefixing it by two hash characters.
So I'll just use Lambda Within. filter and since this is a method
like I already told you all the filter function needs iterables now here, I'll just create a list.
I'll say my list. And I'll specify some elements to this.
The filter method is going to check for all the elements to either be true or false in accordance to the expression
that is passed within the Lambda function. Like I already told you all the filter method
is going to check if the expression that is specified within the Lambda function is either true or false for all the elements
that are present within my list and it returns all the elements that satisfies the expression.
So as a result, I'll have a new list. So I'll just name it as a new list. And I'll use the filter function
and within this I'll be using the Lambda function. Like I already told you all. Let me just specify the input
as a and the given expression over here. Say a I just want to check if any of these values
when divided by 3 will equate to to and I'll pass my list
and I'll pass my list as an argument to this.
And since the output is going to be a list. I'll just use the list method over here. And one more point.
I want you guys to note is the syntax of the filter function. And since I forgot to specify this before beginning
the demonstration, let me just specify the syntax of this function over here. I'll see syntax.
You have to use the filter keyword along with some function. followed by the iterables Okay, so as you can see over here,
I have the filter keyword. I have the function which is Lambda and then I've passed my list as the iterables to this function.
Now, let me just print the new list. And I'll hit run.
Sorry guys have made a spelling mistake of here. So it's fi lter.
so as you can see over here I've passed the elements 1 2 3 4 5 & 6 to this filter method and after checking
if this expression is true for all the iterables it has returned six as the output now let me just cross check over here so
if I divide 1 by 3 I will not get a result which is equal to 2 similarly if I divide 2 by 3
I'm not going to get the result as to again finally as we all know if I divide all these these elements
by three only for six I'll get the output as too so I hope everyone's clear with how to use the Lambda function
within the filter function So now let's get back to our presentation and see
how we can use the Lambda function within the map function guys. The map function in Python is a function
that applies a given function to all the iterables and returns a new list.
So I hope you're understanding what exactly it does. It takes a function as the input and some iterables as well.
And then it applies this function to the set of iterables that are passed and it returns a new list.
So now let's get back to Jupiter. And do the same I'll create a new heading of course.
And it's going to be Lambda within map. And I had to run so before moving on
towards the demonstration. I'll just write the Syntax for the map function. So it has to have the map keyword, of course.
And the parameters that are passed to it is a function and the iterables. Now, let me just make use of the same list
which I was using previously and I'll copy that over here and then I'll just store the output in a new list p
and I lose the list function since I want the output to be a list within this I'll use the map function and to that map function.
I'll pass a Lambda function as the input. I just passed one argument
to this as a and the condition I'm going to specify is to check if any element present within my list divided
by 3 is not equal to 2 and I'll pass my list as the set of iterables.
And then finally, I'll be printing this. Now, let me hit run. So as you all can see over here,
it has returned a list with some Boolean values. The expression that I wanted to check is a pi/3
not equal to 2 now. Let me just move on to my list and see what happens when I divide 1 by 3,
of course, I'm not going to get to so I have true as the output now when I divide 2 by 3 again,
I'm not going to have the outputs as to and therefore I have true as the Boolean value for this.
similarly all the elements present in my list are divided by 3 and it's going to check
if the condition is true therefore only for six is going to be false and I have the output as false
okay so I hope you guys have understood how to use the Lambda function within the map function
if you have any doubts please do let me know the chat box guys and my team will revert to you okay
now let me just jump on towards our next topic which is using Lambda function within the reduce function so
guys the reduce function is used to apply some other function that is passed as a parameter to it to a list of iterables
and finally it returns a single value and to demonstrate this I'll just jump onto my jupyter notebook again and I'll create a heading
This is going to be Lambda with introduced. And I had to run so first.
Let me just write the syntax of this function. It is the reduce keyword.
And it takes a function as a parameter. The first parameter is a function.
And second is a sequence now to make use of the reduce function.
You'll have to import the funk tools library or from that Library. You'll have to import the reduce function to do this.
I'll be using from Funk tools.
import reduce you can also directly import the funk tools Library as import Funk tools
or you can also use from Funk tools import Star these
are just the alternate ways that you can also use over here okay so now I'll be using the reduce function
and within this I'll specify a Lambda function pass
two parameters A and B and let me just print the sum of a and b.
And finally, it has to have a sequence as its input. So I'll just specify a list over here.
I'll say the list of values to be 23 5643 ninety eight and one.
Okay, so now let me hit run and see what it returns. So as you can see over here guys,
I have to 21 as my output. So what this reduce function is actually doing is it
first adds 23 256. So guys the first thing that the This function does is ADD 23 and 56.
And the output of this is going to be 79.
Now after adding these two values to this output, it will add 43 so 279.
It's going to add 43 and it will produce a new output.
After finding the output of 79 and 48 it's going to add the result to 98.
And finally it's going to add that result with one and Returns the final output, which is 221.
So I hope you guys have understood how this function is recursively adding each value to the next value
that's present in the sequence guys. If you have any doubts, please do let me know in the chat box.
Okay. Now let's move on to see how you can actually use these Lambda expressions
or Lambda functions to solve some algebraic expressions for this. I'll just go back to my jupyter notebook
and I'll create a heading over here.
Sorry guys. I'll just delete these two kernels.
And I'll create a heading. I'll just say Lambda for algebra.
So guys first we'll be taking some linear equations. So I'll just create a heading as linear equations.
So as we all know algebra, right linear equations consists of variables of degree 1 which means they'll have the power as one.
So now let's just use the Lambda function to solve some linear equations. I'll just say s is equal to Lambda.
And I'll pass the argument or the input as a and the expression I'll specify as a star a
and I'll use S of for and I hit run. So as you all can see over here 4 cross 4 is 16 now.
Let me take a different linear equation. So let me just write the linear equation over here as a comment.
So I just want say 3x plus 4y, okay,
so if I want 3x Plus 4y So I'll have to specify some name to this CD
is equal to Lambda and X & Y as the inputs. And since I want 3 star x + 4 star why?
Okay, I have 3 into X plus 4 into why okay,
and then I'll pass the values as for comma 7 and I hit run as you all can see 40 has been returned as the output
when I pass the value of x as 4 and the value of y as 7 now.
Let me take some quadratic equation.
So I hope you all know. What is a quadratic equation. It's an algebraic equation with the degree to let me
just give the heading as quadratic equation.
Okay, so now let me just try to solve the very famous a plus b the whole Square.
He plus b the whole Square so I'll just say part 2, okay.
Now, let me write a Lambda function that's going to return the value of a plus b the whole Square.
I'll just save it with a new variable X and I'll use the Lambda function and the arguments
or the inputs are A and B.
The expression that I'm going to use is a plus b and like we all know we will have to use double star
when we use powers and then I'll print this x I'll pass the values of A
and B as 3 comma 4 and I hit Run Okay. So as you all can see I found the value
of a plus b the whole Square using the Lambda Expressions.
We love shortcuts and everything and with Pythons built. function it just gets more exciting and in this session you will be learning about
three very important built-in functions namely map filter and reduce so before we begin just make sure you subscribe
to our Channel and hit the Bell icon to stay updated with all the latest Erica videos coming back towards the session
we shall first begin with a small introduction to map filter and reduce functions after which we shall take a deep look
at each of these and see how you can actually use these functions along with user defined as well as Lambda Ian's finally we shall try to put these functions
within each other and see how it works so I hope everyone's ready to start with this so let's move on
towards the first topic of this session which will be a small introduction to map filter and reduce functions
okay so let's move on the map filter and reduce functions are inbuilt functions of python
these functions enable the functional programming aspect of python in functional programming the arguments
passed are the only factors that decide upon the output these Since can take any other function as a parameter
and can be supplied to other functions as parameter as well. The map function takes another function as
a parameter along with the sequence of iterables and returns an output after applying the function to each of the iterable
that's present in the sequence. The filter function as the name says is used to create an output list consisting
of values for which the function returns true the reduce function on the other hand applies a given function to the iterable
and returns a single value. Okay. Okay, so now let's move on and take a deeper look at each of these functions
and how you can actually write them in Python. Like I've already mentioned before the map function will take a function
and a sequence as a parameter and it applies that function to the iterables that are supplied to it
as you all can see on the screen. I have a map function to which I've supplied a Lambda function as a parameter
and a list of iterables. All I want to do over here is ADD 3 to each of the iterables
that are present in this list as you all can see I'll have an output list with three added
to each iterable that's present in the original list. So now let's move on towards our jupyter notebook and see
how this works. Okay, so I'll just create a heading of here.
Okay. So before I begin writing this function, let me just write the syntax first. I'll just write it as a comment.
So basically the map function takes a function and a set of iterables as a parameter.
Now, these iterables can be either a set Tuple or anything here. The function defines an expression that is
in turn applied to the iterables. The map function can take user defined as well as Lambda functions as a parameter.
Let us first take a user-defined function as a parameter to the map function. So just create a function of here.
So I'll use the keyword DF. Okay, so I'll just name my function as new and I'll pass
a parameter as a to this and I just want to return a star a now.
I'll take a variable as X and then I'll use the map function. I'll take a variable X
which will be my map object and then I'll write the map function to which I'll pass the new function as a parameter
and the list of iterables. All I'm going to do after this is print X
just to show you all that this is a map object and then I'll print the list of x.
So as you all can see on the screen X is basically the map object and the list of X consists of all values multiplied to itself.
So I hope everyone's clear with this instead of using the list function. You can also use other functions such as Tuple sets Etc.
Let me show you what happens when I used to pull as the function over here. So as you can see previously I had an output list
and now I have an output Tuple similarly for the input iterables. You can supply anything such as lists.
Pupils sets Etc. Okay. Now, let's try to take a Lambda function along with the map function map function
can take more than one list of parameters as well. Let's see what happens when we try to do that.
So I'll just copy the severe and I'll paste it and I'll pass another list as a parameter.
I'm going to make a small change to the function of here. So I'll pass two parameters. So I'll say a comma B and I'll say a star B now.
I'll hit Run Okay, so as you all can see on the screen these values present in the iterables have been multiplied
and I have a resulted to bill. So I hope everyone's clear till here. If you have any doubts, please do let me know in the chat box
and my team is here to help you. So now let's see how to use Lambda functions along with the map function Lambda functions
as we all know are functions that do not Have any name they are also known as Anonymous
or nameless functions. These functions are generally provided as an input to other functions.
So now let's move on and see how to use Lambda functions along with the map function. Okay, so I'll just take a list over here say LSD
and then I pass some random values to it. I'll take a new variable save I
and then I just want to print the list of and then I'll use the map function
along with the Lambda function. Lambda functions are single line functions. So we have to provide
the expression along with the function itself. So I'll just say x + 3 and then I'll pass the parameter as LSD,
which is my list and then I'll just print this.
Okay. So as you all can see on the screen 3 has been added to all the elements that are present within this list over here.
Now, let's get back to our presentation and see how the filter function works. Like. I already mentioned
before the filter function is used to create an output list consisting of values for which the function returns true.
So as you all can see on the screen, I have a small example with a condition where I want to print the values
which are greater than or equal to 3 where I want to print the values which are greater than Or equal to 3 within this list present over here.
So now let's jump onto our jupyter notebook and see how the filter function works. I'll just create a new heading over here.
The syntax of this function is similar to the map function. So basically it takes a function and the set
of iterables as a parameter. Okay, just like the map function filter function can be used
along with user defined as well as Lambda functions. So first, let us take a user-defined function as a parameter to this.
So I'll just Define a function of here. So I'll say new one and I'll pass a parameter say aye now if I is greater than or equal to 3.
I want to print the value. Now take another variable J. Which is going to be
my filter object. And then I'll use the filter function and I'll pass new one as the parameter
and I'll Supply a tuple of random iterables to this. And then I'll just print out.
What is J. Okay. So as you all can see over here, I just printed J2 which the output says
that this is a filter object. Now if I want to return the values that are present within J. I'll just have to use print Tuple of J. Okay,
as you all can see all the values that return true for this condition has been returned as the output
of this function. So now let's try to use the filter function along with Lambda functions.
I'll take a new variable. Say Z and then I'll use the filter function to which all Supply a Lambda function as a parameter.
So I'll say Lambda X where X is greater than or equal to 3. Sorry.
I have to put this within brackets and then I'll pass the same Tuple as a parameter.
I'll just copy this. This time I'll print out the list of see.
Okay, as you all can see the output has been returned. Just make a note of your guys that last time I wanted
my output to be a tuple and this time I just said print list of Z. So I have a list as the output of here.
Okay. So I hope everyone's clear to this. Now. Let's get back to our presentation and take a look at the reduce function the reduce function
as the name describes applies a given function to the iterables and returns a single value.
So here I have a small example wherein I want to add all the values of these iterables and return one single final value.
So in the first iteration, I'll have one as x + 2 as Y and then I'm going to add X Plus Y
which is 1 plus 2 and it gives me 3 after the first step this output 3 becomes X
and this input 3 over here becomes Y and then I get an output as 6 this process Will Go
On Till all the values present in the iterables have been ready. Used to a single value now, let's jump onto our jupyter notebook and see how this works.
So I'll just create a heading.
just like before I write the syntax first so reduce it takes a function as a parameter
and a set of iterables now one thing you'll have to note over here is to import the reduce function
from the funk tools module so all I'm going to do is say from Funk tools import reduce so I have just made
a spelling mistake of here Just like filter and map you can use reduce functions also
with user defined as well as Lambda functions. So first, we'll take a user-defined function.
Say a 2 which I'll pass the parameters as X and Y within this I'll just say return.
X Plus y now, I'll just take a new variable SAS and I'll use the reduce function
to which I'll pass a as the parameter and I'll pass a list of values.
and then I'll just print s Sorry guys.
I've added an extra come over here in our hit run as you all can see all the values have been added
to each other and I have the output as 49 now. Let's try to use the reduce function with Lambda functions.
I'll use the reduce function directly over here and then I'll use the Lambda function within this
I'll pass parameters and X and Y or this time I'll change the names I'll take you and pee
and then I'll just use Q star p and I'll pass a list of values to this.
And then I hit run. Okay. So as you all can see all the values that are present in this list have been multiplied
to each other and I have the corresponding output. Okay. I hope everyone's clear till here.
If you have any doubts, please do let me know in the chat box and my team is here to help you now. Let's get back to our presentation and see
how you can use these functions along with each other. So first we will be using the filter function
within the map function when I use the filter function along with a map function. It filters out the values that satisfy.
The condition which is present within the filter function and IT supplies that output list as a parameter to the map function.
So as you all can see on the screen, I have a filter function with says I want to filter out the values
that are greater than or equal to 3 from the Tuple of values that are supplied as a parameter to this.
I'll have three and four as the output of this function which will be supplied as the input to the map function.
Okay. So now let's move on to our jupyter notebook and see how this actually works.
So I'll just take a variable say C and then I'll use the map function to which I'll Supply a Lambda function first as a parameter.
So I'll say Lambda X. I'll just say X Plus X you can specify
any expression of your choice and then I'll use the filter function to which I'll Supply another Lambda function as a parameter.
And as a condition, I just say x greater than or equal to 4 I'll pass a list of values to this.
Say two three four five and then I'll just print the Tuple of see.
So as you all can see the first thing that happened was filtering out the values that are greater than or equal to 4 present within this list
after that 4 and 5, which is the output of the filter function will be supplied as an input to the map function
and then using the map function. I'll add 4 + 4 + 5 + 5 which is 8 and 10 respectively.
Okay. Now we've use the filter function within the map function. So now let's move on and see how you can actually use the map function within.
Filter function. So when we use the map function within the filter function the set of iterables
that are supplied as an input will be operated upon first by the map function and the output of this map function will be supplied
as the input list to this filter function. So now let's get back to our Jupiter notebook and see how this works.
So I'll just take a new variable say d and then I'll use the filter function.
I'll use the same condition again, so I'll just copy this.
And then I'll use the map function within the filter function and I'll use Lambda within the smart function.
So just say X Plus X and I'll pass a list of values.
Then I'll just print the Tuple of t or this time. I'll just say set of tea.
So as you all can see on the screen, I have an output set which is a resultant of applying matte function
to the given set of iterables and then applying this condition within the filter function
to the output of the map function. So now let's move on towards the final topic of this session.
We're in will be using map and filter within the reduce function. Okay. So as you all can see on the screen,
I have a small example wherein I have a reduce function to which I've supplied map
and filter as the input functions Now the innermost function is the filter function, which says I want all the values
that are greater than or equal to 3 from the list of iterables that are supplied to it.
So as an output of the filter function, I'll have three and four to this output list of the filter function
the map function produces a new list of iterables, which is 6 and 8 which are obtained after adding each of these values to itself
and finally six and eight will be supplied to the reduce function as a parameter.
So now let's get back to our Jupiter notebook and do the same.
So just say map and filter with introduced.
Okay, so I'll just take a new variable say are and then I'll use the reduce function
to which I'm going to supply a Lambda function as a parameter. So I'll just say Lambda X comma Y
and then I'll just say X Plus y. Now I'll take the map function
to which I'll Supply another Lambda function as a parameter and then I'll just say X Plus X.
After this, I'll be using the filter function. And again, I'll use a Lambda function within this filter function.
I would say X. I want to return all the values that are less than or equal
to 4 to this I'll pass a list of iterables. Say one two, three, four, five six seven and then I'll just print
out our Sorry guys. I've made a small mistake of here.
Okay, so now let me hit run. Okay, as you all can see on the screen first,
my filter function will filter out all the values that are less than or equal to 4 the output of this is supplied to the map function
and all the values are added to each other. Finally the output list of the map function
will be supplied as an input to the reduce function and all the integers will be added to each other
and I'll have one output which is 20 generating iterable.
Considered to be a painful task, but with generators in Python this task becomes very simple
before we begin just make sure you subscribe to our Channel and hit the Bell icon to stay updated with all the latest Eddie Rekha videos coming back
towards the session we shall first begin with understanding what our generators and their advantages then we shall be differentiating
between normal functions and the generator functions following which I'll be showing you all how to create generators in Python.
Then we shall take a look at generator expressions and finally a few use cases which will be generating the Fibonacci series generating
a stream of numbers and generating the sine wave using Seaborn along with generators in Python.
So let's move on towards the first topic which is what our generators generators are basically functions
that return traversable objects or items these functions do not produce all the items
at once rather. They produce one at a time and only when required also whenever a for statement is included to Do
what a set of items a generator function is run generators have a number of advantages as well without generators
in Python producing iterables is extremely difficult and lengthy generators make our task very simple.
This is because the implement the emitter next and stop iteration methods automatically generators.
Also help save memory as the items are produced only when required unlike normal python functions.
This fact becomes very important when you need to create a a huge number of iterators. This is also considered
as the biggest advantage of generators along with this generators can be used to produce infinite number of items
and to pipeline a number of operations. So I hope everyone's understood what our generators and their advantages.
Okay. So now let's move on to see the difference between normal functions and generators generators
and python are created just like how you create normal functions using the d e f keyword
but generator functions make use of the yield keyword instead. for the done this is done to notify The Interpreter
that this is an iterator not just this generator functions are run when the next function is called
and not by the name as in case of the normal functions and like I've already mentioned before generator functions produce items one at a time
and only when required whereas the normal functions produce all the items in a single go now
that you have a brief idea about generator functions let's move on to see how to write generators in Python
so as you can see on the screen green I have a small example where and I've defined the function
and then I've used the yield keyword instead of return so now let me jump onto my jupyter notebook
and show you all how to write generators in Python I've already opened a new notebook of here I
just reading the notebook as generators in Python and then like I've already told you all
before I'll have to use the d e f key word to define a generator function so I'll just name the function as new and I'll pass
the parameter as a dictionary after this I'll use the for statement and I'll use for X comma y n I'll use for X comma Y
in my dictionary and I want the items as well Yield.
X comma y Okay, after this, I'll have to specify a dictionary.
So I'll say a is my dictionary and I'll specify one as hi.
and two as welcome You can give any values of your choice.
Now after this. I'll have to create a generator object for my function. So I'll name that object as B
and I'll specify B is equal to Nu of a just to show y'all. What is B. I'll print B.
And like I've already told y'all before instead of the name of the function. You'll have to use the next keyword to return
values from generators. So I'll say next of B and I'll hit run. So as you can see over here.
The first output over here specifies that b is a generator object and the second output is generated by this next function.
Now, let me just copy this function again and I'll paste it over here and I'll hit run. So as you can see over here the first time I
use the next function. It Returns the first key value pair of my dictionary and when I used it again,
it has returned the second key value pair of my dictionary if I try to use the next method again.
It says that stop iteration has been called. Okay. Now let me take another example
where in I'll specify some condition. I want to return iterable that satisfied that particular condition.
Okay. So here I'll just Define another function. So I'll say it Define my funk and I'll pass the parameter as a
or I'll use some of the name since I've used a last time I'll use I now
while the value of I is less than or equal. two three You defy
so I have made a spelling mistake of here. It's why I ELD. Okay, so he'll die.
Now for this. I'll have to create a generator object again. I'll say the generator object is J which is equal to the name
of my function. And I'll have to specify a value for I so I'll just specify
the value as to after this. I'll just print next of Jay since you all know
that J is the generator object. I'm not going to print it again. Okay, so as you can see over here the first time
I use next of J. It has returned to as the value now just copy this.
And I'll rerun it. Oh, sorry guys, I forgotten to increment the value
of I please keep in mind that when you're using while Loops, you'll have to increment the value of the variable
that you're using as an iterator. So now let me hit run. So as you can see over here without incrementing the value
of I when I use the next method it has returned to now that I've incremented the value of I I'll hit next of J again
and as you can see over here, I've got three as my output now if I use next of J again.
It has called the stop iteration method. So I hope everyone's clear with this.
Now, let me take another example where in I'll have two parts in my function. So I'll just Define a new function.
I'll name the function as X and within this I'll just specify some variable n
equal to 3 and then I'll yield the value of this.
After this, I'll make some changes to the value of n I'll say n is equal to n star n
and then I'll yield and again. I have to create a generator object.
So I'll just say V is equal to and then I'll use the next method.
So as you can see over here when I use next of v it has returned only the first value
of my function now in case I use the next function again, it will return the second value which is present in my function.
And after this if I do it again, it has to call stop iteration in case you want to execute the same function
at once you can make use of the for Loop this Loop helps iterate over the objects and after all implementations,
it executes stop it. Shouldn't let me just jump onto my jupyter notebook and show y'all how to do this.
Okay, so I'll use the same function which I've used previously.
and after this I'll use the for Loop so for X in v print X
So as you can see over here after using the for loop, I have both the values that are returned one after the other the
for Loop has not returned them simultaneously, but using the for Loop, I'm getting into the function printing the first Value First
and after that I'm printing the second value. So I hope everyone's clear till here in case you have any doubts.
Please do let me know in the chat box and my team is here to help you.
Now let's move on and see how to use generator Expressions generator Expressions
can be used along with for Loops to produce iterators. This usually makes the generation of iterables much
easier generator Expressions resemble list comprehensions and like Lambda functions
generator Expressions create an anonymous generator functions. Let me just jump onto my jupyter notebook
and explain this in detail. I'll use some variable F and I'll specify the values of this to be in the range of 6.
after this I'll just print list comprehension
and I'll end this with a colon I'll use another variable Q
when I'm going to store the values of list comprehensions so to specify the list comprehension I'll be using
the square brackets so I'll say X plus 2 for X in F
and then I'll print queue after this I'll just copy these two lines and create a generator expression
so I'll just change the name over here I'll say generator expression and make a note you'll have
to change the braces too It Embraces and then I'll print queue again.
I'll change the name to our and then I'll print our As you can see over here when I use list comprehension,
it has returned a list of values corresponding to the values of F. And when I used a generator expression,
and after that when I said print our it has just returned that are is a generator object
to print the values using the generator Expressions. I will be using the for Loop so for X in r print X
So as you can see over here using the for Loop, I've generated the values one after the other
whereas using the list comprehension all the values were generated at once generator functions.
Like Lambda functions can be used within other functions as well. So in case you want to find the minimum value
of our I just copy this and I'll paste it over here and then I'll say print.
minimum of our So as you can see over here, it has returned the minimum value
which is present in our and that is too so I hope everyone's clear till here. Okay.
So now let's move on and look at the use cases that we will be discussing in the session today.
Like I mentioned before I'll be taking three use case examples, which is generating the Fibonacci series
generating a number stream and generating the sine wave using generators in Python.
Okay. So let's move on towards the first one which is the Fibonacci series. Fibonacci series as we all know is a series of numbers
where in each number is the sum of preceding two numbers. The first two numbers of this series are assumed
to be a 0 and 1. So for example, as you can see on the screen, I have values 0 1 1 3 Etc.
Ok, so now let's get back to our Jupiter notebook and see how you can use generator functions to produce Fibonacci numbers.
Okay, so I'll just give a heading over here guys.
I just give the heading as fib.
Okay, and I'll Define a function. I'll name the function as fib.
And within this I'll just specify the first variable and the second variable as zero and one after this.
while true I want to use the value of f which is the first number of my series after this.
I'll have to increment the values the second number becomes the first number and the third number is the sum of the first and second number.
So I'll just use f comma s will become S and F plus s in case you have any doubts,
please do let me know the chat box guys. Okay. So after this, I'll use the for Loop.
so 4X in fib now I'll specify some condition over here
so that the iterators that I'm producing satisfies some limit so I'll just use
if if the value of x is greater than 50 then I want it to stop so I'll say break after this
I'll just print I'll just print X and I'll end this with a space Now,
let me hit run. So as you can see over here, I have all the values of the Fibonacci series
that are less than 50. So I hope everyone's clear with this. Okay. So now let's move on and see
how you can generate a stream of numbers. The stream of numbers can be anything from 0 to any number
or even numbers or odd numbers? Okay. So let me jump onto my jupyter notebook and see how you can actually generate a stream of numbers.
So I'll just create a new heading over here.
I'll name it as number stream. And I hit run.
Okay, I'll just take a variable a and I'll specify the range of this to be hundred.
After this, I'll use a generator expression. So I'll say B is equal to X for X in a I want
to print all the values of a within the range of a hundred. So after this, I'll just print be.
And I'll have to use the for Loop. So for y in be Print why?
So as you can see over here, I have all the hundred values of a now in case you
want to generate only odd or even values. You just have to make a change to the range function.
So I'll just copy this. And I'll paste it over here and to print even numbers.
I'll just say start from to go on to the hundred and in the range of two. So as you can see over here,
I've generated a stream of even numbers in case you want to generate or numbers. All you have to do is change the values over here.
I'll just say one. So as you can see over here by just changing the first value from 2 to 1.
I've generated a stream of odd numbers. So what does range function actually does is it starts
from 1 it will go on to the hundred excluding hundred in the intervals of two.
So I hope everyone's understood this. Okay. Now let's move on towards our third use case example,
which is generating the sine wave using si bon and generators in Python. So as you can see on the screen using the normal function,
my sine wave is going to produce all the waves at once but using the generator function I can produce one wave at a time.
Okay, I'll just move on to my jupyter notebook. I've already written a function for that.
So I'll just paste it over here and I hit run. It's going to take a few minutes since I've imported the numpy matplotlib
and the Seabourn Library.
As you can see over here using the normal function. I've generated all the sine waves at once now,
let me show you what happens when I use the generator function since I already have my function.
I'll just copy paste it over here. And then I had to run.
So as you can see over here, I've produced just one wave among all the waves that are present in my output.
Now if I want to print another wave I'll just copy this next function again. So I'll say control C and I'll copy it
and I'll hit run. So as you can see over here when I use the print statement for the next function again,
it has returned another sine wave. Okay, so I hope you are clear with this. Let me just print the sine wave again.
As you can see on the screen the third sine wave has been returned. And then when I print it again,
it will return the fourth sign wave Loops,
which basically stands for object-oriented programming system or object-oriented programming as its most popularly known is
one of the most popular programming Paradigm now, although python is not completely an object oriented programming language,
but still it uses major concepts of object oriented programming style as part of this now in this session,
what will majorly be talking about our classes and objects classes in Python
and object-oriented Concepts in python as well. Now, let's first start
about classes and objects now to those of you who are not familiar with the different programming Paradigm,
two of the most programming Paradigm is object oriented programming and procedure oriented programming now.
You look at older programming languages like C, or you can see Visual Basic as well.
These followed procedure oriented programming language staff. We're in what used to happen was
that the entire program was divided into smaller parts are known as functions and the importance was not given to the data
but the sequence of actions which were performed. Also what used to happen. There was that the entire process took a top-down approach
as such but what happened is when When you're programming languages came up, they realize the value of the data and they came up
with the opportunity of creating something known as objects. Now objects are quite similar to what you can relate
to in real world entity as well. Now anything that we see around anything that has different properties can be called as an object
and hear how it differs from the older style. That is the program procedure oriented programming style is
that it goes from a bottom-up approach? Which as well as there's more data security as
and you can use various operations, like data accessing data over loading data expansion.
And so for now some of the examples of object-oriented programming languages is C Sharp Java Visual basic.net
and so far now, let's first address the question of what exactly is a class
and object now to help you understand this better. Let's actually look at an example here now to give you
a simple one-line definition. A class basically is a logical grouping which helps us reuse
and rebuild our data as part of the code now to put it quite simply it basically is similar to a template
or a blueprint that we use once I have defined a specific requirement of my then what I can do is
that I can go on very ating with respect to that. Now, let's look at the example here now, if you look here I have created a class called employees
wherein I have defined some of the most common parameter each of my employees will be Having
that would be his name. There'd be that age and they would be the salary now. I have defined a blueprint but it comes there comes a time
where I need to implement this so and instance which is basically a entity
of the class is referred to as an object here. Now, if you look here there are basically three different objects,
I have object one, which is referring to Sarah whose age is 37 as well.
As salary is 10,000 my object to is John. On Whose age is 43 and salary is 21,000 similarly is Jessica
as well whose age is 26 and the salary is 24,000. Now, how does pythian implemented classes now again,
go back to the definition a class basically is a blueprint for which objects are created.
Now coming to the basic Syntax for how to write a class in Python. It's quite easy
because you just need to define the keyword class following which you need to specify the name of the class.
Now, let's go. If you take the previous example, the name of that class would be employees.
And each of the objects would be created from that same class. Now what I'm going to be writing
inside the class would be three major aspects. I would have my class variables. I would have instance.
World and I would have data members. Okay. Now these are the three major aspects to any class as such now
if I need a variable which is going to be shared by all the instances of the class
now do not get confused when I say instance. It basically is referring to the object itself.
So here we refer to an object as instance now each if I want each of the instance to share a common variable then
I would make it a class variable but let's say I want each of the instances. Has to have a specific variable.
Okay, then I would be using an instance variable as such. Then comes the third part which basically is your data.
Remember this basically is a class variable or an instance variable as such that actually holds the data
associated with respect to the class and objects. Now without confusing you any further.
Let me actually switch to my pycharm. Okay, and let me show you this by writing by defining a class here itself.
So let's start by creating a simple classroom. Now, let me use the first keyword for defining any class
that is class. Then comes name of the class. Now for today's example, what I'll do is I'll create a class called cars, okay?
So I've created a car class called cars, okay? Can you guys see this?
Okay.
And here what I'm going to do, is that right now I'm not going to write anything.
So I'm just going to use the keyword pass then comes the time for me to create objects for this class.
So what I do is let me call an object. Let's take Honda for it.
Okay. So this is the name of my object and then I'm going to specify to which class
it belongs to so it belongs to the class car. And this is
how you create an object in Python quite easy, right?
Similarly, let me create another one. Let me call it start. Okay, tata is also going to be of car.
Okay. So basically what I have done here is that I've created two objects that belong to a specific class.
Now time now comes the time when you actually assign values to these instances
or objects are such now let's say I want to add the name or the model number for the Honda car.
So I'm going to say Honda which is my object following which use a DOT operator
and then specify what instance variable you want to use now. Let's say I want to specify
model name OKAY model name is equal to
I'd say City because I like Honda City okay now I'll also
add another variable which is year of manufacture
so I'll see you here M okay and this basically is going to be equal to Let's say 2017.
Now I'll also add price.
Okay. I'd say about ten lakhs. Does that sound fine?
Now, let me just copy the same and let me create an object for Tata car as well now here.
Let me just change it to data.
and let's say this is bored Okay.
So let's keep the you're the same or let me reduce it 2016 and let's say the price is let me reduce it.
I'll make it six. Okay.
Does that sound fine now? What I have done here is that I have created instances of the class
or objects to that class. And each of these instances themself have a specific variable assigned to them as well.
So in this case what you see here is the model name what you see is the year and what you see is the price.
So these are basically variables Associated to each of these instances as well.
Now if I say just print and I say Honda Dot model name
Okay, let me take the price itself.
Let's try running this. Okay, it's with respect to the definition of the class.
Now. If you go back to if we go back to our slides here, can you see there's a small semicolon here
that we have missed out. So this is how it is a single semicolon can make a lot of difference.
Okay. Now let's just save this. Let's run it.
Okay, I can see the price of my Honda car here. Now. This is a lot of pain for me
when I'm working with multiple instances which have unique variables to them. But let's say
if I have common values that needs to be created for all of these if I was using other programming languages,
we had a concept known as Constructors, but don't worry that same is present here as well with python.
So create a Constructor use the following command which is deaf, which is basically defined.
A function and use in it now in it is basically a Constructor here
and what it is representing is that it is going to initialize the value of the variables.
Now if you notice here, there is a keyword that is already added here that is self self basically is a reference to the object
which is going to be calling this function. Now those of you who are not familiar with functions can check out our video on python tutorials
where we have talked about functions and also check Check out our python function video as well.
Okay. Now what happens is to this. Let me pass a model name.
I'll also passed the year manufacture. And let's see the price as well.
Okay. Now I need to assign the values for these variables for all the object.
Now. If I need to do that, then what I need to do is that I need to First reference the object.
So that's self Dot. model name equal to the model name
that it's getting so then serve Not yet of manufacturing.
And finally self dot price.
Okay. Now what I'm basically doing is that further my Constructor, I would be passing these three parameters.
So for the object or the instance, which is going to be created, please add these values for that.
Okay. Now let me show you how to change this as well now, I don't need this so I will remove all this.
Okay, so here what I'll do is I'll pass Honda I'll pass City.
Okay. I also pass the year of manufacturing is 2017 and let me pass the price again.
same for Tata So what I've basically done is
that I have generalized the requirement that I want now again if I run the same.
What you can see here is I am getting the same output that I had gotten earlier as well. So this basically is a Constructor
that is going to be used when I have to assign specific values to my objects
or instances at the time that they are creating apart from this if you want to create
or you want to add any specific value, you're free to do that. Now, let's say I want to add a new value.
Let's say I want to create Honda dot let's say I want
to add the CC as well the CC of Honda City which is equal to 2500.
Okay. So this is also very simple. Now what happens here is that I have created an instance variable
for the Honda object. Okay. Now same thing, let me just say If I want to see the complete values
that are associated to an object then what do I do is that I check the namespace for now.
How do I check the namespace for it is that I use the dictionary option.
Sorry. I use a dictionary function. okay, so if I use tick function and if I run this then
what you see here is that I have a model name, which is City. I have a year of manufacturing 2017.
I have a price and I have the CC Associated as a to it as well.
Okay. Now what basically it tells me is if I use this object and request any of these values then this is the output
that I would be getting same if I change for Tata.
And I run this. Then what you see here is that cc is not present.
So I hope you understand the difference between both. Can I have a quick confirmation in the chat box?
Okay, that's great. Good to see that all of you are following it. Now if I have a class then
if I don't perform any operations in it, then I'm basically not optimizing our using
the complete capability of that class as well. Now. What I'll be doing is that I'll be creating a function here.
So this function what it basically does is that it's going to increase the price of my car so
what I'm going to do is that for defining any function use the keyword Def okay following which the name
of the function so let's say price underscore increase
okay now this is a function but it's going to be performing on itself as well so you self here
okay and I'm going to start defining this function what do I need to do is
that I basically just need to update the value of price okay so what I'm going to do is
that I'm going to use self dot price equal
to then I'm going to do a simple computation let's say the present self dot price Sorry
about the typo. Into okay,
how much do you think the annual price range would be? Let's take a guess. Let's maybe fifteen percent rise in that case.
I'll go with 1.15. Okay. Now I have defined a function here.
But what you need to understand is that it's not exactly in the scope of the class.
So Sorry about that.
Now how do you identify if it's in scope or not? It's basically one of the he's with respect to pie chart
if I expand it, then I know what is part of the class and what is not so this is one of the major reasons
that we recommend you use pycharm as an IDE as such. Okay. Now I need to increase the price.
So what I'll do is let me go back. Let's say I want to check the price of the Honda first.
Okay, then what I'm going to do is that I'm going to call the function with respect to the class.
Now. It's defined to that class. So what I'll do is that I'll send this funk. I'll use the Honda Honda object to call that function now.
Do you use any of the functions Associated to a class make sure you're using the instance or object of that class?
So Honda Dot Now you can already see here the different suggestions
that comes to it. Now price increase is the function that I want. Okay. And again, let me copy this and paste it.
Okay. So again see the major issue here is it's considering this. So if you just double indent it it's going to set back.
Okay, just save this and let me rerun this. Okay, now it's giving me the output
so it's converting at let me just add in here just to convert it to integer type.
Okay, so the output should be converted to integer type for me. So it's incremented the value to 1.15 times.
Okay. So these are basic function operations that you can perform with respect to python.
Now, let me go back to my presentation and here let's talk about the various object-oriented
Concepts invite them. Now in this session. What we'll be talking about are the three major Concepts
which is inheritance encapsulation and abstraction. Now when we come down to inheritance inheritance,
basically is the ability or The opportunity for any class to inherit the attributes and behaviors
from the parent class. Now when I talk about a parent class it refers to a superclass as such.
Okay, so let's take cars itself for an example. But before that let's look at the example here.
Now your parent becomes a base class and Son becomes the derived class as such this is same
that will be implementing in our program as well. So in our pycharm, what I'll do is that I'm going to create new class and let
me call it super car but
if it has to inherit it the properties that are present in the car class then what I need to do is
that I need to specify car here okay that means it becomes the parent for the supercars
okay so here I'm not going to Define anything I'm just going to say pass and let me remove this from here And let me add it here.
Okay, now rather than making Honda as instance of car class.
Let me let me make it of the Supercar class.
Okay. Now I have not defined an init operation on nor I
have I initiated the values for these variables as well. Okay. So what I'm going to do is
that let me just try running this. Okay. Let me remove this.
Okay, and let me just print. the namespace for Honda Which is Honda Dot?
Before that, let me just show you. Let me just print one of the values itself first
before I show you the name space completely. Let's say on Dot.
here Okay.
So your of manufacturing is defined here. I have not explicitly defined in the child class.
But let me make sure let me just run this and let's see the output.
Okay, so here basically it's just passing it.
Ah spelling mistake.
Let's rerun this now here. What is happening is that it is referencing to its parent.
Okay now to get a better understanding of what exactly is happening here. Okay, we're going to use something interesting.
What we're basically going to do is that we're going to use the help function.
print help and here. What I'm going to do is that I'm going to pass Honda.
Let me just comment this.
Now this is something that I really want to show you guys.
Okay. Now if you see here what is happening is that it's showing me the method resolution order.
So basically it's showing me how it is going to follow the sequence of operations first.
It is going to check in Supercar for init method, but I have not defined it here. So what it's going to do is
that it's going to refer the car class if it is not defined there as well, then it will go back to the parent.
Class for all objects with this built-in dot objects. This is the parent class
that is going to be inherited by all the classes used in this language as such so it's found
the init method present in cars. Okay, and it's shown methods inherited from class is the initiative in it method
and it has initialized itself. Okay. Now this is basically the sequence of operations
that happen as well. Now when I create Define any Function with respect to the child class is going to check the child class.
If it is not present then it's going to check the parent glass as such now, it can be anything as such it can also
be the price increase as well.
and okay.
Okay, let me just comment this section out.
So here again, it has inherited this method as well. Now, let's say if you do want to Define an init method as part of the class,
then what you basically do is that you follow the same sequence you right defined.
Okay, following which you use in it? Then you specify the parameters.
It has to take.
okay, and then what you basically do is that you shouldn't actually copy this entire code
and replace it here. What you can do is that you can use the keyword super. .
In it. Okay. So what I'm referring to is that it should call the init function present
in the superclass. Okay, in that case, what I'm going to do is that I need to pass the parameters here as well.
So I'm going to pass the model name. I'm going to pass. The year of manufacturing as
well as I'm going to pass the price as well. Now this is basically to reduce the code
that you're going to be writing as such now apart from this. Let's say there are few other variables that are going to be taking let's say I'm going to include
CC as part of my super class then what I can do is that I can write here self.
dot cc is equal to CC so I am basically building on what is already present
and this is one of the major aspects that you can use inheritance for this
in turn reduces a lot of codependency as well and is one of the most popular and major factor
for any programming language that uses object-oriented programming systems okay now
coming back to the next concept that is associated to python okay you have Encapsulation basically is the method
through which you bind your data and your code together. Now, it also helps you in hiding your data
from people whom you don't want to do it don't want to give visibility to so this is one
of the major key factors for any programming language as such now, there are two major ways through which you can
I access Or achieve encapsulation one is
by using the getter and Setter method and the next is by using at project.
Okay. Now we'll be talking more about that in our next session. But let me give you a simple understanding what happens is
that you want to change a specific value as on when in the go itself.
Let's say my year of development or my year model. You're just keeps changing continuously in that case.
What I need to should do is I need to update these values on regular interval. But let's say if there is a specific dependency
on these variables ahead as well. Then it becomes an issue same can be said with respect to price now price is going
to be increased continuously through getter Setter method. I can ensure that this is going to be implemented every time
there's going to be a change as well apart from that one of the major concepts with respect
to object oriented programming is abstraction now with respect. Back to abstraction what basically it means is
that it hides the implementation details and only provides the functionalities to the user.
Now. If you look at the image here now a mechanical engineer or an automobile engineer
who works with your car is aware of the inside and out of your car as well. Now if I need to drive a car,
I don't need to know that I just need to know how to turn on my car how to change the gears and how to move forward as well.
That is what abstraction helps me achieve. I don't need to understand what exactly happens
when a gear shifts from second to third but I just need to know that a gear shift from second to third is going to make it easier
for me to move ahead as well. Okay, so this can be achieved by using abstract classes
and an abstract class is quite similar to an actual class itself. But how is it different from an actual class?
Is that an abstract class cannot have an object of itself you need? Inherit the abstract class
and you need to create an object of that abstract class as well. Now, let me go back to the same example.
Let's change it here. Okay. Now what I'll do is that I'm going to add a few additional lines of code.
Okay. Let me just copy. here, let's say I'm going to say from vici ABC
and create abstract method Okay.
Now what I'm going to say is that my car class ABC is also.
inheriting this abstract now, I'm going to remove all this and Here I'm going to make this an abstract method
where and I'm not going to define the logic here. Okay, for now what I just do is that I call it.
Okay.
And in my superclass what I'll do is that I'm going to create the same function.
But here I'm not going to Define any logic.
Okay. So what I'm basically doing is that in my abstract class, I'm defining the method to increase the price
but based on my requirement now, let's say I don't want my supercars to have an increase of just 1.15.
So what I'm going to do is that I'm going to increase this. Let's say the annual increase is going to be two percentage.
So this is one of the major uses through which I can perform or I can use abstract classes.
I can just Define the basic logic which is needed to be implemented in all the classes.
Ahead and then what I can do is that I can implement or very 8 these functions as
per my requirement. Okay. Now with this, let me go back to our slide and let me just summarize.
So we started with classes and objects. We talked about classes in Python,
and then we talked about the various object-oriented programming Concepts in Python.
Let's talk about the init function in Python. So what exactly is the init function init function automatically gets called
each time an object is created for a class. Now, when we add an init function to a parent Class A Child class
will not be able to access the parent class method. So to overcome this the child class init function overrides
the parent class init function. So now let's take a look at an example to understand this now to show how init function works.
Let me first clear this Will I do init function over here?
Yes and instead of self. I will add one more variable. Let's say F name and f h now
what I'll do is I'll just write self dot name is equal to F name
and self dot h is equal to FH now take one more function guys.
So I'll just name it as let's save you. And for view I want to print the value of f name.
Self dot name and self dot age.
So this is my parent function guys, and for the definition in the child class, I will also make one in function.
So I'll just write it as in itself. And again, I have to add F name.
And FH. And let's say self dot name is equal to F name
and self dot h is equal to FH. Now. This init function is going to overwrite the pennant
in function guys. So let's make one more function. So this is going to be view as well.
And in this let's say I want to print okay before we move on we have to specify the parent function with the init function as well.
And we don't have to mention these variables instead. I'm going to add one more.
Let's say I want to add last name as well. And I'm going to add it as let's say Eddie Rekha.
Now, I'm going to print over here self dot h self dot
last name and self-taught. Let's say name.
All right, I have to remove these. Let's make one more object.
And give it the value, let's say I want H to be 23, and last name is going to be
python in the inverted commas name we have already specified
so we don't have to give it again. And I'm going to just call the function.
Let's see what happens. What is the output will be so as you can see I'm getting the output as python at Eureka
and when you see so this is how you can override the parent class init method using the child class guys.
So this is all about doing it function. Now, let's talk about the next topic that we have which is the types of inheritance.
So depending upon how many types of painting class in child class are going to be there inside the program following are the types of inheritance
in Python guys. So there is single inheritance. There is multiple inheritance, then there is multiple Level inheritance hierarchical
inheritance and there is Hybrid inheritance as well. So we haven't talked about each of them in detail guys.
So first of all, let's talk about what is single inheritance. So when their inheritance involves one child class
and one parent class only it's going to be a single inheritance the example that I showed you before is the example of single
inheritance guys and talking about multiple inheritance. It is going to involve more than one painting class,
which means we are going to have at least two parent classes and the child class is going to derive properties from both of them.
M and this is called multiple inheritance now talking about multi-level inheritance. Let's say we have a single inheritance going on.
We have a parent class and we have child class but the child class also act as a parent class
for another child class that is going to be a multi-level inheritance guys and talking about hierarchical inheritance hierarchical
inheritance actually involves multiple inheritance from the same vein in class and talking about hybrid in Hayden's
if a program has more than one types of in it and let's say we have a single and multiple inheritance going on simultaneously.
It's going to be a I played inheritance guys. So let's take a look at examples for each of them. Let's go to pycharm guys,
and I will remove all this so I will start with single inheritance guys, so I'll just take a parent class.
And give it a function. Let's say Function One. And give it a statement.
Let's say this is function 1. Now, let's take another class guys class child
and give you the value of the painting class. And after that we can move for another function.
It's a function number two and give it a statement. Let's say print this is function to now Mega child class object
and call the function so we can call both of these functions for just call function one give it the output
and we are getting the output as this is function 1 so this is a basic example of single inheritance guys.
Now talking about multiple inheritance. What I'm going to do is I am going to make one more class over here.
Let's say class. parent too Now
what happens is let's say give it a function number 3. Let's say. And print statement.
This is function 3 and in the Declaration over here. I'm going to just specify two classes.
And when I call the functions I can call function number one and I can call the function number
three as well guys. So let's see what is happening here in the output. I'm able to call the function number one and function
number three as well from the child class object. So this is the example of multiple inheritance guys now talking about multi.
Level inheritance. So what I'm going to do is I'm just going to specify parent over here.
And from this let's say it doesn't have any Declaration of parent 1 which is this class.
So it is not able to inherit any properties from that but what I'm going to do is I'll just specify parent to over here
and I can still call these functions because there is an inheritance going on between them which is
multi-level inheritance, which basically means this class. The parent one class is actually giving
properties to pair into class. And paid into class is giving properties to the child class. So this is example of multi-level inheritance guys.
Now talking about hierarchical inheritance guys, but I'm going to do is instead of pairing to over here. I'll just specify parent.
So for these two child classes, I have the same parent class and now let's see if I can have the same output or not.
I'm not going to get the properties from the parent to because I have not specified it in the United ends.
So I'll just remove this. And let's see what happens. I'm getting the output as this is function one.
Okay, let's make the object for parent to as well.
All right, give it one and Obi One Dot. Let's see what functions we can have.
I can have the function number three and I can have the function number one as well. So I just print function number one and from both the child classes.
I'm able to print the function number one. So this is the example of hierarchical inheritance guys. I am using the same parent class to give the properties
to both parent to and child class as well. And now talking about Hybrid inheritance Hybrid inheritance
actually involves more than one inheritance going on in the single program. So we Have a single inheritance over here.
So let's say I want to have multiple inheritance as well. So I'll just see if I parent to now and this is the example
of Hybrid inheritance guys because we have a single inheritance going on over here and in the child class,
I'm inheriting both the parent 1 ampere into and this is the example of multiple inheritance. So this is a Hybrid inheritance example guys.
We are getting a type error which is saying cannot create a consistent method resolution order for base parents parent
1 ampere into okay. Let's say said of this I will make one more class over here.
Give it a value. Let's say pair in number 3. Give it a function function.
Let's say four and print statement. This is function for now instead of parent.
Number two. What I'm going to do is I'll just take parent number three guys and with the child class operator.
Let's see if I can actually get the function number one and let's say I want function for as well.
I'm able to do that. So in the output, let's see what I got. I'm getting the function 1 and function for so
this is Bill example of Hybrid inheritance guys now that we are done with the type of inheritances.
Let's take a look at what all we have now. So we're going to talk about the super function guys
super function actually calls the parent class method directly. So let's take a look at a simple example guys
how it works. So I'll just remove all this. Now what I'll do is I will make let's say parent class.
and give the function Function One again,
the print statement Now
what I can do is instead of calling the parent function from the object. I can just use the super function and over here.
I can just call the function 1 now. I will just print this is
function to let's make a child class object.
Now, let me see if I can call the function to or function one. I can do that. So I'm going to call the function to eyes.
Let's see what the output will be some actually able to call the function one directly from the super function over here.
So this is the function of super function guys. It can directly call the parent method and now
that we are done with the super function. Let's take a look at the next topic that we have which is method overriding in Python.
So method adding can also be achieved to change the functionality of the painting class function. So let's take a look at an example.
Understand how we can actually achieve method overriding in Python guys.
So instead of naming them separately. I'll just name them as same so when I create the child class Constructor and
if I call the function now, okay function 1 which is so when I'm calling this function technically,
it should call the parent function. But what happens is it overrides the parent method?
Okay to specify this run it again. Now, I'm getting the output as this is function to even
though I'm calling this function 1 which should be ideally calling the parent function, but it is printing out the function
which I have specified in the child class so this is how I have overridden this parent class method
and this is how we can perform method overriding in Python guys in this session let me walk you through on how you can learn
and make use of exceptions in Python guys this session is intended to be useful for anyone considering
to kick-start their learning about Python and need some insight on how you can go about making use of ins to make coding very easy for you
so the focus is basically on approaching the language in the easiest way possible and to find out
what it has to offer to the community and all of the learning enthusiasts out here so let's begin
by checking out the agenda for the session will start by checking out why we need exception handling first later we'll check out
what an exception actually means followed by that we'd be walking through the entire process of
how we can handle an exception and lastly we look at how easy it is to code with python Where will take a programming approach
and learn the concepts through code now that we're done with the agenda without further Ado. Let's begin by checking out why we need exception handling well
to understand the concept. Let me quickly walk you through a very simple scenario consider the case
where you're dividing any number by 0 what will happen. Can you divide a number by 0 you cannot correct?
But how would a kid approach this problem the kid would think that you can actually use regular division
to divide something by 0 so you do. Dividing something by nothing. So it stays the same something
like this right little does the kid know that this is wrong now check out how a programmer would approach the same concept.
Well, it is established that dividing by 0 is not possible mathematically so as programmers we know it is not correct.
So this basically leads to two cases either an exception or an error so a Python program terminates as
soon as it encounters an error well in Python and error can be either a syntax error or an
And it is as simple as that. Well, let us actually divide by zero for fun guys. So this is what happens in python python presents us
with this beautiful error message saying that it cannot divide something by 0. Well, in fact, let us head to pycharm which is my ID for coding
in Python so we can actually walk through this practically. So guys here I am in my pycharm.
So let me quickly go and type out some simple code for you guys. So let's start with y equal to 10. We can actually print y by zero now,
so let me quickly go around. Run this in the console. So as you can check out that says zero division error division
by zero is not possible. So you cannot divide anything by zero. So let's establish that at this point is that was good enough, right?
So let's get started. Then let us quickly check out what exception handling actually is well guys to get a clearer picture
of what that is. We need to start with understanding the definition for both exception and exception handling.
Well, what is an exception guys an exception is an event. which occurs normally during the execution of a program
that disrupts the normal flow of the program's instruction so instead of the program actually executing evenly
and nicely there is actually a disruption in between the curve so this we basically call as an exception so next what is
exception handling guys this is the process of actively responding to An Occurrence of an exception as simple as that so basically the process
of responding to the occurrence during compilation of exceptional statements which requires special processing is actually what
as exception have been guys so this is basically done because of the change in the normal flow of the program execution
well it is a very simple concept and I'm sure at the end of this session you guys will agree well at this point
what do you think of exception handling in Python guy's head to the comments section and let me know what you think
so we can interact there and now that we know what exception handling is we need to understand how the entire process
of exception handling works so let us take it out first let us walk through what happens
in Python so let us say the user makes an error what happens next When you think about it is
either the user that finds out the error or python will actually tell you what the error is, correct.
So once you know what the error is and you know, where it is, you can basically start analyzing it to know
if it is fixable or not. Well if it is fixable, how can you go about doing that? Well, if it isn't nothing to worry guys python is so good
that no matter on what level you mess up. There is always a way out of it guys. So now if it's fixable,
how can we handle the exception check out the image on the right side, so we need Need to First find the error
if we cannot do it by then we'll find out for us. Well, next is to make sure you take caution while coding if you think
that there is going to be an error in that particular piece of code. Well remember the word try at this point.
All right, and later will actually fix the error and we call this as catch. This is remember the keywords for now and we'll be walking
through these in detail in the following slides. In fact, let us Begin by checking it out right now.
So Guys, these are some of the important terms that you need to take a note of before starting to code and standing exceptions so first we have try we'll try
is basically the key word which is used to keep the code segment under check so whatever code you put under try is actually the code
under scrutiny guys and next we have except well except is this segment which is actually used to handle the exception guys
so how do we know that the exception is occurred if our piece of code in the try block has actually caused an exception then we can handle it in the exact block
and how do we use else well else is basically run when no exceptions exist guys and lastly we have finally finally we'll run the even
if there is an exception finally will run if there is not an exception as well so I want you guys to note
this at this point of time and this will help you a lot in the coming slides guys so not coming back to python this is what
at visually looks like we first have the try block where we run a piece of code and next we have the
except where the code actually runs only when there is an exception in the try block and if there are no exceptions then we run the else block guys
and lastly no matter what exception or no exception We Run The finally block always guys Sounds
simple right? Well, it actually is another we are familiar with the process of exception handling.
Let us check out how we can go about understanding this using python practically guys. Well syntax errors occur
when the parser detects an incorrect statement will check out the tiny arrow on the left side here.
Well, this is basically to indicate where the parser ran into the syntax error. Well in this particular example, there were too many brackets,
right so there was an extra closing bracket. Well, if you actually remove it and run it you'll actually get a different.
Her this time we'll check on the right side part of the code. Well this time you actually ran into an exception error.
Well this type of code occurs whenever syntactically correct python code results in an error guys.
So the last line of the message indicated is what type of an exception error that you actually ran into well
in this particular case. It is 0 division error and it says that the integer division or modular by 0 is not possible.
So this is basically the same case that I showed you in pycharm awhile ago, but instead of showing the message,
Error python details what type of exception error was encountered? Well, as I mentioned in this case,
it was a zero division error, right? Well python comes with various built-in exceptions as well as the possibility to create self-defined exceptions as well.
And now that we are clear with that. Let us check out how we can go about raising an exception on our own
so we can basically make use of raised to throw an exception. If a condition occurs, the statement can be complemented with
a custom exception. Well, if you want to throw an error when a certain Condition occurs using race.
You can actually go about it like the following piece of code. You actually see on the screen and when you run this piece of code,
you'll be greeted with the following output guys. So it says exception X2 not exceed 5 and the value of x was 10.
So let me quickly jump back to Python and we can execute this there. So guys, I'm in my pycharm right now.
So now quickly typed out the code for you guys. So let me quickly go ahead and run it and we can check out the error
as you can see it's as exception neck should not exceed 5 and the value of x was 10. Perfect, right? So let's quickly jump back
to the presentation to check what's next. So the program basically comes to a halt and displays are exception to screen.
Right? So this basically offers clues about what went wrong and now that we're clear with that we can actually proceed to checking
out the assertion error guys. So instead of waiting for a program to crash Midway, you can actually start by making an assertion in Python.
Well, we assert that a certain statement as actually met and if this condition turns out to be true then excellent the program can continue But
if the condition turns out to be false, you can have the program to throw an assertion error exception for you guys.
Well have a look at the following example on your screen. Well, this is basically where it is asserted that the code can be executed in a Linux system guys.
So if you run this code on a Linux machine the assertion passes if you were to run this code on a Windows machine the outcome
of the assertion would be false and what would happen? Well, definitely the result would be something like this. Right.
So it would basically present us with an assertion error and says the did this code runs only on Right.
So I'm using a Windows desktop in this particular case. So let me quickly open up my pycharm and then we can actually run this piece of code to check out
our exception guys. So I'm back in my pycharm and I've typed out the code guys. So let me quickly go ahead and run this
as you can check out since this is a Windows machine. It says this code can run on Linux only but this particular case this assertion would be true.
If you are actually running this on a Linux machine base. So if any of you guys are using Linux machine,
make sure to try it out and on that note. Let's quickly come back to the Presentation-wise well in this particular example
throwing an assertion error is the last thing that the program will do the program will definitely come to a halt and it will not continue guys.
But what if that is not what you want what if you want something different from this or that you want the program to continue
while displaying an exception for you guys when other we actually have a fair idea about how we can go about understanding exceptions.
Let us Dive Right Into the Heart of exceptions now. Yes, I'm talking about the try and except block guys.
So basically the try and except block and pie. Is used to catch and handle exceptions. Well python basically executes code following the try statement
as a normal part of the program the code that follows the except statement is the program's response
to any exception in the preceding. Try glass guys. Well, as you saw in the earlier examples that I actually showed you
when syntactically correct code runs into an error python will throw an exception error and this exception error will actually crash the program
if it is unhandled guys. So the except Clause determines how your program response to these Exception guys,
so instead of actually crashing our program. We can actually tell python what to do when this particular exception occurs.
We'll check out the following function guys. So this function can basically help us understand the try and the except block
while the Linux interaction function can only run on a Linux system. The assert in this function will actually throw
an assertion error exception if you're using it or any other operation system apart from Linux.
Well, we can actually give this a try in Python. So let me quickly open up that so as I'm quickly or my pycharm,
so let me quickly go. and select this and run it well this won't say anything right now because well if it was actually a Linux platform the message
would have been printed right so let's quickly jump back to the presentation so basically if we run the tiny piece of code you see on the bottom the way we
actually handle the error in this particular case is because we gave out a pass right well if you were to actually run this code
on a Windows machine you would get the following output which is already on your screen right so it is a blank output
you get nothing well the good thing here is that the program actually did not crash - but it would be nice to see
if some sort of exception occurred when you actually ran your code well to this end you can actually change the pass into something
that would generate an informative message like this check it out so let me quickly go ahead and run this and pycharm But
as you can check it out at just the Linux function was not executed. Right? So basically this happened
because I am on a Windows machine guys. So let's quickly go back to the presentation and guys when an exception occurs
in a program running this particular function, the program will continue as well as inform you about the fact
that the function call was not successful. Well what you did not get to see was it the type of error
that was actually thrown as a result of this function call guys. So in order to see what exactly went
wrong you would need to catch Catch the error that the function through well check out this particular piece of code I have for you guys.
So here is basically where we actually capture the assertion error and we print the output message to the screen.
So we have a try block. We have the same function and we have except as error, right? So we're going to print what type of an error
it is followed by a message for us, right? So running this particular case on a Windows machine will actually give us this following
output device such as function can only run on Linux system and whatever you have chosen in the print block is actually
being printed for us. So let me run this in pycharm says And check it out. We have the message printed, right?
So it was the same as I told you. So it was the same message as I told you before heading back to the presentation.
Well in the previous example, we actually called a function that we wrote ourselves, right? And after that when we actually executed the function,
we caught the particular assertion error exception and then we printed on the screen. Well I have for you another example
where you actually open a file and use a built-in exception guys. In fact, let us dive into pycharm and we can actually run this
and we can come back and take a look at the output. So guys I actually came into pycharm and I actually ran that particular piece of code.
Why does it say could not open file log? Well guys, basically if the file DOT log does not exist.
The block will give you this output, right? So it says the file could not been opened. Well, this is an informative message and our Python program
is actually still able to continue to run. It has not crashed. Right? Well actually in the python documentation,
you can see that there are a lot of built-in exceptions that you can make use of and here is one exception that I have for you guys that you can check.
Out so the exception file not found error. Right? So basically this is raised when a file or directory is requested,
but that doesn't actually exist and this is just one among many that python offers to us guys.
Well to catch this type of an exception and to print it on the screen you would actually use this following piece of code guys.
So in the try block, we actually going to open it as file and we're going to read something present in it guys. We're going to accept it by pushing a file not found
error as an object and later. We actually end up printing that object right? So let me quickly go ahead into pie.
Um, and we can check it out. Well as you can check it out we have error number two, which is no file or directory, right?
So it's perfect. Well, you can have more than one function call in your try Klaus actually guys
and anticipate catching various exceptions as well. Well a thing to note here is that the code in the try
Klaus will actually stop as soon as an exception is encountered but there is one important thing that I want you guys to know down as that while catching
an exception it basically hides all of the errors guys. Well, definitely there are some unexpected errors
in your program, right? You're catching an exception. And even these are completely hidden from you. Well, this is why basically you should avoid using bare
except statements Clauses in your python programs guys. So instead basically, what you can do is you can refer to the specific exception class
that you want to catch and then handle those particular exceptions guys. So look at this following piece of code I have for you.
So you are basically you first called Linux interaction function and then later actually try to open a file guys.
So let us quickly jump into Python and we can actually check it out. So as you can see I actually Looted the program guys again,
if the file doesn't exist running this code on a Windows machine will give you their output. Right so it's basically says
that the function can will run only on a Linux machine and then we have actually printed something guys. Well, what we actually did here is inside the try
Klaus we directly ran into an exception immediately and will not get to the part where you actually try to open our file
or log right now. Basically when you actually run it on Linux machine, it's going to says no file or directory found check it out here guys.
So this is the windows output that you get and this is the Linux output guys. This point let's take a quick break and check
out what are the key takeaways of this particular module guys. So basically a trike loss is executed up until the point
where the first exception is encountered and inside the except clause or the exception Handler what we basically called we can actually determine
how the program actually should respond to that particular exception and we can actually manipulate multiple exceptions
and differentiate how the program should respond to each of them. Right? And lastly. We actually learned why we should avoid using
their exit Clauses guys, and now that you're clear, With this next up I have for you is the else Clause guys.
So basically in Python using the else statement, you can instruct a program to execute a certain set
of code only in the absence of exceptions guys will check out this following diagram on your screen.
So basically in the Tripod, we have the code except when we actually want to handle the exception or else in case there is no exception.
We're going to run the piece of code that comes in under else guys. So let me quickly walk you through the code guys.
So here is basically the same Linux interaction function. We have an associate editor here and we actually are going to print the error right so else
if there is no assertion error. So we're going to have an else clause and we're going to print saying executing the else Clause right?
So let me quickly open up my pycharm and we can run this piece of code guys. So as soon as I go ahead and run this it says function
can only run on a particular Linux system, right?
So as you can see how the output is the function can run only on Linux systems, right? So in this case, I have a Windows machine.
So we are actually not printing the except Clause here. But if you are running this on a particular Linux machine,
this is the output that you would get guy such as doing something and executing the else class. Correct? This happened because of the program did not run
into exceptions any exceptions, right? So else Clause was actually executed. Well, you can actually try to run the code
inside the else clause and catch possible Exceptions there as well. Well again, we have the same Linux interaction you are we going to print it.
So the Linux output says doing something and no such file or directory found. Well, this is basically for the else clause
and we using the same file example here, but then we're actually trying to catch an exception in the else block as well.
So the output is pretty much straight forward as well. Right? Well from the output you can actually tell that the Linux and traction function actually ran well
because no exceptions were encountered an attempt to open file DOT log was actually made and that file did not exist and instead of opening the file.
You actually caught the exception which is the file not found exception pretty simple. Right and I hope you guys are clear with all
of the concepts that we discussed on till now and next up. We need to check out how we can actually use
the finally Clause guys well to begin with imagine that you always had to implement some sort of action to clean up executing your code guys.
Well python basically enables you to do so using the finally claws have a look at the following example guys,
check out the workflow on your screen. I'm pretty sure we're all familiar with try except and else at this point of time, right?
So, this is the Grand Lodge Order that you need to go into first. You have the try to check for an exception then we actually handle
if there is an exception using the except or else if there is no exception. We're going to print whatever is there in the else block
and lastly we have something called as finally guys. So no matter what we are going to execute this in case of there's an exception.
The finally block is going to run in case there is no exception finally block is going to run there as well.
So let us quickly check out a coding example guys. So basically this is the particular code I have for you guys and let me jump back into my pycharm
and we Can actually execute this so guys I'm back into my pycharm. So let me quickly go ahead and run this well
as you can check it out. It says the function can only run on Linux machines. This is because I'm on a Windows machine right now
and no matter what right so exception or no exception we have this message which is cleaning up irrespective
of any exception guys. So this is basically the use of finally guys and that is as simple as it gets
so it's pretty much simple, right? Well try except else. Finally all of this is a really simple concept.
And once you understand what it actually does, you can go about doing a lot using python guys.
Well, no matter what the python application is. There is a very good chance that you'll actually make use of exceptions guys.
Well on that note, let me quickly summarize the entire session for you guys. Well in this session we cover the following topics
will basically we started out with the introduction to exception handling and later. We looked at why we actually needed right
and then we checked out the following concepts in the screen. So we checked out a raise which I doubt I answered which I doubt try which I thought except.
Else and finally guys, well guys, I would suggest you actually take a screenshot of this right now or take a note of all of the keywords
and how you can use them in Python guys. So this will actually take your really long way and your python career
and knowing exceptions in Python is always an upper hand when you're coding guys.
Hey guys welcome to Intellipaat So as we all know that Python developers are in huge demand right now. Why well Because Python
is a versatile language that is used in so many domains. For example web development
machine learning data science automation and so many more. So if you wanna career in any of these domains
then it makes sense to learn python right. So in the spirit of helping you master python, we have come up with this end to end Python video
that has everything that you will ever need before we move forward. Do subscribe to Intellipaat youtube channel so that you never
miss out on our upcoming videos. Now. Let's start this video by looking at the agenda. So this video starts with a brief introduction to Python.
After that comes a full-fledged Python tutorial. You will learn Python end to end. And by the end of it,
you'd also be able to core in python confidently. After that comes a Python project. Which will help you enhance and polish your coding skills.
And then finally this video ends with the most asked Interview questions onPython to help your next Python interview There's also shot quizzes in between the video to recap whatever you're
learning from this video so make sure you put your answers in the comments section below to know if you are correct Also if you want to become a professional python developer you can take up intellipaat
Python training courses to learn more about the course. You can visit the lake mentioned the description box below to know without any further delays. Let's get started.
What is python. Well in technical terms python is a general purpose high level interpreted
and dynamically typed programming language created by Guido van Rossum. Now you must
have heard this definition a lot. But what do all of this technical jargon mean. Let's
understand them one by one starting with General Purpose language. A language designed to
be used for writing software in various application domains without being restricted to a particular
domain. Basically what it means is that python is used in a variety of fields unlike domain
specific languages high level language a programming language that uses natural language element
which makes it a lot easier to read and understand the code. A high level language also automates significant area of computing while coding like memory allocation
and management interpreted language. Python is an interpreted language which means that
your python script is saved and executed in the same format in which you created the script
as opposed to the combined languages where the code is first translated to a set of machine specific instructions and then saved as an executable file dynamically type language
being dynamically typed means that the python parser automatically infers or identifies
the type of variable on the basis of what kind of data you have assigned to the Variable Which means that you don't need to worry about diclaring a number correctly that was stored the
sum result of an Integer and a decimal. How convenient is that. Now that we fully understand what
is Python. Let's move on to the next topic and understand what are the various reasons for choosing fighting over other languages. Well the very first factor that attracts the majority
of the coders to a programming language is the ease of learning and python by its very
nature is designed to be easy to read and the syntax of Python and can be easily
understood even by the beginners. Not just easy to read and write. Python is also free and open source not being open source means that the source code for
this language is available for the public to download use modify and distribute. This
may be the primary reason that Python has been evolving over the years and even though
it's over 20 years old it's still one of the top languages of 21st century Python also
usually involves less code lines which in turn results in less time to write the code.
So something as simple as a hello world program takes at least two to three lines of code and other languages while in Python it just takes one line. Now I don't know about
you but I feel that's quite amazing. Python is also approved by data scientists. Python
is so versatile in nature. No wonder it is increasingly becoming the top preferred language
for data science. So if you're looking for a career in data science that's all the more reason for you to choose python. Python also has a huge community which means that in case
you get stuck there's always going to be someone out there you can reach out for help and the best part about choosing Python is that it opens up a plethora of Career opportunities
for you since it has so many applications in so many domains. We'll talk about the applications in the Detail but first let's go over some of the main and
important features of Python Python follows object oriented programming paradigm
which means that programs and Python can be grouped and bundled into individual objects making the codes look neat and easy to understand now. That's just one of the many advantages
of being object oriented python is also a cross platform language which means that a
python program written on a window system will also run on Linux system but little or
no modifications required. Python has an amazingly large and rich collections of libraries Which
are also cross platform compatible. This provides users with a lot of flexibility while walking in Python. Python is known for
its simplicity and it's very easy to use which is something we cannot really say about majority
of the languages out there. Python can also be integrated with other programming languages such as C C++ Java and many more. Now we have already discussed that this of Python is very
easy to understand its English like elegant syntax is what that makes Python stand out the most among other languages.
Now that we know all the main features of Python let's move forward and learn about the top trending applications of Python.
The first one being web applications python is used to create Web applications of different
levels of complexity not just web application development python is also used for data analysis
due to abundance of libraries such as numpy pandas and more. Python is leading and preferred
choice for data analysis machine learning Python can also be used for machine learning
to implement predictive analysis by using its machine learning libraries such as scikit
learn to flow and many more game development. Python is also very popular in the field of game development as it has an entire module
named by a game for this purpose. Hey guys quick info if you want to Kickstart a career with Python and data science
domain then you can take up Python with data science course offered by Intellipaat this course will help you master all the major concepts of Python using data science domain
and it also has four major industrial based project to help you understand it better. So now let's move on with the session automation.
Python can also be used to automate repetitive stuff such as sending emails opening a browser
and posting a Facebook status and many more. So far we have discussed almost everything that you need to know about Python before
getting started with Python but then without the salary talk discussions like these almost seem incomplete don't they. So let's get to it. As we already know that Python is top
preferredlanguage for data science. The average salary for data scientists is around
127826 dollar per year Not just data science Python
is also becoming a default choice for machine learning. The average salary for machine learning
developer is at on one forty three thousand six hundred and fifty dollar per year Even the median salary of a regular Python developer is at on one twenty three thousand
four hundred and seventy three dollar per year. So it goes without saying that you could be
in a high demand and one of the highest paid professionals. If you are a skilled Python developer let's make the session a little more interesting
with a short quiz. If you look at the following code block you'll observe that I have assigned two values to the variable named A the first value is a string and the second value
is an integer. Now do I think if I run this code block and you give me an error. Well yes or no. Whatever you answer may be.
Don't forget to tell me why in the comments section down below also in the true spirit
of peer to peer knowledge sharing. Let me give you a hint the answer to this question lies somewhere in the definition of Python.
So the very first thing that would be doing is installing python on our system. So I already installed Python on my system. For those of you who don't have it you can download it
and get it installed on it. Or we should website www Dot Python dot Slashdot. So let
me just show you how easy is it to install a Python on your system. Let me open my default browser. Now i'll write here www.python.org/download
So as you can see here we have a download option of download Python three point seven node 1. If you want a different vision for Windows Linux or Mac you can just click with
these links. Example if I have windows user and I want a different version of it. Then let's see. I click the link. And you can download different versions of python from you. So
the first two options I got up here is latest Python 3 release Python three point seven
dot one and latest Python two release Python two point seven dot one five Now these are the two popular version of Python.
Now which version Should you download. Well I haven't started Python 3 in my machine. In the past there was a bit of debate in the coding community about which Python version
was the best one to learn Python two Python 3 specifically Python two point seven Python
three point five or three point seven all right Let me just tell you. Python 2 has a most
popular vision for a decade and a half. And is still in demand at certain companies. however
will more companies are moving from Python 2 to Python 3 for example
in 2017 Instagram migrated the majority of the Python code base from Python two point
seven. To Python three. As it each new version of Python. It is getting a faster run time
On the other hand nobody is currently working on to make Python 2.7 work faster.
Also the community support for Python three is more better. So for someone who wants to learn python programming for beginner i'll suggest that you should avoid spending time on a
version that is becoming obsolete. But let's download by the three for Windows.
So let's directly jump up to our first window and click on Download python 3. 7 0 1. download it.
So yeah. its downloaded. Just click over the exe file and follow the installation step
and it will get and start click it. Click on the install Now version Select the drive where you want to install it and click
on the next and it will be installed on a machine. So let's click on the install option. yes.
and the set up will install python on my system. Well if you are starting Python you will find that you will have various options where you can write all your codes and get
it executed. By default. We use the python CLI you can use any text editor like notepad
or notepad plus plus. Or you can even use any python ide. like anaconda which has Jupiter
notebook and Spyder pre installed in. Python is majorly based on indentation.
So these ide's will help you a lot way coding and debugging your program. Hey guys quick info if you want to get started. Got it career with python in data science
domain then you can take up Python with data science course offered by Intellipaat this course will help you master all the major concepts of Python used in data science domain
and it also has four major industrial based project to help you understand it better. So now let's move on with the session.
So Python my set up was successful. Let's close. for this tutorial. I'll be using
Jupiter notebook which is a web based application that will allow me to write my Python codes on it. It's very to use and gives me Interactive Data Science environment all right. If you are installing
Jupiter notebook and python I would strongly recommend you to use the anaconda distribution which already in use Python The Jupiter notebook and other commonly used packages for starting
with Python. So for downloading it let's visit the website www.anaconda.com/download
Let's open our default browser. www.anaconda.com/download So as
you can see we have a download option up here. Just click go at it an installation will start.
Open the downloaded file and follow this series of steps. And install Anaconda on your machine.
So for me I have already installed anaconda in my system. So let me just go with that
and open it. Anaconda. Navigator. This might take some time to start. So there is how the
anaconda navigator looks like after the installation. From here. I'll select my Jupiter notebook and had the launch button.
My Jupiter notebook will open in my default browser. So here's my Jupiter notebook. It opened on the local host with board number 8889
So this is how the Jupiter notebook will look like. So from here. You go into the new Select
Python 3 from the note book And this will redirect you to the python notebook page where you
can write all the different sorts of Python codes on it. Ranging from a beginner level to advance one. Now that we have set up our environment for
coding let me just give you a glimpse of how easy is Python. You want to perform addition.
It's as simple as one plus two equals three. That's it. All you need to do is one plus
two hit enter. You'll get the output. So let's move it. And let me teach you more about it.
So let's get back to our tutorial and see what's our next topic. So first topic is Python variable
How do you think the values assigned Well for assigning the values that two different methods first is assigning single value to a variable. And the next is assigning multiple
values to a variable. So let's start with assigning single value to a variable. You know what.
Unlike Java or C++ you don't have to add any data type for a variable. Just specify the
name of the variable. For example a equal ten. So depending on your data python will automatically
detect the data type of your variable. Which in this case is integer.
Let's see other example. Suppose we have a name as victor. So python will automatically
detect that this name variable is of database string since it stored the string value. All.
Right. Next we have salary us two thousand point two three. So since 2000 point two three
is nothing but a floating type. So automatically python will detect that Salary is off a data
type float. You don't have to specify a data type to a variable. Let me just show
you this example a jupiter notebook. For example I need to store a integer value. So I'll. Name a variable like A A equal ten
10 is an integer and I'm not specifying any data type for it right hit enter. Since
no error is appearing so I guess. It's correct But what if I just write int a equal to 10
As you can see it gave me an invalid syntax so you cannot use any data type before a variable
alright. Next. What if I want to store a string variable. Just like. Name equal.
John.alright hit enter Similarly for our floating data type. Salary or any variable name equal.
Two thousand. Twenty three dot two three four. Just simple as that. So now that you have
learned how you can assign a value to a variable let's see how you can have multiple assignment to a same variable. So. Let's suppose you are assigning three variables as A equal 10.
B 10 and again C. Equals. 10. So. Here we have three variables. And what you have to
do you have to assign the same value to all of them. So instead of assigning value one by one what you can just write. You can just write
a equal B equal C equal ten. Alright. And it will be executed without any error. Fine.
Now this was simple. Now what if you are to assign different value to each variable. For
example I have a variable as X equals 20 Y equal 30 and Z equal 40. So in this case
what you can do for multiple assignment you can just write X comma Y comma Z. Equal 20
comma. 30. Comma 40. It's as simple as that. Now let me just print any of the two variables
and check if we are correct or not. So let's. Print. Y and let's print A. So we go to
the output as 30 and 10. Y equals 30 & A Equal 10. Even if we want you just taken by updating
the value like A equal B equals C equal 20. And. This is make it something else like 40. 50.
And now print the value of Y and A So you will get the values as 40 and 20. All right. So this was about the assigning single
value to a variable. We also learned about assigning multiple values to a variable. A Equal
B equals c equals 10 In this example we already did. Right. And we got the output. As 2010.
So now that you know how you can assign value to a variable So let's move ahead and start
our discussion with some basics of Python. So I'll start with Python token. So what exactly
is this python Token. And Python token as the smallest meaningful component. Or it is a very basic component of
the source code. The characters are categorized as one of the four class of tokens that describe
their functions. It can be a keyword. It can be literal. It can be identifier or it can be an
operator. Fine. So let's discuss them one by one starting with keyword. So what are
these keywords. Well this keywords are some sort of reserve words which are designed for
a specific purpose. You cannot use a keyword as a variable name or an identifier name.
Some of the keywords in Python include. For. If Del break continue. True false etc
you cannot use them as a your variable. These words in python have a specific purpose and
have a specific meaning to it. Let's move ahead. Next is the identifier.
Well it is the name that you give to your variable or to your function or to your class. For example
if you are defining a variable as A equal ten then the word A or the variable A is defining
the identifier well before you start naming your variables or methods of class.
You must know that there are certain set of rules or guidelines for naming and identifer. Let's see them one by one. So the first one is no character except the under scope can
be used as an identifier. So what does that mean. Let's see. So you cannot have a variable name as. AP.@. One two three equal something
any value. You cannot have a variable name like this it will throw you in error. Or you
cannot even have a variable like. A D Dot. W.E. equal. Twenty even this will throw you
an error. But instead offered. If you write 80_WE. this would be perfectly
fine. Next as keywords should not be used as an identifying the i told you earlier also
alright. It's like if you are mentioning some keywords like if equally ten obviously this
will tell you an error. Or your writing while equal ten. Then this will give you an error. You can not use any
keyword as a name of an identifier. that as a name of a variable a class object. Or a
function. Next is Python is case sensitive. That is VAR with capital V and V are with
small v a two different identifier. Let me show you this. Suppose I mentioned A equal 20.
capital A equal 10. So what do you think the value should be if I print a. Would it
be updated to 10. Or what would be same as 20. Well let's see. So the output is 20. So it means that Small a
or the A in smaller case and a an uppercase both are treated differently in Python
print capital A alright
let's move ahead. Next. And the last one is first character of an identifier can be a character underscored school but not an integer Well what does this mean. 1280 be equal ten has
this is wrong. 1 2 Or 41@rac equals something. Given this is wrong.
But what you can do instead you just specify underscore before this. underscore 41
RAC without the athe rate part as no special character other than underscore is allowed.
Equal ten. So this thing would be accepted without any error. Fine. So this was all about
the identifiers. Next comes the Literals. Will literals are the constant use in Python.
Or you can see that literals are the data given in a variable or a constant. Basically
there are four different types of literals String literals numeric literal boolean literal
and special literal. Let's have a look at them one by one. Starting with string literals Well you can create a
string literal just by enclosing a text within the code. Both single and double quotes are allowed in a string literal. For example. You can have a variable as name one. Equal. double
quotes. John. And you can even have a variable as name2 equal within single code. John.
Or. Maybe James. both are correct You're not getting any error right. So since you are not getting any error
in the output so it verifies that you can use both the single and codes and string literal
OK. Now what if you have multiple line input. So how are you print that Let's see from multiple
line input. multiple Equal. So all you need to do is mention three single codes.
Just three. And after that start writing like string one. And two different line string
to. Line three string three. And so on alright again you have to enter using three codes. Fine. Executed.
You won't get any error. And if you print the multi line. You. Get. The output as.
STR 1 STR 2 STR 3 and three different lines.
Hey guys. Quick info if you want to get started career with python in data science domain then you can take up Python with data science course offered by Intellipaat this
course will help you master all the major concepts of Python used in data science domain and it also has four major industrial based project to help you understand it better. So now let's
move on with the session. Let's get back to the tutorial. So what was our input. Name one equal John name and equals James friend. Name one name to.
And we got the output. Yeah we discussed this. We have a multi line thing within triple
quotes. You had a multi line thing in which you needed the output and three different
lines. So yeah you got it using three quotes. Fine. So this was about these string literal
late in the session we'll see what are the various other function you can perform on these string literal Using some of the python's existing library.
For now let's move ahead and let me give you an overview of numerical literal. So what are these numerical literals.
And numerical literal this is a character string whose characters are selected from the digits 0 to 9 It consists of assigned characters It can be either positive or negative.
Or it can even contain a decimal point well if the little contains no decimal point. Then
it means that it's an integer. If your number is too long and we are capital L or small
L at the end of the number. It makes it a long number. Or if the literal contains a decimal
point it becomes a float. But yes remember that you can only use one decimal point in
a number. Have you seen a number with more than one decimal point. Never. Right. Well
just for the FII I'm not talking about the IP. Right. By the way in Python the value of integers not restricted by the number of width. It can
expand to the limit of the available memory. And since the value of the integer depends on the available memory. So no special arrangement was made in Python for storing large number.
So any doubt up in this portion. Well if you have these added and the comments section below. So moving on ahead. Next we have is the boolean literally. Well these boolean
literal how just two values either true or false. Well remember that both these true and false are also a keyword. So you cannot use them
as an identifier. They are generally used when we are dealing with some condition whose outcome is either true or false. All right. So this was a body boolean literal. Next.
How is this special literal. Well Python has just one special literal as none which is used
to specify the field that is not created. Well if you are from a programming background or
you just have a basic knowledge about C C++ or Java. I think you must have heard about the keyword null All right. Well if yes then this null is nothing
but the equivalent of null keyword and C C++ or Java. So I hope that you guys have
understood about a literal. There are many cases where you can use none. Let's see an
example. It's a self-explanatory example. Just go to it will proceed. nothing needs
to be explained in this. So let's move ahead. OK. I hope that you have understood about literals. So let's move ahead to operators.
So what are these operators. Well these are some specific character which have a specific task to perform. And based on the function and the task the operators are for those segregated
and do. Seven different types of operators. Arithematic operator assignment operator companion
operator logic operator a bitwise identity and membership operator. Fine. So let me discuss
them one by one starting with arithematic operator. With arithematic operators other one which is
used to perform some arithematic calculation. So what it does it takes to operate to perform operation on them.
For example two plus three. So here two and three are operating. And a character plus
over here is nothing but an arithematic operator. So there are other arithematic operators do. Like
plus minus multiplication division mode all these characters are a part of an arithematic
operator. Let me just show you one more example. Like one plus two. So you have 1& 2 are
the operatant and plus sign is The arithmetic operator. One minus two again minuses the automatic
operator. Two mode one mode is what the arithmetic operator.
That's move. Next we have is the assignment operator. Well this assignment operator is
used to assign a value to a variable the character which comes under this operator are. Equal
to plus equal to minus equal to multiplication equal to an etc. For example you declare
a variable as var equal 10. So this equals to is your assignment operator and is used
to assign value to a variable. Let's get back to our Jupiter notebook and learn more about
it. For example I'm defining a variable var equal 10. So this equal does nothing but a assignment operator.
var plus equals 10. Then again an assignment operator. But what does this mean. So what
does this mean. Well it means that var equal. var Plus 10. So if you bring the value
of var what do you think the output should be. Well you'll get the output as 20 since
the value of var is already 10 so 10 plus 10. It's 20. So the updated value of var is 20.
Similarly you can perform var minus equal to 10. And again get your value printed.
So again the updated value of that would be. 20 minus 10 10. So this plus equal to or minus
equal to it does generally named as a shorthand. Which means I subtract and assign value to
said Same example as mentioned over here like A equal ten A multiply equal
to 10. So it means that equal ten into 10 when you print A you get the output as
a hundred. So next we have as comparison operator. Well it is used to compare two values and
it returns True or false as the output. the operators which are apart of it are Less than greater than
less than equal to greater than equal to not equal to For example. Let's see what example
we have up here. A Equal 10 B equal 20 A is greater than B. Obviously 10 is not greater then
20. Right. So it is giving me false as the output Fine. So let's move ahead.
Next is the logical operator. Well these logical operator I used to perform some logical calculation
and the operators are the keywords which are a part of it R and R and not.
For example we have A equal is less than 10 and 2 is greater than minus 1. Then print
A So you are getting output as false. Okay let's jump back to our Jupiter notebook
and see why we are getting the output as false So you heard A equal. Ten is less than 10.
2 is greater than minus 1. So if you see we have 2 comparison operator up here. So what
does the value of 10 less than 10. Since it is a comparison operator so it will give me
a false right and is 10 not less than 10. And. tWo is greater than minus 1 this is true. So you can summarize this as. False and true.
So since it's false and true therefore it equals to false. Well how well do you remember the
binary calculation that you had learned in your college. It's like one dot one. Equals
1 or 1.0 equals zero or one and one equals 1 or 1 and 0 is 0. So consider true as one
and false as zero. So false and 2 is false. That's why you got the result as false.
Now if you print the value of a. You'll get the output as false. So next how is the bitwise
operator so. This. Operator is used to perform the bitwise calculation. This operator includes.
And or. Left shift right shift not. Alright. So let's see they use one by one. Let's see
the example of what we have up here. So we have seven or five. The output is seven 7
seven and five. The output is five. So how do you think we are getting this output. Let's see the calculation. So how does calculated. So if you convert seven into binary form
it's triple 1. And if you can would five into its binary form it's 1 0 1. Now if you are
performing or so basically you're performing a binding addition on it. And if you're performing it and you're performing a binary multiplication on it. All right. So let's see. So if you're
performing a binary addition on it. So one plus one is one. One to zero is again one.
And again one plus one is one. So that's why you're getting the order of seven and five as seven. Even you can verify
this using the calculator. Calculator open a calculator. So seven or five. So
you'll get the output as seven. That's correct Fine. Next operator that we have got up here.
Is there a till operator or not operator. Well this operator is used to performance not operation.
So what does not of seven. What is not of seven. It's minus eight right. How it
is minus eight. Let me just show using a notepad. lets open notebook. so seven in it;s binary format with forbids as 0 1 1
1. I like if you perform a not of 7 i.e., Not of. 7. What do you get. All the bids
would be switched like 0 would be converted to 1 again 1 to 0 again 1 to 0. So you'll get
1000 and automatically and negative sign would be added at the beginning. So you'll get minus
1000 in binary form which you convert into decimal you'll get it as minus of eight.
That's why. The output of not of seven is minus eight. Next is the left
shift and night shift operator. Let's see what is the output first. For example. I'm
trying for a. Right shift. And ten right shift to what is the output two. Let's see how we
got the output as two. Open our notepad. Let's move this. so ten in it's binary form what it
is it's 1 0 1 0. Well when you're performing the right shift you're telling the interpreter
that you want to shift your bids towards right. And how many bits you on the shift is basically two since you have mentioned 10. Right sure
2. All right. So 1 0 1 0 shifted two bits to the right 0 0 and move. 1 0 from the end.
So this is how you are shifting two bits towards right. So you've got the result as 0 0 1 0. Now if you convert this into decimal form you'll get the output as 2 fine. So
it's like you're trying to push to bits from the left towards the right.
Next we have is. 10 left shift two what or does the output. It's 40. Let's see how we
got that output again 10 in its binary form is. 1 0 1 0. So when you're performing a left
shift it's like pushing the bits from right towards the left. So ten left shift to is
like 1 0 1 0 and you're adding two bits in the end. Since you are shifting two bits to
the left. So you're getting 1 0 1 triple 0. So let's convert this into decimal form.
So 1 0 1 triple 0 and its decimal form is what 40. So that is why you're getting that
as early as 40. So. A shortcut trick. Well the short trick is that just start and zeros
equal to the number of bits that you want to shift towards the left. Like. For example I want to perform ten left shift three so my output should be. 1 0 1 triple. 0 and 1
more zero. since I'm moving three zeros. since I'm moving three zeros towards
the left. So let's convert it so it's. 80. So you're getting the output as 80. Let's verify it
again. Well if you perform ten. Left shift three and you get the output as 80 fine. Well
I hope the Bitwise operators clear to you guys. But in case your slightest doubt please add your doubt to the comments section below and we'll try to reply them at the earliest.
For now we can just move ahead to the. Identity operator. Will these operators are used to
test if two operant shades and identity. The operators which are a part of it is and is not. These are basically two keywords
for example X equal ten X is ten it's true X then X is not ten it's false.
It is just used to test if the operant shares identity or not. The next and
the final operator in python as the membership operator. This operator is used to test
whether the value is a member of a sequence or not. The sequence may be a list. It can be a string or it can be a tuple.
I know some of you guys might be thinking What is this list or does this tuple. Guys. I'd say that. Just be patient. I teach you about them in detail during the session. For
now you can just understand that this list is almost same as array that you had already studied in C C++ or Java. It's almost same as that. And this membership operator it is
used when you want to check if a certain element is present in a list or not. So let's see
what he does with that a part of it. So well we have in and not in keywords which are a part of this membership operator.
let's see an example. So lets the example up here So we have defined a list or you can see we
have defined an array which consist of dog cat and wolf. So we are checking for line and
pet. Since pet is the name of our list. Or an array you can say so we are searching for
line impact. So since there is no line in it. So the result is false. Next what you
are doing was seeing for wolf and pets So yeah wolf is present in pet. So we are getting out put as true. So this was all
about the python token. So moving on ahead we'll learn about data type and python. Well
Python as Majorly two datatypes. Immutability datatype and mutability datatype. Immutable
are one which cannot be changed or modified. And mutable are the one which can be changed
only. Immutabledata type consist of numbers strings and tuples on the other hand
mutable datatype They consist of list dictionaries and sets all like.
So let's discuss about them one by one starting with. Numbers. So under the topic of numeric
literals I've already discussed that Python has four different types of numerical literals and integer long integer floating number and complex number. Well I have also told
you that you don't need to specify the data type of a variable why you're declaring it.
Remember. Python would automatically convert a number from one type to another if it means. Fine. Don't worry if you want to explicitly convert one datatype to another. You can
do it using int function long function float function or complex function. You have that option available with you. For now let's just move ahead and see
how we can find the data type of a variable. Suppose I'm declaring a integer variable.
A Equal 10. Let's define the name. Jill. Now what if I want to check the datatype of These
variables. So how can I do that. So for that we have type function. So print the type of
variable Or. print the type of.
Variable name. Or print the type of. Variable.
Salary fine execut it. Say there's a.
you can see that variable a is of type of Integer Variable the name is of type String and variable
salaries of type float. Fine. Let's get back to a tutorial. So this was about the numbers.
Next as strings. Will anything which is written under the single or double quotes is treated
as a string. Let's perform some operation on string and understand them in detail Suppose
I have first string as hello world. My second string is Intellipaat.
Now what if I want to print first character from the string one and the last character from string 2. So how will I do that. Let's see. So what you can do. Print str 1. and
I need the first character. So my first characters index number zero. I'll just mention SR
1 as 0. And I want the last character from string two right. So print STR 2. If you want the
last character to specify minus 1. Execute it. So you got the output as capital H and
small t. Since capital H is the first character from string one small t is The. Last character
from string two. So now what if I need to extract hello from hello world. So how will
I do that. What I need to do. Extract. Hello from hello world. It's all you need to do is print. From
string string. One. Hello. Starting from zero. And it should end till zero one two three four
should end till five. And execute it so you'll get the output as Hello.
This is how you can collect the substring from a string. One thing to remember is that
if you check the index number of Hello. So it would end at 0 1 2 3 4. 4. Right. So when
you want a substring so you have to mention it as plus 1. So four plus one is 5 So zero
5. It won't include the fifth portion. Generally if you are extracting a substring the last
number which are including that thing is not included. It means that everything which would
be between zero and less than five. Would come as the substring. Let's perform some operations on it. So first we have is
the find function. So what are these find function. Well this find function returns
the position of the string. Let's take an example. For example. I have a string as STR equal.
Attachment what I need to do I want to find the portion of the substring me from it. So STR dot find
an inside that. Mention what do you want to find. Like I want to find a portion of me. That's
executed. So you got the output as six. Since me starts from six. Zero one two three four five.
And. It's on sixth position. That's why you got to position as six. Next is replace. Will this
replace function as used to replace one character or string with other. Fine. It's like. What
if I want to replace this Emmy with M so STR dot replace. What I want to replace. First
mentioned that I want to replace ME with what I want to replace. It's m.
Fine. Execute it. So you've got the output as. Attachment. Attachment. Fine Me is
replaced with M. One more thing that you can do up here is. Let me just show you. You
can convert the word attachment into attach. Let's see how attach not replace. So what
you need to replace from here is Ment and you don't want Ment from this. So what
should you replace
it with. You can replace it with space that's it.



